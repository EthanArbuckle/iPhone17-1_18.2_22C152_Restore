IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  IPC::Encoder *v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(void *)(a1 + 8);
  v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v5 = 3289;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF890;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF890;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v5 = 3291;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v10);
  if (v12)
  {
    *(void *)a1 = v10;
    uint64_t v5 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)(a1 + 8) = v5;
    uint64_t result = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      v9 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v9();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF8B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF8B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3290;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF8E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF8E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3293;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF908;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF908;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3288;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199349EECLL);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = 120 * v8;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode(v5, v9);
          v9 += 120;
          v10 -= 120;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199349ECCLL);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF930;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF930;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3292;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (v6 = v4, unsigned __int16 v7 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a2), v7 > 0xFFu)
    && (char v9 = v7,
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v8, (uint64_t)&v16), v18))
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v16;
    uint64_t v11 = v17;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)(a1 + 24) = v11;
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v10);
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v13 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      uint64_t v15 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v15();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionDataType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionDataType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionDataType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v9 = v1;
    uint64_t v10 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v7 = a1[3];
    if (!v7)
    {
LABEL_10:
      LODWORD(v8) = 0;
      return v7 | (v8 << 8);
    }
    if (v9) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)v7 + 16))(v7, v10);
    }
LABEL_9:
    LOBYTE(v7) = 0;
    goto LABEL_10;
  }
  unsigned int v5 = *v4;
  if (v5 > 4) {
    goto LABEL_9;
  }
  char v6 = 8 * v5;
  unint64_t v7 = 0x400020100uLL >> v6;
  unint64_t v8 = 0x100010100uLL >> v6;
  return v7 | (v8 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISH_SH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF958;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISH_SH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF958;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISH_SH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3296;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3295;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 8);
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934A5D8);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934A5F8);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 8)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(void *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3299;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3297;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3294;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3298;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    WTF::URL::URL(v4, (uint64_t *)(a2 + 16));
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)(a1 + 64) = v5;
    *(unsigned char *)(a1 + 72) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 154) = *(_OWORD *)(a2 + 154);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISI_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISI_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISI_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3302;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 192);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19934ADF0);
    }
    unsigned char *v5 = 0;
    if (*(_DWORD *)(a2 + 192) == 1)
    {
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
    }
    goto LABEL_21;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19934AE10);
  }
  unsigned char *v5 = 1;
  if (*(_DWORD *)(a2 + 192))
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
    uint64_t v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSG_ISK_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(v10);
  }
  int v8 = *(unsigned __int8 *)(a2 + 184);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19934AE30);
    }
    unsigned char *result = 1;
    if (!*(unsigned char *)(a2 + 184)) {
      goto LABEL_22;
    }
    return IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(a1, (char *)(a2 + 8));
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19934AE50);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSG_ISK_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSG_ISK_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSG_ISK_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3319;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISF_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISF_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISF_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3304;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3307;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3306;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3312;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934B568);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(char **)a2;
        uint64_t v10 = 176 * v8;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v5, v9);
          v9 += 176;
          v10 -= 176;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEENS7_15WebExtensionTab16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934B548);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEENS7_15WebExtensionTab16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFB38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEENS7_15WebExtensionTab16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFB38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEENS7_15WebExtensionTab16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3313;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a2, &v11), v12))
  {
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v8 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (uint64_t *)*((void *)a2 + 3);
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v10();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFB60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFB60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3309;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFB88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFB88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3310;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFBB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFBB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3303;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFBD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFBD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3318;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFC00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFC00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3300;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (v7)
    {
      unsigned char *v6 = 0;
      if (*(_DWORD *)(a2 + 40) == 1) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_9;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x19934BE40);
  }
  if (!v7) {
    goto LABEL_10;
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 40)) {
    goto LABEL_8;
  }
LABEL_4:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
LABEL_9:
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_SF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFC28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_SF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFC28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_SF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3316;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yLSD_1EEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFC50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yLSD_1EEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFC50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yLSD_1EEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3301;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFC78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFC78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3308;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934C29CLL);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934C2BCLL);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 8)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v5, *(double *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFCA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFCA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3317;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFCC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFCC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3315;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a2, &v17), v18))
  {
    IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>((uint64_t)&v19, (uint64_t *)a2);
    if (v35)
    {
      if (v18)
      {
        *(void *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v17;
        *(_OWORD *)(a1 + 24) = v19;
        *(unsigned char *)(a1 + 40) = 0;
        *(unsigned char *)(a1 + 48) = 0;
        if (v21)
        {
          uint64_t v7 = v20;
          uint64_t v20 = 0;
          *(void *)(a1 + 40) = v7;
          *(unsigned char *)(a1 + 48) = 1;
        }
        *(unsigned char *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 72) = 0;
        if (v24)
        {
          *(void *)(a1 + 56) = v22;
          uint64_t v8 = v23;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          *(void *)(a1 + 64) = v8;
          *(unsigned char *)(a1 + 72) = 1;
        }
        *(unsigned char *)(a1 + 80) = 0;
        *(unsigned char *)(a1 + 96) = 0;
        if (v27)
        {
          *(void *)(a1 + 80) = v25;
          uint64_t v9 = v26;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 88) = v9;
          *(unsigned char *)(a1 + 96) = 1;
        }
        *(unsigned char *)(a1 + 104) = 0;
        *(unsigned char *)(a1 + 112) = 0;
        if (v29)
        {
          uint64_t v10 = v28;
          uint64_t v28 = 0;
          *(void *)(a1 + 104) = v10;
          *(unsigned char *)(a1 + 112) = 1;
        }
        *(unsigned char *)(a1 + 120) = 0;
        *(unsigned char *)(a1 + 128) = 0;
        if (v31)
        {
          uint64_t v11 = v30;
          uint64_t v30 = 0;
          *(void *)(a1 + 120) = v11;
          *(unsigned char *)(a1 + 128) = 1;
        }
        *(unsigned char *)(a1 + 136) = 0;
        *(unsigned char *)(a1 + 144) = 0;
        if (v33)
        {
          uint64_t v12 = v32;
          uint64_t v32 = 0;
          *(void *)(a1 + 136) = v12;
          *(unsigned char *)(a1 + 144) = 1;
        }
        *(_WORD *)(a1 + 152) = v34;
        *(unsigned char *)(a1 + 160) = 1;
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
      }
      else
      {
        __break(1u);
      }
      return;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 160) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 160) = 0;
  }
  uint64_t v13 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v14 = *((void *)a2 + 3);
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    uint64_t v16 = *(void (**)(void))(*(void *)v14 + 16);
    v16();
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFCF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFCF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EE4callESY_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3305;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 136);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 104);
    if (*(unsigned char *)(a1 + 96))
    {
      unint64_t v3 = *(WTF **)(a1 + 80);
      if (v3)
      {
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 88) = 0;
        WTF::fastFree(v3, v2);
      }
    }
    if (*(unsigned char *)(a1 + 72)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v2);
    }
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = 0;
      if (v4) {
        CFRelease(*(CFTypeRef *)(v4 + 8));
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFD18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFD18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3311;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFD40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFD40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3314;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFD68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFD68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3320;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934CDB0);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = 80 * v8;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode(v5, v9);
          v9 += 80;
          v10 -= 80;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934CD90);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFD90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFD90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3321;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934CFA0);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 96) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934CFC0);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 96))
  {
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_21;
  }
  int v8 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v8)
  {
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19934D000);
    }
    unsigned char *v9 = 0;
    goto LABEL_13;
  }
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x19934CFE0);
  }
  unsigned char *v9 = 1;
  if (!*(unsigned char *)(a2 + 88))
  {
LABEL_21:
    uint64_t v15 = std::__throw_bad_optional_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v15);
  }
  IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode(v5, a2 + 8);
LABEL_13:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFDB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFDB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3322;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934D1F4);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 112) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934D214);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 112))
  {
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_21;
  }
  int v8 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v8)
  {
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19934D254);
    }
    unsigned char *v9 = 0;
    goto LABEL_13;
  }
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x19934D234);
  }
  unsigned char *v9 = 1;
  if (!*(unsigned char *)(a2 + 104))
  {
LABEL_21:
    uint64_t v15 = std::__throw_bad_optional_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(v15);
  }
  IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(v5, a2 + 8);
LABEL_13:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFDE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFDE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3325;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 104);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19934D468);
    }
    unsigned char *v5 = 0;
    if (*(_DWORD *)(a2 + 104) == 1)
    {
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
    }
LABEL_14:
    int v8 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned char *)IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>(v8);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19934D488);
  }
  unsigned char *v5 = 1;
  if (*(_DWORD *)(a2 + 104)) {
    goto LABEL_14;
  }

  return IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(a1, a2 + 8);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>(uint64_t *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  if (v2 >= 0x100u)
  {
    unsigned __int8 v6 = v2;
    unsigned __int16 v7 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a1);
    int v5 = v7 > 0xFFu;
    if ((v7 & 0xFF00) != 0) {
      unsigned __int8 v4 = v6;
    }
    else {
      unsigned __int8 v4 = 0;
    }
    if ((v7 & 0xFF00) != 0) {
      unsigned __int8 v3 = v7;
    }
    else {
      unsigned __int8 v3 = 0;
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
    int v5 = 0;
  }
  int v8 = v5 << 16;
  uint64_t result = v8 & 0xFFFF0000 | (v3 << 8) | v4;
  if (!v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        uint64_t v13 = result;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFE08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFE08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3324;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFE30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFE30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3323;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  unsigned __int8 v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19934D88CLL);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = 96 * v8;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(v5, v9);
          v9 += 96;
          v10 -= 96;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934D86CLL);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFE58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFE58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISF_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3327;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFE80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFE80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3326;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::get@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1;
  {
    WebKit::webExtensionContextProxies(void)::contexts = 0;
  }
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(&WebKit::webExtensionContextProxies(void)::contexts, &v4);
  if (result) {
    ++*(_DWORD *)(result + 16);
  }
  *a2 = result;
  return result;
}

WebKit::WebExtensionContextProxy *WebKit::WebExtensionContextProxy::WebExtensionContextProxy(WebKit::WebExtensionContextProxy *this, const WebKit::WebExtensionContextParameters *a2)
{
  *((_DWORD *)this + 4) = 1;
  *((void *)this + 1) = 0;
  unsigned __int8 v3 = (unsigned int *)((char *)this + 8);
  *(void *)this = &unk_1EE9FFF10;
  *((void *)this + 3) = *(void *)a2;
  *((void *)this + 4) = 0;
  WTF::URL::URL((WebKit::WebExtensionContextProxy *)((char *)this + 40));
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0x7FF8000000000000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  {
    uint64_t v4 = WebKit::webExtensionContextProxies(void)::contexts;
    if (WebKit::webExtensionContextProxies(void)::contexts)
    {
LABEL_4:
      int v5 = *(_DWORD *)(v4 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    WebKit::webExtensionContextProxies(void)::contexts = 0;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v4 = WebKit::webExtensionContextProxies(void)::contexts;
  if (WebKit::webExtensionContextProxies(void)::contexts) {
    goto LABEL_4;
  }
  int v5 = 0;
LABEL_5:
  uint64_t v6 = *((void *)this + 3);
  unint64_t v7 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v5 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (void *)(v4 + 16 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_13:
    *uint64_t v11 = v6;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3, (uint64_t)this);
    atomic_uint *volatile v16 = *(atomic_uint *volatile *)v3;
    atomic_fetch_add(*(atomic_uint *volatile *)v3, 1u);
    long long v17 = (unsigned int *)v11[1];
    v11[1] = v16;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v15);
    }
    if (WebKit::webExtensionContextProxies(void)::contexts) {
      int v18 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) = v18;
    if (WebKit::webExtensionContextProxies(void)::contexts) {
      int v19 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 16) + v19);
    unint64_t v21 = *(unsigned int *)(WebKit::webExtensionContextProxies(void)::contexts - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20) {
        goto LABEL_23;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    goto LABEL_23;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != v6)
  {
    if (v12 == -1) {
      uint64_t v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v5;
    uint64_t v11 = (void *)(v4 + 16 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        void *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v4 - 16);
        uint64_t v6 = *((void *)this + 3);
        uint64_t v11 = v13;
      }
      goto LABEL_13;
    }
  }
LABEL_23:
  {
    char v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v22 = *((void *)this + 3);
  v26[0] = 166;
  v26[1] = v22;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)v26, (uint64_t)this, &v25);
  return this;
}

void sub_19934DE14(_Unwind_Exception *a1, void *a2)
{
  int v5 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  void *v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(unsigned int **this)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), (IPC::MessageReceiver *)this);
  unsigned __int8 v3 = (unsigned int **)this[24];
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (unsigned int **)this[22];
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v2);
  }
  int v5 = this[21];
  this[21] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v2);
  }
  uint64_t v6 = (unsigned int **)this[19];
  if (v6) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v2);
  }
  unint64_t v7 = this[18];
  this[18] = 0;
  if (v7) {
    WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v7);
  }
  unint64_t v8 = (WTF::StringImpl **)this[16];
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)v2);
  }
  unint64_t v9 = this[13];
  this[13] = 0;
  if (v9) {
    CFRelease(v9);
  }
  unsigned int v10 = this[12];
  this[12] = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (WTF::StringImpl **)this[11];
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, (WTF::StringImpl *)v2);
  }
  uint64_t v12 = (WTF::StringImpl *)this[10];
  this[10] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  int v14 = this[4];
  this[4] = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v2);
  }
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(this);

  WTF::fastFree(v1, v2);
}

void WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextProxy *this@<X0>, const WebKit::WebExtensionContextParameters *a2@<X1>, WebKit::WebExtensionControllerProxy *a3@<X2>, void *a4@<X8>)
{
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)this;
  v10[2] = (uint64_t)&v11;
  uint64_t v11 = a3;
  WebKit::WebExtensionContextProxy::get(*(void *)this, &v9);
  uint64_t v7 = v9;
  if (v9)
  {
    WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(v10, v9);
    ++*(_DWORD *)(v7 + 16);
    *a4 = v7;
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v7 + 16));
  }
  else
  {
    unint64_t v8 = (WebKit::WebExtensionContextProxy *)WTF::fastMalloc((WTF *)0xD0);
    WebKit::WebExtensionContextProxy::WebExtensionContextProxy(v8, this);
    *a4 = v8;
    WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(v10, (uint64_t)v8);
  }
}

void sub_19934E1C8(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a1 + 8), *a1);
  uint64_t v6 = *(atomic_uint **)(v4 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *(unsigned int **)(a2 + 32);
  *(void *)(a2 + 32) = v6;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  uint64_t v8 = a1[1];
  WTF::String::operator=((uint64_t *)(a2 + 40), (WTF::StringImpl **)(v8 + 8));
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(a2 + 64) = v9;
  WTF::String::operator=((uint64_t *)(a2 + 80), (WTF::StringImpl **)(a1[1] + 48));
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a2 + 88), (void **)(a1[1] + 56));
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a2 + 128), (void **)(a1[1] + 64));
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (WTF::URL *)(v10 + 8);
  uint64_t v13 = [_WKWebExtensionLocalization alloc];
  int v14 = WebKit::parseJSON(v11, 0, 0);
  WTF::URL::host(v12);
  if ((v15 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  if (v48[0]) {
    atomic_uint *volatile v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    atomic_uint *volatile v16 = &stru_1EEA10550;
  }
  long long v17 = [(_WKWebExtensionLocalization *)v13 initWithLocalizedDictionary:v14 uniqueIdentifier:v16];

  int v19 = v48[0];
  v48[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }

  WTF::RetainPtr<_WKWebExtensionLocalization>::operator=((const void **)(a2 + 96), v17);
  uint64_t v20 = WebKit::parseJSON(*(void *)(a1[1] + 80), 0, 0);
  WTF::RetainPtr<NSDictionary>::RetainPtr(v48, v20);
  unint64_t v21 = *(const void **)(a2 + 104);
  *(WTF::StringImpl **)(a2 + 104) = v48[0];
  v48[0] = 0;
  if (v21) {
    CFRelease(v21);
  }

  uint64_t v22 = a1[1];
  *(void *)(a2 + 112) = *(void *)(v22 + 88);
  *(unsigned char *)(a2 + 120) = *(unsigned char *)(v22 + 96);
  if (*(unsigned char *)(v22 + 112))
  {
    uint64_t v23 = *(WebKit::WebPage **)a1[2];
    if (v23 && *(void *)(v22 + 104) == *((void *)v23 + 5))
    {
      WebKit::WebExtensionContextProxy::setBackgroundPage((WebKit::WebExtensionContextProxy *)a2, v23);
    }
    else
    {
      {
        v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v47);
      }
      v48[0] = *(WTF::StringImpl **)(v22 + 104);
      uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v48);
      if (v24)
      {
        uint64_t v25 = (CFTypeRef *)v24;
        CFRetain(*(CFTypeRef *)(v24 + 8));
        WebKit::WebExtensionContextProxy::setBackgroundPage((WebKit::WebExtensionContextProxy *)a2, (WebKit::WebPage *)v25);
        CFRelease(v25[1]);
      }
    }
  }
  uint64_t v26 = a1[1];
  char v27 = (void **)a1[2];
  uint64_t v28 = *(unsigned int *)(v26 + 132);
  if (v28)
  {
    uint64_t v29 = *(void *)(v26 + 120);
    uint64_t v30 = 40 * v28;
    do
    {
      char v31 = *v27;
      if (*v27 && *(void *)v29 == v31[5])
      {
        long long v32 = *(_OWORD *)(v29 + 24);
        *(_OWORD *)v48 = *(_OWORD *)(v29 + 8);
        long long v49 = v32;
        WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2 + 176, v31, (uint64_t *)v48);
      }
      else
      {
        {
          v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v36);
        }
        v48[0] = *(WTF::StringImpl **)v29;
        uint64_t v33 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v48);
        if (v33)
        {
          __int16 v34 = (CFTypeRef *)v33;
          CFRetain(*(CFTypeRef *)(v33 + 8));
          long long v35 = *(_OWORD *)(v29 + 24);
          *(_OWORD *)v48 = *(_OWORD *)(v29 + 8);
          long long v49 = v35;
          WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2 + 176, v34, (uint64_t *)v48);
          CFRelease(v34[1]);
        }
      }
      v29 += 40;
      v30 -= 40;
    }
    while (v30);
    uint64_t v26 = a1[1];
  }
  uint64_t v37 = *(unsigned int *)(v26 + 148);
  if (v37)
  {
    uint64_t v38 = *(void *)(v26 + 136);
    uint64_t v39 = a2 + 192;
    uint64_t v40 = 40 * v37;
    do
    {
      v41 = *v27;
      if (*v27 && *(void *)v38 == v41[5])
      {
        long long v42 = *(_OWORD *)(v38 + 24);
        *(_OWORD *)v48 = *(_OWORD *)(v38 + 8);
        long long v49 = v42;
        WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v39, v41, (uint64_t *)v48);
      }
      else
      {
        {
          v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v46);
        }
        v48[0] = *(WTF::StringImpl **)v38;
        uint64_t v43 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v48);
        if (v43)
        {
          v44 = (CFTypeRef *)v43;
          CFRetain(*(CFTypeRef *)(v43 + 8));
          long long v45 = *(_OWORD *)(v38 + 24);
          *(_OWORD *)v48 = *(_OWORD *)(v38 + 8);
          long long v49 = v45;
          WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v39, v44, (uint64_t *)v48);
          CFRelease(v44[1]);
        }
      }
      v38 += 40;
      v40 -= 40;
    }
    while (v40);
  }
}

WTF::StringImpl *WebKit::WebExtensionContextProxy::isUnsupportedAPI(WebKit::WebExtensionContextProxy *this, WTF::StringImpl **a2, const WTF::ASCIILiteral *a3)
{
  uint64_t v4 = *a2;
  if (*a2 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    uint64_t v15 = v4;
    long long v18 = *(_OWORD *)a3;
    char v17 = 46;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v15, &v17, (uint64_t *)&v18, &v16);
    uint64_t result = v16;
    if (!v16)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = v15;
    uint64_t v15 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        uint64_t result = v16;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v7)
    {
      a2 = (WTF::StringImpl **)(v7 - 1);
      if (v7 == 1)
      {
        uint64_t result = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t result = (WTF::StringImpl *)v18;
      }
      atomic_uint *volatile v16 = result;
    }
    else
    {
      uint64_t result = 0;
      atomic_uint *volatile v16 = 0;
    }
  }
  uint64_t v8 = *((void *)this + 11);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 - 8);
    unsigned int v10 = *((_DWORD *)result + 4);
    if (v10 >= 0x100) {
      unsigned int v11 = v10 >> 8;
    }
    else {
      unsigned int v11 = WTF::StringImpl::hashSlowCase(result);
    }
    for (i = 0; ; unsigned int v11 = i + v13)
    {
      int v13 = v11 & v9;
      int v14 = *(WTF **)(v8 + 8 * (v11 & v9));
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          uint64_t v8 = 0;
          goto LABEL_28;
        }
        if (WTF::equal(v14, v16, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v8 = 1;
LABEL_28:
    uint64_t result = v16;
  }
  atomic_uint *volatile v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return (WTF::StringImpl *)v8;
}

void sub_19934E840(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebExtensionContextProxy::hasPermission(WebKit::WebExtensionContextProxy *this, WTF::StringImpl **a2)
{
  WTF::WallTime::now(this);
  double v7 = v6;
  if (*((double *)this + 17) <= v6)
  {
    uint64_t v8 = (uint64_t *)((char *)this + 128);
    uint64_t v9 = *((void *)this + 16);
    *((void *)this + 17) = 0x7FF0000000000000;
    if (v9)
    {
      int v10 = *(_DWORD *)(v9 - 4);
      if (v10)
      {
        int v11 = 0;
        unsigned int v12 = v10 - 1;
        do
        {
          uint64_t v13 = v12;
          int v14 = (WTF::StringImpl **)(v9 + 16 * v12);
          if ((unint64_t)*v14 + 1 >= 2)
          {
            double v15 = *(double *)(v9 + 16 * v12 + 8);
            if (v15 <= v7)
            {
              WTF::HashTraits<WTF::String>::customDeleteBucket(v14, v4);
              ++v11;
            }
            else if (v15 < *((double *)this + 17))
            {
              *((double *)this + 17) = v15;
            }
          }
          --v12;
        }
        while (v13);
        uint64_t v16 = *v8;
        if (v11)
        {
          *(_DWORD *)(v16 - 16) += v11;
          uint64_t v17 = *v8;
          if (*v8) {
            int v18 = *(_DWORD *)(v17 - 12);
          }
          else {
            int v18 = 0;
          }
          *(_DWORD *)(v17 - 12) = v18 - v11;
          uint64_t v16 = *v8;
        }
        if (v16)
        {
          unsigned int v19 = *(_DWORD *)(v16 - 4);
          unsigned int v20 = 6 * *(_DWORD *)(v16 - 12);
          if (v19 >= 9 && v20 < v19) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize((uint64_t *)this + 16);
          }
        }
      }
    }
  }

  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 16, a2, v5);
}

WTF::StringImpl **WebKit::WebExtensionContextProxy::updateGrantedPermissions(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t result = *(WTF::StringImpl ***)(a1 + 128);
  *(void *)(a1 + 128) = v3;
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  *(void *)(a1 + 136) = 0x7FF8000000000000;
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::toDOMWrapperWorld(WebCore *a1, int a2)
{
  if (a2 != 1) {
    return WebCore::mainThreadNormalWorld(a1);
  }
  uint64_t result = *((void *)a1 + 18);
  if (!result)
  {
    uint64_t result = 97;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4;
      if (*v4 != (unsigned int *)-1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  uint64_t v0 = WebKit::webExtensionContextProxies(void)::contexts;
  if (WebKit::webExtensionContextProxies(void)::contexts)
  {
    int v1 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 4);
    int v2 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12);
    if (v1)
    {
      unsigned int v3 = v1 << (6 * v2 >= (2 * v1));
      goto LABEL_6;
    }
  }
  else
  {
    int v1 = 0;
    int v2 = 0;
  }
  unsigned int v3 = 8;
LABEL_6:
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v3 + 16));
  WebKit::webExtensionContextProxies(void)::contexts = (uint64_t)(result + 4);
  result[2] = v3 - 1;
  result[3] = v3;
  _DWORD *result = 0;
  *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) = v2;
  if (v1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      double v7 = (uint64_t *)(v0 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 != -1)
      {
        if (v8)
        {
          if (WebKit::webExtensionContextProxies(void)::contexts) {
            int v11 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 8);
          }
          else {
            int v11 = 0;
          }
          unint64_t v12 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
          unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
          int v16 = 1;
          do
          {
            unsigned int v17 = v15;
            uint64_t v18 = *(void *)(WebKit::webExtensionContextProxies(void)::contexts + 16 * v15);
            unsigned int v15 = (v15 + v16++) & v11;
          }
          while (v18);
          unsigned int v19 = (uint64_t *)(WebKit::webExtensionContextProxies(void)::contexts + 16 * v17);
          unsigned int v20 = (unsigned int *)v19[1];
          v19[1] = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v5);
          }
          *unsigned int v19 = *v7;
          uint64_t v21 = v0 + 16 * v6;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          v19[1] = v22;
          int v10 = *(atomic_uint **)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v9 = v0 + 16 * v6;
          int v10 = *(atomic_uint **)(v9 + 8);
          *(void *)(v9 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        atomic_store(1u, (unsigned int *)v10);
        WTF::fastFree((WTF *)v10, v5);
      }
LABEL_20:
      if (++v6 == v1) {
        goto LABEL_27;
      }
    }
  }
  if (v0)
  {
LABEL_27:
    return (_DWORD *)WTF::fastFree((WTF *)(v0 - 16), v5);
  }
  return result;
}

unsigned int **WebKit::WebExtensionContextProxy::didReceiveMessage(WebKit::WebExtensionContextProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v4 = (unsigned int **)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  int v5 = (uint64_t *)a3;
  uint64_t v6 = a2;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x63D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, v317);
      if (v317[40]) {
        WebKit::WebExtensionContextProxy::addPopupPageIdentifier((uint64_t)this, *(uint64_t *)v317, *(uint64_t *)&v317[8], *(uint64_t *)&v317[16], *(uint64_t *)&v317[24], *(uint64_t *)&v317[32]);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63E:
      uint64_t v86 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v87) {
        goto LABEL_491;
      }
      uint64_t v88 = v86;
      uint64_t v89 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v90) {
        goto LABEL_491;
      }
      uint64_t v91 = v89;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v5, v317);
      if (!v317[16]) {
        goto LABEL_491;
      }
      WebKit::WebExtensionContextProxy::addTabPageIdentifier((uint64_t)this, v88, v91, *(uint64_t *)v317, *(uint64_t *)&v317[8]);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63F:
      IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>((uint64_t *)a3, v317);
      if (BYTE8(v326))
      {
        v374[0] = 0;
        char v381 = 0;
        if ((_BYTE)v326)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)v374, (uint64_t)v317);
          char v381 = 1;
          char v382 = 1;
          if (!BYTE8(v326)) {
            goto LABEL_194;
          }
        }
        else
        {
          char v382 = 1;
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317);
        if (v382)
        {
LABEL_194:
          WebKit::WebExtensionContextProxy::dispatchActionClickedEvent((uint64_t)this, (uint64_t)v374);
          if (v382) {
            std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374);
          }
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      else
      {
        v374[0] = 0;
        char v382 = 0;
      }
      uint64_t v282 = *v5;
      uint64_t v283 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v284 = v5[3];
      if (!v284) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v283) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v284 + 16))(v284, v282);
      if (!v382) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_194;
    case 0x640:
      IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a3, (uint64_t)v317);
      if (!v317[32]) {
        goto LABEL_491;
      }
      *(_OWORD *)&v374[8] = *(_OWORD *)&v317[8];
      *(void *)v374 = *(void *)v317;
      *(void *)&long long v375 = *(void *)&v317[24];
      BYTE8(v375) = 1;
      WebKit::WebExtensionContextProxy::dispatchAlarmsEvent((uint64_t)this, (uint64_t)v374);
      if (BYTE8(v375))
      {
        v63 = *(WTF::StringImpl **)v374;
        *(void *)v374 = 0;
        if (v63) {
          goto LABEL_349;
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x641:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>(a3, v317);
      if (v317[24]) {
        WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(this, (const WTF::String *)v317, (const WTF::String *)&v317[8], (const WTF::String *)&v317[16]);
      }
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v42);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x642:
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v361);
      if (!v361[8])
      {
        v317[0] = 0;
        LOBYTE(v327[0]) = 0;
        goto LABEL_259;
      }
      CFTypeRef v16 = (CFTypeRef)IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(v5, v374);
      if (v382)
      {
        if (!v361[8]) {
          goto LABEL_449;
        }
        uint64_t v106 = *(void *)v361;
        *(void *)v361 = 0;
        *(void *)v317 = v106;
        v317[8] = 0;
        BYTE8(v326) = 0;
        if (v381)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)&v317[8], (uint64_t)v374);
          BYTE8(v326) = 1;
          LOBYTE(v327[0]) = 1;
          if (!v382) {
            goto LABEL_254;
          }
        }
        else
        {
          LOBYTE(v327[0]) = 1;
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374);
      }
      else
      {
        v317[0] = 0;
        LOBYTE(v327[0]) = 0;
      }
LABEL_254:
      if (v361[8])
      {
        v208 = *(WTF::StringImpl **)v361;
        *(void *)v361 = 0;
        if (v208)
        {
          if (*(_DWORD *)v208 == 2) {
            WTF::StringImpl::destroy(v208, v105);
          }
          else {
            *(_DWORD *)v208 -= 2;
          }
        }
      }
LABEL_259:
      if (LOBYTE(v327[0])
        || (v294 = *v5, v295 = v5[1], uint64_t *v5 = 0, v5[1] = 0, (v296 = v5[3]) != 0)
        && v295
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v296 + 16))(v296, v294), LOBYTE(v327[0])))
      {
        WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent((uint64_t)this, (uint64_t)v317, (uint64_t)&v317[8]);
        if (LOBYTE(v327[0]))
        {
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v317[8]);
          goto LABEL_262;
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x643:
      WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(this);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x644:
      IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>(a3, (uint64_t)v350);
      if (!v360)
      {
        v317[0] = 0;
        LOBYTE(v340) = 0;
        goto LABEL_415;
      }
      unint64_t v69 = v5[1];
      v70 = (WTF::StringImpl *)*v5;
      unint64_t v71 = v5[2] - *v5;
      if (v69 <= v71)
      {
        uint64_t v300 = 0;
        uint64_t v301 = 0;
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v302 = v5[3];
        if (v302)
        {
          if (v69)
          {
            (*(void (**)(uint64_t))(*(void *)v302 + 16))(v302);
            uint64_t v301 = *v5;
            uint64_t v300 = v5[1];
          }
          else
          {
            uint64_t v300 = 0;
            uint64_t v301 = 0;
          }
        }
        goto LABEL_522;
      }
      v72 = (unsigned __int8 *)v70 + v71;
      v5[2] = (uint64_t)(v72 + 1);
      if (!v70)
      {
        uint64_t v300 = v69;
        uint64_t v301 = 0;
LABEL_522:
        unint64_t v69 = 0;
        v70 = 0;
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v303 = v5[3];
        if (v303)
        {
          if (v300)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v303 + 16))(v303, v301, v300);
            v70 = (WTF::StringImpl *)*v5;
            unint64_t v69 = v5[1];
          }
          else
          {
            unint64_t v69 = 0;
            v70 = 0;
          }
        }
        goto LABEL_523;
      }
      unsigned int v73 = *v72;
      if (v73 >= 2)
      {
LABEL_523:
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v304 = v5[3];
        if (v304 && v69) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v304 + 16))(v304, v70);
        }
        goto LABEL_527;
      }
      BOOL v74 = v73 != 0;
      IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::decode(v5, (uint64_t)v361);
      if (!v371)
      {
        v70 = (WTF::StringImpl *)*v5;
        uint64_t v305 = v5[1];
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v306 = v5[3];
        if (!v306
          || !v305
          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v306 + 16))(v306, v70), !v371))
        {
LABEL_527:
          v317[0] = 0;
          LOBYTE(v340) = 0;
          goto LABEL_413;
        }
      }
      CFTypeRef v16 = (CFTypeRef)IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(v5, v374);
      if (v382)
      {
        if (!v360 || !v371) {
          goto LABEL_449;
        }
        v75 = v350[0];
        v350[0] = 0;
        *(void *)v317 = v75;
        v317[8] = 0;
        v317[16] = 0;
        if ((_BYTE)v351)
        {
          v76 = v350[1];
          v350[1] = 0;
          *(void *)&v317[8] = v76;
          v317[16] = 1;
        }
        *(_WORD *)&v317[24] = WORD4(v351);
        long long v77 = v352;
        long long v352 = 0uLL;
        *(_OWORD *)&v317[32] = v77;
        v78 = v353;
        v353 = 0;
        *(void *)&v317[48] = v78;
        LODWORD(v318[0]) = v354;
        WORD2(v318[0]) = WORD2(v354);
        LOBYTE(v318[1]) = 0;
        v319[8] = 0;
        if ((_BYTE)v356)
        {
          uint64_t v79 = *((void *)&v355 + 1);
          v318[1] = (WTF::StringImpl *)v355;
          long long v355 = 0uLL;
          *(void *)v319 = v79;
          v319[8] = 1;
        }
        v319[16] = 0;
        char v320 = 0;
        if ((_BYTE)v358)
        {
          uint64_t v80 = *((void *)&v356 + 1);
          *((void *)&v356 + 1) = 0;
          *(void *)&v319[16] = v80;
          v81 = v357;
          v357 = 0;
          *(void *)&v319[24] = v81;
          char v320 = 1;
        }
        int v321 = v359;
        BOOL v322 = v74;
        v323[0] = *(_OWORD *)v361;
        v323[1] = *(_OWORD *)&v361[16];
        char v324 = v361[32];
        v82 = *(WTF::StringImpl **)&v361[40];
        v83 = v366;
        *(void *)&v361[40] = 0;
        v325 = v82;
        long long v326 = v362;
        *(_OWORD *)v327 = v363;
        LODWORD(v362) = v362 & 0xFFFFFFFE;
        long long v84 = *(_OWORD *)v364;
        *(void *)&v364[8] = 0;
        *(void *)v364 = 0;
        *(_OWORD *)v328 = v84;
        *(_OWORD *)&v328[16] = *(_OWORD *)&v364[16];
        *(_OWORD *)&v328[32] = v365;
        *(_DWORD *)&v364[16] &= ~1u;
        v366 = 0;
        *(_OWORD *)v329 = v367;
        *(_OWORD *)&v329[16] = v368;
        LODWORD(v367) = v367 & 0xFFFFFFFE;
        v85 = v369;
        v369 = 0;
        *(void *)&v328[48] = v83;
        *(void *)&v329[32] = v85;
        v329[40] = v370;
        v329[48] = 0;
        BYTE8(v339) = 0;
        if (v381)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)&v329[48], (uint64_t)v374);
          BYTE8(v339) = 1;
        }
        LOBYTE(v340) = 1;
        if (v382) {
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374);
        }
      }
      else
      {
        v317[0] = 0;
        LOBYTE(v340) = 0;
      }
      if (v371)
      {
        v202 = v369;
        v369 = 0;
        if (v202)
        {
          if (*(_DWORD *)v202 == 2) {
            WTF::StringImpl::destroy(v202, v70);
          }
          else {
            *(_DWORD *)v202 -= 2;
          }
        }
        v240 = v366;
        v366 = 0;
        if (v240)
        {
          if (*(_DWORD *)v240 == 2) {
            WTF::StringImpl::destroy(v240, v70);
          }
          else {
            *(_DWORD *)v240 -= 2;
          }
        }
        v241 = *(WTF::StringImpl **)&v364[8];
        *(void *)&v364[8] = 0;
        if (v241)
        {
          if (*(_DWORD *)v241 == 2) {
            WTF::StringImpl::destroy(v241, v70);
          }
          else {
            *(_DWORD *)v241 -= 2;
          }
        }
        v242 = *(WTF::StringImpl **)v364;
        *(void *)v364 = 0;
        if (v242)
        {
          if (*(_DWORD *)v242 == 2) {
            WTF::StringImpl::destroy(v242, v70);
          }
          else {
            *(_DWORD *)v242 -= 2;
          }
        }
        v243 = *(WTF::StringImpl **)&v361[40];
        *(void *)&v361[40] = 0;
        if (v243)
        {
          if (*(_DWORD *)v243 == 2) {
            WTF::StringImpl::destroy(v243, v70);
          }
          else {
            *(_DWORD *)v243 -= 2;
          }
        }
      }
LABEL_413:
      if (v360) {
        WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v350, v70);
      }
LABEL_415:
      if ((_BYTE)v340
        || (v297 = *v5, v298 = v5[1], uint64_t *v5 = 0, v5[1] = 0, (v299 = v5[3]) != 0)
        && v298
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v299 + 16))(v299, v297), (_BYTE)v340))
      {
        WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent((uint64_t)this, v317, v322, (uint64_t)v323, (uint64_t)&v329[48]);
        if ((_BYTE)v340)
        {
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v329[48]);
          v245 = *(WTF::StringImpl **)&v329[32];
          *(void *)&v329[32] = 0;
          if (v245)
          {
            if (*(_DWORD *)v245 == 2) {
              WTF::StringImpl::destroy(v245, v244);
            }
            else {
              *(_DWORD *)v245 -= 2;
            }
          }
          v246 = *(WTF::StringImpl **)&v328[48];
          *(void *)&v328[48] = 0;
          if (v246)
          {
            if (*(_DWORD *)v246 == 2) {
              WTF::StringImpl::destroy(v246, v244);
            }
            else {
              *(_DWORD *)v246 -= 2;
            }
          }
          v247 = *(WTF::StringImpl **)&v328[8];
          *(void *)&v328[8] = 0;
          if (v247)
          {
            if (*(_DWORD *)v247 == 2) {
              WTF::StringImpl::destroy(v247, v244);
            }
            else {
              *(_DWORD *)v247 -= 2;
            }
          }
          v248 = *(WTF::StringImpl **)v328;
          *(void *)v328 = 0;
          if (v248)
          {
            if (*(_DWORD *)v248 == 2) {
              WTF::StringImpl::destroy(v248, v244);
            }
            else {
              *(_DWORD *)v248 -= 2;
            }
          }
          v249 = v325;
          v325 = 0;
          if (v249)
          {
            if (*(_DWORD *)v249 == 2) {
              WTF::StringImpl::destroy(v249, v244);
            }
            else {
              *(_DWORD *)v249 -= 2;
            }
          }
          WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v317, v244);
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x645:
      unsigned __int16 v130 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v130 < 0x100u) {
        goto LABEL_491;
      }
      char v131 = v130;
      IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v5, v374);
      if (!v374[8]) {
        goto LABEL_491;
      }
      CFTypeRef v16 = IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v5, v317);
      if (!v317[8])
      {
        if (v374[8] && *(void *)v374) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v374, v132);
        }
        goto LABEL_491;
      }
      if (!v374[8]) {
        goto LABEL_449;
      }
      uint64_t v133 = *(void *)v317;
      *(void *)v317 = *(void *)v374;
      *(void *)v374 = v133;
      WebKit::WebExtensionContextProxy::dispatchPermissionsEvent((uint64_t)this, v131, (void **)v317, (void **)v374);
      if (*(void *)v374) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v374, v134);
      }
      if (*(void *)v317) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v317, v134);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x646:
      uint64_t v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v50) {
        goto LABEL_491;
      }
      WebKit::WebExtensionContextProxy::dispatchPortDisconnectEvent((uint64_t)this, v49);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x647:
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, v374);
      if (!v374[16]) {
        goto LABEL_491;
      }
      uint64_t v127 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v128) {
        goto LABEL_491;
      }
      uint64_t v129 = v127;
      CFTypeRef v16 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)v361);
      if (!v361[8]) {
        goto LABEL_491;
      }
      if (!v374[16]) {
        goto LABEL_449;
      }
      *(_OWORD *)v317 = *(_OWORD *)v374;
      *(void *)&v317[16] = v129;
      *(void *)&v317[24] = *(void *)v361;
      v317[32] = 1;
      WebKit::WebExtensionContextProxy::dispatchPortMessageEvent((uint64_t)this, *(uint64_t *)v374, v374[8], v129, &v317[24]);
      if (v317[32])
      {
        v63 = *(WTF::StringImpl **)&v317[24];
        *(void *)&v317[24] = 0;
        if (v63) {
          goto LABEL_349;
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x648:
      unsigned __int16 v33 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
      if (v33 >= 0x100u
        && (char v34 = v33,
            uint64_t v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v36))
      {
        uint64_t v37 = v35;
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)v350);
        if (LOBYTE(v350[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v5, v361);
          if (v361[16])
          {
            CFTypeRef v16 = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>((IPC::Decoder *)v5, (uint64_t)v374);
            char v40 = v385;
            if (v385)
            {
              if (!LOBYTE(v350[1]) || !v361[16]) {
                goto LABEL_449;
              }
              v317[0] = v34;
              v41 = v350[0];
              v350[0] = 0;
              *(void *)&v317[8] = v37;
              *(void *)&v317[16] = v41;
              *(_OWORD *)&v317[24] = *(_OWORD *)v361;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v317[40], (uint64_t *)v374);
              char v40 = 1;
            }
            else
            {
              v317[0] = 0;
            }
            v329[48] = v40;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374, v39);
          }
          else
          {
            v317[0] = 0;
            v329[48] = 0;
          }
          if (LOBYTE(v350[1]))
          {
            v216 = v350[0];
            v350[0] = 0;
            if (v216)
            {
              if (*(_DWORD *)v216 == 2) {
                WTF::StringImpl::destroy(v216, v38);
              }
              else {
                *(_DWORD *)v216 -= 2;
              }
            }
          }
        }
        else
        {
          v317[0] = 0;
          v329[48] = 0;
        }
        if (v329[48]) {
          goto LABEL_288;
        }
      }
      else
      {
        v317[0] = 0;
        v329[48] = 0;
      }
      uint64_t v255 = *v5;
      uint64_t v256 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v257 = v5[3];
      if (!v257) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v256) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v257 + 16))(v257, v255);
      if (!v329[48]) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
LABEL_288:
      uint64_t v217 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v5);
      if ((_BYTE)v218)
      {
        *(void *)v374 = v217;
        int v5 = (uint64_t *)&v374[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v374[8], v6);
        v219 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v219 = &unk_1EE9FFF70;
        v219[1] = *(void *)v374;
        uint64_t v220 = *(void *)&v374[8];
        *(void *)&v374[8] = 0;
        v219[2] = v220;
        *(void *)v361 = v219;
        CFTypeRef v16 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v374[8]);
        if (!v329[48]) {
          goto LABEL_449;
        }
        WebKit::WebExtensionContextProxy::dispatchRuntimeConnectEvent(this, v317[0], *(uint64_t *)&v317[8], (uint64_t)&v317[16], *(uint64_t *)&v317[24], *(uint64_t *)&v317[32], (uint64_t)&v317[40], (uint64_t *)v361);
        uint64_t v221 = *(void *)v361;
        *(void *)v361 = 0;
        if (v221) {
          (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
        }
      }
      if (v329[48])
      {
        v222 = *(WTF::StringImpl **)&v329[8];
        *(void *)&v329[8] = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2) {
            WTF::StringImpl::destroy(v222, v218);
          }
          else {
            *(_DWORD *)v222 -= 2;
          }
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v318);
        if (v317[48])
        {
          v231 = *(WTF::StringImpl **)&v317[40];
          *(void *)&v317[40] = 0;
          if (v231)
          {
            if (*(_DWORD *)v231 == 2) {
              WTF::StringImpl::destroy(v231, v48);
            }
            else {
              *(_DWORD *)v231 -= 2;
            }
          }
        }
        goto LABEL_348;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x649:
      unint64_t v43 = *((void *)a3 + 1);
      uint64_t v44 = *v5;
      unint64_t v45 = v5[2] - *v5;
      if (v43 <= v45)
      {
        uint64_t v273 = 0;
        uint64_t v274 = 0;
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v275 = v5[3];
        if (v275)
        {
          if (v43)
          {
            (*(void (**)(uint64_t))(*(void *)v275 + 16))(v275);
            uint64_t v274 = *v5;
            uint64_t v273 = v5[1];
          }
          else
          {
            uint64_t v273 = 0;
            uint64_t v274 = 0;
          }
        }
      }
      else
      {
        v46 = (unsigned __int8 *)(v44 + v45);
        v5[2] = (uint64_t)(v46 + 1);
        if (v44)
        {
          unsigned int v47 = *v46;
          if (v47 < 4)
          {
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)v317);
            if (!v317[8]) {
              goto LABEL_491;
            }
            WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent((uint64_t)this, v47, v317);
            goto LABEL_262;
          }
          goto LABEL_490;
        }
        uint64_t v273 = v43;
        uint64_t v274 = 0;
      }
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v276 = v5[3];
      if (v276)
      {
        if (v273)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v276 + 16))(v276, v274, v273);
          uint64_t v44 = *v5;
          unint64_t v43 = v5[1];
        }
        else
        {
          unint64_t v43 = 0;
          uint64_t v44 = 0;
        }
      }
LABEL_490:
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v277 = v5[3];
      if (v277) {
        goto LABEL_541;
      }
      goto LABEL_491;
    case 0x64A:
      unsigned __int16 v120 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
      if (v120 <= 0xFFu)
      {
        v317[0] = 0;
        v329[40] = 0;
      }
      else
      {
        char v121 = v120;
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)v350);
        if (LOBYTE(v350[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v5, v361);
          if (v361[16])
          {
            CFTypeRef v16 = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>((IPC::Decoder *)v5, (uint64_t)v374);
            char v124 = v385;
            if (v385)
            {
              if (!LOBYTE(v350[1]) || !v361[16]) {
                goto LABEL_449;
              }
              v317[0] = v121;
              v125 = v350[0];
              v350[0] = 0;
              *(void *)&v317[8] = v125;
              *(_OWORD *)&v317[16] = *(_OWORD *)v361;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v317[32], (uint64_t *)v374);
              char v124 = 1;
            }
            else
            {
              v317[0] = 0;
            }
            v329[40] = v124;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374, v123);
          }
          else
          {
            v317[0] = 0;
            v329[40] = 0;
          }
          if (LOBYTE(v350[1]))
          {
            v209 = v350[0];
            v350[0] = 0;
            if (v209)
            {
              if (*(_DWORD *)v209 == 2) {
                WTF::StringImpl::destroy(v209, v122);
              }
              else {
                *(_DWORD *)v209 -= 2;
              }
            }
          }
        }
        else
        {
          v317[0] = 0;
          v329[40] = 0;
        }
        if (v329[40])
        {
LABEL_272:
          uint64_t v210 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v5);
          if ((_BYTE)v211)
          {
            *(void *)v374 = v210;
            int v5 = (uint64_t *)&v374[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v374[8], v6);
            v212 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v212 = &unk_1EE9FFF48;
            v212[1] = *(void *)v374;
            uint64_t v213 = *(void *)&v374[8];
            *(void *)&v374[8] = 0;
            v212[2] = v213;
            *(void *)v361 = v212;
            CFTypeRef v16 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v374[8]);
            if (!v329[40]) {
              goto LABEL_449;
            }
            WebKit::WebExtensionContextProxy::dispatchRuntimeMessageEvent(this, v317[0], (uint64_t *)&v317[8], *(uint64_t *)&v317[16], *(uint64_t *)&v317[24], (uint64_t)&v317[32], (uint64_t *)v361);
            uint64_t v214 = *(void *)v361;
            *(void *)v361 = 0;
            if (v214) {
              (*(void (**)(uint64_t))(*(void *)v214 + 8))(v214);
            }
          }
          if (!v329[40]) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          v215 = *(WTF::StringImpl **)v329;
          *(void *)v329 = 0;
          if (v215)
          {
            if (*(_DWORD *)v215 == 2) {
              WTF::StringImpl::destroy(v215, v211);
            }
            else {
              *(_DWORD *)v215 -= 2;
            }
          }
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v317[48]);
          if (v317[40])
          {
            v228 = *(WTF::StringImpl **)&v317[32];
            *(void *)&v317[32] = 0;
            if (v228)
            {
              if (*(_DWORD *)v228 == 2) {
                WTF::StringImpl::destroy(v228, v48);
              }
              else {
                *(_DWORD *)v228 -= 2;
              }
            }
          }
          v63 = *(WTF::StringImpl **)&v317[8];
          *(void *)&v317[8] = 0;
          if (!v63) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
LABEL_349:
          if (*(_DWORD *)v63 == 2) {
            WTF::StringImpl::destroy(v63, v48);
          }
          else {
            *(_DWORD *)v63 -= 2;
          }
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      uint64_t v285 = *v5;
      uint64_t v286 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v287 = v5[3];
      if (!v287) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v286) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v287 + 16))(v287, v285);
      if (!v329[40]) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_272;
    case 0x64B:
      WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(this);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x64C:
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v374);
      if (v374[8])
      {
        unsigned __int16 v65 = IPC::Decoder::decode<WebKit::WebExtensionDataType>(v5);
        LOBYTE(v6) = v65;
        if (v65 > 0xFFu
          && (CFTypeRef v16 = (CFTypeRef)IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(v5),
              (unsigned __int16)v16 > 0xFFu))
        {
          if (!v374[8]) {
            goto LABEL_449;
          }
          unsigned __int8 v3 = v16;
          int v68 = 0;
          uint64_t v198 = *(void *)v374;
          *(void *)v374 = 0;
          *(void *)v317 = v198;
          v317[8] = (_BYTE)v6;
          v317[9] = (_BYTE)v16;
          int v67 = 1;
        }
        else
        {
          int v67 = 0;
          v317[0] = 0;
          int v68 = 1;
        }
        v317[16] = v67;
        if (v374[8])
        {
          v199 = *(WTF::StringImpl **)v374;
          *(void *)v374 = 0;
          if (v199)
          {
            if (*(_DWORD *)v199 == 2) {
              WTF::StringImpl::destroy(v199, v66);
            }
            else {
              *(_DWORD *)v199 -= 2;
            }
          }
        }
        if (!v68)
        {
LABEL_212:
          if (!v67) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(this, v317, (char)v6, v3);
          if (!v317[16]) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
LABEL_262:
          v63 = *(WTF::StringImpl **)v317;
          *(void *)v317 = 0;
          if (!v63) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          goto LABEL_349;
        }
      }
      else
      {
        int v67 = 0;
        v317[0] = 0;
        v317[16] = 0;
      }
      uint64_t v270 = *v5;
      uint64_t v271 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v272 = v5[3];
      if (v272 && v271) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v272 + 16))(v272, v270);
      }
      goto LABEL_212;
    case 0x64D:
      uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v25) {
        goto LABEL_491;
      }
      unint64_t v26 = v24;
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v28) {
        goto LABEL_491;
      }
      unint64_t v29 = v27;
      unint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v31) {
        goto LABEL_491;
      }
      WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent((uint64_t)this, v26, v29, v30);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x64E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long>>((uint64_t)v317, (uint64_t *)a3);
      if (v317[24]) {
        WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent((uint64_t)this, *(uint64_t *)v317, *(unint64_t *)&v317[8], *(uint64_t *)&v317[16]);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x64F:
      IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, v317);
      char v126 = v326;
      if ((_BYTE)v326)
      {
        std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v374, (uint64_t)v317);
        char v126 = 1;
      }
      else
      {
        v374[0] = 0;
      }
      char v381 = v126;
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317);
      if (!v381)
      {
        uint64_t v288 = *v5;
        uint64_t v289 = v5[1];
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v290 = v5[3];
        if (!v290) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        if (!v289) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v290 + 16))(v290, v288);
        if (!v381) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent((uint64_t)this, (uint64_t)v374);
      if (!v381) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (v378[8])
      {
        v197 = *(WTF::StringImpl **)v378;
        *(void *)v378 = 0;
        if (v197)
        {
          if (*(_DWORD *)v197 == 2) {
            WTF::StringImpl::destroy(v197, v48);
          }
          else {
            *(_DWORD *)v197 -= 2;
          }
        }
      }
      if (!BYTE8(v377)) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      v63 = *(WTF::StringImpl **)&v374[16];
      *(void *)&v374[16] = 0;
      if (!v63) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_349;
    case 0x650:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long>>((uint64_t)v317, (uint64_t *)a3);
      if (v317[24]) {
        WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent((uint64_t)this, *(uint64_t *)v317, *(unint64_t *)&v317[8], *(uint64_t *)&v317[16]);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x651:
      IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (void *)a2, (uint64_t)v374);
      if (!v374[16]) {
        goto LABEL_491;
      }
      CFTypeRef v16 = (CFTypeRef)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!(_BYTE)v102)
      {
        if (v374[16])
        {
          v201 = *(WTF **)v374;
          if (*(void *)v374)
          {
            *(void *)v374 = 0;
            *(_DWORD *)&v374[8] = 0;
            WTF::fastFree(v201, v102);
          }
        }
        goto LABEL_491;
      }
      if (!v374[16]) {
        goto LABEL_449;
      }
      *(void *)v317 = *(void *)v374;
      *(void *)&v317[8] = *(void *)&v374[8];
      *(void *)&v317[16] = v16;
      v317[24] = 1;
      WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent((uint64_t)this, (uint64_t)v317, (unint64_t)v16);
      if (v317[24])
      {
        v104 = *(WTF **)v317;
        if (*(void *)v317)
        {
          *(void *)v317 = 0;
          *(_DWORD *)&v317[8] = 0;
          WTF::fastFree(v104, v103);
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x652:
      uint64_t v107 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v108) {
        goto LABEL_491;
      }
      uint64_t v109 = v107;
      unint64_t v110 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v111) {
        goto LABEL_491;
      }
      unint64_t v112 = v5[1];
      uint64_t v113 = *v5;
      unint64_t v114 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v5;
      if (v112 < v114 || v112 - v114 <= 7)
      {
        uint64_t v312 = 0;
        uint64_t v313 = 0;
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v314 = v5[3];
        if (v314)
        {
          if (v112)
          {
            (*(void (**)(uint64_t))(*(void *)v314 + 16))(v314);
            uint64_t v313 = *v5;
            uint64_t v312 = v5[1];
          }
          else
          {
            uint64_t v312 = 0;
            uint64_t v313 = 0;
          }
        }
      }
      else
      {
        v115 = (uint64_t *)(v113 + v114);
        v5[2] = (uint64_t)(v115 + 1);
        if (v113)
        {
          unint64_t v116 = (((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8) - v113;
          if (v112 >= v116 && v112 - v116 > 7)
          {
            uint64_t v118 = *v115;
            uint64_t v119 = *(void *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8);
            v5[2] = (((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent((uint64_t)this, v109, v110, v118, v119);
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          uint64_t *v5 = 0;
          v5[1] = 0;
          uint64_t v316 = v5[3];
          if (v316 && v112)
          {
            (*(void (**)(uint64_t))(*(void *)v316 + 16))(v316);
            uint64_t v44 = *v5;
            unint64_t v43 = v5[1];
            uint64_t v277 = v5[3];
            goto LABEL_540;
          }
LABEL_491:
          uint64_t v278 = *v5;
          uint64_t v279 = v5[1];
          uint64_t *v5 = 0;
          v5[1] = 0;
          uint64_t v280 = v5[3];
          if (v280 && v279) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v280 + 16))(v280, v278);
          }
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        uint64_t v312 = v112;
        uint64_t v313 = 0;
      }
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v315 = v5[3];
      if (v315 && v312) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v315 + 16))(v315, v313, v312);
      }
      goto LABEL_491;
    case 0x653:
      uint64_t v148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v149) {
        goto LABEL_491;
      }
      uint64_t v150 = v148;
      unint64_t v151 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v152) {
        goto LABEL_491;
      }
      unint64_t v153 = v5[1];
      uint64_t v154 = *v5;
      unint64_t v155 = v5[2] - *v5;
      if (v153 <= v155)
      {
        uint64_t v307 = 0;
        uint64_t v308 = 0;
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v309 = v5[3];
        if (v309)
        {
          if (v153)
          {
            (*(void (**)(uint64_t))(*(void *)v309 + 16))(v309);
            uint64_t v308 = *v5;
            uint64_t v307 = v5[1];
          }
          else
          {
            uint64_t v307 = 0;
            uint64_t v308 = 0;
          }
        }
      }
      else
      {
        v156 = (unsigned __int8 *)(v154 + v155);
        v5[2] = (uint64_t)(v156 + 1);
        if (v154)
        {
          unsigned int v157 = *v156;
          if (v157 < 2)
          {
            WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent((uint64_t)this, v150, v151, v157 != 0);
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
LABEL_530:
          uint64_t *v5 = 0;
          v5[1] = 0;
          uint64_t v311 = v5[3];
          if (v311 && v153)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v311 + 16))(v311, v154);
            uint64_t v277 = v5[3];
            uint64_t v44 = *v5;
            unint64_t v43 = v5[1];
LABEL_540:
            uint64_t *v5 = 0;
            v5[1] = 0;
            if (v277)
            {
LABEL_541:
              if (v43) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v277 + 16))(v277, v44);
              }
            }
          }
          goto LABEL_491;
        }
        uint64_t v307 = v153;
        uint64_t v308 = 0;
      }
      unint64_t v153 = 0;
      uint64_t v154 = 0;
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v310 = v5[3];
      if (v310)
      {
        if (v307)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v310 + 16))(v310, v308, v307);
          uint64_t v154 = *v5;
          unint64_t v153 = v5[1];
        }
        else
        {
          unint64_t v153 = 0;
          uint64_t v154 = 0;
        }
      }
      goto LABEL_530;
    case 0x654:
      uint64_t v158 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v159) {
        goto LABEL_491;
      }
      uint64_t v160 = v158;
      uint64_t v161 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v162) {
        goto LABEL_491;
      }
      WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent((uint64_t)this, v160, v161);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x655:
      IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, v361);
      if ((_BYTE)v370)
      {
        CFTypeRef v16 = IPC::Decoder::decode<WebKit::WebExtensionTabParameters>(v5, v374);
        char v64 = v381;
        if (v381)
        {
          if (!(_BYTE)v370) {
            goto LABEL_449;
          }
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v317, (uint64_t)v361);
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v326, (uint64_t)v374);
          char v64 = 1;
        }
        else
        {
          v317[0] = 0;
        }
        LOBYTE(v333) = v64;
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v374);
      }
      else
      {
        v317[0] = 0;
        LOBYTE(v333) = 0;
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v361);
      if (!(_BYTE)v333)
      {
        uint64_t v291 = *v5;
        uint64_t v292 = v5[1];
        uint64_t *v5 = 0;
        v5[1] = 0;
        uint64_t v293 = v5[3];
        if (!v293) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        if (!v292) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v293 + 16))(v293, v291);
        if (!(_BYTE)v333) {
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent((uint64_t)this, (uint64_t)v317, (uint64_t)&v326);
      if (!(_BYTE)v333) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (v328[40])
      {
        v200 = *(WTF::StringImpl **)&v328[32];
        *(void *)&v328[32] = 0;
        if (v200)
        {
          if (*(_DWORD *)v200 == 2) {
            WTF::StringImpl::destroy(v200, v48);
          }
          else {
            *(_DWORD *)v200 -= 2;
          }
        }
      }
      if (v328[24])
      {
        v229 = v327[0];
        v327[0] = 0;
        if (v229)
        {
          if (*(_DWORD *)v229 == 2) {
            WTF::StringImpl::destroy(v229, v48);
          }
          else {
            *(_DWORD *)v229 -= 2;
          }
        }
      }
      if (v319[0])
      {
        v230 = v318[1];
        v318[1] = 0;
        if (v230)
        {
          if (*(_DWORD *)v230 == 2) {
            WTF::StringImpl::destroy(v230, v48);
          }
          else {
            *(_DWORD *)v230 -= 2;
          }
        }
      }
      if (!LOBYTE(v318[0])) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
LABEL_348:
      v63 = *(WTF::StringImpl **)&v317[16];
      *(void *)&v317[16] = 0;
      if (v63) {
        goto LABEL_349;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x656:
      unsigned __int16 v51 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v51 < 0x100u) {
        goto LABEL_491;
      }
      char v52 = v51;
      uint64_t v53 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v54) {
        goto LABEL_491;
      }
      unint64_t v55 = v53;
      uint64_t v56 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v57) {
        goto LABEL_491;
      }
      unint64_t v58 = v56;
      uint64_t v59 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5);
      if (!v60) {
        goto LABEL_491;
      }
      unint64_t v61 = v59;
      IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v5, v374);
      if (!v376) {
        goto LABEL_491;
      }
      CFTypeRef v16 = (CFTypeRef)IPC::Decoder::decode<WTF::MonotonicTime>(v5);
      if (!(_BYTE)v62)
      {
        v317[0] = 0;
        v319[8] = 0;
        if (v376)
        {
          v251 = *(WTF::StringImpl **)v374;
          *(void *)v374 = 0;
          if (v251)
          {
            if (*(_DWORD *)v251 == 2) {
              WTF::StringImpl::destroy(v251, v62);
            }
            else {
              *(_DWORD *)v251 -= 2;
            }
          }
        }
        goto LABEL_491;
      }
      if (!v376) {
        goto LABEL_449;
      }
      v317[0] = v52;
      *(void *)&v317[8] = v55;
      *(void *)&v317[16] = v58;
      *(void *)&v317[24] = v61;
      *(void *)&v317[32] = *(void *)v374;
      *(_OWORD *)&v317[40] = *(_OWORD *)&v374[8];
      *(_OWORD *)v318 = v375;
      *(void *)v319 = v16;
      v319[8] = 1;
      WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent((uint64_t)this, v52, v55, v58, v61, &v317[32], *(double *)&v16);
      if (!v319[8]) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      v63 = *(WTF::StringImpl **)&v317[32];
      *(void *)&v317[32] = 0;
      if (!v63) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_349;
    case 0x657:
      unsigned __int16 v194 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v194 < 0x100u) {
        goto LABEL_491;
      }
      char v195 = v194;
      IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>(v5, (uint64_t)v374);
      if (!v380) {
        goto LABEL_491;
      }
      v317[0] = v195;
      v317[8] = 0;
      char v320 = 0;
      if (!v379) {
        goto LABEL_439;
      }
      *(_OWORD *)&v317[8] = *(_OWORD *)v374;
      *(_DWORD *)&v317[24] = *(_DWORD *)&v374[16];
      v317[32] = 0;
      v317[48] = 0;
      if (v376)
      {
        *(_OWORD *)v318 = v377;
        *(_OWORD *)&v317[32] = v375;
        long long v375 = 0uLL;
        v317[48] = 1;
        *(_OWORD *)v319 = *(_OWORD *)v378;
        *(_OWORD *)&v319[12] = *(_OWORD *)&v378[12];
        char v320 = 1;
        LOBYTE(v321) = 1;
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v375, v196);
      }
      else
      {
        *(_OWORD *)v318 = v377;
        *(_OWORD *)v319 = *(_OWORD *)v378;
        *(_OWORD *)&v319[12] = *(_OWORD *)&v378[12];
        char v320 = 1;
LABEL_439:
        LOBYTE(v321) = 1;
      }
      WebKit::WebExtensionContextProxy::dispatchWindowsEvent((uint64_t)this, v195, &v317[8]);
      if ((_BYTE)v321 && v320 && v317[48]) {
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v317[32], v250);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x658:
      uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v9
        && (uint64_t v10 = v8,
            uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v12))
      {
        uint64_t v13 = v11;
        IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)v5, v374);
        if (v384)
        {
          IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)v5, (uint64_t)v350);
          if ((_BYTE)v356)
          {
            CFTypeRef v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v361);
            char v18 = BYTE8(v365);
            if (BYTE8(v365))
            {
              if (!v384 || !(_BYTE)v356) {
                goto LABEL_449;
              }
              *(void *)v317 = v10;
              *(void *)&v317[8] = v13;
              std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v317[16], (uint64_t)v374);
              long long v19 = *(_OWORD *)v350;
              v350[1] = 0;
              v350[0] = 0;
              *(_OWORD *)&v329[8] = v19;
              *(_OWORD *)&v329[24] = v351;
              *(_OWORD *)&v329[40] = v352;
              LODWORD(v351) = v351 & 0xFFFFFFFE;
              v330 = v353;
              LODWORD(v331) = v354;
              WORD2(v331) = WORD2(v354);
              unsigned int v20 = (const void *)v355;
              v353 = 0;
              *(void *)&long long v355 = 0;
              v332[0] = v20;
              LOBYTE(v332[1]) = BYTE8(v355);
              LOBYTE(v336[0]) = v362;
              *(_OWORD *)v334 = *(_OWORD *)&v361[16];
              long long v335 = *(_OWORD *)&v361[32];
              long long v333 = *(_OWORD *)v361;
              uint64_t v21 = (WTF::StringImpl *)*((void *)&v362 + 1);
              uint64_t v22 = *(void *)&v364[16];
              *((void *)&v362 + 1) = 0;
              v336[1] = v21;
              long long v337 = v363;
              *(_OWORD *)cf = *(_OWORD *)v364;
              LODWORD(v363) = v363 & 0xFFFFFFFE;
              *(void *)&v364[16] = 0;
              *(_WORD *)&cf[32] = v365;
              char v18 = 1;
              *(void *)&cf[16] = v22;
              *(void *)&cf[24] = *(void *)&v364[24];
            }
            else
            {
              v317[0] = 0;
            }
            cf[40] = v18;
            std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v361, v17);
          }
          else
          {
            v317[0] = 0;
            cf[40] = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v350, v15);
        }
        else
        {
          v317[0] = 0;
          cf[40] = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v374, v14);
        if (cf[40])
        {
LABEL_356:
          int v5 = (uint64_t *)&v317[16];
          WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v317, *(uint64_t *)&v317[8], (WebCore::ResourceResponse *)&v317[16], (uint64_t)&v329[8], (WebKit *)&v333);
          if (!cf[40]) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          v232 = *(WTF::StringImpl **)&cf[16];
          *(void *)&cf[16] = 0;
          if (v232)
          {
            if (*(_DWORD *)v232 == 2) {
              WTF::StringImpl::destroy(v232, v205);
            }
            else {
              *(_DWORD *)v232 -= 2;
            }
          }
          v233 = v336[1];
          v336[1] = 0;
          if (v233)
          {
            if (*(_DWORD *)v233 == 2) {
              WTF::StringImpl::destroy(v233, v205);
            }
            else {
              *(_DWORD *)v233 -= 2;
            }
          }
          CFTypeRef v16 = v332[0];
          v332[0] = 0;
          if (v16) {
LABEL_450:
          }
            CFRelease(v16);
          v234 = v330;
          v330 = 0;
          if (v234)
          {
            if (*(_DWORD *)v234 == 2) {
              WTF::StringImpl::destroy(v234, v205);
            }
            else {
              *(_DWORD *)v234 -= 2;
            }
          }
          v235 = *(WTF::StringImpl **)&v329[16];
          *(void *)&v329[16] = 0;
          if (v235)
          {
            if (*(_DWORD *)v235 == 2) {
              WTF::StringImpl::destroy(v235, v205);
            }
            else {
              *(_DWORD *)v235 -= 2;
            }
          }
          v236 = *(WTF::StringImpl **)&v329[8];
          *(void *)&v329[8] = 0;
          if (!v236) {
            goto LABEL_392;
          }
LABEL_389:
          if (*(_DWORD *)v236 == 2) {
            WTF::StringImpl::destroy(v236, v205);
          }
          else {
            *(_DWORD *)v236 -= 2;
          }
LABEL_392:
          v239 = *(const void **)&v328[48];
          *(void *)&v328[48] = 0;
          if (v239) {
            CFRelease(v239);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v5, v205);
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      else
      {
        v317[0] = 0;
        cf[40] = 0;
      }
      uint64_t v252 = *v5;
      uint64_t v253 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v254 = v5[3];
      if (!v254) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v253) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v254 + 16))(v254, v252);
      if (!cf[40]) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_356;
    case 0x659:
      uint64_t v163 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v164
        && (uint64_t v165 = v163,
            uint64_t v166 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v167))
      {
        uint64_t v168 = v166;
        IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)v5, v374);
        if (v384)
        {
          IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v350);
          if (v360)
          {
            IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v5, (uint64_t)v361);
            char v171 = v373;
            if (v373)
            {
              if (!v384 || !v360) {
                goto LABEL_449;
              }
              *(void *)v317 = v165;
              *(void *)&v317[8] = v168;
              std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v317[16], (uint64_t)v374);
              *(_OWORD *)&v329[8] = *(_OWORD *)v350;
              *(_OWORD *)&v329[24] = v351;
              *(_OWORD *)&v329[40] = v352;
              LOBYTE(v330) = (_BYTE)v353;
              v172 = v354;
              v354 = 0;
              v331 = v172;
              *(_OWORD *)v332 = v355;
              long long v333 = v356;
              LODWORD(v355) = v355 & 0xFFFFFFFE;
              LOWORD(v335) = v359;
              v173 = v357;
              v357 = 0;
              v334[0] = v173;
              v334[1] = v358;
              uint64_t v174 = *(void *)v361;
              uint64_t v175 = *(void *)&v361[40];
              *(void *)v361 = 0;
              *((void *)&v335 + 1) = v174;
              *(_OWORD *)v336 = *(_OWORD *)&v361[8];
              long long v337 = *(_OWORD *)&v361[24];
              *(_DWORD *)&v361[8] &= ~1u;
              *(void *)&v361[40] = 0;
              *(void *)cf = v175;
              *(_OWORD *)&cf[8] = v362;
              *(_OWORD *)&cf[24] = v363;
              LODWORD(v362) = v362 & 0xFFFFFFFE;
              uint64_t v176 = *(void *)&v364[24];
              *(void *)&cf[40] = *(void *)v364;
              long long v177 = *(_OWORD *)&v364[8];
              memset(&v364[8], 0, 24);
              long long v339 = v177;
              uint64_t v340 = v176;
              uint64_t v178 = *((void *)&v365 + 1);
              v341 = (WTF::StringImpl *)v365;
              long long v365 = 0uLL;
              *(void *)&long long v342 = v178;
              v179 = v366;
              v366 = 0;
              *((void *)&v342 + 1) = v179;
              uint64_t v180 = v367;
              *(void *)&long long v367 = 0;
              *(void *)&long long v343 = v180;
              BYTE12(v343) = BYTE12(v367);
              DWORD2(v343) = DWORD2(v367);
              long long v181 = v368;
              long long v368 = 0u;
              *(_OWORD *)v344 = v181;
              v345 = v369;
              char v347 = v371;
              uint64_t v346 = v370;
              v182 = v372;
              v369 = 0;
              v372 = 0;
              char v171 = 1;
              CFTypeRef v348 = v182;
            }
            else
            {
              v317[0] = 0;
            }
            char v349 = v171;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v361);
          }
          else
          {
            v317[0] = 0;
            char v349 = 0;
          }
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v350, v170);
        }
        else
        {
          v317[0] = 0;
          char v349 = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v374, v169);
        if (v349)
        {
LABEL_380:
          int v5 = (uint64_t *)&v317[16];
          WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v317, *(uint64_t *)&v317[8], (WebCore::ResourceResponse *)&v317[16], &v329[8], (WebCore::ResourceRequestBase *)((char *)&v335 + 8));
          if (!v349) {
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          CFTypeRef v237 = v348;
          CFTypeRef v348 = 0;
          if (v237) {
            CFRelease(v237);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v335 + 8));
LABEL_384:
          v238 = v334[0];
          v334[0] = 0;
          if (v238)
          {
            if (*(_DWORD *)v238 == 2) {
              WTF::StringImpl::destroy(v238, v205);
            }
            else {
              *(_DWORD *)v238 -= 2;
            }
          }
          v236 = v331;
          v331 = 0;
          if (!v236) {
            goto LABEL_392;
          }
          goto LABEL_389;
        }
      }
      else
      {
        v317[0] = 0;
        char v349 = 0;
      }
      uint64_t v264 = *v5;
      uint64_t v265 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v266 = v5[3];
      if (!v266) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v265) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v266 + 16))(v266, v264);
      if (!v349) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      goto LABEL_380;
    case 0x65A:
      uint64_t v183 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v184
        && (uint64_t v185 = v183,
            uint64_t v186 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v187))
      {
        uint64_t v188 = v186;
        IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t)v5, (uint64_t)v374);
        if (v387)
        {
          CFTypeRef v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v361);
          char v191 = BYTE8(v365);
          if (BYTE8(v365))
          {
            if (!v387) {
              goto LABEL_449;
            }
            *(void *)v317 = v185;
            *(void *)&v317[8] = v188;
            WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v317[16], (uint64_t)v374);
            LOBYTE(v340) = v362;
            v192 = *(WTF::StringImpl **)&v364[16];
            v341 = (WTF::StringImpl *)*((void *)&v362 + 1);
            long long v193 = v386;
            long long v386 = 0uLL;
            *(_OWORD *)cf = v193;
            *(_OWORD *)&cf[16] = *(_OWORD *)v361;
            *(_OWORD *)&cf[32] = *(_OWORD *)&v361[16];
            long long v339 = *(_OWORD *)&v361[32];
            *((void *)&v362 + 1) = 0;
            long long v342 = v363;
            long long v343 = *(_OWORD *)v364;
            LODWORD(v363) = v363 & 0xFFFFFFFE;
            *(void *)&v364[16] = 0;
            v344[0] = v192;
            LOWORD(v345) = v365;
            char v191 = 1;
            v344[1] = *(WTF::StringImpl **)&v364[24];
          }
          else
          {
            v317[0] = 0;
          }
          LOBYTE(v346) = v191;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v361, v190);
        }
        else
        {
          v317[0] = 0;
          LOBYTE(v346) = 0;
        }
        std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v374, v189);
        if ((_BYTE)v346) {
          goto LABEL_248;
        }
      }
      else
      {
        v317[0] = 0;
        LOBYTE(v346) = 0;
      }
      uint64_t v267 = *v5;
      uint64_t v268 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v269 = v5[3];
      if (!v269) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v268) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v269 + 16))(v269, v267);
      if (!(_BYTE)v346) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
LABEL_248:
      WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v317, *(uint64_t *)&v317[8], (id *)&v317[16], (WebKit *)&cf[16]);
      if ((_BYTE)v346)
      {
        v207 = v344[0];
        v344[0] = 0;
        if (v207)
        {
          if (*(_DWORD *)v207 == 2) {
            WTF::StringImpl::destroy(v207, v206);
          }
          else {
            *(_DWORD *)v207 -= 2;
          }
        }
        v225 = v341;
        v341 = 0;
        if (v225)
        {
          if (*(_DWORD *)v225 == 2) {
            WTF::StringImpl::destroy(v225, v206);
          }
          else {
            *(_DWORD *)v225 -= 2;
          }
        }
        v226 = *(const void **)&cf[8];
        *(void *)&cf[8] = 0;
        if (v226) {
          CFRelease(v226);
        }
        v227 = *(const void **)cf;
        *(void *)cf = 0;
        if (v227) {
          CFRelease(v227);
        }
        WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v317[16], v206);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x65B:
      uint64_t v135 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v136
        && (uint64_t v137 = v135,
            uint64_t v138 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v139))
      {
        uint64_t v140 = v138;
        IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)v5, v374);
        if (v384)
        {
          CFTypeRef v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v361);
          char v143 = BYTE8(v365);
          if (BYTE8(v365))
          {
            if (!v384) {
              goto LABEL_449;
            }
            *(void *)v317 = v137;
            *(void *)&v317[8] = v140;
            std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v317[16], (uint64_t)v374);
            *(_OWORD *)&v329[8] = *(_OWORD *)v361;
            *(_OWORD *)&v329[24] = *(_OWORD *)&v361[16];
            *(_OWORD *)&v329[40] = *(_OWORD *)&v361[32];
            LOBYTE(v330) = v362;
            v144 = (WTF::StringImpl *)*((void *)&v362 + 1);
            v145 = *(WTF::StringImpl **)&v364[16];
            *((void *)&v362 + 1) = 0;
            v331 = v144;
            *(_OWORD *)v332 = v363;
            long long v333 = *(_OWORD *)v364;
            LODWORD(v363) = v363 & 0xFFFFFFFE;
            *(void *)&v364[16] = 0;
            LOWORD(v335) = v365;
            char v143 = 1;
            v334[0] = v145;
            v334[1] = *(WTF::StringImpl **)&v364[24];
          }
          else
          {
            v317[0] = 0;
          }
          BYTE8(v335) = v143;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v361, v142);
        }
        else
        {
          v317[0] = 0;
          BYTE8(v335) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v374, v141);
        if (BYTE8(v335)) {
          goto LABEL_242;
        }
      }
      else
      {
        v317[0] = 0;
        BYTE8(v335) = 0;
      }
      uint64_t v261 = *v5;
      uint64_t v262 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v263 = v5[3];
      if (!v263) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v262) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v263 + 16))(v263, v261);
      if (!BYTE8(v335)) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
LABEL_242:
      int v5 = (uint64_t *)&v317[16];
      WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v317, *(uint64_t *)&v317[8], (WebCore::ResourceResponse *)&v317[16], &v329[8]);
      if (BYTE8(v335)) {
        goto LABEL_384;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x65C:
      uint64_t v92 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v93
        && (uint64_t v94 = v92,
            uint64_t v95 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5),
            v96))
      {
        uint64_t v97 = v95;
        IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v5, (uint64_t)v374);
        if (v383)
        {
          CFTypeRef v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v361);
          char v99 = BYTE8(v365);
          if (BYTE8(v365))
          {
            if (!v383)
            {
LABEL_449:
              __break(1u);
              goto LABEL_450;
            }
            *(void *)v317 = v94;
            *(void *)&v317[8] = v97;
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v317[16], (uint64_t)v374);
            *(_OWORD *)&v328[8] = *(_OWORD *)v361;
            *(_OWORD *)&v328[24] = *(_OWORD *)&v361[16];
            *(_OWORD *)&v328[40] = *(_OWORD *)&v361[32];
            v329[0] = v362;
            uint64_t v100 = *((void *)&v362 + 1);
            uint64_t v101 = *(void *)&v364[16];
            *((void *)&v362 + 1) = 0;
            *(_OWORD *)&v329[16] = v363;
            *(_OWORD *)&v329[32] = *(_OWORD *)v364;
            LODWORD(v363) = v363 & 0xFFFFFFFE;
            *(void *)&v364[16] = 0;
            *(void *)&v329[8] = v100;
            LOWORD(v331) = v365;
            char v99 = 1;
            *(void *)&v329[48] = v101;
            v330 = *(WTF::StringImpl **)&v364[24];
          }
          else
          {
            v317[0] = 0;
          }
          LOBYTE(v332[0]) = v99;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v361, v98);
        }
        else
        {
          v317[0] = 0;
          LOBYTE(v332[0]) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v374);
        if (LOBYTE(v332[0])) {
          goto LABEL_235;
        }
      }
      else
      {
        v317[0] = 0;
        LOBYTE(v332[0]) = 0;
      }
      uint64_t v258 = *v5;
      uint64_t v259 = v5[1];
      uint64_t *v5 = 0;
      v5[1] = 0;
      uint64_t v260 = v5[3];
      if (!v260) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      if (!v259) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v260 + 16))(v260, v258);
      if (!LOBYTE(v332[0])) {
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
LABEL_235:
      WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v317, *(uint64_t *)&v317[8], (WebCore::ResourceRequestBase *)&v317[16], (WebKit *)&v328[8]);
      if (LOBYTE(v332[0]))
      {
        v204 = *(WTF::StringImpl **)&v329[48];
        *(void *)&v329[48] = 0;
        if (v204)
        {
          if (*(_DWORD *)v204 == 2) {
            WTF::StringImpl::destroy(v204, v203);
          }
          else {
            *(_DWORD *)v204 -= 2;
          }
        }
        v223 = *(WTF::StringImpl **)&v329[8];
        *(void *)&v329[8] = 0;
        if (v223)
        {
          if (*(_DWORD *)v223 == 2) {
            WTF::StringImpl::destroy(v223, v203);
          }
          else {
            *(_DWORD *)v223 -= 2;
          }
        }
        v224 = *(const void **)v328;
        *(void *)v328 = 0;
        if (v224) {
          CFRelease(v224);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v317[16]);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x65D:
      uint64_t v146 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (v147) {
        WebKit::WebExtensionContextProxy::setBackgroundPageIdentifier(this, v146);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x65E:
      unsigned __int16 v32 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v32 <= 0xFFu) {
        goto LABEL_491;
      }
      WebKit::WebExtensionContextProxy::setStorageAccessLevel((uint64_t)this, v32 != 0);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x65F:
      IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>(a3, v317);
      if (!v317[8]) {
        goto LABEL_491;
      }
      *(void *)v374 = *(void *)v317;
      v374[8] = 1;
      WebKit::WebExtensionContextProxy::updateGrantedPermissions((uint64_t)this, (WTF::StringImpl *)v374);
      if (v374[8] && *(void *)v374) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v374, v23);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    default:
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3240;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yLSE_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENS_11DefaultHashISU_EENS_10HashTraitsISU_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS10_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FFF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yLSE_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENS_11DefaultHashISU_EENS_10HashTraitsISU_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS10_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FFF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yLSE_1EEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENS_11DefaultHashISU_EENS_10HashTraitsISU_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS10_EE4callES10_(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3239;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v21 = v5;
  if (*a2) {
    int v6 = *((_DWORD *)*a2 - 3);
  }
  else {
    int v6 = 0;
  }
  double v7 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
  if (v8 <= 3) {
    goto LABEL_19;
  }
  *double v7 = v6;
  char v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v10 = v9;
  char v12 = v11;
  if (*a2) {
    uint64_t v13 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v13 = 0;
  }
  if ((uint64_t *)v13 != v9)
  {
    while (1)
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v10);
      int v14 = *((_DWORD *)v10 + 2);
      unsigned int v15 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
      if (v16 <= 3) {
        break;
      }
      *unsigned int v15 = v14;
      while (1)
      {
        v10 += 2;
        if (v10 == v12) {
          break;
        }
        if ((unint64_t)(*v10 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v10 = v12;
LABEL_15:
      if (v10 == (uint64_t *)v13) {
        goto LABEL_16;
      }
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x199351770);
  }
LABEL_16:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
    if (v8)
    {
      unint64_t v9 = a2[1];
      uint64_t v10 = *a2;
      unint64_t v11 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
      if (v9 >= v11 && v9 - v11 > 7)
      {
        uint64_t v13 = (uint64_t *)(v10 + v11);
        a2[2] = (uint64_t)(v13 + 1);
        if (v10)
        {
          uint64_t v14 = *v13;
          *(void *)a1 = v6;
          *(void *)(a1 + 8) = result;
          *(void *)(a1 + 16) = v14;
          *(unsigned char *)(a1 + 24) = 1;
          return result;
        }
        uint64_t v15 = v9;
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v17 = a2[3];
        if (v17)
        {
          if (v9)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v10, v9);
            uint64_t v16 = *a2;
            uint64_t v15 = a2[1];
          }
          else
          {
            uint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v18 = a2[3];
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v20 = v19 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    uint64_t v21 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v21();
  }
  return result;
}

void WebKit::WebExtensionController::testResult(id *a1, uint64_t a2, WTF::StringImpl **a3, void *a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebExtensionController::delegate(a1);
  if (objc_opt_respondsToSelector())
  {
    unint64_t v11 = WebKit::WebExtensionAction::wrapper(a1);
    if (*a3) {
      char v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v12 = &stru_1EEA10550;
    }
    if (*a4) {
      uint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    [v10 _webExtensionController:v11 recordTestAssertionResult:a2 withMessage:v12 andSourceURL:v13 lineNumber:a5];
  }
  else
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v15 = *a3;
      *a3 = *(WTF::StringImpl **)v24;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    uint64_t v16 = (id)qword_1EB357DF8;
    uint64_t v17 = v16;
    if (a2)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        if (*a3) {
          uint64_t v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v18 = &stru_1EEA10550;
        }
        uint64_t v19 = v18;
        if (*a4) {
          BOOL v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          BOOL v20 = &stru_1EEA10550;
        }
        *(_DWORD *)uint64_t v24 = 138543874;
        *(void *)&v24[4] = v19;
        __int16 v25 = 2114;
        unint64_t v26 = v20;
        __int16 v27 = 1026;
        int v28 = a5;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_INFO, "Test assertion passed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*a3) {
        uint64_t v21 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v21 = &stru_1EEA10550;
      }
      uint64_t v22 = v21;
      if (*a4) {
        uint64_t v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v23 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v24 = 138543874;
      *(void *)&v24[4] = v22;
      __int16 v25 = 2114;
      unint64_t v26 = v23;
      __int16 v27 = 1026;
      int v28 = a5;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "Test assertion failed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);
    }
  }
}

void sub_199351BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testEqual(id *a1, uint64_t a2, void *a3, void *a4, WTF::StringImpl **a5, void *a6, int a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = WebKit::WebExtensionController::delegate(a1);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v15 = WebKit::WebExtensionAction::wrapper(a1);
    if (*a3) {
      uint64_t v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v16 = &stru_1EEA10550;
    }
    if (*a4) {
      uint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v17 = &stru_1EEA10550;
    }
    if (*a5) {
      uint64_t v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v18 = &stru_1EEA10550;
    }
    if (*a6) {
      uint64_t v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v19 = &stru_1EEA10550;
    }
    LODWORD(v38) = a7;
    [v14 _webExtensionController:v15 recordTestEqualityResult:a2 expectedValue:v16 actualValue:v17 withMessage:v18 andSourceURL:v19 lineNumber:v38];
  }
  else
  {
    if (!*a5 || !*((_DWORD *)*a5 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v21 = *a5;
      *a5 = *(WTF::StringImpl **)buf;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    uint64_t v22 = (id)qword_1EB357DF8;
    uint64_t v23 = v22;
    if (a2)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if (*a5) {
          uint64_t v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v24 = &stru_1EEA10550;
        }
        __int16 v25 = v24;
        if (*a3) {
          unint64_t v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v26 = &stru_1EEA10550;
        }
        __int16 v27 = v26;
        if (*a4) {
          int v28 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          int v28 = &stru_1EEA10550;
        }
        uint64_t v29 = v28;
        if (*a6) {
          unint64_t v30 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v30 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 138544386;
        *(void *)&buf[4] = v25;
        __int16 v40 = 2114;
        v41 = v27;
        __int16 v42 = 2114;
        unint64_t v43 = v29;
        __int16 v44 = 2114;
        unint64_t v45 = v30;
        __int16 v46 = 1026;
        int v47 = a7;
        _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_INFO, "Test equality passed: %{public}@: %{public}@ === %{public}@ (%{public}@:%{public}u)", buf, 0x30u);
      }
    }
    else if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (*a5) {
        char v31 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        char v31 = &stru_1EEA10550;
      }
      unsigned __int16 v32 = v31;
      if (*a3) {
        unsigned __int16 v33 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unsigned __int16 v33 = &stru_1EEA10550;
      }
      char v34 = v33;
      if (*a4) {
        uint64_t v35 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v35 = &stru_1EEA10550;
      }
      char v36 = v35;
      if (*a6) {
        uint64_t v37 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v37 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 138544386;
      *(void *)&buf[4] = v32;
      __int16 v40 = 2114;
      v41 = v34;
      __int16 v42 = 2114;
      unint64_t v43 = v36;
      __int16 v44 = 2114;
      unint64_t v45 = v37;
      __int16 v46 = 1026;
      int v47 = a7;
      _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "Test equality failed: %{public}@: %{public}@ !== %{public}@ (%{public}@:%{public}u)", buf, 0x30u);
    }
  }
}

void sub_199352070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testMessage(id *a1, WTF::StringImpl **a2, void *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v8 = WebKit::WebExtensionController::delegate(a1);
  if (objc_opt_respondsToSelector())
  {
    unint64_t v9 = WebKit::WebExtensionAction::wrapper(a1);
    if (*a2) {
      uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v10 = &stru_1EEA10550;
    }
    if (*a3) {
      unint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v11 = &stru_1EEA10550;
    }
    [v8 _webExtensionController:v9 recordTestMessage:v10 andSourceURL:v11 lineNumber:a4];
  }
  else
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v13 = *a2;
      *a2 = *(WTF::StringImpl **)v18;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t v14 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (*a2) {
        uint64_t v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v15 = &stru_1EEA10550;
      }
      uint64_t v16 = v15;
      if (*a3) {
        uint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v17 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v18 = 138543874;
      *(void *)&v18[4] = v16;
      __int16 v19 = 2114;
      BOOL v20 = v17;
      __int16 v21 = 1026;
      int v22 = a4;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_INFO, "Test message: %{public}@ (%{public}@:%{public}u)", v18, 0x1Cu);
    }
  }
}

void sub_199352350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testYielded(id *a1, WTF::StringImpl **a2, void *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v8 = WebKit::WebExtensionController::delegate(a1);
  if (objc_opt_respondsToSelector())
  {
    unint64_t v9 = WebKit::WebExtensionAction::wrapper(a1);
    if (*a2) {
      uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v10 = &stru_1EEA10550;
    }
    if (*a3) {
      unint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v11 = &stru_1EEA10550;
    }
    [v8 _webExtensionController:v9 recordTestYieldedWithMessage:v10 andSourceURL:v11 lineNumber:a4];
  }
  else
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v13 = *a2;
      *a2 = *(WTF::StringImpl **)v18;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t v14 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (*a2) {
        uint64_t v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v15 = &stru_1EEA10550;
      }
      uint64_t v16 = v15;
      if (*a3) {
        uint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v17 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v18 = 138543874;
      *(void *)&v18[4] = v16;
      __int16 v19 = 2114;
      BOOL v20 = v17;
      __int16 v21 = 1026;
      int v22 = a4;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_INFO, "Test yielded: %{public}@ (%{public}@:%{public}u)", v18, 0x1Cu);
    }
  }
}

void sub_1993525BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testFinished(id *a1, uint64_t a2, WTF::StringImpl **a3, void *a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebExtensionController::delegate(a1);
  if (objc_opt_respondsToSelector())
  {
    unint64_t v11 = WebKit::WebExtensionAction::wrapper(a1);
    if (*a3) {
      char v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v12 = &stru_1EEA10550;
    }
    if (*a4) {
      uint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    [v10 _webExtensionController:v11 recordTestFinishedWithResult:a2 message:v12 andSourceURL:v13 lineNumber:a5];
  }
  else
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v15 = *a3;
      *a3 = *(WTF::StringImpl **)v24;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    uint64_t v16 = (id)qword_1EB357DF8;
    uint64_t v17 = v16;
    if (a2)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        if (*a3) {
          uint64_t v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v18 = &stru_1EEA10550;
        }
        __int16 v19 = v18;
        if (*a4) {
          BOOL v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          BOOL v20 = &stru_1EEA10550;
        }
        *(_DWORD *)uint64_t v24 = 138543874;
        *(void *)&v24[4] = v19;
        __int16 v25 = 2114;
        unint64_t v26 = v20;
        __int16 v27 = 1026;
        int v28 = a5;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_INFO, "Test passed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*a3) {
        __int16 v21 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        __int16 v21 = &stru_1EEA10550;
      }
      int v22 = v21;
      if (*a4) {
        uint64_t v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v23 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v24 = 138543874;
      *(void *)&v24[4] = v22;
      __int16 v25 = 2114;
      unint64_t v26 = v23;
      __int16 v27 = 1026;
      int v28 = a5;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "Test failed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);
    }
  }
}

void sub_1993528E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199352A30(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::extensionContext(WebKit::WebExtensionController *this@<X0>, const WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
  double v7 = v6;
  unint64_t v9 = v8;
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    unint64_t v11 = (void *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11 == v6)
  {
LABEL_12:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v12 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      int v14 = WTF::equal(*(WTF **)(v12 + 120), *a2, v13);
      uint64_t v15 = *(const void **)(v12 + 8);
      if (v14) {
        break;
      }
      CFRelease(v15);
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_11;
        }
      }
      double v7 = v9;
LABEL_11:
      if (v7 == v11) {
        goto LABEL_12;
      }
    }
    CFRetain(v15);
    *a3 = v12;
    uint64_t v16 = *(const void **)(v12 + 8);
    CFRelease(v16);
  }
}

void sub_199352B68(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionController::getDataRecords(WebKit::WebExtensionController *a1, unsigned __int8 a2, uint64_t *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*((void *)a1 + 5) + 40);
  if (!v4 || (*(_DWORD *)(v4 + 4) ? (BOOL v5 = a2 == 0) : (BOOL v5 = 1), v5))
  {
    v67[0] = 0;
    v67[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v67);
    return (WTF *)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v6);
  }
  char v8 = a1;
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  v9[1] = 0;
  uint64_t v10 = v9 + 1;
  *(_DWORD *)unint64_t v9 = 2;
  uint64_t v11 = *a3;
  *a3 = 0;
  v62 = v9;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EEA00098;
  v12[1] = v9;
  v12[2] = v11;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v13 = 1;
  unint64_t v61 = (unsigned int *)v13;
  *(void *)(v13 + 8) = v12;
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v65, (WTF::FileSystemImpl *)(*((void *)v8 + 5) + 40), v14);
  if (!v66) {
    goto LABEL_77;
  }
  uint64_t v16 = v65;
  unint64_t v58 = &v65[v66];
  char v60 = v8;
  do
  {
    char v64 = 0;
    WebKit::WebExtensionController::stateFilePath((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((void *)v8 + 5) + 40));
    BOOL DisplayNameFromState = WebKit::WebExtensionContext::readDisplayNameFromState((WebKit::WebExtensionContext *)buf, (const WTF::String *)&v64, v17);
    __int16 v21 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v18);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    unsigned __int8 v22 = a2;
    if (!DisplayNameFromState)
    {
      char v54 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        if (*v16) {
          uint64_t v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v56 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 138477827;
        *(void *)&buf[4] = v56;
        _os_log_error_impl(&dword_1985F2000, v54, OS_LOG_TYPE_ERROR, "Failed to read extension display name from State.plist for extension: %{private}@", buf, 0xCu);
      }
      unint64_t v9 = v62;
      goto LABEL_67;
    }
    do
    {
      uint64_t v23 = *v10;
      if (*v10
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v10, 0), (uint64_t v23 = *v10) != 0))
      {
        int v24 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        int v24 = 0;
      }
      unsigned int v25 = *((_DWORD *)*v16 + 4);
      if (v25 >= 0x100) {
        unsigned int v26 = v25 >> 8;
      }
      else {
        unsigned int v26 = WTF::StringImpl::hashSlowCase(*v16);
      }
      __int16 v27 = 0;
      for (int i = 1; ; ++i)
      {
        unsigned int v29 = v26 & v24;
        unint64_t v30 = (uint64_t *)(v23 + 16 * (v26 & v24));
        char v31 = (WTF *)*v30;
        if (*v30 == -1)
        {
          __int16 v27 = (uint64_t *)(v23 + 16 * v29);
          goto LABEL_27;
        }
        if (!v31) {
          break;
        }
        if (WTF::equal(v31, *v16, v19)) {
          goto LABEL_41;
        }
LABEL_27:
        unsigned int v26 = i + v29;
      }
      if (v27)
      {
        *__int16 v27 = 0;
        v27[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        unint64_t v30 = v27;
      }
      WTF::String::operator=(v30, v16);
      unsigned __int16 v32 = (WebKit::WebExtensionDataRecord *)API::Object::newObject(0x30uLL, 116);
      unsigned __int16 v33 = WebKit::WebExtensionDataRecord::WebExtensionDataRecord(v32, (const WTF::String *)&v64, (const WTF::String *)v16);
      uint64_t v34 = v30[1];
      v30[1] = (uint64_t)v33;
      if (v34) {
        CFRelease(*(CFTypeRef *)(v34 + 8));
      }
      uint64_t v35 = *v10;
      if (*v10) {
        int v36 = *(_DWORD *)(v35 - 12) + 1;
      }
      else {
        int v36 = 1;
      }
      *(_DWORD *)(v35 - 12) = v36;
      uint64_t v37 = *v10;
      if (*v10) {
        int v38 = *(_DWORD *)(v37 - 12);
      }
      else {
        int v38 = 0;
      }
      uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
      unint64_t v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 <= 2 * v39) {
LABEL_40:
        }
          unint64_t v30 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v10, (WTF::StringImpl **)v30);
      }
      else if (3 * v40 <= 4 * v39)
      {
        goto LABEL_40;
      }
LABEL_41:
      uint64_t v41 = v30[1];
      CFRetain(*(CFTypeRef *)(v41 + 8));
      char v8 = v60;
      WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((void *)v60 + 5) + 40));
      WebKit::WebExtensionController::extensionContext(v60, v16, &v63);
      __int16 v42 = v63;
      __int16 v44 = WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v22 & -v22), v63);
      v63 = 0;
      if (v42) {
        CFRelease(*((CFTypeRef *)v42 + 1));
      }
      unint64_t v45 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      __int16 v46 = (atomic_uint *)v61;
      if (!v45)
      {
LABEL_46:
        if (!v44) {
          goto LABEL_54;
        }
LABEL_47:
        ++*v62;
        atomic_fetch_add(v46, 1u);
        int v47 = *v16;
        if (*v16) {
          *(_DWORD *)v47 += 2;
        }
        uint64_t v48 = v64;
        if (v64) {
          *(_DWORD *)v64 += 2;
        }
        CFRetain(*(CFTypeRef *)(v41 + 8));
        uint64_t v49 = malloc_type_malloc(0x50uLL, 0x10E004026C8460BuLL);
        *uint64_t v49 = MEMORY[0x1E4F14398];
        v49[1] = 50331650;
        v49[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke;
        v49[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::descriptor;
        v49[4] = v62;
        v49[5] = v61;
        v49[6] = v47;
        v49[7] = v48;
        *((unsigned char *)v49 + 64) = v22 & -v22;
        v49[9] = v41;
        char v50 = _Block_copy(v49);

        unsigned __int16 v51 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unsigned __int16 v51 = &unk_1EEA000C0;
        v51[1] = v50;
        *(void *)buf = v51;
        WebKit::WebExtensionController::calculateStorageSize(v44, (uint64_t *)buf);
        if (*(void *)buf) {
          (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
        }
        goto LABEL_56;
      }
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
        goto LABEL_46;
      }
      WTF::StringImpl::destroy(v45, v43);
      __int16 v46 = (atomic_uint *)v61;
      if (v44) {
        goto LABEL_47;
      }
LABEL_54:
      char v52 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        if (*v16) {
          uint64_t v53 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v53 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 138477827;
        *(void *)&buf[4] = v53;
        _os_log_error_impl(&dword_1985F2000, v52, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);
      }
      WebKit::WebExtensionDataRecord::addError(v41, @"Unable to calculate extension storage", v22 & -v22);
LABEL_56:

      CFRelease(*(CFTypeRef *)(v41 + 8));
      v22 &= v22 - 1;
      unint64_t v9 = v62;
    }
    while (v22);
LABEL_67:
    unint64_t v55 = v64;
    char v64 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v15);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    ++v16;
  }
  while (v16 != v58);
LABEL_77:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v15);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v61);
  return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref((WTF *)v9, v57);
}

void sub_1993531E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, WTF *a16, uint64_t a17, WTF::StringImpl *a18, char a19, uint64_t a20,char a21,uint64_t a22,WTF::StringImpl *a23)
{
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(a15);
  WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v23, v25);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v9);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1993534CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v13);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionController::stateFilePath(WebKit::WebExtensionController *this, const WTF::String *a2)
{
  WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)v5, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v2 = v5[1];
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v3);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19935360C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_WKWebExtensionStorageSQLiteStore *WebKit::WebExtensionController::sqliteStore(WTF::FileSystemImpl *a1, const WTF::String *a2, WebKit::WebExtensionContext *this)
{
  if (a2 == 2)
  {
    if (this)
    {
      WebKit::WebExtensionContext::sessionStorageStore(this);
      uint64_t v3 = (_WKWebExtensionStorageSQLiteStore *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash((uint64_t *)&v12, a1, a2);
    uint64_t v6 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (v12) {
      double v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      double v7 = &stru_1EEA10550;
    }
    if (*(void *)a1) {
      char v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v8 = &stru_1EEA10550;
    }
    uint64_t v3 = [(_WKWebExtensionStorageSQLiteStore *)v6 initWithUniqueIdentifier:v7 storageType:a2 directory:v8 usesInMemoryDatabase:0];

    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }

  return v3;
}

void sub_199353774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::storageDirectory(WebKit::WebExtensionController *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

void WebKit::WebExtensionController::calculateStorageSize(void *a1, uint64_t *a2)
{
  id v7 = a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v4 = MEMORY[0x1E4F14398];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::descriptor;
  v4[4] = v3;
  BOOL v5 = _Block_copy(v4);

  uint64_t v6 = _Block_copy(v5);
  [v7 getStorageSizeForKeys:MEMORY[0x1E4F1CBF0] completionHandler:v6];
}

void sub_1993538FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::getDataRecord(WebKit::WebExtensionController *a1, const WTF::String *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v9 = *(void *)(v6 + 40);
  id v7 = (WTF::FileSystemImpl *)(v6 + 40);
  uint64_t v8 = v9;
  if (!v9 || ((unsigned __int8 v10 = a2, *(_DWORD *)(v8 + 4)) ? (v11 = a2 == 0) : (v11 = 1), v11))
  {
    uint64_t v70 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(a4, &v70);
    if (v70)
    {
      uint64_t v12 = *(const void **)(v70 + 8);
      CFRelease(v12);
    }
  }
  else
  {
    int v68 = 0;
    uint64_t v69 = 0;
    WTF::FileSystemImpl::listDirectory((uint64_t *)&v66, v7, a2);
    if (v67)
    {
      uint64_t v15 = v66;
      uint64_t v16 = 8 * v67;
      while (1)
      {
        if (!WTF::equal(*v15, *(const WTF::StringImpl **)(a3 + 120), v14)) {
          goto LABEL_20;
        }
        WebKit::WebExtensionController::stateFilePath((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((void *)a1 + 5) + 40));
        BOOL DisplayNameFromState = WebKit::WebExtensionContext::readDisplayNameFromState((WebKit::WebExtensionContext *)buf, (const WTF::String *)&v68, v17);
        BOOL v20 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (!v20) {
          goto LABEL_17;
        }
        if (*(_DWORD *)v20 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v20, v18);
        if (DisplayNameFromState)
        {
LABEL_22:
          WTF::String::operator=((uint64_t *)&v69, v15);
          goto LABEL_23;
        }
LABEL_20:
        ++v15;
        v16 -= 8;
        if (!v16) {
          goto LABEL_23;
        }
      }
      *(_DWORD *)v20 -= 2;
LABEL_17:
      if (DisplayNameFromState) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
LABEL_23:
    if (v69)
    {
      uint64_t v21 = WTF::fastMalloc((WTF *)0x10);
      *(void *)(v21 + 8) = 0;
      unsigned __int8 v22 = (uint64_t *)(v21 + 8);
      *(_DWORD *)uint64_t v21 = 2;
      uint64_t v23 = *a4;
      *a4 = 0;
      v63 = (WTF *)v21;
      int v24 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v24 = &unk_1EEA000E8;
      v24[1] = v21;
      v24[2] = v23;
      uint64_t v25 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v25 = 1;
      v62 = (atomic_uint *)v25;
      *(void *)(v25 + 8) = v24;
      while (1)
      {
        uint64_t v27 = *v22;
        if (*v22
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, 0), (uint64_t v27 = *v22) != 0))
        {
          int v28 = *(_DWORD *)(v27 - 8);
        }
        else
        {
          int v28 = 0;
        }
        unsigned int v29 = *((_DWORD *)v69 + 4);
        if (v29 >= 0x100) {
          unsigned int v30 = v29 >> 8;
        }
        else {
          unsigned int v30 = WTF::StringImpl::hashSlowCase(v69);
        }
        char v31 = 0;
        for (int i = 1; ; ++i)
        {
          unsigned int v33 = v30 & v28;
          uint64_t v34 = (uint64_t *)(v27 + 16 * (v30 & v28));
          uint64_t v35 = (WTF *)*v34;
          if (*v34 == -1)
          {
            char v31 = (uint64_t *)(v27 + 16 * v33);
            goto LABEL_37;
          }
          if (!v35) {
            break;
          }
          if (WTF::equal(v35, v69, v26)) {
            goto LABEL_51;
          }
LABEL_37:
          unsigned int v30 = i + v33;
        }
        if (v31)
        {
          *char v31 = 0;
          v31[1] = 0;
          --*(_DWORD *)(*v22 - 16);
          uint64_t v34 = v31;
        }
        WTF::String::operator=(v34, &v69);
        int v36 = (WebKit::WebExtensionDataRecord *)API::Object::newObject(0x30uLL, 116);
        uint64_t v37 = WebKit::WebExtensionDataRecord::WebExtensionDataRecord(v36, (const WTF::String *)&v68, (const WTF::String *)&v69);
        uint64_t v38 = v34[1];
        v34[1] = (uint64_t)v37;
        if (v38) {
          CFRelease(*(CFTypeRef *)(v38 + 8));
        }
        uint64_t v39 = *v22;
        if (*v22) {
          int v40 = *(_DWORD *)(v39 - 12) + 1;
        }
        else {
          int v40 = 1;
        }
        *(_DWORD *)(v39 - 12) = v40;
        uint64_t v41 = *v22;
        if (*v22) {
          int v42 = *(_DWORD *)(v41 - 12);
        }
        else {
          int v42 = 0;
        }
        uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
        unint64_t v44 = *(unsigned int *)(v41 - 4);
        if (v44 > 0x400)
        {
          if (v44 <= 2 * v43) {
LABEL_50:
          }
            uint64_t v34 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, (WTF::StringImpl **)v34);
        }
        else if (3 * v44 <= 4 * v43)
        {
          goto LABEL_50;
        }
LABEL_51:
        uint64_t v45 = v34[1];
        CFRetain(*(CFTypeRef *)(v45 + 8));
        WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((void *)a1 + 5) + 40));
        WebKit::WebExtensionController::extensionContext(a1, &v69, &v64);
        __int16 v46 = v64;
        uint64_t v48 = WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v10 & -v10), v64);
        char v64 = 0;
        if (v46) {
          CFRelease(*((CFTypeRef *)v46 + 1));
        }
        uint64_t v49 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (!v49)
        {
LABEL_56:
          if (!v48) {
            goto LABEL_64;
          }
LABEL_57:
          ++*(_DWORD *)v63;
          atomic_fetch_add(v62, 1u);
          char v50 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          unsigned __int16 v51 = v68;
          if (v68) {
            *(_DWORD *)v68 += 2;
          }
          CFRetain(*(CFTypeRef *)(v45 + 8));
          char v52 = malloc_type_malloc(0x50uLL, 0x10E004026C8460BuLL);
          *char v52 = MEMORY[0x1E4F14398];
          v52[1] = 50331650;
          v52[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke;
          v52[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::descriptor;
          v52[4] = v63;
          v52[5] = v62;
          v52[6] = v50;
          v52[7] = v51;
          *((unsigned char *)v52 + 64) = v10 & -v10;
          v52[9] = v45;
          uint64_t v53 = _Block_copy(v52);

          char v54 = (void *)WTF::fastMalloc((WTF *)0x10);
          *char v54 = &unk_1EEA000C0;
          v54[1] = v53;
          *(void *)buf = v54;
          WebKit::WebExtensionController::calculateStorageSize(v48, (uint64_t *)buf);
          if (*(void *)buf) {
            (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
          }
          goto LABEL_66;
        }
        if (*(_DWORD *)v49 != 2)
        {
          *(_DWORD *)v49 -= 2;
          goto LABEL_56;
        }
        WTF::StringImpl::destroy(v49, v47);
        if (v48) {
          goto LABEL_57;
        }
LABEL_64:
        unint64_t v55 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          if (v69) {
            uint64_t v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v56 = &stru_1EEA10550;
          }
          *(_DWORD *)buf = 138477827;
          *(void *)&buf[4] = v56;
          _os_log_error_impl(&dword_1985F2000, v55, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);
        }
        WebKit::WebExtensionDataRecord::addError(v45, @"Unable to calculcate extension storage", v10 & -v10);
LABEL_66:

        CFRelease(*(CFTypeRef *)(v45 + 8));
        v10 &= v10 - 1;
        if (!v10)
        {
          WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v62);
          WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v63, v57);
          goto LABEL_77;
        }
      }
    }
    uint64_t v65 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(a4, &v65);
    if (v65) {
      CFRelease(*(CFTypeRef *)(v65 + 8));
    }
LABEL_77:
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v58);
    char v60 = v68;
    int v68 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, v59);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
    unint64_t v61 = v69;
    uint64_t v69 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, v59);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
  }
}

void sub_199353FA4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  uint64_t v23 = a18;
  a18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  int v24 = a19;
  a19 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v22);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1993542C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionController::removeData(WebKit::WebExtensionController *a1, unsigned __int8 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*((void *)a1 + 5) + 40);
  if (v4)
  {
    unsigned __int8 v5 = a2;
    BOOL v6 = !*(_DWORD *)(v4 + 4) || a2 == 0;
    if (!v6 && *(_DWORD *)(a3 + 12))
    {
      uint64_t v9 = *a4;
      *a4 = 0;
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EEA00110;
      v10[1] = v9;
      uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = v10;
      uint64_t v12 = *(unsigned int *)(a3 + 12);
      if (!v12) {
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
      }
      uint64_t v13 = *(uint64_t **)a3;
      uint64_t v32 = *(void *)a3 + 8 * v12;
      unsigned __int8 v33 = v5;
      while (1)
      {
        uint64_t v14 = *v13;
        CFRetain(*(CFTypeRef *)(*v13 + 8));
        uint64_t v34 = v13;
        uint64_t v15 = *(const WTF::StringImpl **)(v14 + 24);
        if (v15) {
          *(_DWORD *)v15 += 2;
        }
        int v36 = v15;
        unsigned __int8 v16 = v5;
        do
        {
          WebKit::WebExtensionController::extensionContext(a1, &v36, &v35);
          WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((void *)a1 + 5) + 40));
          uint64_t v17 = (CFTypeRef *)v35;
          if (v35) {
            CFRetain(*((CFTypeRef *)v35 + 1));
          }
          __int16 v19 = WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v16 & -v16), (WebKit::WebExtensionContext *)v17);
          if (v17) {
            CFRelease(v17[1]);
          }
          BOOL v20 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (!v20) {
            goto LABEL_19;
          }
          if (*(_DWORD *)v20 != 2)
          {
            *(_DWORD *)v20 -= 2;
LABEL_19:
            if (v19) {
              goto LABEL_20;
            }
            goto LABEL_24;
          }
          WTF::StringImpl::destroy(v20, v18);
          if (v19)
          {
LABEL_20:
            atomic_fetch_add((atomic_uint *volatile)v11, 1u);
            uint64_t v15 = v36;
            if (v36) {
              *(_DWORD *)v36 += 2;
            }
            CFRetain(*(CFTypeRef *)(v14 + 8));
            uint64_t v21 = malloc_type_malloc(0x40uLL, 0x10E00406C617F4FuLL);
            *uint64_t v21 = MEMORY[0x1E4F14398];
            v21[1] = 50331650;
            v21[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<void,WTF::String> &)#1}::__invoke;
            v21[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
            v21[4] = v11;
            v21[5] = v15;
            *((unsigned char *)v21 + 48) = v16 & -v16;
            v21[7] = v14;
            unsigned __int8 v22 = _Block_copy(v21);

            uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x10);
            *uint64_t v23 = &unk_1EEA00138;
            v23[1] = v22;
            id v24 = v19;
            uint64_t v25 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
            *uint64_t v25 = MEMORY[0x1E4F14398];
            v25[1] = 50331650;
            v25[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
            v25[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
            v25[4] = v23;
            unsigned int v26 = _Block_copy(v25);

            uint64_t v27 = _Block_copy(v26);
            [v24 deleteDatabaseWithCompletionHandler:v27];

            goto LABEL_26;
          }
LABEL_24:
          int v28 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            if (v15) {
              unsigned int v30 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              unsigned int v30 = &stru_1EEA10550;
            }
            *(_DWORD *)buf = 138477827;
            *(void *)&buf[4] = v30;
            _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);
          }
          WebKit::WebExtensionDataRecord::addError(v14, @"Unable to delete extension storage", v16 & -v16);
LABEL_26:

          if (v35) {
            CFRelease(*((CFTypeRef *)v35 + 1));
          }
          v16 &= v16 - 1;
        }
        while (v16);
        int v36 = 0;
        unsigned __int8 v5 = v33;
        if (!v15) {
          goto LABEL_37;
        }
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy(v15, v29);
          if (v14) {
            goto LABEL_38;
          }
        }
        else
        {
          *(_DWORD *)v15 -= 2;
LABEL_37:
          if (v14) {
LABEL_38:
          }
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
        uint64_t v13 = v34 + 1;
        if (v34 + 1 == (uint64_t *)v32) {
          return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
        }
      }
    }
  }

  return (unsigned int *)WTF::CompletionHandler<void ()(void)>::operator()(a4);
}

void sub_199354780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::load(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  id v7 = (uint64_t *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand((uint64_t *)(a1 + 56)),
        (uint64_t v6 = *v7) != 0))
  {
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = (v12 >> 31) ^ v12;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v13 & v8;
    unsigned __int8 v16 = (uint64_t *)(v6 + 8 * v15);
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      uint64_t v9 = (uint64_t *)(v6 + 8 * v15);
      goto LABEL_12;
    }
    if (!v17) {
      break;
    }
    if (v17 == a2)
    {
      CFRelease(*(CFTypeRef *)(a2 + 8));
      uint64_t v18 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "Extension context already loaded", (uint8_t *)buf, 2u);
        if (a3) {
          goto LABEL_17;
        }
      }
      else if (a3)
      {
LABEL_17:
        WebKit::WebExtensionContext::createError(a2, 2, 0, 0);
        uint64_t v19 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v19;
      }
      return 0;
    }
LABEL_12:
    unsigned int v13 = i + v15;
  }
  if (v9)
  {
    uint64_t *v9 = 0;
    --*(_DWORD *)(*v7 - 16);
    uint64_t *v9 = a2;
  }
  else
  {
    uint64_t *v16 = a2;
  }
  uint64_t v20 = *v7;
  if (*v7) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *v7;
  if (*v7) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  unsigned __int16 v130 = a3;
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24) {
LABEL_27:
    }
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand((uint64_t *)(a1 + 56));
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_27;
  }
  uint64_t v129 = (WTF::URL *)(a2 + 80);
  WTF::URL::protocolHostAndPort((uint64_t *)buf, (WTF::URL *)(a2 + 80));
  int v28 = (uint64_t *)(a1 + 64);
  uint64_t v29 = *(void *)(a1 + 64);
  if (v29
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 64)),
        (uint64_t v29 = *v28) != 0))
  {
    int v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    int v30 = 0;
  }
  unsigned int v31 = *(_DWORD *)(*(void *)&buf[0] + 16);
  char v128 = (uint64_t *)(a1 + 64);
  if (v31 >= 0x100) {
    unsigned int v32 = v31 >> 8;
  }
  else {
    unsigned int v32 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)&buf[0]);
  }
  unsigned __int8 v33 = 0;
  int v34 = 1;
  while (2)
  {
    unsigned int v35 = v32 & v30;
    int v36 = (WTF **)(v29 + 16 * (v32 & v30));
    uint64_t v37 = *v36;
    if (*v36 == (WTF *)-1)
    {
      unsigned __int8 v33 = (WTF **)(v29 + 16 * v35);
LABEL_40:
      unsigned int v32 = v34 + v35;
      ++v34;
      continue;
    }
    break;
  }
  if (v37)
  {
    if (WTF::equal(v37, *(const WTF::StringImpl **)&buf[0], v27))
    {
      int v40 = 1;
      goto LABEL_61;
    }
    goto LABEL_40;
  }
  if (v33)
  {
    *unsigned __int8 v33 = 0;
    v33[1] = 0;
    --*(_DWORD *)(*v128 - 16);
    int v36 = v33;
  }
  uint64_t v38 = *(WTF **)&buf[0];
  *(void *)&buf[0] = 0;
  uint64_t v39 = *v36;
  const WTF::StringImpl *v36 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v26);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v41 = v36[1];
  v36[1] = (WTF *)a2;
  if (v41) {
    CFRelease(*((CFTypeRef *)v41 + 1));
  }
  uint64_t v42 = *v128;
  if (*v128) {
    int v43 = *(_DWORD *)(v42 - 12) + 1;
  }
  else {
    int v43 = 1;
  }
  *(_DWORD *)(v42 - 12) = v43;
  uint64_t v44 = *v128;
  if (*v128) {
    int v45 = *(_DWORD *)(v44 - 12);
  }
  else {
    int v45 = 0;
  }
  uint64_t v46 = (*(_DWORD *)(v44 - 16) + v45);
  unint64_t v47 = *(unsigned int *)(v44 - 4);
  if (v47 > 0x400)
  {
    if (v47 <= 2 * v46) {
LABEL_59:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v128);
  }
  else if (3 * v47 <= 4 * v46)
  {
    goto LABEL_59;
  }
  int v40 = 0;
LABEL_61:
  uint64_t v48 = *(WTF::StringImpl **)&buf[0];
  *(void *)&buf[0] = 0;
  if (!v48)
  {
LABEL_64:
    if (!v40) {
      goto LABEL_71;
    }
LABEL_65:
    uint64_t v49 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      char v124 = WTF::URL::operator NSURL *();
      LODWORD(buf[0]) = 138477827;
      *(void *)((char *)buf + 4) = v124;
      _os_log_error_impl(&dword_1985F2000, v49, OS_LOG_TYPE_ERROR, "Extension context already loaded with same base URL: %{private}@", (uint8_t *)buf, 0xCu);
    }
    uint64_t v50 = *v7;
    matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(*v7, a2);
    if (v50)
    {
      char v52 = (uint64_t *)(v50 + 8 * *(unsigned int *)(v50 - 4));
      uint64_t v53 = v130;
      if (v52 == matched) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v53 = v130;
      if (!matched) {
        goto LABEL_77;
      }
      char v52 = 0;
    }
    if (v52 != matched)
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(v7, matched);
      uint64_t v53 = v130;
    }
LABEL_77:
    if (v53)
    {
      WebKit::WebExtensionContext::createError(a2, 4, 0, 0);
      uint64_t v19 = 0;
      *unsigned __int16 v130 = (id)objc_claimAutoreleasedReturnValue();
      return v19;
    }
    return 0;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_64;
  }
  WTF::StringImpl::destroy(v48, v26);
  if (v40) {
    goto LABEL_65;
  }
LABEL_71:
  uint64_t v127 = (void **)(a1 + 88);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 88), buf);
  uint64_t v54 = *(void *)(a1 + 88);
  if (v54)
  {
    uint64_t v55 = *(unsigned int *)(v54 - 4);
    uint64_t v56 = (void *)(v54 + 8 * v55);
  }
  else
  {
    uint64_t v56 = 0;
    uint64_t v55 = 0;
  }
  uint64_t v139 = a1 + 88;
  uint64_t v140 = v56;
  v141 = v56;
  v142 = v56;
  char v143 = (void *)(v54 + 8 * v55);
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  for (uint64_t j = *((void *)&buf[0] + 1); *((void **)&buf[0] + 1) != v140; uint64_t j = *((void *)&buf[0] + 1))
  {
    uint64_t v58 = *(void *)(*(void *)j + 8);
    if (v58) {
      uint64_t v59 = v58 - 16;
    }
    else {
      uint64_t v59 = 0;
    }
    CFRetain(*(CFTypeRef *)(v59 + 8));
    uint64_t v60 = *(void *)(a2 + 32);
    v145[0] = 165;
    v145[1] = v60;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v59 + 64), (unsigned __int8 *)v145, a2 + 16, &v134);
    if (v58) {
      CFRelease(*(CFTypeRef *)(v58 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  WTF::URL::protocol(v129);
  if ((v61 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  char v64 = (uint64_t *)(a1 + 168);
  uint64_t v63 = *(void *)(a1 + 168);
  if (v63
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 168)),
        (uint64_t v63 = *v64) != 0))
  {
    int v65 = *(_DWORD *)(v63 - 8);
  }
  else
  {
    int v65 = 0;
  }
  unsigned int v66 = *((_DWORD *)v133 + 4);
  if (v66 >= 0x100) {
    unsigned int v67 = v66 >> 8;
  }
  else {
    unsigned int v67 = WTF::StringImpl::hashSlowCase(v133);
  }
  int v68 = 0;
  int v69 = 1;
  while (2)
  {
    unsigned int v70 = v67 & v65;
    unint64_t v71 = (uint64_t *)(v63 + 16 * (v67 & v65));
    uint64_t v72 = (WTF *)*v71;
    if (*v71 == -1)
    {
      int v68 = (uint64_t *)(v63 + 16 * v70);
LABEL_101:
      unsigned int v67 = v69 + v70;
      ++v69;
      continue;
    }
    break;
  }
  if (v72)
  {
    if (WTF::equal(v72, v133, v62)) {
      goto LABEL_136;
    }
    goto LABEL_101;
  }
  if (v68)
  {
    *int v68 = 0;
    v68[1] = 0;
    --*(_DWORD *)(*v64 - 16);
    unint64_t v71 = v68;
  }
  WTF::String::operator=(v71, &v133);
  BOOL v74 = (WebKit::WebExtensionURLSchemeHandler *)WTF::fastMalloc((WTF *)0x40);
  WebKit::WebExtensionURLSchemeHandler::WebExtensionURLSchemeHandler(v74, (WebKit::WebExtensionController *)a1);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 72), buf);
  uint64_t v75 = *(void *)(a1 + 72);
  if (v75)
  {
    uint64_t v76 = *(unsigned int *)(v75 - 4);
    long long v77 = (void *)(v75 + 8 * v76);
  }
  else
  {
    long long v77 = 0;
    uint64_t v76 = 0;
  }
  uint64_t v139 = a1 + 72;
  uint64_t v140 = v77;
  v141 = v77;
  v142 = v77;
  char v143 = (void *)(v75 + 8 * v76);
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  while (2)
  {
    if (*((void **)&buf[0] + 1) != v140)
    {
      uint64_t v78 = *(void *)(**((void **)&buf[0] + 1) + 8);
      if (v78) {
        uint64_t v79 = v78 - 16;
      }
      else {
        uint64_t v79 = 0;
      }
      CFRetain(*(CFTypeRef *)(v79 + 8));
      ++*((_DWORD *)v74 + 2);
      v134 = (unsigned __int8 *)v74;
      WebKit::WebPageProxy::setURLSchemeHandlerForScheme((void *)v79, (const WTF::StringImpl **)&v134);
      uint64_t v80 = v134;
      v134 = 0;
      if (v80)
      {
        if (*((_DWORD *)v80 + 2) != 1)
        {
          --*((_DWORD *)v80 + 2);
          goto LABEL_115;
        }
        (*(void (**)(unsigned __int8 *))(*(void *)v80 + 8))(v80);
        if (!v78)
        {
LABEL_117:
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
          continue;
        }
      }
      else
      {
LABEL_115:
        if (!v78) {
          goto LABEL_117;
        }
      }
      CFRelease(*(CFTypeRef *)(v78 - 8));
      goto LABEL_117;
    }
    break;
  }
  v81 = (_DWORD *)v71[1];
  v71[1] = (uint64_t)v74;
  if (v81)
  {
    if (v81[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v81 + 8))(v81);
    }
    else {
      --v81[2];
    }
  }
  uint64_t v82 = *v64;
  if (*v64) {
    int v83 = *(_DWORD *)(v82 - 12) + 1;
  }
  else {
    int v83 = 1;
  }
  *(_DWORD *)(v82 - 12) = v83;
  uint64_t v84 = *v64;
  if (*v64) {
    int v85 = *(_DWORD *)(v84 - 12);
  }
  else {
    int v85 = 0;
  }
  uint64_t v86 = (*(_DWORD *)(v84 - 16) + v85);
  unint64_t v87 = *(unsigned int *)(v84 - 4);
  if (v87 > 0x400)
  {
    if (v87 <= 2 * v86) {
LABEL_135:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 168));
  }
  else if (3 * v87 <= 4 * v86)
  {
    goto LABEL_135;
  }
LABEL_136:
  uint64_t v88 = *(void *)(*(void *)(a1 + 40) + 40);
  if (!v88 || (*(_DWORD *)(v88 + 4) ? (BOOL v89 = *(unsigned char *)(a2 + 128) == 0) : (BOOL v89 = 1), v89))
  {
    char v90 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
    uint64_t v91 = v130;
    if (*MEMORY[0x1E4F30978]) {
      *(_DWORD *)v90 += 2;
    }
    v132 = v90;
    if (v90)
    {
LABEL_147:
      if ((WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v132, v73) & 1) == 0)
      {
        uint64_t v92 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          if (v132) {
            v125 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            v125 = &stru_1EEA10550;
          }
          char v126 = v125;
          LODWORD(buf[0]) = 138477827;
          *(void *)((char *)buf + 4) = v126;
          _os_log_error_impl(&dword_1985F2000, v92, OS_LOG_TYPE_ERROR, "Failed to create directory: %{private}@", (uint8_t *)buf, 0xCu);
        }
      }
      char v90 = v132;
      if (v132) {
        *(_DWORD *)v132 += 2;
      }
      uint64_t v91 = v130;
    }
  }
  else
  {
    uint64_t v91 = v130;
    WTF::FileSystemImpl::pathByAppendingComponent();
    char v90 = v132;
    if (v132) {
      goto LABEL_147;
    }
  }
  char v131 = v90;
  uint64_t v19 = WebKit::WebExtensionContext::load(a2, a1, &v131, v91);
  uint64_t v94 = v131;
  char v131 = 0;
  if (!v94)
  {
LABEL_156:
    if ((v19 & 1) == 0) {
      goto LABEL_160;
    }
    goto LABEL_157;
  }
  if (*(_DWORD *)v94 != 2)
  {
    *(_DWORD *)v94 -= 2;
    goto LABEL_156;
  }
  WTF::StringImpl::destroy(v94, v93);
  if (v19)
  {
LABEL_157:
    WebKit::WebExtensionContext::parameters((WebKit::WebExtensionContext *)a2, (uint64_t)buf);
    uint64_t v95 = *(void *)(a1 + 32);
    WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)a1, v144);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v144, &v139);
    if (v144[0])
    {
      uint64_t v96 = *((unsigned int *)v144[0] - 1);
      uint64_t v97 = &v144[0][v96];
    }
    else
    {
      uint64_t v97 = 0;
      uint64_t v96 = 0;
    }
    v134 = (unsigned __int8 *)v144;
    uint64_t v135 = v97;
    char v136 = v97;
    uint64_t v137 = v97;
    uint64_t v138 = &v144[0][v96];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v134);
    while (v140 != v135)
    {
      uint64_t v107 = *(void *)(*v140 + 8);
      uint64_t v108 = *(void *)(v107 + 136);
      if (v108 && *(unsigned char *)(v108 + 104) || *(void *)(v107 + 144))
      {
        uint64_t v109 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v109 = 1725;
        *((void *)v109 + 1) = v95;
        *((void *)v109 + 66) = (char *)v109 + 16;
        *((void *)v109 + 67) = 512;
        *((void *)v109 + 68) = 0;
        *((void *)v109 + 70) = 0;
        *((void *)v109 + 69) = 0;
        IPC::Encoder::encodeHeader(v109);
        char v147 = v109;
        IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode(v109, (uint64_t)buf);
        LOBYTE(v145[0]) = 0;
        char v146 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v107, &v147, 0, (uint64_t)v145, 1);
        if (v146)
        {
          uint64_t v111 = v145[0];
          v145[0] = 0;
          if (v111) {
            (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
          }
        }
        unint64_t v112 = v147;
        char v147 = 0;
        if (v112)
        {
          IPC::Encoder::~Encoder(v112, v110);
          WTF::fastFree(v113, v114);
        }
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v139);
    }
    if (v144[0]) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v144[0], v106);
    }
    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)buf, v106);
    goto LABEL_192;
  }
LABEL_160:
  uint64_t v98 = *v7;
  char v99 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(*v7, a2);
  if (v98)
  {
    uint64_t v100 = (uint64_t *)(v98 + 8 * *(unsigned int *)(v98 - 4));
    if (v100 == v99) {
      goto LABEL_167;
    }
  }
  else
  {
    if (!v99) {
      goto LABEL_167;
    }
    uint64_t v100 = 0;
  }
  if (v100 != v99) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove((uint64_t *)(a1 + 56), v99);
  }
LABEL_167:
  WTF::URL::protocolHostAndPort((uint64_t *)buf, v129);
  uint64_t v102 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v128, (WTF::StringImpl **)buf, v101);
  v103 = (WTF::StringImpl *)v102;
  if (*v128)
  {
    uint64_t v104 = *v128 + 16 * *(unsigned int *)(*v128 - 4);
    if (v104 == v102) {
      goto LABEL_174;
    }
  }
  else
  {
    if (!v102) {
      goto LABEL_174;
    }
    uint64_t v104 = 0;
  }
  if (v104 != v102) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v128, v102);
  }
LABEL_174:
  v105 = *(WTF::StringImpl **)&buf[0];
  *(void *)&buf[0] = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2) {
      WTF::StringImpl::destroy(v105, v103);
    }
    else {
      *(_DWORD *)v105 -= 2;
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v127, buf);
  uint64_t v119 = *v127;
  if (*v127)
  {
    uint64_t v120 = *((unsigned int *)v119 - 1);
    char v121 = &v119[v120];
  }
  else
  {
    char v121 = 0;
    uint64_t v120 = 0;
  }
  uint64_t v139 = a1 + 88;
  uint64_t v140 = v121;
  v141 = v121;
  v142 = v121;
  char v143 = &v119[v120];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  while (*((void **)&buf[0] + 1) != v140)
  {
    uint64_t v122 = *(void *)(**((void **)&buf[0] + 1) + 8);
    if (v122) {
      uint64_t v123 = v122 - 16;
    }
    else {
      uint64_t v123 = 0;
    }
    CFRetain(*(CFTypeRef *)(v123 + 8));
    IPC::MessageReceiverMap::removeMessageReceiver(v123 + 56, 0xA5u, *(void *)(a2 + 32));
    if (v122) {
      CFRelease(*(CFTypeRef *)(v122 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
LABEL_192:
  unint64_t v116 = v132;
  v132 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2) {
      WTF::StringImpl::destroy(v116, v115);
    }
    else {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v133;
  uint64_t v133 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2) {
      WTF::StringImpl::destroy(v117, v115);
    }
    else {
      *(_DWORD *)v117 -= 2;
    }
  }
  return v19;
}

void sub_1993555FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,IPC::Encoder *a32,WTF::StringImpl *a33)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v35);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v35);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::unload(void *a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v6 = a1[7];
  matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(v6, a2);
  if (v6)
  {
    int v8 = (uint64_t *)(v6 + 8 * *(unsigned int *)(v6 - 4));
    if (v8 == matched)
    {
LABEL_13:
      unsigned int v13 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Extension context not loaded", buf, 2u);
        if (a3) {
          goto LABEL_15;
        }
      }
      else if (a3)
      {
LABEL_15:
        WebKit::WebExtensionContext::createError(a2, 3, 0, 0);
        uint64_t v14 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_52;
      }
      uint64_t v14 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    if (!matched) {
      goto LABEL_13;
    }
    int v8 = 0;
  }
  if (v8 != matched) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(a1 + 7, matched);
  }
  WTF::URL::protocolHostAndPort((uint64_t *)buf, (WTF::URL *)(a2 + 80));
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 8, (WTF::StringImpl **)buf, v9);
  unint64_t v11 = (WTF::StringImpl *)v10;
  if (a1[8])
  {
    uint64_t v12 = a1[8] + 16 * *(unsigned int *)(a1[8] - 4);
    if (v12 == v10) {
      goto LABEL_20;
    }
LABEL_18:
    if (v12 != v10) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1 + 8, v10);
    }
    goto LABEL_20;
  }
  if (v10)
  {
    uint64_t v12 = 0;
    goto LABEL_18;
  }
LABEL_20:
  unsigned int v15 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v35 = *(void *)(a2 + 32);
  uint64_t v16 = a1[4];
  WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)a1, v43);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, buf);
  if (v43[0])
  {
    uint64_t v17 = *((unsigned int *)v43[0] - 1);
    uint64_t v18 = &v43[0][v17];
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  int v36 = v43;
  uint64_t v37 = v18;
  uint64_t v38 = v18;
  uint64_t v39 = v18;
  int v40 = &v43[0][v17];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
  while (v42 != v37)
  {
    uint64_t v20 = *(void *)(*v42 + 8);
    uint64_t v21 = *(void *)(v20 + 136);
    if (v21 && *(unsigned char *)(v21 + 104) || *(void *)(v20 + 144))
    {
      uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v22 = 1726;
      *((void *)v22 + 1) = v16;
      *((void *)v22 + 66) = (char *)v22 + 16;
      *((void *)v22 + 67) = 512;
      *((void *)v22 + 68) = 0;
      *((void *)v22 + 70) = 0;
      *((void *)v22 + 69) = 0;
      IPC::Encoder::encodeHeader(v22);
      uint64_t v46 = v22;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v35);
      LOBYTE(v44) = 0;
      char v45 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v46, 0, (uint64_t)&v44, 1);
      if (v45)
      {
        uint64_t v24 = v44;
        uint64_t v44 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
      }
      unint64_t v25 = v46;
      uint64_t v46 = 0;
      if (v25)
      {
        IPC::Encoder::~Encoder(v25, v23);
        WTF::fastFree(v26, v27);
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (v43[0]) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v43[0], v19);
  }
  int v28 = (void **)(a1 + 11);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v28, buf);
  uint64_t v29 = *v28;
  if (*v28)
  {
    uint64_t v30 = *((unsigned int *)v29 - 1);
    unsigned int v31 = &v29[v30];
  }
  else
  {
    unsigned int v31 = 0;
    uint64_t v30 = 0;
  }
  int v36 = v28;
  uint64_t v37 = v31;
  uint64_t v38 = v31;
  uint64_t v39 = v31;
  int v40 = &v29[v30];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
  while (v42 != v37)
  {
    uint64_t v32 = *(void *)(*v42 + 8);
    if (v32) {
      uint64_t v33 = v32 - 16;
    }
    else {
      uint64_t v33 = 0;
    }
    CFRetain(*(CFTypeRef *)(v33 + 8));
    IPC::MessageReceiverMap::removeMessageReceiver(v33 + 56, 0xA5u, *(void *)(a2 + 32));
    if (v32) {
      CFRelease(*(CFTypeRef *)(v32 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  uint64_t v14 = WebKit::WebExtensionContext::unload((WebKit::WebExtensionContext *)a2, a3);
LABEL_52:
  CFRelease(*(CFTypeRef *)(a2 + 8));
  return v14;
}

void sub_199355B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  CFRelease(*(CFTypeRef *)(v21 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionController::unloadAll(WebKit::WebExtensionController *this)
{
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::HashTable((uint64_t *)&v8, (void **)this + 7);
  uint64_t v3 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v8);
  uint64_t v4 = v2;
  uint64_t result = v8;
  if (v8) {
    uint64_t v6 = &v8[*((unsigned int *)v8 - 1)];
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != v3)
  {
    do
    {
      uint64_t v7 = *v3;
      CFRetain(*(CFTypeRef *)(*v3 + 8));
      WebKit::WebExtensionController::unload(this, v7, 0);
      CFRelease(*(CFTypeRef *)(v7 + 8));
      while (++v3 != v4)
      {
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v4;
LABEL_10:
      ;
    }
    while (v3 != v6);
    uint64_t result = v8;
  }
  if (result) {
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(result, v2);
  }
  return result;
}

void sub_199355D34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::removePage(WebKit::WebExtensionController *this, WebKit::WebPageProxy *a2)
{
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 72, a2);
  uint64_t v4 = (CFTypeRef *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)a2 + 6) + 24));
  CFRetain(v4[1]);
  WebKit::WebExtensionController::removeProcessPool(this, (WebKit::WebProcessPool *)v4);
  unsigned __int8 v5 = (CFTypeRef *)*((void *)a2 + 39);
  CFRetain(v5[1]);
  WebKit::WebExtensionController::removeWebsiteDataStore(this, (WebKit::WebsiteDataStore *)v5);
  uint64_t v6 = (CFTypeRef *)*((void *)a2 + 35);
  CFRetain(v6[1]);
  WebKit::WebExtensionController::removeUserContentController(this, (WebKit::WebUserContentControllerProxy *)v6);
  uint64_t v7 = (void *)((char *)this + 56);
  int v8 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  if (*v7) {
    uint64_t v12 = *v7 + 8 * *(unsigned int *)(*v7 - 4);
  }
  else {
    uint64_t v12 = 0;
  }
  if ((CFTypeRef **)v12 != v8)
  {
    do
    {
      unsigned int v13 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::disconnectPortsForPage((WebKit::WebExtensionContext *)v13, a2);
      CFRelease(v13[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != (CFTypeRef **)v12);
  }
  CFRelease(v6[1]);
  CFRelease(v5[1]);
  CFTypeRef v14 = v4[1];

  CFRelease(v14);
}

void sub_199355E9C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::removeProcessPool(WebKit::WebExtensionController *this, WebKit::WebProcessPool *a2)
{
  uint64_t v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 9, &v23);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v18 = v4;
  uint64_t v19 = v7;
  uint64_t v20 = v7;
  uint64_t v21 = v7;
  uint64_t v22 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
  while (v24 != v19)
  {
    uint64_t v8 = *(void *)(*(void *)v24 + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v10 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v9 + 48) + 24));
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 - 8));
    }
    if (v10 == a2) {
      return;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 56, 0xA7u, *((void *)this + 4));
  unint64_t v11 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
  uint64_t v12 = v11;
  CFTypeRef v14 = v13;
  uint64_t v15 = *((void *)this + 7);
  if (v15) {
    uint64_t v16 = (uint64_t *)(v15 + 8 * *(unsigned int *)(v15 - 4));
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 != v11)
  {
    do
    {
      uint64_t v17 = *v12++;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 56, 0xA5u, *(void *)(v17 + 32));
      CFRelease(*(CFTypeRef *)(v17 + 8));
      while (v12 != v14)
      {
        if ((unint64_t)(*v12 + 1) > 1) {
          goto LABEL_22;
        }
        ++v12;
      }
      uint64_t v12 = v14;
LABEL_22:
      ;
    }
    while (v12 != v16);
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 88, a2);
}

void WebKit::WebExtensionController::removeWebsiteDataStore(WebKit::WebExtensionController *this, WebKit::WebsiteDataStore *a2)
{
  uint64_t v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 9, &v19);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  CFTypeRef v14 = v4;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v7;
  uint64_t v18 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    uint64_t v8 = *(void *)(*(void *)v20 + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v10 = *(void *)(*(void *)(v9 + 312) + 24);
    uint64_t v11 = *((void *)a2 + 3);
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 - 8));
    }
    if (v10 == v11) {
      return;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>((uint64_t)this + 104, a2);
  uint64_t v12 = WebKit::WebsiteDataStore::cookieStore(a2);
  API::HTTPCookieStore::unregisterObserver((uint64_t)v12, *((void **)this + 24));
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 13))
  {
    uint64_t v13 = *((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
}

void WebKit::WebExtensionController::removeUserContentController(WebKit::WebExtensionController *this, WebKit::WebUserContentControllerProxy *a2)
{
  uint64_t v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 9, &v23);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v18 = v4;
  uint64_t v19 = v7;
  uint64_t v20 = v7;
  uint64_t v21 = v7;
  uint64_t v22 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
  while (v24 != v19)
  {
    uint64_t v8 = *(void *)(*(void *)v24 + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v10 = *(WebKit::WebUserContentControllerProxy **)(v9 + 280);
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 - 8));
    }
    if (v10 == a2) {
      return;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
  }
  uint64_t v11 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
  uint64_t v12 = v11;
  CFTypeRef v14 = v13;
  uint64_t v15 = *((void *)this + 7);
  if (v15) {
    uint64_t v16 = (CFTypeRef **)(v15 + 8 * *(unsigned int *)(v15 - 4));
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 != v11)
  {
    do
    {
      uint64_t v17 = *v12;
      CFRetain((*v12)[1]);
      WebKit::WebExtensionContext::removeInjectedContent((WebKit::WebExtensionContext *)v17, a2);
      CFRelease(v17[1]);
      while (++v12 != v14)
      {
        if ((unint64_t)*v12 + 1 > 1) {
          goto LABEL_22;
        }
      }
      uint64_t v12 = v14;
LABEL_22:
      ;
    }
    while (v12 != v16);
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 136, a2);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 152, a2);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 120, a2);
}

void sub_199356318(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

CFTypeRef *WebKit::WebExtensionController::websiteDataStore(uint64_t a1, CFTypeRef a2, char a3)
{
  if (a3
    && WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(*(WebKit::WebExtensionControllerConfiguration **)(a1 + 40))[3] != a2)
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 104), &v17);
    uint64_t v7 = *(void *)(a1 + 104);
    if (v7)
    {
      uint64_t v8 = *(unsigned int *)(v7 - 4);
      uint64_t v9 = v7 + 8 * v8;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v12 = a1 + 104;
    uint64_t v13 = v9;
    uint64_t v14 = v9;
    uint64_t v15 = v9;
    uint64_t v16 = v7 + 8 * v8;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
    while (v18 != v13)
    {
      uint64_t v10 = *(void *)(*(void *)v18 + 8);
      CFRetain(*(CFTypeRef *)(v10 + 8));
      CFTypeRef v11 = *(CFTypeRef *)(v10 + 24);
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v11 == a2) {
        return (CFTypeRef *)v10;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
    }
    return 0;
  }
  else
  {
    uint64_t v5 = *(WebKit::WebExtensionControllerConfiguration **)(a1 + 40);
    return WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(v5);
  }
}

void WebKit::WebExtensionController::extensionContext(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    CFTypeRef v11 = (void *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  }
  else {
    CFTypeRef v11 = 0;
  }
  if (v11 == v6)
  {
LABEL_12:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v12 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      uint64_t v13 = *(const void **)(v12 + 8);
      if (*(void *)(v12 + 64) == a2) {
        break;
      }
      CFRelease(v13);
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v7 = v9;
LABEL_11:
      if (v7 == v11) {
        goto LABEL_12;
      }
    }
    CFRetain(v13);
    *a3 = v12;
    uint64_t v14 = *(const void **)(v12 + 8);
    CFRelease(v14);
  }
}

void sub_199356518(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionController::extensionContext@<X0>(WebKit::WebExtensionController *this@<X0>, const WTF::URL *a2@<X1>, WTF **a3@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 64);
  WTF::URL::protocolHostAndPort((uint64_t *)&v10, a2);
  uint64_t v6 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v10, v5);
  uint64_t v8 = v6;
  if (v6) {
    CFRetain(*((CFTypeRef *)v6 + 1));
  }
  *a3 = v8;
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1993565A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::extensions(WebKit::WebExtensionController *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = (void **)((char *)this + 56);
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    unsigned int v5 = *(_DWORD *)(v3 - 12);
  }
  else {
    unsigned int v5 = 0;
  }
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v5);
  uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (*v4) {
    uint64_t v10 = (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((void *)v10 != v6)
  {
    do
    {
      uint64_t v11 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      uint64_t v12 = *(void *)(v11 + 64);
      CFRetain(*(CFTypeRef *)(v12 + 8));
      uint64_t v14 = v12;
      WTF::HashTable<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>>::add(a2, &v14, (uint64_t)v15);
      uint64_t v13 = v14;
      uint64_t v14 = 0;
      if (v13) {
        CFRelease(*(CFTypeRef *)(v13 + 8));
      }
      CFRelease(*(CFTypeRef *)(v11 + 8));
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v7 = v9;
LABEL_15:
      ;
    }
    while (v7 != (void *)v10);
  }
}

void sub_1993566D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (*v9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v9, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    uint64_t v17 = (CFTypeRef **)(v16 + 8 * *(unsigned int *)(v16 - 4));
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != v12)
  {
    do
    {
      uint64_t v18 = *v13;
      CFRetain((*v13)[1]);
      WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(v18[1]);
      while (++v13 != v15)
      {
        if ((unint64_t)*v13 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_199356804(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    uint64_t v17 = (uint64_t *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != v12)
  {
    do
    {
      uint64_t v18 = *v13;
      CFRetain(*(CFTypeRef *)(*v13 + 8));
      WebKit::WebExtensionContext::didCommitLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_1993568F8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    uint64_t v17 = (CFTypeRef **)(v16 + 8 * *(unsigned int *)(v16 - 4));
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != v12)
  {
    do
    {
      uint64_t v18 = *v13;
      CFRetain((*v13)[1]);
      WebKit::WebExtensionContext::didFinishLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(v18[1]);
      while (++v13 != v15)
      {
        if ((unint64_t)*v13 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_1993569EC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didFailLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    uint64_t v17 = (CFTypeRef **)(v16 + 8 * *(unsigned int *)(v16 - 4));
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != v12)
  {
    do
    {
      uint64_t v18 = *v13;
      CFRetain((*v13)[1]);
      WebKit::WebExtensionContext::didFailLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(v18[1]);
      while (++v13 != v15)
      {
        if ((unint64_t)*v13 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_199356AE0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::handleContentRuleListNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a4 + 52);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = *(const WTF::StringImpl ***)(a4 + 40);
    uint64_t v7 = &v6[4 * v4];
    uint64_t v8 = (void **)(a1 + 56);
    do
    {
      uint64_t v9 = *v6;
      if (*v6) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v10 = (WTF::RunLoop *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v8);
      uint64_t v12 = (uint64_t *)v10;
      uint64_t v13 = v11;
      if (*v8) {
        uint64_t v14 = (uint64_t)&(*v8)[*((unsigned int *)*v8 - 1)];
      }
      else {
        uint64_t v14 = 0;
      }
      if ((WTF::RunLoop *)v14 != v10)
      {
        while (1)
        {
          uint64_t v15 = *v12;
          CFRetain(*(CFTypeRef *)(*v12 + 8));
          if (WTF::equal(*(WTF **)(v15 + 120), v9, v16)) {
            break;
          }
          CFRelease(*(CFTypeRef *)(v15 + 8));
          while (++v12 != (uint64_t *)v13)
          {
            if ((unint64_t)(*v12 + 1) > 1) {
              goto LABEL_15;
            }
          }
          uint64_t v12 = (uint64_t *)v13;
LABEL_15:
          if (v12 == (uint64_t *)v14) {
            goto LABEL_21;
          }
        }
        WebKit::WebExtensionContext::getCurrentTab(v15, a2, 0, 0, &v27);
        uint64_t v17 = v27;
        if (v27)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v26, (uint64_t)(v6 + 2));
          v5 |= WebKit::WebExtensionContext::handleContentRuleListNotificationForTab((uint64_t *)v15, v17, a3);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v18);
          if (v27) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
          }
        }
        CFRelease(*(CFTypeRef *)(v15 + 8));
      }
LABEL_21:
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          uint64_t v10 = (WTF::RunLoop *)WTF::StringImpl::destroy(v9, v11);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      v6 += 4;
    }
    while (v6 != v7);
    if ((v5 & 1) != 0 && !*(void *)(a1 + 184))
    {
      uint64_t v19 = (WTF::RunLoop *)WTF::RunLoop::current(v10);
      uint64_t v20 = (WTF::RunLoop::TimerBase *)WTF::fastMalloc((WTF *)0x20);
      uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v21 = &unk_1EEA00070;
      v21[1] = WebKit::WebExtensionController::purgeOldMatchedRules;
      v21[2] = 0;
      v21[3] = a1;
      WTF::RunLoop::TimerBase::TimerBase(v20, v19);
      *(void *)uint64_t v20 = &unk_1EE9B3390;
      *((void *)v20 + 3) = v21;
      uint64_t v22 = *(void *)(a1 + 184);
      *(void *)(a1 + 184) = v20;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      WTF::RunLoop::TimerBase::start();
    }
  }
}

void sub_199356D6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::purgeOldMatchedRules(WebKit::WebExtensionController *this)
{
  WTF::WallTime::now(this);
  double v14 = v2 + -300.0;
  uint64_t v3 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    uint64_t v8 = (CFTypeRef **)(v7 + 8 * *(unsigned int *)(v7 - 4));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == v3) {
    goto LABEL_13;
  }
  char v9 = 0;
  do
  {
    uint64_t v10 = *v4;
    CFRetain((*v4)[1]);
    BOOL v11 = WebKit::WebExtensionContext::purgeMatchedRulesFromBefore((WebKit::WebExtensionContext *)v10, (const WTF::WallTime *)&v14);
    CFRelease(v10[1]);
    while (++v4 != v6)
    {
      if ((unint64_t)*v4 + 1 > 1) {
        goto LABEL_11;
      }
    }
    uint64_t v4 = v6;
LABEL_11:
    v9 |= v11;
  }
  while (v4 != v8);
  if ((v9 & 1) == 0)
  {
LABEL_13:
    uint64_t v12 = *((void *)this + 23);
    *((void *)this + 23) = 0;
    if (v12)
    {
      uint64_t v13 = *(void (**)(void))(*(void *)v12 + 8);
      v13();
    }
  }
}

void sub_199356F4C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::updateWebsitePoliciesForNavigation(WebKit::WebExtensionController *this, API::WebsitePolicies *a2, API::NavigationAction *a3)
{
  uint64_t v4 = (uint64_t *)((char *)a2 + 24);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v70, (void **)a2 + 3);
  int v5 = (void **)((char *)this + 56);
  uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v5);
  uint64_t v8 = v6;
  char v9 = v7;
  uint64_t v59 = v4;
  if (*v5) {
    uint64_t v10 = (uint64_t)&(*v5)[*((unsigned int *)*v5 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((void *)v10 == v6) {
    goto LABEL_72;
  }
  uint64_t v60 = v10;
  do
  {
    uint64_t v11 = *v8;
    CFRetain(*(CFTypeRef *)(*v8 + 8));
    MEMORY[0x19972EAD0](&v64, @"declarativeNetRequestWithHostAccess");
    int v13 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)v11, &v64, 0, 2);
    double v14 = v64;
    char v64 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    if ((v13 & 0xFFFFFFFE) != 2) {
      goto LABEL_62;
    }
    int v68 = 0;
    int v69 = 0;
    WebKit::WebExtensionContext::currentPermissionMatchPatterns((WebKit::WebExtensionContext *)v11, &v64);
    uint64_t v16 = v65;
    uint64_t v17 = v67;
    if (v65 != v67)
    {
      uint64_t v18 = v66;
      do
      {
        uint64_t v19 = *v16;
        CFRetain((*v16)[1]);
        uint64_t v20 = WebKit::WebExtensionMatchPattern::expandedStrings((WebKit::WebExtensionMatchPattern *)v19);
        WTF::makeVector<WTF::String>(v20, (uint64_t)&v62);
        uint64_t v22 = v63;
        unint64_t v23 = v63 + (unint64_t)HIDWORD(v69);
        if (v23 > v69)
        {
          unint64_t v24 = v69 + ((unint64_t)v69 >> 2);
          if (v24 >= 0x10) {
            unint64_t v25 = v24 + 1;
          }
          else {
            unint64_t v25 = 16;
          }
          if (v25 <= v23) {
            unint64_t v26 = v63 + (unint64_t)HIDWORD(v69);
          }
          else {
            unint64_t v26 = v25;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v68, v26);
          uint64_t v22 = v63;
        }
        if (v22)
        {
          uint64_t v27 = v62;
          unsigned int v28 = HIDWORD(v69);
          uint64_t v29 = 8 * v22;
          do
          {
            uint64_t v30 = v68;
            uint64_t v31 = *v27;
            *v27++ = 0;
            *((void *)v30 + v28++) = v31;
            v29 -= 8;
          }
          while (v29);
          HIDWORD(v69) = v28;
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v21);

        if (v19) {
          CFRelease(v19[1]);
        }
        while (1)
        {
          v16 += 2;
          if (v16 == v18) {
            break;
          }
          if ((unint64_t)*v16 + 1 > 1) {
            goto LABEL_31;
          }
        }
        uint64_t v16 = v18;
LABEL_31:
        ;
      }
      while (v16 != v17);
    }
    uint64_t v32 = v70;
    if (v70
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v70, 0), (uint64_t v32 = v70) != 0))
    {
      int v33 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      int v33 = 0;
    }
    int v34 = (const WTF::StringImpl **)(v11 + 120);
    uint64_t v35 = *(WTF::StringImpl **)(v11 + 120);
    unsigned int v36 = *((_DWORD *)v35 + 4);
    uint64_t v61 = v11;
    if (v36 >= 0x100) {
      unsigned int v37 = v36 >> 8;
    }
    else {
      unsigned int v37 = WTF::StringImpl::hashSlowCase(v35);
    }
    uint64_t v38 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v40 = v37 & v33;
      uint64_t v41 = (uint64_t *)(v32 + 24 * (v37 & v33));
      uint64_t v42 = (WTF *)*v41;
      if (*v41 == -1)
      {
        uint64_t v38 = (uint64_t *)(v32 + 24 * v40);
        goto LABEL_44;
      }
      if (!v42) {
        break;
      }
      if (WTF::equal(v42, *v34, v15))
      {
        uint64_t v48 = v32 + 24 * v40;
        uint64_t v49 = v48 + 8;
        uint64_t v50 = *(unsigned int *)(v48 + 20);
        if (v50) {
          WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)v49, (WTF::StringImpl *)(*(void *)v49 + 8 * v50));
        }
        unsigned __int16 v51 = *(WTF **)v49;
        uint64_t v10 = v60;
        uint64_t v11 = v61;
        if (*(void *)v49)
        {
          *(void *)uint64_t v49 = 0;
          *(_DWORD *)(v49 + 8) = 0;
          WTF::fastFree(v51, v43);
        }
        char v52 = v68;
        int v68 = 0;
        *(void *)uint64_t v49 = v52;
        LODWORD(v52) = v69;
        LODWORD(v69) = 0;
        *(_DWORD *)(v49 + 8) = v52;
        LODWORD(v52) = HIDWORD(v69);
        HIDWORD(v69) = 0;
        *(_DWORD *)(v49 + 12) = v52;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v43);
        goto LABEL_62;
      }
LABEL_44:
      unsigned int v37 = i + v40;
    }
    uint64_t v11 = v61;
    if (v38)
    {
      v38[1] = 0;
      v38[2] = 0;
      *uint64_t v38 = 0;
      --*(_DWORD *)(v70 - 16);
      uint64_t v41 = v38;
    }
    WTF::String::operator=(v41, v34);
    uint64_t v10 = v60;
    char v64 = v68;
    uint64_t v44 = v69;
    int v68 = 0;
    int v69 = 0;
    int v65 = v44;
    WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v41 + 1), &v64);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v45);
    if (v70) {
      int v47 = *(_DWORD *)(v70 - 12) + 1;
    }
    else {
      int v47 = 1;
    }
    *(_DWORD *)(v70 - 12) = v47;
    if (v70) {
      int v53 = *(_DWORD *)(v70 - 12);
    }
    else {
      int v53 = 0;
    }
    uint64_t v54 = (*(_DWORD *)(v70 - 16) + v53);
    unint64_t v55 = *(unsigned int *)(v70 - 4);
    if (v55 > 0x400)
    {
      if (v55 <= 2 * v54) {
LABEL_60:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v70, (uint64_t)v41);
    }
    else if (3 * v55 <= 4 * v54)
    {
      goto LABEL_60;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v46);
    if (!v61) {
      goto LABEL_63;
    }
LABEL_62:
    CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_63:
    while (++v8 != v9)
    {
      if ((unint64_t)(*v8 + 1) > 1) {
        goto LABEL_67;
      }
    }
    uint64_t v8 = v9;
LABEL_67:
    ;
  }
  while (v8 != (void *)v10);
LABEL_72:
  uint64_t v56 = v70;
  uint64_t v70 = 0;
  uint64_t result = *v59;
  *uint64_t v59 = v56;
  if (result)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v7);
    uint64_t result = v70;
    if (v70) {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v70, v58);
    }
  }
  return result;
}

void sub_199357388(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v22 = *(void *)(v20 - 88);
  if (v22) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::resourceLoadDidSendRequest(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  uint64_t v8 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    int v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  }
  else {
    int v13 = 0;
  }
  if (v13 != v8)
  {
    do
    {
      double v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidSendRequest(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1) {
          goto LABEL_10;
        }
      }
      char v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_199357524(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidPerformHTTPRedirection(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v11 = v10;
  int v13 = v12;
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    uint64_t v15 = (CFTypeRef **)(v14 + 8 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v10)
  {
    do
    {
      uint64_t v16 = *v11;
      CFRetain((*v11)[1]);
      WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(v16, a2, a3, a4, a5);
      CFRelease(v16[1]);
      while (++v11 != v13)
      {
        if ((unint64_t)*v11 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v11 = v13;
LABEL_10:
      ;
    }
    while (v11 != v15);
  }
}

void sub_199357608(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidReceiveChallenge(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  uint64_t v8 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    int v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  }
  else {
    int v13 = 0;
  }
  if (v13 != v8)
  {
    do
    {
      uint64_t v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1) {
          goto LABEL_10;
        }
      }
      char v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_1993576E4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidReceiveResponse(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  uint64_t v8 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    int v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  }
  else {
    int v13 = 0;
  }
  if (v13 != v8)
  {
    do
    {
      uint64_t v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1) {
          goto LABEL_10;
        }
      }
      char v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_1993577C0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidCompleteWithError(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(a1 + 56));
  uint64_t v11 = v10;
  int v13 = v12;
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    uint64_t v15 = (CFTypeRef **)(v14 + 8 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v10)
  {
    do
    {
      uint64_t v16 = *v11;
      CFRetain((*v11)[1]);
      WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(v16, a2, a3, a4, a5);
      CFRelease(v16[1]);
      while (++v11 != v13)
      {
        if ((unint64_t)*v11 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v11 = v13;
LABEL_10:
      ;
    }
    while (v11 != v15);
  }
}

void sub_1993578A4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v6);
  }
  uint64_t result = (WTF *)a1[4];
  a1[4] = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(result, a2);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (*a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v9 = v5;
    WebKit::WebExtensionDataRecord::addError(v4, v5, *(unsigned __int8 *)(a1 + 64));
  }
  else
  {
    uint64_t v6 = *a2;
    char v12 = *(unsigned char *)(a1 + 64);
    uint64_t v11 = v6;
    WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(&v10, (uint64_t *)(v4 + 32), &v12, &v11);
  }
}

_OWORD *WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(_OWORD *result, uint64_t *a2, unsigned char *a3, void *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (unsigned __int8 *)(v8 + 16 * v14);
  int v16 = *v15;
  if (v16 != 255)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v8 - 4);
        }
        *(void *)uint64_t v7 = v15;
        *((void *)v7 + 1) = v8 + 16 * v25;
        *((unsigned char *)v7 + 16) = 0;
        *((void *)v15 + 1) = *a4;
        return result;
      }
      if (v16 == 254) {
        uint64_t v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (unsigned __int8 *)(v8 + 16 * v14);
      int v16 = *v15;
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *uint64_t v17 = -1;
      *((void *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v11) = *a3;
      uint64_t v15 = v17;
    }
  }
  *uint64_t v15 = v11;
  *((void *)v15 + 1) = *a4;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      uint64_t result = WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(a2, v15);
      uint64_t v15 = (unsigned __int8 *)result;
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  *(void *)uint64_t v7 = v15;
  *((void *)v7 + 1) = v21 + 16 * v24;
  *((unsigned char *)v7 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    uint64_t v10 = v7;
    int v11 = (void *)(v8 + 24);
    do
    {
      *((unsigned char *)v11 - 8) = -1;
      *int v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    do
    {
      unsigned int v14 = (unsigned __int8 *)(v4 + 16 * v12);
      unsigned int v15 = *v14;
      if (v15 <= 0xFD)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          int v17 = 0;
        }
        int v18 = 0;
        unsigned int v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v21 = v20 & v17;
          unsigned int v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
        int v22 = (_OWORD *)(v16 + 16 * v21);
        *int v22 = *(_OWORD *)v14;
        if (v14 == a2) {
          unsigned int v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    unsigned int v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

WTF *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v6);
  }
  uint64_t result = (WTF *)a1[4];
  a1[4] = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(result, a2);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v3)
  {
    if (v3 != 1)
    {
      unsigned int v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (*a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v9 = v5;
    WebKit::WebExtensionDataRecord::addError(v4, v5, *(unsigned __int8 *)(a1 + 64));
  }
  else
  {
    uint64_t v6 = *a2;
    char v12 = *(unsigned char *)(a1 + 64);
    uint64_t v11 = v6;
    WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(&v10, (uint64_t *)(v4 + 32), &v12, &v11);
  }
}

unsigned int *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<void,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    id v8 = v4;
    WebKit::WebExtensionDataRecord::addError(v3, v4, *(unsigned __int8 *)(a1 + 48));
  }
  else
  {
    int v5 = [MEMORY[0x1E4F28C40] defaultCenter];
    char v9 = @"uniqueIdentifier";
    if (*(void *)(a1 + 40)) {
      uint64_t v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v6 = &stru_1EEA10550;
    }
    v10[0] = v6;
    unsigned int v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    [v5 postNotificationName:@"WebExtensionLocalStorageWasDeleted" object:0 userInfo:v7];
  }
}

void sub_1993580D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  char v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 32);
  id v5 = a3;
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
    MEMORY[0x19972EAD0](&v10, v7);
    uint64_t v8 = v10;
    int v9 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::operator()(v4);
    ((void (*)(uint64_t *, uint64_t *))off_1EEA00008[v9])(&v10, &v8);
    int v9 = -1;
  }
  else
  {
    uint64_t v8 = a2;
    int v9 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::operator()(v4);
    ((void (*)(uint64_t *, uint64_t *))off_1EEA00008[v9])(&v10, &v8);
  }
}

void sub_199358230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))off_1EEA00008[v6])(va1, (uint64_t *)va);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  double v2 = (uint64_t *)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
    MEMORY[0x19972EAD0](&v8, v5);
    id v7 = v8;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v2);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v2);
  }
}

void sub_1993583C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *((unsigned int *)*a2 - 3);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_8;
    }
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    double v8 = (double)v3;
    double v9 = (double)v7;
    double v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400) {
    goto LABEL_6;
  }
LABEL_8:
  double v8 = (double)v3;
  double v9 = (double)v7;
  double v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8) {
    LODWORD(v7) = 2 * v7;
  }
  if (v7 <= 8) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = v7;
  }
  uint64_t v12 = WTF::fastZeroedMalloc((WTF *)(8 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  unsigned int v13 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  if (*a2) {
    uint64_t v17 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v17 = 0;
  }
  if ((uint64_t *)v17 != v13)
  {
    do
    {
      uint64_t v18 = *a1;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      uint64_t v20 = *v14;
      unint64_t v21 = ~(*v14 << 32) + *v14;
      unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      unsigned int v24 = v19 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27)));
      int v25 = 1;
      do
      {
        unsigned int v26 = v24;
        uint64_t v27 = *(void *)(v18 + 8 * v24);
        unsigned int v24 = (v24 + v25++) & v19;
      }
      while (v27);
      uint64_t v28 = v26;
      CFRetain(*(CFTypeRef *)(v20 + 8));
      uint64_t v29 = *(void *)(v18 + 8 * v28);
      *(void *)(v18 + 8 * v28) = v20;
      if (v29) {
        CFRelease(*(CFTypeRef *)(v29 + 8));
      }
      while (++v14 != v16)
      {
        if ((unint64_t)(*v14 + 1) > 1) {
          goto LABEL_29;
        }
      }
      unsigned int v14 = v16;
LABEL_29:
      ;
    }
    while (v14 != (uint64_t *)v17);
  }
  return a1;
}

void WebKit::WebExtensionController::HTTPCookieStoreObserver::~HTTPCookieStoreObserver(WebKit::WebExtensionController::HTTPCookieStoreObserver *this, void *a2)
{
  *(void *)this = &unk_1EEA00048;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EEA00048;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

void WebKit::WebExtensionController::HTTPCookieStoreObserver::cookiesDidChange(WebKit::WebExtensionController::HTTPCookieStoreObserver *this, API::HTTPCookieStore *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v4 = (CFTypeRef **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(v3 + 40));
      unsigned int v5 = v4;
      unint64_t v7 = v6;
      uint64_t v8 = *(void *)(v3 + 40);
      if (v8) {
        double v9 = (CFTypeRef **)(v8 + 8 * *(unsigned int *)(v8 - 4));
      }
      else {
        double v9 = 0;
      }
      if (v9 != v4)
      {
        do
        {
          double v10 = *v5;
          CFRetain((*v5)[1]);
          WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(v10);
          CFRelease(v10[1]);
          while (++v5 != v7)
          {
            if ((unint64_t)*v5 + 1 > 1) {
              goto LABEL_12;
            }
          }
          unsigned int v5 = v7;
LABEL_12:
          ;
        }
        while (v5 != v9);
      }
      unsigned int v11 = *(const void **)(v3 - 8);
      CFRelease(v11);
    }
  }
}

void sub_199358808(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionController::*&)(void),WebKit::WebExtensionController*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WTF *WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      if (v4)
      {
        uint64_t v5 = *((void *)this + 1);
        do
        {
          unsigned int v6 = *(WTF::StringImpl **)v5;
          if (*(void *)v5 != -1)
          {
            uint64_t v7 = *(void *)(v5 + 8);
            *(void *)(v5 + 8) = 0;
            if (v7)
            {
              CFRelease(*(CFTypeRef *)(v7 + 8));
              unsigned int v6 = *(WTF::StringImpl **)v5;
            }
            *(void *)uint64_t v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2) {
                WTF::StringImpl::destroy(v6, a2);
              }
              else {
                *(_DWORD *)v6 -= 2;
              }
            }
          }
          v5 += 16;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA00098;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA00098;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

CFTypeRef WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  uint64_t v4 = v3;
  unsigned int v6 = v5;
  if (v2) {
    v2 += 2 * *((unsigned int *)v2 - 1);
  }
  if (v2 == v3)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
LABEL_21:
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), &v20);
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
    return (CFTypeRef)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v19);
  }
  LODWORD(v7) = 0;
  do
  {
    unint64_t v8 = (unint64_t)(v4 + 1);
    if (v7 == v23)
    {
      unint64_t v9 = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, v7 + 1, v8);
      LODWORD(v7) = HIDWORD(v23);
      uint64_t v10 = v22;
      uint64_t v11 = *(void *)v9;
      CFTypeRef result = CFRetain(*(CFTypeRef *)(*(void *)v9 + 8));
    }
    else
    {
      uint64_t v10 = v22;
      uint64_t v11 = *(void *)v8;
      CFTypeRef result = CFRetain(*(CFTypeRef *)(*(void *)v8 + 8));
    }
    *(void *)(v10 + 8 * v7) = v11;
    uint64_t v7 = ++HIDWORD(v23);
    while (1)
    {
      v4 += 2;
      if (v4 == v6) {
        break;
      }
      if ((unint64_t)(*v4 + 1) > 1) {
        goto LABEL_13;
      }
    }
    uint64_t v4 = v6;
LABEL_13:
    ;
  }
  while (v4 != v2);
  uint64_t v20 = 0;
  LODWORD(v21) = 0;
  HIDWORD(v21) = v7;
  if (!v7) {
    goto LABEL_21;
  }
  if (!(v7 >> 29))
  {
    uint64_t v13 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v21) = v7;
    uint64_t v20 = v13;
    if (HIDWORD(v23))
    {
      uint64_t v14 = 0;
      uint64_t v15 = v22;
      uint64_t v16 = 8 * HIDWORD(v23);
      do
      {
        uint64_t v17 = *(void *)(v15 + v14);
        CFRetain(*(CFTypeRef *)(v17 + 8));
        *(void *)(v13 + v14) = v17;
        v14 += 8;
      }
      while (v16 != v14);
    }
    goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

void sub_199358BD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = v17 + 16 * v22;
          uint64_t v24 = *(void *)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(*(CFTypeRef *)(v24 + 8));
            int v25 = *(WTF::StringImpl **)v23;
            *(void *)uint64_t v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
          }
          unsigned int v26 = *v13;
          uint64_t *v13 = 0;
          *(void *)uint64_t v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *(void *)(v23 + 8) = v28;
          uint64_t v29 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            CFRelease(*(CFTypeRef *)(v29 + 8));
          }
          uint64_t v30 = *v13;
          uint64_t *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            CFRelease(*(CFTypeRef *)(v16 + 8));
            uint64_t v14 = *v13;
          }
          uint64_t *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::~CallableWrapper(id *a1)
{
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA000E8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA000E8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v5 = *(void **)(v2 + 8);
  uint64_t v3 = (uint64_t *)(v2 + 8);
  uint64_t v4 = (uint64_t)v5;
  uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  int v8 = v6;
  if (v5) {
    uint64_t v9 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 == v6)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  uint64_t v10 = (uint64_t)v6[1];
  if (v10)
  {
    v6[1] = 0;
    uint64_t v4 = *v3;
  }
  uint64_t v20 = v10;
  if (v4)
  {
    uint64_t v11 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v11 == v6) {
      goto LABEL_26;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_26;
    }
    uint64_t v11 = 0;
  }
  if (v11 != v6)
  {
    WTF::HashTraits<WTF::String>::customDeleteBucket(v6, v7);
    uint64_t v12 = v8[1];
    v8[1] = 0;
    if (v12) {
      CFRelease(*((CFTypeRef *)v12 + 1));
    }
    ++*(_DWORD *)(*v3 - 16);
    uint64_t v13 = *v3;
    if (*v3) {
      int v14 = *(_DWORD *)(v13 - 12) - 1;
    }
    else {
      int v14 = -1;
    }
    *(_DWORD *)(v13 - 12) = v14;
    uint64_t v15 = *v3;
    if (*v3)
    {
      unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
      unsigned int v17 = *(_DWORD *)(v15 - 4);
      if (v16 < v17 && v17 >= 9) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v3, v17 >> 1, 0);
      }
    }
  }
LABEL_26:
  WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()((uint64_t *)(a1 + 16), &v20);
  if (v20)
  {
    unsigned int v19 = *(const void **)(v20 + 8);
    CFRelease(v19);
  }
}

void sub_19935914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA00110;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA00110;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(id *a1)
{
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (uint64_t *)(v4 + 8 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          int v21 = (void *)(v12 + 8 * v19);
          *int v21 = 0;
          uint64_t v22 = *v10;
          uint64_t *v10 = 0;
          *int v21 = v22;
          uint64_t v23 = *v10;
          uint64_t *v10 = 0;
          if (v23) {
            CFRelease(*(CFTypeRef *)(v23 + 8));
          }
        }
        else
        {
          uint64_t *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = v14 + 16 * v19;
          uint64_t v21 = *(void *)(v20 + 8);
          *(void *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(*(CFTypeRef *)(v21 + 8));
            uint64_t v22 = *(WTF::StringImpl **)v20;
            *(void *)uint64_t v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v8);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v20 = 0;
          }
          uint64_t v23 = *v10;
          uint64_t *v10 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v4 + 16 * v9;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v20 + 8) = v25;
          uint64_t v26 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            CFRelease(*(CFTypeRef *)(v26 + 8));
          }
          uint64_t v11 = *v10;
          uint64_t *v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2) {
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          uint64_t v13 = *(void *)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(*(CFTypeRef *)(v13 + 8));
            uint64_t v11 = *v10;
          }
          uint64_t *v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  *a2 = -1;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(a1, v9 >> 1);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      unsigned int v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == (WTF::StringImpl *)-1) {
        goto LABEL_41;
      }
      if (v10) {
        break;
      }
      uint64_t v11 = v2 + 16 * v8;
      uint64_t v12 = *(_DWORD **)(v11 + 8);
      *(void *)(v11 + 8) = 0;
      if (v12)
      {
        if (v12[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
          uint64_t v10 = *v9;
        }
        else
        {
          --v12[2];
        }
      }
      void *v9 = 0;
      if (!v10) {
        goto LABEL_41;
      }
      if (*(_DWORD *)v10 == 2)
      {
LABEL_40:
        WTF::StringImpl::destroy(v10, v7);
        goto LABEL_41;
      }
      *(_DWORD *)v10 -= 2;
LABEL_41:
      if (++v8 == v3) {
        goto LABEL_45;
      }
    }
    uint64_t v13 = *a1;
    if (*a1) {
      int v14 = *(_DWORD *)(v13 - 8);
    }
    else {
      int v14 = 0;
    }
    unsigned int v15 = *((_DWORD *)v10 + 4);
    if (v15 >= 0x100) {
      unsigned int v16 = v15 >> 8;
    }
    else {
      unsigned int v16 = WTF::StringImpl::hashSlowCase(v10);
    }
    int v17 = 0;
    do
    {
      uint64_t v18 = v16 & v14;
      unsigned int v16 = ++v17 + v18;
    }
    while (*(void *)(v13 + 16 * v18));
    uint64_t v19 = v13 + 16 * v18;
    uint64_t v20 = *(_DWORD **)(v19 + 8);
    *(void *)(v19 + 8) = 0;
    if (v20)
    {
      if (v20[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
        uint64_t v25 = *(WTF::StringImpl **)v19;
        *(void *)uint64_t v19 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v7);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        goto LABEL_25;
      }
      --v20[2];
    }
    *(void *)uint64_t v19 = 0;
LABEL_25:
    uint64_t v21 = *v9;
    void *v9 = 0;
    *(void *)uint64_t v19 = v21;
    uint64_t v22 = v2 + 16 * v8;
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)(v22 + 8) = 0;
    *(void *)(v19 + 8) = v23;
    uint64_t v24 = *(_DWORD **)(v22 + 8);
    *(void *)(v22 + 8) = 0;
    if (v24)
    {
      if (v24[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
      }
      else {
        --v24[2];
      }
    }
    uint64_t v10 = *v9;
    void *v9 = 0;
    if (!v10) {
      goto LABEL_41;
    }
    if (*(_DWORD *)v10 == 2) {
      goto LABEL_40;
    }
    *(_DWORD *)v10 -= 2;
    goto LABEL_41;
  }
  if (v2)
  {
LABEL_45:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1);
    }
  }
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>>::add(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    int v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    unsigned int v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      uint64_t *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v10 = *a2;
      int v17 = v9;
    }
    *a2 = 0;
    uint64_t v19 = *v17;
    *int v17 = v10;
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        int v17 = WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a1, v17);
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    uint64_t v24 = v25 + 8 * v28;
    char v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  char v23 = 0;
  uint64_t v24 = v6 + 8 * v22;
LABEL_32:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v23;
}

void WebKit::WebExtensionControllerConfiguration::createTemporaryStorageDirectoryPath(NSString *a1@<X1>, uint64_t a2@<X8>)
{
  WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)@"WebExtensions", a1);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19972EAD0](a2);
}

void sub_199359D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionControllerConfiguration::webViewConfiguration(WebKit::WebExtensionControllerConfiguration *this)
{
  uint64_t v2 = (const void **)((char *)this + 48);
  uint64_t v1 = (void *)*((void *)this + 6);
  if (!v1)
  {
    int v3 = objc_alloc_init(WKWebViewConfiguration);
    WTF::RetainPtr<WKWebViewConfiguration>::operator=(v2, v3);

    uint64_t v1 = (void *)*v2;
  }

  return v1;
}

void sub_199359DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6BF:
      uint64_t v10 = this[7];
      if (v10)
      {
        if (*(v10 - 3))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL,WTF::WallTime>>((uint64_t)&v51, a3);
          if (v57)
          {
            WebKit::WebExtensionController::didCommitLoadForFrame((uint64_t)this, (uint64_t)v51, v52, v53, (uint64_t)&v54, v56);
            goto LABEL_40;
          }
        }
      }
      goto LABEL_85;
    case 0x6C0:
      unint64_t v28 = this[7];
      if (v28)
      {
        if (*(v28 - 3))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL,WTF::WallTime>>((uint64_t)&v51, a3);
          if (v57)
          {
            WebKit::WebExtensionController::didFailLoadForFrame((uint64_t)this, (uint64_t)v51, v52, v53, (uint64_t)&v54, v56);
            goto LABEL_40;
          }
        }
      }
      goto LABEL_85;
    case 0x6C1:
      uint64_t v24 = this[7];
      if (v24)
      {
        if (*(v24 - 3))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL,WTF::WallTime>>((uint64_t)&v51, a3);
          if (v57)
          {
            WebKit::WebExtensionController::didFinishLoadForFrame((uint64_t)this, (uint64_t)v51, v52, v53, (uint64_t)&v54, v56);
            goto LABEL_40;
          }
        }
      }
      goto LABEL_85;
    case 0x6C2:
      uint64_t v25 = this[7];
      if (v25)
      {
        if (*(v25 - 3))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL,WTF::WallTime>>((uint64_t)&v51, a3);
          if (v57)
          {
            WebKit::WebExtensionController::didStartProvisionalLoadForFrame((uint64_t)this, (uint64_t)v51, v52, v53, (uint64_t)&v54, v56);
LABEL_40:
            if (v57)
            {
              uint64_t v29 = v54;
              uint64_t v54 = 0;
              if (v29) {
                goto LABEL_82;
              }
            }
          }
        }
      }
      goto LABEL_85;
    case 0x6C3:
      if (((_BYTE)this[22] & 2) == 0) {
        goto LABEL_85;
      }
      unint64_t v12 = *((void *)a3 + 1);
      uint64_t v13 = *(void *)a3;
      unint64_t v14 = *((void *)a3 + 2) - *(void *)a3;
      if (v12 <= v14)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v40 = *((void *)a3 + 3);
        if (v40)
        {
          if (v12)
          {
            (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
            uint64_t v39 = *(void *)a3;
            unint64_t v38 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v38 = 0;
            uint64_t v39 = 0;
          }
        }
        goto LABEL_92;
      }
      unsigned int v15 = (unsigned __int8 *)(v13 + v14);
      *((void *)a3 + 2) = v15 + 1;
      if (!v13)
      {
        unint64_t v38 = v12;
        uint64_t v39 = 0;
LABEL_92:
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v41 = *((void *)a3 + 3);
        if (v41)
        {
          if (v38)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
            uint64_t v13 = *(void *)a3;
            unint64_t v12 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
        goto LABEL_93;
      }
      unsigned int v16 = *v15;
      if (v16 >= 2)
      {
LABEL_93:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42 && v12) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v13);
        }
        goto LABEL_94;
      }
      BOOL v17 = v16 != 0;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v58);
      if (!v59) {
        goto LABEL_94;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v60);
      if (!v61) {
        goto LABEL_89;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v62);
      if (v63)
      {
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v51);
        if ((_BYTE)v52)
        {
          unint64_t v19 = *((void *)a3 + 1);
          uint64_t v18 = *(WTF::StringImpl **)a3;
          unint64_t v20 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
          if (v19 < v20 || v19 - v20 <= 3)
          {
            unint64_t v46 = 0;
            uint64_t v47 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v48 = *((void *)a3 + 3);
            if (v48)
            {
              if (v19)
              {
                (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
                uint64_t v47 = *(void *)a3;
                unint64_t v46 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v46 = 0;
                uint64_t v47 = 0;
              }
            }
          }
          else
          {
            int v21 = (int *)((char *)v18 + v20);
            *((void *)a3 + 2) = v21 + 1;
            if (v18)
            {
              if (v59 && v61 && v63)
              {
                int v3 = *v21;
                char v7 = v58;
                uint64_t v58 = 0;
                uint64_t v6 = v60;
                uint64_t v60 = 0;
                uint64_t v5 = v62;
                v62 = 0;
                int v22 = 1;
                id v4 = v51;
LABEL_21:
                if (v63)
                {
                  char v23 = v62;
                  v62 = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2) {
                      WTF::StringImpl::destroy(v23, v18);
                    }
                    else {
                      *(_DWORD *)v23 -= 2;
                    }
                  }
                }
                goto LABEL_57;
              }
              __break(1u);
LABEL_89:
              int v22 = 0;
              BOOL v17 = 0;
              goto LABEL_62;
            }
            unint64_t v46 = v19;
            uint64_t v47 = 0;
          }
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v49 = *((void *)a3 + 3);
          if (v49 && v46) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
          }
          if ((_BYTE)v52)
          {
            uint64_t v50 = v51;
            unsigned __int16 v51 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 != 2)
              {
                int v22 = 0;
                BOOL v17 = 0;
                *(_DWORD *)v50 -= 2;
                goto LABEL_21;
              }
              WTF::StringImpl::destroy(v50, v18);
            }
          }
        }
        int v22 = 0;
        BOOL v17 = 0;
        goto LABEL_21;
      }
      int v22 = 0;
      BOOL v17 = 0;
LABEL_57:
      if (v61)
      {
        uint64_t v32 = v60;
        uint64_t v60 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v18);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
      }
LABEL_62:
      if (v59)
      {
        int v33 = v58;
        uint64_t v58 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 != 2)
          {
            *(_DWORD *)v33 -= 2;
            goto LABEL_66;
          }
          WTF::StringImpl::destroy(v33, v18);
          if (v22) {
            goto LABEL_69;
          }
LABEL_94:
          uint64_t v43 = *(void *)a3;
          uint64_t v44 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v45 = *((void *)a3 + 3);
          if (v45 && v44) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
          }
          goto LABEL_85;
        }
      }
LABEL_66:
      if (!v22) {
        goto LABEL_94;
      }
LABEL_69:
      unsigned __int16 v51 = v7;
      v62 = v6;
      uint64_t v60 = v5;
      uint64_t v58 = v4;
      WebKit::WebExtensionController::testEqual((id *)this, v17, &v51, &v62, &v60, &v58, v3);
      int v34 = v58;
      uint64_t v58 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v11);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      uint64_t v35 = v60;
      uint64_t v60 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v11);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      unsigned int v36 = v62;
      v62 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v11);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      uint64_t v29 = v51;
      unsigned __int16 v51 = 0;
      if (v29)
      {
LABEL_82:
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v11);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
LABEL_85:
      CFTypeRef v37 = this[1];
      CFRelease(v37);
      return;
    case 0x6C4:
      if (((_BYTE)this[22] & 2) != 0)
      {
        IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>((uint64_t)&v51, a3);
        if (!v55) {
          goto LABEL_47;
        }
        uint64_t v27 = WebKit::WebExtensionController::testFinished;
        goto LABEL_46;
      }
      goto LABEL_85;
    case 0x6C5:
      if (((_BYTE)this[22] & 2) != 0)
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,unsigned int>>((uint64_t)&v51, a3);
        if (!(_BYTE)v54) {
          goto LABEL_55;
        }
        uint64_t v31 = WebKit::WebExtensionController::testMessage;
        goto LABEL_54;
      }
      goto LABEL_85;
    case 0x6C6:
      if (((_BYTE)this[22] & 2) != 0)
      {
        IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>((uint64_t)&v51, a3);
        if (v55)
        {
          uint64_t v27 = WebKit::WebExtensionController::testResult;
LABEL_46:
          IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>((uint64_t)this, (void (*)(void *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, void))v27, 0, (unsigned __int8 *)&v51);
        }
LABEL_47:
        std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v26);
      }
      goto LABEL_85;
    case 0x6C7:
      if (((_BYTE)this[22] & 2) != 0)
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,unsigned int>>((uint64_t)&v51, a3);
        if ((_BYTE)v54)
        {
          uint64_t v31 = WebKit::WebExtensionController::testYielded;
LABEL_54:
          IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int),std::tuple<WTF::String,WTF::String,unsigned int>>((uint64_t)this, (void (*)(void *, WTF::StringImpl **, WTF::StringImpl **, void))v31, 0, (uint64_t)&v51);
        }
LABEL_55:
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v30);
      }
      goto LABEL_85;
    default:
      goto LABEL_85;
  }
}

void non-virtual thunk to'WebKit::WebExtensionController::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL,WTF::WallTime>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2),
        v8)
    && (uint64_t v9 = v7,
        uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2),
        v11)
    && (uint64_t v12 = v10, IPC::Decoder::decode<WTF::URL>(a2, v22), v23))
  {
    uint64_t v13 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2);
    if ((_BYTE)v14)
    {
      if (!v23)
      {
        __break(1u);
        return;
      }
      uint64_t v15 = v13;
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v12;
      WTF::URL::URL(a1 + 24, (uint64_t *)v22);
      *(void *)(a1 + 64) = v15;
      int v16 = 1;
    }
    else
    {
      int v16 = 0;
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 72) = v16;
    if (v23)
    {
      int v21 = v22[0];
      v22[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v14);
          if (*(unsigned char *)(a1 + 72)) {
            return;
          }
          goto LABEL_9;
        }
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v16) {
      return;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
LABEL_9:
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v18 = *((void *)a2 + 3);
  if (v18) {
    BOOL v19 = v17 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    unint64_t v20 = *(void (**)(void))(*(void *)v18 + 16);
    v20();
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  char v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v22 = 0;
    char v23 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        char v23 = *(WTF::StringImpl **)a2;
        unint64_t v22 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = 0;
      }
    }
    goto LABEL_24;
  }
  char v8 = (unsigned __int8 *)v5 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v22 = v6;
    char v23 = 0;
LABEL_24:
    unint64_t v6 = 0;
    char v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        char v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_25;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_25:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26 && v6) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v5);
    }
    goto LABEL_26;
  }
  BOOL v10 = v9 != 0;
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v32);
  if (!v33)
  {
LABEL_26:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_27;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v34);
  if (v35)
  {
    unint64_t v13 = *((void *)a2 + 1);
    unint64_t v14 = *(WTF::StringImpl **)a2;
    unint64_t v15 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
    if (v13 >= v15 && v13 - v15 > 3)
    {
      uint64_t v17 = (int *)((char *)v14 + v15);
      *((void *)a2 + 2) = v17 + 1;
      if (v14)
      {
        if (v33)
        {
          int v18 = 0;
          int v19 = *v17;
          *(unsigned char *)a1 = v10;
          unint64_t v20 = v32;
          uint64_t v32 = 0;
          int v21 = v34;
          *(void *)(a1 + 8) = v20;
          *(void *)(a1 + 16) = v21;
          *(_DWORD *)(a1 + 24) = v19;
          *(unsigned char *)(a1 + 32) = 1;
          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v29 = v13;
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v29 = 0;
      uint64_t v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v30 = *((void *)a2 + 3);
      if (v30)
      {
        if (v13)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v30 + 16))(v30, v14, v13);
          uint64_t v12 = *(WTF::StringImpl **)a2;
          unint64_t v29 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v29 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v29) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v12);
    *(unsigned char *)a1 = 0;
    int v31 = v35;
    *(unsigned char *)(a1 + 32) = 0;
    if (!v31) {
      goto LABEL_40;
    }
    uint64_t result = v34;
    int v34 = 0;
    if (!result) {
      goto LABEL_40;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_40;
    }
LABEL_39:
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    goto LABEL_40;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
LABEL_40:
  int v18 = 1;
LABEL_14:
  if (v33)
  {
    uint64_t result = v32;
    uint64_t v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        if (!v18) {
          return result;
        }
        goto LABEL_27;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v18) {
    return result;
  }
LABEL_27:
  uint64_t v27 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result && v27)
  {
    unint64_t v28 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v28();
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>(uint64_t a1, void (*a2)(void *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, void), uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  char v5 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(void (**)(void *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, void))(*v5
  }
                                                                                                  + a2);
  uint64_t v6 = *a4;
  unint64_t v7 = (WTF::StringImpl *)*((void *)a4 + 1);
  char v11 = (WTF::StringImpl *)*((void *)a4 + 2);
  uint64_t v12 = v7;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  v4(v5, v6, &v12, &v11, *((unsigned int *)a4 + 6));
  unsigned int v9 = v11;
  char v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,unsigned int>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v21);
  if (!v22)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_20;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v23);
  if (v24)
  {
    unint64_t v6 = *((void *)a2 + 1);
    unint64_t v7 = *(WTF::StringImpl **)a2;
    unint64_t v8 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
    if (v6 >= v8 && v6 - v8 > 3)
    {
      BOOL v10 = (int *)((char *)v7 + v8);
      *((void *)a2 + 2) = v10 + 1;
      if (v7)
      {
        if (v22)
        {
          int v11 = 0;
          int v12 = *v10;
          unint64_t v13 = v21;
          int v21 = 0;
          unint64_t v14 = v23;
          *(void *)a1 = v13;
          *(void *)(a1 + 8) = v14;
          *(_DWORD *)(a1 + 16) = v12;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v18 = v6;
      char v5 = 0;
    }
    else
    {
      unint64_t v18 = 0;
      char v5 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v19 + 16))(v19, v7, v6);
          char v5 = *(WTF::StringImpl **)a2;
          unint64_t v18 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v18 = 0;
          char v5 = 0;
        }
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v18) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v5);
    *(unsigned char *)a1 = 0;
    int v20 = v24;
    *(unsigned char *)(a1 + 24) = 0;
    if (!v20) {
      goto LABEL_36;
    }
    uint64_t result = v23;
    char v23 = 0;
    if (!result) {
      goto LABEL_36;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_36;
    }
LABEL_35:
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    goto LABEL_36;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_36:
  int v11 = 1;
LABEL_11:
  if (v22)
  {
    uint64_t result = v21;
    int v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v11) {
          return result;
        }
        goto LABEL_20;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v11) {
    return result;
  }
LABEL_20:
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v17();
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int),std::tuple<WTF::String,WTF::String,unsigned int>>(uint64_t a1, void (*a2)(void *, WTF::StringImpl **, WTF::StringImpl **, void), uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  char v5 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(void (**)(void *, WTF::StringImpl **, WTF::StringImpl **, void))(*v5 + a2);
  }
  unint64_t v6 = *(WTF::StringImpl **)a4;
  BOOL v10 = *(WTF::StringImpl **)(a4 + 8);
  int v11 = v6;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  v4(v5, &v11, &v10, *(unsigned int *)(a4 + 16));
  unint64_t v8 = v10;
  BOOL v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebExtensionControllerProxy::globalObjectIsAvailableForFrame(WebKit::WebExtensionControllerProxy *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  WebKit::WebExtensionControllerProxy::extensionContext(this, a3, a4, &v28);
  int v6 = *((_DWORD *)a4 + 12);
  unint64_t v7 = v28;
  if (v28) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v6 == 0;
  }
  if (v8)
  {
    BOOL v16 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a3, a4);
    GlobalObject = JSContextGetGlobalObject(v16);
    unint64_t v18 = JSStringCreateWithUTF8CString("browser");
    Property = JSObjectGetProperty(v16, GlobalObject, v18, 0);
    if (v18) {
      JSStringRelease(v18);
    }
    if (!Property || !JSValueIsObject(v16, Property))
    {
      uint64_t v20 = WTF::fastMalloc((WTF *)0x48);
      *(unsigned char *)(v20 + 8) = 3;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0;
      *(void *)(v20 + 16) = 0;
      int v21 = (void *)(v20 + 40);
      *(_DWORD *)(v20 + 48) = 1;
      *(void *)uint64_t v20 = &unk_1EE9FD270;
      *(void *)(v20 + 40) = &unk_1EE9FD2A8;
      *(void *)(v20 + 56) = 0;
      *(void *)(v20 + 64) = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      unint64_t v29 = v30;
      WTF::String::operator=((uint64_t *)(v20 + 32), &v29);
      char v23 = v29;
      unint64_t v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      unsigned __int8 v24 = WebKit::JSWebExtensionWrapper::wrap(v16, v21);
      if (*(_DWORD *)(v20 + 48) == 1) {
        (*(void (**)(void *))(*(void *)v21 + 8))(v21);
      }
      else {
        --*(_DWORD *)(v20 + 48);
      }
      uint64_t v25 = JSStringCreateWithUTF8CString("browser");
      JSObjectSetProperty(v16, GlobalObject, v25, v24, 0, 0);
      if (v25) {
        JSStringRelease(v25);
      }
    }
  }
  else if (v28)
  {
    unsigned int v9 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a3, a4);
    BOOL v10 = JSContextGetGlobalObject(v9);
    int v11 = JSStringCreateWithUTF8CString("browser");
    int v12 = JSObjectGetProperty(v9, v10, v11, 0);
    if (v11) {
      JSStringRelease(v11);
    }
    if (!v12 || !JSValueIsObject(v9, v12))
    {
      WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)v7 + 152, (unsigned int *)a3, (uint64_t)&v30);
      if (v6)
      {
        ++*(_DWORD *)a4;
        unint64_t v13 = (_DWORD *)*((void *)v7 + 18);
        *((void *)v7 + 18) = a4;
        if (v13) {
          WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v13);
        }
      }
      uint64_t v14 = WTF::fastMalloc((WTF *)0xC8);
      WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(v14, v6 != 0, (uint64_t)v7);
      uint64_t v15 = WebKit::JSWebExtensionWrapper::wrap(v9, (void *)(v14 + 40));
      if (*(_DWORD *)(v14 + 48) == 1) {
        (*(void (**)(uint64_t))(*(void *)(v14 + 40) + 8))(v14 + 40);
      }
      else {
        --*(_DWORD *)(v14 + 48);
      }
      uint64_t v26 = JSStringCreateWithUTF8CString("browser");
      JSObjectSetProperty(v9, v10, v26, v15, 0, 0);
      if (v26) {
        JSStringRelease(v26);
      }
      uint64_t v27 = JSStringCreateWithUTF8CString("chrome");
      JSObjectSetProperty(v9, v10, v27, v15, 0, 0);
      if (v27) {
        JSStringRelease(v27);
      }
    }
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)v7 + 2);
  }
}

void sub_19935B1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v11 + 16));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionControllerProxy::serviceWorkerGlobalObjectIsAvailableForFrame(WebKit::WebExtensionControllerProxy *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  if (*((_DWORD *)a4 + 12))
  {
    uint64_t result = 94;
    __break(0xC471u);
  }
  else
  {
    uint64_t result = WebKit::WebExtensionControllerProxy::extensionContext(this, a3, a4, &v15);
    int v6 = v15;
    if (v15)
    {
      unint64_t v7 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForServiceWorkerWorld((uint64_t)a3);
      GlobalObject = JSContextGetGlobalObject(v7);
      unsigned int v9 = JSStringCreateWithUTF8CString("browser");
      Property = JSObjectGetProperty(v7, GlobalObject, v9, 0);
      if (v9) {
        JSStringRelease(v9);
      }
      if (!Property || !JSValueIsObject(v7, Property))
      {
        WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)v6 + 152, (unsigned int *)a3, (uint64_t)v16);
        uint64_t v11 = WTF::fastMalloc((WTF *)0xC8);
        WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(v11, 0, (uint64_t)v6);
        int v12 = WebKit::JSWebExtensionWrapper::wrap(v7, (void *)(v11 + 40));
        if (*(_DWORD *)(v11 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
        }
        else {
          --*(_DWORD *)(v11 + 48);
        }
        unint64_t v13 = JSStringCreateWithUTF8CString("browser");
        JSObjectSetProperty(v7, GlobalObject, v13, v12, 0, 0);
        if (v13) {
          JSStringRelease(v13);
        }
        uint64_t v14 = JSStringCreateWithUTF8CString("chrome");
        JSObjectSetProperty(v7, GlobalObject, v14, v12, 0, 0);
        if (v14) {
          JSStringRelease(v14);
        }
      }
      return (uint64_t)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)v6 + 2);
    }
  }
  return result;
}

void sub_19935B564(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v1 + 16));
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionControllerProxy::didStartProvisionalLoadForFrame(void *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    uint64_t v14 = this;
    uint64_t v6 = *((void *)a3 + 3);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && *(void *)(*(void *)(v7 + 128) + 8) == v7)
    {
      uint64_t v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      BOOL v8 = v19[0];
      uint64_t v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    uint64_t v10 = WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 24;
    uint64_t v18 = *((void *)a2 + 265);
    uint64_t v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    uint64_t v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (void *)IPC::MessageSender::send<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_19935B6E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::toWebExtensionFrameIdentifier(WebKit *this, const WebKit::WebFrame *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    goto LABEL_5;
  }
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  uint64_t v5 = *(void *)(*(void *)(v4 + 128) + 8);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  if (v5 == v4) {
    return -2;
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
LABEL_5:
    uint64_t v6 = *(void *)(v3 + 8);
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v7 = *(void *)(v6 + 24);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *(void *)(v7 + 8);
    if (!v8) {
      goto LABEL_11;
    }
    unsigned int v9 = *(void **)(*(void *)(v8 + 48) + 16);
    if ((*(uint64_t (**)(void *, const WebKit::WebFrame *))(*v9 + 1368))(v9, a2)) {
      goto LABEL_11;
    }
    uint64_t v10 = *(void *)(v9[2] + 8);
    if (!v10) {
      goto LABEL_11;
    }
    CFRetain(*(CFTypeRef *)(v10 - 8));
    uint64_t v11 = *(WebKit **)(v10 + 72);
    CFRelease(*(CFTypeRef *)(v10 - 8));
    if (v11 != this) {
      goto LABEL_11;
    }
    return -2;
  }
LABEL_11:
  uint64_t v12 = *((void *)this + 10);
  if (v12 == -1)
  {
    uint64_t result = 151;
    __break(0xC471u);
  }
  else if ((unint64_t)(v12 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    return -3;
  }
  else
  {
    return *((void *)this + 10);
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1730;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(v6, a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v13, 0);
  unsigned int v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

void sub_19935B8F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionControllerProxy::didCommitLoadForFrame(void *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    uint64_t v14 = this;
    uint64_t v6 = *((void *)a3 + 3);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && *(void *)(*(void *)(v7 + 128) + 8) == v7)
    {
      uint64_t v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      uint64_t v8 = v19[0];
      uint64_t v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    uint64_t v10 = WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 24;
    uint64_t v18 = *((void *)a2 + 265);
    uint64_t v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    uint64_t v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (void *)IPC::MessageSender::send<Messages::WebExtensionController::DidCommitLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_19935BA00(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidCommitLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1727;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(v6, a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v13, 0);
  unsigned int v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

void sub_19935BAE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionControllerProxy::didFinishLoadForFrame(void *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    uint64_t v14 = this;
    uint64_t v6 = *((void *)a3 + 3);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && *(void *)(*(void *)(v7 + 128) + 8) == v7)
    {
      uint64_t v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      uint64_t v8 = v19[0];
      uint64_t v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    uint64_t v10 = WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 24;
    uint64_t v18 = *((void *)a2 + 265);
    uint64_t v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    uint64_t v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (void *)IPC::MessageSender::send<Messages::WebExtensionController::DidFinishLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_19935BBF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidFinishLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1729;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(v6, a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v13, 0);
  unsigned int v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

void sub_19935BCE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionControllerProxy::didFailLoadForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4 = *(void *)(this + 40);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    uint64_t v39 = this;
    uint64_t v7 = *((void *)a3 + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (*(void *)(*(void *)(v8 + 128) + 8) == v8)
        {
          uint64_t v44 = -3;
          goto LABEL_25;
        }
      }
    }
    this = (uint64_t)WebKit::WebFrame::parentFrame((unsigned int *)a3, v43);
    unsigned int v9 = v43[0];
    uint64_t v10 = v43[0][3];
    if (!v10) {
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
      uint64_t v12 = *(void *)(*(void *)(v11 + 128) + 8);
      this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
      if (v12 == v11) {
        goto LABEL_22;
      }
      uint64_t v10 = v9[3];
      if (!v10)
      {
LABEL_17:
        uint64_t v19 = v9[10];
        if (v19 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19935C074);
        }
        if ((unint64_t)(v19 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
          uint64_t v19 = -3;
        }
        goto LABEL_23;
      }
    }
    uint64_t v13 = *(void *)(v10 + 8);
    if (!v13) {
      goto LABEL_17;
    }
    uint64_t v14 = *(void *)(v13 + 24);
    if (!v14) {
      goto LABEL_17;
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (!v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16);
    this = (*(uint64_t (**)(void *))(*v16 + 1368))(v16);
    if (this) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16[2] + 8);
    if (!v17) {
      goto LABEL_17;
    }
    CFRetain(*(CFTypeRef *)(v17 - 8));
    uint64_t v18 = *(uint64_t **)(v17 + 72);
    CFRelease(*(CFTypeRef *)(v17 - 8));
    if (v18 != v9) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v19 = -2;
LABEL_23:
    uint64_t v44 = v19;
    if (v43[0]) {
      CFRelease(*((CFTypeRef *)v43[0] + 1));
    }
LABEL_25:
    {
      CFTypeRef v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v37);
    }
    uint64_t v20 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v42 = *((void *)a2 + 265);
    uint64_t v21 = *((void *)a3 + 3);
    if (!v21) {
      goto LABEL_36;
    }
    uint64_t v22 = *(void *)(v21 + 8);
    if (v22)
    {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 8), 1u);
      uint64_t v23 = *(void *)(*(void *)(v22 + 128) + 8);
      this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
      if (v23 == v22) {
        goto LABEL_40;
      }
      uint64_t v21 = *((void *)a3 + 3);
      if (!v21)
      {
LABEL_36:
        uint64_t v30 = *((void *)a3 + 10);
        if (v30 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19935C054);
        }
        if ((unint64_t)(v30 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
          uint64_t v30 = -3;
        }
        goto LABEL_41;
      }
    }
    uint64_t v24 = *(void *)(v21 + 8);
    if (!v24) {
      goto LABEL_36;
    }
    uint64_t v25 = *(void *)(v24 + 24);
    if (!v25) {
      goto LABEL_36;
    }
    uint64_t v26 = *(void *)(v25 + 8);
    if (!v26) {
      goto LABEL_36;
    }
    uint64_t v27 = *(void **)(*(void *)(v26 + 48) + 16);
    this = (*(uint64_t (**)(void *))(*v27 + 1368))(v27);
    if (this) {
      goto LABEL_36;
    }
    uint64_t v28 = *(void *)(v27[2] + 8);
    if (!v28) {
      goto LABEL_36;
    }
    CFRetain(*(CFTypeRef *)(v28 - 8));
    unint64_t v29 = *(WebKit::WebFrame **)(v28 + 72);
    CFRelease(*(CFTypeRef *)(v28 - 8));
    if (v29 != a3) {
      goto LABEL_36;
    }
LABEL_40:
    uint64_t v30 = -2;
LABEL_41:
    uint64_t v41 = v30;
    WTF::WallTime::now((WTF::WallTime *)this);
    uint64_t v40 = v31;
    v43[0] = &v42;
    v43[1] = &v41;
    v43[2] = &v44;
    v43[3] = (uint64_t *)a4;
    v43[4] = &v40;
    uint64_t v32 = *(void *)(v39 + 24);
    char v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v33 = 1728;
    *((void *)v33 + 1) = v32;
    *((void *)v33 + 66) = (char *)v33 + 16;
    *((void *)v33 + 67) = 512;
    *((void *)v33 + 68) = 0;
    *((void *)v33 + 70) = 0;
    *((void *)v33 + 69) = 0;
    IPC::Encoder::encodeHeader(v33);
    uint64_t v45 = (uint64_t)v33;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(v33, v43);
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)(v20 + 24) + 32))(v20 + 24, &v45, 0);
    this = v45;
    uint64_t v45 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v34);
      return WTF::fastFree(v35, v36);
    }
  }
  return this;
}

void sub_19935C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  ++*(_DWORD *)(a3 + 16);
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  *(_DWORD *)(a1 + 48) = 1;
  *(void *)a1 = &unk_1EE9FBE08;
  *(void *)(a1 + 40) = &unk_1EE9FBE40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WTF::String::operator=(v4, v8);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void sub_19935C1E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 24);
  *((void *)v9 + 24) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 23);
  *((void *)v9 + 23) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)v9 + 22);
  *((void *)v9 + 22) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *((void *)v9 + 21);
  *((void *)v9 + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  uint64_t v16 = *((void *)v9 + 20);
  *((void *)v9 + 20) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v16 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v16 + 48);
    }
  }
  uint64_t v17 = *((void *)v9 + 19);
  *((void *)v9 + 19) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v17 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  uint64_t v18 = *((void *)v9 + 18);
  *((void *)v9 + 18) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v18 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v18 + 48);
    }
  }
  uint64_t v19 = *((void *)v9 + 17);
  *((void *)v9 + 17) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v19 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v19 + 48);
    }
  }
  uint64_t v20 = *((void *)v9 + 16);
  *((void *)v9 + 16) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v20 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v20 + 48);
    }
  }
  uint64_t v21 = *((void *)v9 + 15);
  *((void *)v9 + 15) = 0;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v21 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v21 + 48);
    }
  }
  uint64_t v22 = *((void *)v9 + 14);
  *((void *)v9 + 14) = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v22 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v22 + 48);
    }
  }
  uint64_t v23 = *((void *)v9 + 13);
  *((void *)v9 + 13) = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v23 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v23 + 48);
    }
  }
  uint64_t v24 = *((void *)v9 + 12);
  *((void *)v9 + 12) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v24 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v24 + 48);
    }
  }
  uint64_t v25 = *((void *)v9 + 11);
  *((void *)v9 + 11) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v25 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v25 + 48);
    }
  }
  uint64_t v26 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v26)
  {
    if (*(_DWORD *)(v26 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v26 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v26 + 48);
    }
  }
  uint64_t v27 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v27 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v27 + 48);
    }
  }
  uint64_t v28 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v28 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v28 + 48);
    }
  }
  uint64_t v29 = *v10;
  uint64_t *v10 = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v29 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v29 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2[1]);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[3]);
  double v4 = *(double *)a2[4];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

unsigned int **WebKit::WebExtensionControllerProxy::didReceiveMessage(WebKit::WebExtensionControllerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v5 = (unsigned int **)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 1726)
  {
    uint64_t v15 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (v16)
    {
      WebKit::WebExtensionControllerProxy::unload(this, v15);
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 != 1725) {
      goto LABEL_8;
    }
    IPC::Decoder::decode<WebKit::WebExtensionContextParameters>((uint64_t *)a3, (uint64_t)&v33);
    if (v45)
    {
      long long v22 = v35;
      long long v23 = v36;
      long long v8 = v37;
      long long v9 = v38;
      long long v37 = 0u;
      long long v38 = 0u;
      v21[0] = v33;
      v21[1] = v34;
      LODWORD(v35) = v35 & 0xFFFFFFFE;
      uint64_t v10 = v41;
      uint64_t v26 = v39;
      uint64_t v34 = 0;
      long long v24 = v8;
      long long v25 = v9;
      *(_OWORD *)&v27[9] = *(_OWORD *)((char *)v40 + 9);
      *(_OWORD *)uint64_t v27 = v40[0];
      uint64_t v39 = 0;
      uint64_t v41 = 0;
      uint64_t v28 = v10;
      uint64_t v11 = v42;
      uint64_t v42 = 0;
      uint64_t v29 = v11;
      uint64_t v12 = v43;
      uint64_t v43 = 0;
      uint64_t v30 = v12;
      uint64_t v13 = v44;
      uint64_t v44 = 0;
      uint64_t v31 = v13;
      char v32 = 1;
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)&v33, v7);
      WebKit::WebExtensionControllerProxy::load(this, (const WebKit::WebExtensionContextParameters *)v21);
      if (v32) {
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v21, v14);
      }
      goto LABEL_8;
    }
  }
  uint64_t v18 = *(void *)a3;
  uint64_t v19 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v20 = *((void *)a3 + 3);
  if (v20 && v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
  }
LABEL_8:

  return WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5);
}

id WebKit::WebExtensionDataRecord::errors(id *this)
{
  uint64_t v1 = WTF::RetainPtr<NSSet>::get(this + 5);
  uint64_t v2 = (void *)[v1 copy];
  uint64_t v3 = v2;
  if (!v2) {
    uint64_t v2 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v4 = v2;

  return v4;
}

void sub_19935C94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDataRecord::addError(uint64_t a1, void *a2, int a3)
{
  id v10 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = (const void **)(a1 + 40);
  if (!v6)
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    WTF::RetainPtr<NSMutableArray>::operator=(v5, v7);
  }
  switch(a3)
  {
    case 4:
      long long v8 = WTF::RetainPtr<NSSet>::get((id *)v5);
      long long v9 = WebKit::createDataRecordError(4, v10);
      [v8 addObject:v9];
      break;
    case 2:
      long long v8 = WTF::RetainPtr<NSSet>::get((id *)v5);
      long long v9 = WebKit::createDataRecordError(3, v10);
      [v8 addObject:v9];
      break;
    case 1:
      long long v8 = WTF::RetainPtr<NSSet>::get((id *)v5);
      long long v9 = WebKit::createDataRecordError(2, v10);
      [v8 addObject:v9];
      break;
    default:
      goto LABEL_10;
  }

LABEL_10:
}

void sub_19935CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::sourcePairForResource(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 64);
  if (*a1) {
    id v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v7 = &stru_1EEA10550;
  }
  id v23 = 0;
  long long v8 = WebKit::WebExtension::resourceDataForPath(v6, v7, &v23, 0, 0);
  long long v9 = (NSError *)v23;

  if (v8)
  {
    id v10 = (void *)[[NSString alloc] initWithData:v8 encoding:4];
    MEMORY[0x19972E8B0](&v16, a2 + 80, a1, 0);
    MEMORY[0x19972EAD0](&v19, v10);
    uint64_t v11 = v16;
    char v16 = 0;
    uint64_t v20 = v11;
    long long v21 = v17;
    long long v22 = v18;
    LODWORD(v17) = v17 & 0xFFFFFFFE;
    std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((void *)a3, (uint64_t *)&v19);
    *(unsigned char *)(a3 + 48) = 1;
    uint64_t v13 = v20;
    uint64_t v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v16;
    char v16 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    WebKit::WebExtensionContext::recordError((const void **)a2, v9);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

void sub_19935CC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  if (!*(unsigned char *)(result + 48))
  {
    char v32 = (WTF::StringImpl *)"";
    uint64_t v33 = (WTF::StringImpl *)1;
    std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>(result + 96, (uint64_t)&v32, &v31);
    if (*(unsigned char *)(v3 + 120))
    {
      long long v22 = *(WTF::StringImpl **)(v3 + 112);
      if (v22) {
        *(_DWORD *)v22 += 2;
      }
    }
    else
    {
      long long v22 = v31;
      uint64_t v31 = 0;
    }
    if (*(unsigned char *)(v3 + 88))
    {
      id v23 = *(WTF::StringImpl **)(v3 + 80);
      if (v23)
      {
        *(_DWORD *)v23 += 2;
        long long v24 = v22;
        long long v22 = v23;
      }
      else
      {
        long long v24 = v22;
        long long v22 = 0;
      }
    }
    else
    {
      long long v24 = 0;
    }
    WTF::URL::URL((WTF::URL *)&v34);
    long long v25 = v34;
    uint64_t v34 = 0;
    long long v29 = v35;
    long long v30 = v36;
    LODWORD(v35) = v35 & 0xFFFFFFFE;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v26 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = v26;
    if (v22) {
      *(_DWORD *)v22 += 2;
    }
    *(void *)uint64_t v26 = v22;
    if (v25)
    {
      *(_DWORD *)v25 += 2;
      *(void *)(v26 + 8) = v25;
      *(_OWORD *)(v26 + 16) = v29;
      *(_OWORD *)(v26 + 32) = v30;
      *(_DWORD *)(a3 + 12) = 1;
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v27);
        if (!v22) {
          goto LABEL_51;
        }
      }
      else
      {
        *(_DWORD *)v25 -= 2;
        if (!v22) {
          goto LABEL_51;
        }
      }
    }
    else
    {
      *(void *)(v26 + 8) = 0;
      *(_OWORD *)(v26 + 16) = v29;
      *(_OWORD *)(v26 + 32) = v30;
      *(_DWORD *)(a3 + 12) = 1;
      if (!v22) {
        goto LABEL_51;
      }
    }
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v27);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
LABEL_51:
    uint64_t v28 = v34;
    uint64_t v34 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v27);
        if (!v24) {
          goto LABEL_60;
        }
LABEL_57:
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v27);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
LABEL_60:
        uint64_t result = (uint64_t)v31;
        uint64_t v31 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
      *(_DWORD *)v28 -= 2;
    }
    if (!v24) {
      goto LABEL_60;
    }
    goto LABEL_57;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 44);
  if (!v5) {
    return result;
  }
  if (v5 >= 0x5555556)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  unsigned int v7 = 48 * v5;
  uint64_t result = WTF::fastMalloc((WTF *)(48 * v5));
  long long v9 = (WTF::StringImpl *)result;
  *(_DWORD *)(a3 + 8) = v7 / 0x30;
  *(void *)a3 = result;
  uint64_t v10 = *(unsigned int *)(v3 + 44);
  if (!v10)
  {
    long long v21 = (WTF::StringImpl *)result;
    if (v7 < 0x30) {
      return result;
    }
    goto LABEL_34;
  }
  unsigned int v11 = 0;
  uint64_t v12 = *(WTF::StringImpl ***)(v3 + 32);
  uint64_t v13 = 8 * v10;
  do
  {
    uint64_t v14 = *v12;
    if (*v12) {
      *(_DWORD *)v14 += 2;
    }
    char v32 = v14;
    WebKit::WebExtensionDynamicScripts::sourcePairForResource(&v32, a2, (uint64_t)&v34);
    char v16 = v32;
    char v32 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (v37)
    {
      std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v32, (uint64_t *)&v34);
      if (v11 == *(_DWORD *)(a3 + 8))
      {
        long long v17 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v11 + 1, (unint64_t)&v32);
        unsigned int v18 = *(_DWORD *)(a3 + 12);
        long long v9 = *(WTF::StringImpl **)a3;
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((void *)(*(void *)a3 + 48 * v18), v17);
      }
      else
      {
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((void *)v9 + 6 * v11, (uint64_t *)&v32);
        unsigned int v18 = *(_DWORD *)(a3 + 12);
      }
      unsigned int v11 = v18 + 1;
      *(_DWORD *)(a3 + 12) = v11;
      uint64_t v19 = v33;
      uint64_t v33 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v15);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v32;
      char v32 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    uint64_t result = std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v15);
    ++v12;
    v13 -= 8;
  }
  while (v13);
  if (*(_DWORD *)(a3 + 8) > v11)
  {
    long long v9 = *(WTF::StringImpl **)a3;
    if (!v11) {
      goto LABEL_64;
    }
    if (v11 < 0x5555556)
    {
      uint64_t result = WTF::fastMalloc((WTF *)(48 * v11));
      long long v21 = (WTF::StringImpl *)result;
      *(_DWORD *)(a3 + 8) = 48 * v11 / 0x30;
      *(void *)a3 = result;
      if ((WTF::StringImpl *)result != v9)
      {
        uint64_t result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(v9, (uint64_t *)v9 + 6 * v11, (void *)result);
LABEL_34:
        if (!v9) {
          return result;
        }
LABEL_65:
        if (v21 == v9)
        {
          *(void *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        return WTF::fastFree(v9, v8);
      }
LABEL_64:
      long long v21 = v9;
      if (!v9) {
        return result;
      }
      goto LABEL_65;
    }
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x19935D154);
  }
  return result;
}

void sub_19935D160(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, a2);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(result + 8))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5)
    {
      *a3 = 0;
      return result;
    }
    if (v5 != 1)
    {
      uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      id v4 = v6;
      goto LABEL_7;
    }
    id v4 = (_DWORD *)MEMORY[0x1E4F30960];
    goto LABEL_3;
  }
  id v4 = *(_DWORD **)result;
  if (*(void *)result) {
LABEL_3:
  }
    *v4 += 2;
LABEL_7:
  *a3 = v4;
  return result;
}

void WebKit::WebExtensionDynamicScripts::executeScript(uint64_t *a1, void *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  id v13 = a2;
  uint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = 2;
  uint64_t v15 = *a7;
  *a7 = 0;
  char v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EEA001C0;
  v16[1] = v14;
  v16[2] = v15;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v17 = 1;
  *(void *)(v17 + 8) = v16;
  id v18 = v13;
  uint64_t v19 = v18;
  v24[0] = v18;
  if (v18) {
    CFRetain(v18);
  }

  ++*a4;
  v24[1] = a4;
  CFRetain(*(CFTypeRef *)(a6 + 8));
  v24[2] = a6;
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v25, a1);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v25[2] = a3;
  ++*(_DWORD *)v14;
  v25[3] = v14;
  atomic_fetch_add((atomic_uint *volatile)v17, 1u);
  v25[4] = v17;
  WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)&v26, a5);
  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v27, (uint64_t)v24);
  uint64_t v20 = malloc_type_malloc(0xE8uLL, 0x10E204048C756D9uLL);
  *uint64_t v20 = MEMORY[0x1E4F14398];
  v20[1] = 50331650;
  v20[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
  v20[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::descriptor;
  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v20 + 4, (uint64_t)v27);
  long long v21 = _Block_copy(v20);

  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v27);
  long long v22 = _Block_copy(v21);
  [v19 _frames:v22];

  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v24);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v17);
  WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v14, v23);
}

void sub_19935D570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v39 = v38;

  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v37);
  WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v36, v41);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(uint64_t a1)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 176);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 160);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v3 = *(WTF **)(a1 + 120);
    if (v3)
    {
      *(void *)(a1 + 120) = 0;
      *(_DWORD *)(a1 + 128) = 0;
      WTF::fastFree(v3, v2);
    }
  }
  if (*(unsigned char *)(a1 + 112)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v2);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v4) {
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
  uint64_t v5 = *(unsigned int **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v5);
  }
  uint64_t v6 = *(WTF **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v6, v2);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v2);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v9) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  }
  uint64_t v10 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v10) {
    CFRelease(v10);
  }
  return a1;
}

void WebKit::WebExtensionDynamicScripts::injectStyleSheets(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v22 = a2;
  [v22 _page];
  unsigned int v8 = *((_DWORD *)a1 + 3);
  if (v8)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = *a1 + 48 * v8;
    do
    {
      v25[0] = 0;
      v25[1] = 0;
      uint64_t v11 = v9 + 8;
      v24[0] = 0;
      v24[1] = 0;
      WebCore::UserStyleSheet::UserStyleSheet();
      API::UserStyleSheet::create((uint64_t)&v26, a3, (uint64_t *)v30);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v12);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v13);
      uint64_t v15 = v27;
      uint64_t v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      char v16 = v26;
      uint64_t v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v14);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v17);
      WebKit::WebUserContentControllerProxy::addUserStyleSheet(*((WebKit::WebUserContentControllerProxy **)v30[1] + 35), v30[0]);
      uint64_t v18 = *(unsigned int *)(a6 + 436);
      if (v18 == *(_DWORD *)(a6 + 432))
      {
        WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>(a6 + 424, (unint64_t)v30);
      }
      else
      {
        uint64_t v19 = *(void *)(a6 + 424);
        uint64_t v20 = v30[0];
        CFRetain(*((CFTypeRef *)v30[0] + 1));
        *(void *)(v19 + 8 * v18) = v20;
        ++*(_DWORD *)(a6 + 436);
      }
      long long v21 = v30[0];
      v30[0] = 0;
      if (v21) {
        CFRelease(*((CFTypeRef *)v21 + 1));
      }
      uint64_t v9 = v11 + 40;
    }
    while (v11 + 40 != v10);
  }
}

void sub_19935D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::removeStyleSheets(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v8 = a2;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  {
    uint64_t v10 = *(const WTF::StringImpl ***)a1;
    uint64_t v32 = *(void *)a1 + 48 * v9;
    while (1)
    {
      uint64_t v11 = *(unsigned int *)(a4 + 436);
      if (v11) {
        break;
      }
LABEL_27:
      if (HIDWORD(v35))
      {
        id v23 = v34;
        long long v24 = &v34[HIDWORD(v35)];
        unsigned int v25 = *(_DWORD *)(a4 + 436);
        do
        {
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = *(void **)(a4 + 424);
            uint64_t v28 = *v23;
            if (*v27 == *v23)
            {
              uint64_t v29 = 0;
LABEL_36:
              uint64_t v31 = &v27[v29];
              *uint64_t v31 = 0;
              if (v28)
              {
                CFRelease(*(CFTypeRef *)(v28 + 8));
                uint64_t v26 = *(unsigned int *)(a4 + 436);
              }
              memmove(v31, v31 + 1, *(void *)(a4 + 424) + 8 * v26 - (void)(v31 + 1));
              unsigned int v25 = *(_DWORD *)(a4 + 436) - 1;
              *(_DWORD *)(a4 + 436) = v25;
            }
            else
            {
              uint64_t v29 = 0;
              while (v25 - 1 != v29)
              {
                uint64_t v30 = v27[++v29];
                if (v30 == v28) {
                  goto LABEL_36;
                }
              }
            }
          }
          ++v23;
        }
        while (v23 != v24);
      }
      WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, 0);
      v10 += 6;
      if (v10 == (const WTF::StringImpl **)v32) {
        goto LABEL_41;
      }
    }
    uint64_t v12 = *(API::UserStyleSheet ***)(a4 + 424);
    uint64_t v13 = 8 * v11;
    while (1)
    {
      uint64_t v14 = *v12;
      CFRetain(*((CFTypeRef *)*v12 + 1));
      char v16 = *v10;
      if (*v10) {
        *(_DWORD *)v16 += 2;
      }
      uint64_t v17 = v10[1];
      if (v17) {
        *(_DWORD *)v17 += 2;
      }
      if (WTF::equal(*((WTF **)v14 + 3), v16, v15))
      {
        int v19 = (*((unsigned char *)v14 + 104) == 0) ^ a3;
        if (!v17) {
          goto LABEL_15;
        }
      }
      else
      {
        int v19 = 0;
        if (!v17) {
          goto LABEL_15;
        }
      }
      if (*(_DWORD *)v17 != 2)
      {
        *(_DWORD *)v17 -= 2;
LABEL_15:
        if (v16) {
          goto LABEL_18;
        }
        goto LABEL_21;
      }
      WTF::StringImpl::destroy(v17, v18);
      if (v16)
      {
LABEL_18:
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v18);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
LABEL_21:
      CFRelease(*((CFTypeRef *)v14 + 1));
      if (v19)
      {
        uint64_t v20 = HIDWORD(v35);
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>((uint64_t)&v34, (unint64_t)v12);
        }
        else
        {
          long long v21 = v34;
          id v22 = *v12;
          CFRetain(*((CFTypeRef *)*v12 + 1));
          v21[v20] = (uint64_t)v22;
          ++HIDWORD(v35);
        }
        objc_msgSend(v8, "_page", v32);
        WebKit::WebUserContentControllerProxy::removeUserStyleSheet(*(WebKit::WebUserContentControllerProxy **)(v33 + 280), *v12);
      }
      ++v12;
      v13 -= 8;
      if (!v13) {
        goto LABEL_27;
      }
    }
  }
LABEL_41:
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v7);
}

void sub_19935DC84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::toInjectionResultParameters(WebKit::WebExtensionDynamicScripts *this, objc_object *a2, WKFrameInfo *a3, NSString *a4)
{
  uint64_t v7 = a2;
  id v8 = a3;
  unsigned int v9 = a4;
  uint64_t v15 = v9;
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 40) = 0;
  if (v7)
  {
    WebKit::encodeJSONString(v7, 1, 0);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)this + 16, &v14);
  }
  if (v8)
  {
    uint64_t v10 = v8;
    if ([(WKFrameInfo *)v10 isMainFrame])
    {
      uint64_t v11 = -2;
    }
    else
    {
      uint64_t v12 = [(WKFrameInfo *)v10 _handle];
      uint64_t v13 = [v12 frameID];
      if (v13 == -1)
      {
        __break(0xC471u);
        return;
      }

      if ((unint64_t)(v13 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v11 = -3;
      }
      else {
        uint64_t v11 = v13;
      }
    }

    if (!*((unsigned char *)this + 40)) {
      *((unsigned char *)this + 40) = 1;
    }
    *((void *)this + 4) = v11;
  }
  if (v9)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)this, &v15);
  }
}

void sub_19935DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12);

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::updateParameters(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 16), (unsigned __int8 *)a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 40), (unsigned __int8 *)(a2 + 24));
  WTF::String::operator=((uint64_t *)(a1 + 64), (WTF::StringImpl **)(a2 + 48));
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 56);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 80), (unsigned __int8 *)(a2 + 64));
  uint64_t result = std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 104), (unsigned __int8 *)(a2 + 88));
  *(void *)(a1 + 128) = *(void *)(a2 + 112);
  return result;
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::merge(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)result;
  if (!*(unsigned char *)(a2 + 16) && *(unsigned char *)(result + 32)) {
    uint64_t result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2, result + 16);
  }
  if (!*(unsigned char *)(a2 + 40) && v3[56]) {
    uint64_t result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 24, (uint64_t)(v3 + 40));
  }
  if (!*(unsigned char *)(a2 + 57))
  {
    if (!v3[73]) {
      goto LABEL_26;
    }
    *(_WORD *)(a2 + 56) = v3[72] | 0x100;
  }
  if (!*(unsigned char *)(a2 + 80))
  {
    if (v3[96]) {
      uint64_t result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 64, (uint64_t)(v3 + 80));
    }
  }
  if (!*(unsigned char *)(a2 + 104))
  {
    if (!v3[120]) {
      goto LABEL_26;
    }
    uint64_t result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 88, (uint64_t)(v3 + 104));
  }
  if (!*(unsigned char *)(a2 + 113))
  {
    if (!v3[129]) {
      goto LABEL_26;
    }
    *(_WORD *)(a2 + 112) = v3[128] | 0x100;
  }
  if (!*(unsigned char *)(a2 + 115))
  {
    if (!v3[131]) {
      goto LABEL_26;
    }
    *(_WORD *)(a2 + 114) = v3[130] | 0x100;
  }
  if (*(unsigned char *)(a2 + 117)) {
    return result;
  }
  if (!v3[133])
  {
LABEL_26:
    uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(v4, v5);
  }
  *(_WORD *)(a2 + 116) = v3[132] | 0x100;
  return result;
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  }
  else
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

CFTypeRef WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserScript(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 208);
  uint64_t v6 = *((void *)this + 26);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)this + 26, 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = v6 + 24 * (v9 & v7);
    id v14 = *(WTF **)v13;
    if (*(void *)v13 == -1)
    {
      uint64_t v10 = (void *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *a2, (const WTF::StringImpl *)a3)) {
      goto LABEL_25;
    }
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    void *v10 = 0;
    v10[1] = 0;
    void v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    uint64_t v13 = (uint64_t)v10;
  }
  WTF::String::operator=((uint64_t *)v13, a2);
  v30[0] = 0;
  v30[1] = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 8, v30);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v15);
  uint64_t v16 = *v5;
  if (*v5) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *v5;
  if (*v5) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_24:
    }
      uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_24;
  }
LABEL_25:
  id v22 = (uint64_t *)(v13 + 8);
  unint64_t v23 = *(unsigned int *)(v13 + 20);
  if (v23 == *(_DWORD *)(v13 + 16))
  {
    unint64_t v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10) {
      unint64_t v25 = v24 + 1;
    }
    else {
      unint64_t v25 = 16;
    }
    if (v25 <= v23 + 1) {
      unint64_t v26 = v23 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v22, v26);
    unint64_t v23 = *(unsigned int *)(v13 + 20);
    uint64_t v27 = *(void *)(v13 + 8);
  }
  else
  {
    uint64_t v27 = *v22;
  }
  uint64_t v28 = (CFTypeRef **)(v27 + 8 * v23);
  CFTypeRef result = CFRetain(a3[1]);
  *uint64_t v28 = a3;
  ++*(_DWORD *)(v13 + 20);
  return result;
}

void sub_19935E248(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserStyleSheet(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 216);
  uint64_t v6 = *((void *)this + 27);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)this + 27, 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = v6 + 24 * (v9 & v7);
    id v14 = *(WTF **)v13;
    if (*(void *)v13 == -1)
    {
      uint64_t v10 = (void *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *a2, (const WTF::StringImpl *)a3)) {
      goto LABEL_25;
    }
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    void *v10 = 0;
    v10[1] = 0;
    void v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    uint64_t v13 = (uint64_t)v10;
  }
  WTF::String::operator=((uint64_t *)v13, a2);
  v30[0] = 0;
  v30[1] = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 8, v30);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v15);
  uint64_t v16 = *v5;
  if (*v5) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *v5;
  if (*v5) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_24:
    }
      uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_24;
  }
LABEL_25:
  id v22 = (uint64_t *)(v13 + 8);
  unint64_t v23 = *(unsigned int *)(v13 + 20);
  if (v23 == *(_DWORD *)(v13 + 16))
  {
    unint64_t v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10) {
      unint64_t v25 = v24 + 1;
    }
    else {
      unint64_t v25 = 16;
    }
    if (v25 <= v23 + 1) {
      unint64_t v26 = v23 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v22, v26);
    unint64_t v23 = *(unsigned int *)(v13 + 20);
    uint64_t v27 = *(void *)(v13 + 8);
  }
  else
  {
    uint64_t v27 = *v22;
  }
  uint64_t v28 = (CFTypeRef **)(v27 + 8 * v23);
  CFTypeRef result = CFRetain(a3[1]);
  *uint64_t v28 = a3;
  ++*(_DWORD *)(v13 + 20);
  return result;
}

void sub_19935E440(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 208);
  uint64_t v5 = *((void *)this + 26);
  if (!v5) {
    goto LABEL_20;
  }
  unsigned int v7 = *(_DWORD *)(v5 - 8);
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  int v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v9 = ++i + v11)
  {
    int v11 = v9 & v7;
    uint64_t v12 = v5 + 24 * (v9 & v7);
    uint64_t v13 = *(WTF **)v12;
    if (*(void *)v12 != -1)
    {
      if (!v13)
      {
        uint64_t v14 = *v4;
        if (!*v4) {
          goto LABEL_20;
        }
        uint64_t v12 = v14 + 24 * *(unsigned int *)(v14 - 4);
        goto LABEL_13;
      }
      if (WTF::equal(v13, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v14 = *v4;
  if (!*v4) {
    goto LABEL_14;
  }
LABEL_13:
  v14 += 24 * *(unsigned int *)(v14 - 4);
LABEL_14:
  if (v14 == v12)
  {
LABEL_20:
    uint64_t v41 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    uint64_t v45 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  else
  {
    uint64_t v44 = *(API::UserScript ***)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    uint64_t v45 = v15;
    uint64_t v16 = *v4;
    if (!*v4 || (v16 += 24 * *(unsigned int *)(v16 - 4), v16 != v12))
    {
      if (v16 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 8, v17);
        ++*(_DWORD *)(*v4 - 16);
        uint64_t v18 = *v4;
        int v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
        *(_DWORD *)(v18 - 12) = v19;
        uint64_t v33 = *v4;
        if (*v4)
        {
          unsigned int v34 = 6 * *(_DWORD *)(v33 - 12);
          unsigned int v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v35 >> 1, 0);
          }
        }
      }
    }
  }
  uint64_t v20 = *(void *)(*((void *)this + 1) + 8);
  if (v20) {
    uint64_t v21 = v20 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void *)(v21 + 72);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23) {
      uint64_t v24 = v23 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable((uint64_t *)v43, (void **)(v24 + 120));
  v43[1] = *(void **)(v24 + 128);
  if (HIDWORD(v45))
  {
    unint64_t v26 = v44;
    uint64_t v27 = &v44[HIDWORD(v45)];
    do
    {
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, &v41);
      if (v43[0])
      {
        uint64_t v28 = *((unsigned int *)v43[0] - 1);
        uint64_t v29 = &v43[0][v28];
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v28 = 0;
      }
      long long v36 = v43;
      char v37 = v29;
      long long v38 = v29;
      uint64_t v39 = v29;
      uint64_t v40 = &v43[0][v28];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
      while (v42 != v37)
      {
        uint64_t v30 = *(void *)(*v42 + 8);
        if (v30) {
          uint64_t v31 = (WebKit::WebUserContentControllerProxy *)(v30 - 16);
        }
        else {
          uint64_t v31 = 0;
        }
        WebKit::WebUserContentControllerProxy::removeUserScript(v31, *v26);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v41);
      }
      ++v26;
    }
    while (v26 != v27);
  }
  if (v43[0]) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v43[0], v25);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
}

void sub_19935E700(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 216);
  uint64_t v5 = *((void *)this + 27);
  if (!v5) {
    goto LABEL_20;
  }
  unsigned int v7 = *(_DWORD *)(v5 - 8);
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  int v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v9 = ++i + v11)
  {
    int v11 = v9 & v7;
    uint64_t v12 = v5 + 24 * (v9 & v7);
    uint64_t v13 = *(WTF **)v12;
    if (*(void *)v12 != -1)
    {
      if (!v13)
      {
        uint64_t v14 = *v4;
        if (!*v4) {
          goto LABEL_20;
        }
        uint64_t v12 = v14 + 24 * *(unsigned int *)(v14 - 4);
        goto LABEL_13;
      }
      if (WTF::equal(v13, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v14 = *v4;
  if (!*v4) {
    goto LABEL_14;
  }
LABEL_13:
  v14 += 24 * *(unsigned int *)(v14 - 4);
LABEL_14:
  if (v14 == v12)
  {
LABEL_20:
    uint64_t v41 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    uint64_t v45 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  else
  {
    uint64_t v44 = *(API::UserStyleSheet ***)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    uint64_t v45 = v15;
    uint64_t v16 = *v4;
    if (!*v4 || (v16 += 24 * *(unsigned int *)(v16 - 4), v16 != v12))
    {
      if (v16 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 8, v17);
        ++*(_DWORD *)(*v4 - 16);
        uint64_t v18 = *v4;
        int v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
        *(_DWORD *)(v18 - 12) = v19;
        uint64_t v33 = *v4;
        if (*v4)
        {
          unsigned int v34 = 6 * *(_DWORD *)(v33 - 12);
          unsigned int v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v35 >> 1, 0);
          }
        }
      }
    }
  }
  uint64_t v20 = *(void *)(*((void *)this + 1) + 8);
  if (v20) {
    uint64_t v21 = v20 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void *)(v21 + 72);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23) {
      uint64_t v24 = v23 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable((uint64_t *)v43, (void **)(v24 + 120));
  v43[1] = *(void **)(v24 + 128);
  if (HIDWORD(v45))
  {
    unint64_t v26 = v44;
    uint64_t v27 = &v44[HIDWORD(v45)];
    do
    {
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, &v41);
      if (v43[0])
      {
        uint64_t v28 = *((unsigned int *)v43[0] - 1);
        uint64_t v29 = &v43[0][v28];
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v28 = 0;
      }
      long long v36 = v43;
      char v37 = v29;
      long long v38 = v29;
      uint64_t v39 = v29;
      uint64_t v40 = &v43[0][v28];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
      while (v42 != v37)
      {
        uint64_t v30 = *(void *)(*v42 + 8);
        if (v30) {
          uint64_t v31 = (WebKit::WebUserContentControllerProxy *)(v30 - 16);
        }
        else {
          uint64_t v31 = 0;
        }
        WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v31, *v26);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v41);
      }
      ++v26;
    }
    while (v26 != v27);
  }
  if (v43[0]) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v43[0], v25);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
}

void sub_19935E9E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a2 = 0;
  id v5 = v4;

  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  a1[1] = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  a1[2] = v7;
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), (uint64_t *)(a2 + 24));
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  a1[5] = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  a1[6] = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  a1[7] = v10;
  WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(a1 + 8), a2 + 64);
  return a1;
}

void sub_19935EAC4(_Unwind_Exception *a1, void *a2)
{
  id v5 = *(unsigned int **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v5);
  }
  uint64_t v6 = *(WTF **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v6, a2);
  }
  uint64_t v7 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  uint64_t v8 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v9) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  }
  uint64_t v10 = *(const void **)v2;
  *(void *)uint64_t v2 = 0;
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  return WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(a1 + 32);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  id v106 = a2;
  uint64_t v2 = [v106 info];
  char v3 = [v2 isMainFrame];

  if (v3)
  {
    id v107 = *(id *)(*(void *)(a1 + 72) + 8);
    std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](&v117, a1 + 152);
    id v4 = v106;
    char v121 = 0;
    uint64_t v122 = 0;
    id v5 = v4;
    uint64_t v6 = v5;
    id v109 = v5;
    if (v5) {
      CFRetain(v5);
    }

    v132 = 0;
    uint64_t v133 = 0;
    uint64_t v7 = WTF::fastMalloc((WTF *)8);
    LODWORD(v133) = 1;
    v132 = (__CFString *)v7;
    uint64_t v8 = HIDWORD(v133);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v109);
    objc_claimAutoreleasedReturnValue();
    id v9 = v109;
    *(void *)(v7 + 8 * v8) = v9;
    uint64_t v10 = v9;
    if (v109) {
      CFRetain(v9);
    }
    cf = v10;

    int v12 = ++HIDWORD(v133);
    if (v109)
    {
      CFRelease(v10);
      int v12 = HIDWORD(v133);
    }
    if (v12)
    {
      uint64_t v113 = 0;
      unsigned int v115 = 0;
      while (1)
      {
        id isa = v132->isa;
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v132->isa);
        objc_claimAutoreleasedReturnValue();
        if (HIDWORD(v133))
        {
          uint64_t v14 = 0;
          while (1)
          {
            uint64_t v15 = v132;
            id v16 = isa;
            WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*(&v15->isa + v14));
            id v17 = (id)objc_claimAutoreleasedReturnValue();
            LODWORD(v15) = v17 == v16;

            if (v15) {
              break;
            }
            if (++v14 >= (unint64_t)HIDWORD(v133)) {
              goto LABEL_18;
            }
          }
          uint64_t v18 = &v132->isa + v14;
          int v19 = *v18;
          *uint64_t v18 = 0;
          if (v19) {
            CFRelease(v19);
          }
          WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(v18 + 1, &v132->isa + HIDWORD(v133), v18);
          --HIDWORD(v133);
        }
LABEL_18:
        id v20 = [isa info];
        if ([v20 isMainFrame])
        {
          uint64_t v21 = -2;
        }
        else
        {
          uint64_t v22 = [v20 _handle];
          uint64_t v23 = [v22 frameID];
          if (v23 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x19935F654);
          }

          if ((unint64_t)(v23 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
            uint64_t v21 = -3;
          }
          else {
            uint64_t v21 = v23;
          }
        }

        if (!v120) {
          goto LABEL_30;
        }
        uint64_t v24 = v119;
        if (v119) {
          break;
        }
LABEL_42:
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        uint64_t v33 = [isa childFrames];
        uint64_t v34 = [v33 countByEnumeratingWithState:&v128 objects:buf count:16];
        if (!v34) {
          goto LABEL_60;
        }
        uint64_t v35 = *(void *)v129;
        do
        {
          for (uint64_t i = 0; i != v34; ++i)
          {
            if (*(void *)v129 != v35) {
              objc_enumerationMutation(v33);
            }
            char v37 = *(void **)(*((void *)&v128 + 1) + 8 * i);
            uint64_t v38 = HIDWORD(v133);
            if (HIDWORD(v133) != v133)
            {
              uint64_t v45 = v132;
              id v44 = v37;
              *((void *)&v45->isa + v38) = v44;
              if (!v44) {
                goto LABEL_58;
              }
LABEL_57:
              CFRetain(v44);
              goto LABEL_58;
            }
            unint64_t v39 = HIDWORD(v133) + ((unint64_t)HIDWORD(v133) >> 2);
            if (v39 >= 0x10) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = 16;
            }
            if (v40 <= (unint64_t)HIDWORD(v133) + 1) {
              unint64_t v41 = HIDWORD(v133) + 1;
            }
            else {
              unint64_t v41 = v40;
            }
            WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v132, v41);
            uint64_t v42 = HIDWORD(v133);
            uint64_t v43 = v132;
            id v44 = v37;
            *((void *)&v43->isa + v42) = v44;
            if (v44) {
              goto LABEL_57;
            }
LABEL_58:

            ++HIDWORD(v133);
          }
          uint64_t v34 = [v33 countByEnumeratingWithState:&v128 objects:buf count:16];
        }
        while (v34);
LABEL_60:

        if (!HIDWORD(v133)) {
          goto LABEL_61;
        }
      }
      unint64_t v25 = v117;
      while (1)
      {
        uint64_t v26 = *(void *)v25;
        unint64_t v25 = (WTF *)((char *)v25 + 8);
        if (v26 == v21) {
          break;
        }
        if (!--v24) {
          goto LABEL_42;
        }
      }
LABEL_30:
      if (v115 == v122)
      {
        unint64_t v27 = v115 + ((unint64_t)v115 >> 2);
        if (v27 >= 0x10) {
          unint64_t v28 = v27 + 1;
        }
        else {
          unint64_t v28 = 16;
        }
        if (v28 <= (unint64_t)v115 + 1) {
          unint64_t v29 = v115 + 1;
        }
        else {
          unint64_t v29 = v28;
        }
        WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v121, v29);
        uint64_t v30 = HIDWORD(v122);
        uint64_t v31 = v121;
        id v32 = isa;
        unsigned int v115 = v30;
        uint64_t v113 = v31;
        v31[v30] = v32;
        if (!v32) {
          goto LABEL_41;
        }
      }
      else
      {
        id v32 = isa;
        v113[v115] = v32;
        if (!v32)
        {
LABEL_41:

          HIDWORD(v122) = ++v115;
          goto LABEL_42;
        }
      }
      CFRetain(v32);
      goto LABEL_41;
    }
LABEL_61:
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v11);

    if (v120)
    {
      uint64_t v47 = v117;
      if (v117)
      {
        v117 = 0;
        int v118 = 0;
        WTF::fastFree(v47, v46);
      }
    }
    if (HIDWORD(v122))
    {
      uint64_t v48 = v121;
      uint64_t v108 = &v121[HIDWORD(v122)];
      do
      {
        unint64_t v110 = v48;
        id v49 = *v48;
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*v48);
        unint64_t v116 = [(id)objc_claimAutoreleasedReturnValue() info];

        uint64_t v50 = [(WKFrameInfo *)v116 request];
        cfa = [v50 URL];

        uint64_t v51 = *(void *)(a1 + 48);
        MEMORY[0x19972E8A0](buf, cfa);
        int v53 = WebKit::WebExtensionContext::permissionState(v51, (URL *)buf, *(URL **)(a1 + 40), 3);
        uint64_t v54 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, v52);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
        if ((v53 & 0xFFFFFFFE) == 2)
        {
          if (*(unsigned char *)(a1 + 216))
          {
            char v55 = NSString;
            if (*(void *)(a1 + 208)) {
              double v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              double v56 = &stru_1EEA10550;
            }
            char v57 = [v55 stringWithFormat:@"return (%@)(...arguments)", v56];

            if (*(unsigned char *)(a1 + 120))
            {
              uint64_t v58 = WebKit::parseJSON(*(void *)(a1 + 112), 1, 0);
            }
            else
            {
              uint64_t v58 = (void *)MEMORY[0x1E4F1CBF0];
            }
            int v85 = WTF::RetainPtr<__IOHIDDevice *>::get();
            v132 = @"arguments";
            *(void *)&long long v128 = v58;
            uint64_t v86 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v128 forKeys:&v132 count:1];
            unint64_t v87 = *(_DWORD **)(a1 + 80);
            ++*v87;
            uint64_t v88 = *(atomic_uint **)(a1 + 88);
            atomic_fetch_add(v88, 1u);
            BOOL v89 = v116;
            char v90 = malloc_type_malloc(0x38uLL, 0x10E0040556CEF4BuLL);
            *char v90 = MEMORY[0x1E4F14398];
            v90[1] = 50331650;
            v90[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
            v90[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::descriptor;
            v90[4] = v87;
            v90[5] = v88;
            v90[6] = v89;
            uint64_t v91 = _Block_copy(v90);

            uint64_t v92 = _Block_copy(v91);
            [v85 _callAsyncJavaScript:v57 arguments:v86 inFrame:v89 inContentWorld:v107 completionHandler:v92];
          }
          else
          {
            unsigned int v70 = *(_DWORD *)(a1 + 68);
            if (v70)
            {
              unint64_t v71 = *(void **)(a1 + 56);
              uint64_t v72 = &v71[6 * v70];
              do
              {
                unsigned int v73 = WTF::RetainPtr<__IOHIDDevice *>::get();
                if (*v71) {
                  BOOL v74 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                }
                else {
                  BOOL v74 = &stru_1EEA10550;
                }
                uint64_t v75 = v71 + 1;
                uint64_t v76 = WTF::URL::operator NSURL *();
                id v77 = *(id *)(*(void *)(a1 + 72) + 8);
                uint64_t v78 = *(_DWORD **)(a1 + 80);
                ++*v78;
                uint64_t v79 = *(atomic_uint **)(a1 + 88);
                atomic_fetch_add(v79, 1u);
                uint64_t v80 = v116;
                v81 = malloc_type_malloc(0x38uLL, 0x10E0040556CEF4BuLL);
                void *v81 = MEMORY[0x1E4F14398];
                v81[1] = 50331650;
                v81[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
                v81[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::descriptor;
                v81[4] = v78;
                v81[5] = v79;
                v81[6] = v80;
                uint64_t v82 = _Block_copy(v81);

                int v83 = _Block_copy(v82);
                [v73 _evaluateJavaScript:v74 withSourceURL:v76 inFrame:v80 inContentWorld:v77 completionHandler:v83];

                unint64_t v71 = v75 + 5;
              }
              while (v75 + 5 != v72);
            }
          }
        }
        else
        {
          uint64_t v59 = *(void *)(a1 + 80);
          WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)buf, 0, v116, &cfstr_FailedToExecut_0.isa);
          char v61 = (uint64_t *)(v59 + 8);
          unsigned int v62 = *(_DWORD *)(v59 + 20);
          if (v62 == *(_DWORD *)(v59 + 16))
          {
            WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v61, (unint64_t)buf);
          }
          else
          {
            uint64_t v63 = *v61;
            char v64 = (unsigned char *)(*v61 + 48 * v62);
            *char v64 = 0;
            v64[8] = 0;
            if (v124)
            {
              int v65 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              *(void *)char v64 = v65;
              v64[8] = 1;
            }
            uint64_t v66 = v63 + 48 * v62;
            *(unsigned char *)(v66 + 16) = 0;
            uint64_t v67 = v66 + 16;
            *(unsigned char *)(v67 + 8) = 0;
            if (v126)
            {
              int v68 = v125;
              v125 = 0;
              *(void *)uint64_t v67 = v68;
              *(unsigned char *)(v67 + 8) = 1;
            }
            *(_OWORD *)(v63 + 48 * v62 + 32) = v127;
            ++*(_DWORD *)(v59 + 20);
          }
          if (v126)
          {
            int v69 = v125;
            v125 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2) {
                WTF::StringImpl::destroy(v69, v60);
              }
              else {
                *(_DWORD *)v69 -= 2;
              }
            }
          }
          if (v124)
          {
            uint64_t v84 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2) {
                WTF::StringImpl::destroy(v84, v60);
              }
              else {
                *(_DWORD *)v84 -= 2;
              }
            }
          }
        }

        uint64_t v48 = v110 + 1;
      }
      while (v110 + 1 != v108);
    }
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v46);
  }
  else
  {
    char v93 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1985F2000, v93, OS_LOG_TYPE_INFO, "Not executing script because the mainFrame is nil", buf, 2u);
    }
    uint64_t v94 = *(void *)(a1 + 80);
    WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)buf, 0, 0, &cfstr_FailedToExecut.isa);
    uint64_t v96 = (uint64_t *)(v94 + 8);
    unsigned int v97 = *(_DWORD *)(v94 + 20);
    if (v97 == *(_DWORD *)(v94 + 16))
    {
      WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v96, (unint64_t)buf);
    }
    else
    {
      uint64_t v98 = *v96;
      char v99 = (unsigned char *)(*v96 + 48 * v97);
      *char v99 = 0;
      v99[8] = 0;
      if (v124)
      {
        uint64_t v100 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        *(void *)char v99 = v100;
        v99[8] = 1;
      }
      uint64_t v101 = v98 + 48 * v97;
      *(unsigned char *)(v101 + 16) = 0;
      uint64_t v102 = v101 + 16;
      *(unsigned char *)(v102 + 8) = 0;
      if (v126)
      {
        v103 = v125;
        v125 = 0;
        *(void *)uint64_t v102 = v103;
        *(unsigned char *)(v102 + 8) = 1;
      }
      *(_OWORD *)(v98 + 48 * v97 + 32) = v127;
      ++*(_DWORD *)(v94 + 20);
    }
    if (v126)
    {
      uint64_t v104 = v125;
      v125 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2) {
          WTF::StringImpl::destroy(v104, v95);
        }
        else {
          *(_DWORD *)v104 -= 2;
        }
      }
    }
    if (v124)
    {
      v105 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2) {
          WTF::StringImpl::destroy(v105, v95);
        }
        else {
          *(_DWORD *)v105 -= 2;
        }
      }
    }
  }
}

void sub_19935F65C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,WTF::StringImpl *a29,char a30,WTF::StringImpl *a31,char a32)
{
  if (a32 && a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, a2);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a30 && a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, a2);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v3 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  CFTypeRef result = *(WTF **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(result, v2);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(WKFrameInfo **)(a1 + 48);
  uint64_t v8 = [a3 localizedDescription];
  WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)&v20, v5, v7, v8);
  uint64_t v10 = (uint64_t *)(v6 + 8);
  unsigned int v11 = *(_DWORD *)(v6 + 20);
  if (v11 == *(_DWORD *)(v6 + 16))
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v10, (unint64_t)&v20);
  }
  else
  {
    uint64_t v12 = *v10;
    uint64_t v13 = (unsigned char *)(*v10 + 48 * v11);
    unsigned char *v13 = 0;
    v13[8] = 0;
    if (v21)
    {
      uint64_t v14 = v20;
      id v20 = 0;
      *(void *)uint64_t v13 = v14;
      v13[8] = 1;
    }
    uint64_t v15 = v12 + 48 * v11;
    *(unsigned char *)(v15 + 16) = 0;
    uint64_t v16 = v15 + 16;
    *(unsigned char *)(v16 + 8) = 0;
    if (v23)
    {
      id v17 = v22;
      uint64_t v22 = 0;
      *(void *)uint64_t v16 = v17;
      *(unsigned char *)(v16 + 8) = 1;
    }
    *(_OWORD *)(v12 + 48 * v11 + 32) = v24;
    ++*(_DWORD *)(v6 + 20);
  }
  if (v23)
  {
    uint64_t v18 = v22;
    uint64_t v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v9);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v21)
  {
    int v19 = v20;
    id v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

void sub_19935FB28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v3 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  CFTypeRef result = *(WTF **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(result, v2);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(WKFrameInfo **)(a1 + 48);
  uint64_t v8 = [a3 localizedDescription];
  WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)&v20, v5, v7, v8);
  uint64_t v10 = (uint64_t *)(v6 + 8);
  unsigned int v11 = *(_DWORD *)(v6 + 20);
  if (v11 == *(_DWORD *)(v6 + 16))
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v10, (unint64_t)&v20);
  }
  else
  {
    uint64_t v12 = *v10;
    uint64_t v13 = (unsigned char *)(*v10 + 48 * v11);
    unsigned char *v13 = 0;
    v13[8] = 0;
    if (v21)
    {
      uint64_t v14 = v20;
      id v20 = 0;
      *(void *)uint64_t v13 = v14;
      v13[8] = 1;
    }
    uint64_t v15 = v12 + 48 * v11;
    *(unsigned char *)(v15 + 16) = 0;
    uint64_t v16 = v15 + 16;
    *(unsigned char *)(v16 + 8) = 0;
    if (v23)
    {
      id v17 = v22;
      uint64_t v22 = 0;
      *(void *)uint64_t v16 = v17;
      *(unsigned char *)(v16 + 8) = 1;
    }
    *(_OWORD *)(v12 + 48 * v11 + 32) = v24;
    ++*(_DWORD *)(v6 + 20);
  }
  if (v23)
  {
    uint64_t v18 = v22;
    uint64_t v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v9);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v21)
  {
    int v19 = v20;
    id v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

void sub_19935FD64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  char v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v8 = (atomic_uint **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
      uint64_t v10 = v8;
      unsigned int v11 = v9;
      uint64_t v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((atomic_uint **)v12 != v8)
      {
        do
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          uint64_t v15 = *v10;
          unint64_t v16 = (unint64_t)*v10 + ~((void)*v10 << 32);
          unint64_t v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
          unint64_t v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
          unsigned int v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~(v18 << 27)));
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v13 + 8 * v19);
            unsigned int v19 = (v19 + v20++) & v14;
          }
          while (v22);
          atomic_fetch_add(v15, 1u);
          char v23 = *(unsigned int **)(v13 + 8 * v21);
          *(void *)(v13 + 8 * v21) = v15;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v9);
          }
          while (++v10 != v11)
          {
            if ((unint64_t)*v10 + 1 > 1) {
              goto LABEL_16;
            }
          }
          uint64_t v10 = v11;
LABEL_16:
          ;
        }
        while (v10 != (atomic_uint **)v12);
      }
    }
  }
  return a1;
}

void WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(void **a1, void **a2, void *a3)
{
  if (a1 != a2)
  {
    id v5 = a1;
    do
    {
      unsigned int v6 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(v5);

      *a3 = v6;
      uint64_t v7 = *v5;
      objc_object *v5 = 0;
      if (v7) {
        CFRelease(v7);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      int v4 = *(void ***)a1;
      id v5 = (void **)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12));
      unsigned int v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(void *)a1 = v6;
      WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(v4, v5, v6);
      if (v4)
      {
        if (*(void ***)a1 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x199360208);
    }
    int v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    int v4 = (uint64_t *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)int v2 = v6;
    CFTypeRef result = WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)int v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(WTF::StringImpl *result, uint64_t *a2, void *a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](a3, v5);
      unint64_t v7 = (WTF::StringImpl *)v5[1];
      v5[1] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      CFTypeRef result = (WTF::StringImpl *)*v5;
      uint64_t *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          CFTypeRef result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 6;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

WTF *WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(WTF *result, void *a2)
{
  int v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 8, a2);
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA001C0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA001C0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8) + 8;
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v3(v1);
}

void sub_199360498(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)CFTypeRef result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x5555556)
  {
    int v5 = 48 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 48 * v7;
      do
      {
        unint64_t v10 = *(_DWORD **)v8;
        if (*(void *)v8) {
          *v10 += 2;
        }
        *(void *)uint64_t v6 = v10;
        unsigned int v11 = *(_DWORD **)(v8 + 8);
        if (v11) {
          *v11 += 2;
        }
        *(void *)(v6 + 8) = v11;
        long long v12 = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v6 + 32) = v12;
        v8 += 48;
        v6 += 48;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      long long v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            unsigned int v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          uint64_t v22 = (void *)(v15 + 24 * v20 + 8);
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          long long v24 = *v21;
          *unsigned int v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          unint64_t v25 = *v12;
          *long long v12 = 0;
          *unsigned int v21 = v25;
          uint64_t v26 = v4 + 24 * v9;
          *uint64_t v22 = 0;
          *(void *)(v15 + 24 * v20 + 16) = 0;
          uint64_t v27 = *(void *)(v26 + 8);
          v26 += 8;
          *(void *)uint64_t v26 = 0;
          *uint64_t v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          uint64_t v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 12) = 0;
          *(_DWORD *)(v28 + 20) = v25;
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          unint64_t v29 = *v12;
          *long long v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v15 + 24 * v20;
          }
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          int v14 = *v12;
          *long long v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchURL(void **a1, WTF::URL *a2)
{
  uint64_t v4 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a1);
  unsigned int v5 = (unsigned char **)v4;
  uint64_t v7 = v6;
  if (*a1) {
    uint64_t v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((void *)v8 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t result = WebKit::WebExtensionMatchPattern::matchesURL(*v5, a2, 0);
    if (result) {
      return 1;
    }
    while (++v5 != v7)
    {
      if ((unint64_t)(*v5 + 1) > 1) {
        goto LABEL_10;
      }
    }
    unsigned int v5 = v7;
LABEL_10:
    if (v5 == (unsigned char **)v8) {
      return result;
    }
  }
}

uint64_t WebKit::WebExtensionMatchPattern::matchesURL(unsigned char *a1, WTF::URL *a2, char a3)
{
  if (!a1[49] || (*((unsigned char *)a2 + 8) & 1) == 0) {
    return 0;
  }
  if (!a1[48])
  {
    if ((a3 & 1) != 0
      || WebCore::UserContentURLPattern::matchesScheme((WebCore::UserContentURLPattern *)(a1 + 16), a2))
    {
      long long v12 = (WebCore::UserContentURLPattern *)(a1 + 16);
      if (WebCore::UserContentURLPattern::matchesHost(v12, a2))
      {
        if ((a3 & 2) != 0 || WebCore::UserContentURLPattern::matchesPath(v12, a2)) {
          return 1;
        }
      }
    }
    return 0;
  }
  WebKit::WebExtensionMatchPattern::supportedSchemes((WebKit::WebExtensionMatchPattern *)a1);
  WTF::URL::protocol(a2);
  if ((v7 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  uint64_t v4 = qword_1EB35A1F0;
  uint64_t v10 = v19;
  if (qword_1EB35A1F0)
  {
    int v13 = *(_DWORD *)(qword_1EB35A1F0 - 8);
    unsigned int v14 = *((_DWORD *)v19 + 4);
    if (v14 >= 0x100) {
      unsigned int v15 = v14 >> 8;
    }
    else {
      unsigned int v15 = WTF::StringImpl::hashSlowCase(v19);
    }
    for (i = 0; ; unsigned int v15 = i + v17)
    {
      int v17 = v15 & v13;
      int v18 = *(WTF **)(v4 + 8 * (v15 & v13));
      if (v18 != (WTF *)-1)
      {
        if (!v18)
        {
          uint64_t v4 = 0;
          goto LABEL_29;
        }
        if (WTF::equal(v18, v19, v9)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v4 = 1;
LABEL_29:
    uint64_t v10 = v19;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v4;
}

void sub_199360A04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchPattern(void **a1, unsigned __int8 *a2)
{
  uint64_t v4 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a1);
  unsigned int v5 = v4;
  uint64_t v7 = v6;
  if (*a1) {
    uint64_t v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((unsigned __int8 **)v8 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t result = WebKit::WebExtensionMatchPattern::matchesPattern(*v5, a2, 0);
    if (result) {
      return 1;
    }
    while (++v5 != v7)
    {
      if ((unint64_t)(*v5 + 1) > 1) {
        goto LABEL_10;
      }
    }
    unsigned int v5 = v7;
LABEL_10:
    if (v5 == (unsigned __int8 **)v8) {
      return result;
    }
  }
}

uint64_t WebKit::WebExtensionMatchPattern::matchesPattern(unsigned __int8 *a1, unsigned __int8 *a2, char a3)
{
  if (!a1[49]) {
    return 0;
  }
  if ((WebKit::WebExtensionMatchPattern::operator==((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()((WebKit::WebExtensionMatchPattern *)a1, (uint64_t)a2) & 1) != 0|| (a3 & 4) != 0&& (WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()((WebKit::WebExtensionMatchPattern *)a2, (uint64_t)a1) & 1) != 0)
  {
    return 1;
  }
  if (a1[48] | a2[48]) {
    return 0;
  }
  uint64_t result = WebKit::WebExtensionMatchPattern::schemeMatches((uint64_t)a1, (uint64_t)a2, a3);
  if (result)
  {
    uint64_t result = WebKit::WebExtensionMatchPattern::hostMatches((uint64_t)a1, (uint64_t)a2, a3);
    if (result)
    {
      return WebKit::WebExtensionMatchPattern::pathMatches((uint64_t)a1, (uint64_t)a2, a3);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsWebExtension>(IPC::Encoder *result, unsigned int a2, uint64_t **a3)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t v5 = 8 * a2;
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = *(void *)(*v4 + 136);
      if (v7 && *(unsigned char *)(v7 + 104) || *(void *)(v6 + 144))
      {
        uint64_t v8 = *a3;
        uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v9 = 2660;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 66) = (char *)v9 + 16;
        *((void *)v9 + 67) = 512;
        *((void *)v9 + 68) = 0;
        *((void *)v9 + 70) = 0;
        *((void *)v9 + 69) = 0;
        IPC::Encoder::encodeHeader(v9);
        unsigned int v16 = v9;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, v8);
        LOBYTE(v14) = 0;
        char v15 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v16, 0, (uint64_t)&v14, 1);
        if (v15)
        {
          uint64_t v11 = v14;
          uint64_t v14 = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
        }
        uint64_t result = v16;
        unsigned int v16 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          uint64_t result = (IPC::Encoder *)WTF::fastFree(v12, v13);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void sub_199360CF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionMatchPattern::getOrCreate(WTF::StringImpl **this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  if (byte_1EB35A1E9)
  {
    uint64_t v6 = qword_1EB35A1F8;
    if (qword_1EB35A1F8) {
      goto LABEL_4;
    }
  }
  else
  {
    qword_1EB35A1F8 = 0;
    byte_1EB35A1E9 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0);
  uint64_t v6 = qword_1EB35A1F8;
  if (!qword_1EB35A1F8)
  {
    int v7 = 0;
    goto LABEL_5;
  }
LABEL_4:
  int v7 = *(_DWORD *)(v6 - 8);
LABEL_5:
  unsigned int v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*this);
  }
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    int v13 = (uint64_t *)(v6 + 16 * (v9 & v7));
    uint64_t v14 = (WTF *)*v13;
    if (*v13 == -1)
    {
      uint64_t v10 = (uint64_t *)(v6 + 16 * v12);
      goto LABEL_14;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *this, a2)) {
      goto LABEL_29;
    }
LABEL_14:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    uint64_t *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1EB35A1F8 - 16);
    int v13 = v10;
  }
  WTF::String::operator=(v13, this);
  WebKit::WebExtensionMatchPattern::create<WTF::String const&>(this, &v23);
  uint64_t v15 = v23;
  uint64_t v23 = 0;
  uint64_t v16 = v13[1];
  v13[1] = v15;
  if (v16)
  {
    CFRelease(*(CFTypeRef *)(v16 + 8));
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17) {
      CFRelease(*(CFTypeRef *)(v17 + 8));
    }
  }
  if (qword_1EB35A1F8) {
    int v18 = *(_DWORD *)(qword_1EB35A1F8 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(qword_1EB35A1F8 - 12) = v18;
  if (qword_1EB35A1F8) {
    int v19 = *(_DWORD *)(qword_1EB35A1F8 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(qword_1EB35A1F8 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(qword_1EB35A1F8 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_28:
    }
      int v13 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v22 = v13[1];
  if (v22) {
    CFRetain(*(CFTypeRef *)(v22 + 8));
  }
  *a3 = v22;
}

uint64_t WebKit::WebExtensionMatchPattern::getOrCreate@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v9 = *this;
  if (*this && *((_DWORD *)v9 + 1))
  {
    *(_DWORD *)v9 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v9 = v36;
  }
  uint64_t v35 = v9;
  uint64_t v10 = *a2;
  if (*a2 && *((_DWORD *)v10 + 1)) {
    goto LABEL_10;
  }
  if (!*this || !WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)*this, "file", 4uLL))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = v36;
    goto LABEL_12;
  }
  uint64_t v10 = *a2;
  if (*a2) {
LABEL_10:
  }
    *(_DWORD *)v10 += 2;
LABEL_12:
  uint64_t v34 = v10;
  uint64_t v11 = *a3;
  if (v11 && *((_DWORD *)v11 + 1))
  {
    *(_DWORD *)v11 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v11 = v36;
  }
  uint64_t v33 = v11;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t result = WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v36, (uint64_t)v9, "://", 4, (uint64_t)v10, v11);
  if (!v36)
  {
    __break(0xC471u);
    return result;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v13);
      if (!v10) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
  {
LABEL_31:
    if (!v9) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
LABEL_29:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v10, v13);
  if (!v9) {
    goto LABEL_37;
  }
LABEL_34:
  if (*(_DWORD *)v9 == 2) {
    WTF::StringImpl::destroy(v9, v13);
  }
  else {
    *(_DWORD *)v9 -= 2;
  }
LABEL_37:
  if (byte_1EB35A1E9)
  {
    uint64_t v15 = qword_1EB35A1F8;
    if (qword_1EB35A1F8) {
      goto LABEL_40;
    }
  }
  else
  {
    qword_1EB35A1F8 = 0;
    byte_1EB35A1E9 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0);
  uint64_t v15 = qword_1EB35A1F8;
  if (!qword_1EB35A1F8)
  {
    int v16 = 0;
    goto LABEL_41;
  }
LABEL_40:
  int v16 = *(_DWORD *)(v15 - 8);
LABEL_41:
  unsigned int v17 = *((_DWORD *)v36 + 4);
  if (v17 >= 0x100) {
    unsigned int v18 = v17 >> 8;
  }
  else {
    unsigned int v18 = WTF::StringImpl::hashSlowCase(v36);
  }
  int v19 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v21 = v18 & v16;
    uint64_t v22 = (uint64_t *)(v15 + 16 * (v18 & v16));
    uint64_t v23 = (WTF *)*v22;
    if (*v22 == -1)
    {
      int v19 = (uint64_t *)(v15 + 16 * v21);
      goto LABEL_50;
    }
    if (!v23) {
      break;
    }
    if (WTF::equal(v23, v36, v14)) {
      goto LABEL_67;
    }
LABEL_50:
    unsigned int v18 = i + v21;
  }
  if (v19)
  {
    *int v19 = 0;
    v19[1] = 0;
    --*(_DWORD *)(qword_1EB35A1F8 - 16);
    uint64_t v22 = v19;
  }
  WTF::String::operator=(v22, &v36);
  uint64_t v25 = API::Object::newObject(0x38uLL, 117);
  WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(v25, &v35, (uint64_t *)&v34, (uint64_t *)&v33, 0);
  if (v25 && !*(unsigned char *)(v25 + 49))
  {
    CFRelease(*(CFTypeRef *)(v25 + 8));
    uint64_t v25 = 0;
  }
  uint64_t v26 = v22[1];
  v22[1] = v25;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  if (qword_1EB35A1F8) {
    int v27 = *(_DWORD *)(qword_1EB35A1F8 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(qword_1EB35A1F8 - 12) = v27;
  if (qword_1EB35A1F8) {
    int v28 = *(_DWORD *)(qword_1EB35A1F8 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(qword_1EB35A1F8 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(qword_1EB35A1F8 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29) {
LABEL_66:
    }
      uint64_t v22 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((WTF::StringImpl **)v22);
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_66;
  }
LABEL_67:
  uint64_t v31 = v22[1];
  if (v31) {
    CFRetain(*(CFTypeRef *)(v31 + 8));
  }
  *a4 = v31;
  id v32 = v36;
  long long v36 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v24);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v24);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v24);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t result = (uint64_t)v35;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      return WTF::StringImpl::destroy(v35, v24);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  return result;
}

void sub_199361334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  operator delete(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v14);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::getOrCreate@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v6 = v29[0];
  int v28 = v29[0];
  if ((a2 & 1) != 0 || (*(unsigned char *)(a1 + 8) & 2) == 0)
  {
    WTF::URL::protocol((WTF::URL *)a1);
    if ((v7 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    unsigned int v9 = v29[0];
    int v28 = v29[0];
    v29[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v8);
        v29[0] = 0;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v6 = v9;
  }
  WTF::URL::host((WTF::URL *)a1);
  if ((v10 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  char v11 = a2;
  if ((a2 & 2) != 0)
  {
    unsigned int v12 = v27;
    if (v27)
    {
      if (*((_DWORD *)v27 + 1))
      {
        *(_DWORD *)v27 += 2;
        uint64_t v25 = v12;
        v29[0] = (WTF::StringImpl *)"*.";
        v29[1] = (WTF::StringImpl *)3;
        uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v29, (uint64_t *)&v25, &v26);
        uint64_t v15 = v26;
        if (!v26)
        {
          __break(0xC471u);
          return result;
        }
        int v16 = v27;
        uint64_t v26 = 0;
        int v27 = v15;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v14);
            unsigned int v17 = v26;
            uint64_t v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v14);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v16 -= 2;
            uint64_t v26 = 0;
          }
        }
        unsigned int v18 = v25;
        uint64_t v25 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v14);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v19 = v29[0];
  uint64_t v26 = v29[0];
  if ((v11 & 4) == 0)
  {
    unsigned int v20 = *(_DWORD *)(a1 + 32);
    if (v20 <= WTF::URL::pathStart((WTF::URL *)a1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      long long v24 = v29[0];
    }
    else
    {
      WTF::URL::path((WTF::URL *)a1);
      if ((v21 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
    }
    uint64_t v26 = v24;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v22);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v19 = v24;
  }
  WebKit::WebExtensionMatchPattern::getOrCreate(&v28, &v27, &v26, a3);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v23);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v27;
  int v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      if (!v6) {
        return result;
      }
      goto LABEL_47;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v6) {
    return result;
  }
LABEL_47:
  if (*(_DWORD *)v6 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v23);
  }
  *(_DWORD *)v6 -= 2;
  return result;
}

void sub_19936178C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::allURLsMatchPattern@<X0>(void *a1@<X8>)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebExtensionMatchPattern::getOrCreate(&v6, v3, &v7);
  uint64_t result = v6;
  *a1 = v7;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1993618B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::allHostsAndSchemesMatchPattern@<X0>(void *a1@<X8>)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebExtensionMatchPattern::getOrCreate(&v6, v3, &v7);
  uint64_t result = v6;
  *a1 = v7;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199361958(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(void **a1)
{
  uint64_t v2 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a1);
  uint64_t v4 = *a1;
  if (*a1) {
    v4 += *((unsigned int *)v4 - 1);
  }
  if (v4 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = *v2;
    if (*(unsigned char *)(*v2 + 49))
    {
      if (*(unsigned char *)(v5 + 48)) {
        return 1;
      }
      if (*(unsigned char *)(v5 + 41))
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (!v6 || !*(_DWORD *)(v6 + 4)) {
          return 1;
        }
      }
    }
    while (++v2 != v3)
    {
      if ((unint64_t)(*v2 + 1) > 1) {
        goto LABEL_13;
      }
    }
    uint64_t v2 = v3;
LABEL_13:
    if (v2 == v4) {
      return 0;
    }
  }
}

uint64_t WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(uint64_t a1, WTF::StringImpl **a2, void *a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EEA001E8;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = (WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (a3) {
    *a3 = 0;
  }
  int v7 = MEMORY[0x19972E990](*a2, "<all_urls>", 10);
  *(unsigned char *)(a1 + 48) = v7;
  if (v7)
  {
    *(unsigned char *)(a1 + 49) = 1;
    unsigned int v8 = *a2;
    if (*a2)
    {
      unsigned int v9 = *((_DWORD *)v8 + 4);
      if (v9 >= 0x100) {
        LODWORD(v8) = v9 >> 8;
      }
      else {
        LODWORD(v8) = WTF::StringImpl::hashSlowCase(v8);
      }
    }
    *(_DWORD *)(a1 + 52) = v8;
    return a1;
  }
  WebCore::UserContentURLPattern::UserContentURLPattern((uint64_t)&v37);
  char v11 = v37;
  if (!v37 || !*((_DWORD *)v37 + 1)) {
    goto LABEL_11;
  }
  *(_DWORD *)v37 += 2;
  long long v36 = v11;
  unsigned __int8 v12 = WebKit::WebExtensionMatchPattern::isValidScheme((WebKit::WebExtensionMatchPattern *)&v36);
  unsigned __int8 v13 = v12;
  long long v36 = 0;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    if (v12) {
      goto LABEL_11;
    }
LABEL_18:
    if (a3)
    {
      int v16 = NSString;
      if (*a2) {
        unsigned int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unsigned int v17 = &stru_1EEA10550;
      }
      if (v37) {
        unsigned int v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unsigned int v18 = &stru_1EEA10550;
      }
      int v19 = [v16 stringWithFormat:@"\"%@\" cannot be parsed because the scheme \"%@\" is invalid.", v17, v18];
      unsigned int v20 = WebKit::error(2, v19);
LABEL_38:
      *a3 = v20;

LABEL_44:
    }
    goto LABEL_59;
  }
  WTF::StringImpl::destroy(v11, v10);
  if ((v13 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_11:
  switch((char)v40)
  {
    case 0:
      uint64_t v14 = v37;
      char v37 = 0;
      uint64_t v15 = *v6;
      WTF::StringImpl *v6 = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v10);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v26 = v38;
      uint64_t v38 = 0;
      int v27 = *(WTF::StringImpl **)(a1 + 24);
      *(void *)(a1 + 24) = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v10);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      int v28 = v39;
      unint64_t v39 = 0;
      uint64_t v29 = *(WTF::StringImpl **)(a1 + 32);
      *(void *)(a1 + 32) = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v10);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      *(_WORD *)(a1 + 40) = v40;
      *(unsigned char *)(a1 + 49) = 1;
      unint64_t v30 = *a2;
      if (*a2)
      {
        unsigned int v31 = *((_DWORD *)v30 + 4);
        if (v31 >= 0x100) {
          LODWORD(v30) = v31 >> 8;
        }
        else {
          LODWORD(v30) = WTF::StringImpl::hashSlowCase(v30);
        }
      }
      *(_DWORD *)(a1 + 52) = v30;
      break;
    case 2:
      if (a3)
      {
        uint64_t v21 = NSString;
        if (*a2) {
          unsigned int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v17 = &stru_1EEA10550;
        }
        unsigned int v18 = [v21 stringWithFormat:@"\"%@\" cannot be parsed because it doesn't have a scheme.", v17];
        uint64_t v22 = WebKit::error(2, v18);
        goto LABEL_43;
      }
      break;
    case 3:
      if (a3)
      {
        uint64_t v23 = NSString;
        if (*a2) {
          unsigned int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v17 = &stru_1EEA10550;
        }
        unsigned int v18 = [v23 stringWithFormat:@"\"%@\" cannot be parsed because it doesn't have a host.", v17];
        uint64_t v22 = WebKit::error(3, v18);
        goto LABEL_43;
      }
      break;
    case 4:
      if (a3)
      {
        long long v24 = NSString;
        if (*a2) {
          unsigned int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v17 = &stru_1EEA10550;
        }
        if (v38) {
          unsigned int v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v18 = &stru_1EEA10550;
        }
        int v19 = [v24 stringWithFormat:@"\"%@\" cannot be parsed because the host \"%@\" is invalid.", v17, v18];
        unsigned int v20 = WebKit::error(3, v19);
        goto LABEL_38;
      }
      break;
    case 5:
      if (a3)
      {
        uint64_t v25 = NSString;
        if (*a2) {
          unsigned int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v17 = &stru_1EEA10550;
        }
        unsigned int v18 = [v25 stringWithFormat:@"\"%@\" cannot be parsed because it doesn't have a path.", v17];
        uint64_t v22 = WebKit::error(4, v18);
LABEL_43:
        *a3 = v22;
        goto LABEL_44;
      }
      break;
    default:
      break;
  }
LABEL_59:
  id v32 = v39;
  unint64_t v39 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v10);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t v33 = v38;
  uint64_t v38 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v10);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t v34 = v37;
  char v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v10);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  return a1;
}

void sub_199361F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v19);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v19);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v19);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  unsigned int v20 = *(WTF::StringImpl **)(v15 + 32);
  *(void *)(v15 + 32) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(WTF::StringImpl **)(v15 + 24);
  *(void *)(v15 + 24) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v19);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = *v17;
  *unsigned int v17 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v19);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionMatchPattern::isValidScheme(WebKit::WebExtensionMatchPattern *a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (!*(_DWORD *)(*(void *)a1 + 4)) {
    return 0;
  }
  WebKit::WebExtensionMatchPattern::validSchemes(a1);
  uint64_t v3 = WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes;
  if (!WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes) {
    return 0;
  }
  int v5 = *(_DWORD *)(WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes - 8);
  unsigned int v6 = *(_DWORD *)(*(void *)a1 + 16);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a1);
  }
  for (i = 0; ; unsigned int v7 = i + v9)
  {
    int v9 = v7 & v5;
    uint64_t result = *(WTF **)(v3 + 8 * (v7 & v5));
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *(const WTF::StringImpl **)a1, v2)) {
        break;
      }
    }
    ++i;
  }
  return (WTF *)1;
}

id WebKit::error(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v8 = *MEMORY[0x1E4F28228];
  v9[0] = v3;
  int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  unsigned int v6 = [v4 errorWithDomain:@"WKWebExtensionMatchPatternErrorDomain" code:a1 userInfo:v5];

  return v6;
}

void sub_199362210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EEA001E8;
  *(void *)(a1 + 16) = 0;
  uint64_t v10 = (WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (a5) {
    *a5 = 0;
  }
  char v11 = *a2;
  if (*a2) {
    *(_DWORD *)v11 += 2;
  }
  char v55 = v11;
  unsigned __int8 v12 = WebKit::WebExtensionMatchPattern::isValidScheme((WebKit::WebExtensionMatchPattern *)&v55);
  unsigned __int8 v14 = v12;
  char v55 = 0;
  if (!v11)
  {
LABEL_8:
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v11, v13);
  if (v14)
  {
LABEL_9:
    uint64_t v15 = *a2;
    if (*a2)
    {
      unint64_t v16 = *((unsigned int *)v15 + 4);
      uint64_t v17 = *((void *)v15 + 1);
      LODWORD(v15) = *((_DWORD *)v15 + 1);
      uint64_t v18 = (v16 >> 2) & 1;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 1;
    }
    uint64_t v19 = *a3;
    if (*a3)
    {
      unint64_t v20 = *(unsigned int *)(v19 + 16);
      uint64_t v21 = *(void *)(v19 + 8);
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
      uint64_t v22 = (v20 >> 2) & 1;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 1;
    }
    uint64_t v23 = *a4;
    if (*a4)
    {
      unint64_t v24 = *(unsigned int *)(v23 + 16);
      uint64_t v25 = *(void *)(v23 + 8);
      LODWORD(v23) = *(_DWORD *)(v23 + 4);
      uint64_t v26 = (v24 >> 2) & 1;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 1;
    }
    MEMORY[0x1997360C0](&v51, v17, v15 | (unint64_t)(v18 << 32), v21, v19 | (unint64_t)(v22 << 32), v25, v23 | (unint64_t)(v26 << 32));
    switch((char)v54)
    {
      case 0:
        uint64_t v35 = v51;
        uint64_t v51 = 0;
        long long v36 = *v10;
        WTF::StringImpl *v10 = v35;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v27);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        uint64_t v43 = v52;
        uint64_t v52 = 0;
        id v44 = *(WTF::StringImpl **)(a1 + 24);
        *(void *)(a1 + 24) = v43;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v27);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        uint64_t v45 = v53;
        int v53 = 0;
        unint64_t v46 = *(WTF::StringImpl **)(a1 + 32);
        *(void *)(a1 + 32) = v45;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v27);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
        *(_WORD *)(a1 + 40) = v54;
        *(unsigned char *)(a1 + 49) = 1;
        WebKit::WebExtensionMatchPattern::stringWithScheme((WTF::StringImpl *)a1, MEMORY[0x1E4F30978], &v50);
        uint64_t v47 = v50;
        if (v50)
        {
          unsigned int v48 = *((_DWORD *)v50 + 4);
          if (v48 >= 0x100) {
            unsigned int v49 = v48 >> 8;
          }
          else {
            unsigned int v49 = WTF::StringImpl::hashSlowCase(v50);
          }
          *(_DWORD *)(a1 + 52) = v49;
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v27);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 52) = 0;
        }
        break;
      case 2:
        if (a5)
        {
          char v37 = NSString;
          if (*a2) {
            uint64_t v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v29 = &stru_1EEA10550;
          }
          unint64_t v30 = [v37 stringWithFormat:@"Scheme \"%@\" is invalid.", v29];
          unsigned int v31 = WebKit::error(2, v30);
          goto LABEL_36;
        }
        break;
      case 3:
      case 4:
        if (a5)
        {
          int v28 = NSString;
          if (*a3) {
            uint64_t v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v29 = &stru_1EEA10550;
          }
          unint64_t v30 = [v28 stringWithFormat:@"Host \"%@\" is invalid.", v29];
          unsigned int v31 = WebKit::error(3, v30);
          goto LABEL_36;
        }
        break;
      case 5:
        if (a5)
        {
          uint64_t v38 = NSString;
          if (*a4) {
            uint64_t v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v29 = &stru_1EEA10550;
          }
          unint64_t v30 = [v38 stringWithFormat:@"Path \"%@\" is invalid.", v29];
          unsigned int v31 = WebKit::error(4, v30);
LABEL_36:
          *a5 = v31;
        }
        break;
      default:
        break;
    }
    unint64_t v39 = v53;
    int v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v27);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    __int16 v40 = v52;
    uint64_t v52 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v27);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    unint64_t v41 = v51;
    uint64_t v51 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v27);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    return a1;
  }
LABEL_21:
  if (a5)
  {
    id v32 = NSString;
    if (*a2) {
      uint64_t v33 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v33 = &stru_1EEA10550;
    }
    uint64_t v34 = [v32 stringWithFormat:@"Scheme \"%@\" is invalid.", v33];
    WebKit::error(2, v34);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_1993626DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (*(_DWORD *)v15 == 2) {
    WTF::StringImpl::destroy(v15, a2);
  }
  else {
    *(_DWORD *)v15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  uint64_t v18 = *(WTF::StringImpl **)(v14 + 32);
  *(void *)(v14 + 32) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = *(WTF::StringImpl **)(v14 + 24);
  *(void *)(v14 + 24) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, a2);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  unint64_t v20 = *v16;
  void *v16 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::isSupported(WebKit::WebExtensionMatchPattern *this)
{
  if (!*((unsigned char *)this + 49)) {
    return 0;
  }
  if (*((unsigned char *)this + 48)) {
    return 1;
  }
  WebKit::WebExtensionMatchPattern::supportedSchemes(this);
  if (*((unsigned char *)this + 49) && !*((unsigned char *)this + 48))
  {
    int v5 = (WTF::StringImpl *)*((void *)this + 2);
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v5 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
  if (*MEMORY[0x1E4F30978]) {
LABEL_8:
  }
    *(_DWORD *)v5 += 2;
LABEL_9:
  uint64_t v2 = qword_1EB35A1F0;
  if (qword_1EB35A1F0)
  {
    int v7 = *(_DWORD *)(qword_1EB35A1F0 - 8);
    unsigned int v8 = *((_DWORD *)v5 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(v5);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      int v11 = v9 & v7;
      unsigned __int8 v12 = *(WTF **)(v2 + 8 * (v9 & v7));
      if (v12 != (WTF *)-1)
      {
        if (!v12)
        {
          uint64_t v2 = 0;
          goto LABEL_10;
        }
        if (WTF::equal(v12, v5, v4)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v2 = 1;
  }
LABEL_10:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v2;
}

void sub_199362988(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49)
    && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
    && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52))
  {
    return MEMORY[0x1F41758E0](a1 + 16, a2 + 16);
  }
  return 0;
}

uint64_t WebKit::WebExtensionMatchPattern::host@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(this + 49) && !*(unsigned char *)(this + 48)) {
    return MEMORY[0x1F41758C8](this + 16);
  }
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30978];
  if (*MEMORY[0x1E4F30978]) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebExtensionMatchPattern::hostIsPublicSuffix(WebKit::WebExtensionMatchPattern *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    *(_DWORD *)v1 += 2;
    this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::startsWith();
    if (this)
    {
      this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::substring((WTF::StringImpl *)v1);
      if (*(_DWORD *)v1 == 2) {
        this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::destroy((WTF::StringImpl *)v1, v2);
      }
      else {
        *(_DWORD *)v1 -= 2;
      }
      uint64_t v1 = v9;
    }
  }
  uint64_t v3 = WebCore::PublicSuffixStore::singleton(this);
  if (v1)
  {
    uint64_t v4 = *(void *)(v1 + 8);
    unint64_t v5 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0x100000000;
  }
  uint64_t v7 = MEMORY[0x19973EC30](v3, v4, v5);
  if (v1)
  {
    if (*(_DWORD *)v1 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v1, v6);
    }
    else {
      *(_DWORD *)v1 -= 2;
    }
  }
  return v7;
}

void sub_199362B2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::stringWithScheme@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  if (!*((unsigned char *)this + 49))
  {
    unint64_t v5 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *(_DWORD *)v5 += 2;
    }
    goto LABEL_6;
  }
  uint64_t v4 = this;
  if (*((unsigned char *)this + 48))
  {
    this = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v5 = v9[1];
LABEL_6:
    *a3 = v5;
    return this;
  }
  unsigned int v6 = *a2;
  if (*a2 && *((_DWORD *)v6 + 1) || (unsigned int v6 = (WTF::StringImpl *)*((void *)this + 2)) != 0) {
    *(_DWORD *)v6 += 2;
  }
  WebKit::WebExtensionMatchPattern::host((uint64_t)this, v9);
  if (!*((unsigned char *)v4 + 49) || *((unsigned char *)v4 + 48))
  {
    uint64_t v7 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
    if (!*MEMORY[0x1E4F30978]) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)v4 + 4);
  if (v7) {
LABEL_15:
  }
    *(_DWORD *)v7 += 2;
LABEL_16:
  this = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)a3, (uint64_t)v6, "://", 4, (uint64_t)v9[0], v7);
  if (!*a3)
  {
    __break(0xC471u);
    return this;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v8);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  this = v9[0];
  v9[0] = 0;
  if (!this)
  {
LABEL_24:
    if (!v6) {
      return this;
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_24;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
  if (!v6) {
    return this;
  }
LABEL_27:
  if (*(_DWORD *)v6 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v8);
  }
  *(_DWORD *)v6 -= 2;
  return this;
}

void sub_199362CF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::expandedStrings(WebKit::WebExtensionMatchPattern *this)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 49))
  {
    unsigned __int8 v13 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_31;
  }
  if (!*((unsigned char *)this + 48))
  {
    WebKit::WebExtensionMatchPattern::stringWithScheme(this, MEMORY[0x1E4F30978], v19);
    uint64_t v14 = v19[0];
    if (v19[0]) {
      uint64_t v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v15 = &stru_1EEA10550;
    }
    v20[0] = v15;
    unsigned __int8 v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];

    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v16);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    goto LABEL_31;
  }
  uint64_t v1 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
  WebKit::WebExtensionMatchPattern::supportedSchemes(v1);
  uint64_t v2 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1EB35A1F0);
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  if (qword_1EB35A1F0) {
    uint64_t v6 = qword_1EB35A1F0 + 8 * *(unsigned int *)(qword_1EB35A1F0 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((WTF::StringImpl **)v6 == v2)
  {
LABEL_23:
    unsigned __int8 v13 = (void *)[(WebKit::WebExtensionMatchPattern *)v1 copy];

LABEL_31:
    return (WTF::StringImpl *)v13;
  }
  while (1)
  {
    if (MEMORY[0x19972E990](*v3, "*", 1)) {
      goto LABEL_18;
    }
    uint64_t v7 = *v3;
    if (*v3) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v17 = v7;
    v19[0] = (WTF::StringImpl *)"://*/*";
    v19[1] = (WTF::StringImpl *)7;
    WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v17, (uint64_t *)v19, &v18);
    uint64_t result = v18;
    if (!v18) {
      break;
    }
    id v9 = (id)WTF::StringImpl::operator NSString *();
    [(WebKit::WebExtensionMatchPattern *)v1 addObject:v9];

    int v11 = v18;
    uint64_t v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    unsigned __int8 v12 = v17;
    uint64_t v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
LABEL_18:
    while (++v3 != v5)
    {
      if ((unint64_t)*v3 + 1 > 1) {
        goto LABEL_22;
      }
    }
    uint64_t v3 = v5;
LABEL_22:
    if (v3 == (WTF::StringImpl **)v6) {
      goto LABEL_23;
    }
  }
  __break(0xC471u);
  return result;
}

void sub_199362FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v13);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()(WebKit::WebExtensionMatchPattern *a1, uint64_t a2)
{
  if (!*((unsigned char *)a1 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 48)) {
    return 1;
  }
  WebKit::WebExtensionMatchPattern::supportedSchemes(a1);
  if (*(unsigned char *)(a2 + 49) && !*(unsigned char *)(a2 + 48))
  {
    uint64_t v6 = *(WTF::StringImpl **)(a2 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v6 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
  if (*MEMORY[0x1E4F30978]) {
LABEL_10:
  }
    *(_DWORD *)v6 += 2;
LABEL_11:
  uint64_t v3 = qword_1EB35A1F0;
  if (qword_1EB35A1F0)
  {
    int v8 = *(_DWORD *)(qword_1EB35A1F0 - 8);
    unsigned int v9 = *((_DWORD *)v6 + 4);
    if (v9 >= 0x100) {
      unsigned int v10 = v9 >> 8;
    }
    else {
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v6);
    }
    for (i = 0; ; unsigned int v10 = i + v12)
    {
      int v12 = v10 & v8;
      unsigned __int8 v13 = *(WTF **)(v3 + 8 * (v10 & v8));
      if (v13 != (WTF *)-1)
      {
        if (!v13)
        {
          uint64_t v3 = 0;
          goto LABEL_12;
        }
        if (WTF::equal(v13, v6, v5)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v3 = 1;
  }
LABEL_12:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v3;
}

void sub_1993631C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionMatchPattern::schemeMatches(uint64_t a1, uint64_t a2, char a3)
{
  BOOL result = 1;
  if ((a3 & 1) == 0)
  {
    uint64_t v4 = (const WebCore::UserContentURLPattern *)(a1 + 16);
    unint64_t v5 = (WebCore::UserContentURLPattern *)(a2 + 16);
    if ((WebCore::UserContentURLPattern::matchesScheme((WebCore::UserContentURLPattern *)(a1 + 16), (const WebCore::UserContentURLPattern *)(a2 + 16)) & 1) == 0&& ((a3 & 4) == 0 || (WebCore::UserContentURLPattern::matchesScheme(v5, v4) & 1) == 0))
    {
      return 0;
    }
  }
  return result;
}

BOOL WebKit::WebExtensionMatchPattern::hostMatches(uint64_t a1, uint64_t a2, char a3)
{
  return (WebCore::UserContentURLPattern::matchesHost((WebCore::UserContentURLPattern *)(a1 + 16), (const WTF::String *)(a2 + 24)) & 1) != 0|| (a3 & 4) != 0&& (WebCore::UserContentURLPattern::matchesHost((WebCore::UserContentURLPattern *)(a2 + 16), (const WTF::String *)(a1 + 24)) & 1) != 0;
}

BOOL WebKit::WebExtensionMatchPattern::pathMatches(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 2) != 0
      || (WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)(a1 + 16), (const WTF::String *)(a2 + 32)) & 1) != 0|| (a3 & 4) != 0&& (WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)(a2 + 16), (const WTF::String *)(a1 + 32)) & 1) != 0;
}

WTF::StringImpl *WebKit::toStrings@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  if (*a1) {
    unsigned int v4 = *((_DWORD *)*a1 - 3);
  }
  else {
    unsigned int v4 = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, v4);
  BOOL result = (WTF::StringImpl *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a1);
  uint64_t v6 = (WTF::StringImpl **)result;
  int v8 = v7;
  if (*a1) {
    uint64_t v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((WTF::StringImpl *)v9 != result)
  {
    unsigned int v10 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
    do
    {
      WebKit::WebExtensionMatchPattern::stringWithScheme(*v6, v10, &v14);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v14, v11, (uint64_t)&v13);
      BOOL result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          BOOL result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      while (++v6 != v8)
      {
        if ((unint64_t)*v6 + 1 > 1) {
          goto LABEL_17;
        }
      }
      uint64_t v6 = v8;
LABEL_17:
      ;
    }
    while (v6 != (WTF::StringImpl **)v9);
  }
  return result;
}

void sub_199363428(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toPatterns(void **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  if (*a1) {
    unsigned int v4 = *((_DWORD *)*a1 - 3);
  }
  else {
    unsigned int v4 = 0;
  }
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v4);
  unint64_t v5 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v7 = v5;
  uint64_t v9 = v8;
  if (*a1) {
    uint64_t v10 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WTF::StringImpl **)v10 != v5)
  {
    do
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v7, v6, &v14);
      uint64_t v11 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      uint64_t v15 = v11;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, &v15, (uint64_t)v13);
      uint64_t v12 = v15;
      uint64_t v15 = 0;
      if (v12) {
        CFRelease(*(CFTypeRef *)(v12 + 8));
      }
      CFRelease(*(CFTypeRef *)(v11 + 8));
      while (++v7 != v9)
      {
        if ((unint64_t)*v7 + 1 > 1) {
          goto LABEL_14;
        }
      }
      uint64_t v7 = v9;
LABEL_14:
      ;
    }
    while (v7 != (WTF::StringImpl **)v10);
  }
}

void sub_199363578(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*v14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v14, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toPatterns(WebKit *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = this;
  *a2 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, [(WebKit *)v4 count]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  unint64_t v5 = v4;
  uint64_t v6 = [(WebKit *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        uint64_t v10 = WTF::dynamic_objc_cast<WKWebExtensionMatchPattern>(v9);
        uint64_t v11 = v10;
        if (v10)
        {
          uint64_t v12 = [v10 _webExtensionMatchPattern];
          CFRetain(*(CFTypeRef *)(v12 + 8));
          uint64_t v14 = v12;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, &v14, (uint64_t)v19);
          uint64_t v13 = v14;
          uint64_t v14 = 0;
          if (v13) {
            CFRelease(*(CFTypeRef *)(v13 + 8));
          }
        }

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [(WebKit *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v6);
  }
}

void sub_199363740(_Unwind_Exception *a1)
{
  if (*v2) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v2, v5);
  }

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<WKWebExtensionMatchPattern>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_199363800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199363908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMatchPattern::~WebExtensionMatchPattern(WebKit::WebExtensionMatchPattern *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionMatchPattern::~WebExtensionMatchPattern(this, a2);

  JUMPOUT(0x199740C10);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(void *)this = &unk_1EEA001E8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)117>::type()
{
  return 117;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(WTF::StringImpl **a1)
{
  uint64_t v2 = qword_1EB35A1F8;
  if (qword_1EB35A1F8)
  {
    int v3 = *(_DWORD *)(qword_1EB35A1F8 - 4);
    int v4 = *(_DWORD *)(qword_1EB35A1F8 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  qword_1EB35A1F8 = (uint64_t)(v6 + 4);
  v6[2] = v5 - 1;
  v6[3] = v5;
  _DWORD *v6 = 0;
  *(_DWORD *)(qword_1EB35A1F8 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (WTF::StringImpl **)(v2 + 16 * v8);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = qword_1EB35A1F8;
          if (qword_1EB35A1F8) {
            int v15 = *(_DWORD *)(qword_1EB35A1F8 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = v14 + 16 * v19;
          uint64_t v21 = *(void *)(v20 + 8);
          *(void *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(*(CFTypeRef *)(v21 + 8));
            uint64_t v22 = *(WTF::StringImpl **)v20;
            *(void *)uint64_t v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v7);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v20 = 0;
          }
          uint64_t v23 = *v10;
          void *v10 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v2 + 16 * v8;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v20 + 8) = v25;
          uint64_t v26 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            CFRelease(*(CFTypeRef *)(v26 + 8));
          }
          int v27 = *v10;
          void *v10 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v7);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v10 == a1) {
            uint64_t v9 = v20;
          }
        }
        else
        {
          uint64_t v12 = v2 + 16 * v8;
          uint64_t v13 = *(void *)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(*(CFTypeRef *)(v13 + 8));
            uint64_t v11 = *v10;
          }
          void *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v7);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      ++v8;
    }
    while (v8 != v3);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

void WebKit::WebExtensionMatchPattern::create<WTF::String const&>(WTF::StringImpl **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = API::Object::newObject(0x38uLL, 117);
  WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(v4, a1, 0);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 49))
    {
      *a2 = v4;
    }
    else
    {
      *a2 = 0;
      unsigned int v5 = *(const void **)(v4 + 8);
      CFRelease(v5);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_199363C14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (a4) {
    size_t v6 = a4 - 1;
  }
  else {
    size_t v6 = 0;
  }
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x199363EFCLL);
  }
  uint64_t v11 = (void *)result;
  if (a2)
  {
    int v12 = *(_DWORD *)(a2 + 4);
    if (a5) {
      goto LABEL_7;
    }
LABEL_56:
    int v13 = 0;
    if (a6) {
      goto LABEL_8;
    }
LABEL_57:
    int v14 = 0;
    goto LABEL_9;
  }
  int v12 = 0;
  if (!a5) {
    goto LABEL_56;
  }
LABEL_7:
  int v13 = *(_DWORD *)(a5 + 4);
  if (!a6) {
    goto LABEL_57;
  }
LABEL_8:
  int v14 = a6[1];
LABEL_9:
  if ((v14 | v13) < 0) {
    goto LABEL_40;
  }
  BOOL v15 = __OFADD__(v13, v14);
  int v16 = v13 + v14;
  if (v15) {
    goto LABEL_40;
  }
  unsigned int v17 = 0;
  BOOL v15 = __OFADD__(v6, v16);
  int v18 = v6 + v16;
  char v19 = v15;
  if (v12 < 0 || (v19 & 1) != 0) {
    goto LABEL_53;
  }
  unsigned int v20 = v12 + v18;
  if (__OFADD__(v12, v18)) {
    goto LABEL_40;
  }
  if (!a2 || (*(unsigned char *)(a2 + 16) & 4) != 0)
  {
    if (a5)
    {
      int v22 = *(_DWORD *)(a5 + 16);
      if (!a6 || (v22 & 4) == 0)
      {
        uint64_t v21 = v20;
        BOOL v23 = v20 == 0;
        if ((v22 & 4) != 0)
        {
LABEL_25:
          if (v23) {
            goto LABEL_38;
          }
          if ((v20 & 0x80000000) == 0)
          {
LABEL_27:
            uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
            unsigned int v17 = v42;
            if (v42)
            {
              *uint64_t v42 = 2;
              v17[1] = v20;
              *((void *)v17 + 1) = v17 + 5;
              v17[4] = 4;
              uint64_t v40 = a2;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v40, (char *)v17 + 20);
              uint64_t v24 = v40;
              if (v40) {
                uint64_t v24 = *(unsigned int *)(v40 + 4);
              }
              uint64_t v25 = (char *)v17 + v24 + 20;
              if (v6)
              {
                if (v6 == 1) {
                  *uint64_t v25 = *(unsigned char *)a3;
                }
                else {
                  memcpy((char *)v17 + v24 + 20, a3, v6);
                }
              }
              uint64_t v41 = a5;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v41, &v25[v6]);
              uint64_t v26 = v41;
              if (v41) {
                uint64_t v26 = *(unsigned int *)(v41 + 4);
              }
              uint64_t v42 = a6;
              uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v42, &v25[v6 + v26]);
            }
            goto LABEL_53;
          }
LABEL_40:
          unsigned int v17 = 0;
          goto LABEL_53;
        }
LABEL_37:
        if (!v23) {
          goto LABEL_39;
        }
LABEL_38:
        unsigned int v17 = (_DWORD *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        goto LABEL_53;
      }
    }
    else if (!a6)
    {
      if (!v20) {
        goto LABEL_38;
      }
      uint64_t v21 = v20;
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_40;
      }
      goto LABEL_27;
    }
    uint64_t v21 = v20;
    BOOL v23 = v20 == 0;
    if ((a6[4] & 4) != 0) {
      goto LABEL_25;
    }
    goto LABEL_37;
  }
  if (!v20) {
    goto LABEL_38;
  }
  uint64_t v21 = v20;
LABEL_39:
  if (v20 > 0x7FFFFFEF) {
    goto LABEL_40;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
  unsigned int v17 = v42;
  if (v42)
  {
    *uint64_t v42 = 2;
    v17[1] = v20;
    *((void *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    uint64_t v40 = a2;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v40, (char *)v17 + 20);
    uint64_t v27 = v40;
    if (v40) {
      uint64_t v27 = *(unsigned int *)(v40 + 4);
    }
    int v28 = (char *)v17 + 2 * v27 + 20;
    uint64_t v29 = &v28[2 * v6];
    if ((v6 & 0xFFFFFFC0) != 0)
    {
      unint64_t v30 = &v28[2 * (v6 & 0xFFFFFFC0)];
      long long v31 = 0uLL;
      do
      {
        v43.val[0] = (int8x16_t)*a3;
        int8x16_t v32 = *((int8x16_t *)a3 + 1);
        v44.val[0] = (int8x16_t)a3[2];
        long long v33 = a3[3];
        a3 += 4;
        long long v34 = v33;
        v44.val[1] = 0uLL;
        v45.val[0] = v32;
        v43.val[1] = 0uLL;
        uint64_t v35 = v28;
        vst2q_s8(v35, v43);
        v35 += 32;
        v45.val[1] = 0uLL;
        vst2q_s8(v35, v45);
        long long v36 = v28 + 64;
        vst2q_s8(v36, v44);
        char v37 = v28 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v28 += 128;
      }
      while (v28 != v30);
      int v28 = v30;
    }
    while (v28 != v29)
    {
      __int16 v38 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)int v28 = v38;
      v28 += 2;
    }
    uint64_t v41 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v41, v29);
    uint64_t v39 = v41;
    if (v41) {
      uint64_t v39 = *(unsigned int *)(v41 + 4);
    }
    uint64_t v42 = a6;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v42, &v29[2 * v39]);
  }
LABEL_53:
  *uint64_t v11 = v17;
  return result;
}

void sub_199363F38(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMenuItem::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v3 = v4 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v5 = v6 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v3 == v5) {
    return WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), a3);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WebKit::WebExtensionMenuItem::removeAmpersands@<X0>(WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  unint64_t v8 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  unsigned int v36 = 0;
  char v37 = 1;
  while (1)
  {
    uint64_t v9 = *this;
    if (*this) {
      uint64_t v9 = (WTF::StringImpl *)*((unsigned int *)v9 + 1);
    }
    if (v8 >= (unint64_t)v9) {
      break;
    }
    unint64_t v10 = WTF::String::find((uint64_t)this, 0x26u, v8, a4, a5, a6);
    if (v10 == -1)
    {
      uint64_t v26 = *this;
      if (v26)
      {
        if (v8 || (*((_DWORD *)v26 + 1) & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(v26);
          uint64_t v26 = v38;
        }
        else
        {
          *(_DWORD *)v26 += 2;
        }
        long long v33 = v26;
        if (v36 || v35)
        {
          if (v26)
          {
            uint64_t v27 = *((void *)v26 + 1);
            unint64_t v28 = *((unsigned int *)v26 + 1) | ((unint64_t)((*((_DWORD *)v26 + 4) >> 2) & 1) << 32);
          }
          else
          {
            uint64_t v27 = 0;
            unint64_t v28 = 0x100000000;
          }
LABEL_76:
          WTF::StringBuilder::append((uint64_t)&v34, v27, v28);
LABEL_58:
          long long v33 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, a2);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          break;
        }
      }
      else
      {
        long long v33 = 0;
        unint64_t v28 = 0x100000000;
        if (v36)
        {
          uint64_t v27 = 0;
          goto LABEL_76;
        }
        uint64_t v27 = 0;
        if (v35) {
          goto LABEL_76;
        }
      }
      WTF::String::operator=((uint64_t *)&v34, &v33);
      uint64_t v26 = v33;
      if (v33) {
        unsigned int v29 = *((_DWORD *)v33 + 1);
      }
      else {
        unsigned int v29 = 0;
      }
      unsigned int v36 = v29;
      goto LABEL_58;
    }
    unint64_t v11 = v10;
    if (v10 > v8)
    {
      int v12 = *this;
      if (*this)
      {
        if (v8 || *((_DWORD *)v12 + 1) > v11)
        {
          WTF::StringImpl::substring(v12);
          int v12 = v38;
        }
        else
        {
          *(_DWORD *)v12 += 2;
        }
        long long v33 = v12;
        if (v36 || v35)
        {
          if (v12)
          {
            uint64_t v13 = *((void *)v12 + 1);
            unint64_t v14 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
          }
          else
          {
            uint64_t v13 = 0;
            unint64_t v14 = 0x100000000;
          }
          goto LABEL_44;
        }
LABEL_17:
        WTF::String::operator=((uint64_t *)&v34, &v33);
        BOOL v15 = v33;
        if (v33) {
          unsigned int v16 = *((_DWORD *)v33 + 1);
        }
        else {
          unsigned int v16 = 0;
        }
        unsigned int v36 = v16;
      }
      else
      {
        uint64_t v13 = 0;
        long long v33 = 0;
        unint64_t v14 = 0x100000000;
        if (!v36 && !v35) {
          goto LABEL_17;
        }
LABEL_44:
        WTF::StringBuilder::append((uint64_t)&v34, v13, v14);
        BOOL v15 = v33;
      }
      long long v33 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, a2);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    unsigned int v17 = *this;
    if (*this
      && (unsigned int v18 = *((_DWORD *)v17 + 1), v11 < v18 - 1)
      && (uint64_t v19 = v11 + 1, v18 > (int)v11 + 1)
      && ((uint64_t v20 = *((void *)v17 + 1), (*((unsigned char *)v17 + 16) & 4) == 0)
        ? (int v21 = *(unsigned __int16 *)(v20 + 2 * v19))
        : (int v21 = *(unsigned __int8 *)(v20 + v19)),
          v21 == 38))
    {
      LOBYTE(v38) = 38;
      if (!v35 || (uint64_t v22 = v36, v36 >= *((_DWORD *)v35 + 1)) || v34)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        int v23 = *((_DWORD *)v35 + 4);
        uint64_t v24 = *((void *)v35 + 1);
        ++v36;
        if ((v23 & 4) != 0) {
          *(unsigned char *)(v24 + v22) = 38;
        }
        else {
          *(_WORD *)(v24 + 2 * v22) = 38;
        }
      }
      uint64_t v25 = 2;
    }
    else
    {
      uint64_t v25 = 1;
    }
    unint64_t v8 = v25 + v11;
  }
  unint64_t v30 = v34;
  if (v34
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v34),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v34),
        (unint64_t v30 = v34) != 0))
  {
    *(_DWORD *)v30 += 2;
  }
  *a3 = v30;
  long long v31 = v35;
  uint64_t v35 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, a2);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t result = v34;
  long long v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionMenuItem::matches(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemContextParameters *a2)
{
  int v2 = *(unsigned __int16 *)a2;
  if (((unsigned __int16)v2 & *((_WORD *)this + 64)) != 0)
  {
    uint64_t v5 = (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 40);
    if (*((void *)a2 + 5))
    {
      uint64_t v6 = (void *)((char *)this + 112);
      uint64_t v7 = *((void *)this + 14);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
        {
          unint64_t v8 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 14);
          uint64_t v9 = (unsigned char **)v8;
          unint64_t v11 = v10;
          if (*v6) {
            uint64_t v12 = *v6 + 8 * *(unsigned int *)(*v6 - 4);
          }
          else {
            uint64_t v12 = 0;
          }
          if ((void *)v12 == v8) {
            return 0;
          }
          while ((WebKit::WebExtensionMatchPattern::matchesURL(*v9, v5, 0) & 1) == 0)
          {
            while (++v9 != v11)
            {
              if ((unint64_t)(*v9 + 1) > 1) {
                goto LABEL_14;
              }
            }
            uint64_t v9 = v11;
LABEL_14:
            if (v9 == (unsigned char **)v12) {
              return 0;
            }
          }
          int v2 = *(unsigned __int16 *)a2;
        }
      }
    }
    int v13 = 257;
    do
    {
      int v14 = v13 & -v13;
      if ((v14 & v2) != 0 && ((unsigned __int16)v14 & *((_WORD *)this + 64)) != 0) {
        return 1;
      }
      v13 &= v13 - 1;
    }
    while ((_WORD)v13);
    if ((v2 & 0x20) == 0) {
      goto LABEL_38;
    }
    if ((*((_WORD *)this + 64) & 0x20) == 0) {
      goto LABEL_38;
    }
    if (!*((void *)a2 + 11)) {
      goto LABEL_38;
    }
    BOOL v15 = (void *)((char *)this + 120);
    uint64_t v16 = *((void *)this + 15);
    if (!v16 || !*(_DWORD *)(v16 - 12)) {
      goto LABEL_38;
    }
    unsigned int v17 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 15);
    unsigned int v18 = (unsigned char **)v17;
    uint64_t v20 = v19;
    if (*v15) {
      uint64_t v21 = *v15 + 8 * *(unsigned int *)(*v15 - 4);
    }
    else {
      uint64_t v21 = 0;
    }
    if ((void *)v21 != v17)
    {
      while ((WebKit::WebExtensionMatchPattern::matchesURL(*v18, (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 88), 0) & 1) == 0)
      {
        while (++v18 != v20)
        {
          if ((unint64_t)(*v18 + 1) > 1) {
            goto LABEL_35;
          }
        }
        unsigned int v18 = v20;
LABEL_35:
        uint64_t result = 0;
        if (v18 == (unsigned char **)v21) {
          return result;
        }
      }
      int v2 = *(unsigned __int16 *)a2;
LABEL_38:
      int v23 = 530;
      while (1)
      {
        int v24 = v23 & -v23;
        if ((v24 & v2) != 0 && ((unsigned __int16)v24 & *((_WORD *)this + 64)) != 0) {
          break;
        }
        v23 &= v23 - 1;
        if (!(_WORD)v23) {
          goto LABEL_42;
        }
      }
      if (*((void *)a2 + 16))
      {
        uint64_t v26 = (void *)((char *)this + 120);
        uint64_t v27 = *((void *)this + 15);
        if (v27)
        {
          if (*(_DWORD *)(v27 - 12))
          {
            unint64_t v28 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 15);
            unsigned int v29 = (unsigned char **)v28;
            long long v31 = v30;
            if (*v26) {
              uint64_t v32 = *v26 + 8 * *(unsigned int *)(*v26 - 4);
            }
            else {
              uint64_t v32 = 0;
            }
            if ((void *)v32 == v28) {
              return 0;
            }
            while ((WebKit::WebExtensionMatchPattern::matchesURL(*v29, (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 128), 0) & 1) == 0)
            {
              while (++v29 != v31)
              {
                if ((unint64_t)(*v29 + 1) > 1) {
                  goto LABEL_63;
                }
              }
              unsigned int v29 = v31;
LABEL_63:
              uint64_t result = 0;
              if (v29 == (unsigned char **)v32) {
                return result;
              }
            }
            LOWORD(v2) = *(_WORD *)a2;
          }
        }
      }
LABEL_42:
      if (((v2 & 0x80) == 0
         || (*((_WORD *)this + 64) & 0x80) == 0
         || (uint64_t v25 = *((void *)a2 + 21)) != 0 && *(_DWORD *)(v25 + 4))
        && ((v2 & 4) == 0 || (*((_WORD *)this + 64) & 4) == 0 || *((unsigned char *)a2 + 176)))
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebExtensionMenuItem::toggleCheckedIfNeeded(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemContextParameters *a2, const WTF::StringImpl *a3)
{
  char v4 = *((unsigned char *)this + 104);
  int v5 = *((unsigned __int8 *)this + 24);
  if (v5 != 2)
  {
    if (v5 == 1) {
      *((unsigned char *)this + 104) = v4 & 0xFE | ((v4 & 1) == 0);
    }
    return v4 & 1;
  }
  if (*((unsigned char *)this + 104)) {
    return v4 & 1;
  }
  *((unsigned char *)this + 104) = v4 | 1;
  uint64_t v7 = *((void *)this + 17);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    uint64_t v9 = (uint64_t *)(v8 + 144);
  }
  else
  {
    uint64_t v10 = *((void *)this + 2);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11) {
        uint64_t v10 = v11 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    uint64_t v9 = (uint64_t *)(v10 + 704);
  }
  if (!*((_DWORD *)v9 + 3)) {
    return v4 & 1;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t result = WebKit::WebExtensionMenuItem::operator==((uint64_t)this, *(void *)(*v9 + 8 * v12), a3);
    if (result) {
      break;
    }
    if (++v12 >= (unint64_t)*((unsigned int *)v9 + 3)) {
      return v4 & 1;
    }
  }
  if (!v12)
  {
LABEL_25:
    for (unint64_t i = v12 + 1; i < *((unsigned int *)v9 + 3); ++i)
    {
      uint64_t v19 = *v9;
      if (WebKit::WebExtensionMenuItem::matches(*(WebKit::WebExtensionMenuItem **)(*v9 + 8 * i), a2))
      {
        uint64_t v20 = *(void *)(v19 + 8 * i);
        if (*(unsigned char *)(v20 + 24) != 2) {
          return v4 & 1;
        }
        *(unsigned char *)(v20 + 104) &= ~1u;
      }
    }
    return v4 & 1;
  }
  unint64_t v14 = v12 - 1;
  while (v14 < *((unsigned int *)v9 + 3))
  {
    uint64_t v15 = *v9;
    uint64_t result = WebKit::WebExtensionMenuItem::matches(*(WebKit::WebExtensionMenuItem **)(*v9 + 8 * v14), a2);
    if (result)
    {
      uint64_t v16 = *(void *)(v15 + 8 * v14);
      if (*(unsigned char *)(v16 + 24) != 2) {
        goto LABEL_25;
      }
      *(unsigned char *)(v16 + 104) &= ~1u;
    }
    uint64_t v17 = v14-- + 1;
    if (v17 <= 1) {
      goto LABEL_25;
    }
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::WebExtensionMenuItem::addSubmenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItem *a2)
{
  if (this)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    char v4 = (atomic_uint *)*((void *)this + 1);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    char v4 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)a2 + 17);
  *((void *)a2 + 17) = v4;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  uint64_t v6 = *((unsigned int *)this + 39);
  if (v6 == *((_DWORD *)this + 38))
  {
    return (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMenuItem&>((uint64_t)this + 144, a2);
  }
  else
  {
    uint64_t v7 = *((void *)this + 18);
    ++*(_DWORD *)a2;
    *(void *)(v7 + 8 * v6) = a2;
    *((_DWORD *)this + 39) = v6 + 1;
  }
  return result;
}

unsigned int *WebKit::WebExtensionMenuItem::removeSubmenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItem *a2, const WTF::StringImpl *a3)
{
  uint64_t result = (unsigned int *)*((void *)a2 + 17);
  *((void *)a2 + 17) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 18);
  uint64_t v7 = *((unsigned int *)this + 39);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    int v9 = 0;
    uint64_t v10 = *((void *)this + 18);
    uint64_t v11 = &v6[v7];
    uint64_t v12 = v11;
    do
    {
      uint64_t result = (unsigned int *)WebKit::WebExtensionMenuItem::operator==((uint64_t)a2, *v6, a3);
      if (result)
      {
        unint64_t v14 = v6;
        if (v12 != (uint64_t *)(*((void *)this + 18) + 8 * *((unsigned int *)this + 39)))
        {
          if (v6 == v11)
          {
            unint64_t v14 = v12;
          }
          else
          {
            memmove(v12, v11, v10 - (void)v11);
            unint64_t v14 = (uint64_t *)((char *)v12 + v10 - (void)v11);
          }
        }
        uint64_t result = (unsigned int *)*v6;
        uint64_t *v6 = 0;
        uint64_t v11 = v6 + 1;
        if (result) {
          uint64_t result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, v13);
        }
        ++v9;
        uint64_t v12 = v14;
      }
      ++v6;
      v10 += 8;
    }
    while (v6 < v8);
    uint64_t v6 = (uint64_t *)*((void *)this + 18);
    uint64_t v15 = *((unsigned int *)this + 39);
    LODWORD(v7) = *((_DWORD *)this + 39);
    uint64_t v8 = v12;
  }
  else
  {
    uint64_t v15 = 0;
    int v9 = 0;
    uint64_t v11 = &v6[v7];
  }
  uint64_t v16 = &v6[v15];
  if (v11 != v16)
  {
    uint64_t result = (unsigned int *)memmove(v8, v11, (char *)v16 - (char *)v11);
    LODWORD(v7) = *((_DWORD *)this + 39);
  }
  *((_DWORD *)this + 39) = v7 - v9;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMenuItem&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  ++*a2;
  *(void *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionMenuItem::WebExtensionMenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionContext *a2, const WebKit::WebExtensionMenuItemParameters *a3)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  unint64_t v6 = (atomic_uint **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v11 = *v6;
  if (*v6) {
    atomic_fetch_add(v11, 1u);
  }
  *((void *)this + 2) = v11;
  if (*((unsigned char *)a3 + 25)) {
    char v12 = *((unsigned char *)a3 + 24);
  }
  else {
    char v12 = 0;
  }
  *((unsigned char *)this + 24) = v12;
  int v13 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v13 += 2;
  }
  *((void *)this + 4) = v13;
  WebKit::WebExtensionMenuItem::removeAmpersands((WTF::StringImpl **)a3 + 4, v7, (WTF::StringImpl **)this + 5, v8, v9, v10);
  uint64_t v14 = WebKit::WebExtensionContext::command(a2, (const WTF::StringImpl **)a3 + 5);
  uint64_t v16 = v14;
  if (v14) {
    CFRetain(*(CFTypeRef *)(v14 + 8));
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = *MEMORY[0x1E4F1DB30];
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  uint64_t v17 = (const void **)((char *)this + 88);
  if (*((unsigned char *)a3 + 57)) {
    BOOL v18 = *((unsigned char *)a3 + 56) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  char v19 = !v18;
  char v20 = *((unsigned char *)this + 104) & 0xFE | v19;
  *((unsigned char *)this + 104) = v20;
  if (*((unsigned char *)a3 + 58)) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = *((unsigned char *)a3 + 59) == 0;
  }
  if (v21) {
    char v22 = 2;
  }
  else {
    char v22 = 0;
  }
  char v23 = v22 | v20 & 0xFD;
  *((unsigned char *)this + 104) = v23;
  int v24 = *((unsigned __int8 *)a3 + 61);
  int v25 = *((unsigned __int8 *)a3 + 60);
  *((void *)this + 18) = 0;
  *((void *)this + 6) = v16;
  if (v25) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = v24 == 0;
  }
  if (v26) {
    char v27 = 4;
  }
  else {
    char v27 = 0;
  }
  *((unsigned char *)this + 104) = v27 | v23 & 0xFB;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 17) = 0;
  unint64_t v28 = (char *)this + 136;
  *((_WORD *)this + 64) = 0;
  *((void *)this + 19) = 0;
  if (*((unsigned char *)a3 + 16))
  {
    unsigned int v29 = (WTF::StringImpl **)((char *)a3 + 8);
    uint64_t v30 = *((void *)this + 2);
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 8);
      if (v31) {
        uint64_t v30 = v31 - 16;
      }
      else {
        uint64_t v30 = 0;
      }
    }
    if (*v29)
    {
      if (*((_DWORD *)*v29 + 1))
      {
        uint64_t v32 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v30 + 696), v29, v15);
        long long v33 = v32;
        if (v32)
        {
          ++*(_DWORD *)v32;
          WebKit::WebExtensionMenuItem::addSubmenuItem(v32, this);
          WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v33, v34);
        }
      }
    }
  }
  if (!*((unsigned char *)a3 + 114) || (__int16 v35 = *((_WORD *)a3 + 56)) == 0)
  {
    if (*(void *)v28 && (uint64_t v36 = *(void *)(*(void *)v28 + 8)) != 0) {
      __int16 v35 = *(_WORD *)(v36 + 128);
    }
    else {
      __int16 v35 = 64;
    }
  }
  *((_WORD *)this + 64) = v35;
  uint64_t v37 = *((void *)a3 + 6);
  if (v37 && *(_DWORD *)(v37 + 4))
  {
    __int16 v38 = (void *)WTF::StringImpl::operator NSString *();
    uint64_t v39 = WebKit::parseJSON(v38, 1, 0);
    objc_opt_class();
    uint64_t v40 = WTF::dynamic_objc_cast<NSDictionary>(v39);
    WTF::RetainPtr<NSDictionary>::RetainPtr(v54, v40);
    uint64_t v41 = *v17;
    *uint64_t v17 = (const void *)v54[0];
    v54[0] = 0;
    if (v41) {
      CFRelease(v41);
    }

    objc_opt_class();
    uint64_t v42 = WTF::dynamic_objc_cast<NSArray>(v39);
    WTF::RetainPtr<NSArray>::operator=((const void **)this + 12, v42);

    WebKit::WebExtensionMenuItem::clearIconCache(this);
  }
  if (*((unsigned char *)a3 + 80))
  {
    uint64_t v43 = *((unsigned int *)a3 + 19);
    if (v43)
    {
      int8x16x2_t v44 = (WTF::StringImpl **)*((void *)a3 + 8);
      uint64_t v45 = 8 * v43;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate(v44, v15, &v56);
        if (v56)
        {
          uint64_t v55 = v56;
          uint64_t v56 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 14, &v55, (uint64_t)v54);
          uint64_t v46 = v55;
          uint64_t v55 = 0;
          if (v46) {
            CFRelease(*(CFTypeRef *)(v46 + 8));
          }
          uint64_t v47 = v56;
          uint64_t v56 = 0;
          if (v47) {
            CFRelease(*(CFTypeRef *)(v47 + 8));
          }
        }
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
  }
  if (*((unsigned char *)a3 + 104))
  {
    uint64_t v48 = *((unsigned int *)a3 + 25);
    if (v48)
    {
      unsigned int v49 = (WTF::StringImpl **)*((void *)a3 + 11);
      uint64_t v50 = 8 * v48;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate(v49, v15, &v56);
        if (v56)
        {
          uint64_t v55 = v56;
          uint64_t v56 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 15, &v55, (uint64_t)v54);
          uint64_t v51 = v55;
          uint64_t v55 = 0;
          if (v51) {
            CFRelease(*(CFTypeRef *)(v51 + 8));
          }
          uint64_t v52 = v56;
          uint64_t v56 = 0;
          if (v52) {
            CFRelease(*(CFTypeRef *)(v52 + 8));
          }
        }
        ++v49;
        v50 -= 8;
      }
      while (v50);
    }
  }
  return this;
}

void sub_199364E84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9, WTF::StringImpl **a10, unsigned int **a11)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
  char v20 = *v13;
  _DWORD *v13 = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  if (*v16) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v16, v19);
  }
  if (*v15) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v15, v19);
  }
  BOOL v21 = *v14;
  uint64_t *v14 = 0;
  if (v21) {
    CFRelease(v21);
  }
  char v22 = *v11;
  *uint64_t v11 = 0;
  if (v22) {
    CFRelease(v22);
  }
  char v23 = (const void *)v12[8];
  v12[8] = 0;
  if (v23) {
    CFRelease(v23);
  }
  int v24 = *a9;
  *a9 = 0;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = v12[6];
  v12[6] = 0;
  if (v25) {
    CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  BOOL v26 = *a10;
  *a10 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v19);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  char v27 = (WTF::StringImpl *)v12[4];
  v12[4] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v19);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  unint64_t v28 = (unsigned int *)v12[2];
  v12[2] = 0;
  if (v28)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v19);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a11, v19);
  _Unwind_Resume(a1);
}

__n128 WebKit::WebExtensionMenuItem::clearIconCache(WebKit::WebExtensionMenuItem *this)
{
  int v2 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  *(_OWORD *)((char *)this + 72) = *MEMORY[0x1E4F1DB30];
  return result;
}

uint64_t WebKit::WebExtensionMenuItem::minimalParameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD **)(this + 32);
  if (v2) {
    *v2 += 2;
  }
  *(void *)a2 = v2;
  uint64_t v3 = *(void *)(this + 136);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    unint64_t v5 = *(_DWORD **)(v4 + 32);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(a2 + 8) = v5;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  *(unsigned char *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(this + 24);
  *(unsigned char *)(a2 + 25) = 1;
  unint64_t v7 = (_DWORD *)*MEMORY[0x1E4F30978];
  if (*MEMORY[0x1E4F30978]) {
    *v7 += 6;
  }
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v7;
  char v8 = *(unsigned char *)(this + 104);
  *(unsigned char *)(a2 + 56) = v8 & 1;
  *(unsigned char *)(a2 + 57) = 1;
  *(unsigned char *)(a2 + 58) = (v8 & 2) != 0;
  *(unsigned char *)(a2 + 59) = 1;
  *(unsigned char *)(a2 + 60) = (v8 & 4) != 0;
  *(unsigned char *)(a2 + 61) = 1;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(_WORD *)(a2 + 112) = *(_WORD *)(this + 128);
  *(unsigned char *)(a2 + 114) = 1;
  return this;
}

void WebKit::WebExtensionMenuItem::update(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemParameters *a2, const WTF::StringImpl *a3, double a4, double a5, float a6)
{
  char v8 = a2;
  if (*((unsigned char *)a2 + 25)) {
    *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  }
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4)) {
    WTF::String::operator=((uint64_t *)this + 4, (WTF::StringImpl **)a2);
  }
  if (*((unsigned char *)v8 + 16))
  {
    a2 = (const WebKit::WebExtensionMenuItemParameters *)((char *)v8 + 8);
    uint64_t v10 = *((void *)this + 2);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11) {
        uint64_t v10 = v11 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    if (*(void *)a2)
    {
      if (*(_DWORD *)(*(void *)a2 + 4))
      {
        char v12 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v10 + 696), (WTF::StringImpl **)a2, a3);
        if (v12)
        {
          char v6 = v12;
          ++*(_DWORD *)v12;
          uint64_t v13 = *((void *)this + 17);
          if (v13)
          {
            uint64_t v14 = *(WebKit::WebExtensionMenuItem **)(v13 + 8);
            if (v14 == v6)
            {
LABEL_19:
              WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v6, a2);
              goto LABEL_23;
            }
            if (v14) {
              WebKit::WebExtensionMenuItem::removeSubmenuItem(v14, this, a3);
            }
          }
          WebKit::WebExtensionMenuItem::addSubmenuItem(v6, this);
          goto LABEL_19;
        }
      }
    }
    uint64_t v15 = *((void *)this + 17);
    if (v15)
    {
      uint64_t v16 = *(WebKit::WebExtensionMenuItem **)(v15 + 8);
      if (v16) {
        WebKit::WebExtensionMenuItem::removeSubmenuItem(v16, this, a3);
      }
    }
  }
LABEL_23:
  uint64_t v17 = *((void *)v8 + 4);
  if (v17)
  {
    if (*(_DWORD *)(v17 + 4))
    {
      WebKit::WebExtensionMenuItem::removeAmpersands((WTF::StringImpl **)v8 + 4, a2, v49, a4, a5, a6);
      char v19 = v49[0];
      v49[0] = 0;
      char v20 = (WTF::StringImpl *)*((void *)this + 5);
      *((void *)this + 5) = v19;
      if (v20)
      {
        int v21 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 != 2) {
          goto LABEL_29;
        }
        WTF::StringImpl::destroy(v20, v18);
        char v20 = v49[0];
        v49[0] = 0;
        if (!v20) {
          goto LABEL_30;
        }
        int v21 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v22);
        }
        else {
LABEL_29:
        }
          *(_DWORD *)char v20 = v21;
      }
    }
  }
LABEL_30:
  char v23 = (const WTF::StringImpl **)((char *)v8 + 40);
  if (*((void *)v8 + 5))
  {
    uint64_t v24 = *((void *)this + 2);
    if (v24)
    {
      uint64_t v25 = *(void *)(v24 + 8);
      if (v25) {
        BOOL v26 = (WebKit::WebExtensionContext *)(v25 - 16);
      }
      else {
        BOOL v26 = 0;
      }
    }
    else
    {
      BOOL v26 = 0;
    }
    uint64_t v27 = WebKit::WebExtensionContext::command(v26, v23);
    char v6 = (WebKit::WebExtensionMenuItem *)v27;
    if (v27) {
      CFRetain(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v28 = *((void *)this + 6);
    *((void *)this + 6) = v6;
    if (v28) {
      CFRelease(*(CFTypeRef *)(v28 + 8));
    }
  }
  if (*((void *)v8 + 6))
  {
    unsigned int v29 = (void *)WTF::StringImpl::operator NSString *();
    WebKit::parseJSON(v29, 1, 0);
    char v6 = (WebKit::WebExtensionMenuItem *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    uint64_t v30 = WTF::dynamic_objc_cast<NSDictionary>(v6);
    WTF::RetainPtr<NSDictionary>::RetainPtr(v49, v30);
    uint64_t v31 = (const void *)*((void *)this + 11);
    *((WTF::StringImpl **)this + 11) = v49[0];
    v49[0] = 0;
    if (v31) {
      CFRelease(v31);
    }

    objc_opt_class();
    WTF::dynamic_objc_cast<NSArray>(v6);
    unint64_t v7 = (char *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSArray>::operator=((const void **)this + 12, v7);

    WebKit::WebExtensionMenuItem::clearIconCache(this);
  }
  if (*((unsigned char *)v8 + 57)) {
    *((unsigned char *)this + 104) = *((unsigned char *)this + 104) & 0xFE | *((unsigned char *)v8 + 56);
  }
  if (*((unsigned char *)v8 + 59)) {
    *((unsigned char *)this + 104) = *((unsigned char *)this + 104) & 0xFD | (2 * *((unsigned char *)v8 + 58));
  }
  if (*((unsigned char *)v8 + 61)) {
    *((unsigned char *)this + 104) = *((unsigned char *)this + 104) & 0xFB | (4 * *((unsigned char *)v8 + 60));
  }
  if (*((unsigned char *)v8 + 114))
  {
    __int16 v32 = *((_WORD *)v8 + 56);
    if (!v32)
    {
      uint64_t v33 = *((void *)this + 17);
      if (v33 && (uint64_t v34 = *(void *)(v33 + 8)) != 0) {
        __int16 v32 = *(_WORD *)(v34 + 128);
      }
      else {
        __int16 v32 = 64;
      }
    }
    *((_WORD *)this + 64) = v32;
  }
  if (*((unsigned char *)v8 + 80))
  {
    char v6 = (WebKit::WebExtensionMenuItem *)((char *)this + 112);
    __int16 v35 = (uint64_t *)*((void *)this + 14);
    if (v35)
    {
      *(void *)char v6 = 0;
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v35, v23);
      if (!*((unsigned char *)v8 + 80)) {
        goto LABEL_81;
      }
    }
    uint64_t v36 = *((unsigned int *)v8 + 19);
    if (v36)
    {
      unint64_t v7 = (char *)*((void *)v8 + 8);
      uint64_t v37 = 8 * v36;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate((WTF::StringImpl **)v7, a3, &v51);
        if (v51)
        {
          uint64_t v50 = v51;
          uint64_t v51 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 14, &v50, (uint64_t)v49);
          uint64_t v38 = v50;
          uint64_t v50 = 0;
          if (v38) {
            CFRelease(*(CFTypeRef *)(v38 + 8));
          }
          uint64_t v39 = v51;
          uint64_t v51 = 0;
          if (v39) {
            CFRelease(*(CFTypeRef *)(v39 + 8));
          }
        }
        v7 += 8;
        v37 -= 8;
      }
      while (v37);
    }
  }
  if (!*((unsigned char *)v8 + 104)) {
    return;
  }
  uint64_t v42 = (uint64_t *)*((void *)this + 15);
  uint64_t v41 = (uint64_t *)((char *)this + 120);
  uint64_t v40 = v42;
  if (v42)
  {
    uint64_t *v41 = 0;
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v40, v23);
    if (!*((unsigned char *)v8 + 104))
    {
LABEL_81:
      uint64_t v48 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

      _Unwind_Resume(v48);
    }
  }
  uint64_t v43 = *((unsigned int *)v8 + 25);
  if (v43)
  {
    int8x16x2_t v44 = (WTF::StringImpl **)*((void *)v8 + 11);
    uint64_t v45 = 8 * v43;
    do
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v44, a3, &v51);
      if (v51)
      {
        uint64_t v50 = v51;
        uint64_t v51 = 0;
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v41, &v50, (uint64_t)v49);
        uint64_t v46 = v50;
        uint64_t v50 = 0;
        if (v46) {
          CFRelease(*(CFTypeRef *)(v46 + 8));
        }
        uint64_t v47 = v51;
        uint64_t v51 = 0;
        if (v47) {
          CFRelease(*(CFTypeRef *)(v47 + 8));
        }
      }
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
}

id WebKit::WebExtensionMenuItem::matchingPlatformMenuItems(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  char v6 = v5;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }

  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if (v7)
  {
    int v52 = 0;
    unint64_t v59 = 0;
    char v8 = *(WebKit::WebExtensionMenuItem ***)a1;
    unint64_t v57 = a3 - 1;
    uint64_t v51 = (WebCore *)((char *)a2 + 168);
    uint64_t v9 = 8 * v7;
    while (1)
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      uint64_t v10 = (WTF *)objc_claimAutoreleasedReturnValue();
      if (v57 >= v59)
      {
        if (WebKit::WebExtensionMenuItem::matches(*v8, (const WebKit::WebExtensionMenuItemContextParameters *)a2))break; {
      }
        }
      uint64_t v13 = 0;
LABEL_119:
      uint64_t v43 = v13;
      WTF::addUnlessNil(v10, v43, v44);

      ++v8;
      v9 -= 8;
      if (!v9) {
        goto LABEL_125;
      }
    }
    char v12 = *v8;
    if (*((unsigned char *)*v8 + 24) != 2)
    {
      int v52 = 0;
      goto LABEL_16;
    }
    if (v52)
    {
      if (*((unsigned char *)v12 + 104)) {
        goto LABEL_15;
      }
    }
    else if (*((unsigned char *)v12 + 104))
    {
LABEL_15:
      int v52 = 1;
LABEL_16:
      if (*(void *)v51)
      {
        WebCore::truncatedStringForMenuItem((uint64_t *)&v67, v51, v11);
      }
      else
      {
        char v19 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
        if (*MEMORY[0x1E4F30980]) {
          *(_DWORD *)v19 += 2;
        }
        uint64_t v67 = v19;
      }
      if (*((void *)v12 + 5))
      {
        WTF::StringImpl::replace();
        uint64_t v56 = (WTF::StringImpl *)v68;
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v55 = WebKit::WebExtensionMenuItem::matchingPlatformMenuItems((char *)v12 + 144, a2, 0);
      if (*((unsigned char *)v12 + 24) == 3)
      {
        uint64_t v13 = 0;
LABEL_110:

        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy(v56, v41);
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
        uint64_t v42 = v67;
        uint64_t v67 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v41);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
        ++v59;
        goto LABEL_119;
      }
      if (*((_DWORD *)v12 + 39) && (~*((unsigned __int8 *)v12 + 104) & 6) == 0)
      {
        uint64_t v16 = (void *)MEMORY[0x1E4F42B80];
        if (v56) {
          uint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v17 = &stru_1EEA10550;
        }
        BOOL v18 = WebKit::WebExtensionMenuItem::icon(v12, *(CGSize *)&v14);
        uint64_t v13 = [v16 menuWithTitle:v17 image:v18 identifier:0 options:0 children:v55];

        goto LABEL_110;
      }
      char v20 = (void *)MEMORY[0x1E4F426E8];
      if (v56) {
        unsigned int v49 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unsigned int v49 = &stru_1EEA10550;
      }
      uint64_t v50 = WebKit::WebExtensionMenuItem::icon(v12, *(CGSize *)&v14);
      ++*(_DWORD *)v12;
      long long v21 = a2[1];
      long long v68 = *a2;
      long long v69 = v21;
      char v70 = *((unsigned char *)a2 + 32);
      char v22 = (WTF::StringImpl *)*((void *)a2 + 5);
      if (v22) {
        *(_DWORD *)v22 += 2;
      }
      long long v23 = a2[4];
      long long v65 = a2[3];
      long long v66 = v23;
      uint64_t v24 = (WTF::StringImpl *)*((void *)a2 + 10);
      if (v24) {
        *(_DWORD *)v24 += 2;
      }
      int v53 = v24;
      __int16 v54 = v22;
      uint64_t v25 = (WTF::StringImpl *)*((void *)a2 + 11);
      if (v25) {
        *(_DWORD *)v25 += 2;
      }
      long long v26 = a2[7];
      long long v63 = a2[6];
      long long v64 = v26;
      uint64_t v27 = (WTF::StringImpl *)*((void *)a2 + 16);
      if (v27) {
        *(_DWORD *)v27 += 2;
      }
      long long v28 = *(long long *)((char *)a2 + 152);
      long long v61 = *(long long *)((char *)a2 + 136);
      long long v62 = v28;
      unsigned int v29 = *(WTF::StringImpl **)v51;
      if (*(void *)v51) {
        *(_DWORD *)v29 += 2;
      }
      char v30 = *((unsigned char *)a2 + 176);
      if (v22) {
        *(_DWORD *)v22 += 2;
      }
      if (v24) {
        *(_DWORD *)v24 += 2;
      }
      if (v25) {
        *(_DWORD *)v25 += 2;
      }
      if (v27) {
        *(_DWORD *)v27 += 2;
      }
      if (v29) {
        *(_DWORD *)v29 += 2;
      }
      uint64_t v31 = (char *)malloc_type_malloc(0xE8uLL, 0x10E0040BAFB81B7uLL);
      __int16 v32 = v31;
      *(void *)uint64_t v31 = MEMORY[0x1E4F14398];
      *((void *)v31 + 1) = 50331650;
      *((void *)v31 + 2) = WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void *,UIAction *)#1}::__invoke;
      *((void *)v31 + 3) = &WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::descriptor;
      *((void *)v31 + 4) = v12;
      *((void *)v31 + 5) = v12;
      long long v33 = v69;
      *((_OWORD *)v31 + 3) = v68;
      *((_OWORD *)v31 + 4) = v33;
      v31[80] = v70;
      if (v54) {
        *(_DWORD *)v54 += 2;
      }
      *((void *)v31 + 11) = v54;
      long long v34 = v66;
      *((_OWORD *)v31 + 6) = v65;
      *((_OWORD *)v31 + 7) = v34;
      if (v53) {
        *(_DWORD *)v53 += 2;
      }
      *((void *)v31 + 16) = v53;
      if (v25) {
        *(_DWORD *)v25 += 2;
      }
      *((void *)v31 + 17) = v25;
      long long v35 = v64;
      *((_OWORD *)v31 + 9) = v63;
      *((_OWORD *)v31 + 10) = v35;
      if (v27) {
        *(_DWORD *)v27 += 2;
      }
      *((void *)v31 + 22) = v27;
      long long v36 = v62;
      *(_OWORD *)(v31 + 184) = v61;
      *(_OWORD *)(v31 + 200) = v36;
      if (v29)
      {
        *(_DWORD *)v29 += 2;
        *((void *)v31 + 27) = v29;
        v31[224] = v30;
        aBlock = _Block_copy(v31);

        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v37);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      else
      {
        *((void *)v31 + 27) = 0;
        v31[224] = v30;
        aBlock = _Block_copy(v31);
      }
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, v37);
          if (!v25) {
            goto LABEL_73;
          }
LABEL_70:
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v37);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
LABEL_73:
          if (v53)
          {
            if (*(_DWORD *)v53 == 2) {
              WTF::StringImpl::destroy(v53, v37);
            }
            else {
              *(_DWORD *)v53 -= 2;
            }
          }
          if (v54)
          {
            if (*(_DWORD *)v54 == 2) {
              WTF::StringImpl::destroy(v54, v37);
            }
            else {
              *(_DWORD *)v54 -= 2;
            }
          }
          uint64_t v38 = _Block_copy(aBlock);
          uint64_t v13 = [v20 actionWithTitle:v49 image:v50 identifier:0 handler:v38];

          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
            {
              WTF::StringImpl::destroy(v29, v39);
              if (!v27) {
                goto LABEL_90;
              }
LABEL_87:
              if (*(_DWORD *)v27 == 2) {
                WTF::StringImpl::destroy(v27, v39);
              }
              else {
                *(_DWORD *)v27 -= 2;
              }
LABEL_90:
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                {
                  WTF::StringImpl::destroy(v25, v39);
                  if (!v53) {
                    goto LABEL_98;
                  }
LABEL_96:
                  if (*(_DWORD *)v53 == 2)
                  {
                    WTF::StringImpl::destroy(v53, v39);
                    if (!v54)
                    {
LABEL_104:

                      if (*((unsigned __int8 *)v12 + 24) - 1 <= 1) {
                        [v13 setState:*((unsigned char *)v12 + 104) & 1];
                      }
                      char v40 = *((unsigned char *)v12 + 104);
                      if ((v40 & 2) == 0)
                      {
                        objc_msgSend(v13, "setAttributes:", objc_msgSend(v13, "attributes") | 1);
                        char v40 = *((unsigned char *)v12 + 104);
                      }
                      if ((v40 & 4) == 0) {
                        objc_msgSend(v13, "setAttributes:", objc_msgSend(v13, "attributes") | 4);
                      }
                      goto LABEL_110;
                    }
LABEL_101:
                    if (*(_DWORD *)v54 == 2) {
                      WTF::StringImpl::destroy(v54, v39);
                    }
                    else {
                      *(_DWORD *)v54 -= 2;
                    }
                    goto LABEL_104;
                  }
                  *(_DWORD *)v53 -= 2;
LABEL_98:
                  if (!v54) {
                    goto LABEL_104;
                  }
                  goto LABEL_101;
                }
                *(_DWORD *)v25 -= 2;
              }
              if (!v53) {
                goto LABEL_98;
              }
              goto LABEL_96;
            }
            *(_DWORD *)v29 -= 2;
          }
          if (!v27) {
            goto LABEL_90;
          }
          goto LABEL_87;
        }
        *(_DWORD *)v27 -= 2;
      }
      if (!v25) {
        goto LABEL_73;
      }
      goto LABEL_70;
    }
    int v52 = 1;
    goto LABEL_16;
  }
LABEL_125:
  uint64_t v45 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v46 = cf;
  CFTypeRef cf = 0;
  if (v46) {
    CFRelease(v46);
  }

  return v45;
}

void sub_199365DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionMenuItem::icon(WebKit::WebExtensionMenuItem *this, CGSize a2)
{
  if (*((void *)this + 12) || *((void *)this + 11))
  {
    uint64_t v3 = WebKit::availableScreenScales(this);
    uint64_t v4 = WTF::RetainPtr<NSSet>::get((id *)this + 8);
    char v5 = [v3 isEqualToSet:v4];

    if ((v5 & 1) == 0) {
      WebKit::WebExtensionMenuItem::clearIconCache(this);
    }
    if (*((void *)this + 7))
    {
      if (*((double *)this + 9) == 20.0 && *((double *)this + 10) == 20.0)
      {
        uint64_t v13 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
LABEL_26:

        goto LABEL_27;
      }
    }
    if (*((void *)this + 12))
    {
      uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void *)(v8 + 64);
      uint64_t v10 = std::to_address[abi:sn180100]<char const>();
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v11 = &unk_1EEA00230;
      v11[1] = this;
      uint64_t v24 = v11;
      uint64_t v12 = WebKit::WebExtension::bestImageForIconVariants(v9, v10, (uint64_t)&v24, 20.0, 20.0);
    }
    else
    {
      if (!*((void *)this + 11)) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(*((void *)this + 2) + 8);
      if (v14) {
        uint64_t v15 = v14 - 16;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void *)(v15 + 64);
      uint64_t v10 = WTF::RetainPtr<NSSet>::get((id *)this + 11);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v17 = &unk_1EEA00258;
      v17[1] = this;
      uint64_t v24 = v17;
      uint64_t v12 = WebKit::WebExtension::bestImageInIconsDictionary(v16, v10, (uint64_t)&v24, 20.0, 20.0);
    }
    uint64_t v13 = (void *)v12;
    BOOL v18 = v24;
    uint64_t v24 = 0;
    if (v18) {
      (*(void (**)(void *))(*v18 + 8))(v18);
    }

    if (v13)
    {
      WTF::RetainPtr<UIImage>::operator=((const void **)this + 7, v13);
      __asm { FMOV            V0.2D, #20.0 }
      *(_OWORD *)((char *)this + 72) = _Q0;
      WTF::RetainPtr<NSSet>::operator=((const void **)this + 8, v3);
      goto LABEL_26;
    }
LABEL_25:
    WebKit::WebExtensionMenuItem::clearIconCache(this);
    uint64_t v13 = 0;
    goto LABEL_26;
  }
  uint64_t v13 = 0;
LABEL_27:

  return v13;
}

void sub_199366288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 48), a2);
  __n128 result = *(WebKit::WebExtensionMenuItem **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v3);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void *,UIAction *)#1}::__invoke(uint64_t a1)
{
  id v1 = *(WebKit::WebExtensionMenuItem **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::performMenuItem((uint64_t *)(v3 - 16), v1, (WebKit::WebExtensionMenuItemContextParameters *)(a1 + 48), 1);
      char v5 = *(const void **)(v3 - 8);
      CFRelease(v5);
    }
  }
}

void sub_1993663C4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionMenuItem::icon(CGSize)::$_0,void,NSError * {__strong}>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      char v6 = (const void **)(v5 - 16);
    }
    else {
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v7 = v3;
  WebKit::WebExtensionContext::recordError(v6, v3);
}

void sub_19936645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionMenuItem::icon(CGSize)::$_1,void,NSError * {__strong}>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      char v6 = (const void **)(v5 - 16);
    }
    else {
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v7 = v3;
  WebKit::WebExtensionContext::recordError(v6, v3);
}

void sub_1993664FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPI(unsigned __int8 *a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (a1[24])
  {
    int v1 = *a1;
    switch(v1)
    {
      case 1:
        uint64_t v14 = "An unknown error occurred.";
        uint64_t v15 = 27;
        std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
        if (v16)
        {
          uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          uint64_t v7 = v16;
          uint64_t v16 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v6);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        else
        {
          uint64_t v3 = &stru_1EEA10550;
        }
        uint64_t v10 = 1;
        break;
      case 2:
        uint64_t v14 = "Message port is not connected and cannot send messages.";
        uint64_t v15 = 56;
        std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
        if (v16)
        {
          uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          uint64_t v9 = v16;
          uint64_t v16 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
        else
        {
          uint64_t v3 = &stru_1EEA10550;
        }
        uint64_t v10 = 2;
        break;
      case 3:
        uint64_t v14 = "Message is not JSON-serializable.";
        uint64_t v15 = 34;
        std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
        if (v16)
        {
          uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          uint64_t v4 = v16;
          uint64_t v16 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2) {
              WTF::StringImpl::destroy(v4, v2);
            }
            else {
              *(_DWORD *)v4 -= 2;
            }
          }
        }
        else
        {
          uint64_t v3 = &stru_1EEA10550;
        }
        uint64_t v10 = 3;
        break;
      default:
        uint64_t v10 = 0;
        uint64_t v3 = 0;
        break;
    }
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v17 = *MEMORY[0x1E4F28228];
    v18[0] = v3;
    uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
    uint64_t v5 = [v11 errorWithDomain:@"WKWebExtensionMessagePortErrorDomain" code:v10 userInfo:v12];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_199366760(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toWebExtensionMessagePortError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = this;
  uint64_t v5 = v4;
  if (v4)
  {
    char v6 = [(WebKit *)v4 localizedDescription];
    char v7 = 1;
    MEMORY[0x19972EAD0](&v8, v6);
    char v9 = 1;
    *(unsigned char *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v8 = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_199366860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::WebExtensionMessagePort::WebExtensionMessagePort(WebKit *a1, uint64_t a2, _DWORD **a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9E3318;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v8 = *(atomic_uint **)(a2 + 24);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *((void *)a1 + 2) = v8;
  char v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  *((void *)a1 + 3) = v9;
  *((void *)a1 + 4) = a4;
  return a1;
}

uint64_t WebKit::WebExtensionMessagePort::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v5 = v6 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v7 = v8 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  if (v5 != v7) {
    return 0;
  }
  uint64_t result = WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), a3);
  if (result) {
    return *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return result;
}

uint64_t WebKit::WebExtensionMessagePort::remove(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      WebKit::WebExtensionContext::removeNativePort(v2 - 16, this);
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        uint64_t v6 = v5 ? v5 - 16 : 0;
      }
      else
      {
        uint64_t v6 = 0;
      }
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v6, 2, 0, *(void *)(v3 + 32));
      this = *(void *)(v3 + 16);
      *(void *)(v3 + 16) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v7);
        }
      }
    }
  }
  return this;
}

void WebKit::WebExtensionMessagePort::reportDisconnection(id *a1, uint64_t a2)
{
  WebKit::WebExtensionMessagePort::remove((uint64_t)a1);
  uint64_t v4 = WebKit::WebExtensionAction::wrapper(a1);
  uint64_t v5 = [v4 disconnectHandler];

  if (v5)
  {
    v10[0] = 0;
    char v13 = 0;
    if (*(unsigned char *)(a2 + 24))
    {
      v10[0] = *(unsigned char *)a2;
      LOBYTE(v11) = 0;
      char v12 = 0;
      if (*(unsigned char *)(a2 + 16))
      {
        uint64_t v6 = *(WTF::StringImpl **)(a2 + 8);
        if (v6) {
          *(_DWORD *)v6 += 2;
        }
        uint64_t v11 = v6;
        char v12 = 1;
      }
      char v13 = 1;
    }
    uint64_t v7 = WebKit::toAPI(v10);
    ((void (**)(void, void *))v5)[2](v5, v7);

    if (v13)
    {
      if (v12)
      {
        char v9 = v11;
        uint64_t v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v8);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
    }
  }
}

void sub_199366B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v16;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v19);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMessagePort::sendMessage(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7 || (uint64_t v8 = *(void *)(v7 + 8)) == 0)
  {
    v26[0] = 2;
    LOBYTE(v27) = 0;
    char v28 = 0;
    char v29 = 1;
    WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, v26);
    if (!v29) {
      goto LABEL_28;
    }
    if (!v28) {
      goto LABEL_28;
    }
    uint64_t v16 = v27;
    if (!v27) {
      goto LABEL_28;
    }
LABEL_25:
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
    goto LABEL_28;
  }
  if (!v5) {
    goto LABEL_7;
  }
  if ((WebKit::isValidJSONObject(v5, 1) & 1) == 0)
  {
    v22[0] = 3;
    LOBYTE(v23) = 0;
    char v24 = 0;
    char v25 = 1;
    WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, v22);
    if (!v25) {
      goto LABEL_28;
    }
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v16 = v23;
    if (!v23) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v9 + 8);
LABEL_7:
  if (v8) {
    uint64_t v10 = (uint64_t *)(v8 - 16);
  }
  else {
    uint64_t v10 = 0;
  }
LABEL_10:
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = WebKit::encodeJSONString(v6, 1, 0);
  MEMORY[0x19972EAD0](&v21, v12);
  WebKit::WebExtensionContext::portPostMessage(v10, 2, 0, 0, 0, v11, &v21);
  uint64_t v14 = v21;
  long long v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }

  v17[0] = 0;
  char v20 = 0;
  WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, v17);
  if (v20)
  {
    if (v19)
    {
      uint64_t v16 = v18;
      if (v18) {
        goto LABEL_25;
      }
    }
  }
LABEL_28:
}

void sub_199366D94(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,WTF::StringImpl *a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  if ((_BYTE)a22 && a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (a2[24])
  {
    char v3 = *a2;
    if (a2[16])
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      char v12 = 0;
      v9[0] = v3;
      uint64_t v10 = v4;
      char v11 = 1;
    }
    else
    {
      char v12 = 0;
      v9[0] = v3;
      LOBYTE(v10) = 0;
      char v11 = 0;
    }
    char v12 = 1;
  }
  else
  {
    v9[0] = 0;
    char v12 = 0;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v9);
  if (v12) {
    BOOL v6 = v11 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_199366F68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13) {
    BOOL v17 = a11 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMessagePort::receiveMessage(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  BOOL v6 = WebKit::WebExtensionAction::wrapper(a1);
  uint64_t v7 = [v6 messageHandler];

  if (v7)
  {
    v12[0] = 0;
    char v15 = 0;
    if (*(unsigned char *)(a3 + 24))
    {
      v12[0] = *(unsigned char *)a3;
      LOBYTE(v13) = 0;
      char v14 = 0;
      if (*(unsigned char *)(a3 + 16))
      {
        uint64_t v8 = *(WTF::StringImpl **)(a3 + 8);
        if (v8) {
          *(_DWORD *)v8 += 2;
        }
        char v13 = v8;
        char v14 = 1;
      }
      char v15 = 1;
    }
    uint64_t v9 = WebKit::toAPI(v12);
    ((void (**)(void, id, void *))v7)[2](v7, v5, v9);

    if (v15)
    {
      if (v14)
      {
        char v11 = v13;
        char v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
    }
  }
}

void sub_1993670EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  BOOL v18 = v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v20);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::WebExtensionTab(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  BOOL v6 = *(atomic_uint **)(a2 + 24);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = v6;
  objc_initWeak((id *)(a1 + 32), v5);
  int v7 = *(_DWORD *)(a1 + 50);
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 50) = v7 & 0xFFFFFFF0;
  char v8 = objc_opt_respondsToSelector();
  int v9 = 16;
  if ((v8 & 1) == 0) {
    int v9 = 0;
  }
  unint64_t v10 = *(_DWORD *)(a1 + 50) & 0xFFFFFFEF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFEF | v9;
  *(unsigned char *)(a1 + 54) = BYTE4(v10);
  char v11 = objc_opt_respondsToSelector();
  int v12 = 32;
  if ((v11 & 1) == 0) {
    int v12 = 0;
  }
  unint64_t v13 = *(_DWORD *)(a1 + 50) & 0xFFFFFFDF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFDF | v12;
  *(unsigned char *)(a1 + 54) = BYTE4(v13);
  char v14 = objc_opt_respondsToSelector();
  int v15 = 64;
  if ((v14 & 1) == 0) {
    int v15 = 0;
  }
  unint64_t v16 = *(_DWORD *)(a1 + 50) & 0xFFFFFFBF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFBF | v15;
  *(unsigned char *)(a1 + 54) = BYTE4(v16);
  char v17 = objc_opt_respondsToSelector();
  int v18 = 128;
  if ((v17 & 1) == 0) {
    int v18 = 0;
  }
  unint64_t v19 = *(_DWORD *)(a1 + 50) & 0xFFFFFF7F | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFF7F | v18;
  *(unsigned char *)(a1 + 54) = BYTE4(v19);
  char v20 = objc_opt_respondsToSelector();
  int v21 = 256;
  if ((v20 & 1) == 0) {
    int v21 = 0;
  }
  unint64_t v22 = *(_DWORD *)(a1 + 50) & 0xFFFFFEFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFEFF | v21;
  *(unsigned char *)(a1 + 54) = BYTE4(v22);
  char v23 = objc_opt_respondsToSelector();
  int v24 = 512;
  if ((v23 & 1) == 0) {
    int v24 = 0;
  }
  unint64_t v25 = *(_DWORD *)(a1 + 50) & 0xFFFFFDFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFDFF | v24;
  *(unsigned char *)(a1 + 54) = BYTE4(v25);
  char v26 = objc_opt_respondsToSelector();
  int v27 = 1024;
  if ((v26 & 1) == 0) {
    int v27 = 0;
  }
  unint64_t v28 = *(_DWORD *)(a1 + 50) & 0xFFFFFBFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFBFF | v27;
  *(unsigned char *)(a1 + 54) = BYTE4(v28);
  char v29 = objc_opt_respondsToSelector();
  int v30 = 2048;
  if ((v29 & 1) == 0) {
    int v30 = 0;
  }
  unint64_t v31 = *(_DWORD *)(a1 + 50) & 0xFFFFF7FF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFF7FF | v30;
  *(unsigned char *)(a1 + 54) = BYTE4(v31);
  char v32 = objc_opt_respondsToSelector();
  int v33 = 4096;
  if ((v32 & 1) == 0) {
    int v33 = 0;
  }
  unint64_t v34 = *(_DWORD *)(a1 + 50) & 0xFFFFEFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFEFFF | v33;
  *(unsigned char *)(a1 + 54) = BYTE4(v34);
  char v35 = objc_opt_respondsToSelector();
  int v36 = 0x2000;
  if ((v35 & 1) == 0) {
    int v36 = 0;
  }
  unint64_t v37 = *(_DWORD *)(a1 + 50) & 0xFFFFDFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFDFFF | v36;
  *(unsigned char *)(a1 + 54) = BYTE4(v37);
  char v38 = objc_opt_respondsToSelector();
  int v39 = 0x4000;
  if ((v38 & 1) == 0) {
    int v39 = 0;
  }
  unint64_t v40 = *(_DWORD *)(a1 + 50) & 0xFFFFBFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFBFFF | v39;
  *(unsigned char *)(a1 + 54) = BYTE4(v40);
  char v41 = objc_opt_respondsToSelector();
  int v42 = 0x8000;
  if ((v41 & 1) == 0) {
    int v42 = 0;
  }
  unint64_t v43 = *(_DWORD *)(a1 + 50) & 0xFFFF7FFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFF7FFF | v42;
  *(unsigned char *)(a1 + 54) = BYTE4(v43);
  char v44 = objc_opt_respondsToSelector();
  int v45 = 0x10000;
  if ((v44 & 1) == 0) {
    int v45 = 0;
  }
  unint64_t v46 = *(_DWORD *)(a1 + 50) & 0xFFFEFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFEFFFF | v45;
  *(unsigned char *)(a1 + 54) = BYTE4(v46);
  char v47 = objc_opt_respondsToSelector();
  int v48 = 0x20000;
  if ((v47 & 1) == 0) {
    int v48 = 0;
  }
  unint64_t v49 = *(_DWORD *)(a1 + 50) & 0xFFFDFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFDFFFF | v48;
  *(unsigned char *)(a1 + 54) = BYTE4(v49);
  char v50 = objc_opt_respondsToSelector();
  int v51 = 0x40000;
  if ((v50 & 1) == 0) {
    int v51 = 0;
  }
  unint64_t v52 = *(_DWORD *)(a1 + 50) & 0xFFFBFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFBFFFF | v51;
  *(unsigned char *)(a1 + 54) = BYTE4(v52);
  char v53 = objc_opt_respondsToSelector();
  int v54 = 0x80000;
  if ((v53 & 1) == 0) {
    int v54 = 0;
  }
  unint64_t v55 = *(_DWORD *)(a1 + 50) & 0xFFF7FFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFF7FFFF | v54;
  *(unsigned char *)(a1 + 54) = BYTE4(v55);
  char v56 = objc_opt_respondsToSelector();
  int v57 = 0x100000;
  if ((v56 & 1) == 0) {
    int v57 = 0;
  }
  unint64_t v58 = *(_DWORD *)(a1 + 50) & 0xFFEFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFEFFFFF | v57;
  *(unsigned char *)(a1 + 54) = BYTE4(v58);
  char v59 = objc_opt_respondsToSelector();
  int v60 = 0x200000;
  if ((v59 & 1) == 0) {
    int v60 = 0;
  }
  unint64_t v61 = *(_DWORD *)(a1 + 50) & 0xFFDFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFDFFFFF | v60;
  *(unsigned char *)(a1 + 54) = BYTE4(v61);
  char v62 = objc_opt_respondsToSelector();
  int v63 = 0x400000;
  if ((v62 & 1) == 0) {
    int v63 = 0;
  }
  unint64_t v64 = *(_DWORD *)(a1 + 50) & 0xFFBFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFBFFFFF | v63;
  *(unsigned char *)(a1 + 54) = BYTE4(v64);
  char v65 = objc_opt_respondsToSelector();
  int v66 = 0x800000;
  if ((v65 & 1) == 0) {
    int v66 = 0;
  }
  unint64_t v67 = *(_DWORD *)(a1 + 50) & 0xFF7FFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFF7FFFFF | v66;
  *(unsigned char *)(a1 + 54) = BYTE4(v67);
  char v68 = objc_opt_respondsToSelector();
  int v69 = 0x1000000;
  if ((v68 & 1) == 0) {
    int v69 = 0;
  }
  unint64_t v70 = *(_DWORD *)(a1 + 50) & 0xFEFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFEFFFFFF | v69;
  *(unsigned char *)(a1 + 54) = BYTE4(v70);
  char v71 = objc_opt_respondsToSelector();
  int v72 = 0x2000000;
  if ((v71 & 1) == 0) {
    int v72 = 0;
  }
  unint64_t v73 = *(_DWORD *)(a1 + 50) & 0xFDFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFDFFFFFF | v72;
  *(unsigned char *)(a1 + 54) = BYTE4(v73);
  char v74 = objc_opt_respondsToSelector();
  int v75 = 0x4000000;
  if ((v74 & 1) == 0) {
    int v75 = 0;
  }
  unint64_t v76 = *(_DWORD *)(a1 + 50) & 0xFBFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFBFFFFFF | v75;
  *(unsigned char *)(a1 + 54) = BYTE4(v76);
  char v77 = objc_opt_respondsToSelector();
  int v78 = 0x8000000;
  if ((v77 & 1) == 0) {
    int v78 = 0;
  }
  unint64_t v79 = *(_DWORD *)(a1 + 50) & 0xF7FFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xF7FFFFFF | v78;
  *(unsigned char *)(a1 + 54) = BYTE4(v79);
  char v80 = objc_opt_respondsToSelector();
  int v81 = 0x10000000;
  if ((v80 & 1) == 0) {
    int v81 = 0;
  }
  unint64_t v82 = *(_DWORD *)(a1 + 50) & 0xEFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xEFFFFFFF | v81;
  *(unsigned char *)(a1 + 54) = BYTE4(v82);
  char v83 = objc_opt_respondsToSelector();
  int v84 = 0x20000000;
  if ((v83 & 1) == 0) {
    int v84 = 0;
  }
  unint64_t v85 = *(_DWORD *)(a1 + 50) & 0xDFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xDFFFFFFF | v84;
  *(unsigned char *)(a1 + 54) = BYTE4(v85);
  char v86 = objc_opt_respondsToSelector();
  int v87 = 0x40000000;
  if ((v86 & 1) == 0) {
    int v87 = 0;
  }
  unint64_t v88 = *(_DWORD *)(a1 + 50) & 0xBFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xBFFFFFFF | v87;
  *(unsigned char *)(a1 + 54) = BYTE4(v88);
  char v89 = objc_opt_respondsToSelector();
  unsigned int v90 = 0x80000000;
  if ((v89 & 1) == 0) {
    unsigned int v90 = 0;
  }
  unint64_t v91 = *(_DWORD *)(a1 + 50) & 0x7FFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0x7FFFFFFF | v90;
  *(unsigned char *)(a1 + 54) = BYTE4(v91);
  char v92 = objc_opt_respondsToSelector();
  uint64_t v93 = 0x100000000;
  if ((v92 & 1) == 0) {
    uint64_t v93 = 0;
  }
  unint64_t v94 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFEFFFFFFFFLL | v93;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(unsigned char *)(a1 + 54) = BYTE4(v94);
  char v95 = objc_opt_respondsToSelector();
  uint64_t v96 = 0x200000000;
  if ((v95 & 1) == 0) {
    uint64_t v96 = 0;
  }
  unint64_t v97 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFDFFFFFFFFLL | v96;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(unsigned char *)(a1 + 54) = BYTE4(v97);
  char v98 = objc_opt_respondsToSelector();
  uint64_t v99 = 0x400000000;
  if ((v98 & 1) == 0) {
    uint64_t v99 = 0;
  }
  unint64_t v100 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFBFFFFFFFFLL | v99;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(unsigned char *)(a1 + 54) = BYTE4(v100);
  char v101 = objc_opt_respondsToSelector();
  uint64_t v102 = 0x800000000;
  if ((v101 & 1) == 0) {
    uint64_t v102 = 0;
  }
  unint64_t v103 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v102;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(unsigned char *)(a1 + 54) = BYTE4(v103);
  WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a1);

  return a1;
}

void sub_199367A08(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);

  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionTab::isPrivate(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *(unsigned int *)((char *)this + 50);
  if ((v1 & 8) != 0) {
    return ((v1 | ((unint64_t)*((unsigned __int8 *)this + 54) << 32)) >> 2) & 1;
  }
  uint64_t v3 = *((void *)this + 3);
  if (!v3) {
    return 0;
  }
  if (!*(void *)(v3 + 8)) {
    return 0;
  }
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)) {
    return 0;
  }
  WebKit::WebExtensionTab::window(this, &v11);
  uint64_t v4 = v11;
  if (!v11) {
    return 0;
  }
  BOOL isPrivate = WebKit::WebExtensionWindow::isPrivate(v11);
  int v7 = *(_DWORD *)((char *)this + 50);
  BOOL v6 = (char *)this + 50;
  unint64_t v8 = v7 & 0xFFFFFFF3 | ((unint64_t)v6[4] << 32);
  int v9 = 8;
  if (isPrivate) {
    int v9 = 12;
  }
  *(_DWORD *)BOOL v6 = v8 | v9;
  v6[4] = BYTE4(v8);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v4);
  return isPrivate;
}

void sub_199367B34(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v3 = v4 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v5 = v6 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v3 != v5) {
    return 0;
  }
  WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::get((id *)(a1 + 32), &v12);
  WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::get((id *)(a2 + 32), &cf);
  BOOL v7 = WTF::operator==<NSObject  {objcproto17WKWebExtensionTab},NSObject  {objcproto17WKWebExtensionTab}>((id *)&v12, (id *)&cf);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

void sub_199367C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::operator==<NSObject  {objcproto17WKWebExtensionTab},NSObject  {objcproto17WKWebExtensionTab}>(id *a1, id *a2)
{
  uint64_t v3 = WTF::RetainPtr<NSSet>::get(a1);
  uint64_t v4 = WTF::RetainPtr<NSSet>::get(a2);
  BOOL v5 = v3 == v4;

  return v5;
}

void sub_199367C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::parameters@<X0>(WebKit::WebExtensionTab *this@<X0>, uint64_t a2@<X8>)
{
  BOOL HasPermission = WebKit::WebExtensionTab::extensionHasPermission(this);
  WebKit::WebExtensionTab::window(this, &v24);
  uint64_t v5 = WebKit::WebExtensionTab::index(this);
  WebKit::WebExtensionTab::parentTab(this, &v23);
  *(void *)a2 = *((void *)this + 2);
  *(unsigned char *)(a2 + 8) = 1;
  if (HasPermission) {
    WebKit::WebExtensionTab::url(this, (uint64_t)v22);
  }
  else {
    WTF::URL::URL((WTF::URL *)v22);
  }
  WTF::URL::URL(a2 + 16, (uint64_t *)v22);
  *(unsigned char *)(a2 + 56) = 1;
  if (HasPermission)
  {
    WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v21, (uint64_t)this);
    uint64_t v6 = v21;
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *(_DWORD *)v6 += 2;
    }
    int v21 = v6;
  }
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  *(void *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t v7 = v24;
  if (v24) {
    uint64_t v8 = *(void *)(v24 + 16);
  }
  else {
    uint64_t v8 = -2;
  }
  *(void *)(a2 + 80) = v8;
  *(unsigned char *)(a2 + 88) = 1;
  *(void *)(a2 + 96) = v5;
  *(unsigned char *)(a2 + 104) = 1;
  *(double *)(a2 + 112) = WebKit::WebExtensionTab::size(this);
  *(void *)(a2 + 120) = v9;
  *(unsigned char *)(a2 + 128) = 1;
  uint64_t v10 = v23;
  if (v23)
  {
    *(void *)(a2 + 136) = *(void *)(v23 + 16);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    *(unsigned char *)(a2 + 136) = 0;
  }
  *(unsigned char *)(a2 + 144) = v11;
  *(unsigned char *)(a2 + 152) = WebKit::WebExtensionTab::isActive(this);
  *(unsigned char *)(a2 + 153) = 1;
  int v12 = *(_DWORD *)((char *)this + 50);
  if (v12 < 0)
  {
    *(unsigned char *)(a2 + 154) = WebKit::WebExtensionTab::isSelected(this);
    *(unsigned char *)(a2 + 155) = 1;
    int v12 = *(_DWORD *)((char *)this + 50);
    if ((v12 & 0x400) == 0)
    {
LABEL_19:
      *(_WORD *)(a2 + 156) = 0;
      if ((v12 & 0x8000) == 0) {
        goto LABEL_20;
      }
LABEL_24:
      *(unsigned char *)(a2 + 158) = WebKit::WebExtensionTab::isPlayingAudio(this);
      *(unsigned char *)(a2 + 159) = 1;
      if ((*(_DWORD *)((unsigned char *)this + 50) & 0x10000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else
  {
    *(_WORD *)(a2 + 154) = 0;
    if ((v12 & 0x400) == 0) {
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a2 + 156) = WebKit::WebExtensionTab::isPinned(this);
  *(unsigned char *)(a2 + 157) = 1;
  int v12 = *(_DWORD *)((char *)this + 50);
  if ((v12 & 0x8000) != 0) {
    goto LABEL_24;
  }
LABEL_20:
  *(_WORD *)(a2 + 158) = 0;
  if ((v12 & 0x10000) == 0)
  {
LABEL_21:
    char isMuted = 0;
    char v14 = 0;
    goto LABEL_26;
  }
LABEL_25:
  char isMuted = WebKit::WebExtensionTab::isMuted(this);
  char v14 = 1;
LABEL_26:
  *(unsigned char *)(a2 + 160) = isMuted;
  *(unsigned char *)(a2 + 161) = v14;
  *(unsigned char *)(a2 + 162) = WebKit::WebExtensionTab::isLoadingComplete(this) ^ 1;
  *(unsigned char *)(a2 + 163) = 1;
  *(unsigned char *)(a2 + 164) = WebKit::WebExtensionTab::isPrivate(this);
  *(unsigned char *)(a2 + 165) = 1;
  __int16 v16 = *(_DWORD *)((char *)this + 50);
  if ((*(_DWORD *)((unsigned char *)this + 50) & 0x1000) != 0)
  {
    *(unsigned char *)(a2 + 166) = WebKit::WebExtensionTab::isReaderModeAvailable(this);
    *(unsigned char *)(a2 + 167) = 1;
    if ((*(_DWORD *)((unsigned char *)this + 50) & 0x2000) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *(_WORD *)(a2 + 166) = 0;
    if ((v16 & 0x2000) == 0)
    {
LABEL_28:
      char isReaderModeActive = 0;
      char v18 = 0;
      goto LABEL_31;
    }
  }
  char isReaderModeActive = WebKit::WebExtensionTab::isReaderModeActive(this);
  char v18 = 1;
LABEL_31:
  *(unsigned char *)(a2 + 168) = isReaderModeActive;
  *(unsigned char *)(a2 + 169) = v18;
  unint64_t v19 = v21;
  int v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v15);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v22[0];
  v22[0] = 0;
  if (!result)
  {
LABEL_38:
    if (!v10) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_38;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
  if (v10) {
LABEL_39:
  }
    uint64_t result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref(v10);
LABEL_40:
  if (v7) {
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v7);
  }
  return result;
}

void sub_199367FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 + 64);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v19);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v17, v19);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v20);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a15);
  }
  if (a16) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a16);
  }
  _Unwind_Resume(a1);
}

void sub_199368070()
{
}

BOOL WebKit::WebExtensionTab::extensionHasPermission(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      int v3 = v2 - 16;
    }
    else {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
  }
  WebKit::WebExtensionTab::url(this, (uint64_t)&v8);
  int v5 = WebKit::WebExtensionContext::permissionState(v3, &v8);
  m_ptr = v8.m_string.m_impl.m_ptr;
  v8.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v4);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  return (v5 & 0xFFFFFFFE) == 2;
}

void sub_199368118(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionTab::window(WebKit::WebExtensionTab *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3
    && *(void *)(v3 + 8)
    && (int v5 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4))
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x10) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v5);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    char v11 = [WeakRetained windowForWebExtensionContext:v10];

    if (v11)
    {
      uint64_t v12 = *((void *)this + 3);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13) {
          uint64_t v14 = v13 - 16;
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      WebKit::WebExtensionContext::getOrCreateWindow(v14, v11, (uint64_t)&v15);
      *a2 = v15;
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_199368254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::index(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return -1;
  }
  if (!*(void *)(v1 + 8)) {
    return -1;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)) {
    return -1;
  }
  if ((*(_DWORD *)((unsigned char *)this + 50) & 0x20) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v3);
    uint64_t v9 = *((void *)this + 3);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10) {
        char v11 = (id *)(v10 - 16);
      }
      else {
        char v11 = 0;
      }
    }
    else
    {
      char v11 = 0;
    }
    uint64_t v12 = WebKit::WebExtensionAction::wrapper(v11);
    uint64_t v13 = [WeakRetained indexInWindowForWebExtensionContext:v12];

    if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
      return -1;
    }
    else {
      return v13;
    }
  }
  WebKit::WebExtensionTab::window(this, &v16);
  uint64_t v4 = v16;
  if (!v16) {
    return -1;
  }
  WebKit::WebExtensionWindow::tabs(v16, 0, &v14);
  if (v15)
  {
    uint64_t v6 = 0;
    while ((WebKit::WebExtensionTab::operator==((uint64_t)this, *(void *)(v14 + 8 * v6)) & 1) == 0)
    {
      if (++v6 >= (unint64_t)v15) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v6 = -1;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v5);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return v6;
}

void sub_1993683B0(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::parentTab(WebKit::WebExtensionTab *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3
    && *(void *)(v3 + 8)
    && (int v5 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4))
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x40) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v5);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    char v11 = [WeakRetained parentTabForWebExtensionContext:v10];

    if (v11)
    {
      uint64_t v12 = *((void *)this + 3);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13) {
          uint64_t v14 = (uint64_t *)(v13 - 16);
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      WebKit::WebExtensionContext::getOrCreateTab(v14, v11, (uint64_t)&v15);
      *a2 = v15;
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1993684F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::url(WebKit::WebExtensionTab *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4
    && *(void *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x200000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    id v11 = [WeakRetained urlForWebExtensionContext:v10];

    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by urlForWebExtensionContext: is not a URL"];
      }
    }
    MEMORY[0x19972E8A0](a2, v11);
  }
  else
  {
    WebKit::WebExtensionTab::webView(this);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    int v5 = [v11 URL];
    MEMORY[0x19972E8A0](a2, v5);
  }
}

void sub_199368670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::title(WebKit::WebExtensionTab *this, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4
    && *(void *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a2 + 32))
    && (*(_DWORD *)(a2 + 50) & 0x200) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a2 + 32));
    uint64_t v7 = *(void *)(a2 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    id v11 = [WeakRetained titleForWebExtensionContext:v10];

    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by tabTitleForWebExtensionContext: is not a string"];
      }
    }
    MEMORY[0x19972EAD0](this, v11);
  }
  else
  {
    WebKit::WebExtensionTab::webView((WebKit::WebExtensionTab *)a2);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    int v5 = [v11 title];
    MEMORY[0x19972EAD0](this, v5);
  }
}

void sub_1993687FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double WebKit::WebExtensionTab::size(WebKit::WebExtensionTab *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2
    && *(void *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x40000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    [WeakRetained sizeForWebExtensionContext:v10];
    double v5 = v11;
  }
  else
  {
    id WeakRetained = WebKit::WebExtensionTab::webView(this);
    [WeakRetained frame];
    double v5 = v4;
  }

  return v5;
}

void sub_19936890C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isActive(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)) {
    return 0;
  }
  WebKit::WebExtensionTab::window(this, &v8);
  uint64_t v3 = v8;
  if (!v8) {
    return 0;
  }
  WebKit::WebExtensionWindow::activeTab(v8, 0, (uint64_t *)&v7);
  uint64_t v4 = (uint64_t)v7;
  BOOL v5 = v7 == this;
  uint64_t v7 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  return v5;
}

void sub_1993689C4(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isSelected(WebKit::WebExtensionTab *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2
    && *(void *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x80000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v5 = *((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v7 = (id *)(v6 - 16);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = WebKit::WebExtensionAction::wrapper(v7);
    uint64_t v9 = [WeakRetained isSelectedForWebExtensionContext:v8];

    return v9;
  }
  else
  {
    return WebKit::WebExtensionTab::isActive(this);
  }
}

void sub_199368AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isPinned(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x400) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained isPinnedForWebExtensionContext:v10];

  return v4;
}

void sub_199368B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isPlayingAudio(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x8000) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained isPlayingAudioForWebExtensionContext:v10];

  return v4;
}

void sub_199368C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isMuted(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x10000) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained isMutedForWebExtensionContext:v10];

  return v4;
}

void sub_199368D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isLoadingComplete(WebKit::WebExtensionTab *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2
    && *(void *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x800000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v6 = *((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v8 = (id *)(v7 - 16);
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v9 = WebKit::WebExtensionAction::wrapper(v8);
    uint64_t v4 = [WeakRetained isLoadingCompleteForWebExtensionContext:v9];
  }
  else
  {
    id WeakRetained = WebKit::WebExtensionTab::webView(this);
    uint64_t v4 = [WeakRetained isLoading] ^ 1;
  }

  return v4;
}

void sub_199368DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isReaderModeAvailable(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x1000) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained isReaderModeAvailableForWebExtensionContext:v10];

  return v4;
}

void sub_199368ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isReaderModeActive(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x2000) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained isReaderModeActiveForWebExtensionContext:v10];

  return v4;
}

void sub_199368FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::changedParameters@<X0>(WebKit::WebExtensionTab *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v5 = a2;
  if (!a2) {
    __int16 v5 = *((_WORD *)this + 24);
  }
  BOOL HasPermission = WebKit::WebExtensionTab::extensionHasPermission(this);
  BOOL v8 = HasPermission;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  if ((v5 & 0x100) != 0)
  {
    if (HasPermission) {
      WebKit::WebExtensionTab::url(this, (uint64_t)v24);
    }
    else {
      WTF::URL::URL((WTF::URL *)v24);
    }
    WTF::URL::URL(a3 + 16, (uint64_t *)v24);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  *(unsigned char *)(a3 + 56) = v9;
  uint64_t v10 = (WTF::StringImpl **)(a3 + 64);
  if ((v5 & 0x80) != 0)
  {
    if (v8)
    {
      WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v23, (uint64_t)this);
      uint64_t v12 = v23;
    }
    else
    {
      uint64_t v12 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
      if (*MEMORY[0x1E4F30978]) {
        *(_DWORD *)v12 += 2;
      }
      uint64_t v23 = v12;
    }
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    void *v10 = v12;
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    *(unsigned char *)uint64_t v10 = 0;
  }
  *(unsigned char *)(a3 + 72) = v11;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  if ((v5 & 0x40) != 0)
  {
    *(double *)(a3 + 112) = WebKit::WebExtensionTab::size(this);
    *(void *)(a3 + 120) = v14;
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *(unsigned char *)(a3 + 112) = 0;
  }
  *(unsigned char *)(a3 + 128) = v13;
  *(unsigned char *)(a3 + 136) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 152) = 0;
  int v15 = *(_DWORD *)((char *)this + 50);
  if ((v15 & 0x400) != 0 && (v5 & 8) != 0)
  {
    *(unsigned char *)(a3 + 156) = WebKit::WebExtensionTab::isPinned(this);
    *(unsigned char *)(a3 + 157) = 1;
    int v15 = *(_DWORD *)((char *)this + 50);
    if ((v15 & 0x8000) == 0) {
      goto LABEL_29;
    }
  }
  else
  {
    *(_WORD *)(a3 + 156) = 0;
    if ((v15 & 0x8000) == 0) {
      goto LABEL_29;
    }
  }
  if ((v5 & 0x10) != 0)
  {
    *(unsigned char *)(a3 + 158) = WebKit::WebExtensionTab::isPlayingAudio(this);
    *(unsigned char *)(a3 + 159) = 1;
    int v15 = *(_DWORD *)((char *)this + 50);
    goto LABEL_30;
  }
LABEL_29:
  *(_WORD *)(a3 + 158) = 0;
LABEL_30:
  char isMuted = 0;
  if ((v15 & 0x10000) != 0)
  {
    char v17 = 0;
    if ((v5 & 4) != 0)
    {
      char isMuted = WebKit::WebExtensionTab::isMuted(this);
      char v17 = 1;
    }
  }
  else
  {
    char v17 = 0;
  }
  *(unsigned char *)(a3 + 160) = isMuted;
  *(unsigned char *)(a3 + 161) = v17;
  if ((v5 & 2) != 0)
  {
    char v18 = WebKit::WebExtensionTab::isLoadingComplete(this) ^ 1;
    char v19 = 1;
  }
  else
  {
    char v18 = 0;
    char v19 = 0;
  }
  *(unsigned char *)(a3 + 162) = v18;
  *(unsigned char *)(a3 + 163) = v19;
  *(_WORD *)(a3 + 164) = 0;
  LOWORD(v20) = *(_DWORD *)((char *)this + 50);
  if ((*(_DWORD *)((unsigned char *)this + 50) & 0x1000) != 0 && (v5 & 0x20) != 0)
  {
    *(unsigned char *)(a3 + 166) = WebKit::WebExtensionTab::isReaderModeAvailable(this);
    *(unsigned char *)(a3 + 167) = 1;
    int v20 = *(_DWORD *)((char *)this + 50);
  }
  else
  {
    *(_WORD *)(a3 + 166) = 0;
  }
  uint64_t result = 0;
  if ((v20 & 0x2000) != 0)
  {
    char v22 = 0;
    if ((v5 & 0x20) != 0)
    {
      uint64_t result = (WTF::StringImpl *)WebKit::WebExtensionTab::isReaderModeActive(this);
      char v22 = 1;
    }
  }
  else
  {
    char v22 = 0;
  }
  *(unsigned char *)(a3 + 168) = (_BYTE)result;
  *(unsigned char *)(a3 + 169) = v22;
  if ((v5 & 0x80) != 0)
  {
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if ((v5 & 0x100) == 0) {
          return result;
        }
        goto LABEL_50;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if ((v5 & 0x100) == 0) {
    return result;
  }
LABEL_50:
  uint64_t result = v24[0];
  v24[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199369288(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v10, a2);
  if ((v11 & 0x100) != 0 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::matches(WebKit::WebExtensionTab *a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  if (WebKit::WebExtensionTab::isPrivate(a1))
  {
    uint64_t v10 = *(void *)(*((void *)a1 + 3) + 8);
    uint64_t v11 = v10 ? v10 - 16 : 0;
    if (!*(unsigned char *)(v11 + 273)) {
      return 0;
    }
  }
  if ((a3 & 1) == 0 && (*(unsigned char *)(a2 + 48) || *(unsigned char *)(a2 + 57) || *(unsigned char *)(a2 + 61) || *(unsigned char *)(a2 + 59)))
  {
    WebKit::WebExtensionTab::window(a1, v39);
    uint64_t v12 = v39[0];
    if (!v39[0]) {
      return 0;
    }
    char v13 = WebKit::WebExtensionWindow::matches(v39[0], a2, a4, a5);
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v12);
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v14 = WebKit::WebExtensionTab::index(a1);
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v15 = 0;
    if (v14 == -1 || v14 != *(void *)(a2 + 64)) {
      return v15;
    }
  }
  int isActive = WebKit::WebExtensionTab::isActive(a1);
  int v17 = isActive;
  if (*(unsigned char *)(a2 + 81))
  {
    if (*(unsigned __int8 *)(a2 + 80) != isActive) {
      return 0;
    }
  }
  if (*(unsigned char *)(a2 + 83))
  {
    int isPlayingAudio = WebKit::WebExtensionTab::isPlayingAudio(a1);
    if (!*(unsigned char *)(a2 + 83)) {
      goto LABEL_60;
    }
    if (*(unsigned __int8 *)(a2 + 82) != isPlayingAudio) {
      return 0;
    }
  }
  if (*(unsigned char *)(a2 + 85) && v17 == (*(unsigned char *)(a2 + 84) != 0)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 87))
  {
    int isLoadingComplete = WebKit::WebExtensionTab::isLoadingComplete(a1);
    if (!*(unsigned char *)(a2 + 87)) {
      goto LABEL_60;
    }
    if (isLoadingComplete == (*(unsigned char *)(a2 + 86) != 0)) {
      return 0;
    }
  }
  if (*(unsigned char *)(a2 + 89))
  {
    int isMuted = WebKit::WebExtensionTab::isMuted(a1);
    if (!*(unsigned char *)(a2 + 89)) {
      goto LABEL_60;
    }
    if (*(unsigned __int8 *)(a2 + 88) != isMuted) {
      return 0;
    }
  }
  if (*(unsigned char *)(a2 + 91))
  {
    int isPinned = WebKit::WebExtensionTab::isPinned(a1);
    if (!*(unsigned char *)(a2 + 91)) {
      goto LABEL_60;
    }
    if (*(unsigned __int8 *)(a2 + 90) != isPinned) {
      return 0;
    }
  }
  if (!*(unsigned char *)(a2 + 93)) {
    goto LABEL_35;
  }
  int isSelected = WebKit::WebExtensionTab::isSelected(a1);
  if (!*(unsigned char *)(a2 + 93))
  {
LABEL_60:
    char v35 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    int v36 = v38;
    char v38 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v34);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    unint64_t v37 = v39[0];
    v39[0] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v34);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    _Unwind_Resume(v35);
  }
  if (*(unsigned __int8 *)(a2 + 92) != isSelected) {
    return 0;
  }
LABEL_35:
  WebKit::WebExtensionTab::url(a1, (uint64_t)v39);
  if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 32)))
  {
LABEL_54:
    uint64_t v15 = 1;
    goto LABEL_56;
  }
  if (WebKit::WebExtensionTab::extensionHasPermission(a1))
  {
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v24 = *(unsigned int *)(a2 + 12);
      if (!v24) {
        goto LABEL_55;
      }
      unint64_t v25 = *(WTF::StringImpl ***)a2;
      uint64_t v26 = 8 * v24;
      while (1)
      {
        WebKit::WebExtensionMatchPattern::create<WTF::String const&>(v25, (uint64_t *)&v38);
        if (v38)
        {
          char v27 = WebKit::WebExtensionMatchPattern::matchesURL(v38, (WTF::URL *)v39, 0);
          unint64_t v28 = v38;
          char v38 = 0;
          if (v28) {
            CFRelease(*((CFTypeRef *)v28 + 1));
          }
          if (v27) {
            break;
          }
        }
        ++v25;
        v26 -= 8;
        if (!v26) {
          goto LABEL_55;
        }
      }
    }
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_54;
    }
    WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v38, (uint64_t)a1);
    char v31 = WebCore::matchesWildcardPattern((WebCore *)(a2 + 24), (const WTF::String *)&v38, v30);
    char v32 = v38;
    char v38 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v23);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v31) {
      goto LABEL_54;
    }
  }
LABEL_55:
  uint64_t v15 = 0;
LABEL_56:
  int v33 = v39[0];
  v39[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v23);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  return v15;
}

uint64_t WebKit::WebExtensionTab::extensionHasTemporaryPermission(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v1 + 8));
  WebKit::WebExtensionTab::url(this, (uint64_t)v7);
  uint64_t v4 = WebKit::WebExtensionMatchPattern::matchesURL((unsigned char *)v1, (WTF::URL *)v7, 0);
  __int16 v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v1 + 8));
  return v4;
}

void sub_19936973C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setParentTab(uint64_t a1, uint64_t *a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (BOOL v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x80) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    uint64_t v13 = *a2;
    if (*a2) {
      id v14 = objc_loadWeakRetained((id *)(v13 + 32));
    }
    else {
      id v14 = 0;
    }
    uint64_t v15 = *(void *)(a1 + 24);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16) {
        int v17 = (id *)(v16 - 16);
      }
      else {
        int v17 = 0;
      }
    }
    else
    {
      int v17 = 0;
    }
    char v18 = WebKit::WebExtensionAction::wrapper(v17);
    ++*(_DWORD *)a1;
    uint64_t v19 = *a3;
    *a3 = 0;
    int v20 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *int v20 = MEMORY[0x1E4F14398];
    v20[1] = 50331650;
    void v20[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v20[4] = a1;
    v20[5] = v19;
    int v21 = _Block_copy(v20);

    char v22 = _Block_copy(v21);
    [WeakRetained setParentTab:v14 forWebExtensionContext:v18 completionHandler:v22];

    if (v13) {
  }
    }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_ItIsNotImpleme_1.isa, a4, &v24);
    char v9 = v24;
    uint64_t v24 = 0;
    unint64_t v25 = v9;
    char v26 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v26)
    {
      uint64_t v11 = v25;
      unint64_t v25 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v12 = v24;
    uint64_t v24 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void sub_1993699A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (v16) {
  _Unwind_Resume(a1);
  }
}

id WebKit::WebExtensionTab::webView(WebKit::WebExtensionTab *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 3);
  if (!v1
    || !*(void *)(v1 + 8)
    || (uint64_t v3 = (id *)((char *)this + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4))
    || (*(_DWORD *)((unsigned char *)this + 50) & 0x100) == 0)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      char v9 = (id *)(v8 - 16);
    }
    else {
      char v9 = 0;
    }
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained webViewForWebExtensionContext:v10];

  if (!v4) {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webViewForWebExtensionContext: is not a WKWebView"];
  }
  uint64_t v11 = [v4 configuration];
  uint64_t v12 = [v11 webExtensionController];

  uint64_t v13 = *(void *)(*((void *)this + 3) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(v14 + 72);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 8);
    if (v16) {
      int v17 = (id *)(v16 - 16);
    }
    else {
      int v17 = 0;
    }
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v18 = WebKit::WebExtensionAction::wrapper(v17);
  uint64_t v19 = (void *)v18;
  if (!v12 || v12 != (void *)v18)
  {
    if (v12)
    {
      if (v12 == (void *)v18) {
        goto LABEL_30;
      }
      uint64_t v25 = qword_1EB357DF8;
      if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      int v26 = 134218498;
      char v27 = v4;
      __int16 v28 = 2114;
      char v29 = v12;
      __int16 v30 = 2114;
      char v31 = v19;
      char v22 = "web view %p returned by webViewForWebExtensionContext: is not configured with the same WKWebExtensionControl"
            "ler as extension context; %{public}@ != %{public}@";
      uint64_t v23 = v25;
      uint32_t v24 = 32;
    }
    else
    {
      uint64_t v21 = qword_1EB357DF8;
      if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
LABEL_30:
        int v20 = v4;
        uint64_t v4 = 0;
        goto LABEL_31;
      }
      int v26 = 134217984;
      char v27 = v4;
      char v22 = "web view %p returned by webViewForWebExtensionContext: is not configured with a WKWebExtensionController";
      uint64_t v23 = v21;
      uint32_t v24 = 12;
    }
    _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v26, v24);
    goto LABEL_30;
  }
  int v20 = 0;
LABEL_31:

LABEL_6:

  return v4;
}

void sub_199369CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isOpen(WebKit::WebExtensionTab *this)
{
  return (*(_DWORD *)((unsigned char *)this + 50) & 2) != 0
      && (uint64_t v1 = *((void *)this + 3)) != 0
      && *(void *)(v1 + 8)
      && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4);
}

void WebKit::WebExtensionTab::setPinned(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x800) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14) {
        uint64_t v15 = (id *)(v14 - 16);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = WebKit::WebExtensionAction::wrapper(v15);
    ++*(_DWORD *)a1;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    void v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    uint64_t v19 = _Block_copy(v18);

    int v20 = _Block_copy(v19);
    [WeakRetained setPinned:a2 forWebExtensionContext:v16 completionHandler:v20];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_ItIsNotImpleme_2.isa, a4, &v22);
    char v9 = v22;
    char v22 = 0;
    uint64_t v23 = v9;
    char v24 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v24)
    {
      uint64_t v11 = v23;
      uint64_t v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v12 = v22;
    char v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void sub_199369F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setReaderModeActive(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x4000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14) {
        uint64_t v15 = (id *)(v14 - 16);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = WebKit::WebExtensionAction::wrapper(v15);
    ++*(_DWORD *)a1;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    void v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    uint64_t v19 = _Block_copy(v18);

    int v20 = _Block_copy(v19);
    [WeakRetained setReaderModeActive:a2 forWebExtensionContext:v16 completionHandler:v20];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.toggleReaderMode()", 0, &cfstr_ItIsNotImpleme.isa, a4, &v22);
    char v9 = v22;
    char v22 = 0;
    uint64_t v23 = v9;
    char v24 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v24)
    {
      uint64_t v11 = v23;
      uint64_t v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v12 = v22;
    char v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void sub_19936A22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setMuted(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x20000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14) {
        uint64_t v15 = (id *)(v14 - 16);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = WebKit::WebExtensionAction::wrapper(v15);
    ++*(_DWORD *)a1;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    void v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    uint64_t v19 = _Block_copy(v18);

    int v20 = _Block_copy(v19);
    [WeakRetained setMuted:a2 forWebExtensionContext:v16 completionHandler:v20];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_ItIsNotImpleme_3.isa, a4, &v22);
    char v9 = v22;
    char v22 = 0;
    uint64_t v23 = v9;
    char v24 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v24)
    {
      uint64_t v11 = v23;
      uint64_t v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v12 = v22;
    char v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void sub_19936A4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

double WebKit::WebExtensionTab::zoomFactor(WebKit::WebExtensionTab *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2
    && *(void *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x80000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        char v9 = (id *)(v8 - 16);
      }
      else {
        char v9 = 0;
      }
    }
    else
    {
      char v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    [WeakRetained zoomFactorForWebExtensionContext:v10];
    double v5 = v11;
  }
  else
  {
    id WeakRetained = WebKit::WebExtensionTab::webView(this);
    [WeakRetained pageZoom];
    double v5 = v4;
  }

  return v5;
}

void sub_19936A674(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setZoomFactor(WebKit::WebExtensionTab *this, uint64_t *a2, double a3)
{
  uint64_t v6 = *((void *)this + 3);
  if (v6
    && *(void *)(v6 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x100000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v8 = *((void *)this + 3);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v10 = (id *)(v9 - 16);
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    double v11 = WebKit::WebExtensionAction::wrapper(v10);
    ++*(_DWORD *)this;
    uint64_t v12 = *a2;
    *a2 = 0;
    uint64_t v13 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v13 = MEMORY[0x1E4F14398];
    v13[1] = 50331650;
    v13[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v13[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v13[4] = this;
    v13[5] = v12;
    uint64_t v14 = _Block_copy(v13);

    uint64_t v15 = _Block_copy(v14);
    [WeakRetained setZoomFactor:v11 forWebExtensionContext:v15 completionHandler:a3];
  }
  else
  {
    uint64_t v7 = WebKit::WebExtensionTab::webView(this);
    [v7 setPageZoom:a3];

    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
  }
}

void sub_19936A874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::detectWebpageLocale(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x1000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v7);
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12) {
        uint64_t v13 = (id *)(v12 - 16);
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = WebKit::WebExtensionAction::wrapper(v13);
    ++*(_DWORD *)a1;
    uint64_t v15 = *a2;
    *a2 = 0;
    uint64_t v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v16 = MEMORY[0x1E4F14398];
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,NSLocale *,NSError *)#1}::__invoke;
    v16[3] = &WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::descriptor;
    v16[4] = a1;
    v16[5] = v15;
    uint64_t v17 = _Block_copy(v16);

    uint64_t v18 = _Block_copy(v17);
    [WeakRetained detectWebpageLocaleForWebExtensionContext:v14 completionHandler:v18];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.detectLanguage()", 0, &cfstr_ItIsNotImpleme.isa, a4, &v20);
    uint64_t v8 = v20;
    int v20 = 0;
    uint64_t v21 = v8;
    int v22 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)>::operator()(a2);
    if (v22 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EEA00310[v22])(&v23, &v21);
    }
    int v22 = -1;
    uint64_t v10 = v20;
    int v20 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
}

void sub_19936AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12, int a13, int a14)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19936AC48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::captureVisibleWebpage(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4
    && *(void *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x2000000) != 0)
  {
    int v6 = 0;
    id v28 = 0;
    goto LABEL_7;
  }
  WebKit::WebExtensionTab::webView(this);
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    int v6 = 1;
LABEL_7:
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v8 = MEMORY[0x1E4F14398];
    v8[1] = 50331650;
    void v8[2] = WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,UIImage *,NSError *)#1}::__invoke;
    v8[3] = &WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::descriptor;
    v8[4] = v7;
    uint64_t v9 = _Block_copy(v8);

    [v28 bounds];
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    uint64_t v18 = objc_alloc_init(WKSnapshotConfiguration);
    -[WKSnapshotConfiguration setRect:](v18, "setRect:", v11, v13, v15, v17);
    if (v6)
    {
      id WeakRetained = _Block_copy(v9);
      [v28 takeSnapshotWithConfiguration:v18 completionHandler:WeakRetained];
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)this + 4);
      uint64_t v23 = *((void *)this + 3);
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 8);
        if (v24) {
          uint64_t v25 = (id *)(v24 - 16);
        }
        else {
          uint64_t v25 = 0;
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      int v26 = WebKit::WebExtensionAction::wrapper(v25);
      char v27 = _Block_copy(v9);
      [WeakRetained takeSnapshotUsingConfiguration:v18 forWebExtensionContext:v26 completionHandler:v27];
    }

    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.captureVisibleTab()", 0, &cfstr_CaptureIsUnava.isa, v5, &v29);
  int v20 = v29;
  char v29 = 0;
  __int16 v30 = v20;
  int v31 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)>::operator()(a2);
  if (v31 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EEA00340[v31])(&v32, &v30);
  }
  int v31 = -1;
  int v22 = v29;
  char v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
}

void sub_19936AF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12, int a13, int a14, int a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v24 = v21;

  _Unwind_Resume(a1);
}

void sub_19936AFC4()
{
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x19936AFB4);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19936B078(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::loadURL(WebKit::WebExtensionTab *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5
    && *(void *)(v5 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x4000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    double v11 = WTF::URL::operator NSURL *();
    uint64_t v12 = *((void *)this + 3);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13) {
        double v14 = (id *)(v13 - 16);
      }
      else {
        double v14 = 0;
      }
    }
    else
    {
      double v14 = 0;
    }
    double v15 = WebKit::WebExtensionAction::wrapper(v14);
    ++*(_DWORD *)this;
    uint64_t v16 = *a3;
    *a3 = 0;
    double v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *double v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = this;
    v17[5] = v16;
    uint64_t v18 = _Block_copy(v17);

    uint64_t v19 = _Block_copy(v18);
    [WeakRetained loadURL:v11 forWebExtensionContext:v15 completionHandler:v19];
  }
  else
  {
    int v6 = WebKit::WebExtensionTab::webView(this);
    uint64_t v7 = (void *)MEMORY[0x1E4F18DA8];
    uint64_t v8 = WTF::URL::operator NSURL *();
    uint64_t v9 = [v7 requestWithURL:v8];
    id v10 = (id)[v6 loadRequest:v9];

    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
}

void sub_19936B2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5
    && *(void *)(v5 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x8000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v9 = *((void *)this + 3);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10) {
        double v11 = (id *)(v10 - 16);
      }
      else {
        double v11 = 0;
      }
    }
    else
    {
      double v11 = 0;
    }
    uint64_t v12 = WebKit::WebExtensionAction::wrapper(v11);
    ++*(_DWORD *)this;
    uint64_t v13 = *a3;
    *a3 = 0;
    double v14 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v14 = MEMORY[0x1E4F14398];
    v14[1] = 50331650;
    v14[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v14[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v14[4] = this;
    v14[5] = v13;
    double v15 = _Block_copy(v14);

    uint64_t v16 = _Block_copy(v15);
    [WeakRetained reloadFromOrigin:a2 forWebExtensionContext:v12 completionHandler:v16];
  }
  else
  {
    uint64_t v7 = WebKit::WebExtensionTab::webView(this);
    id v8 = (id)[v7 reload];

    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
}

void sub_19936B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::goBack(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4
    && *(void *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x10000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    ++*(_DWORD *)this;
    uint64_t v11 = *a2;
    *a2 = 0;
    uint64_t v12 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v12[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v12[4] = this;
    v12[5] = v11;
    uint64_t v13 = _Block_copy(v12);

    double v14 = _Block_copy(v13);
    [WeakRetained goBackForWebExtensionContext:v10 completionHandler:v14];
  }
  else
  {
    uint64_t v5 = WebKit::WebExtensionTab::webView(this);
    id v6 = (id)[v5 goBack];

    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
  }
}

void sub_19936B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::goForward(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4
    && *(void *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((unsigned char *)this + 50) & 0x20000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    ++*(_DWORD *)this;
    uint64_t v11 = *a2;
    *a2 = 0;
    uint64_t v12 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v12[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v12[4] = this;
    v12[5] = v11;
    uint64_t v13 = _Block_copy(v12);

    double v14 = _Block_copy(v13);
    [WeakRetained goForwardForWebExtensionContext:v10 completionHandler:v14];
  }
  else
  {
    uint64_t v5 = WebKit::WebExtensionTab::webView(this);
    id v6 = (id)[v5 goForward];

    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
  }
}

void sub_19936BA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::activate(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x40000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v7);
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13) {
        double v14 = (id *)(v13 - 16);
      }
      else {
        double v14 = 0;
      }
    }
    else
    {
      double v14 = 0;
    }
    double v15 = WebKit::WebExtensionAction::wrapper(v14);
    ++*(_DWORD *)a1;
    uint64_t v16 = *a2;
    *a2 = 0;
    double v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *double v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = a1;
    v17[5] = v16;
    uint64_t v18 = _Block_copy(v17);

    uint64_t v19 = _Block_copy(v18);
    [WeakRetained activateForWebExtensionContext:v15 completionHandler:v19];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_ItIsNotImpleme_4.isa, a4, &v21);
    uint64_t v8 = v21;
    uint64_t v21 = 0;
    int v22 = v8;
    char v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if (v23)
    {
      uint64_t v10 = v22;
      int v22 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v21;
    uint64_t v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_19936BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setSelected(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x100000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14) {
        double v15 = (id *)(v14 - 16);
      }
      else {
        double v15 = 0;
      }
    }
    else
    {
      double v15 = 0;
    }
    uint64_t v16 = WebKit::WebExtensionAction::wrapper(v15);
    ++*(_DWORD *)a1;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    void v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    uint64_t v19 = _Block_copy(v18);

    int v20 = _Block_copy(v19);
    [WeakRetained setSelected:a2 forWebExtensionContext:v16 completionHandler:v20];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_ItIsNotImpleme_5.isa, a4, &v22);
    uint64_t v9 = v22;
    int v22 = 0;
    char v23 = v9;
    char v24 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v24)
    {
      uint64_t v11 = v23;
      char v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v12 = v22;
    int v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void sub_19936BFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x200000000) != 0)
  {
    if (*(unsigned char *)(a2 + 88))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13) {
          uint64_t v14 = v13 - 16;
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      WebKit::WebExtensionContext::getWindow(v14, *(void *)(a2 + 80), 0, 0, 0, (uint64_t *)&v34);
    }
    else
    {
      WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a1, &v34);
    }
    if (*(unsigned char *)(a2 + 104)) {
      uint64_t v15 = *(void *)(a2 + 96);
    }
    else {
      uint64_t v15 = WebKit::WebExtensionTab::index((WebKit::WebExtensionTab *)a1) + 1;
    }
    id v16 = [[WKWebExtensionTabConfiguration alloc] _init];
    uint64_t v17 = v16;
    if (*(unsigned char *)(a2 + 153)) {
      BOOL v18 = *(unsigned char *)(a2 + 152) == 0;
    }
    else {
      BOOL v18 = 0;
    }
    uint64_t v19 = !v18;
    [v16 _setShouldBeActive:v19];
    if ([v17 shouldBeActive])
    {
      uint64_t v20 = 1;
    }
    else
    {
      if (*(unsigned char *)(a2 + 155)) {
        BOOL v21 = *(unsigned char *)(a2 + 154) == 0;
      }
      else {
        BOOL v21 = 1;
      }
      uint64_t v20 = !v21;
    }
    [v17 _setShouldAddToSelection:v20];
    uint64_t v22 = (uint64_t)v34;
    if (v34) {
      id WeakRetained = objc_loadWeakRetained(v34 + 4);
    }
    else {
      id WeakRetained = 0;
    }
    [v17 _setWindow:WeakRetained];
    if (v22) {

    }
    [v17 _setIndex:v15];
    id v24 = objc_loadWeakRetained(v8);
    uint64_t v25 = *(void *)(a1 + 24);
    if (v25)
    {
      uint64_t v26 = *(void *)(v25 + 8);
      if (v26) {
        char v27 = (id *)(v26 - 16);
      }
      else {
        char v27 = 0;
      }
    }
    else
    {
      char v27 = 0;
    }
    id v28 = WebKit::WebExtensionAction::wrapper(v27);
    ++*(_DWORD *)a1;
    uint64_t v29 = *a3;
    *a3 = 0;
    __int16 v30 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
    *__int16 v30 = MEMORY[0x1E4F14398];
    v30[1] = 50331650;
    void v30[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke;
    v30[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::descriptor;
    v30[4] = a1;
    v30[5] = a1;
    v30[6] = v29;
    int v31 = _Block_copy(v30);

    char v32 = _Block_copy(v31);
    [v24 duplicateUsingConfiguration:v17 forWebExtensionContext:v28 completionHandler:v32];

    uint64_t result = (WTF::StringImpl *)v34;
    unint64_t v34 = 0;
    if (result) {
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.duplicate()", 0, &cfstr_ItIsNotImpleme.isa, a4, &v33);
    uint64_t v9 = v33;
    int v33 = 0;
    unint64_t v34 = (id *)v9;
    int v35 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::String> &&)>::operator()(a3);
    if (v35 != -1) {
      ((void (*)(char *, id **))off_1EEA00430[v35])(&v36, &v34);
    }
    int v35 = -1;
    uint64_t result = v33;
    int v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19936C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19936C4FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::close(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x400000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v7);
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13) {
        uint64_t v14 = (id *)(v13 - 16);
      }
      else {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = WebKit::WebExtensionAction::wrapper(v14);
    ++*(_DWORD *)a1;
    uint64_t v16 = *a2;
    *a2 = 0;
    uint64_t v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = a1;
    v17[5] = v16;
    BOOL v18 = _Block_copy(v17);

    uint64_t v19 = _Block_copy(v18);
    [WeakRetained closeForWebExtensionContext:v15 completionHandler:v19];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.remove()", 0, &cfstr_ItIsNotImpleme.isa, a4, &v21);
    uint64_t v8 = v21;
    BOOL v21 = 0;
    uint64_t v22 = v8;
    char v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if (v23)
    {
      uint64_t v10 = v22;
      uint64_t v22 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v21;
    BOOL v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_19936C724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::shouldGrantPermissionsOnUserGesture(WebKit::WebExtensionTab *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 1;
  }
  if (!*(void *)(v1 + 8)) {
    return 1;
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)this + 4)
    || ((*(unsigned int *)((char *)this + 50) | ((unint64_t)*((unsigned __int8 *)this + 54) << 32)) & 0x800000000) == 0)
  {
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  uint64_t v4 = [WeakRetained shouldGrantPermissionsOnUserGestureForWebExtensionContext:v10];

  return v4;
}

void sub_19936C894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::processes(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(a1 + 32)))
  {
    uint64_t v9 = WebKit::WebExtensionTab::webView((WebKit::WebExtensionTab *)a1);
    uint64_t v10 = v9;
    if (v9
      && ((uint64_t v11 = *(void *)(a1 + 24)) == 0
        ? (uint64_t v13 = 0)
        : (uint64_t v12 = *(void *)(v11 + 8)) != 0
        ? (uint64_t v13 = v12 - 16)
        : (uint64_t v13 = 0),
          [v9 _page],
          (WebKit::WebExtensionContext::pageListensForEvent(v13, v18[0], a2, a3) & 1) != 0))
    {
      [v10 _page];
      uint64_t v14 = *(void *)(v18[0] + 256);
      uint64_t v15 = (unsigned int *)(v14 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
      uint64_t v16 = *(void *)(v14 + 136);
      if ((!v16 || !*(unsigned char *)(v16 + 104)) && !*(void *)(v14 + 144))
      {
        *a4 = 0;
        goto LABEL_20;
      }
      v18[0] = v14;
      WTF::HashSet<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::HashSet(a4, v18, 1);
      uint64_t v17 = v18[0];
      v18[0] = 0;
      if (v17)
      {
        uint64_t v15 = (unsigned int *)(v17 + 16);
LABEL_20:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
      }
    }
    else
    {
      *a4 = 0;
    }

    return;
  }
  *a4 = 0;
}

void sub_19936CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(a9 + 16));
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for setParentTab: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936CC74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setPinned(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for pin: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936CF5C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setReaderModeActive(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for toggleReaderMode: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.toggleReaderMode()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936D244(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setMuted(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for mute: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936D52C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for setZoomFactor: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.setZoom()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936D814(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP8NSLocaleN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, id *a2)
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP8NSLocaleN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,NSLocale *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = WebKit::privacyPreservingDescription(v6, v8);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v14;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Error for detectWebpageLocale: %{public}@", buf, 0xCu);
    }
    uint64_t v9 = [(WebKit *)v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.detectLanguage()", 0, v9, v10, &v15);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    *(void *)buf = v11;
    *(_DWORD *)&uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(char *, unsigned char *))off_1EEA00310[*(unsigned int *)&buf[8]])(&v16, buf);
    }
    *(_DWORD *)&uint8_t buf[8] = -1;
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object passed to completionHandler of detectWebpageLocaleForWebExtensionContext:completionHandler: is not an NSLocale"];
      }
    }
    *(void *)buf = v5;
    *(_DWORD *)&uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA00310[0])(&v15, buf);
  }
}

void sub_19936DB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EEA00310[a16])(&a9, &a14);
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP7UIImageN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, id *a2)
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP7UIImageN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,UIImage *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(a1 + 32);
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = WebKit::privacyPreservingDescription(v6, v8);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v14;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Error for captureVisibleWebpage: %{public}@", buf, 0xCu);
    }
    uint64_t v9 = [(WebKit *)v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.captureVisibleTab()", 0, v9, v10, &v15);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    *(void *)buf = v11;
    *(_DWORD *)&uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)>::operator()(v4);
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(char *, unsigned char *))off_1EEA00340[*(unsigned int *)&buf[8]])(&v16, buf);
    }
    *(_DWORD *)&uint8_t buf[8] = -1;
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object passed to completionHandler of captureVisibleWebpageForWebExtensionContext:completionHandler: is not an image"];
      }
    }
    *(void *)buf = v5;
    *(_DWORD *)&uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)>::operator()(v4);
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA00340[0])(&v15, buf);
  }
}

void sub_19936DEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EEA00340[a16])(&a9, &a14);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for loadURL: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936E19C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab::ReloadFromOrigin,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for reload: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.reload()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936E484(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for goBack: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.goBack()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936E76C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for goForward: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.goForward()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936EA54(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for activate: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936ED3C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setSelected(BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for select: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936F024(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebKit15WebExtensionTabENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebKit15WebExtensionTabENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = WebKit::privacyPreservingDescription(v6, v8);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v19;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Error for duplicate: %{public}@", buf, 0xCu);
    }
    uint64_t v9 = [(WebKit *)v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.duplicate()", 0, v9, v10, &v20);
    uint64_t v11 = v20;
    uint64_t v20 = 0;
    *(void *)buf = v11;
    *(_DWORD *)&uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(char *, unsigned char *))off_1EEA00430[*(unsigned int *)&buf[8]])(&v21, buf);
    }
    *(_DWORD *)&uint8_t buf[8] = -1;
    uint64_t v13 = v20;
    uint64_t v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else if (v5)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15) {
        char v16 = (uint64_t *)(v15 - 16);
      }
      else {
        char v16 = 0;
      }
    }
    else
    {
      char v16 = 0;
    }
    WebKit::WebExtensionContext::getOrCreateTab(v16, v5, (uint64_t)&v20);
    uint64_t v17 = v20;
    ++*(_DWORD *)v20;
    *(void *)buf = v17;
    *(_DWORD *)&uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(char *, unsigned char *))off_1EEA00430[*(unsigned int *)&buf[8]])(&v21, buf);
    }
    *(_DWORD *)&uint8_t buf[8] = -1;
    uint64_t v18 = v20;
    uint64_t v20 = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
    }
  }
  else
  {
    *(void *)buf = 0;
    *(_DWORD *)&uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA00430[0])(&v20, buf);
  }
}

void sub_19936F3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EEA00430[a16])(&a9, &a14);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for tab close: %{public}@", buf, 0xCu);
    }
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.remove()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19936F71C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashSet<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_19936F838(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    uint64_t v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      uint64_t *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v10 = *a2;
      uint64_t v17 = v9;
    }
    atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
    uint64_t v19 = *v17;
    *uint64_t v17 = v10;
    if (v19) {
      uint64_t result = (uint64_t *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v19 + 16));
    }
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v25 = *v4;
    if (*v4) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        uint64_t result = WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(v4, v17);
        uint64_t v17 = result;
        uint64_t v25 = *v4;
        if (*v4) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    uint64_t v24 = v25 + 8 * v28;
    char v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  char v23 = 0;
  uint64_t v24 = v6 + 8 * v22;
LABEL_32:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v23;
  return result;
}

WebKit::WebExtensionURLSchemeHandler *WebKit::WebExtensionURLSchemeHandler::WebExtensionURLSchemeHandler(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebExtensionController *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1EEA00490;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 6) = v4;
  *((void *)this + 7) = 0;
  return this;
}

void sub_19936FA94(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebExtensionURLSchemeHandler *this, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F28B48];
  ++*((_DWORD *)this + 2);
  CFRetain(a3[1]);
  CFRetain(a2[1]);
  char v7 = malloc_type_malloc(0x50uLL, 0x10E0040BD486B64uLL);
  *char v7 = MEMORY[0x1E4F14398];
  v7[1] = 50331650;
  v7[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void *)#1}::__invoke;
  v7[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::descriptor;
  v7[4] = this;
  v7[5] = this;
  v7[6] = a3;
  v7[7] = a3;
  v7[8] = a2;
  v7[9] = a2;
  int v8 = _Block_copy(v7);

  uint64_t v9 = _Block_copy(v8);
  id v38 = [v6 blockOperationWithBlock:v9];

  CFRetain(a3[1]);
  uint64_t v12 = *((void *)this + 7);
  uint64_t v10 = (uint64_t *)((char *)this + 56);
  uint64_t v11 = v12;
  if (v12
    || (WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(v10),
        (uint64_t v11 = *v10) != 0))
  {
    unsigned int v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    unsigned int v13 = 0;
  }
  unsigned int v14 = 0;
  unint64_t v15 = ((unint64_t)a3 + ~((void)a3 << 32)) ^ (((unint64_t)a3 + ~((void)a3 << 32)) >> 22);
  unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  int v18 = (v17 >> 31) ^ v17;
  for (int i = 1; ; ++i)
  {
    uint64_t v20 = v18 & v13;
    int v21 = (WebKit::WebURLSchemeTask **)(v11 + 16 * v20);
    uint64_t v22 = *v21;
    if (*v21 == (WebKit::WebURLSchemeTask *)-1)
    {
      unsigned int v14 = (void *)(v11 + 16 * v20);
      goto LABEL_10;
    }
    if (!v22)
    {
      if (v14)
      {
        void *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        void *v14 = a3;
      }
      else
      {
        *int v21 = (WebKit::WebURLSchemeTask *)a3;
        unsigned int v14 = (void *)(v11 + 16 * v20);
      }
      id v27 = v38;
      unint64_t v28 = v27;
      CFTypeRef cf = v27;
      if (v27) {
        CFRetain(v27);
      }

      uint64_t v29 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

      __int16 v30 = (const void *)v14[1];
      v14[1] = v29;
      if (v30) {
        CFRelease(v30);
      }
      if (cf) {
        CFRelease(cf);
      }
      uint64_t v31 = *v10;
      if (*v10) {
        int v32 = *(_DWORD *)(v31 - 12) + 1;
      }
      else {
        int v32 = 1;
      }
      *(_DWORD *)(v31 - 12) = v32;
      uint64_t v33 = *v10;
      if (*v10) {
        int v34 = *(_DWORD *)(v33 - 12);
      }
      else {
        int v34 = 0;
      }
      uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
      unint64_t v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35) {
          goto LABEL_34;
        }
      }
      else if (3 * v36 > 4 * v35)
      {
        goto LABEL_34;
      }
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(v10);
      goto LABEL_34;
    }
    if (v22 == (WebKit::WebURLSchemeTask *)a3) {
      break;
    }
LABEL_10:
    int v18 = i + v20;
  }
  id v23 = v38;
  uint64_t v24 = v23;
  if (v23) {
    CFRetain(v23);
  }
  uint64_t v25 = (const void **)(v11 + 16 * v20 + 8);

  int v26 = *v25;
  *uint64_t v25 = v24;
  if (v26) {
    CFRelease(v26);
  }

  CFRelease(a3[1]);
LABEL_34:
  unint64_t v37 = objc_msgSend(MEMORY[0x1E4F28F08], "mainQueue", v38);
  [v37 addOperation:v39];
}

void sub_19936FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionURLSchemeHandler::platformStopTask(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebPageProxy *a2, WebKit::WebURLSchemeTask *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 56);
  uint64_t v3 = *((void *)this + 7);
  uint64_t v5 = WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(v3, (uint64_t)a3);
  uint64_t v6 = (uint64_t *)v5;
  if (v3) {
    uint64_t v7 = v3 + 16 * *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v5)
  {
    CFTypeRef cf = 0;
    int v8 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    int v8 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(v5 + 8));

    if (*v4)
    {
      uint64_t v9 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
      if ((uint64_t *)v9 == v6) {
        goto LABEL_14;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_14;
      }
      uint64_t v9 = 0;
    }
    if ((uint64_t *)v9 != v6) {
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(v4, v6);
    }
  }
LABEL_14:
  id v10 = v8;
  [v10 cancel];

  if (v10)
  {
    CFRelease(v10);
  }
}

void sub_19936FFA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionURLSchemeHandler::platformTaskCompleted(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebURLSchemeTask *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 56);
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(v3, (uint64_t)a2);
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v5 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v5 = 0;
  }
  if (v5 != v4)
  {
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(v2, v4);
  }
}

void WebKit::WebExtensionURLSchemeHandler::~WebExtensionURLSchemeHandler(WebKit::WebExtensionURLSchemeHandler *this, void *a2)
{
  *(void *)this = &unk_1EEA00490;
  uint64_t v3 = (uint64_t *)*((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
}

{
  uint64_t *v3;
  unsigned int *v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EEA00490;
  uint64_t v3 = (uint64_t *)*((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);

  WTF::fastFree(v5, v6);
}

_DWORD *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t result = (_DWORD *)a1[5];
  a1[5] = 0;
  if (result)
  {
    if (result[2] == 1)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v5();
    }
    else
    {
      --result[2];
    }
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  v114[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(*(void *)(a1 + 48) + 256)
                                                                        + 24));
  if (*(void *)v3 && *(_DWORD *)(*(void *)v3 + 4))
  {
    uint64_t PartyForCookies = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(*(void *)(a1 + 48) + 256)
                                                                                       + 24));
    int v5 = 0;
  }
  else
  {
    WebKit::WebURLSchemeTask::request(*(WebKit::WebURLSchemeTask **)(a1 + 48), v108);
    uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)v108);
    int v5 = 1;
  }
  uint64_t v6 = *(const WTF::StringImpl **)PartyForCookies;
  if (*(void *)PartyForCookies) {
    *(_DWORD *)v6 += 2;
  }
  unint64_t v110 = v6;
  long long v7 = *(_OWORD *)(PartyForCookies + 24);
  long long v111 = *(_OWORD *)(PartyForCookies + 8);
  long long v112 = v7;
  if (v5)
  {
    CFTypeRef v8 = v109;
    CFTypeRef v109 = 0;
    if (v8) {
      CFRelease(v8);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v108);
  }
  WebKit::WebURLSchemeTask::request(*(WebKit::WebURLSchemeTask **)(a1 + 48), (CFTypeRef *)&v98);
  uint64_t v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v98);
  id v10 = *(StringImpl **)v9;
  if (*(void *)v9) {
    *(_DWORD *)v10 += 2;
  }
  v107.m_string.m_impl.m_ptr = v10;
  long long v11 = *(_OWORD *)(v9 + 8);
  *(_OWORD *)&v107.m_hostEnd = *(_OWORD *)(v9 + 24);
  *(_OWORD *)((char *)&v107 + 8) = v11;
  CFTypeRef v12 = cf;
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v98);
  uint64_t v13 = *(void *)(v2 + 48);
  if (!v13 || (uint64_t v14 = *(void *)(v13 + 8)) == 0)
  {
    int v21 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    uint64_t v22 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1102 userInfo:0];
    MEMORY[0x199731570](&v98, v22);
    WebKit::WebURLSchemeTask::didComplete(v21, (const WebCore::ResourceError *)&v98);
    CFTypeRef v24 = v101;
    CFTypeRef v101 = 0;
    if (v24) {
      CFRelease(v24);
    }
    uint64_t v25 = v100;
    unint64_t v100 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v23);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    int v26 = v99;
    uint64_t v99 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v23);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    id v27 = v98;
    char v98 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v23);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    goto LABEL_39;
  }
  WebKit::WebExtensionController::extensionContext((WebKit::WebExtensionController *)(v14 - 16), (const WTF::URL *)&v107, &v106);
  unint64_t v16 = v106;
  if (!v106)
  {
    uint64_t v29 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    uint64_t v22 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1102 userInfo:0];
    MEMORY[0x199731570](&v98, v22);
    WebKit::WebURLSchemeTask::didComplete(v29, (const WebCore::ResourceError *)&v98);
    CFTypeRef v31 = v101;
    CFTypeRef v101 = 0;
    if (v31) {
      CFRelease(v31);
    }
    int v32 = v100;
    unint64_t v100 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v30);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    char v80 = v99;
    uint64_t v99 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2) {
        WTF::StringImpl::destroy(v80, v30);
      }
      else {
        *(_DWORD *)v80 -= 2;
      }
    }
    int v81 = v98;
    char v98 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, v30);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
LABEL_39:

    goto LABEL_142;
  }
  if ((WTF::protocolHostAndPortAreEqual((WTF *)&v110, &v107, v15) & 1) == 0
    && (WebKit::WebExtension::isWebAccessibleResource(*((WebKit::WebExtension **)v16 + 8), (const WTF::URL *)&v107, (const WTF::URL *)&v110) & 1) == 0)
  {
    char v71 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    int v72 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1102 userInfo:0];
    MEMORY[0x199731570](&v98, v72);
    WebKit::WebURLSchemeTask::didComplete(v71, (const WebCore::ResourceError *)&v98);
    CFTypeRef v74 = v101;
    CFTypeRef v101 = 0;
    if (v74) {
      CFRelease(v74);
    }
    int v75 = v100;
    unint64_t v100 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v73);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
    char v89 = v99;
    uint64_t v99 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2) {
        WTF::StringImpl::destroy(v89, v73);
      }
      else {
        *(_DWORD *)v89 -= 2;
      }
    }
    unsigned int v90 = v98;
    char v98 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2) {
        WTF::StringImpl::destroy(v90, v73);
      }
      else {
        *(_DWORD *)v90 -= 2;
      }
    }
    goto LABEL_140;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 256) + 16)
    && WTF::equal((WTF *)v107.m_string.m_impl.m_ptr, v110, v17))
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 48);
    if ((*(unsigned char *)(v19 + 80) & 1) != 0
      && (WTF::protocolHostAndPortAreEqual((WTF *)((char *)v16 + 80), (const URL *)(v19 + 72), v18) & 1) != 0)
    {
      int v20 = 1;
      goto LABEL_46;
    }
    unint64_t v76 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    int v72 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1008 userInfo:0];
    MEMORY[0x199731570](&v98, v72);
    WebKit::WebURLSchemeTask::didComplete(v76, (const WebCore::ResourceError *)&v98);
    CFTypeRef v78 = v101;
    CFTypeRef v101 = 0;
    if (v78) {
      CFRelease(v78);
    }
    unint64_t v79 = v100;
    unint64_t v100 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2) {
        WTF::StringImpl::destroy(v79, v77);
      }
      else {
        *(_DWORD *)v79 -= 2;
      }
    }
    uint64_t v93 = v99;
    uint64_t v99 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2) {
        WTF::StringImpl::destroy(v93, v77);
      }
      else {
        *(_DWORD *)v93 -= 2;
      }
    }
    unint64_t v94 = v98;
    char v98 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2) {
        WTF::StringImpl::destroy(v94, v77);
      }
      else {
        *(_DWORD *)v94 -= 2;
      }
    }
LABEL_140:

    goto LABEL_141;
  }
  int v20 = 0;
LABEL_46:
  uint64_t v33 = *((void *)v16 + 8);
  WTF::URL::path((WTF::URL *)&v107);
  if ((v34 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  if (v98) {
    uint64_t v35 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v35 = &stru_1EEA10550;
  }
  id v105 = 0;
  unint64_t v36 = WebKit::WebExtension::resourceDataForPath(v33, v35, &v105, 0, 0);
  unint64_t v37 = (NSError *)v105;

  id v39 = v98;
  char v98 = 0;
  if (!v39)
  {
LABEL_53:
    if (v36) {
      goto LABEL_54;
    }
    goto LABEL_94;
  }
  if (*(_DWORD *)v39 != 2)
  {
    *(_DWORD *)v39 -= 2;
    goto LABEL_53;
  }
  WTF::StringImpl::destroy(v39, v38);
  if (v36)
  {
LABEL_54:
    if (v20)
    {
      WebKit::WebExtensionContext::getCurrentTab((uint64_t)v16, *(void *)(*(void *)(*(void *)(a1 + 64) + 32) + 760), 0, 0, &v98);
      unint64_t v40 = v98;
      if (v98)
      {
        WebKit::WebExtensionContext::addExtensionTabPage(v16, *(WebKit::WebPageProxy **)(a1 + 64), (uint64_t **)v98);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v40);
      }
    }
    char v41 = (void *)MEMORY[0x1E4F442D8];
    int v42 = WTF::URL::operator NSURL *();
    unint64_t v43 = [v42 pathExtension];
    char v44 = [v41 typeWithFilenameExtension:v43];
    uint64_t v45 = [v44 preferredMIMEType];

    if (v45) {
      unint64_t v46 = (__CFString *)v45;
    }
    else {
      unint64_t v46 = @"application/octet-stream";
    }
    if ([(__CFString *)v46 isEqualToString:@"text/css"])
    {
      char v47 = WebKit::WebExtensionContext::localization((id **)v16);
      int v48 = (void *)[[NSString alloc] initWithData:v36 encoding:4];
      unint64_t v49 = [v47 localizedStringForString:v48];

      uint64_t v50 = [v49 dataUsingEncoding:4];

      unint64_t v36 = (void *)v50;
    }
    id v51 = objc_alloc(MEMORY[0x1E4F18D40]);
    unint64_t v52 = WTF::URL::operator NSURL *();
    v114[0] = @"*";
    v113[0] = @"Access-Control-Allow-Origin";
    v113[1] = @"Content-Security-Policy";
    WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded(*((WebKit::WebExtension **)v16 + 8));
    char v53 = WTF::RetainPtr<__IOHIDDevice *>::get();
    v114[1] = v53;
    v113[2] = @"Content-Length";
    int v54 = objc_msgSend(NSString, "stringWithFormat:", @"%zu", objc_msgSend(v36, "length"));
    v113[3] = @"Content-Type";
    v114[2] = v54;
    v114[3] = v46;
    unint64_t v55 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v114 forKeys:v113 count:4];
    char v56 = (NSURLResponse *)[v51 initWithURL:v52 statusCode:200 HTTPVersion:0 headerFields:v55];

    int v57 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)&v98, v56);
    WebKit::WebURLSchemeTask::didReceiveResponse(v57, (const WebCore::ResourceResponse *)&v98);
    CFTypeRef v59 = v104;
    CFTypeRef v104 = 0;
    if (v59) {
      CFRelease(v59);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v98, v58);
    uint64_t v60 = *(void *)(a1 + 48);
    WebCore::FragmentedSharedBuffer::create((uint64_t *)&v98, (WebCore::FragmentedSharedBuffer *)v36, v61);
    uint64_t v62 = WTF::fastMalloc((WTF *)0x38);
    MEMORY[0x199730FA0](v62, &v98);
    unint64_t v64 = (unsigned int *)v98;
    unint64_t v97 = (unsigned int *)v62;
    char v98 = 0;
    if (v64) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v64, v63);
    }
    WebKit::WebURLSchemeTask::didReceiveData(v60, (uint64_t *)&v97);
    int v66 = v97;
    unint64_t v97 = 0;
    if (v66) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v66, v65);
    }
    unint64_t v67 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v98, 0);
    CFTypeRef v101 = 0;
    char v102 = 1;
    WebKit::WebURLSchemeTask::didComplete(v67, (const WebCore::ResourceError *)&v98);
    CFTypeRef v69 = v101;
    CFTypeRef v101 = 0;
    if (v69) {
      CFRelease(v69);
    }
    unint64_t v70 = v100;
    unint64_t v100 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2) {
        WTF::StringImpl::destroy(v70, v68);
      }
      else {
        *(_DWORD *)v70 -= 2;
      }
    }
    int v87 = v99;
    uint64_t v99 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2) {
        WTF::StringImpl::destroy(v87, v68);
      }
      else {
        *(_DWORD *)v87 -= 2;
      }
    }
    unint64_t v88 = v98;
    char v98 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2) {
        WTF::StringImpl::destroy(v88, v68);
      }
      else {
        *(_DWORD *)v88 -= 2;
      }
    }

    goto LABEL_129;
  }
LABEL_94:
  WebKit::WebExtensionContext::recordError((const void **)v16, v37);
  unint64_t v82 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
  char v83 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1100 userInfo:0];
  MEMORY[0x199731570](&v98, v83);
  WebKit::WebURLSchemeTask::didComplete(v82, (const WebCore::ResourceError *)&v98);
  CFTypeRef v85 = v101;
  CFTypeRef v101 = 0;
  if (v85) {
    CFRelease(v85);
  }
  char v86 = v100;
  unint64_t v100 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2) {
      WTF::StringImpl::destroy(v86, v84);
    }
    else {
      *(_DWORD *)v86 -= 2;
    }
  }
  unint64_t v91 = v99;
  uint64_t v99 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2) {
      WTF::StringImpl::destroy(v91, v84);
    }
    else {
      *(_DWORD *)v91 -= 2;
    }
  }
  char v92 = v98;
  char v98 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2) {
      WTF::StringImpl::destroy(v92, v84);
    }
    else {
      *(_DWORD *)v92 -= 2;
    }
  }

  unint64_t v36 = 0;
LABEL_129:

  unint64_t v16 = v106;
  if (v106) {
LABEL_141:
  }
    CFRelease(*((CFTypeRef *)v16 + 1));
LABEL_142:
  m_ptr = v107.m_string.m_impl.m_ptr;
  v107.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v28);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  uint64_t result = v110;
  unint64_t v110 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199370C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v48);

  if (a45) {
    CFRelease(*(CFTypeRef *)(a45 + 8));
  }
  if (a46)
  {
    if (*(_DWORD *)a46 == 2) {
      WTF::StringImpl::destroy(a46, v51);
    }
    else {
      *(_DWORD *)a46 -= 2;
    }
  }
  unint64_t v52 = *(WTF::StringImpl **)(v49 - 200);
  *(void *)(v49 - 200) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, v51);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t v6 = (const void *)v4[1];
        v4[1] = 0;
        if (v6)
        {
          CFRelease(v6);
          uint64_t v5 = *v4;
        }
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    do
    {
      long long v11 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          CFTypeRef v24 = (uint64_t *)(v15 + 16 * v22);
          uint64_t v25 = (const void *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            CFRelease(v25);
            uint64_t v26 = *v24;
            *CFTypeRef v24 = 0;
            if (v26) {
              CFRelease(*(CFTypeRef *)(v26 + 8));
            }
          }
          else
          {
            *CFTypeRef v24 = 0;
          }
          uint64_t v27 = *v11;
          *long long v11 = 0;
          *CFTypeRef v24 = v27;
          uint64_t v28 = v4 + 16 * v9;
          uint64_t v29 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(v28 + 8));

          v24[1] = (uint64_t)v29;
          __int16 v30 = *(const void **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            CFRelease(v30);
          }
          uint64_t v31 = *v11;
          *long long v11 = 0;
          if (v31) {
            CFRelease(*(CFTypeRef *)(v31 + 8));
          }
        }
        else
        {
          uint64_t v13 = v4 + 16 * v9;
          uint64_t v14 = *(const void **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14)
          {
            CFRelease(v14);
            uint64_t v12 = *v11;
          }
          *long long v11 = 0;
          if (v12) {
            CFRelease(*(CFTypeRef *)(v12 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
    for (int i = 1; ; ++i)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)(result + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
        {
          result += 16 * *(unsigned int *)(result - 4);
          return result;
        }
        if (v9 == a2) {
          break;
        }
      }
      unsigned int v6 = (v8 + i) & v2;
    }
    result += 16 * v8;
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  unint64_t v5 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v5) {
    CFRelease(v5);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(a1, v10 >> 1);
    }
  }
}

BOOL WebKit::validateDictionary(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v41 = a1;
  unint64_t v40 = a2;
  id v9 = a3;
  id v10 = a4;
  id v39 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithArray:v9];
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v9];
  id v12 = objc_alloc(MEMORY[0x1E4F1CA80]);
  uint64_t v13 = [v10 allKeys];
  uint64_t v14 = (void *)[v12 initWithArray:v13];

  [v14 minusSet:v11];
  uint64_t v48 = 0;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x3032000000;
  id v51 = __Block_byref_object_copy__15;
  unint64_t v52 = __Block_byref_object_dispose__15;
  id v53 = 0;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = ___ZN6WebKit18validateDictionaryEP12NSDictionaryIP8NSStringP11objc_objectES2_P7NSArrayIS2_ES6_PU15__autoreleasingS2__block_invoke;
  v42[3] = &unk_1E5813E38;
  id v15 = v11;
  id v43 = v15;
  id v16 = v14;
  id v44 = v16;
  id v17 = v10;
  id v45 = v17;
  char v47 = &v48;
  id v18 = v39;
  id v46 = v18;
  [v41 enumerateKeysAndObjectsUsingBlock:v42];
  uint64_t v19 = [v18 count];
  int v21 = v49;
  if (v19 && !v49[5])
  {
    unint64_t v37 = NSString;
    id v38 = [v18 allObjects];
    uint64_t v22 = [v38 count];
    if (v22)
    {
      if (v22 == 1)
      {
        uint64_t v25 = NSString;
        unint64_t v36 = [v38 firstObject];
        CFTypeRef v24 = [v25 stringWithFormat:@"'%@'", v36];
      }
      else
      {
        if (v22 == 2)
        {
          uint64_t v23 = NSString;
          uint64_t v35 = [v38 firstObject];
          uint64_t v33 = [v38 lastObject];
          CFTypeRef v24 = [v23 stringWithFormat:@"'%@' and '%@'", v35, v33];
        }
        else
        {
          uint64_t v35 = objc_msgSend(v38, "subarrayWithRange:", 0, v22 - 1);
          uint64_t v34 = [v35 componentsJoinedByString:@"', '"];
          uint64_t v26 = NSString;
          int v32 = [v38 lastObject];
          CFTypeRef v24 = [v26 stringWithFormat:@"'%@', and '%@'", v34, v32];
        }
      }
    }
    else
    {
      CFTypeRef v24 = &stru_1EEA10550;
    }

    uint64_t v27 = [v37 stringWithFormat:@"it is missing required keys: %@", v24];
    uint64_t v28 = (void *)v49[5];
    v49[5] = v27;

    int v21 = v49;
  }
  uint64_t v29 = (NSString *)v21[5];
  if (a5 && v29)
  {
    WebKit::toErrorString(0, v40, v29, v20);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = (NSString *)v49[5];
  }
  BOOL v30 = v29 == 0;

  _Block_object_dispose(&v48, 8);
  return v30;
}

void sub_1993719C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28)
{
  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_199371AD0()
{
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void ___ZN6WebKit18validateDictionaryEP12NSDictionaryIP8NSStringP11objc_objectES2_P7NSArrayIS2_ES6_PU15__autoreleasingS2__block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (([*(id *)(a1 + 32) containsObject:v7] & 1) != 0
    || ([*(id *)(a1 + 40) containsObject:v7] & 1) != 0)
  {
    id v9 = [*(id *)(a1 + 48) objectForKeyedSubscript:v7];
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
    obuint64_t j = *(id *)(v10 + 40);
    char v11 = WebKit::validate(v7, v8, v9, (uint64_t)&obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    if (v11)
    {
      if ([*(id *)(a1 + 32) containsObject:v7]) {
        [*(id *)(a1 + 56) removeObject:v7];
      }
    }
    else
    {
      *a4 = 1;
    }
  }
}

void sub_199371BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::validate(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  BOOL v30 = v7;
  objc_opt_class();
  uint64_t v10 = WTF::dynamic_objc_cast<NSArray>(v9);
  if (!v10)
  {
    objc_opt_class();
    id v12 = v9;
    if (objc_opt_isKindOfClass())
    {
      id v13 = v12;

      if (v13)
      {
        id v28 = v7;
        uint64_t v14 = (WebKit *)v8;
        id v15 = v13;
        uint64_t v29 = v14;
        if ([v15 containsObject:objc_opt_class()])
        {
          uint64_t v11 = 1;
LABEL_29:

          goto LABEL_30;
        }
        uint64_t v25 = (void *)a4;
        id v26 = v15;
        uint64_t v36 = 0;
        unint64_t v37 = &v36;
        uint64_t v38 = 0x3032000000;
        id v39 = __Block_byref_object_copy__15;
        unint64_t v40 = __Block_byref_object_dispose__15;
        id v41 = [MEMORY[0x1E4F28E78] string];
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZN6WebKitL11validateSetEP8NSStringP8NSObjectP12NSOrderedSetPU15__autoreleasingS1__block_invoke;
        aBlock[3] = &unk_1E5813EB0;
        aBlock[4] = &v36;
        id v16 = (void (**)(void *, WebKit *, void))_Block_copy(aBlock);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        obuint64_t j = (__CFString *)v15;
        uint64_t v17 = [(__CFString *)obj countByEnumeratingWithState:&v31 objects:v42 count:16];
        if (v17)
        {
          LOBYTE(v11) = 0;
          uint64_t v18 = *(void *)v32;
          do
          {
            for (uint64_t i = 0; i != v17; ++i)
            {
              if (*(void *)v32 != v18) {
                objc_enumerationMutation(obj);
              }
              unsigned int v20 = *(WebKit **)(*((void *)&v31 + 1) + 8 * i);
              if (objc_opt_respondsToSelector())
              {
                v16[2](v16, v20, 0);
                if (WebKit::validateSingleObject(v28, v29, v20, 0))
                {
                  uint64_t v11 = 1;
                  goto LABEL_27;
                }
              }
              else
              {
                uint64_t v21 = objc_opt_class();
                uint64_t v22 = [(WebKit *)v20 firstObject];
                ((void (**)(void *, WebKit *, void *))v16)[2](v16, (WebKit *)v21, v22);

                uint64_t v11 = 1;
                if (WebKit::validateArray(v28, v29, v20, 0)) {
                  goto LABEL_27;
                }
              }
            }
            uint64_t v17 = [(__CFString *)obj countByEnumeratingWithState:&v31 objects:v42 count:16];
          }
          while (v17);

          if (v25)
          {
            if (v11)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                obuint64_t j = @"an array of other values";
                WebKit::constructExpectedMessage((WebKit *)v28, (NSString *)v37[5], &cfstr_AnArrayOfOther.isa, 0);
                goto LABEL_26;
              }
            }
LABEL_25:
            WebKit::valueToTypeString(v29, v23);
            obuint64_t j = (__CFString *)objc_claimAutoreleasedReturnValue();
            WebKit::constructExpectedMessage((WebKit *)v28, (NSString *)v37[5], &obj->isa, 0);
LABEL_26:
            uint64_t v11 = 0;
            *uint64_t v25 = (id)objc_claimAutoreleasedReturnValue();
LABEL_27:

            goto LABEL_28;
          }
        }
        else
        {

          if (a4) {
            goto LABEL_25;
          }
        }
        uint64_t v11 = 0;
LABEL_28:

        _Block_object_dispose(&v36, 8);
        id v15 = v26;
        goto LABEL_29;
      }
    }
    else
    {
    }
    uint64_t v11 = WebKit::validateSingleObject(v7, v8, (WebKit *)v12, a4);
    goto LABEL_30;
  }
  uint64_t v11 = WebKit::validateArray(v7, v8, v10, a4);

LABEL_30:
  return v11;
}

void sub_199372038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id WebKit::toErrorString(WebKit *this, NSString *a2, NSString *a3, NSString *a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = this;
  id v7 = a2;
  id v8 = a3;
  id v9 = [NSString alloc];
  uint64_t v10 = v8;
  if ([(NSString *)v10 hasSuffix:@"."])
  {
    uint64_t v11 = [(NSString *)v10 substringToIndex:[(NSString *)v10 length] - 1];
  }
  else
  {
    uint64_t v11 = v10;
  }
  id v12 = v11;

  id v13 = (void *)[v9 initWithFormat:v12 arguments:va];
  if ([(WebKit *)v6 length]
    && [(NSString *)v7 length]
    && [v13 containsString:@"value is invalid"])
  {

    id v7 = 0;
  }
  if ([(WebKit *)v6 length] && [(NSString *)v7 length])
  {
    id v15 = NSString;
    WebKit::lowercaseFirst((WebKit *)v13, v14);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = [v15 stringWithFormat:@"Invalid call to %@. The '%@' value is invalid, because %@.", v6, v7, v16];
  }
  else if ([(WebKit *)v6 length] || ![(NSString *)v7 length])
  {
    if (![(WebKit *)v6 length]) {
      goto LABEL_20;
    }
    uint64_t v18 = NSString;
    id v19 = v13;
    if ([v19 length])
    {
      unsigned int v20 = [v19 substringToIndex:1];
      uint64_t v21 = [v20 uppercaseString];
      uint64_t v22 = [v19 substringFromIndex:1];
      id v16 = [v21 stringByAppendingString:v22];
    }
    else
    {
      id v16 = v19;
    }

    uint64_t v17 = [v18 stringWithFormat:@"Invalid call to %@. %@.", v6, v16];
  }
  else
  {
    CFTypeRef v24 = NSString;
    WebKit::lowercaseFirst((WebKit *)v13, v23);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = [v24 stringWithFormat:@"The '%@' value is invalid, because %@.", v7, v16];
  }
  uint64_t v25 = (void *)v17;

  id v13 = v25;
LABEL_20:

  return v13;
}

void sub_19937236C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

BOOL WebKit::validateObject(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v14 = 0;
  WebKit::validate(0, v7, v9, (uint64_t)&v14);
  uint64_t v10 = (NSString *)v14;
  id v12 = v10;
  if (a4 && v10)
  {
    WebKit::toErrorString(0, v8, v10, v11);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v12 == 0;
}

void sub_1993724C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::lowercaseFirst(WebKit *this, NSString *a2)
{
  int v2 = this;
  if ([(WebKit *)v2 length])
  {
    unint64_t v3 = [(WebKit *)v2 substringToIndex:1];
    uint64_t v4 = [v3 lowercaseString];
    unint64_t v5 = [(WebKit *)v2 substringFromIndex:1];
    uint64_t v6 = [v4 stringByAppendingString:v5];
  }
  else
  {
    uint64_t v6 = v2;
  }

  return v6;
}

void sub_199372598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef WebKit::toJSError(WebKit *this, const OpaqueJSContext *a2, NSString *a3, NSString *a4, NSString *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = a4;
  WebKit::toErrorString(v8, v9, v10, v11);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  id v13 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v16 = 138543362;
    *(void *)&v16[4] = v12;
    _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Exception thrown: %{public}@", v16, 0xCu);
  }
  *(void *)id v16 = WebKit::toJSValueRef(this, v12, 1);
  JSObjectRef Error = JSObjectMakeError(this, 1uLL, (const JSValueRef *)v16, 0);

  return Error;
}

void sub_199372700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef WebKit::toJSRejectedPromise(WebKit *this, const OpaqueJSContext *a2, NSString *a3, NSString *a4, NSString *a5)
{
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = a4;
  id v12 = WebKit::toJSError(this, v8, v9, v10, v11);
  if (v12)
  {
    id v13 = (void *)MEMORY[0x1E4F30938];
    id v14 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    id v12 = [v13 valueWithJSValueRef:v12 inContext:v14];
  }
  id v15 = (void *)MEMORY[0x1E4F30938];
  id v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
  uint64_t v17 = [v15 valueWithNewPromiseRejectedWithReason:v12 inContext:v16];

  JSObjectRef v18 = JSValueToObject(this, (JSValueRef)[v17 JSValueRef], 0);
  return v18;
}

void sub_199372868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(WebKit *this, NSLocale *a2)
{
  int v2 = this;
  unint64_t v3 = [(WebKit *)v2 languageCode];

  if (v3)
  {
    uint64_t v4 = [(WebKit *)v2 countryCode];
    uint64_t v5 = [v4 length];

    if (v5)
    {
      uint64_t v6 = NSString;
      id v7 = [(WebKit *)v2 languageCode];
      id v8 = [(WebKit *)v2 countryCode];
      id v9 = [v6 stringWithFormat:@"%@-%@", v7, v8];
    }
    else
    {
      id v9 = [(WebKit *)v2 languageCode];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_199372998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t WebKit::storageSizeOf(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN6WebKit13storageSizeOfEP12NSDictionaryIP8NSStringS2_E_block_invoke;
  v3[3] = &unk_1E5813E60;
  v3[4] = &v4;
  [a1 enumerateKeysAndObjectsUsingBlock:v3];
  unint64_t v1 = (unint64_t)v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_199372A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit13storageSizeOfEP12NSDictionaryIP8NSStringS2_E_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = [v7 lengthOfBytesUsingEncoding:4];
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24)
                                                              + (double)(unint64_t)([v5 lengthOfBytesUsingEncoding:4]+ v6);
}

void sub_199372B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::anyItemsExceedQuota(void *a1, uint64_t a2, void *a3)
{
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = __Block_byref_object_copy__15;
  uint64_t v11 = __Block_byref_object_dispose__15;
  id v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN6WebKit19anyItemsExceedQuotaEP12NSDictionarymPU15__autoreleasingP8NSString_block_invoke;
  v6[3] = &unk_1E5813E88;
  v6[5] = &v7;
  v6[6] = a2;
  v6[4] = &v13;
  [a1 enumerateKeysAndObjectsUsingBlock:v6];
  if (a3) {
    *a3 = (id) v8[5];
  }
  uint64_t v4 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

void sub_199372C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19anyItemsExceedQuotaEP12NSDictionarymPU15__autoreleasingP8NSString_block_invoke(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v10 = a2;
  id v8 = a3;
  uint64_t v9 = [v10 lengthOfBytesUsingEncoding:4];
  if ((unint64_t)([v8 lengthOfBytesUsingEncoding:4] + v9) > a1[6])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_199372D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::validateArray(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = (WebKit *)[v9 firstObject];
  objc_opt_class();
  uint64_t v11 = WTF::dynamic_objc_cast<NSArray>(v8);
  id v12 = v11;
  if (v11)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v13 = v11;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v14)
    {
      uint64_t v29 = v7;
      uint64_t v15 = *(void *)v31;
LABEL_4:
      uint64_t v16 = 0;
      while (1)
      {
        if (*(void *)v31 != v15) {
          objc_enumerationMutation(v13);
        }
        uint64_t v17 = *(void **)(*((void *)&v30 + 1) + 8 * v16);
        if ((WebKit::validateSingleObject(0, v17, v10, 0) & 1) == 0) {
          break;
        }
        if (v14 == ++v16)
        {
          uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v34 count:16];
          if (v14) {
            goto LABEL_4;
          }
          a4 = 1;
          goto LABEL_16;
        }
      }
      if (a4)
      {
        JSObjectRef v18 = NSString;
        uint64_t v7 = v29;
        id v19 = WebKit::classToClassString(v10, (objc_class *)1);
        unsigned int v20 = [v18 stringWithFormat:@"an array of %@", v19];
        WebKit::valueToTypeString((WebKit *)v17, v21);
        uint64_t v22 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::constructExpectedMessage(v29, v20, v22, (NSString *)1);
        *(void *)a4 = (id)objc_claimAutoreleasedReturnValue();

        a4 = 0;
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v7 = v29;
    }
    else
    {
      a4 = 1;
    }
LABEL_17:
  }
  else if (a4)
  {
    uint64_t v23 = NSString;
    CFTypeRef v24 = WebKit::classToClassString(v10, (objc_class *)1);
    uint64_t v25 = [v23 stringWithFormat:@"an array of %@", v24];
    WebKit::valueToTypeString((WebKit *)v8, v26);
    uint64_t v27 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::constructExpectedMessage(v7, v25, v27, 0);
    *(void *)a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }

  return a4;
}

void sub_199372FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::validateSingleObject(void *a1, void *a2, WebKit *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  id v8 = a2;
  objc_opt_class();
  id v9 = WTF::dynamic_objc_cast<NSNumber>(v8);
  id v10 = v9;
  if (v9 && ([v9 doubleValue], objc_msgSend(v10, "doubleValue"), fabs(v11) == INFINITY))
  {
    if (a4) {
      goto LABEL_12;
    }
  }
  else if (objc_opt_isKindOfClass())
  {
    if (!v10 || (WebKit *)objc_opt_class() == a3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      a4 = 1;
      goto LABEL_14;
    }
    if (a4) {
      goto LABEL_12;
    }
  }
  else if (a4)
  {
LABEL_12:
    WebKit::classToClassString(a3, 0);
    id v12 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::valueToTypeString((WebKit *)v8, v13);
    uint64_t v14 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::constructExpectedMessage(v7, v12, v14, 0);
    *(void *)a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }
LABEL_14:

  return a4;
}

void sub_199373278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::constructExpectedMessage(WebKit *this, NSString *a2, NSString *a3, NSString *a4)
{
  int v4 = (int)a4;
  uint64_t v7 = this;
  id v8 = a2;
  id v9 = a3;
  if (!v4) {
    goto LABEL_5;
  }
  if ([(WebKit *)v7 length])
  {
    id v10 = NSString;
    double v11 = @"'%@' is expected to be %@, but %@ was provided in the array";
LABEL_7:
    uint64_t v13 = objc_msgSend(v10, "stringWithFormat:", v11, v7, v8, v9);
    goto LABEL_11;
  }
  if (![(WebKit *)v7 length])
  {
    id v10 = NSString;
    uint64_t v14 = @"%@ is expected, but %@ was provided in the array";
  }
  else
  {
LABEL_5:
    uint64_t v12 = [(WebKit *)v7 length];
    id v10 = NSString;
    if (v12)
    {
      double v11 = @"'%@' is expected to be %@, but %@ was provided";
      goto LABEL_7;
    }
    uint64_t v14 = @"%@ is expected, but %@ was provided";
  }
  uint64_t v13 = objc_msgSend(v10, "stringWithFormat:", v14, v8, v9);
LABEL_11:
  uint64_t v15 = (void *)v13;

  return v15;
}

void sub_1993733C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *WebKit::classToClassString(WebKit *this, objc_class *a2)
{
  int v2 = (int)a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (qword_1EB35A210 != -1) {
    dispatch_once(&qword_1EB35A210, &__block_literal_global_38);
  }
  int v4 = &_MergedGlobals_130;
  if (v2) {
    int v4 = &qword_1EB35A208;
  }
  id v5 = (id)*v4;
  uint64_t v6 = [v5 objectForKey:this];
  if (!v6)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v14;
      uint64_t v6 = @"unknown";
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (-[WebKit isSubclassOfClass:](this, "isSubclassOfClass:", v11, (void)v13))
          {
            uint64_t v6 = [v7 objectForKey:v11];
            goto LABEL_17;
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v6 = @"unknown";
    }
LABEL_17:
  }

  return v6;
}

void sub_19937358C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *WebKit::valueToTypeString(WebKit *this, NSObject *a2)
{
  int v2 = this;
  objc_opt_class();
  unint64_t v3 = WTF::dynamic_objc_cast<NSNumber>(v2);
  int v4 = v3;
  if (!v3)
  {
    objc_opt_class();
    id v7 = WTF::dynamic_objc_cast<JSValue>(v2);
    uint64_t v8 = v7;
    if (v7)
    {
      if ([v7 isUndefined])
      {
        uint64_t v6 = @"undefined";
LABEL_13:

        goto LABEL_14;
      }
      if ([v8 _isRegularExpression])
      {
        uint64_t v6 = @"a regular expression";
        goto LABEL_13;
      }
      if ([v8 _isThenable])
      {
        uint64_t v6 = @"a promise";
        goto LABEL_13;
      }
      if ([v8 _isFunction])
      {
        uint64_t v6 = @"a function";
        goto LABEL_13;
      }
    }

    goto LABEL_16;
  }
  [v3 doubleValue];
  [v4 doubleValue];
  if (fabs(v5) == INFINITY)
  {
    uint64_t v6 = @"Infinity";
LABEL_14:

    goto LABEL_17;
  }
LABEL_16:

  uint64_t v9 = (WebKit *)objc_opt_class();
  WebKit::classToClassString(v9, 0);
  uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_17:

  return v6;
}

void sub_199373710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKitL18classToClassStringEP10objc_classb_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  unint64_t v1 = (void *)_MergedGlobals_130;
  _MergedGlobals_130 = v0;

  [(id)_MergedGlobals_130 setObject:@"a BOOLean" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"a number" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"a string" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"a value" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"null" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"an array" forKey:objc_opt_class()];
  [(id)_MergedGlobals_130 setObject:@"an object" forKey:objc_opt_class()];
  uint64_t v2 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  unint64_t v3 = (void *)qword_1EB35A208;
  qword_1EB35A208 = v2;

  [(id)qword_1EB35A208 setObject:@"BOOLeans" forKey:objc_opt_class()];
  [(id)qword_1EB35A208 setObject:@"numbers" forKey:objc_opt_class()];
  [(id)qword_1EB35A208 setObject:@"strings" forKey:objc_opt_class()];
  [(id)qword_1EB35A208 setObject:@"values" forKey:objc_opt_class()];
  [(id)qword_1EB35A208 setObject:@"null values" forKey:objc_opt_class()];
  [(id)qword_1EB35A208 setObject:@"arrays" forKey:objc_opt_class()];
  int v4 = (void *)qword_1EB35A208;
  uint64_t v5 = objc_opt_class();

  return [v4 setObject:@"objects" forKey:v5];
}

void ___ZN6WebKitL11validateSetEP8NSStringP8NSObjectP12NSOrderedSetPU15__autoreleasingS1__block_invoke(uint64_t a1, WebKit *a2, WebKit *a3)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) length]) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendString:@" or "];
  }
  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  WebKit::classToClassString(a2, 0);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "appendString:");

  if (a3)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendString:@" of "];
    id v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    WebKit::classToClassString(a3, (objc_class *)1);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "appendString:");
  }
}

void sub_199373AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::WebExtensionWindow(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v6 = *(atomic_uint **)(a2 + 24);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = v6;
  objc_initWeak((id *)(a1 + 32), v5);
  *(_WORD *)(a1 + 40) &= 0xFFF8u;
  if (objc_opt_respondsToSelector()) {
    __int16 v7 = 8;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFF7 | v7;
  if (objc_opt_respondsToSelector()) {
    __int16 v8 = 16;
  }
  else {
    __int16 v8 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFEF | v8;
  if (objc_opt_respondsToSelector()) {
    __int16 v9 = 32;
  }
  else {
    __int16 v9 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFDF | v9;
  if (objc_opt_respondsToSelector()) {
    __int16 v10 = 64;
  }
  else {
    __int16 v10 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFBF | v10;
  if (objc_opt_respondsToSelector()) {
    __int16 v11 = 128;
  }
  else {
    __int16 v11 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFF7F | v11;
  if (objc_opt_respondsToSelector()) {
    __int16 v12 = 256;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFEFF | v12;
  if (objc_opt_respondsToSelector()) {
    __int16 v13 = 512;
  }
  else {
    __int16 v13 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFDFF | v13;
  if (objc_opt_respondsToSelector()) {
    __int16 v14 = 1024;
  }
  else {
    __int16 v14 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xF3FF | v14;
  if (objc_opt_respondsToSelector()) {
    __int16 v15 = 4096;
  }
  else {
    __int16 v15 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xEFFF | v15;
  if (objc_opt_respondsToSelector()) {
    __int16 v16 = 0x2000;
  }
  else {
    __int16 v16 = 0;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xDFFF | v16;

  return a1;
}

void sub_199373D18(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::parameters(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (a2)
  {
    WebKit::WebExtensionWindow::tabs((uint64_t)this, 0, (uint64_t *)&v33);
    long long v31 = 0;
    uint64_t v32 = 0;
    if (v34)
    {
      if (v34 >= 0x1745D18)
      {
        __break(0xC471u);
        return;
      }
      LODWORD(v32) = 176 * v34 / 0xB0;
      long long v31 = (WTF *)WTF::fastMalloc((WTF *)(176 * v34));
      if (v34)
      {
        __int16 v7 = v33;
        uint64_t v8 = 8 * v34;
        do
        {
          WebKit::WebExtensionTab::parameters(*v7, (uint64_t)v37);
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t *)&v31, (uint64_t)v37);
          if (v41)
          {
            __int16 v9 = v40;
            unint64_t v40 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, v6);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
          }
          if (v39)
          {
            __int16 v10 = v38;
            uint64_t v38 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2) {
                WTF::StringImpl::destroy(v10, v6);
              }
              else {
                *(_DWORD *)v10 -= 2;
              }
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
    }
    if (HIDWORD(v36)) {
      WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct((uint64_t)v35, (uint64_t)v35 + 176 * HIDWORD(v36));
    }
    __int16 v11 = v35;
    if (v35)
    {
      uint64_t v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree(v11, v6);
    }
    uint64_t v35 = v31;
    uint64_t v12 = v32;
    long long v31 = 0;
    uint64_t v32 = 0;
    uint64_t v36 = v12;
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v6);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v13);
  }
  double v14 = WebKit::WebExtensionWindow::frame((WebKit::WebExtensionWindow *)this);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  *(void *)a3 = this[2];
  *(unsigned char *)(a3 + 8) = 1;
  *(unsigned char *)(a3 + 16) = WebKit::WebExtensionWindow::state((WebKit::WebExtensionWindow *)this);
  *(unsigned char *)(a3 + 17) = 1;
  *(unsigned char *)(a3 + 18) = WebKit::WebExtensionWindow::type((WebKit::WebExtensionWindow *)this);
  *(unsigned char *)(a3 + 19) = 1;
  if (a2)
  {
    *(void *)(a3 + 24) = v35;
    uint64_t v21 = v36;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)(a3 + 32) = v21;
    char v22 = 1;
  }
  else
  {
    char v22 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  *(unsigned char *)(a3 + 40) = v22;
  v42.origin.x = v14;
  v42.origin.y = v16;
  v42.size.width = v18;
  v42.size.height = v20;
  if (CGRectIsNull(v42))
  {
    char v23 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
  else
  {
    *(double *)(a3 + 48) = v14;
    *(CGFloat *)(a3 + 56) = v16;
    char v23 = 1;
    *(CGFloat *)(a3 + 64) = v18;
    *(CGFloat *)(a3 + 72) = v20;
  }
  *(unsigned char *)(a3 + 80) = v23;
  CFTypeRef v24 = this[3];
  if (v24
    && v24[1]
    && WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL(this + 4)
    && ((uint64_t v25 = this[3]) == 0 ? (v27 = 0) : (v26 = v25[1]) != 0 ? (v27 = v26 - 16) : (v27 = 0),
        *(unsigned char *)(v27 + 552)))
  {
    WebKit::WebExtensionContext::getWindow(v27, *(void *)(v27 + 544), 0, 0, 0, v37);
    uint64_t v28 = v37[0];
    BOOL v29 = v37[0] == (void)this;
    v37[0] = 0;
    if (v28) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v28);
    }
  }
  else
  {
    BOOL v29 = 0;
  }
  *(unsigned char *)(a3 + 88) = v29;
  *(unsigned char *)(a3 + 89) = 1;
  *(unsigned char *)(a3 + 90) = WebKit::WebExtensionWindow::isPrivate((WebKit::WebExtensionWindow *)this);
  *(unsigned char *)(a3 + 91) = 1;
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v30);
}

void sub_19937404C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,WTF::StringImpl *a23,char a24)
{
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v25);
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v26);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::tabs(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4
    || !*(void *)(v4 + 8)
    || (__int16 v7 = (id *)(a1 + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    || (~*(unsigned __int16 *)(a1 + 40) & 0x18) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  id WeakRetained = objc_loadWeakRetained(v7);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      __int16 v11 = (id *)(v10 - 16);
    }
    else {
      __int16 v11 = 0;
    }
  }
  else
  {
    __int16 v11 = 0;
  }
  uint64_t v12 = WebKit::WebExtensionAction::wrapper(v11);
  __int16 v13 = [WeakRetained tabsForWebExtensionContext:v12];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by tabsForWebExtensionContext: is not an array"];
  }
  if (![v13 count])
  {
    *a3 = 0;
    a3[1] = 0;
LABEL_46:

    return;
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unint64_t v14 = [v13 count];
  if (!v14)
  {
LABEL_17:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v15 = v13;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v35 objects:v44 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v36 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = *(void *)(a1 + 24);
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 8);
            if (v20) {
              uint64_t v21 = (uint64_t *)(v20 - 16);
            }
            else {
              uint64_t v21 = 0;
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          WebKit::WebExtensionContext::getOrCreateTab(v21, *(void **)(*((void *)&v35 + 1) + 8 * i), (uint64_t)buf);
          LODWORD(v22) = HIDWORD(v40);
          if (HIDWORD(v40) == v40)
          {
            char v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)buf);
            uint64_t v22 = HIDWORD(v40);
            uint64_t v24 = v39;
            uint64_t v25 = *v23;
            *char v23 = 0;
            *(void *)(v24 + 8 * v22) = v25;
          }
          else
          {
            uint64_t v26 = *(void *)buf;
            *(void *)buf = 0;
            *(void *)(v39 + 8 * HIDWORD(v40)) = v26;
          }
          HIDWORD(v40) = v22 + 1;
          uint64_t v27 = *(void *)buf;
          *(void *)buf = 0;
          if (v27) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v27);
          }
        }
        uint64_t v16 = [v15 countByEnumeratingWithState:&v35 objects:v44 count:16];
      }
      while (v16);
    }

    if ((a2 & 1) == 0)
    {
      WebKit::WebExtensionWindow::activeTab(&v34, a1, 1);
      uint64_t v30 = v34;
      if (!v34 || !HIDWORD(v40))
      {
LABEL_42:
        uint64_t v32 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          if (v30) {
            id v33 = objc_loadWeakRetained((id *)(v30 + 32));
          }
          else {
            id v33 = 0;
          }
          *(_DWORD *)buf = 138740227;
          *(void *)&buf[4] = v33;
          __int16 v42 = 2117;
          id v43 = v15;
          _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Array returned by tabsForWebExtensionContext: does not contain the active tab; %{sensitive}@ not in %{sensitive}@",
            buf,
            0x16u);
          if (v30) {
        }
          }
        *a3 = 0;
        a3[1] = 0;
        if (v30) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v30);
        }
        goto LABEL_45;
      }
      uint64_t v31 = 0;
      while ((WebKit::WebExtensionTab::operator==(v30, *(void *)(v39 + 8 * v31)) & 1) == 0)
      {
        if (++v31 >= (unint64_t)HIDWORD(v40)) {
          goto LABEL_42;
        }
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref(v30);
    }
    *a3 = v39;
    uint64_t v29 = v40;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    a3[1] = v29;
LABEL_45:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v28);
    goto LABEL_46;
  }
  if (!(v14 >> 29))
  {
    LODWORD(v40) = v14;
    uint64_t v39 = WTF::fastMalloc((WTF *)(8 * v14));
    goto LABEL_17;
  }
  __break(0xC471u);
}

void sub_1993744B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::state(WebKit::WebExtensionWindow *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1
    && *(void *)(v1 + 8)
    && (unint64_t v3 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    && (*((_WORD *)this + 20) & 0x40) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v3);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = (id *)(v8 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
    unint64_t v11 = [WeakRetained windowStateForWebExtensionContext:v10];
    if (v11 >= 4) {
      unsigned __int8 v4 = 0;
    }
    else {
      unsigned __int8 v4 = v11;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

void sub_1993745EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::type(WebKit::WebExtensionWindow *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  unint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*((_WORD *)this + 20) & 0x20) == 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  BOOL v4 = [WeakRetained windowTypeForWebExtensionContext:v10] == 1;

  return v4;
}

void sub_1993746B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::isPrivate(WebKit::WebExtensionWindow *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 20);
  if ((v1 & 4) == 0)
  {
    uint64_t v3 = *((void *)this + 3);
    if (!v3 || !*(void *)(v3 + 8)) {
      return 0;
    }
    BOOL result = WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4);
    if (!result) {
      return result;
    }
    if ((*((_WORD *)this + 20) & 0x100) == 0) {
      return 0;
    }
    id WeakRetained = objc_loadWeakRetained((id *)this + 4);
    uint64_t v6 = *((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v8 = (id *)(v7 - 16);
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v9 = WebKit::WebExtensionAction::wrapper(v8);
    if ([WeakRetained isPrivateForWebExtensionContext:v9]) {
      __int16 v10 = 2;
    }
    else {
      __int16 v10 = 0;
    }
    *((_WORD *)this + 20) = *((_WORD *)this + 20) & 0xFFFD | v10;

    unsigned int v1 = *((unsigned __int16 *)this + 20);
    *((_WORD *)this + 20) = v1 | 4;
  }
  return (v1 >> 1) & 1;
}

void sub_1993747AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::matches(WebKit::WebExtensionWindow *a1, unsigned __int8 a2)
{
  if (WebKit::WebExtensionWindow::isPrivate(a1))
  {
    uint64_t v4 = *(void *)(*((void *)a1 + 3) + 8);
    uint64_t v5 = v4 ? v4 - 16 : 0;
    if (!*(unsigned char *)(v5 + 273)) {
      return 0;
    }
  }
  if (WebKit::WebExtensionWindow::type(a1)) {
    return (a2 >> 1) & 1;
  }
  return a2 & 1;
}

uint64_t WebKit::WebExtensionWindow::matches(WebKit::WebExtensionWindow *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (WebKit::WebExtensionWindow::isPrivate(a1))
  {
    uint64_t v8 = *(void *)(*((void *)a1 + 3) + 8);
    uint64_t v9 = v8 ? v8 - 16 : 0;
    if (!*(unsigned char *)(v9 + 273)) {
      return 0;
    }
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v10 = *(void *)(a2 + 40);
    if (*((void *)a1 + 2) != v10 && v10 != -3) {
      return 0;
    }
  }
  if (!*(unsigned char *)(a2 + 57) || (uint64_t result = WebKit::WebExtensionWindow::matches(a1, *(unsigned char *)(a2 + 56)), result))
  {
    if (*(unsigned char *)(a2 + 61))
    {
      int isFrontmost = WebKit::WebExtensionWindow::isFrontmost(a1);
      if (!*(unsigned char *)(a2 + 61))
      {
        uint64_t v20 = (WebKit::WebExtensionWindow *)std::__throw_bad_optional_access[abi:sn180100]();
        return WebKit::WebExtensionWindow::isFrontmost(v20);
      }
      if (*(unsigned __int8 *)(a2 + 60) != isFrontmost) {
        return 0;
      }
    }
    if (*(unsigned char *)(a2 + 59) || (uint64_t result = 1, *(unsigned char *)(a2 + 48)) && *(void *)(a2 + 40) == -3)
    {
      uint64_t v14 = *((void *)a1 + 3);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 8);
        if (v15) {
          uint64_t v16 = v15 - 16;
        }
        else {
          uint64_t v16 = 0;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      WebKit::WebExtensionContext::getWindow(v16, -3, a3, a4, 0, &v21);
      uint64_t v17 = v21;
      if (v21)
      {
        uint64_t v18 = *((void *)a1 + 2);
        uint64_t v19 = *(void *)(v21 + 16);
        uint64_t v21 = 0;
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v17);
        if (v18 == v19) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL WebKit::WebExtensionWindow::isFrontmost(WebKit::WebExtensionWindow *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1
    || !*(void *)(v1 + 8)
    || !WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
  {
    return 0;
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = v4 ? v4 - 16 : 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (!*(_DWORD *)(v5 + 540)) {
    return 0;
  }
  WebKit::WebExtensionContext::getWindow(v5, **(void **)(v5 + 528), 0, 0, 0, (uint64_t *)&v9);
  uint64_t v6 = (uint64_t)v9;
  BOOL v7 = v9 == this;
  uint64_t v9 = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
  }
  return v7;
}

void WebKit::WebExtensionWindow::activeTab(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4
    || !*(void *)(v4 + 8)
    || (BOOL v7 = (id *)(a1 + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    || (~*(unsigned __int16 *)(a1 + 40) & 0x18) != 0)
  {
    *a3 = 0;
    return;
  }
  id WeakRetained = objc_loadWeakRetained(v7);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      unint64_t v11 = (id *)(v10 - 16);
    }
    else {
      unint64_t v11 = 0;
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v12 = WebKit::WebExtensionAction::wrapper(v11);
  __int16 v13 = [WeakRetained activeTabForWebExtensionContext:v12];

  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15) {
        uint64_t v16 = (uint64_t *)(v15 - 16);
      }
      else {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    WebKit::WebExtensionContext::getOrCreateTab(v16, v13, (uint64_t)&v34);
    if ((a2 & 1) == 0)
    {
      WebKit::WebExtensionWindow::tabs(a1, 1, (uint64_t *)&v32);
      uint64_t v18 = v33;
      if (!v33)
      {
LABEL_23:
        uint64_t v20 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          id v23 = objc_loadWeakRetained((id *)(v34 + 32));
          id v24 = objc_loadWeakRetained(v7);
          uint64_t v25 = *(void *)(a1 + 24);
          if (v25)
          {
            uint64_t v27 = *(void *)(v25 + 8);
            if (v27) {
              uint64_t v26 = (id *)(v27 - 16);
            }
            else {
              uint64_t v26 = 0;
            }
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v28 = WebKit::WebExtensionAction::wrapper(v26);
          uint64_t v29 = [v24 tabsForWebExtensionContext:v28];
          uint64_t v30 = (void *)v29;
          uint64_t v31 = MEMORY[0x1E4F1CBF0];
          if (v29) {
            uint64_t v31 = v29;
          }
          *(_DWORD *)buf = 138740227;
          id v36 = v23;
          __int16 v37 = 2117;
          uint64_t v38 = v31;
          _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "Array returned by tabsForWebExtensionContext: does not contain the active tab; %{sensitive}@ not in %{sensitive}@",
            buf,
            0x16u);
        }
        *a3 = 0;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v21);
        uint64_t v22 = v34;
        uint64_t v34 = 0;
        if (v22) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v22);
        }
        goto LABEL_28;
      }
      uint64_t v19 = v32;
      while (*v19 != v34)
      {
        ++v19;
        if (!--v18) {
          goto LABEL_23;
        }
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v17);
    }
    *a3 = v34;
  }
  else
  {
    *a3 = 0;
  }
LABEL_28:
}

void sub_199374CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v18);
  uint64_t v19 = a12;
  a12 = 0;
  if (v19) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::setState(uint64_t a1, int a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (~*(unsigned __int16 *)(a1 + 40) & 0xC0) == 0)
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    if ((a2 - 1) < 3) {
      uint64_t v9 = (a2 - 1) + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11) {
        uint64_t v12 = (id *)(v11 - 16);
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v17 = WebKit::WebExtensionAction::wrapper(v12);
    ++*(_DWORD *)a1;
    uint64_t v18 = *a3;
    *a3 = 0;
    uint64_t v19 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v19 = MEMORY[0x1E4F14398];
    v19[1] = 50331650;
    v19[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v19[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v19[4] = a1;
    v19[5] = v18;
    uint64_t v20 = _Block_copy(v19);

    uint64_t v21 = _Block_copy(v20);
    [WeakRetained setWindowState:v9 forWebExtensionContext:v17 completionHandler:v21];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, &cfstr_ItIsNotImpleme_6.isa, a4, &v23);
    __int16 v13 = v23;
    id v23 = 0;
    id v24 = v13;
    char v25 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v25)
    {
      uint64_t v15 = v24;
      id v24 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    uint64_t v16 = v23;
    id v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
}

void sub_199374F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::isOpen(WebKit::WebExtensionWindow *this)
{
  return (*((_WORD *)this + 20) & 1) != 0
      && (uint64_t v1 = *((void *)this + 3)) != 0
      && *(void *)(v1 + 8)
      && WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4);
}

void WebKit::WebExtensionWindow::focus(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (BOOL v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_WORD *)(a1 + 40) & 0x1000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v7);
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13) {
        uint64_t v14 = (id *)(v13 - 16);
      }
      else {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = WebKit::WebExtensionAction::wrapper(v14);
    ++*(_DWORD *)a1;
    uint64_t v16 = *a2;
    *a2 = 0;
    uint64_t v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = a1;
    v17[5] = v16;
    uint64_t v18 = _Block_copy(v17);

    uint64_t v19 = _Block_copy(v18);
    [WeakRetained focusForWebExtensionContext:v15 completionHandler:v19];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, &cfstr_ItIsNotImpleme_7.isa, a4, &v21);
    uint64_t v8 = v21;
    uint64_t v21 = 0;
    uint64_t v22 = v8;
    char v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if (v23)
    {
      uint64_t v10 = v22;
      uint64_t v22 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v21;
    uint64_t v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_199375210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

double WebKit::WebExtensionWindow::frame(WebKit::WebExtensionWindow *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return *MEMORY[0x1E4F1DB20];
  }
  if (!*(void *)(v1 + 8)) {
    return *MEMORY[0x1E4F1DB20];
  }
  uint64_t v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*((_WORD *)this + 20) & 0x200) == 0)
  {
    return *MEMORY[0x1E4F1DB20];
  }
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (id *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebExtensionAction::wrapper(v9);
  [WeakRetained frameForWebExtensionContext:v10];
  *(void *)&double v4 = (unint64_t)CGRectStandardize(v11);

  return v4;
}

void sub_1993753B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::setFrame(uint64_t a1, uint64_t *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, NSString *a8)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9
    && *(void *)(v9 + 8)
    && (uint64_t v15 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (~*(unsigned __int16 *)(a1 + 40) & 0x600) == 0)
  {
    v37.origin.double x = a3;
    v37.origin.double y = a4;
    v37.size.double width = a5;
    v37.size.double height = a6;
    CGRect v38 = CGRectStandardize(v37);
    double x = v38.origin.x;
    double y = v38.origin.y;
    double width = v38.size.width;
    double height = v38.size.height;
    id WeakRetained = objc_loadWeakRetained(v15);
    uint64_t v20 = *(void *)(a1 + 24);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21) {
        uint64_t v22 = (id *)(v21 - 16);
      }
      else {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v27 = WebKit::WebExtensionAction::wrapper(v22);
    ++*(_DWORD *)a1;
    uint64_t v28 = *a2;
    *a2 = 0;
    uint64_t v29 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v29 = MEMORY[0x1E4F14398];
    v29[1] = 50331650;
    v29[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v29[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v29[4] = a1;
    v29[5] = v28;
    uint64_t v30 = _Block_copy(v29);

    uint64_t v31 = _Block_copy(v30);
    objc_msgSend(WeakRetained, "setFrame:forWebExtensionContext:completionHandler:", v27, v31, x, y, width, height);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, &cfstr_ItIsNotImpleme_0.isa, a8, &v33);
    char v23 = v33;
    unsigned int v33 = 0;
    uint64_t v34 = v23;
    char v35 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if (v35)
    {
      char v25 = v34;
      uint64_t v34 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v24);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    uint64_t v26 = v33;
    unsigned int v33 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
}

void sub_19937561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::close(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5
    && *(void *)(v5 + 8)
    && (uint64_t v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_WORD *)(a1 + 40) & 0x2000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v7);
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13) {
        uint64_t v14 = (id *)(v13 - 16);
      }
      else {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = WebKit::WebExtensionAction::wrapper(v14);
    ++*(_DWORD *)a1;
    uint64_t v16 = *a2;
    *a2 = 0;
    uint64_t v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = a1;
    v17[5] = v16;
    uint64_t v18 = _Block_copy(v17);

    uint64_t v19 = _Block_copy(v18);
    [WeakRetained closeForWebExtensionContext:v15 completionHandler:v19];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.remove()", 0, &cfstr_ItIsNotImpleme.isa, a4, &v21);
    uint64_t v8 = v21;
    uint64_t v21 = 0;
    uint64_t v22 = v8;
    char v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if (v23)
    {
      uint64_t v10 = v22;
      uint64_t v22 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    CGRect v11 = v21;
    uint64_t v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_1993758C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    double v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for setWindowState: %{public}@", buf, 0xCu);
    }
    uint64_t v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    CGRect v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_199375BAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    double v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for window focus: %{public}@", buf, 0xCu);
    }
    uint64_t v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    CGRect v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_199375E94(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    double v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for setFrame: %{public}@", buf, 0xCu);
    }
    uint64_t v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    CGRect v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_19937617C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    double v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error for window close: %{public}@", buf, 0xCu);
    }
    uint64_t v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"windows.remove()", 0, v6, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    CGRect v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
  }
}

void sub_199376464(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFileSystemStorageConnection::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1736)
  {
    uint64_t v3 = this;
    this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v4)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 128);
      return v5(v3, this);
    }
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::didReceiveWebFullScreenManagerMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  ++*(_DWORD *)(this + 16);
  char v4 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6CE:
      this = WebKit::WebFullScreenManager::didEnterFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6CF:
      this = WebKit::WebFullScreenManager::didExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6D0:
      this = WebKit::WebFullScreenManager::requestExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6D1:
      uint64_t v5 = (atomic_uchar *volatile *)a2;
      this = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v12 = this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, v5);
        uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v6 = &unk_1EEA00590;
        v6[1] = v12;
        uint64_t v7 = v13;
        uint64_t v13 = 0;
        v6[2] = v7;
        uint64_t v11 = (uint64_t)v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
        WebKit::WebFullScreenManager::requestRestoreFullScreen((WTF::StringImpl *)v3);
        this = v11;
        if (v11) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      break;
    case 0x6D2:
      this = WebKit::WebFullScreenManager::restoreScrollPosition(this);
      break;
    case 0x6D3:
      uint64_t v8 = *(void *)(*(void *)(*(void *)(this + 72) + 48) + 160);
      (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v8 + 56))(v8, a2);
      this = WebCore::ScrollableArea::visibleContentRect();
      *(void *)(v3 + 56) = this;
      break;
    case 0x6D4:
      unsigned __int16 v9 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v9 <= 0xFFu)
      {
        a2 = *(IPC::Connection **)v4;
        a3 = (IPC::Decoder *)*((void *)v4 + 1);
        *(void *)char v4 = 0;
        *((void *)v4 + 1) = 0;
        this = *((void *)v4 + 3);
        if (this) {
          BOOL v10 = a3 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          goto LABEL_25;
        }
      }
      else
      {
        this = WebKit::WebFullScreenManager::setAnimatingFullScreen(v3, v9 != 0);
      }
      break;
    case 0x6D5:
      this = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = WebCore::Page::setFullscreenAutoHideDuration();
      }
      break;
    case 0x6D6:
      IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a3, (uint64_t)&v12);
      if (v14)
      {
        this = WebCore::Page::setFullscreenInsets();
      }
      else
      {
        a2 = *(IPC::Connection **)v4;
        a3 = (IPC::Decoder *)*((void *)v4 + 1);
        *(void *)char v4 = 0;
        *((void *)v4 + 1) = 0;
        this = *((void *)v4 + 3);
        if (this && a3) {
LABEL_25:
        }
          this = (*(uint64_t (**)(uint64_t, IPC::Connection *))(*(void *)this + 16))(this, a2);
      }
      break;
    case 0x6D7:
      this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((this & 0xFF00000000) != 0) {
        this = (uint64_t)WebKit::WebFullScreenManager::willEnterFullScreen((WebKit::WebFullScreenManager *)v3);
      }
      break;
    case 0x6D8:
      this = (uint64_t)WebKit::WebFullScreenManager::willExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    default:
      break;
  }
  if (*(_DWORD *)(v3 + 16) == 1) {
    return (*(uint64_t (**)(uint64_t, IPC::Connection *, IPC::Decoder *))(*(void *)v3 + 8))(v3, a2, a3);
  }
  --*(_DWORD *)(v3 + 16);
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA00590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA00590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3328;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WebKit::WebFullScreenManagerProxy *WebKit::WebFullScreenManagerProxy::didReceiveMessage(WebKit::WebFullScreenManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (!(*(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 256) + 1100) | *(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 256) + 1089))) {
    return this;
  }
  uint64_t v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6C9:
      this = (WebKit::WebFullScreenManagerProxy *)IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>((uint64_t)v26, (unint64_t *)a3);
      if (v30[0]) {
        return (WebKit::WebFullScreenManagerProxy *)WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(v4, (const WebCore::IntRect *)v26, (const WebCore::IntRect *)&v28);
      }
      return this;
    case 0x6CA:
      this = (WebKit::WebFullScreenManagerProxy *)IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>((uint64_t)v26, (unint64_t *)a3);
      if (v30[0]) {
        return (WebKit::WebFullScreenManagerProxy *)(*(uint64_t (**)(void *, char *, int *))(**((void **)v4 + 4) + 56))(*((void **)v4 + 4), v26, &v28);
      }
      return this;
    case 0x6CB:
      uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 4) + 16);
      return (WebKit::WebFullScreenManagerProxy *)v5();
    case 0x6CC:
      unint64_t v6 = *((void *)a3 + 1);
      unint64_t v7 = *(void *)a3;
      unint64_t v8 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 <= v8)
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v18 = *((void *)a3 + 3);
        if (v18)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
            unint64_t v17 = *(void *)a3;
            unint64_t v16 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v16 = 0;
            unint64_t v17 = 0;
          }
        }
        goto LABEL_35;
      }
      unsigned __int16 v9 = (unsigned __int8 *)(v7 + v8);
      *((void *)a3 + 2) = v9 + 1;
      if (!v7)
      {
        unint64_t v16 = v6;
        unint64_t v17 = 0;
LABEL_35:
        unint64_t v6 = 0;
        unint64_t v7 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v19 = *((void *)a3 + 3);
        if (v19)
        {
          if (v16)
          {
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
            unint64_t v7 = *(void *)a3;
            unint64_t v6 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v6 = 0;
            unint64_t v7 = 0;
          }
        }
        goto LABEL_36;
      }
      unsigned int v10 = *v9;
      if (v10 >= 2)
      {
LABEL_36:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v20 = *((void *)a3 + 3);
        if (v20 && v6) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v7);
        }
        v26[0] = 0;
        char v33 = 0;
        goto LABEL_38;
      }
      BOOL v11 = v10 != 0;
      IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::decode((unint64_t *)a3, (uint64_t)&v34);
      if (!v39)
      {
        unint64_t v23 = *(void *)a3;
        uint64_t v24 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v25 = *((void *)a3 + 3);
        if (!v25
          || !v24
          || ((*(void (**)(uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23), !v39))
        {
          v26[0] = 0;
          char v33 = 0;
          goto LABEL_26;
        }
      }
      v26[0] = v11;
      uint64_t v27 = v34;
      int v28 = v35;
      uint64_t v13 = v36;
      id v36 = 0;
      uint64_t v29 = v13;
      v30[0] = 0;
      char v32 = 0;
      if (!v38)
      {
        char v33 = 1;
LABEL_20:
        char v14 = v36;
        id v36 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        goto LABEL_26;
      }
      WTF::MachSendRight::MachSendRight();
      uint64_t v31 = v37[1];
      char v32 = 1;
      char v33 = 1;
      if (v39)
      {
        if (v38) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v37);
        }
        goto LABEL_20;
      }
LABEL_26:
      if (v33) {
        goto LABEL_27;
      }
LABEL_38:
      unint64_t v21 = *(void *)a3;
      uint64_t v22 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      this = (WebKit::WebFullScreenManagerProxy *)*((void *)a3 + 3);
      if (!this) {
        return this;
      }
      if (!v22) {
        return this;
      }
      this = (WebKit::WebFullScreenManagerProxy *)(*(uint64_t (**)(WebKit::WebFullScreenManagerProxy *, unint64_t))(*(void *)this + 16))(this, v21);
      if (!v33) {
        return this;
      }
LABEL_27:
      this = (WebKit::WebFullScreenManagerProxy *)WebKit::WebFullScreenManagerProxy::enterFullScreen((uint64_t)v4, v26[0], (uint64_t)&v27);
      if (v33)
      {
        if (v32) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v30);
        }
        this = v29;
        uint64_t v29 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WebKit::WebFullScreenManagerProxy *)WTF::StringImpl::destroy(this, v15);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    case 0x6CD:
      uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 4) + 40);
      return (WebKit::WebFullScreenManagerProxy *)v5();
    default:
      return this;
  }
}

uint64_t WebKit::WebFullScreenManagerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t *a3, IPC::Encoder **a4)
{
  uint64_t result = 0;
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 256) + 1100) | *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 256) + 1089)
    && *((_WORD *)a3 + 25) == 3739)
  {
    unsigned __int16 v9 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
    if (v9 <= 0xFFu)
    {
      uint64_t v15 = *a3;
      uint64_t v16 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      uint64_t result = a3[3];
      if (result)
      {
        if (v16) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
        }
        return 0;
      }
    }
    else
    {
      char v10 = v9;
      BOOL v11 = *a4;
      *a4 = 0;
      unint64_t v17 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v18, a2);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v12 = &unk_1EEA005B8;
      v12[1] = v17;
      uint64_t v13 = v18[0];
      v18[0] = 0;
      v12[2] = v13;
      uint64_t v19 = v12;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v18);
      WebKit::WebFullScreenManagerProxy::supportsFullScreen(a1, v10 != 0, (uint64_t *)&v19);
      uint64_t v14 = (uint64_t)v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      return 1;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>(uint64_t a1, unint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v9);
  if (v10 && (uint64_t result = IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v11), v12))
  {
    if (v10)
    {
      long long v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA005B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA005B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  long long v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebGeolocationManager::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  uint64_t v4 = this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1758)
  {
    this = IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>((IPC::Decoder *)a3, (uint64_t)&v14);
    if (!LOBYTE(v15[0])) {
      return this;
    }
    this = (WTF::StringImpl *)WebKit::WebGeolocationManager::resetPermissions(v4, &v14);
    if (!LOBYTE(v15[0])) {
      return this;
    }
    goto LABEL_18;
  }
  if (v5 == 1757)
  {
    IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a3, (uint64_t)&v25);
    if (v26)
    {
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)v23);
      if (BYTE8(v23[0]))
      {
        if (!v26) {
          goto LABEL_23;
        }
        uint64_t v14 = v25;
        v15[0] = *(WTF::StringImpl **)&v23[0];
        LOBYTE(v15[1]) = 1;
        this = (WTF::StringImpl *)WebKit::WebGeolocationManager::didFailToDeterminePosition(v4, &v14, (const WTF::String *)v15);
        if (!LOBYTE(v15[1])) {
          return this;
        }
        unint64_t v8 = v15[0];
        v15[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v6);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
LABEL_18:
        this = v14;
        uint64_t v14 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
        return this;
      }
LABEL_25:
      if (v26)
      {
        uint64_t v13 = v25;
        uint64_t v25 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v7);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
LABEL_26:
    long long v11 = *a3;
    char v12 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    this = a3[3];
    if (this && v12) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v11);
    }
    return this;
  }
  if (v5 != 1756) {
    return this;
  }
  IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a3, (uint64_t)&v25);
  if (!v26) {
    goto LABEL_26;
  }
  IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::decode((IPC::Decoder *)a3, (uint64_t)v23);
  if (!v24) {
    goto LABEL_24;
  }
  while (!v26)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v7 = *a3;
    long long v9 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    char v10 = a3[3];
    if (v10)
    {
      if (v9)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v7);
        if (v24) {
          continue;
        }
      }
    }
    goto LABEL_25;
  }
  long long v18 = v23[3];
  long long v19 = v23[4];
  long long v20 = v23[5];
  long long v21 = v23[6];
  *(_OWORD *)uint64_t v15 = v23[0];
  long long v16 = v23[1];
  uint64_t v14 = v25;
  long long v17 = v23[2];
  char v22 = 1;
  this = (WTF::StringImpl *)WebKit::WebGeolocationManager::didChangePosition(v4, &v14, (const WebCore::GeolocationPositionData *)v15);
  if (v22) {
    goto LABEL_18;
  }
  return this;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebGeolocationManager::didReceiveMessage(WebKit::WebGeolocationManager *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  return WebKit::WebGeolocationManager::didReceiveMessage((WebKit::WebGeolocationManager *)((char *)this - 8), a2, a3);
}

void WebKit::WebGeolocationManagerProxy::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  int v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 1753)
  {
    IPC::Decoder::decode<WebCore::RegistrableDomain>(a3, (uint64_t)&v48);
    if (!v49) {
      goto LABEL_41;
    }
    unint64_t v18 = *((void *)a3 + 1);
    long long v19 = *(WTF::StringImpl **)a3;
    unint64_t v20 = *((void *)a3 + 2) - *(void *)a3;
    if (v18 <= v20)
    {
      unint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v28 = *((void *)a3 + 3);
      if (v28)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
          uint64_t v27 = *(void *)a3;
          unint64_t v26 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v26 = 0;
          uint64_t v27 = 0;
        }
      }
    }
    else
    {
      long long v21 = (unsigned __int8 *)v19 + v20;
      *((void *)a3 + 2) = v21 + 1;
      if (v19)
      {
        unsigned int v22 = *v21;
        if (v22 < 2)
        {
          char v41 = v48;
          LOBYTE(v42) = v22 != 0;
          LOBYTE(v43) = 1;
          WebKit::WebGeolocationManagerProxy::setEnableHighAccuracy((WebKit::WebGeolocationManagerProxy *)this, a2, &v41, v22 != 0);
          if (!(_BYTE)v43) {
            goto LABEL_42;
          }
          goto LABEL_29;
        }
        goto LABEL_39;
      }
      unint64_t v26 = v18;
      uint64_t v27 = 0;
    }
    unint64_t v18 = 0;
    long long v19 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v29 = *((void *)a3 + 3);
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v27, v26);
        long long v19 = *(WTF::StringImpl **)a3;
        unint64_t v18 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        long long v19 = 0;
      }
    }
LABEL_39:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v30 = *((void *)a3 + 3);
    if (v30 && v18) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v30 + 16))(v30, v19);
    }
    if (v49)
    {
      uint64_t v40 = v48;
      uint64_t v48 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v19);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
    }
    goto LABEL_41;
  }
  if (v7 == 1755)
  {
    IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>(a3, (uint64_t)&v41);
    if (!(_BYTE)v42) {
      goto LABEL_42;
    }
    WebKit::WebGeolocationManagerProxy::stopUpdating((WebKit::WebGeolocationManagerProxy *)this, a2, &v41);
    if (!(_BYTE)v42) {
      goto LABEL_42;
    }
    goto LABEL_29;
  }
  if (v7 != 1754) {
    goto LABEL_42;
  }
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a3, (uint64_t)&v46);
  if (!v47) {
    goto LABEL_41;
  }
  uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
  if (!(_BYTE)v8 || (char v10 = IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v48), !v49))
  {
    int v16 = 0;
    LOBYTE(v41) = 0;
    char v45 = 0;
    goto LABEL_22;
  }
  unint64_t v11 = *((void *)a3 + 1);
  unint64_t v8 = *(WTF::StringImpl **)a3;
  unint64_t v12 = *((void *)a3 + 2) - *(void *)a3;
  if (v11 <= v12)
  {
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v37 = *((void *)a3 + 3);
    if (v37)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        uint64_t v36 = *(void *)a3;
        unint64_t v35 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        uint64_t v36 = 0;
      }
    }
    goto LABEL_48;
  }
  uint64_t v13 = (unsigned __int8 *)v8 + v12;
  *((void *)a3 + 2) = v13 + 1;
  if (!v8)
  {
    unint64_t v35 = v11;
    uint64_t v36 = 0;
LABEL_48:
    unint64_t v11 = 0;
    unint64_t v8 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v38 = *((void *)a3 + 3);
    if (v38)
    {
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        unint64_t v8 = *(WTF::StringImpl **)a3;
        unint64_t v11 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v8 = 0;
      }
    }
    goto LABEL_49;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_49:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v39 = *((void *)a3 + 3);
    if (v39 && v11) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v8);
    }
    LOBYTE(v41) = 0;
    char v45 = 0;
    if (!v49) {
      goto LABEL_56;
    }
    char v10 = v48;
    uint64_t v48 = 0;
    if (!v10) {
      goto LABEL_56;
    }
    if (*(_DWORD *)v10 != 2)
    {
      int v16 = 0;
      *(_DWORD *)v10 -= 2;
      goto LABEL_22;
    }
LABEL_55:
    WTF::StringImpl::destroy(v10, v8);
LABEL_56:
    int v16 = 0;
    goto LABEL_22;
  }
  if (!v47)
  {
    __break(1u);
    goto LABEL_55;
  }
  BOOL v3 = v14 != 0;
  uint64_t v15 = v46;
  id v46 = 0;
  char v41 = v15;
  uint64_t v42 = v9;
  id v43 = v48;
  BOOL v44 = v3;
  int v16 = 1;
  char v45 = 1;
LABEL_22:
  if (v47)
  {
    uint64_t v25 = v46;
    id v46 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v8);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  if (v16)
  {
    WebKit::WebGeolocationManagerProxy::startUpdating((uint64_t)this, (uint64_t)a2, &v41, v9, &v43, v3);
    if (!v45) {
      goto LABEL_42;
    }
    unint64_t v23 = v43;
    id v43 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v17);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
LABEL_29:
    char v24 = v41;
    char v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v17);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v31 = *(void *)a3;
  uint64_t v32 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v33 = *((void *)a3 + 3);
  if (v33 && v32) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
  }
LABEL_42:
  CFTypeRef v34 = this[1];

  CFRelease(v34);
}

void non-virtual thunk to'WebKit::WebGeolocationManagerProxy::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

_DWORD *WebKit::WebIDBConnectionToServer::didReceiveMessage(WebKit::WebIDBConnectionToServer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  BOOL v3 = (_DWORD *)((char *)this + 24);
  ++*((_DWORD *)this + 6);
  uint64_t v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6DF:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v82, (uint64_t *)a3);
      if (v84)
      {
        WebKit::WebIDBConnectionToServer::didAbortTransaction((uint64_t)this);
        goto LABEL_32;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E0:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didClearObjectStore((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E1:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v8) {
        goto LABEL_136;
      }
      uint64_t v9 = v7;
      IPC::Decoder::decode<WebCore::IDBError>(v4, (uint64_t)&v89);
      if (!v90) {
        goto LABEL_136;
      }
      *(void *)unint64_t v82 = v9;
      *(_WORD *)&v82[8] = v89;
      *(void *)&v82[16] = *((void *)&v89 + 1);
      LOBYTE(v83) = 1;
      WebKit::WebIDBConnectionToServer::didCloseFromServer((uint64_t)this);
      char v10 = *(WTF::StringImpl **)&v82[16];
      *(void *)&v82[16] = 0;
      if (v10) {
        goto LABEL_34;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E2:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v82, (uint64_t *)a3);
      if (v84)
      {
        WebKit::WebIDBConnectionToServer::didCommitTransaction((uint64_t)this);
        goto LABEL_32;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E3:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didCreateIndex((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E4:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didCreateObjectStore((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E5:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didDeleteDatabase((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E6:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didDeleteIndex((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E7:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didDeleteObjectStore((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E8:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (v85)
      {
        WebKit::WebIDBConnectionToServer::didDeleteRecord((uint64_t)this);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6E9:
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>((uint64_t *)a3, (uint64_t)&v87);
      if (!v88) {
        goto LABEL_117;
      }
      unint64_t v21 = v4[1];
      uint64_t v22 = *v4;
      unint64_t v23 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v21 < v23 || v21 - v23 <= 7)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v64 = v4[3];
        if (v64)
        {
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v64 + 16))(v64, v22, v21);
            uint64_t v63 = *v4;
            uint64_t v62 = v4[1];
          }
          else
          {
            uint64_t v62 = 0;
            uint64_t v63 = 0;
          }
        }
        goto LABEL_121;
      }
      uint64_t v25 = (unint64_t *)(v22 + v23);
      v4[2] = (uint64_t)(v25 + 1);
      if (!v22)
      {
        uint64_t v62 = v21;
        uint64_t v63 = 0;
LABEL_121:
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v65 = v4[3];
        if (v65 && v62) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 16))(v65, v63);
        }
LABEL_112:
        uint64_t v56 = *v4;
        uint64_t v57 = v4[1];
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v58 = v4[3];
        if (v58) {
          BOOL v59 = v57 == 0;
        }
        else {
          BOOL v59 = 1;
        }
        if (v59) {
          goto LABEL_117;
        }
        goto LABEL_132;
      }
      unint64_t v26 = *v25;
      unint64_t v91 = 0;
      char v92 = 0;
      if (v26 < 0x10000)
      {
        if (!v26)
        {
          uint64_t v4 = 0;
          uint64_t v36 = 0;
          goto LABEL_98;
        }
        uint64_t v27 = WTF::fastMalloc((WTF *)(16 * v26));
        LODWORD(v92) = v26;
        unint64_t v91 = (uint64_t *)v27;
        while (1)
        {
          IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>((uint64_t)v82, (IPC::Decoder *)v4);
          if (!v82[16]) {
            goto LABEL_111;
          }
          if (HIDWORD(v92) != v92) {
            break;
          }
          uint64_t v28 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, HIDWORD(v92) + 1, (unint64_t)v82);
          int v29 = HIDWORD(v92) + 1;
          uint64_t v30 = &v91[2 * HIDWORD(v92)];
          uint64_t v31 = *v28;
          *uint64_t v28 = 0;
          *uint64_t v30 = v31;
          v30[1] = v28[1];
          HIDWORD(v92) = v29;
          if (v82[16]) {
            goto LABEL_69;
          }
LABEL_73:
          if (!--v26) {
            goto LABEL_74;
          }
        }
        int v32 = HIDWORD(v92) + 1;
        uint64_t v33 = &v91[2 * HIDWORD(v92)];
        uint64_t v34 = *(void *)v82;
        *(void *)unint64_t v82 = 0;
        *uint64_t v33 = v34;
        v33[1] = *(void *)&v82[8];
        HIDWORD(v92) = v32;
LABEL_69:
        unint64_t v35 = *(WTF::StringImpl **)v82;
        *(void *)unint64_t v82 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v20);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
        goto LABEL_73;
      }
      break;
    case 0x6EA:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v82, (uint64_t *)a3);
      if (v86) {
        WebKit::WebIDBConnectionToServer::didGetAllRecords((uint64_t)this);
      }
      goto LABEL_49;
    case 0x6EB:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (!v85) {
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      }
      WebKit::WebIDBConnectionToServer::didGetCount((uint64_t)this);
      goto LABEL_93;
    case 0x6EC:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v82, (uint64_t *)a3);
      if (v86) {
        WebKit::WebIDBConnectionToServer::didGetRecord((uint64_t)this);
      }
      goto LABEL_49;
    case 0x6ED:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v82, (uint64_t *)a3);
      if (v86) {
        WebKit::WebIDBConnectionToServer::didIterateCursor((uint64_t)this);
      }
      goto LABEL_49;
    case 0x6EE:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v82, (uint64_t *)a3);
      if (v86) {
        WebKit::WebIDBConnectionToServer::didOpenCursor((uint64_t)this);
      }
LABEL_49:
      std::__optional_destruct_base<std::tuple<WebKit::WebIDBResult>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::IDBResultData *)v82, v6);
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6EF:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (!v85) {
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      }
      WebKit::WebIDBConnectionToServer::didOpenDatabase((uint64_t)this);
      goto LABEL_93;
    case 0x6F0:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (!v85) {
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      }
      WebKit::WebIDBConnectionToServer::didPutOrAdd((uint64_t)this);
      goto LABEL_93;
    case 0x6F1:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (!v85) {
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      }
      WebKit::WebIDBConnectionToServer::didRenameIndex((uint64_t)this);
      goto LABEL_93;
    case 0x6F2:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v82, (uint64_t *)a3);
      if (!v85) {
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      }
      WebKit::WebIDBConnectionToServer::didRenameObjectStore((uint64_t)this);
LABEL_93:
      if (v85) {
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v82);
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6F3:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v82, (uint64_t *)a3);
      if (v84)
      {
        WebKit::WebIDBConnectionToServer::didStartTransaction((uint64_t)this);
LABEL_32:
        if (v84)
        {
          char v10 = v83;
          char v83 = 0;
          if (v10)
          {
LABEL_34:
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, a2);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
        }
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6F4:
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v12) {
        goto LABEL_136;
      }
      uint64_t v13 = v11;
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(v4, (uint64_t)&v89);
      if (!v90) {
        goto LABEL_136;
      }
      unint64_t v14 = v4[1];
      uint64_t v15 = *v4;
      unint64_t v16 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v14 >= v16 && v14 - v16 > 7)
      {
        unint64_t v18 = (WTF::StringImpl **)(v15 + v16);
        v4[2] = (uint64_t)(v18 + 1);
        if (v15)
        {
          long long v19 = *v18;
          *(void *)unint64_t v82 = v13;
          *(_OWORD *)&v82[8] = v89;
          char v83 = v19;
          char v84 = 1;
          WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent();
          return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
        }
        uint64_t v72 = v14;
        uint64_t v73 = 0;
      }
      else
      {
LABEL_134:
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v74 = v4[3];
        if (v74)
        {
          if (v14)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v74 + 16))(v74, v15, v14);
            uint64_t v73 = *v4;
            uint64_t v72 = v4[1];
          }
          else
          {
            uint64_t v72 = 0;
            uint64_t v73 = 0;
          }
        }
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v75 = v4[3];
      if (v75 && v72) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 16))(v75, v73);
      }
LABEL_136:
      a2 = (IPC::Connection *)*v4;
      uint64_t v76 = v4[1];
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v61 = v4[3];
      if (v61) {
        BOOL v77 = v76 == 0;
      }
      else {
        BOOL v77 = 1;
      }
      if (!v77) {
        goto LABEL_140;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6F5:
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>((uint64_t *)a3, (uint64_t)&v89);
      if (!v90) {
        goto LABEL_117;
      }
      unint64_t v37 = v4[1];
      uint64_t v38 = *v4;
      unint64_t v39 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v37 >= v39 && v37 - v39 > 7)
      {
        char v41 = (uint64_t *)(v38 + v39);
        v4[2] = (uint64_t)(v41 + 1);
        if (v38)
        {
          unint64_t v42 = (((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8) - v38;
          if (v37 >= v42 && v37 - v42 > 7)
          {
            uint64_t v44 = *v41;
            char v45 = *(WTF::StringImpl **)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
            v4[2] = (((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            *(_OWORD *)unint64_t v82 = v89;
            *(void *)&v82[16] = v44;
            char v83 = v45;
            char v84 = 1;
            WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResourceIdentifier *)v82);
            return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
          }
          *uint64_t v4 = 0;
          v4[1] = 0;
          uint64_t v70 = v4[3];
          if (v70)
          {
            if (v37)
            {
              (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
              uint64_t v56 = *v4;
              uint64_t v71 = v4[1];
              uint64_t v58 = v4[3];
              *uint64_t v4 = 0;
              v4[1] = 0;
              if (v58)
              {
                if (v71) {
LABEL_132:
                }
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v56);
              }
            }
          }
LABEL_117:
          a2 = (IPC::Connection *)*v4;
          uint64_t v60 = v4[1];
          *uint64_t v4 = 0;
          v4[1] = 0;
          uint64_t v61 = v4[3];
          if (v61 && v60) {
LABEL_140:
          }
            (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v61 + 16))(v61, a2);
          return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
        }
        uint64_t v66 = v37;
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v68 = v4[3];
        if (v68)
        {
          if (v37)
          {
            (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
            uint64_t v67 = *v4;
            uint64_t v66 = v4[1];
          }
          else
          {
            uint64_t v66 = 0;
            uint64_t v67 = 0;
          }
        }
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v69 = v4[3];
      if (v69 && v66) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v67, v66);
      }
      goto LABEL_117;
    default:
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
  }
  do
  {
    IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>((uint64_t)v82, (IPC::Decoder *)v4);
    if (!v82[16])
    {
LABEL_111:
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v20);
      goto LABEL_112;
    }
    if (HIDWORD(v92) == v92)
    {
      uint64_t v48 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, HIDWORD(v92) + 1, (unint64_t)v82);
      int v49 = HIDWORD(v92) + 1;
      uint64_t v50 = &v91[2 * HIDWORD(v92)];
      uint64_t v51 = *v48;
      uint64_t *v48 = 0;
      *uint64_t v50 = v51;
      v50[1] = v48[1];
      HIDWORD(v92) = v49;
      if (!v82[16]) {
        goto LABEL_109;
      }
    }
    else
    {
      int v52 = HIDWORD(v92) + 1;
      id v53 = &v91[2 * HIDWORD(v92)];
      uint64_t v54 = *(void *)v82;
      *(void *)unint64_t v82 = 0;
      *id v53 = v54;
      v53[1] = *(void *)&v82[8];
      HIDWORD(v92) = v52;
    }
    unint64_t v55 = *(WTF::StringImpl **)v82;
    *(void *)unint64_t v82 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v20);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
LABEL_109:
    --v26;
  }
  while (v26);
  uint64_t v78 = HIDWORD(v92);
  uint64_t v4 = v91;
  if (v92 > HIDWORD(v92))
  {
    unint64_t v79 = v91;
    if (HIDWORD(v92))
    {
      if (HIDWORD(v92) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x199378448);
      }
      char v80 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v92)));
      LODWORD(v92) = v78;
      unint64_t v91 = (uint64_t *)v80;
      unint64_t v79 = v4;
      if (v80 != (WTF::StringImpl **)v4)
      {
        WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move((WTF::StringImpl *)v4, (WTF::StringImpl *)&v4[2 * v78], v80);
        unint64_t v79 = v91;
      }
    }
    if (v4)
    {
      if (v79 == v4)
      {
        unint64_t v91 = 0;
        LODWORD(v92) = 0;
      }
      WTF::fastFree((WTF *)v4, v20);
LABEL_74:
      uint64_t v4 = v91;
    }
    else
    {
      uint64_t v4 = v79;
    }
  }
  uint64_t v36 = v92;
LABEL_98:
  int v81 = v36;
  unint64_t v91 = 0;
  char v92 = 0;
  char v90 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v20);
  uint64_t v15 = v88;
  if (!v88)
  {
    __break(1u);
    goto LABEL_134;
  }
  *(_OWORD *)unint64_t v82 = v87;
  long long v89 = 0uLL;
  *(void *)&v82[16] = v4;
  char v83 = v81;
  char v84 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v47);
  WebKit::WebIDBConnectionToServer::didGetAllDatabaseNamesAndVersions((uint64_t)this);
  if (v84) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82[16], a2);
  }
  return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
}

void IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IDBResultData>(a2, (uint64_t)&v13);
  if (v22)
  {
    *(_OWORD *)a1 = v13;
    *(void *)(a1 + 16) = v14;
    *(_WORD *)(a1 + 24) = v15;
    uint64_t v4 = v16;
    uint64_t v16 = 0;
    *(void *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 40) = v17;
    long long v5 = v18;
    long long v18 = 0u;
    *(_OWORD *)(a1 + 56) = v5;
    long long v6 = v19;
    long long v19 = 0u;
    *(_OWORD *)(a1 + 72) = v6;
    uint64_t v7 = v20;
    uint64_t v8 = v21;
    uint64_t v20 = 0;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 96) = v8;
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13);
    *(unsigned char *)(a1 + 104) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 104) = 0;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v10 = a2[3];
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      char v12 = *(void (**)(void))(*(void *)v10 + 16);
      v12();
    }
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v8);
  if (v9 && (uint64_t result = IPC::Decoder::decode<WebCore::IDBError>(a2, (uint64_t)&v10), v12))
  {
    if (v9)
    {
      *(_OWORD *)a1 = v8;
      *(_WORD *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::WebIDBResult,void>::decode(a2, (uint64_t)&v16);
  if (v27
    || ((v9 = *a2, uint64_t v10 = a2[1], *a2 = 0, a2[1] = 0, (v11 = a2[3]) != 0) ? (v12 = v10 == 0) : (v12 = 1),
        !v12 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9), v27)))
  {
    *(_OWORD *)a1 = v16;
    *(void *)(a1 + 16) = v17;
    *(_WORD *)(a1 + 24) = v18;
    uint64_t v5 = v19;
    uint64_t v19 = 0;
    *(void *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 40) = v20;
    long long v6 = v21;
    long long v21 = 0u;
    *(_OWORD *)(a1 + 56) = v6;
    long long v7 = v22;
    long long v22 = 0u;
    *(_OWORD *)(a1 + 72) = v7;
    uint64_t v8 = v24;
    *(void *)(a1 + 88) = v23;
    *(void *)(a1 + 96) = v8;
    uint64_t v23 = 0;
    *(void *)(a1 + 104) = v25;
    *(void *)&long long v7 = v26;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)(a1 + 112) = v7;
    *(unsigned char *)(a1 + 120) = 1;
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v4);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v16);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 120) = 0;
    uint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v13)
    {
      __int16 v15 = *(void (**)(void))(*(void *)v14 + 16);
      v15();
    }
  }
}

WebCore::IDBResultData *std::__optional_destruct_base<std::tuple<WebKit::WebIDBResult>,false>::~__optional_destruct_base[abi:sn180100](WebCore::IDBResultData *a1, void *a2)
{
  if (*((unsigned char *)a1 + 120))
  {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 104, a2);
    WebCore::IDBResultData::~IDBResultData(a1);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBDatabaseNameAndVersion,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

void WebKit::WebInspectorInterruptDispatcher::didReceiveMessage(WebKit::WebInspectorInterruptDispatcher *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1782) {
    WebKit::WebInspectorInterruptDispatcher::notifyNeedDebuggerBreak(this);
  }
}

void WebKit::WebInspector::didReceiveMessage(atomic_uint *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  atomic_fetch_add(this + 5, 1u);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x734:
      WebKit::WebInspector::close((WebKit::WebInspector *)this);
      goto LABEL_17;
    case 0x735:
      unsigned __int16 v5 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v5 > 0xFFu)
      {
        *((unsigned char *)this + 56) = v5 != 0;
LABEL_18:
        if (atomic_fetch_add(this + 5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this + 5);
          (*(void (**)(atomic_uint *))(*(void *)this + 8))(this);
        }
        return;
      }
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v8 = *((void *)a3 + 3);
      if (v8) {
        BOOL v9 = v7 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
      }
LABEL_17:
      if (this) {
        goto LABEL_18;
      }
      return;
    case 0x736:
      IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>(a3, v10);
      if (BYTE4(v10[0]))
      {
        WebKit::WebInspector::setFrontendConnection((uint64_t)this, (WTF::MachSendRight *)v10);
        if (BYTE4(v10[0])) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
        }
      }
      goto LABEL_17;
    case 0x737:
      WebKit::WebInspector::show((uint64_t)this);
      goto LABEL_17;
    case 0x738:
      WebKit::WebInspector::showConsole(this);
      goto LABEL_17;
    case 0x739:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, (uint64_t)v10);
      if (v11) {
        WebKit::WebInspector::showMainResourceForFrame((unint64_t)this, v10[0], v10[1]);
      }
      goto LABEL_17;
    case 0x73A:
      WebKit::WebInspector::showResources(this);
      goto LABEL_17;
    case 0x73B:
      WebKit::WebInspector::startElementSelection(this);
      goto LABEL_17;
    case 0x73C:
      WebKit::WebInspector::startPageProfiling(this);
      goto LABEL_17;
    case 0x73D:
      WebKit::WebInspector::stopElementSelection(this);
      goto LABEL_17;
    case 0x73E:
      WebKit::WebInspector::stopPageProfiling(this);
      goto LABEL_17;
    default:
      goto LABEL_17;
  }
}

void IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<IPC::ConnectionHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[4])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<IPC::ConnectionHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v4);
  if (v5)
  {
    WTF::MachSendRight::MachSendRight();
    int v3 = v5;
    a2[4] = 1;
    if (v3) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
}

void sub_199378D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199378E68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebInspectorUI::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  int v3 = this;
  ++*((_DWORD *)this + 5);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x721:
      int v5 = 3;
      goto LABEL_30;
    case 0x722:
      int v5 = 2;
      goto LABEL_30;
    case 0x723:
      int v5 = 1;
      goto LABEL_30;
    case 0x724:
      int v5 = 0;
LABEL_30:
      this = WebKit::WebInspectorUI::setDockSide((uint64_t)this, v5);
      goto LABEL_65;
    case 0x725:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!v8) {
        goto LABEL_60;
      }
      BOOL v9 = (WTF::StringImpl *)v7;
      IPC::Decoder::decode<WebKit::DebuggableInfoData>((IPC::Decoder *)a3, (uint64_t)v46);
      if (!v50) {
        goto LABEL_59;
      }
      char v11 = a3[1];
      uint64_t v10 = *a3;
      unint64_t v12 = a3[2] - *a3;
      if ((unint64_t)v11 <= v12)
      {
        uint64_t v28 = 0;
        int v29 = 0;
        *a3 = 0;
        a3[1] = 0;
        uint64_t v30 = a3[3];
        if (v30)
        {
          if (v11)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 16))(v30);
            int v29 = *a3;
            uint64_t v28 = a3[1];
          }
          else
          {
            uint64_t v28 = 0;
            int v29 = 0;
          }
        }
        goto LABEL_55;
      }
      uint64_t v13 = (unsigned __int8 *)v10 + v12;
      uint64_t v14 = v13 + 1;
      a3[2] = (WTF::StringImpl *)(v13 + 1);
      if (!v10)
      {
        uint64_t v28 = v11;
        int v29 = 0;
LABEL_55:
        char v11 = 0;
        uint64_t v10 = 0;
        *a3 = 0;
        a3[1] = 0;
        uint64_t v31 = a3[3];
        if (v31)
        {
          if (v28)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v29, v28);
            uint64_t v10 = *a3;
            char v11 = a3[1];
          }
          else
          {
            char v11 = 0;
            uint64_t v10 = 0;
          }
        }
LABEL_56:
        *a3 = 0;
        a3[1] = 0;
        int v32 = a3[3];
        if (!v32) {
          goto LABEL_59;
        }
LABEL_75:
        if (v11) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v10);
        }
LABEL_59:
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v10);
LABEL_60:
        uint64_t v34 = *a3;
        unint64_t v35 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        this = a3[3];
        if (this) {
          BOOL v36 = v35 == 0;
        }
        else {
          BOOL v36 = 1;
        }
        if (!v36) {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v34);
        }
        goto LABEL_65;
      }
      unsigned int v15 = *v13;
      if (v15 >= 2) {
        goto LABEL_56;
      }
      unint64_t v16 = ((unint64_t)(v14 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v10;
      if ((unint64_t)v11 < v16 || (unint64_t)v11 - v16 <= 3)
      {
        *a3 = 0;
        a3[1] = 0;
        uint64_t v33 = a3[3];
        if (!v33) {
          goto LABEL_59;
        }
        (*(void (**)(WTF::StringImpl *))(*(void *)v33 + 16))(v33);
        uint64_t v10 = *a3;
        char v11 = a3[1];
        int v32 = a3[3];
        *a3 = 0;
        a3[1] = 0;
        if (!v32) {
          goto LABEL_59;
        }
        goto LABEL_75;
      }
      __int16 v18 = (int *)((char *)v10 + v16);
      int v19 = *v18;
      a3[2] = (WTF::StringImpl *)(v18 + 1);
      char v20 = v15 != 0;
      uint64_t v38 = v9;
      v39[0] = v46[0];
      long long v21 = v47;
      long long v47 = 0uLL;
      *(_OWORD *)uint64_t v40 = v21;
      long long v22 = v48;
      uint64_t v48 = 0;
      char v41 = v22;
      char v42 = v49;
      char v43 = v20;
      int v44 = v19;
      char v45 = 1;
      std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v10);
      this = (WTF::StringImpl *)WebKit::WebInspectorUI::establishConnection((uint64_t)v3, (uint64_t)v9, (uint64_t)v39, v20, v19);
      if (v45)
      {
        uint64_t v23 = v41;
        char v41 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v6);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        char v27 = v40[1];
        v40[1] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v6);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        this = v40[0];
        v40[0] = 0;
        if (this)
        {
LABEL_41:
          if (*(_DWORD *)this == 2) {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
LABEL_65:
      if (*((_DWORD *)v3 + 5) == 1)
      {
        unint64_t v37 = *(uint64_t (**)(WebKit::WebInspectorUI *))(*(void *)v3 + 8);
        return (WTF::StringImpl *)v37(v3);
      }
      else
      {
        --*((_DWORD *)v3 + 5);
      }
      return this;
    case 0x726:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v38);
      if (!v39[0]) {
        goto LABEL_65;
      }
      this = (WTF::StringImpl *)WebKit::WebInspectorUI::evaluateInFrontendForTesting(v3, (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x727:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v38);
      if (!v39[0]) {
        goto LABEL_65;
      }
      this = (WTF::StringImpl *)WebKit::RemoteWebInspectorUI::sendMessageToFrontend(v3, (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x728:
      unsigned __int16 v25 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v25 <= 0xFFu) {
        goto LABEL_60;
      }
      this = WebKit::WebInspectorUI::setDiagnosticLoggingAvailable(v3, v25 != 0);
      goto LABEL_65;
    case 0x729:
      unsigned __int16 v26 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v26 <= 0xFFu) {
        goto LABEL_60;
      }
      this = WebKit::WebInspectorUI::setDockingUnavailable(v3, (WTF::JSONImpl::Value *)(v26 != 0));
      goto LABEL_65;
    case 0x72A:
      unsigned __int16 v24 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v24 <= 0xFFu) {
        goto LABEL_60;
      }
      this = WebKit::WebInspectorUI::setIsVisible(v3, (WTF::JSONImpl::Value *)(v24 != 0));
      goto LABEL_65;
    case 0x72B:
      this = WebKit::RemoteWebInspectorUI::showConsole(this);
      goto LABEL_65;
    case 0x72C:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v38);
      if (!v39[0]) {
        goto LABEL_65;
      }
      this = WebKit::WebInspectorUI::showMainResourceForFrame(v3, (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x72D:
      this = WebKit::RemoteWebInspectorUI::showResources(this);
      goto LABEL_65;
    case 0x72E:
      this = WebKit::WebInspectorUI::startElementSelection(this);
      goto LABEL_65;
    case 0x72F:
      this = WebKit::WebInspectorUI::startPageProfiling(this);
      goto LABEL_65;
    case 0x730:
      this = WebKit::WebInspectorUI::stopElementSelection(this);
      goto LABEL_65;
    case 0x731:
      this = WebKit::WebInspectorUI::stopPageProfiling(this);
      goto LABEL_65;
    case 0x732:
      this = (WTF::StringImpl *)WebKit::WebInspectorUI::updateConnection(this);
      goto LABEL_65;
    case 0x733:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v38);
      if (!v39[0]) {
        goto LABEL_65;
      }
      this = WebKit::RemoteWebInspectorUI::updateFindString(v3, (const WTF::String *)&v38);
LABEL_39:
      if (v39[0])
      {
        this = v38;
        uint64_t v38 = 0;
        if (this) {
          goto LABEL_41;
        }
      }
      goto LABEL_65;
    default:
      goto LABEL_65;
  }
}

void WebKit::WebInspectorUIProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, atomic_uchar *volatile **a3)
{
  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x703:
      unsigned __int16 v30 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v30 <= 0xFFu) {
        goto LABEL_70;
      }
      WebKit::WebInspectorUIProxy::attachAvailabilityChanged((WebKit::WebInspectorUIProxy *)this, v30 != 0);
      goto LABEL_71;
    case 0x704:
      uint64_t v28 = (IPC::Encoder *)this;
      unsigned int v29 = 0;
      goto LABEL_48;
    case 0x705:
      uint64_t v28 = (IPC::Encoder *)this;
      unsigned int v29 = 2;
      goto LABEL_48;
    case 0x706:
      uint64_t v28 = (IPC::Encoder *)this;
      unsigned int v29 = 1;
LABEL_48:
      WebKit::WebInspectorUIProxy::attach(v28, v29);
      goto LABEL_71;
    case 0x707:
      if (*((unsigned char *)this + 78))
      {
        *((unsigned char *)this + 78) = 0;
      }
      else if (!*((unsigned char *)this + 73))
      {
        WebKit::WebInspectorUIProxy::open((uint64_t)this);
      }
      goto LABEL_71;
    case 0x708:
      WebKit::WebInspectorUIProxy::detach((uint64_t)this);
      goto LABEL_71;
    case 0x709:
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow((WebKit::WebInspectorUIProxy *)this, v6);
      goto LABEL_71;
    case 0x70A:
    case 0x71A:
      IPC::Decoder::decode<std::tuple<WebCore::InspectorFrontendClientAppearance>>((uint64_t *)a3);
      goto LABEL_71;
    case 0x70B:
      unsigned __int16 v37 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v37 <= 0xFFu) {
        goto LABEL_70;
      }
      WebKit::WebInspectorUIProxy::elementSelectionChanged((WebKit::WebInspectorUIProxy *)this, v37 != 0);
      goto LABEL_71;
    case 0x70C:
      WebKit::WebInspectorUIProxy::frontendLoaded((WebKit::WebInspectorUIProxy *)this);
      goto LABEL_71;
    case 0x70D:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&cf);
      if ((_BYTE)v46) {
        goto LABEL_4;
      }
      goto LABEL_71;
    case 0x70E:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&cf);
      if (!(_BYTE)v46) {
        goto LABEL_71;
      }
      uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!(_BYTE)v8) {
        goto LABEL_55;
      }
      char v49 = (void *)v20;
      a3 = &v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, a2);
      long long v21 = (void *)WTF::fastMalloc((WTF *)0x18);
      *long long v21 = &unk_1EEA00608;
      v21[1] = v49;
      long long v22 = v50;
      char v50 = 0;
      void v21[2] = v22;
      uint64_t v51 = v21;
      uint64_t v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v50);
      unsigned __int16 v25 = (atomic_uchar *volatile *)v46;
      if (!(_BYTE)v46)
      {
        __break(1u);
        goto LABEL_77;
      }
      WebKit::WebInspectorUIProxy::load((uint64_t)this, (uint64_t)&cf, (const WTF::StringImpl *)&v51);
      unsigned __int16 v26 = v51;
      uint64_t v51 = 0;
      if (v26) {
        (*(void (**)(void *))(*v26 + 8))(v26);
      }
LABEL_55:
      if ((_BYTE)v46)
      {
        uint64_t v38 = (WTF::StringImpl *)cf;
        CFTypeRef cf = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, v8);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      goto LABEL_71;
    case 0x70F:
      uint64_t v10 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v10 & 0xFFFFFF) >= 0x10000) {
        WebKit::WebInspectorUIProxy::openLocalInspectorFrontend((WebKit::WebInspectorUIProxy *)this, v10 != 0, (v10 & 0xFF00) != 0);
      }
      goto LABEL_71;
    case 0x710:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&cf);
      if (!(_BYTE)v46) {
        goto LABEL_71;
      }
      WebKit::WebInspectorUIProxy::openURLExternally((WebKit::WebInspectorUIProxy *)this, (const WTF::String *)&cf);
      goto LABEL_55;
    case 0x711:
      uint64_t v31 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v32)
      {
        CFTypeRef cf = v31;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, a2);
        uint64_t v33 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v33 = &unk_1EEA00630;
        v33[1] = cf;
        uint64_t v34 = v46;
        id v46 = 0;
        v33[2] = v34;
        char v49 = v33;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v46);
        WebKit::WebInspectorUIProxy::pickColorFromScreen((uint64_t)this, (uint64_t *)&v49, v35);
        uint64_t v36 = (uint64_t)v49;
        char v49 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_71;
    case 0x712:
      WebKit::WebInspectorUIProxy::reopen((WebKit::WebInspectorUIProxy *)this);
      goto LABEL_71;
    case 0x713:
      WebKit::WebInspectorUIProxy::resetState(this, (uint64_t)v6, v7);
      goto LABEL_71;
    case 0x714:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&cf);
      if (!(_BYTE)v46) {
        goto LABEL_71;
      }
LABEL_4:
      WTF::isIntegralOrPointerType((WTF *)this);
      goto LABEL_55;
    case 0x715:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((IPC::Decoder *)a3, v6, &cf);
      if (v48)
      {
        WebKit::WebInspectorUIProxy::save((uint64_t)this, (uint64_t)&cf, (const WTF::StringImpl *)v47);
        if (v48) {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v27);
        }
      }
      goto LABEL_71;
    case 0x716:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&cf);
      if (!(_BYTE)v46) {
        goto LABEL_71;
      }
      WebKit::WebInspectorUIProxy::sendMessageToBackend((WebKit::WebInspectorUIProxy *)this, (const WTF::String *)&cf);
      goto LABEL_55;
    case 0x717:
      uint64_t v9 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v9 & 0xFF00000000) != 0) {
        WebKit::WebInspectorUIProxy::setAttachedWindowHeight((uint64_t)this, v9);
      }
      goto LABEL_71;
    case 0x718:
      uint64_t v19 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v19 & 0xFF00000000) != 0) {
        WebKit::WebInspectorUIProxy::setAttachedWindowWidth((uint64_t)this, v19);
      }
      goto LABEL_71;
    case 0x719:
      unint64_t v12 = a3[1];
      uint64_t v13 = (uint64_t)*a3;
      unint64_t v14 = (char *)a3[2] - (char *)*a3;
      if ((unint64_t)v12 <= v14)
      {
        unsigned __int16 v25 = 0;
        uint64_t v24 = 0;
        *a3 = 0;
        a3[1] = 0;
        uint64_t v40 = a3[3];
        if (v40)
        {
          if (v12)
          {
            (*((void (**)(atomic_uchar *volatile *))*v40 + 2))(v40);
            uint64_t v24 = (uint64_t)*a3;
            unsigned __int16 v25 = a3[1];
          }
          else
          {
            unsigned __int16 v25 = 0;
            uint64_t v24 = 0;
          }
        }
LABEL_68:
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *a3 = 0;
        a3[1] = 0;
        uint64_t v23 = (atomic_uchar *volatile **)a3[3];
        if (v23)
        {
LABEL_77:
          if (v25)
          {
            (*((void (**)(atomic_uchar *volatile **, uint64_t, atomic_uchar *volatile *))*v23 + 2))(v23, v24, v25);
            uint64_t v13 = (uint64_t)*a3;
            unint64_t v12 = a3[1];
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
        goto LABEL_69;
      }
      unsigned int v15 = (unsigned __int8 *)(v13 + v14);
      a3[2] = (atomic_uchar *volatile *)(v15 + 1);
      if (!v13)
      {
        unsigned __int16 v25 = v12;
        uint64_t v24 = 0;
        goto LABEL_68;
      }
      unsigned int v16 = *v15;
      if (v16 >= 3)
      {
LABEL_69:
        *a3 = 0;
        a3[1] = 0;
        char v41 = a3[3];
        if (v41 && v12) {
          (*((void (**)(atomic_uchar *volatile *, uint64_t))*v41 + 2))(v41, v13);
        }
        goto LABEL_70;
      }
      uint64_t v17 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a3);
      if ((v17 & 0xFF0000) != 0)
      {
        WebKit::WebInspectorUIProxy::setDeveloperPreferenceOverride((uint64_t)this, v16, v17);
        goto LABEL_71;
      }
LABEL_70:
      uint64_t v42 = (uint64_t)*a3;
      char v43 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      int v44 = a3[3];
      if (v44 && v43) {
        (*((void (**)(atomic_uchar *volatile *, uint64_t))*v44 + 2))(v44, v42);
      }
LABEL_71:
      CFRelease(this[1]);
      return;
    case 0x71B:
      IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>((IPC::Decoder *)a3, &cf);
      if (BYTE4(cf))
      {
        WebKit::WebInspectorUIProxy::setFrontendConnection((IPC::Encoder *)this, (unint64_t)&cf);
        if (BYTE4(cf)) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&cf);
        }
      }
      goto LABEL_71;
    case 0x71C:
      unsigned __int16 v11 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v11 <= 0xFFu) {
        goto LABEL_70;
      }
      WebKit::WebInspectorUIProxy::setInspectorPageDeveloperExtrasEnabled(this, v11 != 0);
      goto LABEL_71;
    case 0x71D:
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)&cf);
      goto LABEL_71;
    case 0x71E:
      IPC::Decoder::decode<std::tuple<WebCore::CertificateInfo>>((uint64_t *)a3, (uint64_t)&cf);
      if ((_BYTE)v46)
      {
        WTF::isIntegralOrPointerType((WTF *)this);
        if ((_BYTE)v46)
        {
          CFTypeRef v39 = cf;
          CFTypeRef cf = 0;
          if (v39) {
            CFRelease(v39);
          }
        }
      }
      goto LABEL_71;
    case 0x720:
      unsigned __int16 v18 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v18 <= 0xFFu) {
        goto LABEL_70;
      }
      WebKit::WebInspectorUIProxy::timelineRecordingChanged((uint64_t)this, v18 != 0);
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

void non-virtual thunk to'WebKit::WebInspectorUIProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, atomic_uchar *volatile **a3)
{
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA00608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA00608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3337;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA00630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA00630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3338;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebKitSwiftLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit18WebKitSwiftLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = (char)this;
  if (qword_1EB35A230 != -1) {
    dispatch_once(&qword_1EB35A230, block);
  }
  return _MergedGlobals_132;
}

uint64_t ___ZN6WebKit18WebKitSwiftLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("libWebKitSwift.dylib", 2);
  _MergedGlobals_132 = result;
  if (result) {
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  uint64_t result = dladdr(WebKit::WebKitSwiftLibrary, &v12);
  if (result && *v12.dli_fname)
  {
    strlen(v12.dli_fname);
    uint64_t result = WTF::String::fromUTF8();
    if (!v11) {
      return result;
    }
    WTF::FileSystemImpl::parentPath((uint64_t *)&v10, (WTF::FileSystemImpl *)&v11, v3);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::String::utf8();
    if (v8) {
      uint64_t v4 = (char *)v8 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v6 = dlopen(v4, 2);
    _MergedGlobals_132 = (uint64_t)v6;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1) {
        WTF::fastFree(v8, v5);
      }
      else {
        --*(_DWORD *)v8;
      }
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t result = (uint64_t)v11;
    unsigned __int16 v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
        if (v6) {
          return result;
        }
        goto LABEL_27;
      }
      *(_DWORD *)result -= 2;
    }
    if (v6) {
      return result;
    }
  }
LABEL_27:
  if (!*(unsigned char *)(a1 + 32) && !_MergedGlobals_132)
  {
    __break(0xC471u);
    JUMPOUT(0x19937A018);
  }
  return result;
}

void sub_19937A028(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::initWKSTextAnimationManager(WebKit *this)
{
  if (qword_1EB35A238 != -1) {
    dispatch_once(&qword_1EB35A238, &__block_literal_global_24);
  }
  return qword_1EB35A240;
}

uint64_t WebKit::initWKIntelligenceTextEffectCoordinator(WebKit *this)
{
  if (qword_1EB35A248 != -1) {
    dispatch_once(&qword_1EB35A248, &__block_literal_global_27);
  }
  return qword_1EB35A250;
}

uint64_t WebKit::initWKTextExtractionContainerItem(WebKit *this)
{
  if (qword_1EB35A258 != -1) {
    dispatch_once(&qword_1EB35A258, &__block_literal_global_30);
  }
  return qword_1EB35A260;
}

uint64_t WebKit::initWKTextExtractionEditable(WebKit *this)
{
  if (qword_1EB35A268 != -1) {
    dispatch_once(&qword_1EB35A268, &__block_literal_global_33);
  }
  return qword_1EB35A270;
}

uint64_t WebKit::initWKTextExtractionLink(WebKit *this)
{
  if (qword_1EB35A278 != -1) {
    dispatch_once(&qword_1EB35A278, &__block_literal_global_36);
  }
  return qword_1EB35A280;
}

uint64_t WebKit::initWKTextExtractionTextItem(WebKit *this)
{
  if (qword_1EB35A288 != -1) {
    dispatch_once(&qword_1EB35A288, &__block_literal_global_39);
  }
  return qword_1EB35A290;
}

uint64_t WebKit::initWKTextExtractionScrollableItem(WebKit *this)
{
  if (qword_1EB35A298 != -1) {
    dispatch_once(&qword_1EB35A298, &__block_literal_global_42);
  }
  return qword_1EB35A2A0;
}

uint64_t WebKit::initWKTextExtractionImageItem(WebKit *this)
{
  if (qword_1EB35A2A8 != -1) {
    dispatch_once(&qword_1EB35A2A8, &__block_literal_global_45);
  }
  return qword_1EB35A2B0;
}

Class ___ZN6WebKitL27initWKSTextAnimationManagerEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKSTextAnimationManager");
  qword_1EB35A240 = (uint64_t)result;
  WebKit::getWKSTextAnimationManagerClass[0] = WebKit::WKSTextAnimationManagerFunction;
  return result;
}

uint64_t WebKit::WKSTextAnimationManagerFunction(WebKit *this)
{
  return qword_1EB35A240;
}

Class ___ZN6WebKitL39initWKIntelligenceTextEffectCoordinatorEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKIntelligenceTextEffectCoordinator");
  qword_1EB35A250 = (uint64_t)result;
  WebKit::getWKIntelligenceTextEffectCoordinatorClass = WebKit::WKIntelligenceTextEffectCoordinatorFunction;
  return result;
}

uint64_t WebKit::WKIntelligenceTextEffectCoordinatorFunction(WebKit *this)
{
  return qword_1EB35A250;
}

Class ___ZN6WebKitL33initWKTextExtractionContainerItemEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionContainerItem");
  qword_1EB35A260 = (uint64_t)result;
  WebKit::getWKTextExtractionContainerItemClass = WebKit::WKTextExtractionContainerItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionContainerItemFunction(WebKit *this)
{
  return qword_1EB35A260;
}

Class ___ZN6WebKitL28initWKTextExtractionEditableEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionEditable");
  qword_1EB35A270 = (uint64_t)result;
  WebKit::getWKTextExtractionEditableClass = WebKit::WKTextExtractionEditableFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionEditableFunction(WebKit *this)
{
  return qword_1EB35A270;
}

Class ___ZN6WebKitL24initWKTextExtractionLinkEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionLink");
  qword_1EB35A280 = (uint64_t)result;
  WebKit::getWKTextExtractionLinkClass = WebKit::WKTextExtractionLinkFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionLinkFunction(WebKit *this)
{
  return qword_1EB35A280;
}

Class ___ZN6WebKitL28initWKTextExtractionTextItemEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionTextItem");
  qword_1EB35A290 = (uint64_t)result;
  WebKit::getWKTextExtractionTextItemClass = WebKit::WKTextExtractionTextItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionTextItemFunction(WebKit *this)
{
  return qword_1EB35A290;
}

Class ___ZN6WebKitL34initWKTextExtractionScrollableItemEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionScrollableItem");
  qword_1EB35A2A0 = (uint64_t)result;
  WebKit::getWKTextExtractionScrollableItemClass = WebKit::WKTextExtractionScrollableItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionScrollableItemFunction(WebKit *this)
{
  return qword_1EB35A2A0;
}

Class ___ZN6WebKitL29initWKTextExtractionImageItemEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKTextExtractionImageItem");
  qword_1EB35A2B0 = (uint64_t)result;
  WebKit::getWKTextExtractionImageItemClass = WebKit::WKTextExtractionImageItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionImageItemFunction(WebKit *this)
{
  return qword_1EB35A2B0;
}

IPC::Encoder *WebKit::WebMockContentFilterManager::mockContentFilterSettingsChanged(WebKit::WebMockContentFilterManager *this, WebCore::MockContentFilterSettings *a2)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  Class result = (IPC::Encoder *)WebKit::WebProcess::singleton(void)::process;
  uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 296);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 244;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    unsigned __int16 v11 = v6;
    IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::encode(v6, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    Class result = v11;
    unsigned __int16 v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

WTF *WebKit::WebNotificationManager::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x744:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::UUID>>(a3, (uint64_t)&v8);
      if (v10) {
        this = (WTF *)WebKit::WebNotificationManager::didClickNotification(v3, (const WTF::UUID *)&v8);
      }
      break;
    case 0x745:
      this = IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, a2, (uint64_t)&v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didCloseNotifications((uint64_t)v3, (uint64_t)&v8);
        if (v10)
        {
          this = v8;
          if (v8)
          {
            char v8 = 0;
            *(_DWORD *)uint64_t v9 = 0;
            this = (WTF *)WTF::fastFree(this, v4);
          }
        }
      }
      break;
    case 0x746:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, a2, (uint64_t)&v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didRemoveNotificationDecisions((WTF::StringImpl **)v3, (uint64_t)&v8, v5);
        if (v10) {
          this = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v6);
        }
      }
      break;
    case 0x747:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::UUID>>(a3, (uint64_t)&v8);
      if (v10) {
        this = (WTF *)WebKit::WebNotificationManager::didShowNotification(v3, (const WTF::UUID *)&v8);
      }
      break;
    case 0x748:
      this = IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>(a3, &v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v3, &v8, v9[0]);
        if (v10)
        {
          this = v8;
          char v8 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF *)WTF::StringImpl::destroy(this, v7);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

WTF *non-virtual thunk to'WebKit::WebNotificationManager::didReceiveMessage(WebKit::WebNotificationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebNotificationManager::didReceiveMessage((WebKit::WebNotificationManager *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::WebPage::layerVolatilityTimerFired(WebKit::WebPage *this)
{
  double v1 = *((double *)this + 219) + *((double *)this + 219);
  *((double *)this + 219) = v1;
  return WebKit::WebPage::markLayersVolatileOrRetry((uint64_t)this, 2 * (v1 > 2.0));
}

uint64_t WebKit::WebPage::textAutoSizingAdjustmentTimerFired(WebKit::WebPage *this)
{
  return MEMORY[0x1F4172880](*((void *)this + 6));
}

uint64_t WebKit::WebPage::freezeLayerTree(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 2104);
  int v5 = v4 | a2;
  *(_DWORD *)(a1 + 2104) = v4 | a2;
  uint64_t v6 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v9 = 134219008;
    uint64_t v10 = a1;
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = a2;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::freezeLayerTree: Adding a reason to freeze layer tree (reason=%d, new=%d, old=%d)", (uint8_t *)&v9, 0x28u);
  }
  return WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState((WebKit::WebPage *)a1);
}

void WebKit::WebPage::constructFrameTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebFrame::createRemoteSubframe(a1, a2, *(void *)a3, *(void *)(a3 + 8), (WTF::AtomStringImpl **)(a3 + 16), &v9);
  uint64_t v5 = *(unsigned int *)(a3 + 36);
  if (v5)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = 40 * v5;
    do
    {
      WebKit::WebPage::constructFrameTree(a1, v9, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

WebCore::Settings *WebKit::WebPage::setBackgroundExtendsBeyondPage(WebKit::WebPage *this, int a2)
{
  Class result = *(WebCore::Settings **)(*((void *)this + 6) + 112);
  if (a2 != (*((unsigned char *)result + 669) & 4) >> 2) {
    return (WebCore::Settings *)WebCore::Settings::setBackgroundShouldExtendBeyondPage(result);
  }
  return result;
}

uint64_t WebKit::WebPage::setPaginationBehavesLikeColumns(WebKit::WebPage *this)
{
  return WebCore::Page::setPagination();
}

uint64_t WebKit::WebPage::setEditable(WebKit::WebPage *this, int a2)
{
  char v3 = (WebCore::Page *)*((void *)this + 6);
  *((unsigned char *)v3 + 656) = a2;
  *((unsigned char *)v3 + 338) = a2 ^ 1;
  WebCore::Page::checkedFocusController((uint64_t *)&v10, v3);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v10);
  uint64_t v5 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::applyEditingStyleToBodyElement(v8);
    uint64_t v9 = *(WebCore::FrameSelection **)(*(void *)(v5 + 296) + 3096);
    if (!*((unsigned char *)v9 + 153)) {
      WebCore::FrameSelection::setSelectionFromNone(v9);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  if (result) {
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

uint64_t *WebKit::WebPage::restoreSessionInternal(uint64_t *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = a1[304];
  *(unsigned char *)(v8 + 12) = 1;
  ++*(_DWORD *)(v8 + 8);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9F86A8;
  v9[1] = v8;
  void v9[2] = v8;
  int v16 = v9;
  char v17 = 1;
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  if (v10)
  {
    __int16 v11 = *(void **)a2;
    uint64_t v12 = 312 * v10;
    do
    {
      WebKit::toHistoryItem(a1[304], (uint64_t)v11, (uint64_t *)&v15);
      __int16 v13 = v15;
      *((unsigned char *)v15 + 146) = a3;
      WebKit::WebBackForwardListProxy::addItemFromUIProcess(*(void *)(*(void *)(a1[6] + 136) + 16), v11, &v15, a1[5], a4);
      WTF::RefCounted<WebCore::HistoryItem>::deref(v13);
      v11 += 39;
      v12 -= 312;
    }
    while (v12);
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)&v16);
}

atomic_uchar *WebKit::WebPage::scaleView(atomic_uchar *this, double a2, WebCore::LocalFrame *a3)
{
  if (*(float *)(*((void *)this + 6) + 368) != a2)
  {
    int v4 = (WebCore::Page **)this;
    double v5 = WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)this, a3);
    uint64_t v6 = v4[6];
    float v7 = v5 / *((float *)v6 + 92);
    uint64_t v14 = 0;
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)v6 + 20) + 56))(*((void *)v6 + 20));
    if (v8)
    {
      uint64_t v9 = (_DWORD *)v8;
      ++*(_DWORD *)(v8 + 8);
      double v10 = a2 / *((float *)v4[6] + 92);
      uint64_t v11 = WebCore::ScrollableArea::visibleContentRect();
      float v12 = v10;
      LODWORD(v14) = llroundf(v12 * (float)(int)v11);
      HIDWORD(v14) = llroundf(v12 * (float)SHIDWORD(v11));
      if (v9[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    float v13 = a2;
    WebCore::Page::setViewScaleFactor(v4[6], v13);
    return WebKit::WebPage::scalePage((WebKit::WebPage *)v4, v7, (const WebCore::IntPoint *)&v14);
  }
  return this;
}

WebKit::WebURLSchemeHandlerProxy *WebKit::WebPage::registerURLSchemeHandler(void *a1, uint64_t a2, WebCore::LegacySchemeRegistry *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[5];
    WTF::String::utf8();
    uint64_t v9 = v54 ? (uint64_t)v54 + 16 : 0;
    *(_DWORD *)buf = 134218754;
    uint64_t v56 = a1;
    __int16 v57 = 2048;
    uint64_t v58 = v8;
    __int16 v59 = 2048;
    uint64_t v60 = a2;
    __int16 v61 = 2080;
    uint64_t v62 = v9;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::registerURLSchemeHandler: Registered handler %llu for the '%s' scheme", buf, 0x2Au);
    if (v54)
    {
      if (*(_DWORD *)v54 == 1) {
        WTF::fastFree(v54, v7);
      }
      else {
        --*(_DWORD *)v54;
      }
    }
  }
  WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(a3, (const WTF::String *)v7);
  WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(a3, v10);
  uint64_t v11 = a1 + 260;
  float v13 = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)float v13 = 1;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = a1;
  *((void *)v13 + 3) = a2;
  *((void *)v13 + 4) = 0;
  uint64_t v14 = a1[260];
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 260, 0), (uint64_t v14 = *v11) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *(_DWORD *)(*(void *)a3 + 16);
  id v53 = a1 + 260;
  if (v16 >= 0x100) {
    unsigned int v17 = v16 >> 8;
  }
  else {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  }
  int v18 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v20 = v17 & v15;
    long long v21 = (uint64_t *)(v14 + 16 * (v17 & v15));
    long long v22 = (WTF *)*v21;
    if (*v21 == -1)
    {
      int v18 = (uint64_t *)(v14 + 16 * v20);
      goto LABEL_21;
    }
    if (!v22) {
      break;
    }
    if (WTF::equal(v22, *(const WTF::StringImpl **)a3, v12))
    {
      uint64_t result = WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v13, v23);
      goto LABEL_35;
    }
LABEL_21:
    unsigned int v17 = i + v20;
  }
  if (v18)
  {
    *int v18 = 0;
    v18[1] = 0;
    --*(_DWORD *)(*v53 - 16);
    long long v21 = v18;
  }
  WTF::String::operator=(v21, (WTF::StringImpl **)a3);
  uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)v21[1];
  v21[1] = (uint64_t)v13;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(result, v27);
  }
  uint64_t v24 = *v53;
  if (*v53) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v28 = *v53;
  if (*v53) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_34:
      uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v53, (WTF::StringImpl **)v21);
      long long v21 = (uint64_t *)result;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_34;
  }
LABEL_35:
  char v32 = a1 + 261;
  uint64_t v33 = v21[1];
  uint64_t v34 = a1[261];
  if (v34
    || (uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1 + 261),
        (uint64_t v34 = *v32) != 0))
  {
    int v35 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    int v35 = 0;
  }
  unint64_t v36 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
  unint64_t v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
  unsigned int v39 = v35 & ((v38 >> 31) ^ v38);
  uint64_t v40 = (void *)(v34 + 16 * v39);
  uint64_t v41 = *v40;
  if (!*v40)
  {
LABEL_46:
    *uint64_t v40 = a2;
    if (!*(void *)(v33 + 8))
    {
      uint64_t v44 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = v33;
      char v45 = *(unsigned int **)(v33 + 8);
      *(void *)(v33 + 8) = v44;
      if (v45)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v27);
        }
      }
    }
    id v46 = *(atomic_uint **)(v33 + 8);
    atomic_fetch_add(v46, 1u);
    uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)v40[1];
    v40[1] = v46;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastFree(result, v27);
    }
    uint64_t v47 = *v32;
    if (*v32) {
      int v48 = *(_DWORD *)(v47 - 12) + 1;
    }
    else {
      int v48 = 1;
    }
    *(_DWORD *)(v47 - 12) = v48;
    uint64_t v49 = *v32;
    if (*v32) {
      int v50 = *(_DWORD *)(v49 - 12);
    }
    else {
      int v50 = 0;
    }
    uint64_t v51 = (*(_DWORD *)(v49 - 16) + v50);
    unint64_t v52 = *(unsigned int *)(v49 - 4);
    if (v52 > 0x400)
    {
      if (v52 > 2 * v51) {
        return result;
      }
    }
    else if (3 * v52 > 4 * v51)
    {
      return result;
    }
    return (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v32);
  }
  uint64_t v42 = 0;
  int v43 = 1;
  while (v41 != a2)
  {
    if (v41 == -1) {
      uint64_t v42 = v40;
    }
    unsigned int v39 = (v39 + v43) & v35;
    uint64_t v40 = (void *)(v34 + 16 * v39);
    uint64_t v41 = *v40;
    ++v43;
    if (!*v40)
    {
      if (v42)
      {
        *uint64_t v42 = 0;
        v42[1] = 0;
        --*(_DWORD *)(*v32 - 16);
        uint64_t v40 = v42;
      }
      goto LABEL_46;
    }
  }
  return result;
}

void WebKit::WebPage::createRemoteSubframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::AtomStringImpl **a6)
{
  {
    float v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebFrame::createRemoteSubframe(a1, v11, a4, a5, a6, &v14);
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

void WebKit::WebPage::getFrameInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v5)
  {
    uint64_t v6 = (CFTypeRef *)v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    WebKit::WebFrame::info((WebKit::WebFrame *)v6, (uint64_t)v16);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>((uint64_t)v22, (uint64_t)v16);
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 16))(v7, v22);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v8);
    uint64_t v10 = v21;
    long long v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v20 != -1) {
      ((void (*)(char *, uint64_t *))off_1EEA00AF8[v20])(&v15, &v19);
    }
    int v20 = -1;
    uint64_t v11 = v18;
    int v18 = 0;
    if (v11) {
      CFRelease(v11);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v17);
    CFRelease(v6[1]);
  }
  else
  {
    v22[0] = 0;
    v22[296] = 0;
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 16))(v12, v22);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v13);
  }
}

void WebKit::WebPage::getFrameTree(uint64_t a1, uint64_t *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::frameTreeData(*(WebKit::WebFrame **)(a1 + 88), (uint64_t)v9);
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v9);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v4);
  uint64_t v6 = v14;
  uint64_t v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v13 != -1) {
    ((void (*)(char *, uint64_t *))off_1EEA00AF8[v13])(&v8, &v12);
  }
  int v13 = -1;
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
}

void WebKit::WebPage::didFinishLoadInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    char v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      }
    }
    uint64_t v7 = *(const void **)(v4 + 8);
    CFRelease(v7);
  }
}

void WebKit::WebPage::frameWasRemovedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebFrame::removeFromTree((unsigned int *)v4);
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

WebCore::Page *WebKit::WebPage::mainFrameURLChangedInAnotherProcess(WebKit::WebPage *this, const WTF::URL *a2)
{
  uint64_t result = (WebCore::Page *)*((void *)this + 6);
  if (result) {
    return (WebCore::Page *)WebCore::Page::setMainFrameURL(result, a2);
  }
  return result;
}

uint64_t WebKit::WebPage::requestMediaPlaybackState(uint64_t a1, uint64_t *a2)
{
  if (WebCore::Page::mediaPlaybackExists(*(WebCore::Page **)(a1 + 48)))
  {
    if (WebCore::Page::mediaPlaybackIsPaused(*(WebCore::Page **)(a1 + 48)))
    {
      uint64_t v4 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
    }
    else
    {
      int v5 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 1095);
      uint64_t v4 = *a2;
      *a2 = 0;
      if (v5) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = 3;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v6);
    }
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v7(v4);
}

uint64_t WebKit::WebPage::pauseAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::pauseAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::suspendAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::suspendAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::resumeAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::resumeAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::suspendAllMediaBuffering(WebKit::WebPage *this)
{
  return MEMORY[0x1F4172768](*((void *)this + 6));
}

uint64_t WebKit::WebPage::reinitializeWebPage(uint64_t a1, uint64_t a2)
{
  WebKit::WebPage::setSize(a1, (const WebCore::IntSize *)a2);
  uint64_t v4 = *(void *)(a1 + 72);
  if (*(void *)(v4 + 32) != *(void *)(a2 + 72))
  {
    *(void *)(a1 + 72) = 0;
    WebKit::DrawingArea::removeMessageReceiverIfNeeded((unsigned __int8 *)v4);
    WebKit::DrawingArea::create((WebKit::WebPage *)a1, a2, (uint64_t *)&v14);
    uint64_t v6 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 112) + 680) |= 0x200000uLL;
    WebKit::addRootFramesToNewDrawingArea(*(void *)(a1 + 88), *(WebKit::WebFrame **)(a1 + 72), v5);
    uint64_t v7 = *(unsigned char **)(a1 + 72);
    int v8 = *(unsigned __int8 *)(a2 + 568);
    if (v7[65] != v8)
    {
      v7[65] = v8;
      (*(void (**)(unsigned char *))(*(void *)v7 + 264))(v7);
      uint64_t v7 = *(unsigned char **)(a1 + 72);
    }
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v7 + 104))(v7, a2 + 16);
    (*(void (**)(void))(**(void **)(a1 + 72) + 376))();
    (*(void (**)(void))(**(void **)(a1 + 72) + 384))();
    WebKit::WebPage::unfreezeLayerTree(a1, 8);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebKit::WebPage::setMinimumSizeForAutoLayout((unsigned int *)a1, (const WebCore::IntSize *)(a2 + 300));
  WebKit::WebPage::setSizeToContentAutoSizeMaximumSize((unsigned int *)a1, (IntSize *)(a2 + 308));
  int v9 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a1 + 1824) != v9)
  {
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EEA00D28;
    uint64_t v14 = v10;
    WebKit::WebPage::setActivityState((WebKit::WebPage *)a1, v9, 0, (uint64_t)&v14);
    uint64_t v11 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = *(unsigned __int8 *)(a2 + 345);
  if (*(unsigned __int8 *)(a1 + 64) != v12)
  {
    *(unsigned char *)(a1 + 64) = v12;
    (*(void (**)(void))(**(void **)(a1 + 72) + 328))(*(void *)(a1 + 72));
  }
  WebKit::WebPage::effectiveAppearanceDidChange((WebCore::Page **)a1, *(unsigned __int8 *)(a2 + 370));
  return WebKit::WebPage::platformReinitialize((WebCore::Page **)a1);
}

uint64_t WebKit::WebPage::setSize(uint64_t this, const WebCore::IntSize *a2)
{
  if (*(_DWORD *)(this + 56) != *(_DWORD *)a2 || *(_DWORD *)(this + 60) != *((_DWORD *)a2 + 1))
  {
    uint64_t v4 = this;
    *(void *)(this + 56) = *(void *)a2;
    this = (*(uint64_t (**)(void))(**(void **)(*(void *)(this + 48) + 160) + 56))(*(void *)(*(void *)(this + 48) + 160));
    if (this)
    {
      int v5 = (_DWORD *)this;
      ++*(_DWORD *)(this + 8);
      uint64_t v6 = WebCore::Widget::frameRect((WebCore::Widget *)this);
      uint64_t v7 = *(void *)a2;
      v8[0] = v6;
      v8[1] = v7;
      (*(void (**)(_DWORD *, void *))(*(void *)v5 + 16))(v5, v8);
      this = (*(uint64_t (**)(void))(**(void **)(v4 + 72) + 40))(*(void *)(v4 + 72));
      if (v5[2] == 1) {
        return (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      }
      else {
        --v5[2];
      }
    }
  }
  return this;
}

uint64_t WebKit::addRootFramesToNewDrawingArea(uint64_t this, WebKit::WebFrame *a2, WebKit::DrawingArea *a3)
{
  uint64_t v4 = (void *)this;
  uint64_t v5 = *(void *)(this + 24);
  if (v5
    && (this = *(void *)(v5 + 8)) != 0
    && (this = (*(uint64_t (**)(uint64_t, WebKit::WebFrame *, WebKit::DrawingArea *))(*(void *)this + 16))(this, a2, a3), (this & 1) != 0)|| (uint64_t v6 = v4[5]) != 0 && *(void *)(*(void *)(v6 + 616) + 8) == v6)
  {
    this = (*(uint64_t (**)(WebKit::WebFrame *, void, void))(*(void *)a2 + 248))(a2, v4[10], v4[11]);
  }
  uint64_t v7 = v4[3];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 88);
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
        while (1)
        {
          WebKit::WebFrame::fromCoreFrame(v9, &v13);
          uint64_t v11 = v13;
          if (v13)
          {
            WebKit::addRootFramesToNewDrawingArea(v13, a2, v10);
            CFRelease(*((CFTypeRef *)v11 + 1));
          }
          uint64_t v12 = *(void *)(v9 + 72);
          if (!v12) {
            break;
          }
          atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
          uint64_t v9 = v12;
        }
        return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
      }
    }
  }
  return this;
}

void WebKit::WebPage::~WebPage(WebKit::WebPage *this)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EEA00780;
  *((void *)this + 2) = &unk_1EEA007C8;
  *((void *)this + 4) = &unk_1EEA00800;
  uint64_t v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::destructor:", buf, 0x16u);
  }
  if (*((_DWORD *)this + 597))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 594, 0);
    WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(this);
  }
  uint64_t v4 = (void *)*((void *)this + 33);
  *(void *)buf = 0;
  [v4 setWebPage:buf];
  uint64_t v5 = (const char ****)((char *)this + 688);
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)this + 86);
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, buf);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 20);
  if (v8)
  {
    uint64_t v7 = *(unsigned int *)(v8 - 4);
    uint64_t v6 = v8 + 8 * v7;
  }
  char v162 = (char *)this + 160;
  uint64_t v163 = v6;
  uint64_t v164 = v6;
  uint64_t v165 = v6;
  uint64_t v166 = v8 + 8 * v7;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v162);
  for (uint64_t i = *(void *)&buf[8]; *(void *)&buf[8] != v163; uint64_t i = *(void *)&buf[8])
  {
    uint64_t v11 = *(void *)(*(void *)i + 8);
    uint64_t v12 = *(unsigned int **)(v11 + 80);
    *(void *)(v11 + 80) = 0;
    if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  int v13 = (uint64_t *)*((void *)this + 265);
  if (v13 == (uint64_t *)-1)
  {
    __break(0xC471u);
    JUMPOUT(0x19937D394);
  }
  WebKit::WebStorageNamespaceProvider::decrementUseCount(v13);
  {
    uint64_t v161 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v161);
  }
  uint64_t v15 = *(void *)(WebKit::WebProcess::singleton(void)::process + 336);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 32);
    char v162 = (char *)*((void *)this + 265);
    uint64_t v167 = *((void *)this + 5);
    *(void *)buf = &v162;
    *(void *)&uint8_t buf[8] = &v167;
    IPC::Connection::send<Messages::GPUConnectionToWebProcess::DestroyVisibilityPropagationContextForPage>(v16, (uint64_t **)buf, 0, 0, 0);
  }
  uint64_t v17 = (WebKit::PlaybackSessionManager *)*((void *)this + 62);
  if (v17) {
    WebKit::PlaybackSessionManager::invalidate(v17);
  }
  int v18 = (WebKit::VideoPresentationManager *)*((void *)this + 63);
  if (v18) {
    WebKit::VideoPresentationManager::invalidate(v18);
  }
  *(void *)buf = *((void *)this + 220);
  *(void *)&uint8_t buf[8] = *((void *)this + 221);
  char v162 = 0;
  *((void *)this + 220) = 0;
  uint64_t v163 = 0;
  *((void *)this + 221) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v14);
  if (*(_DWORD *)&buf[12])
  {
    int v20 = *(uint64_t **)buf;
    uint64_t v21 = 8 * *(unsigned int *)&buf[12];
    do
    {
      uint64_t v22 = *v20;
      *v20++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v22 + 16))(v22, 0);
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      v21 -= 8;
    }
    while (v21);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v19);
  *(void *)buf = 0;
  WebKit::WebPage::setMediaEnvironment(this, (WTF::StringImpl **)buf);
  uint64_t v24 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  int v25 = (unsigned int *)*((void *)this + 312);
  *((void *)this + 312) = 0;
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v25 + 2);
    (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
  }
  unsigned __int16 v26 = (void *)*((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v26) {
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)this + 2488, (uint64_t)v26);
  }
  uint64_t v27 = *((void *)this + 310);
  *((void *)this + 310) = 0;
  if (v27)
  {
    if (*(unsigned char *)(v27 + 336)) {
      WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(v27 + 224), v26);
    }
    if (*(unsigned char *)(v27 + 216))
    {
      uint64_t v28 = *(void *)(v27 + 208);
      *(void *)(v27 + 208) = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
    int v29 = *(WTF **)(v27 + 152);
    if (v29)
    {
      *(void *)(v27 + 152) = 0;
      *(_DWORD *)(v27 + 160) = 0;
      WTF::fastFree(v29, v26);
    }
    uint64_t v30 = *(_DWORD **)(v27 + 144);
    *(void *)(v27 + 144) = 0;
    if (v30)
    {
      if (v30[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
      }
      else {
        --v30[2];
      }
    }
    if (*(unsigned char *)(v27 + 136))
    {
      unint64_t v31 = *(WTF::StringImpl **)(v27 + 128);
      *(void *)(v27 + 128) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    std::__optional_destruct_base<WebKit::TextAnimationUnanimatedRangeData,false>::~__optional_destruct_base[abi:sn180100](v27 + 48);
    uint64_t v33 = *(unsigned int **)v27;
    *(void *)uint64_t v27 = 0;
    if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v32);
    }
    WTF::fastFree((WTF *)v27, v32);
  }
  uint64_t v34 = (WTF::StringImpl *)*((void *)this + 309);
  *((void *)this + 309) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v26);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  int v35 = (unsigned int **)*((void *)this + 307);
  if (v35) {
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v35, v26);
  }
  uint64_t v36 = *((void *)this + 306);
  if (v36) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v36, (WTF::StringImpl *)v26);
  }
  uint64_t v37 = *((void *)this + 305);
  if (v37) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v37, v26);
  }
  WTF::Ref<WebKit::WebHistoryItemClient,WTF::RawPtrTraits<WebKit::WebHistoryItemClient>,WTF::DefaultRefDerefTraits<WebKit::WebHistoryItemClient>>::~Ref((_DWORD **)this + 304);
  unsigned int v39 = *((_DWORD *)this + 605);
  if (v39) {
    WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*((unsigned int **)this + 301), (void *)(*((void *)this + 301) + 24 * v39));
  }
  uint64_t v40 = (WTF *)*((void *)this + 301);
  if (v40)
  {
    *((void *)this + 301) = 0;
    *((_DWORD *)this + 604) = 0;
    WTF::fastFree(v40, v38);
  }
  uint64_t v41 = *((void *)this + 300);
  *((void *)this + 300) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *((void *)this + 299);
  *((void *)this + 299) = 0;
  if (v42) {
    WebCore::CachedPage::operator delete();
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2376, v38);
  if (*((unsigned char *)this + 2368)) {
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2352, v43);
  }
  uint64_t v44 = (unsigned int *)*((void *)this + 292);
  *((void *)this + 292) = 0;
  if (v44) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v44, v43);
  }
  *((void *)this + 283) = &unk_1EE9E76C8;
  uint64_t v45 = *((void *)this + 289);
  *((void *)this + 289) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 2264));
  uint64_t v47 = (WTF::StringImpl *)*((void *)this + 280);
  *((void *)this + 280) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v46);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  int v48 = (WTF::StringImpl *)*((void *)this + 279);
  *((void *)this + 279) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v46);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v49 = (WTF::StringImpl **)*((void *)this + 278);
  if (v49) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v49, v46);
  }
  uint64_t v50 = *((void *)this + 277);
  if (v50) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v50, v46);
  }
  *((void *)this + 270) = &unk_1EE9BA5F0;
  uint64_t v51 = *((void *)this + 276);
  *((void *)this + 276) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 2160));
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 269, 0);
  id v53 = (unsigned int *)*((void *)this + 264);
  *((void *)this + 264) = 0;
  if (v53 && atomic_fetch_add((atomic_uint *volatile)v53, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v53);
    WTF::fastFree((WTF *)v53, v52);
  }
  uint64_t v54 = *((void *)this + 262);
  if (v54)
  {
    uint64_t v55 = *(unsigned int *)(v54 - 4);
    if (v55)
    {
      uint64_t v56 = (uint64_t *)(v54 + 8);
      do
      {
        if (*(v56 - 1) != -1)
        {
          uint64_t v57 = *v56;
          *uint64_t v56 = 0;
          if (v57) {
            (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
          }
        }
        v56 += 2;
        --v55;
      }
      while (v55);
    }
    WTF::fastFree((WTF *)(v54 - 16), v52);
  }
  uint64_t v58 = *((void *)this + 261);
  if (v58)
  {
    uint64_t v59 = *(unsigned int *)(v58 - 4);
    if (v59)
    {
      uint64_t v60 = (unsigned int **)(v58 + 8);
      do
      {
        if (*(v60 - 1) != (unsigned int *)-1)
        {
          __int16 v61 = *v60;
          *uint64_t v60 = 0;
          if (v61)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v52);
            }
          }
        }
        v60 += 2;
        --v59;
      }
      while (v59);
    }
    WTF::fastFree((WTF *)(v58 - 16), v52);
  }
  uint64_t v62 = *((void *)this + 260);
  if (v62)
  {
    uint64_t v63 = *(unsigned int *)(v62 - 4);
    if (v63)
    {
      uint64_t v64 = (WTF::StringImpl **)*((void *)this + 260);
      do
      {
        uint64_t v65 = *v64;
        if (*v64 != (WTF::StringImpl *)-1)
        {
          uint64_t v66 = v64[1];
          v64[1] = 0;
          if (v66)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v66, v52);
            uint64_t v65 = *v64;
          }
          *uint64_t v64 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2) {
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v52);
            }
            else {
              *(_DWORD *)v65 -= 2;
            }
          }
        }
        v64 += 2;
        --v63;
      }
      while (v63);
    }
    WTF::fastFree((WTF *)(v62 - 16), v52);
  }
  uint64_t v67 = (WTF::StringImpl *)*((void *)this + 257);
  *((void *)this + 257) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v52);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  if (*((unsigned char *)this + 2016)) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebPage *)((char *)this + 1896), (WTF::StringImpl *)v52);
  }
  *((void *)this + 231) = &unk_1EE9B3390;
  uint64_t v68 = *((void *)this + 234);
  *((void *)this + 234) = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1848));
  uint64_t v70 = *((void *)this + 229);
  *((void *)this + 229) = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  uint64_t v71 = *((void *)this + 226);
  if (v71) {
    WTF::fastFree((WTF *)(v71 - 16), v69);
  }
  if (*((unsigned char *)this + 1800))
  {
    uint64_t v72 = *((void *)this + 224);
    if ((v72 & 0x8000000000000) != 0)
    {
      char v159 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v159);
        WTF::fastFree((WTF *)v159, v69);
      }
    }
  }
  uint64_t v73 = (WTF::StringImpl **)*((void *)this + 223);
  if (v73) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v73, (WTF::StringImpl *)v69);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1760, v69);
  *((void *)this + 212) = &unk_1EE9BA5F0;
  uint64_t v74 = *((void *)this + 218);
  *((void *)this + 218) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1696));
  std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)this + 210, 0);
  uint64_t v75 = *((void *)this + 205);
  *((void *)this + 205) = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  *((void *)this + 197) = &unk_1EE9E76C8;
  uint64_t v76 = *((void *)this + 203);
  *((void *)this + 203) = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1576));
  uint64_t v78 = *((void *)this + 187);
  *((void *)this + 187) = 0;
  if (v78)
  {
    if (*(_DWORD *)(v78 + 28) == 2)
    {
      if ((*(_WORD *)(v78 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v78);
      }
    }
    else
    {
      *(_DWORD *)(v78 + 28) -= 2;
    }
  }
  uint64_t v79 = *((void *)this + 186);
  if (v79) {
    WTF::fastFree((WTF *)(v79 - 16), v77);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebKit::WebPage *)((char *)this + 1376));
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1336);
  uint64_t v81 = *((void *)this + 159);
  *((void *)this + 159) = 0;
  if (v81) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v81, v80);
  }
  uint64_t v82 = *((void *)this + 157);
  *((void *)this + 157) = 0;
  if (v82)
  {
    if (*(_DWORD *)(v82 + 28) == 2)
    {
      if ((*(_WORD *)(v82 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v82);
      }
    }
    else
    {
      *(_DWORD *)(v82 + 28) -= 2;
    }
  }
  uint64_t v83 = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (v83)
  {
    if (*(_DWORD *)(v83 + 28) == 2)
    {
      if ((*(_WORD *)(v83 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v83);
      }
    }
    else
    {
      *(_DWORD *)(v83 + 28) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1192);
  uint64_t v85 = *((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v85)
  {
    if (*(_DWORD *)(v85 + 28) == 2)
    {
      if ((*(_WORD *)(v85 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v85);
      }
    }
    else
    {
      *(_DWORD *)(v85 + 28) -= 2;
    }
  }
  uint64_t v86 = *((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v86)
  {
    if (*(_DWORD *)(v86 + 28) == 2)
    {
      if ((*(_WORD *)(v86 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v86);
      }
    }
    else
    {
      *(_DWORD *)(v86 + 28) -= 2;
    }
  }
  uint64_t v87 = *((void *)this + 110);
  if (v87) {
    WTF::fastFree((WTF *)(v87 - 16), v84);
  }
  uint64_t v88 = *((void *)this + 109);
  if (v88) {
    WTF::fastFree((WTF *)(v88 - 16), v84);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 808);
  char v90 = (uint64_t *)*((void *)this + 100);
  if (v90) {
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v90, v89);
  }
  *((void *)this + 94) = &unk_1EE9B3390;
  uint64_t v91 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 752));
  uint64_t v93 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 720, v92);
  unint64_t v94 = (const char ***)*((void *)this + 89);
  *((void *)this + 89) = 0;
  if (v94) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v94);
  }
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)this + 86);
  uint64_t v96 = (const char ***)*((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v96) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v96);
  }
  unint64_t v97 = (const char ***)*((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v97) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v97);
  }
  char v98 = *v5;
  _DWORD *v5 = 0;
  if (v98) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v98);
  }
  uint64_t v99 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 24))(v99);
  }
  uint64_t v100 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 16))(v100);
  }
  uint64_t v101 = *((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 16))(v101);
  }
  char v102 = (WebKit::GeolocationPermissionRequestManager *)*((void *)this + 81);
  *((void *)this + 81) = 0;
  if (v102)
  {
    WebKit::GeolocationPermissionRequestManager::~GeolocationPermissionRequestManager(v102, v95);
    WTF::fastFree(v103, v104);
  }
  id v105 = (WebKit::WebScreenOrientationManager *)*((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v105)
  {
    WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(v105);
    WTF::fastFree(v106, v107);
  }
  uint64_t v108 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v108) {
    WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v108 + 16));
  }
  CFTypeRef v109 = (_DWORD *)*((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v109)
  {
    if (v109[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v109 + 8))(v109);
    }
    else {
      --v109[2];
    }
  }
  unint64_t v110 = (WebKit::NotificationPermissionRequestManager *)*((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v110) {
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v110);
  }
  long long v111 = (WebKit::WebOpenPanelResultListener *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v111) {
    WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v111, v95);
  }
  long long v112 = (unsigned int *)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v112 && atomic_fetch_add((atomic_uint *volatile)v112, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v112);
    WTF::fastFree((WTF *)v112, v95);
  }
  uint64_t v113 = (unsigned int *)*((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v113 && atomic_fetch_add((atomic_uint *volatile)v113, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v113);
    WTF::fastFree((WTF *)v113, v95);
  }
  unint64_t v114 = (unsigned int *)*((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v114 && atomic_fetch_add((atomic_uint *volatile)v114, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v114);
    WTF::fastFree((WTF *)v114, v95);
  }
  unsigned int v115 = (_DWORD *)*((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v115)
  {
    if (v115[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v115 + 8))(v115);
    }
    else {
      --v115[2];
    }
  }
  unint64_t v116 = (_DWORD *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v116)
  {
    if (v116[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v116 + 8))(v116);
    }
    else {
      --v116[4];
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 520);
  int v118 = (_DWORD *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v118)
  {
    if (v118[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v118 + 8))(v118);
    }
    else {
      --v118[4];
    }
  }
  unsigned int v119 = (_DWORD *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v119)
  {
    if (v119[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v119 + 8))(v119);
    }
    else {
      --v119[4];
    }
  }
  char v120 = (WebKit::WebPageInspectorTargetController *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v120)
  {
    WebKit::WebPageInspectorTargetController::~WebPageInspectorTargetController(v120, v117);
    WTF::fastFree(v121, v122);
  }
  uint64_t v123 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v123) {
    WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref((_DWORD *)(v123 + 16), (WTF::StringImpl *)v117);
  }
  char v124 = (_DWORD *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v124)
  {
    if (v124[5] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v124 + 8))(v124);
    }
    else {
      --v124[5];
    }
  }
  v125 = (unsigned int *)*((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v125 && atomic_fetch_add((atomic_uint *volatile)v125 + 5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v125 + 5);
    (*(void (**)(unsigned int *))(*(void *)v125 + 8))(v125);
  }
  uint64_t v126 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v126) {
    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
  }
  long long v127 = (WebKit::FindController *)*((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v127)
  {
    WebKit::FindController::~FindController(v127, v117);
    WTF::fastFree(v128, v129);
  }
  uint64_t v130 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v130) {
    (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
  }
  uint64_t v131 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
  }
  uint64_t v132 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
  }
  uint64_t v133 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  uint64_t v134 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  uint64_t v135 = *((void *)this + 42);
  if (v135)
  {
    uint64_t v136 = *(unsigned int *)(v135 - 4);
    if (v136)
    {
      uint64_t v137 = (WTF **)(v135 + 8);
      do
      {
        if (*(v137 - 1) != (WTF *)-1)
        {
          uint64_t v138 = *v137;
          *uint64_t v137 = 0;
          if (v138) {
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v138, v117);
          }
        }
        v137 += 2;
        --v136;
      }
      while (v136);
    }
    WTF::fastFree((WTF *)(v135 - 16), v117);
  }
  *((void *)this + 37) = &unk_1EE9B3390;
  uint64_t v139 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 296));
  uint64_t v141 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
  }
  v142 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v142) {
    CFRelease(v142);
  }
  uint64_t v143 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
  }
  uint64_t v144 = *((void *)this + 20);
  if (v144)
  {
    uint64_t v145 = *(unsigned int *)(v144 - 4);
    if (v145)
    {
      char v146 = (WTF **)*((void *)this + 20);
      do
      {
        char v147 = *v146;
        if (*v146 != (WTF *)-1)
        {
          *char v146 = 0;
          if (v147)
          {
            if (*(_DWORD *)v147 == 1) {
              WTF::fastFree(v147, v140);
            }
            else {
              --*(_DWORD *)v147;
            }
          }
        }
        ++v146;
        --v145;
      }
      while (v145);
    }
    WTF::fastFree((WTF *)(v144 - 16), v140);
  }
  uint64_t v148 = *((void *)this + 19);
  if ((v148 & 0x8000000000000) != 0)
  {
    uint64_t v160 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v160);
      WTF::fastFree((WTF *)v160, v140);
    }
  }
  uint64_t v149 = *((void *)this + 15);
  if (v149)
  {
    uint64_t v150 = *(unsigned int *)(v149 - 4);
    if (v150)
    {
      unint64_t v151 = (_DWORD **)(v149 + 8);
      do
      {
        if (*(v151 - 1) != (_DWORD *)-1)
        {
          char v152 = *v151;
          *unint64_t v151 = 0;
          if (v152)
          {
            if (v152[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v152 + 8))(v152);
            }
            else {
              --v152[2];
            }
          }
        }
        v151 += 2;
        --v150;
      }
      while (v150);
    }
    WTF::fastFree((WTF *)(v149 - 16), v140);
  }
  unint64_t v153 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2) {
      WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v140);
    }
    else {
      *(_DWORD *)v153 -= 2;
    }
  }
  uint64_t v154 = (_DWORD *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v154)
  {
    if (v154[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v154 + 8))(v154);
    }
    else {
      --v154[2];
    }
  }
  uint64_t v155 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v155) {
    CFRelease(*(CFTypeRef *)(v155 + 8));
  }
  uint64_t v156 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v156) {
    (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
  }
  uint64_t v157 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
  }
  uint64_t v158 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v158) {
    WTF::RefCounted<WebCore::Page>::deref(v158);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v140);
}

{
  uint64_t vars8;

  WebKit::WebPage::~WebPage(this);

  JUMPOUT(0x199740C10);
}

const char ***WebKit::WebPage::SandboxExtensionTracker::invalidate(const char ****this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
  }
  uint64_t v3 = this[1];
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3[2] - 1;
    v3[2] = (const char **)v4;
    if (v4)
    {
      this[1] = 0;
    }
    else
    {
      v3[1][1] = 0;
      sandbox_extension_release();
      uint64_t v3 = this[1];
      this[1] = 0;
      if (!v3) {
        goto LABEL_7;
      }
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v3);
  }
LABEL_7:
  uint64_t result = this[2];
  if (!result) {
    return result;
  }
  uint64_t v6 = (uint64_t)result[2] - 1;
  result[2] = (const char **)v6;
  if (v6)
  {
    this[2] = 0;
  }
  else
  {
    result[1][1] = 0;
    sandbox_extension_release();
    uint64_t result = this[2];
    this[2] = 0;
    if (!result) {
      return result;
    }
  }

  return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
}

void non-virtual thunk to'WebKit::WebPage::~WebPage(WebKit::WebPage *this)
{
}

{
  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 32));
}

{
  uint64_t vars8;

  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 32));

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebPage::messageSenderConnection(WebKit::WebPage *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
}

uint64_t WebKit::WebPage::messageSenderDestinationID(WebKit::WebPage *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::WebPage::setInjectedBundleEditorClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EE9F0D88;
  }
  uint64_t result = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::WebPage::listenForLayoutMilestones(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return WebCore::Page::addLayoutMilestones();
  }
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundleUIClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EEA00A50;
  }
  uint64_t result = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

atomic_uint *WebKit::WebPage::editorState@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  LOBYTE(v7) = a2;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a3 + 8) = 256;
  *(unsigned char *)(a3 + 32) = 0;
  uint64_t v10 = (WebKit::EditorState::PostLayoutData *)(a3 + 32);
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 352) = 0;
  *(unsigned char *)(a3 + 464) = 0;
  *(void *)(a3 + 10) = 0;
  *(unsigned char *)(a3 + 18) = 0;
  uint64_t v11 = *(void *)(a1 + 2032) + 1;
  *(void *)(a1 + 2032) = v11;
  *(void *)a3 = v11;
  WebCore::Page::checkedFocusController((uint64_t *)&v64, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (atomic_uint *)WebCore::FocusController::focusedOrMainFrame((WebCore::FocusController *)v64);
  uint64_t v14 = result;
  if (result) {
    atomic_fetch_add(result + 2, 1u);
  }
  uint64_t v15 = (_DWORD *)v64;
  *(void *)&long long v64 = 0;
  if (v15)
  {
    if (!*v15)
    {
      __break(0xC471u);
      goto LABEL_67;
    }
    --*v15;
  }
  if (result)
  {
    uint64_t v6 = (uint64_t *)(a3 + 352);
    uint64_t v16 = (atomic_uchar *)WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)result, v13);
    if (v16
      && (WebKit::PluginView::selectionString(v16, &v64), int v43 = (WTF::StringImpl *)v64, *(void *)&v64 = 0, v43))
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v42);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
      *(_WORD *)(a3 + 9) = 256;
      *(unsigned char *)(a3 + 16) = 1;
    }
    else
    {
      uint64_t v17 = (WebCore::Document *)*((void *)v14 + 37);
      uint64_t v18 = *((void *)v17 + 387);
      uint64_t v4 = (long long *)(v18 + 56);
      uint64_t v3 = WebCore::Document::editor(v17);
      int v19 = *(unsigned __int8 *)(v18 + 153);
      *(unsigned char *)(a3 + 9) = *(unsigned char *)(v18 + 153) == 0;
      *(unsigned char *)(a3 + 10) = v19 == 2;
      *(unsigned char *)(a3 + 13) = WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(v18 + 56));
      *(unsigned char *)(a3 + 14) = WebCore::VisibleSelection::isContentRichlyEditable((WebCore::VisibleSelection *)(v18 + 56));
      *(unsigned char *)(a3 + 15) = WebCore::VisibleSelection::isInPasswordField((WebCore::VisibleSelection *)(v18 + 56));
      if (*(void *)(v3 + 32)) {
        int v20 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
      }
      else {
        int v20 = 0;
      }
      *(unsigned char *)(a3 + 17) = v20 != 0;
      if (*(unsigned char *)(v3 + 88))
      {
        char v22 = 1;
      }
      else if (WebCore::Editor::client((WebCore::Editor *)v3))
      {
        uint64_t v21 = WebCore::Editor::client((WebCore::Editor *)v3);
        char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 120))(v21) ^ 1;
      }
      else
      {
        char v22 = 0;
      }
      *(unsigned char *)(a3 + 8) = v22;
      BOOL v23 = *(unsigned char *)(a1 + 948) == 2 || *(unsigned char *)(a1 + 2027) != 0;
      *(unsigned char *)(a3 + 18) = v23;
      uint64_t v5 = (__int16 *)*((void *)v14 + 37);
      *((_DWORD *)v5 + 7) += 2;
      int v48 = v5;
      if (*(unsigned char *)(a3 + 10))
      {
        WebCore::VisibleSelection::range((uint64_t *)&v64, (WebCore::VisibleSelection *)(v18 + 56));
        if (!LOBYTE(v66[0])) {
          goto LABEL_68;
        }
        isInsideOverladouble y = WebCore::ImageOverlay::isInsideOverlay();
        goto LABEL_64;
      }
      while (1)
      {
        *(_DWORD *)(a1 + 2028) = *(unsigned __int8 *)(a3 + 13);
        if ((v7 & 1) != 0
          || WebKit::WebPage::requiresPostLayoutDataForEditorState((WebKit::WebPage *)a1, (WebCore::Document **)v14))
        {
          WebCore::Document::updateLayout();
        }
        uint64_t v24 = *((void *)v5 + 68);
        if (!v24) {
          break;
        }
        uint64_t v25 = *(void *)(v24 + 8);
        if (!v25) {
          break;
        }
        unsigned __int16 v26 = *(WebCore::LocalFrameView **)(v25 + 288);
        if (!v26 || (WebCore::LocalFrameView::needsLayout(v26) & 1) != 0) {
          break;
        }
        uint64_t v4 = &v64;
        if (!*(unsigned char *)(a3 + 336))
        {
          v49[0] = 0;
          *(void *)&v49[8] = 0;
          v49[16] = 0;
          *(void *)&v49[24] = 0x11040000000000FFLL;
          uint64_t v7 = v55;
          v55[16] = 0;
          v59[24] = 0;
          LOBYTE(v60[0]) = 0;
          char v61 = 0;
          uint64_t v5 = &v62;
          __int16 v62 = 0;
          char v63 = 0;
          *(_DWORD *)&v49[32] = 0;
          uint64_t v51 = 0;
          long long v50 = 0uLL;
          int v52 = 0;
          uint64_t v53 = 0;
          memset(v54, 0, 13);
          *(void *)&v55[5] = 0;
          *(void *)uint64_t v55 = 0;
          LOBYTE(v65) = 0;
          long long v64 = *(unint64_t *)v49;
          WebCore::Color::Color();
          LODWORD(v66[0]) = *(_DWORD *)&v49[32];
          long long v40 = v50;
          long long v50 = 0uLL;
          *(_OWORD *)((char *)v66 + 8) = v40;
          *((void *)&v66[1] + 1) = v51;
          LODWORD(v67) = v52;
          *((void *)&v67 + 1) = v53;
          *(void *)&long long v40 = v54[0];
          uint64_t v53 = 0;
          v54[0] = 0;
          BYTE12(v68) = BYTE4(v54[1]);
          DWORD2(v68) = v54[1];
          *(void *)&long long v68 = v40;
          WebCore::Color::Color();
          long long v71 = v57;
          long long v72 = v58;
          v73[0] = *(_OWORD *)v59;
          *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)&v59[9];
          *(_OWORD *)&v69[8] = *(_OWORD *)&v55[8];
          long long v70 = v56;
          LOBYTE(v74[0]) = 0;
          char v75 = 0;
          if (v61)
          {
            std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(v74, v60);
            char v75 = 1;
          }
          __int16 v76 = v62;
          char v77 = v63;
          char v78 = 1;
          std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>(v10, (unsigned __int8 *)&v64);
          if (v78) {
            WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v64, v41);
          }
          WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v49, v41);
        }
        char canCut = WebCore::Editor::canCut((WebCore::Editor *)v3);
        if (*(unsigned char *)(a3 + 336))
        {
          *(unsigned char *)(a3 + 328) = canCut;
          canCopdouble y = WebCore::Editor::canCopy((WebCore::Editor *)v3);
          if (*(unsigned char *)(a3 + 336))
          {
            *(unsigned char *)(a3 + 329) = canCopy;
            char canEdit = WebCore::Editor::canEdit((WebCore::Editor *)v3);
            if (*(unsigned char *)(a3 + 336))
            {
              *(unsigned char *)(a3 + 330) = canEdit;
              if (!*(unsigned char *)(a3 + 464))
              {
                memset(v49, 0, sizeof(v49));
                long long v64 = 0u;
                long long v65 = 0u;
                memset(v66, 0, sizeof(v66));
                long long v67 = 0u;
                long long v68 = *(_OWORD *)&v49[4];
                *(_OWORD *)uint64_t v69 = *(_OWORD *)&v49[20];
                v69[16] = 1;
                std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>((uint64_t)v6, &v64);
                std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v30);
              }
              if (!*(unsigned char *)(a1 + 2109)) {
                break;
              }
              WebCore::Editor::fontAttributesAtSelectionStart((uint64_t *)&v64, (WebCore::Editor *)v3);
              if (*(unsigned char *)(a3 + 336))
              {
                unint64_t v31 = (void *)(a3 + 240);
                if (*(unsigned char *)(a3 + 320))
                {
                  uint64_t v32 = v64;
                  *(void *)&long long v64 = 0;
                  uint64_t v33 = (_DWORD *)*v31;
                  *unint64_t v31 = v32;
                  if (v33) {
                    WTF::RefCounted<WebCore::Font>::deref(v33);
                  }
                  WebCore::Color::operator=();
                  WebCore::Color::operator=();
                  WebCore::Color::operator=();
                  *(_OWORD *)(a3 + 272) = v66[0];
                  *(_WORD *)(a3 + 288) = v66[1];
                  unsigned int v35 = *(_DWORD *)(a3 + 308);
                  if (v35) {
                    WTF::VectorDestructor<true,WebCore::TextList>::destruct(*(WTF::StringImpl **)(a3 + 296), (WTF::StringImpl *)(*(void *)(a3 + 296) + 24 * v35));
                  }
                  uint64_t v36 = *(WTF **)(a3 + 296);
                  if (v36)
                  {
                    *(void *)(a3 + 296) = 0;
                    *(_DWORD *)(a3 + 304) = 0;
                    WTF::fastFree(v36, v34);
                  }
                  *(void *)(a3 + 296) = *((void *)&v66[1] + 1);
                  uint64_t v37 = v67;
                  *((void *)&v66[1] + 1) = 0;
                  *(void *)&long long v67 = 0;
                  *(void *)(a3 + 304) = v37;
                  *(_WORD *)(a3 + 312) = WORD4(v67);
                  *(unsigned char *)(a3 + 314) = BYTE10(v67);
                }
                else
                {
                  std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(v31, (uint64_t *)&v64);
                  *(unsigned char *)(a3 + 320) = 1;
                }
                WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66[1] + 8, v34);
                if ((*((void *)&v65 + 1) & 0x8000000000000) != 0)
                {
                  uint64_t v45 = (unsigned int *)(*((void *)&v65 + 1) & 0xFFFFFFFFFFFFLL);
                  if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v65 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, v45);
                    WTF::fastFree((WTF *)v45, v38);
                  }
                }
                if ((v65 & 0x8000000000000) != 0)
                {
                  id v46 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
                  if (atomic_fetch_add((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, v46);
                    WTF::fastFree((WTF *)v46, v38);
                  }
                }
                if ((*((void *)&v64 + 1) & 0x8000000000000) != 0)
                {
                  uint64_t v47 = (unsigned int *)(*((void *)&v64 + 1) & 0xFFFFFFFFFFFFLL);
                  if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v64 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, v47);
                    WTF::fastFree((WTF *)v47, v38);
                  }
                }
                unsigned int v39 = (_DWORD *)v64;
                *(void *)&long long v64 = 0;
                if (v39) {
                  WTF::RefCounted<WebCore::Font>::deref(v39);
                }
                break;
              }
            }
          }
        }
LABEL_67:
        __break(1u);
LABEL_68:
        isInsideOverladouble y = 0;
LABEL_64:
        *(unsigned char *)(a3 + 11) = isInsideOverlay;
        *(unsigned char *)(a3 + 12) = WebCore::VisibleSelection::isInAutoFilledAndViewableField((WebCore::VisibleSelection *)v4);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64);
      }
      WebKit::WebPage::getPlatformEditorState((WebCore::Node *)a1, (WebCore::ScrollView **)v14, a3);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v48);
    }
    if (*(unsigned char *)(a3 + 464)) {
      WebKit::EditorState::clipOwnedRectExtentsToNumericLimits(void)::$_1::operator()<WebKit::EditorState::VisualData>(v6);
    }
    return (atomic_uint *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v14 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::focusedPluginViewForFrame(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *((void *)this + 37);
  if (!v2 || (*(_WORD *)(v2 + 3406) & 8) == 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 + 28);
  *(_DWORD *)(v2 + 28) = v4 + 2;
  if (*(void *)(v2 + 1280) == *(void *)(v2 + 3584))
  {
    uint64_t result = WebKit::WebPage::pluginViewForFrame((uint64_t)this, a2);
    int v4 = *(_DWORD *)(v2 + 28) - 2;
  }
  else
  {
    uint64_t result = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v2 + 28) = v4;
  }
  else
  {
    uint64_t v5 = result;
    if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    return v5;
  }
  return result;
}

void WebCore::FontAttributes::~FontAttributes(WebCore::FontAttributes *this, void *a2)
{
  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 0x8000000000000) != 0)
  {
    uint64_t v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v3);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 0x8000000000000) != 0)
  {
    uint64_t v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v3);
    }
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 0x8000000000000) != 0)
  {
    uint64_t v10 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v3);
    }
  }
  uint64_t v7 = *(_DWORD **)this;
  *(void *)this = 0;
  if (v7) {
    WTF::RefCounted<WebCore::Font>::deref(v7);
  }
}

uint64_t WebKit::WebPage::changeFontAttributes(uint64_t a1, WebCore::FontAttributeChanges *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296) + 3096)
                                                                                                + 56)))
    {
      WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::FontAttributeChanges::createEditingStyle((uint64_t *)&v7, a2);
      WebCore::FontAttributeChanges::editAction(a2);
      WebCore::Editor::applyStyleToSelection();
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        WTF::RefCounted<WebCore::EditingStyle>::deref(v6);
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::changeFont(uint64_t a1, WebCore::FontChanges *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296) + 3096)
                                                                                                + 56)))
    {
      WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::FontChanges::createEditingStyle((uint64_t *)&v7, a2);
      WebCore::Editor::applyStyleToSelection();
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        WTF::RefCounted<WebCore::EditingStyle>::deref(v6);
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::executeEditCommandWithCallback(WebCore::Page **a1, const WTF::String *a2, const WTF::String *a3, uint64_t *a4)
{
  WebKit::WebPage::executeEditingCommand(a1, a2, a3);
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::WebPage::selectAll(WebCore::Page **this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v6 = 0;
  WebKit::WebPage::executeEditingCommand(this, (const WTF::String *)&v7, (const WTF::String *)&v6);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return WebKit::WebPage::platformDidSelectAll(this);
}

atomic_uint *WebKit::WebPage::executeEditingCommand(WebCore::Page **this, const WTF::String *a2, const WTF::String *a3)
{
  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController((uint64_t *)v14, this[6]);
  uint64_t result = (atomic_uint *)WebCore::FocusController::focusedOrMainFrame(v14[0]);
  uint64_t v8 = result;
  if (result) {
    atomic_fetch_add(result + 2, 1u);
  }
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19937E33CLL);
    }
    --*(_DWORD *)v9;
  }
  if (result)
  {
    uint64_t v10 = (WebKit::PluginView *)WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)result, v7);
    if (v10)
    {
      WebKit::PluginView::handleEditingCommand(v10, a2, a3);
    }
    else
    {
      uint64_t v11 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v8 + 37));
      WebCore::Editor::command((uint64_t *)v14, v11, a2);
      WebCore::Editor::Command::execute();
      uint64_t v12 = v16;
      uint64_t v16 = 0;
      if (v12) {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
      }
      int v13 = v15;
      uint64_t v15 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 7) == 2)
        {
          if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v13);
          }
        }
        else
        {
          *((_DWORD *)v13 + 7) -= 2;
        }
      }
    }
    return (atomic_uint *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v8 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(WebKit::WebPage *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 6) + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)(v1 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
  uint64_t v4 = *(void *)(v1 + 296);
  if (v4)
  {
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t v5 = *(WebCore::Quirks **)(v4 + 720);
    if (!v5) {
      uint64_t v5 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v4);
    }
    uint64_t shouldDispatchSyntheticMouseEventsWhenModifyingSelection = WebCore::Quirks::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(v5);
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
  else
  {
    uint64_t shouldDispatchSyntheticMouseEventsWhenModifyingSelection = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  return shouldDispatchSyntheticMouseEventsWhenModifyingSelection;
}

unsigned char *WebKit::WebPage::scheduleFullEditorStateUpdate(unsigned char *this)
{
  this[949] = 1;
  if (this[948])
  {
    if (this[2027]) {
      this[948] = 2;
    }
  }
  else
  {
    if (this[2027]) {
      char v1 = 2;
    }
    else {
      char v1 = 1;
    }
    this[948] = v1;
    return (unsigned char *)WebCore::Page::scheduleRenderingUpdate();
  }
  return this;
}

uint64_t WebKit::WebPage::renderTreeExternalRepresentation(WebKit::WebPage *this)
{
  return WebCore::externalRepresentation();
}

uint64_t WebKit::WebPage::renderTreeExternalRepresentationForPrinting(WebKit::WebPage *this)
{
  return WebCore::externalRepresentation();
}

uint64_t WebKit::WebPage::setHasResourceLoadClient(uint64_t this, char a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (v2) {
    *(unsigned char *)(v2 + 1097) = a2;
  }
  return this;
}

uint64_t WebKit::WebPage::setCanUseCredentialStorage(uint64_t this, char a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (v2) {
    *(unsigned char *)(v2 + 1682) = a2;
  }
  return this;
}

uint64_t WebKit::WebPage::trackedRepaintRects@<X0>(WebKit::WebPage *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WebKit::WebPage::localMainFrameView(this);
  if (!result)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v5 = *(unsigned int *)(result + 1068);
  if (!v5)
  {
LABEL_9:
    API::Array::create(&v18, a2);
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v17);
  }
  if (!(v5 >> 29))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v19) = v5;
    uint64_t v18 = v6;
    if (*(_DWORD *)(v4 + 1068))
    {
      uint64_t v7 = v6;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = (float *)(*(void *)(v4 + 1056) + v8);
        double v12 = *v11;
        double v13 = v11[1];
        double v14 = v11[2];
        double v15 = v11[3];
        uint64_t v16 = (double *)API::Object::newObject(0x30uLL, 38);
        *(void *)uint64_t v16 = &unk_1EE9D1E28;
        WebKit::InitializeWebKit2((WebKit *)v16);
        *(void *)uint64_t v16 = &unk_1EE9B3EA8;
        v16[2] = v12;
        v16[3] = v13;
        v16[4] = v14;
        v16[5] = v15;
        uint64_t v9 = v10 + 1;
        *(void *)(v7 + 8 * v10) = v16;
        v8 += 16;
      }
      while (v10 + 1 < (unint64_t)*(unsigned int *)(v4 + 1068));
      HIDWORD(v19) = v10 + 1;
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPage::mainFrame(WebKit::WebPage *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *(void *)(v1 + 160);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPage::increaseListLevel(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::increaseSelectionListLevel((uint64_t *)&v6, v4);
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 7) == 2)
      {
        if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v5);
        }
      }
      else
      {
        *((_DWORD *)v5 + 7) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::decreaseListLevel(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::decreaseSelectionListLevel(v4);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::changeListType(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::changeSelectionListType(v4);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setBaseWritingDirection(uint64_t a1)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v4, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v4);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::setBaseWritingDirection();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

unsigned char *WebKit::WebPage::close(unsigned char *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (this[186]) {
    return this;
  }
  uint64_t v1 = this;
  WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)this);
  uint64_t v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)v1 + 5);
    *(_DWORD *)long long v58 = 134218240;
    *(void *)&v58[4] = v1;
    *(_WORD *)&v58[12] = 2048;
    *(void *)&v58[14] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::close:", v58, 0x16u);
  }
  {
    uint64_t v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v53);
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 226;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  *(void *)long long v58 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, (uint64_t *)v1 + 5);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)v58, 0, 0);
  uint64_t v7 = *(IPC::Encoder **)v58;
  *(void *)long long v58 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v51, v52);
  }
  v1[186] = 1;
  WebKit::WebFrame::url(*((WebKit::WebFrame **)v1 + 11), (uint64_t)v58);
  uint64_t v9 = *(WTF::StringImpl **)v58;
  if (*(void *)v58)
  {
    int v10 = *(_DWORD *)(*(void *)v58 + 4);
    *(void *)long long v58 = 0;
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    *(_DWORD *)v9 -= 2;
    if (v10)
    {
LABEL_10:
      *(void *)long long v58 = 0;
      *(void *)&v58[8] = 0;
      (*(void (**)(void, unsigned char *, unsigned char *))(**((void **)v1 + 45) + 256))(*((void *)v1 + 45), v1, v58);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v11);
    }
  }
LABEL_11:
  {
    uint64_t v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v54);
  }
  uint64_t v12 = *(void *)(WebKit::WebProcess::singleton(void)::process + 136);
  if (v12)
  {
    CFRetain(*((CFTypeRef *)v1 + 1));
    (*(void (**)(void, uint64_t, unsigned char *))(**(void **)(v12 + 40) + 24))(*(void *)(v12 + 40), v12, v1);
    CFRelease(*((CFTypeRef *)v1 + 1));
  }
  double v13 = (WebKit::WebInspector *)*((void *)v1 + 58);
  if (v13)
  {
    WebKit::WebInspector::close(v13);
    double v14 = (unsigned int *)*((void *)v1 + 58);
    *((void *)v1 + 58) = 0;
    if (v14)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v14 + 5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14 + 5);
        (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
      }
    }
  }
  WebCore::InspectorController::disconnectAllFrontends(*(WebCore::InspectorController **)(*((void *)v1 + 6) + 80));
  uint64_t v16 = (WebKit::WebFullScreenManager *)*((void *)v1 + 70);
  *((void *)v1 + 70) = 0;
  if (v16)
  {
    WebKit::WebFullScreenManager::invalidate(v16, v15);
    if (*((_DWORD *)v16 + 4) == 1) {
      (*(void (**)(WebKit::WebFullScreenManager *))(*(void *)v16 + 8))(v16);
    }
    else {
      --*((_DWORD *)v16 + 4);
    }
  }
  uint64_t v17 = *((void *)v1 + 72);
  if (v17)
  {
    uint64_t v18 = *(unsigned int **)(v17 + 24);
    *(void *)(v17 + 24) = 0;
    if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v15);
    }
    uint64_t v19 = (_DWORD *)*((void *)v1 + 72);
    *((void *)v1 + 72) = 0;
    if (v19)
    {
      if (v19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[2];
      }
    }
  }
  uint64_t v20 = *((void *)v1 + 76);
  if (v20)
  {
    uint64_t v21 = *(unsigned int **)(v20 + 8);
    *(void *)(v20 + 8) = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v15);
    }
    char v22 = (WebKit::WebOpenPanelResultListener *)*((void *)v1 + 76);
    *((void *)v1 + 76) = 0;
    if (v22) {
      WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v22, v15);
    }
  }
  uint64_t v23 = *((void *)v1 + 73);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 8);
    if (v24)
    {
      uint64_t v25 = *(unsigned int **)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v15);
      }
      unsigned __int16 v26 = (unsigned int *)*((void *)v1 + 73);
      *((void *)v1 + 73) = 0;
      if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v15);
      }
    }
  }
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)v1 + 86);
  if ((*((void *)v1 + 274) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 2160));
  }
  uint64_t v27 = *((void *)v1 + 201);
  *((void *)v1 + 201) = v27 & 0xFDFFFFFFFFFFFFLL;
  if ((v27 & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 1576));
  }
  uint64_t v28 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v28 = &unk_1EE9F0D88;
  uint64_t v29 = *((void *)v1 + 43);
  *((void *)v1 + 43) = v28;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v30 = &unk_1EEA00850;
  uint64_t v31 = *((void *)v1 + 44);
  *((void *)v1 + 44) = v30;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v32 = &unk_1EEA008C8;
  uint64_t v33 = *((void *)v1 + 45);
  *((void *)v1 + 45) = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v34 = &unk_1EEA009F0;
  uint64_t v35 = *((void *)v1 + 46);
  *((void *)v1 + 46) = v34;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = (void *)WTF::fastMalloc((WTF *)8);
  void *v36 = &unk_1EEA00A50;
  uint64_t v37 = *((void *)v1 + 47);
  *((void *)v1 + 47) = v36;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  uint64_t v38 = *((void *)v1 + 84);
  *((void *)v1 + 84) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  uint64_t v39 = *(void *)(*((void *)v1 + 11) + 24);
  if (v39)
  {
    uint64_t v40 = *(void *)(v39 + 8);
    if (v40)
    {
      if (!*(unsigned char *)(v40 + 144))
      {
        uint64_t v41 = (unsigned int *)(v40 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v40 + 8), 1u);
        WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v40 + 280));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v41);
      }
    }
  }
  uint64_t v42 = *((void *)v1 + 9);
  *((void *)v1 + 9) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *((void *)v1 + 10);
  *((void *)v1 + 10) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = (_DWORD *)*((void *)v1 + 6);
  *((void *)v1 + 6) = 0;
  if (v44) {
    WTF::RefCounted<WebCore::Page>::deref(v44);
  }
  int v45 = v1[794];
  v1[794] = 0;
  uint64_t v46 = *((void *)v1 + 264);
  if (v46)
  {
    uint64_t v47 = *(WebKit::WebRemoteObjectRegistry **)(v46 + 8);
    if (v47) {
      WebKit::WebRemoteObjectRegistry::close(v47);
    }
  }
  {
    uint64_t v55 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v55);
  }
  uint64_t v48 = WebKit::WebProcess::singleton(void)::process + 48;
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0xB7u, *((void *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v48, 0xAFu, *((void *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v48, 0xB1u, *((void *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v48, 0x83u, *((void *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v48, 0xAAu, *((void *)v1 + 5));
  uint64_t v49 = *((void *)v1 + 34);
  *((void *)v1 + 34) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  WebKit::WebPage::stopObservingNowPlayingMetadata((WebKit::WebPage *)v1);
  {
    long long v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v56);
  }
  this = (unsigned char *)WebKit::WebProcess::removeWebPage((uint64_t *)WebKit::WebProcess::singleton(void)::process, *((void *)v1 + 5));
  {
    long long v57 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v57);
  }
  if (v45)
  {
    long long v50 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
    return (unsigned char *)WTF::RunLoop::stop(v50);
  }
  return this;
}

void WebKit::WebPage::stopObservingNowPlayingMetadata(WebKit::WebPage *this)
{
  uint64_t v1 = *((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v1)
  {
    WebCore::PlatformMediaSessionManager::sharedManager(this);
    WebCore::PlatformMediaSessionManager::removeNowPlayingMetadataObserver();
    uint64_t v2 = 0;
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)&v2, v1);
  }
}

uint64_t WebKit::WebPage::tryClose(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t shouldClose = WebCore::FrameLoader::shouldClose(*(WebCore::FrameLoader **)(v4 + 280));
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, shouldClose);
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v7(v5);
}

IPC::Encoder *WebKit::WebPage::sendClose(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1879;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::loadURLInFrame(uint64_t a1, const String *a2, const WTF::String *a3, uint64_t a4, uint64_t a5)
{
  {
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a4, a5);
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8);
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v23, a2, 0);
    CFTypeRef v24 = 0;
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)v23, a3);
    uint64_t v22 = 0;
    *(_OWORD *)CFTypeRef cf = 0u;
    memset(v20, 0, sizeof(v20));
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)uint64_t v17 = 0u;
    WebCore::SubstituteData::SubstituteData((WebCore::SubstituteData *)v17);
    MEMORY[0x1997330D0](v25, v9, v23, v17);
    WebCore::FrameLoader::load();
    MEMORY[0x1997330E0](v25);
    CFTypeRef v11 = cf[0];
    cf[0] = 0;
    if (v11) {
      CFRelease(v11);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v20, v10);
    double v13 = v17[1];
    v17[1] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = (unsigned int *)v17[0];
    v17[0] = 0;
    if (v14) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v12);
    }
    CFTypeRef v15 = v24;
    CFTypeRef v24 = 0;
    if (v15) {
      CFRelease(v15);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v23);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebCore::SubstituteData::~SubstituteData(WebCore::SubstituteData *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebCore::SubstituteData *)((char *)this + 48);
  uint64_t v4 = (const void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  }
}

void WebKit::WebPage::loadDataInFrame(uint64_t a1, uint64_t a2, uint64_t a3, const WTF::String *a4, const WTF::String *a5, const WTF::URL *a6, uint64_t a7, uint64_t a8)
{
  v38[1] = a2;
  v38[2] = a3;
  {
    unsigned __int16 v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  uint64_t v11 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a7, a8);
  if (v11)
  {
    uint64_t v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v38);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v34, a6, a4, *(void *)(v38[0] + 48), a5);
    CFTypeRef v36 = 0;
    char v37 = 0;
    char v35 = v35 & 0xF1 | 4;
    uint64_t v13 = v38[0];
    v38[0] = 0;
    v29[0] = v13;
    WebCore::SubstituteData::SubstituteData((uint64_t)&v30, v29, (uint64_t)a6, (WebCore::ResourceResponseBase *)v34, 1);
    CFTypeRef v15 = (unsigned int *)v29[0];
    v29[0] = 0;
    if (v15) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v14);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(v12 + 24) + 8) + 144)) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(v12 + 24) + 8);
    }
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v27, (const String *)a6, 0);
    CFTypeRef v28 = 0;
    MEMORY[0x1997330D0](v29, v16, v27, &v30);
    WebCore::FrameLoader::load();
    MEMORY[0x1997330E0](v29);
    CFTypeRef v17 = v28;
    CFTypeRef v28 = 0;
    if (v17) {
      CFRelease(v17);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v27);
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v32, v18);
    uint64_t v21 = v31;
    uint64_t v31 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v30;
    uint64_t v30 = 0;
    if (v22) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v20);
    }
    CFTypeRef v23 = v36;
    CFTypeRef v36 = 0;
    if (v23) {
      CFRelease(v23);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v34, v20);
    uint64_t v25 = (unsigned int *)v38[0];
    v38[0] = 0;
    if (v25) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v24);
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

void WebKit::WebPage::createProvisionalFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a3, a4);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    WebKit::WebFrame::createProvisionalFrame((unsigned int *)v6, a2);
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void WebKit::WebPage::destroyProvisionalFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebFrame::destroyProvisionalFrame((unsigned int *)v4);
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WebKit::WebPage::loadDidCommitInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebFrame::loadDidCommitInAnotherProcess((unsigned int *)v4);
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WebKit::WebPage::loadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(unsigned __int8 *)(a2 + 433);
    int v10 = (*(unsigned __int8 *)(a2 + 196) >> 2) & 1;
    if (*(unsigned char *)(a2 + 544)) {
      uint64_t v6 = *(void *)(a2 + 536);
    }
    *(_DWORD *)buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v52 = 2048;
    uint64_t v53 = v7;
    __int16 v54 = 2048;
    uint64_t v55 = v8;
    __int16 v56 = 1024;
    int v57 = v9;
    __int16 v58 = 1024;
    int v59 = v10;
    __int16 v60 = 2048;
    uint64_t v61 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::loadRequest: navigationID=%llu, shouldTreatAsContinuingLoad=%u, lastNavigationWasAppInitiated=%d, existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v29 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v5);
    if (!*(unsigned char *)(a2 + 40)) {
      __break(1u);
    }
    uint64_t v11 = WebKit::WebProcess::webFrame(v29, *(void *)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 88);
  }
  if (v11)
  {
    uint64_t v12 = (WebKit::WebProcess *)CFRetain(*(CFTypeRef *)(v11 + 8));
    uint64_t v13 = *(void *)(v11 + 24);
    if (v13 && (uint64_t v14 = *(void *)(v13 + 8)) != 0 && !*(unsigned char *)(v14 + 144) || (uint64_t v14 = *(void *)(v11 + 40)) != 0)
    {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
      *(unsigned char *)(a1 + 2251) = (*(unsigned char *)(a2 + 196) & 4) != 0;
      *(_WORD *)(v11 + 104) = *(_WORD *)(a2 + 528);
      *(unsigned char *)(a1 + 2250) = 1;
      uint64_t v15 = *(void *)(WebKit::WebProcess::singleton(v12) + 320);
      uint64_t v16 = *(void *)(a2 + 544);
      *(void *)(v15 + 96) = *(void *)(a2 + 536);
      *(unsigned char *)(v15 + 104) = v16;
      if (*(unsigned char *)(a2 + 16)) {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
      *(void *)(a1 + 1888) = v17;
      std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1896), a2 + 304);
      long long v18 = WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)(a1 + 688), (const char ***)(a2 + 248));
      uint64_t v19 = *(void *)(a1 + 360);
      WebKit::WebProcess::singleton((WebKit::WebProcess *)v18);
      uint64_t v20 = *(const void **)(a2 + 440);
      *(void *)buf = &unk_1EE9E6F38;
      WebKit::UserData::transform(v20, (uint64_t)buf, (uint64_t *)v33);
      uint64_t v21 = (WebCore::PublicSuffixStore *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v19 + 16))(v19, a1, a2 + 48, *(void *)&v33[0]);
      uint64_t v22 = *(void *)&v33[0];
      *(void *)&v33[0] = 0;
      if (v22) {
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
      WebCore::PublicSuffixStore::singleton(v21);
      WebCore::PublicSuffixStore::addPublicSuffix();
      uint64_t v23 = *(void *)(a2 + 560);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 568);
      *(void *)(a1 + 280) = v23;
      uint64_t v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      memset(v33, 0, sizeof(v33));
      WebCore::SubstituteData::SubstituteData((WebCore::SubstituteData *)v33);
      MEMORY[0x1997330D0](buf, v14, a2 + 48, v33);
      WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v33, v24);
      char v65 = *(unsigned char *)(a2 + 432);
      char v63 = *(unsigned char *)(a2 + 433);
      __int16 v64 = *(_WORD *)(a2 + 448);
      WTF::String::operator=(&v62, (WTF::StringImpl **)(a2 + 456));
      if (*(unsigned char *)(a2 + 576)) {
        char v66 = 1;
      }
      if (*(unsigned char *)(a2 + 580))
      {
        __int16 v30 = *(_WORD *)(a2 + 578);
        if (!v68) {
          char v68 = 1;
        }
        __int16 v67 = v30;
      }
      if (*(_WORD *)(a2 + 464))
      {
        uint64_t v31 = *(void *)(*(void *)(a1 + 48) + 160);
        if (v31)
        {
          if (!*(unsigned char *)(v31 + 144))
          {
            atomic_fetch_add((atomic_uint *volatile)(v31 + 8), 1u);
            *(_WORD *)(*(void *)(v31 + 280) + 326) |= *(_WORD *)(a2 + 464);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v31 + 8));
          }
        }
      }
      v32[0] = 0;
      v32[48] = 0;
      std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v33, a2 + 472);
      std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>(a2 + 472, (uint64_t)v32);
      std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v32, v25);
      if ((_BYTE)v34) {
        WebCore::Frame::setOwnerPermissionsPolicy();
      }
      std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v26);
      *(unsigned char *)(*(void *)(v14 + 280) + 394) = *(unsigned char *)(a2 + 577);
      WebCore::FrameLoader::load();
      MEMORY[0x1997330E0](buf);
      WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)buf);
      uint64_t v28 = *(void *)(WebKit::WebProcess::singleton(v27) + 320);
      *(void *)(v28 + 96) = 0;
      *(unsigned char *)(v28 + 104) = 0;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

const char ***WebKit::WebPage::SandboxExtensionTracker::beginLoad(const char ****a1, const char ***a2)
{
  if (*a2)
  {
    uint64_t result = (const char ***)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t result = 1;
    BOOL v5 = *a2;
    *a2 = 0;
    result[1] = v5;
    result[2] = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v6 = *a1;
  *a1 = result;
  if (v6)
  {
    return WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  }
  return result;
}

void WebKit::WebPage::loadRequestWaitingForProcessLaunch()
{
}

void WebKit::WebPage::loadDataImpl(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t *a6, uint64_t a7, WebCore::ResourceResponseBase *a8, uint64_t a9, const void **a10, __int16 a11, int a12, char a13, char a14)
{
  uint64_t v20 = *(void *)(a1 + 88);
  CFRetain(*(CFTypeRef *)(v20 + 8));
  *(_WORD *)(v20 + 104) = a11;
  *(unsigned char *)(a1 + 2250) = 1;
  if (a3) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)(a1 + 1888) = v21;
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1896), a5);
  uint64_t v22 = *a6;
  *a6 = 0;
  v43[0] = v22;
  WebCore::SubstituteData::SubstituteData((uint64_t)&v49, v43, a9, a8, a13);
  CFTypeRef v24 = (unsigned int *)v43[0];
  v43[0] = 0;
  if (v24) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v23);
  }
  uint64_t v25 = *(void *)(a1 + 360);
  unsigned __int16 v26 = v49;
  if (v49) {
    atomic_fetch_add(v49, 1u);
  }
  long long v48 = (unsigned int *)v26;
  uint64_t v27 = WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)v51);
  uint64_t v28 = WebCore::ResourceResponseBase::textEncodingName((WebCore::ResourceResponseBase *)v51);
  {
    long long v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v40);
  }
  uint64_t v29 = *a10;
  v43[0] = (uint64_t)&unk_1EE9E6F38;
  WebKit::UserData::transform(v29, (uint64_t)v43, &v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v25 + 24))(v25, a1, a7, &v48, v27, v28, &v50, v47);
  uint64_t v31 = v47;
  uint64_t v47 = 0;
  if (v31) {
    CFRelease(*(CFTypeRef *)(v31 + 8));
  }
  uint64_t v32 = v48;
  long long v48 = 0;
  if (v32) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v30);
  }
  uint64_t v33 = *(void *)(a1 + 88);
  uint64_t v34 = *(void *)(v33 + 24);
  if (v34 && (uint64_t v35 = *(void *)(v34 + 8)) != 0 && !*(unsigned char *)(v35 + 144) || (uint64_t v35 = *(void *)(v33 + 40)) != 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(v35 + 8), 1u);
    MEMORY[0x1997330D0](v43, v35, a7, &v49);
    char v45 = a14;
    char v44 = a4;
    char v46 = 1;
    WebCore::FrameLoader::load();
    MEMORY[0x1997330E0](v43);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v35 + 8));
  }
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v51, (WTF::StringImpl *)v30);
  long long v38 = v50;
  uint64_t v50 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  long long v39 = (unsigned int *)v49;
  long long v49 = 0;
  if (v39) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v39, v37);
  }
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)v43);
  CFRelease(*(CFTypeRef *)(v20 + 8));
}

WTF::StringImpl *WebKit::WebPage::loadData(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v8 = *(unsigned __int8 *)(a2 + 433);
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v42 = 2048;
    uint64_t v43 = v6;
    __int16 v44 = 2048;
    uint64_t v45 = v7;
    __int16 v46 = 1024;
    int v47 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::loadData: navigationID=%llu, shouldTreatAsContinuingLoad=%u", buf, 0x26u);
  }
  WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v5);
  uint64_t result = (WTF::StringImpl *)WebCore::PublicSuffixStore::addPublicSuffix();
  uint64_t v10 = *(void *)(a2 + 560);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 568);
  *(void *)(a1 + 280) = v10;
  uint64_t v11 = *(void *)(a2 + 256);
  if (v11)
  {
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    long long v38 = 0;
    uint64_t v12 = (WTF *)WTF::URL::invalidate((WTF::URL *)&v38);
    uint64_t v13 = *(void *)(a2 + 280);
    if (v13 && *(_DWORD *)(v13 + 4))
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 280));
      WTF::URL::operator=((uint64_t)&v38, (uint64_t)buf);
      uint64_t v15 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      if ((v39 & 3) == 1)
      {
        WTF::URL::protocol((WTF::URL *)&v38);
        if ((v18 & 0xFF00000000) != 0) {
          WTF::String::String();
        }
        else {
          WTF::String::String();
        }
        WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler((WebCore::LegacySchemeRegistry *)buf, v19);
        uint64_t v21 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    else
    {
      uint64_t v16 = WTF::aboutBlankURL(v12);
      WTF::String::operator=((uint64_t *)&v38, (WTF::StringImpl **)v16);
      long long v17 = *(_OWORD *)(v16 + 24);
      long long v39 = *(_OWORD *)(v16 + 8);
      long long v40 = v17;
    }
    if (*(unsigned char *)(a2 + 552))
    {
      uint64_t v22 = *(void *)(a1 + 48);
      if (v22) {
        *(unsigned char *)(v22 + 1686) = 1;
      }
    }
    v35[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v35);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WTF::URL *)v35, (const WTF::String *)(a2 + 264), *(void *)(v11 + 48), (const WTF::String *)(a2 + 272));
    CFTypeRef cf = 0;
    char v50 = 0;
    char v48 = v48 & 0xF1 | 4;
    CFTypeRef v24 = v35[0];
    v35[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = *(void *)(a2 + 8);
    uint64_t v26 = *(void *)(a2 + 16);
    char v27 = *(unsigned char *)(a2 + 433);
    long long v37 = (unsigned int *)v11;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v35, (const String *)&v38, 0);
    CFTypeRef v36 = 0;
    v34[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v34);
    WebKit::WebPage::loadDataImpl(a1, v25, v26, v27, a2 + 304, (uint64_t *)&v37, (uint64_t)v35, (WebCore::ResourceResponseBase *)buf, (uint64_t)v34, (const void **)(a2 + 440), *(_WORD *)(a2 + 528), 0, *(unsigned char *)(a2 + 450), *(unsigned char *)(a2 + 432));
    uint64_t v29 = v34[0];
    v34[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    CFTypeRef v30 = v36;
    CFTypeRef v36 = 0;
    if (v30) {
      CFRelease(v30);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v35);
    if (v37) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v37, v31);
    }
    CFTypeRef v32 = cf;
    CFTypeRef cf = 0;
    if (v32) {
      CFRelease(v32);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)v31);
    uint64_t result = v38;
    long long v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

StringImpl *WebKit::WebPage::loadAlternateHTML(uint64_t a1, uint64_t a2)
{
  WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)a1);
  uint64_t v4 = (WTF *)WebCore::PublicSuffixStore::addPublicSuffix();
  uint64_t v5 = *(void *)(a2 + 560);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 568);
  *(void *)(a1 + 280) = v5;
  uint64_t v6 = *(void *)(a2 + 280);
  if (v6 && *(_DWORD *)(v6 + 4))
  {
    WTF::URL::URL((uint64_t)&v44, (WTF::StringImpl **)(a2 + 280));
  }
  else
  {
    uint64_t v7 = WTF::aboutBlankURL(v4);
    int v8 = *(StringImpl **)v7;
    if (*(void *)v7) {
      *(_DWORD *)v8 += 2;
    }
    v44.m_impl.m_ptr = v8;
    long long v9 = *(_OWORD *)(v7 + 24);
    long long v45 = *(_OWORD *)(v7 + 8);
    long long v46 = v9;
  }
  uint64_t v10 = *(void *)(a2 + 288);
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WTF::URL::URL((uint64_t)v43, (WTF::StringImpl **)(a2 + 288));
  }
  else
  {
    v43[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v43);
  }
  uint64_t v11 = *(void *)(a2 + 296);
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    WTF::URL::URL((uint64_t)&v40, (WTF::StringImpl **)(a2 + 296));
  }
  else
  {
    long long v40 = 0;
    WTF::URL::invalidate((WTF::URL *)&v40);
  }
  uint64_t v13 = *(void *)(a2 + 256);
  if (v13)
  {
    atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 88) + 24) + 8);
    if (*(unsigned char *)(v14 + 144)) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(v14 + 280);
    WTF::String::operator=((uint64_t *)(v15 + 112), &v40);
    *(_OWORD *)(v15 + 120) = v41;
    *(_OWORD *)(v15 + 136) = v42;
    uint64_t v31 = 0;
    WTF::URL::invalidate((WTF::URL *)&v31);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v36, (const WTF::URL *)&v31, (const WTF::String *)(a2 + 264), *(void *)(v13 + 48), (const WTF::String *)(a2 + 272));
    CFTypeRef v38 = 0;
    char v39 = 0;
    char v37 = v37 & 0xF1 | 4;
    long long v17 = v31;
    uint64_t v31 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *(void *)(a2 + 8);
    uint64_t v19 = *(void *)(a2 + 16);
    char v20 = *(unsigned char *)(a2 + 433);
    uint64_t v35 = (unsigned int *)v13;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v31, &v44, 0);
    CFTypeRef cf = 0;
    WebKit::WebPage::loadDataImpl(a1, v18, v19, v20, a2 + 304, (uint64_t *)&v35, (uint64_t)&v31, (WebCore::ResourceResponseBase *)v36, (uint64_t)v43, (const void **)(a2 + 440), *(_WORD *)(a2 + 528), 0, 1, 0);
    CFTypeRef v21 = cf;
    CFTypeRef cf = 0;
    if (v21) {
      CFRelease(v21);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v31);
    if (v35) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v22);
    }
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 88) + 24) + 8);
    if (*(unsigned char *)(v23 + 144)) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(void *)(v23 + 280);
    uint64_t v31 = 0;
    WTF::URL::invalidate((WTF::URL *)&v31);
    WTF::String::operator=((uint64_t *)(v24 + 112), &v31);
    *(_OWORD *)(v24 + 120) = v32;
    *(_OWORD *)(v24 + 136) = v33;
    uint64_t v26 = v31;
    uint64_t v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    CFTypeRef v27 = v38;
    CFTypeRef v38 = 0;
    if (v27) {
      CFRelease(v27);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v36, v25);
  }
  uint64_t v28 = v40;
  long long v40 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v12);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = (WTF::StringImpl *)v43[0];
  v43[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v12);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t result = v44.m_impl.m_ptr;
  v44.m_impl.m_ptr = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::loadSimulatedRequestAndResponse(unsigned int *result, uint64_t a2, WebCore::ResourceResponseBase *a3)
{
  *((unsigned char *)result + 2251) = (*(unsigned char *)(a2 + 196) & 4) != 0;
  uint64_t v3 = *(atomic_uint **)(a2 + 256);
  if (v3)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v7 = a2 + 48;
    atomic_fetch_add(v3, 1u);
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    char v10 = *(unsigned char *)(a2 + 433);
    uint64_t v11 = a2 + 304;
    uint64_t v15 = (unsigned int *)v3;
    v14[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v14);
    WebKit::WebPage::loadDataImpl(v6, v8, v9, v10, v11, (uint64_t *)&v15, v7, a3, (uint64_t)v14, (const void **)(a2 + 440), *(_WORD *)(a2 + 528), 0, 0, 0);
    uint64_t v13 = v14[0];
    v14[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v15;
    if (v15) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v12);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::navigateToPDFLinkWithSimulatedClick(WebCore *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v4 = *(void *)(*(void *)(*((void *)a1 + 11) + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  uint64_t v5 = *(void *)(v4 + 296);
  if (v5)
  {
    *(_DWORD *)(v5 + 28) += 2;
    uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (uint64_t v7 = *(WebCore::ThreadGlobalData **)(v6 + 96)) == 0)
    {
      a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
      uint64_t v7 = a1;
    }
    if (!*((void *)v7 + 5)) {
      a1 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v7);
    }
    WTF::MonotonicTime::now(a1);
    uint64_t v18 = 0;
    v15[0] = 0;
    v15[1] = 0;
    v17[0] = 0;
    v17[1] = 0;
    WebCore::MouseEvent::create();
    WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v8);
    WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v9);
    char v10 = v18;
    uint64_t v18 = 0;
    if (v10) {
      WTF::RefCounted<WebCore::WindowProxy>::deref(v10);
    }
    WebCore::Document::completeURL();
    LOBYTE(v18) = 1;
    LOBYTE(v15[0]) = 0;
    char v16 = 0;
    WebCore::FrameLoader::changeLocation();
    if (v16) {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v15, v11);
    }
    uint64_t v12 = (WTF::StringImpl *)v17[0];
    v17[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (v13[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[4];
      }
    }
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
}

void WebKit::WebPage::stopLoading(WebKit::WebPage *this)
{
  if (*((void *)this + 6))
  {
    uint64_t v1 = *(void *)(*((void *)this + 11) + 24);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 8);
      if (v2)
      {
        if (!*(unsigned char *)(v2 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
          WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v2 + 280));
          WebCore::FrameLoader::completePageTransitionIfNeeded(*(WebCore::FrameLoader **)(v2 + 280));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
          WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)&v3);
        }
      }
    }
  }
}

void WebKit::WebPage::reload(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  a1[236] = a2;
  uint64_t v6 = a1[11];
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (*a4)
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v7 = 1;
    uint64_t v8 = *a4;
    *a4 = 0;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 16) = 0;
    uint64_t v9 = (const char ***)a1[86];
    a1[86] = v7;
    if (v9) {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v9);
    }
  }
  if (a1[6])
  {
    uint64_t v10 = *(void *)(v6 + 24);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        if (!*(unsigned char *)(v11 + 144)) {
          WebCore::FrameLoader::reload();
        }
      }
    }
  }
  if (a1[236]) {
    a1[236] = 0;
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)&v12);
}

void WebKit::WebPage::goToBackForwardItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *a2;
    WTF::makeString<unsigned long long,char,unsigned long long>(a2[2], 45, a2[1], &v29);
    WTF::String::utf8();
    uint64_t v7 = 0;
    if (v30) {
      uint64_t v8 = (char *)v30 + 16;
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *((unsigned __int8 *)a2 + 25);
    int v10 = *((unsigned __int8 *)a2 + 160);
    if (*((unsigned char *)a2 + 176)) {
      uint64_t v7 = a2[21];
    }
    *(_DWORD *)buf = 134219522;
    uint64_t v32 = a1;
    __int16 v33 = 2048;
    uint64_t v34 = v5;
    __int16 v35 = 2048;
    uint64_t v36 = v6;
    __int16 v37 = 2080;
    CFTypeRef v38 = v8;
    __int16 v39 = 1024;
    int v40 = v9;
    __int16 v41 = 1024;
    int v42 = v10;
    __int16 v43 = 2048;
    uint64_t v44 = v7;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::goToBackForwardItem: navigationID=%llu, backForwardItemID=%s, shouldTreatAsContinuingLoad=%u, lastNavigationWasAppInitiated=%d, existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x40u);
    char v12 = v30;
    CFTypeRef v30 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        WTF::fastFree(v12, v11);
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    uint64_t v13 = v29;
    uint64_t v29 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)(a1 + 688), (const char ***)a2 + 24);
  *(unsigned char *)(a1 + 2251) = *((unsigned char *)a2 + 160);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v14) {
    BOOL v15 = *(unsigned char *)(v14 + 144) == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    char v16 = (unsigned int *)(v14 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
    uint64_t v17 = *(void *)(*(void *)(v14 + 280) + 88);
    if (v17)
    {
      int v18 = *(_DWORD *)(v17 + 24);
      *(_DWORD *)(v17 + 24) = v18 + 1;
      *(unsigned char *)(v17 + 3535) = *((unsigned char *)a2 + 160);
      if (v18) {
        *(_DWORD *)(v17 + 24) = v18;
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
  }
  {
    CFTypeRef v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v19 = *(void *)(WebKit::WebProcess::singleton(void)::process + 320);
  uint64_t v20 = a2[22];
  *(void *)(v19 + 96) = a2[21];
  *(unsigned char *)(v19 + 104) = v20;
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  uint64_t v21 = (WebCore::PublicSuffixStore *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::idToHistoryItemMap(void)::map, a2 + 1);
  if (v21)
  {
    WebCore::PublicSuffixStore::singleton(v21);
    WebCore::PublicSuffixStore::addPublicSuffix();
    *(void *)(a1 + 1888) = *a2;
    std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1896), (uint64_t)(a2 + 4));
    uint64_t v22 = *(void *)(a1 + 88);
    uint64_t v23 = *(void *)(v22 + 40);
    if (v23 || (v24 = *(void *)(v22 + 24)) != 0 && (uint64_t v23 = *(void *)(v24 + 8)) != 0)
    {
      uint64_t v25 = (unsigned int *)(v23 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
      WebCore::Page::goToItem();
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
    }
  }
  {
    uint64_t v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v28);
  }
  uint64_t v26 = *(void *)(WebKit::WebProcess::singleton(void)::process + 320);
  *(void *)(v26 + 96) = 0;
  *(unsigned char *)(v26 + 104) = 0;
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)buf);
}

void WebKit::WebPage::goToBackForwardItemWaitingForProcessLaunch()
{
}

uint64_t WebKit::WebPage::tryRestoreScrollPosition(WebKit::WebPage *this)
{
  uint64_t result = *(void *)(*((void *)this + 6) + 160);
  if (result) {
    BOOL v2 = *(unsigned char *)(result + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    char v3 = (unsigned int *)(result + 8);
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    WebCore::Frame::checkedHistory((uint64_t *)&v5, (WebCore::Frame *)result);
    WebCore::HistoryController::restoreScrollPositionAndViewState(v5);
    uint64_t v4 = v5;
    uint64_t v5 = 0;
    if (v4)
    {
      if (!*(_DWORD *)v4)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v4;
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return result;
}

double WebKit::WebPage::textZoomFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  char v3 = (WebKit::PluginView *)WebKit::WebPage::mainFramePlugIn(this, a2);
  if (v3)
  {
    return WebKit::PluginView::pageScaleFactor(v3);
  }
  else
  {
    uint64_t v5 = *(void *)(*((void *)this + 11) + 24);
    double v6 = 1.0;
    if (v5)
    {
      uint64_t v7 = *(void *)(v5 + 8);
      if (v7)
      {
        if (!*(unsigned char *)(v7 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
          double v6 = *(float *)(v7 + 580);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
        }
      }
    }
    return v6;
  }
}

unsigned int *WebKit::WebPage::setTextZoomFactor(WebKit::WebPage *this, double a2, WebCore::LocalFrame *a3)
{
  uint64_t result = (unsigned int *)WebKit::WebPage::mainFramePlugIn(this, a3);
  if (result)
  {
    return (unsigned int *)WebKit::PluginView::setPageScaleFactor((atomic_uchar *)result, 0, 0, a2);
  }
  else
  {
    uint64_t v6 = *(void *)(*((void *)this + 11) + 24);
    if (v6)
    {
      uint64_t result = *(unsigned int **)(v6 + 8);
      if (result)
      {
        if (!*((unsigned char *)result + 144))
        {
          uint64_t v7 = result + 2;
          atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
          float v8 = a2;
          WebCore::LocalFrame::setTextZoomFactor((WebCore::LocalFrame *)result, v8);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
        }
      }
    }
  }
  return result;
}

double WebKit::WebPage::pageZoomFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  char v3 = (WebKit::PluginView *)WebKit::WebPage::mainFramePlugIn(this, a2);
  if (v3)
  {
    return WebKit::PluginView::pageScaleFactor(v3);
  }
  else
  {
    uint64_t v5 = *(void *)(*((void *)this + 11) + 24);
    double v6 = 1.0;
    if (v5)
    {
      uint64_t v7 = *(void *)(v5 + 8);
      if (v7)
      {
        if (!*(unsigned char *)(v7 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
          double v6 = *(float *)(v7 + 576);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
        }
      }
    }
    return v6;
  }
}

atomic_uchar *WebKit::WebPage::setPageZoomFactor(WebKit::WebPage *this, double a2, WebCore::LocalFrame *a3)
{
  uint64_t result = (atomic_uchar *)WebKit::WebPage::mainFramePlugIn(this, a3);
  if (result)
  {
    return WebKit::PluginView::setPageScaleFactor(result, 0, 0, a2);
  }
  else
  {
    uint64_t v6 = *((void *)this + 6);
    if (v6)
    {
      uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::begin((void **)(v6 + 144));
      uint64_t v7 = (atomic_uint *volatile *)result;
      int v9 = v8;
      uint64_t v10 = *(void *)(v6 + 144);
      uint64_t v11 = v10 ? v10 + 8 * *(unsigned int *)(v10 - 4) : 0;
      if ((atomic_uchar *)v11 != result)
      {
        float v12 = a2;
        do
        {
          atomic_uint *volatile v13 = *v7;
          atomic_fetch_add(*v7, 1u);
          uint64_t result = (atomic_uchar *)WebCore::LocalFrame::setPageZoomFactor(*((WebCore::LocalFrame **)v13 + 1), v12);
          if (atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            uint64_t result = (atomic_uchar *)WTF::fastFree((WTF *)v13, v14);
          }
          while (++v7 != v9)
          {
            if ((unint64_t)*v7 + 1 > 1) {
              goto LABEL_16;
            }
          }
          uint64_t v7 = v9;
LABEL_16:
          ;
        }
        while (v7 != (atomic_uint *volatile *)v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::dumpHistoryForTesting@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(this + 48);
  if (v4)
  {
    uint64_t v6 = *(WebCore::BackForwardController **)(v4 + 136);
    ++*(_DWORD *)v6;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    char v25 = 1;
    int v7 = WebCore::BackForwardController::backCount(v6);
    int v8 = -v7;
    WebCore::BackForwardController::itemAtIndex(v6);
    int v9 = (WTF *)WebCore::HistoryItem::url((uint64_t *)&v21, v20);
    uint64_t v10 = (const WTF::StringImpl **)WTF::aboutBlankURL(v9);
    int v13 = WTF::equal(v21, *v10, v11);
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    if (v20) {
      WTF::RefCounted<WebCore::HistoryItem>::deref(v20);
    }
    if (v13) {
      int v8 = 1 - v7;
    }
    if (v8 <= (int)WebCore::BackForwardController::forwardCount(v6))
    {
      do
      {
        WebCore::BackForwardController::itemAtIndex(v6);
        WebKit::dumpHistoryItem(v21, (WebCore::HistoryItem *)8, v8 == 0, (uint64_t)&v22, a2, v15);
        char v16 = v21;
        uint64_t v21 = 0;
        if (v16) {
          WTF::RefCounted<WebCore::HistoryItem>::deref(v16);
        }
      }
      while (v8++ < (int)WebCore::BackForwardController::forwardCount(v6));
      this = (uint64_t)v22;
      if (v22) {
        goto LABEL_17;
      }
    }
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22);
    this = (uint64_t)v22;
    if (v22) {
LABEL_17:
    }
      *(_DWORD *)this += 2;
    *a3 = this;
    uint64_t v19 = v23;
    uint64_t v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v18);
        this = (uint64_t)v22;
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v22 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
    if (*(_DWORD *)v6)
    {
      --*(_DWORD *)v6;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unsigned int *WebKit::dumpHistoryItem(WebKit *this, WebCore::HistoryItem *a2, char a3, uint64_t a4, WTF::StringBuilder *a5, const WTF::String *a6)
{
  if (a3)
  {
    WTF::StringBuilder::append();
  }
  else if (a2)
  {
    uint64_t v10 = a2;
    do
    {
      LOBYTE(v78[0]) = 32;
      uint64_t v11 = *(void *)(a4 + 8);
      if (v11
        && ((uint64_t v12 = *(unsigned int *)(a4 + 16), v12 < *(_DWORD *)(v11 + 4))
          ? (BOOL v13 = *(void *)a4 == 0)
          : (BOOL v13 = 0),
            v13))
      {
        int v14 = *(_DWORD *)(v11 + 16);
        uint64_t v15 = *(void *)(v11 + 8);
        *(_DWORD *)(a4 + 16) = v12 + 1;
        if ((v14 & 4) != 0) {
          *(unsigned char *)(v15 + v12) = 32;
        }
        else {
          *(_WORD *)(v15 + 2 * v12) = 32;
        }
      }
      else
      {
        WTF::StringBuilder::append();
      }
      uint64_t v10 = (WebCore::HistoryItem *)((char *)v10 - 1);
    }
    while (v10);
  }
  WebCore::HistoryItem::url((uint64_t *)v78, this);
  if (!WTF::URL::protocolIs())
  {
    if (*(_DWORD *)(a4 + 16) || *(void *)(a4 + 8))
    {
      if (v78[0])
      {
        uint64_t v73 = *((void *)v78[0] + 1);
        unint64_t v74 = *((unsigned int *)v78[0] + 1) | ((unint64_t)((*((_DWORD *)v78[0] + 4) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v73 = 0;
        unint64_t v74 = 0x100000000;
      }
      WTF::StringBuilder::append(a4, v73, v74);
    }
    else
    {
      WTF::String::operator=((uint64_t *)a4, v78);
      int v19 = (int)v78[0];
      if (v78[0]) {
        int v19 = *((_DWORD *)v78[0] + 1);
      }
      *(_DWORD *)(a4 + 16) = v19;
    }
    goto LABEL_44;
  }
  if (!v78[0])
  {
    unsigned int v18 = 0;
    int v20 = 0;
    uint64_t v75 = 0;
LABEL_29:
    LOBYTE(v21) = 1;
    goto LABEL_33;
  }
  uint64_t v16 = WTF::StringImpl::find();
  if (v16 == -1)
  {
    unsigned int v18 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)a5;
    if (*(void *)a5) {
      LODWORD(v17) = *(_DWORD *)(v17 + 4);
    }
    unsigned int v18 = v17 + v16;
  }
  int v20 = (int)v78[0];
  uint64_t v75 = 0;
  if (!v78[0]) {
    goto LABEL_29;
  }
  unsigned int v22 = *((unsigned __int8 *)v78[0] + 16);
  int v20 = *((_DWORD *)v78[0] + 1);
  uint64_t v75 = *((void *)v78[0] + 1);
  int v21 = (v22 >> 2) & 1;
LABEL_33:
  int v76 = v20;
  char v77 = v21;
  int v24 = WTF::StringView::substring((const char *)&v75, v18, 0xFFFFFFFF);
  uint64_t v25 = v23;
  uint64_t v26 = *(void *)(a4 + 8);
  if (v26 || (uint64_t v26 = *(void *)a4) != 0)
  {
    if ((v23 & 0xFF00000000) == 0 || (*(_DWORD *)(v26 + 16) & 4) == 0)
    {
LABEL_40:
      uint64_t v28 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a4);
      if (v28)
      {
        for (uint64_t i = 0; i != 12; ++i)
          *(_WORD *)(v28 + 2 * i) = aFileTest[i];
        uint64_t v79 = (uint64_t)v24;
        uint64_t v80 = v25;
        WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v79, (char *)(v28 + 24));
      }
      goto LABEL_44;
    }
  }
  else if ((v23 & 0xFF00000000) == 0)
  {
    goto LABEL_40;
  }
  uint64_t v27 = MEMORY[0x19972DE60](a4);
  if (v27)
  {
    *(_DWORD *)(v27 + 8) = 975795315;
    *(void *)uint64_t v27 = *(void *)"(file test):";
    uint64_t v79 = (uint64_t)v24;
    uint64_t v80 = v25;
    WTF::StringView::getCharacters<unsigned char>(&v79, (char *)(v27 + 12));
  }
LABEL_44:
  uint64_t v30 = *(void *)WebCore::HistoryItem::target(this);
  if (v30)
  {
    unsigned int v31 = *(_DWORD *)(v30 + 4);
    if (v31)
    {
      int v32 = *(_DWORD *)(a4 + 16);
      if (v31 >= 0xFFFFFFF2) {
        int v33 = -1;
      }
      else {
        int v33 = v31 + 14;
      }
      BOOL v34 = __CFADD__(v33, v32);
      unsigned int v35 = v33 + v32;
      if (v34) {
        uint64_t v36 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v36 = v35;
      }
      uint64_t v37 = *(void *)(a4 + 8);
      if ((!v37 && (uint64_t v37 = *(void *)a4) == 0 || (*(unsigned char *)(v37 + 16) & 4) != 0) && (*(unsigned char *)(v30 + 16) & 4) != 0)
      {
        uint64_t v42 = MEMORY[0x19972DE60](a4, v36);
        if (v42)
        {
          *(_DWORD *)(v42 + 8) = 572548461;
          *(void *)uint64_t v42 = *(void *)" (in frame \"";
          uint64_t v43 = v42 + 12;
          uint64_t v79 = v30;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v79, (char *)(v42 + 12));
          uint64_t v44 = v79;
          if (v79) {
            uint64_t v44 = *(unsigned int *)(v79 + 4);
          }
          *(_WORD *)(v43 + v44) = 10530;
        }
      }
      else
      {
        uint64_t v38 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a4);
        if (v38)
        {
          for (uint64_t j = 0; j != 12; ++j)
            *(_WORD *)(v38 + 2 * j) = aInFrame[j];
          uint64_t v40 = v38 + 24;
          uint64_t v79 = v30;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v79, (char *)(v38 + 24));
          uint64_t v41 = v79;
          if (v79) {
            uint64_t v41 = *(unsigned int *)(v79 + 4);
          }
          *(_DWORD *)(v40 + 2 * v41) = 2687010;
        }
      }
    }
  }
  if (WebCore::HistoryItem::isTargetItem(this)) {
    WTF::StringBuilder::append();
  }
  LOBYTE(v79) = 10;
  uint64_t v45 = *(void *)(a4 + 8);
  if (v45
    && ((uint64_t v46 = *(unsigned int *)(a4 + 16), v46 < *(_DWORD *)(v45 + 4))
      ? (BOOL v47 = *(void *)a4 == 0)
      : (BOOL v47 = 0),
        v47))
  {
    int v48 = *(_DWORD *)(v45 + 16);
    uint64_t v49 = *(void *)(v45 + 8);
    *(_DWORD *)(a4 + 16) = v46 + 1;
    if ((v48 & 4) != 0) {
      *(unsigned char *)(v49 + v46) = 10;
    }
    else {
      *(_WORD *)(v49 + 2 * v46) = 10;
    }
  }
  else
  {
    WTF::StringBuilder::append();
  }
  uint64_t result = (unsigned int *)WebCore::HistoryItem::children(this);
  unint64_t v51 = result[3];
  if (v51)
  {
    if (v51 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    __int16 v52 = result;
    uint64_t v53 = 8 * v51;
    uint64_t v54 = WTF::fastMalloc((WTF *)(8 * v51));
    uint64_t v55 = (WebCore::HistoryItem **)v54;
    uint64_t v56 = v52[3];
    if (v56)
    {
      int v57 = *(_DWORD ***)v52;
      uint64_t v58 = 8 * v56;
      int v59 = (void *)v54;
      do
      {
        __int16 v60 = *v57++;
        ++*v60;
        *v59++ = v60;
        v58 -= 8;
      }
      while (v58);
    }
    uint64_t v61 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v62 = v51;
    while (1)
    {
      char v63 = (WebCore::HistoryItem **)operator new(8 * v62, v61);
      if (v63) {
        break;
      }
      BOOL v64 = v62 > 1;
      v62 >>= 1;
      if (!v64)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v55, &v55[v51], v51, 0, 0);
        goto LABEL_86;
      }
    }
    __int16 v67 = v63;
    std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v55, &v55[v51], v51, v63, v62);
    operator delete(v67);
LABEL_86:
    unint64_t v68 = 0;
    uint64_t v69 = (WebCore::HistoryItem *)((char *)a2 + 4);
    do
    {
      WebKit::dumpHistoryItem(v55[v68 / 8], v69, 0, a4, a5, v65);
      v68 += 8;
    }
    while (v53 != v68);
    unint64_t v71 = 0;
    do
    {
      long long v72 = v55[v71 / 8];
      v55[v71 / 8] = 0;
      if (v72) {
        WTF::RefCounted<WebCore::HistoryItem>::deref(v72);
      }
      v71 += 8;
    }
    while (v53 != v71);
    WTF::fastFree((WTF *)v55, v70);
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(0, (WebCore::HistoryItem **)(8 * v51), v51, 0, 0);
  }
  uint64_t result = (unsigned int *)v78[0];
  v78[0] = 0;
  if (result)
  {
    if (*result == 2) {
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v66);
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::scalePageInViewCoordinates(WebKit::WebPage *a1, WebCore::LocalFrame *a2, double a3)
{
  double v6 = *(float *)(*((void *)a1 + 6) + 368) * a3;
  if (v6 != WebKit::WebPage::totalScaleFactor(a1, a2))
  {
    int v7 = (_DWORD *)WebKit::WebPage::localMainFrameView(a1);
    if (v7)
    {
      int v8 = v7;
      ++v7[2];
      unint64_t v12 = -(int)a2 - ((unint64_t)a2 & 0xFFFFFFFF00000000);
      uint64_t v9 = WebCore::ScrollView::rootViewToContents((WebCore::ScrollView *)v7, (const WebCore::IntPoint *)&v12);
      float v11 = a3 / (WebKit::WebPage::totalScaleFactor(a1, v10) / *(float *)(*((void *)a1 + 6) + 368));
      LODWORD(v12) = llroundf((float)(int)v9 * v11);
      HIDWORD(v12) = llroundf((float)SHIDWORD(v9) * v11);
      WebKit::WebPage::scalePage(a1, a3, (const WebCore::IntPoint *)&v12);
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
  }
}

uint64_t WebKit::WebPage::layoutIfNeeded(WebKit::WebPage *this)
{
  return WebCore::Page::layoutIfNeeded();
}

uint64_t WebKit::WebPage::setSuppressScrollbarAnimations(WebKit::WebPage *this)
{
  return MEMORY[0x1F41728C0](*((void *)this + 6));
}

uint64_t WebKit::WebPage::setEnableVerticalRubberBanding(WebKit::WebPage *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (a2) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = 1;
  }
  return MEMORY[0x1F41727E8](v2, v3);
}

uint64_t WebKit::WebPage::setEnableHorizontalRubberBanding(WebKit::WebPage *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (a2) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = 1;
  }
  return MEMORY[0x1F4172840](v2, v3);
}

void WebKit::WebPage::postInjectedBundleMessage(uint64_t a1, uint64_t a2, const void **a3)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 136);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v6 + 8));
    CFRetain(*(CFTypeRef *)(a1 + 8));
    int v7 = *a3;
    float v11 = &unk_1EE9E6F38;
    WebKit::UserData::transform(v7, (uint64_t)&v11, &v10);
    WebKit::InjectedBundle::didReceiveMessageToPage(v6, a1, a2, (uint64_t)&v10);
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    CFRelease(*(CFTypeRef *)(a1 + 8));
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

uint64_t WebKit::WebPage::setUnderPageBackgroundColorOverride(uint64_t a1)
{
  return MEMORY[0x1F41728A0](*(void *)(a1 + 48));
}

WTF::MachSendRight *WebKit::WebPage::takeSnapshot(uint64_t a1, IntPoint a2, IntSize a3, uint64_t a4, __int16 a5, uint64_t *a6)
{
  v29.m_location = a2;
  v29.int32x2_t m_size = a3;
  int32x2_t m_size = (int32x2_t)a4;
  v27[0] = 0;
  v27[64] = 0;
  uint64_t v7 = *(void *)(*(void *)(a1 + 88) + 24);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0 && !*(unsigned char *)(v8 + 144))
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    uint64_t v11 = *(void *)(v8 + 288);
    if (v11)
    {
      ++*(_DWORD *)(v11 + 8);
      long long v25 = *(_OWORD *)(v11 + 1088);
      int v26 = *(_DWORD *)(v11 + 1104);
      WebCore::LocalFrameView::paintBehavior((WebCore::LocalFrameView *)v11);
      if ((a5 & 0x400) != 0)
      {
        int v15 = 0;
        v29.m_location = (IntPoint)WebCore::ScrollableArea::visibleContentRect();
        v29.int32x2_t m_size = v18;
      }
      else if ((a5 & 0x800) != 0)
      {
        v29.m_location = 0;
        v29.int32x2_t m_size = (IntSize)WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v11);
        WebCore::LayoutRect::LayoutRect(v21, &v29);
        long long v23 = *(_OWORD *)v21[0].i8;
        int v15 = 1;
        char v24 = 1;
        WebCore::LocalFrameView::setLayoutViewportOverrideRect();
        WebCore::LocalFrameView::setPaintBehavior();
      }
      else
      {
        int v15 = 0;
      }
      if (m_size.i32[0] < 1 || *(void *)&m_size <= 0)
      {
        int32x2_t m_size = (int32x2_t)v29.m_size;
        if ((a5 & 0x20) == 0)
        {
          float v19 = *(float *)(*(void *)(a1 + 48) + 364);
          m_size.i32[0] = (int)(float)(v19 * (float)v29.m_size.m_width);
          m_size.i32[1] = (int)(float)(v19 * (float)v29.m_size.m_height);
        }
      }
      WebKit::WebPage::snapshotAtSize(a1, (long long *)&v29.m_location, &m_size, a5 & 0xFFFE | 1, (WebCore::PrintContext *)v8, (WebCore::LocalFrameView *)v11, &v22);
      uint64_t v16 = v22;
      if (v22)
      {
        WebKit::WebImage::createHandle(v22, 0, v21);
        std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v27, (uint64_t)v21);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v21);
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
      if (v15)
      {
        WebCore::LocalFrameView::setLayoutViewportOverrideRect();
        WebCore::LocalFrameView::setPaintBehavior();
      }
      uint64_t v17 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 16))(v17, v27);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      if (*(_DWORD *)(v11 + 8) == 1) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      else {
        --*(_DWORD *)(v11 + 8);
      }
    }
    else
    {
      uint64_t v20 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 16))(v20, v27);
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
  }
  else
  {
    uint64_t v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v27);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v27);
}

void WebKit::WebPage::snapshotAtSize(uint64_t a1@<X0>, long long *a2@<X1>, int32x2_t *a3@<X2>, unsigned __int16 a4@<W3>, WebCore::PrintContext *a5@<X4>, WebCore::LocalFrameView *a6@<X5>, void *a7@<X8>)
{
  int v14 = WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a1 + 160);
  WebKit::snapshotColorSpace((WebCore::DestinationColorSpace *)a4, a1, (uint64_t *)&cf);
  if (v14) {
    char v15 = 2;
  }
  else {
    char v15 = 1;
  }
  WebKit::WebImage::create(a3, v15, &cf, *(void *)(*(void *)(*(void *)(a1 + 48) + 48) + 16), (WebKit::WebImage *)&v21);
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = v21;
  uint64_t v18 = *(void *)(v21 + 16);
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v21 + 16) + 16))(*(void *)(v21 + 16));
    WebKit::WebPage::paintSnapshotAtSize(v19, a2, a3, a4, a5, a6, v19);
    *a7 = v21;
  }
  else
  {
    *a7 = 0;
    uint64_t v21 = 0;
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
}

unsigned int *WebKit::WebPage::scaledSnapshotWithOptions@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, const WebCore::FloatSize *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = *(void *)(*((void *)result + 11) + 24);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && !*(unsigned char *)(v7 + 144))
  {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    uint64_t v8 = *(WebCore::LocalFrameView **)(v7 + 288);
    if (v8)
    {
      unsigned __int16 v9 = (unsigned __int16)a3;
      uint64_t v11 = (uint64_t)result;
      ++*((_DWORD *)v8 + 2);
      int32x2_t v12 = *(int32x2_t *)(a2 + 8);
      int32x2_t v17 = v12;
      uint64_t v13 = HIDWORD(*(void *)&v12);
      if (((unsigned __int16)a3 & 0x100) != 0)
      {
        v16[0] = (float)v12.i32[0];
        v16[1] = (float)v12.i32[1];
        int v15 = WebCore::PrintContext::numberOfPages((WebCore::PrintContext *)v7, (WebCore::LocalFrame *)v16, a3);
        v17.i32[1] = v15 + v15 * v13 - 1;
      }
      else
      {
        if ((a3 & 0x20) == 0) {
          a5 = *(float *)(*((void *)result + 6) + 364) * a5;
        }
        float v14 = a5;
        v17.i32[0] = (int)(float)((float)v12.i32[0] * v14);
        v17.i32[1] = (int)(float)((float)v12.i32[1] * v14);
      }
      WebKit::WebPage::snapshotAtSize(v11, (long long *)a2, &v17, v9, (WebCore::PrintContext *)v7, v8, a4);
      if (*((_DWORD *)v8 + 2) == 1) {
        (*(void (**)(WebCore::LocalFrameView *))(*(void *)v8 + 8))(v8);
      }
      else {
        --*((_DWORD *)v8 + 2);
      }
    }
    else
    {
      *a4 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::WebPage::paintSnapshotAtSize(uint64_t a1, long long *a2, int32x2_t *a3, __int16 a4, WebCore::PrintContext *a5, WebCore::LocalFrameView *a6, uint64_t a7)
{
  kdebug_trace();
  long long v41 = *a2;
  float32x2_t v14 = vdiv_f32(vcvt_f32_s32(*a3), vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 8)));
  if (v14.f32[0] >= v14.f32[1]) {
    float v15 = v14.f32[0];
  }
  else {
    float v15 = v14.f32[1];
  }
  if ((a4 & 0x100) != 0)
  {
    *(float *)&v36.m_colorAndFlags = (float)SDWORD2(v41);
    *((float *)&v36.m_colorAndFlags + 1) = (float)SHIDWORD(v41);
    WebCore::PrintContext::spoolAllPagesWithBoundaries(a5, (WebCore::LocalFrame *)a7, (WebCore::GraphicsContext *)&v36, v13);
  }
  else
  {
    v39.m_colorAndFlags = 0;
    v40.m_colorAndFlags = 0;
    if ((a4 & 0x1000) != 0)
    {
      v36.m_colorAndFlags = 0x1104000000000000;
      WebCore::Color::operator=();
      WebCore::LocalFrameView::baseBackgroundColor((uint64_t *)&v36, a6);
      WebCore::Color::operator=();
      if ((v36.m_colorAndFlags & 0x8000000000000) != 0)
      {
        int v33 = (unsigned int *)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v18);
        }
      }
      WebCore::LocalFrameView::setBaseBackgroundColor(a6, &v40);
    }
    else
    {
      WebCore::LocalFrameView::documentBackgroundColor((uint64_t *)&v36, a6);
      if ((*(unsigned char *)(*((void *)a5 + 17) + 669) & 4) != 0 && (v36.m_colorAndFlags & 0x4000000000000) != 0) {
        WebCore::Color::Color((WebCore::Color *)v35, &v36);
      }
      else {
        WebCore::LocalFrameView::baseBackgroundColor((uint64_t *)v35, a6);
      }
      WebCore::Color::operator=();
      if ((*(void *)v35 & 0x8000000000000) != 0)
      {
        int v32 = (unsigned int *)(*(void *)v35 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v35 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v16);
        }
      }
      if ((v36.m_colorAndFlags & 0x8000000000000) != 0)
      {
        int32x2_t v17 = (unsigned int *)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v16);
        }
      }
    }
    IntPoint v19 = (IntPoint)*a3;
    v35[0] = 0;
    v35[1] = v19;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v36, (const WebCore::IntRect *)v35);
    (*(void (**)(uint64_t, Color *, Color *))(*(void *)a7 + 224))(a7, &v36, &v40);
    if ((a4 & 0x20) == 0)
    {
      float v20 = *(float *)(*(void *)(*((void *)a5 + 3) + 8) + 364);
      (*(void (**)(uint64_t, float))(*(void *)a7 + 672))(a7, v20);
      float v15 = v15 / v20;
    }
    *(float *)&v36.m_colorAndFlags = v15;
    *((float *)&v36.m_colorAndFlags + 1) = v15;
    (*(void (**)(uint64_t, Color *))(*(void *)a7 + 624))(a7, &v36);
    v35[0] = (IntPoint)(-(int)v41 - (v41 & 0xFFFFFFFF00000000));
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v36, v35);
    v22.n128_u32[0] = HIDWORD(v36.m_colorAndFlags);
    v21.n128_u32[0] = v36.m_colorAndFlags;
    (*(void (**)(uint64_t, __n128, __n128))(*(void *)a7 + 640))(a7, v21, v22);
    WebCore::LocalFrameView::paintContentsForSnapshot();
    if ((a4 & 8) != 0)
    {
      WebCore::FrameSelection::selectionBounds();
      v36.m_colorAndFlags = __PAIR64__(v26, v25);
      int v37 = v27;
      int v38 = v28;
      v35[0] = (IntPoint)0x11040000FF0000FFLL;
      WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContextState *)(a7 + 8), (const WebCore::Color *)v35);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 88))(a7, a7 + 8);
      if ((*(void *)v35 & 0x8000000000000) != 0)
      {
        BOOL v34 = (unsigned int *)(*(void *)v35 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v35 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, v29);
        }
      }
      (*(void (**)(uint64_t, Color *, float))(*(void *)a7 + 288))(a7, &v36, 1.0);
    }
    if ((a4 & 0x1000) != 0) {
      WebCore::LocalFrameView::setBaseBackgroundColor(a6, &v39);
    }
    if ((v39.m_colorAndFlags & 0x8000000000000) != 0)
    {
      uint64_t v30 = (unsigned int *)(v39.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v39.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v23);
      }
    }
    if ((v40.m_colorAndFlags & 0x8000000000000) != 0)
    {
      unsigned int v31 = (unsigned int *)(v40.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v40.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v23);
      }
    }
  }
  return kdebug_trace();
}

uint64_t WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1)
{
  _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit10PluginViewES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v6);
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 12);
    if (v4 >= 0x7FFFFFFF) {
      int v5 = -2;
    }
    else {
      int v5 = 2 * v4;
    }
    *(_DWORD *)(a1 + 12) = v5;
    return *(unsigned int *)(v2 - 12);
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t *WebKit::snapshotColorSpace@<X0>(WebCore::DestinationColorSpace *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (((unsigned __int16)a1 & 0x200) != 0)
  {
    int v5 = (WebCore *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 48) + 160) + 56))(*(void *)(*(void *)(a2 + 48) + 160));
    return WebCore::screenColorSpace(a3, v5, v6);
  }
  else
  {
    uint64_t result = *(uint64_t **)WebCore::DestinationColorSpace::SRGB(a1);
    *a3 = (uint64_t)result;
    if (result)
    {
      return (uint64_t *)CFRetain(result);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::snapshotNode@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *(void *)(*((void *)result + 11) + 24);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0 || *(unsigned char *)(v7 + 144))
  {
    *a5 = 0;
    return result;
  }
  uint64_t v8 = (unsigned int *)(v7 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  unsigned __int16 v9 = *(WebCore::LocalFrameView **)(v7 + 288);
  if (!v9)
  {
    *a5 = 0;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  uint64_t v11 = (uint64_t)result;
  int v12 = *((_DWORD *)v9 + 2);
  *((_DWORD *)v9 + 2) = v12 + 1;
  uint64_t v13 = (WebCore::RenderObject *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL);
  if (v13)
  {
    v58[0] = 0;
    v58[1] = 0;
    uint64_t v16 = WebCore::RenderObject::paintingRootRect(v13, (WebCore::LayoutRect *)v58);
    unsigned int v19 = v16 - (v18 & 0xFFFFFFC0);
    int v20 = v19 + 32;
    int v21 = ((int)(v19 + 32) >> 6) + (int)v16 / 64;
    unsigned int v22 = HIDWORD(v16) - (v18 & 0xFFFFFFC0);
    uint64_t v23 = (((int)(v22 + 32) >> 6) + SHIDWORD(v16) / 64);
    BOOL v25 = __OFADD__(v19, v24);
    int v26 = v19 + v24;
    int v27 = (v19 >> 31) + 0x7FFFFFFF;
    if (v25) {
      int v26 = v27;
    }
    uint64_t v28 = (v26 / 64 - (v20 >> 6) + ((int)(v26 - (v27 & 0xFFFFFFC0) + 32) >> 6));
    int v29 = v22 + v17;
    if (__OFADD__(v22, v17)) {
      int v29 = (v22 >> 31) + 0x7FFFFFFF;
    }
    uint64_t v30 = (v29 / 64
                       - ((int)(v22 + 32) >> 6)
                       + ((int)(v29 - (((v22 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6));
    int32x2_t v31 = (int32x2_t)(v28 | (v30 << 32));
    int v53 = v21;
    __int16 v54 = ((int)(v22 + 32) >> 6) + SHIDWORD(v16) / 64;
    char v55 = (((int)(v22 + 32) >> 6) + SHIDWORD(v16) / 64) >> 16;
    char v56 = (((int)(v22 + 32) >> 6) + SHIDWORD(v16) / 64) >> 24;
    int32x2_t v57 = v31;
    if ((int)v28 < 1 || (int)v30 <= 0)
    {
      *a5 = 0;
      goto LABEL_34;
    }
    uint64_t v33 = a4 / v28;
    if (v33 >= v30)
    {
      double v34 = 1.0;
    }
    else
    {
      double v34 = (double)v33 / (double)(int)v30;
      int32x2_t v31 = (int32x2_t)((int)(v34 * (double)(int)v28) | (unint64_t)(v33 << 32));
    }
    int32x2_t v52 = v31;
    WebKit::snapshotColorSpace((WebCore::DestinationColorSpace *)a3, v11, (uint64_t *)&cf);
    WebKit::WebImage::create(&v52, a3 & 1, &cf, *(void *)(*(void *)(*(void *)(v11 + 48) + 48) + 16), (WebKit::WebImage *)&v51);
    CFTypeRef v35 = cf;
    CFTypeRef cf = 0;
    if (v35) {
      CFRelease(v35);
    }
    uint64_t v36 = v51;
    uint64_t v37 = *(void *)(v51 + 16);
    if (v37)
    {
      (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
      uint64_t v38 = *(void *)(v51 + 16);
      if (v38) {
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = v23 << 32;
      if ((a3 & 0x20) == 0)
      {
        double v41 = *(float *)(*(void *)(v11 + 48) + 364);
        (*(void (**)(uint64_t))(*(void *)v39 + 672))(v39);
        double v34 = v34 / v41;
      }
      float v42 = v34;
      *(float *)&CFTypeRef cf = v42;
      *((float *)&cf + 1) = v42;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v39 + 624))(v39, &cf);
      v50.m_colorAndFlags = -v21 - v40;
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&cf, (const IntPoint *)&v50);
      v44.n128_u32[0] = HIDWORD(cf);
      v43.n128_u32[0] = cf;
      (*(void (**)(uint64_t, __n128, __n128))(*(void *)v39 + 640))(v39, v43, v44);
      WebCore::LocalFrameView::baseBackgroundColor((uint64_t *)&cf, v9);
      v50.m_colorAndFlags = 0x1104000000000000;
      WebCore::LocalFrameView::setBaseBackgroundColor(v9, &v50);
      if ((v50.m_colorAndFlags & 0x8000000000000) != 0)
      {
        int v48 = (unsigned int *)(v50.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v50.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v45);
        }
      }
      WebCore::LocalFrameView::setNodeToDraw(v9, (Node *)a2);
      WebCore::LocalFrameView::paintContentsForSnapshot();
      WebCore::LocalFrameView::setBaseBackgroundColor(v9, (const Color *)&cf);
      WebCore::LocalFrameView::setNodeToDraw(v9, 0);
      uint64_t v47 = v51;
      uint64_t v51 = 0;
      *a5 = v47;
      if (((unint64_t)cf & 0x8000000000000) == 0) {
        goto LABEL_34;
      }
      uint64_t v49 = (unsigned int *)((unint64_t)cf & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)cf & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v46);
      }
      uint64_t v36 = v51;
      uint64_t v51 = 0;
      if (!v36)
      {
LABEL_34:
        int v12 = *((_DWORD *)v9 + 2) - 1;
        if (*((_DWORD *)v9 + 2) != 1) {
          goto LABEL_35;
        }
        goto LABEL_18;
      }
    }
    else
    {
      *a5 = 0;
      uint64_t v51 = 0;
    }
    CFRelease(*(CFTypeRef *)(v36 + 8));
    goto LABEL_34;
  }
  *a5 = 0;
  if (v12)
  {
LABEL_35:
    *((_DWORD *)v9 + 2) = v12;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
LABEL_18:
  (*(void (**)(WebCore::LocalFrameView *))(*(void *)v9 + 8))(v9);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
}

_DWORD *WebKit::WebPage::pageDidScroll(WebKit::WebPage *this, void *a2)
{
  if (!*((unsigned char *)this + 1485))
  {
    uint64_t v3 = *((void *)this + 186);
    if (v3)
    {
      *((void *)this + 186) = 0;
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  (*(void (**)(void, WebKit::WebPage *))(**((void **)this + 47) + 64))(*((void *)this + 47), this);
  PAL::HysteresisActivity::impulse((unsigned char *)this + 736);
  WebCore::Page::protectedMainFrame((uint64_t *)&v15, *((WebCore::Page **)this + 6));
  uint64_t result = (_DWORD *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)v15 + 56))(v15);
  int v5 = result;
  if (result) {
    ++result[2];
  }
  uint64_t v6 = v15;
  float v15 = 0;
  if (v6) {
    uint64_t result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v6 + 2);
  }
  if (v5)
  {
    uint64_t v14 = WebCore::ScrollableArea::visibleContentRect();
    uint64_t v8 = *((void *)this + 4);
    uint64_t v7 = (char *)this + 32;
    uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 2021;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    float v15 = v10;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v10, (int *)&v14);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v15, 0);
    uint64_t result = v15;
    float v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      uint64_t result = (_DWORD *)WTF::fastFree(v12, v13);
    }
    if (v5[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return result;
}

void WebKit::WebPage::updateFrameSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 48))
  {
    {
      int v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    uint64_t v6 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
    if (v6)
    {
      uint64_t v7 = v6;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9)
        {
          if (!*(unsigned char *)(v9 + 144))
          {
            uint64_t v10 = (unsigned int *)(v9 + 8);
            atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
            uint64_t v11 = *(WebCore::Widget **)(v9 + 288);
            if (v11)
            {
              ++*((_DWORD *)v11 + 2);
              WebCore::Widget::frameRect(v11);
              if (v12 != a4)
              {
                v19.m_location = (FloatPoint)WebCore::Widget::frameRect(v11);
                v19.int32x2_t m_size = (FloatSize)a4;
                (*(void (**)(WebCore::Widget *, FloatRect *))(*(void *)v11 + 16))(v11, &v19);
                v18[0] = WebCore::Widget::frameRect(v11);
                v18[1] = v13;
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v19, (const WebCore::IntRect *)v18);
                WebCore::ScrollView::setExposedContentRect(v11, &v19);
                WebCore::Widget::frameRect(v11);
                v19.m_location.m_double x = (float)v14;
                v19.m_location.m_double y = (float)v15;
                WebCore::ScrollView::setUnobscuredContentSize(v11, (const WebCore::FloatSize *)&v19);
                uint64_t v16 = *(void *)(a1 + 72);
                if (v16)
                {
                  (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
                  (*(void (**)(void))(**(void **)(a1 + 72) + 264))();
                }
              }
              if (*((_DWORD *)v11 + 2) == 1) {
                (*(void (**)(WebCore::Widget *))(*(void *)v11 + 8))(v11);
              }
              else {
                --*((_DWORD *)v11 + 2);
              }
            }
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

uint64_t WebKit::WebPage::tryMarkLayersVolatile(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 336);
    return v2();
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
}

uint64_t WebKit::WebPage::markLayersVolatileOrRetry(uint64_t a1, char a2)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EEA00D78;
  *(unsigned char *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v6 = v4;
  WebKit::WebPage::tryMarkLayersVolatile(*(void *)(a1 + 72), &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPage::markLayersVolatile(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358000;
  if (os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v10 = 134218240;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile:", (uint8_t *)&v10, 0x16u);
  }
  if ((*(void *)(a1 + 1728) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(void *)(a1 + 1728) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 1696));
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 1772);
    if (v7 == *(_DWORD *)(a1 + 1768))
    {
      WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(a1 + 1760, (unint64_t)a2);
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 1760);
      *a2 = 0;
      *(void *)(v9 + 8 * v7) = v6;
      *(_DWORD *)(a1 + 1772) = v7 + 1;
    }
  }
  *(void *)(a1 + 1752) = 0x3F947AE147AE147BLL;
  return WebKit::WebPage::markLayersVolatileOrRetry(a1, *(unsigned char *)(a1 + 1776));
}

void WebKit::WebPage::tryMarkLayersVolatileCompletionHandler(uint64_t a1, int a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 186)) {
    return;
  }
  if (a2 || a3)
  {
    if ((*(void *)(a1 + 1728) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 1696));
    }
    if (a3)
    {
      uint64_t v11 = qword_1EB358000;
      if (!os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:
        WebKit::WebPage::callVolatilityCompletionHandlers((WebKit::WebPage *)a1, a3);
        return;
      }
      uint64_t v12 = *(void *)(a1 + 40);
      int v20 = 134218240;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      uint64_t v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Succeeded in marking layers as volatile";
    }
    else
    {
      if (a2 == 2)
      {
        uint64_t v18 = qword_1EB358000;
        if (!os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_15;
        }
        uint64_t v19 = *(void *)(a1 + 40);
        int v20 = 134218496;
        uint64_t v21 = a1;
        __int16 v22 = 2048;
        uint64_t v23 = v19;
        __int16 v24 = 2048;
        double v25 = 2000.0;
        uint64_t v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark layers as volatile within %gms";
        uint64_t v14 = v18;
        uint32_t v15 = 32;
        goto LABEL_14;
      }
      if (a2 != 1) {
        goto LABEL_15;
      }
      uint64_t v11 = qword_1EB358000;
      if (!os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      int v20 = 134218240;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      uint64_t v23 = v16;
      uint64_t v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Did what we could to mark IOSurfaces as purgeable after l"
            "ocking the screen";
    }
    uint64_t v14 = v11;
    uint32_t v15 = 22;
LABEL_14:
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v20, v15);
    goto LABEL_15;
  }
  int v6 = *(_DWORD *)(a1 + 1772);
  uint64_t v7 = qword_1EB358000;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      double v10 = *(double *)(a1 + 1752) * 1000.0;
      int v20 = 134218496;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      double v25 = v10;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark all layers as volatile, will retry in %g ms", (uint8_t *)&v20, 0x20u);
    }
    WebCore::TimerBase::start();
  }
  else if (v8)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    int v20 = 134218240;
    uint64_t v21 = a1;
    __int16 v22 = 2048;
    uint64_t v23 = v17;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark all layers as volatile, but will not retry because the operation was cancelled", (uint8_t *)&v20, 0x16u);
  }
}

IPC::Encoder *WebKit::WebPage::mouseEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  char v10 = *(unsigned char *)(a1 + 920);
  *(unsigned char *)(a1 + 920) = 1;
  PAL::HysteresisActivity::impulse((unsigned char *)(a1 + 1832));
  if (!*(unsigned char *)(a1 + 795))
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    if (*(unsigned char *)(a5 + 16))
    {
      *(_OWORD *)int v59 = 0uLL;
      uint64_t v18 = *(unsigned int *)(a5 + 12);
      if (!v18) {
        goto LABEL_6;
      }
      if (v18 >> 29) {
        goto LABEL_47;
      }
      uint64_t v40 = WTF::fastMalloc((WTF *)(8 * v18));
      *(_DWORD *)&v59[8] = v18;
      *(void *)int v59 = v40;
      uint64_t v41 = *(unsigned int *)(a5 + 12);
      if (v41)
      {
        uint64_t v42 = v40;
        char v51 = v10;
        unsigned int v43 = 0;
        unsigned int v19 = 0;
        __n128 v44 = *(WebKit::SandboxExtensionImpl ***)a5;
        uint64_t v45 = 8 * v41;
        do
        {
          if (*v44)
          {
            uint64_t v46 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)uint64_t v46 = 1;
            uint64_t v47 = *v44;
            _DWORD *v44 = 0;
            *(void *)(v46 + 8) = v47;
            *(void *)(v46 + 16) = 1;
            WebKit::SandboxExtensionImpl::consume(v47);
            unsigned int v43 = v19 + 1;
            *(void *)(v42 + 8 * v19++) = v46;
          }
          ++v44;
          v45 -= 8;
        }
        while (v45);
        *(_DWORD *)&v59[12] = v43;
        char v10 = v51;
      }
      else
      {
LABEL_6:
        unsigned int v19 = 0;
      }
      WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v59, v19);
      uint64_t v20 = *(void *)&v59[8];
      uint64_t v57 = *(void *)v59;
      *(_OWORD *)int v59 = 0uLL;
      uint64_t v58 = v20;
      WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v21);
    }
    {
      Color v50 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v50);
    }
    __int16 v22 = (WTF::StringImpl *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
    if (!v22)
    {
      BOOL v31 = 0;
      goto LABEL_23;
    }
    uint64_t v23 = (_DWORD *)WebKit::g_currentEvent;
    if (WebKit::g_currentEvent) {
      ++*(_DWORD *)WebKit::g_currentEvent;
    }
    WebKit::g_currentEvent = a4;
    WebKit::WebFrame::handleMouseEvent(v22, (const WebMouseEvent *)a4, (uint64_t)v59);
    char v25 = v60;
    if (!v60)
    {
      BOOL v31 = v59[0] != 0;
LABEL_19:
      WebKit::g_currentEvent = (uint64_t)v23;
      if (!v23) {
        goto LABEL_22;
      }
      if (*v23)
      {
        --*v23;
LABEL_22:
        if (v25)
        {
LABEL_35:
          uint64_t result = (IPC::Encoder *)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v24);
          goto LABEL_36;
        }
LABEL_23:
        WebKit::WebPage::revokeSandboxExtensions((uint64_t)&v57);
        if (*(void *)(a1 + 72) && *(unsigned char *)(a4 + 4) == 2 && *(unsigned __int8 *)(a4 + 32) == 254)
        {
          double v32 = *(double *)(a4 + 80);
          WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
          if (v32 == 0.0
            && (*(unsigned int (**)(void))(**(void **)(a1 + 72) + 272))(*(void *)(a1 + 72)))
          {
            if (v31) {
              int v33 = 16843008;
            }
            else {
              int v33 = 16777472;
            }
            *(_DWORD *)(a1 + 860) = v33 | *(unsigned __int8 *)(a4 + 4);
            goto LABEL_35;
          }
        }
        else
        {
          WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
        }
        char v34 = *(unsigned char *)(a4 + 4);
        v59[0] = 0;
        LOBYTE(v60) = 0;
        char v52 = v34;
        v53[0] = v31;
        *(void *)&v53[7] = v59;
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
        uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v36 = 1940;
        *((void *)v36 + 1) = v35;
        *((void *)v36 + 66) = (char *)v36 + 16;
        *((void *)v36 + 67) = 512;
        *((void *)v36 + 68) = 0;
        *((void *)v36 + 70) = 0;
        *((void *)v36 + 69) = 0;
        IPC::Encoder::encodeHeader(v36);
        *(void *)unint64_t v62 = v36;
        IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v36, (uint64_t)&v52);
        (*(void (**)(uint64_t, unsigned char *, void))(*(void *)(a1 + 32) + 32))(a1 + 32, v62, 0);
        uint64_t v37 = *(IPC::Encoder **)v62;
        *(void *)unint64_t v62 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v24);
          WTF::fastFree(v38, v39);
        }
        goto LABEL_35;
      }
      __break(0xC471u);
LABEL_48:
      JUMPOUT(0x199383C38);
    }
    if (v60 == 1)
    {
      char v26 = v59[0];
      *(_OWORD *)unint64_t v62 = *(_OWORD *)&v59[1];
      *(void *)&v62[15] = *(void *)&v59[16];
      WebKit::WebPage::revokeSandboxExtensions((uint64_t)&v57);
      char v27 = *(unsigned char *)(a4 + 4);
      char v52 = v26;
      *(_OWORD *)int v53 = *(_OWORD *)v62;
      *(void *)&v53[15] = *(void *)&v62[15];
      char v54 = 1;
      v55[0] = v27;
      v55[1] = 0;
      char v56 = &v52;
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
      int v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v29 = 1940;
      *((void *)v29 + 1) = v28;
      *((void *)v29 + 66) = (char *)v29 + 16;
      *((void *)v29 + 67) = 512;
      *((void *)v29 + 68) = 0;
      *((void *)v29 + 70) = 0;
      *((void *)v29 + 69) = 0;
      IPC::Encoder::encodeHeader(v29);
      uint64_t v61 = v29;
      IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v29, (uint64_t)v55);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, &v61, 0);
      uint64_t v30 = v61;
      uint64_t v61 = 0;
      if (v30)
      {
        IPC::Encoder::~Encoder(v30, v24);
        WTF::fastFree(v48, v49);
      }
      BOOL v31 = 0;
      char v25 = 1;
      goto LABEL_19;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
    __break(0xC471u);
    goto LABEL_48;
  }
  char v11 = *(unsigned char *)(a4 + 4);
  v59[0] = 0;
  LOBYTE(v60) = 0;
  char v52 = v11;
  v53[0] = 0;
  *(void *)&v53[7] = v59;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 1940;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  *(void *)unint64_t v62 = v13;
  IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v13, (uint64_t)&v52);
  (*(void (**)(uint64_t, unsigned char *, void))(*(void *)(a1 + 32) + 32))(a1 + 32, v62, 0);
  uint64_t result = *(IPC::Encoder **)v62;
  *(void *)unint64_t v62 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
LABEL_36:
  *(unsigned char *)(a1 + 920) = v10;
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidReceiveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1940;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  BOOL v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

uint64_t WebKit::WebPage::revokeSandboxExtensions(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = *(void *)(*v3 + 16) - 1;
      *(void *)(*v3 + 16) = v6;
      if (!v6)
      {
        *(void *)(*(void *)(v5 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }

  return WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
}

uint64_t WebKit::WebPage::setLastKnownMousePosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  {
    char v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t result = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (result)
  {
    uint64_t v8 = *(void *)(result + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (!*(unsigned char *)(v9 + 144) && *(void *)(v9 + 288))
        {
          uint64_t v10 = *(void *)(v9 + 624);
          return MEMORY[0x1F416CE00](v10, a4, a5);
        }
      }
    }
  }
  return result;
}

void WebKit::WebPage::performHitTestForMouseEvent(uint64_t a1, const WebMouseEvent *this, uint64_t *a3)
{
  v48[6] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned __int8 *)this + 5);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 160) + 144)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 160);
  }
  if (v5)
  {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    if (*(void *)(v5 + 288))
    {
      WebKit::platform((uint64_t *)v27, this);
      WebCore::EventHandler::getHitTestResultForMouseEvent();
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v7);
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v8);
      uint64_t v10 = v31;
      BOOL v31 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      __int16 v24 = 0;
      char v23 = 0;
      WebCore::Chrome::getToolTip();
      __int16 v22 = 0;
      WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v27, v25, (const WTF::String *)&v24);
      (*(void (**)(void, uint64_t, WebKit::WebHitTestResultData **, uint64_t, void **))(**(void **)(a1 + 376)
                                                                                                 + 56))(*(void *)(a1 + 376), a1, v25, v4, &v22);
      {
        uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v20);
      }
      char v26 = (CFTypeRef *)&unk_1EE9E6F68;
      WebKit::UserData::transform(v22, (uint64_t)&v26, &v21);
      uint64_t v13 = v21;
      if (v21) {
        CFRetain(*(CFTypeRef *)(v21 + 8));
      }
      char v26 = (CFTypeRef *)v13;
      uint64_t v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, CFTypeRef **))(*(void *)v14 + 16))(v14, v27, v4, &v26);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      uint32_t v15 = v26;
      char v26 = 0;
      if (v15) {
        CFRelease(v15[1]);
      }
      uint64_t v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v27);
      uint64_t v18 = (CFTypeRef *)v22;
      __int16 v22 = 0;
      if (v18) {
        CFRelease(v18[1]);
      }
      unsigned int v19 = v24;
      __int16 v24 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      MEMORY[0x199731400](v25);
LABEL_28:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      return;
    }
  }
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  char v30 = 0;
  v33[248] = 0;
  v33[256] = 0;
  v33[280] = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  memset(v27, 0, sizeof(v27));
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v37 = 0;
  int v43 = 1065353216;
  __int16 v47 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  char v46 = 0;
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v48);
  v48[5] = 0;
  v25[0] = 0;
  uint64_t v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *, uint64_t, WebKit::WebHitTestResultData **))(*(void *)v11 + 16))(v11, v27, v4, v25);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  uint64_t v12 = v25[0];
  v25[0] = 0;
  if (v12) {
    CFRelease(*((CFTypeRef *)v12 + 1));
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v27);
  if (v5) {
    goto LABEL_28;
  }
}

atomic_uchar *WebKit::WebPage::handleWheelEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  v33[0] = a2;
  v33[1] = a3;
  uint64_t v11 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(a1 + 48));
  if (!v11 || (uint64_t v12 = v11, !(*(unsigned int (**)(uint64_t))(*(void *)v11 + 32))(v11)))
  {
    WebKit::WebPage::wheelEvent(a1, v33, a4, (uint64_t)&v30);
    char v17 = v32;
    if (v32 == 1)
    {
      BOOL v19 = 0;
      char v17 = v30;
      v39[0] = *(_OWORD *)v31;
      *(void *)((char *)v39 + 15) = *(void *)&v31[15];
      char v18 = 1;
    }
    else
    {
      if (v32) {
        goto LABEL_14;
      }
      char v18 = 0;
      BOOL v19 = v30 != 0;
    }
    uint64_t v20 = *a7;
    *a7 = 0;
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
    char v34 = v17;
    *(_OWORD *)long long v35 = v39[0];
    *(void *)&v35[15] = *(void *)((char *)v39 + 15);
    char v36 = v18;
    (*(void (**)(uint64_t, long long *, void, BOOL, char *))(*(void *)v20 + 16))(v20, &v37, 0, v19, &v34);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v12 + 8));
  *(_WORD *)(v12 + 217) = a6;
  WebKit::WebPage::wheelEvent(a1, v33, a4, (uint64_t)&v30);
  long long v28 = *(_OWORD *)(v12 + 184);
  uint64_t v29 = *(void *)(v12 + 200);
  uint64_t v13 = *(unsigned __int16 *)(v12 + 208);
  *(unsigned char *)(v12 + 184) = 0;
  *(unsigned char *)(v12 + 200) = 0;
  *(_WORD *)(v12 + 208) = 0;
  char v14 = v32;
  if (v32 == 1)
  {
    BOOL v16 = 0;
    char v14 = v30;
    *(_OWORD *)long long v40 = *(_OWORD *)v31;
    *(void *)&v40[15] = *(void *)&v31[15];
    char v15 = 1;
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_14:
    uint64_t v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return (atomic_uchar *)WebKit::WebPage::wheelEvent(v24, v25, v26, v27);
  }
  char v15 = 0;
  BOOL v16 = v30 != 0;
LABEL_12:
  uint64_t v22 = *a7;
  *a7 = 0;
  long long v37 = v28;
  uint64_t v38 = v29;
  char v34 = v14;
  *(_OWORD *)long long v35 = *(_OWORD *)v40;
  *(void *)&v35[15] = *(void *)&v40[15];
  char v36 = v15;
  (*(void (**)(uint64_t, long long *, uint64_t, BOOL, char *))(*(void *)v22 + 16))(v22, &v37, v13, v16, &v34);
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 8), v23);
}

uint64_t WebKit::WebPage::wheelEvent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v12[17] = *MEMORY[0x1E4F143B8];
  PAL::HysteresisActivity::impulse((unsigned char *)(a1 + 1832));
  uint64_t v7 = (_DWORD *)WebKit::g_currentEvent;
  if (WebKit::g_currentEvent) {
    ++*(_DWORD *)WebKit::g_currentEvent;
  }
  WebKit::g_currentEvent = a3;
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t result = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *a2, a2[1]);
  if (result
    && (uint64_t v9 = *(void *)(result + 24)) != 0
    && (uint64_t v10 = *(void *)(v9 + 8)) != 0
    && !*(unsigned char *)(v10 + 144)
    && *(void *)(v10 + 288))
  {
    WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v12, a3);
    uint64_t result = WebCore::EventHandler::handleWheelEvent();
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  WebKit::g_currentEvent = (uint64_t)v7;
  if (v7)
  {
    if (!*v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199384664);
    }
    --*v7;
  }
  return result;
}

unsigned int *WebKit::WebPage::dispatchWheelEventWithoutScrolling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v13[0] = a2;
  v13[1] = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 160) + 144)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 160);
  }
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  WebKit::WebPage::wheelEvent(a1, v13, a4, (uint64_t)v11);
  if (v12) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v11[0] == 0;
  }
  uint64_t v8 = !v7;
  uint64_t v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v6) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::keyEvent(uint64_t a1, uint64_t a2, uint64_t a3, WebKit *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char v8 = *(unsigned char *)(a1 + 920);
  *(unsigned char *)(a1 + 920) = 1;
  PAL::HysteresisActivity::impulse((unsigned char *)(a1 + 1832));
  WebKit::platform(a4, (uint64_t)v23);
  WebCore::PlatformKeyboardEvent::setCurrentModifierState();
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v23, v9);
  uint64_t v10 = (_DWORD *)WebKit::g_currentEvent;
  if (WebKit::g_currentEvent) {
    ++*(_DWORD *)WebKit::g_currentEvent;
  }
  WebKit::g_currentEvent = (uint64_t)a4;
  {
    BOOL v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v11 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v11) {
    LOBYTE(v11) = WebKit::WebFrame::handleKeyEvent(v11, a4);
  }
  char v12 = *((unsigned char *)a4 + 4);
  v23[0] = 0;
  v23[24] = 0;
  v20[0] = v12;
  v20[1] = (_BYTE)v11;
  uint64_t v21 = v23;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  char v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v14 = 1940;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  uint64_t v22 = v14;
  IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v14, (uint64_t)v20);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, &v22, 0);
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  WebKit::g_currentEvent = (uint64_t)v10;
  if (v10)
  {
    if (!*v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1993849B0);
    }
    --*v10;
  }
  *(unsigned char *)(a1 + 920) = v8;
  return result;
}

uint64_t WebKit::WebPage::handleKeyEventByRelinquishingFocusToChrome(WebKit::WebPage *this, const WebCore::KeyboardEvent *a2)
{
  if (*(unsigned char *)(*((void *)this + 6) + 338)
    || WebCore::KeyboardEvent::charCode(a2) != 9
    || (*((unsigned char *)a2 + 84) & 0xE) != 8)
  {
    return 0;
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v6, *((WebCore::Page **)this + 6));
  uint64_t result = WebCore::FocusController::relinquishFocusToChrome();
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  if (v5)
  {
    if (*v5)
    {
      --*v5;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::validateCommand(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)v18, *(WebCore::Page **)(a1 + 48));
  uint64_t v5 = (atomic_uint *)WebCore::FocusController::focusedOrMainFrame(v18[0]);
  BOOL v7 = v5;
  if (v5) {
    atomic_fetch_add(v5 + 2, 1u);
  }
  char v8 = v18[0];
  v18[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x199384C98);
    }
    --*(_DWORD *)v8;
  }
  if (v5)
  {
    uint64_t v9 = (WebKit::PluginView *)WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)v5, v6);
    if (v9)
    {
      uint64_t isEditingCommandEnabled = WebKit::PluginView::isEditingCommandEnabled(v9, a2);
      BOOL v11 = 0;
    }
    else
    {
      char v14 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v7 + 37));
      WebCore::Editor::command((uint64_t *)v18, v14, a2);
      BOOL v11 = WebCore::Editor::Command::state() != 0;
      if (WebCore::Editor::Command::isSupported((WebCore::Editor::Command *)v18)) {
        uint64_t isEditingCommandEnabled = WebCore::Editor::Command::isEnabled();
      }
      else {
        uint64_t isEditingCommandEnabled = 0;
      }
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
      }
      BOOL v16 = v19;
      BOOL v19 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 7) == 2)
        {
          if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v16);
          }
        }
        else
        {
          *((_DWORD *)v16 + 7) -= 2;
        }
      }
    }
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v17 + 16))(v17, isEditingCommandEnabled, v11);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v7 + 2);
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v12 + 16))(v12, 0, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

unsigned char *WebKit::WebPage::setNeedsFontAttributes(unsigned char *this, int a2)
{
  if (this[2109] != a2)
  {
    this[2109] = a2;
    if (a2) {
      return WebKit::WebPage::scheduleFullEditorStateUpdate(this);
    }
  }
  return this;
}

uint64_t *WebKit::WebPage::restoreSession(uint64_t *a1, uint64_t a2)
{
  return WebKit::WebPage::restoreSessionInternal(a1, a2, 1, 0);
}

uint64_t *WebKit::WebPage::updateBackForwardListForReattach(uint64_t *a1, uint64_t a2)
{
  return WebKit::WebPage::restoreSessionInternal(a1, a2, 0, 1);
}

uint64_t WebKit::WebPage::setCurrentHistoryItemForReattach(uint64_t *a1, void *a2)
{
  WebKit::toHistoryItem(a1[304], (uint64_t)a2, (uint64_t *)&v9);
  uint64_t v4 = v9;
  WebKit::WebBackForwardListProxy::addItemFromUIProcess(*(void *)(*(void *)(a1[6] + 136) + 16), a2, &v9, a1[5], 1);
  uint64_t result = *(void *)(a1[6] + 160);
  if (result) {
    BOOL v6 = *(unsigned char *)(result + 144) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    WebCore::Frame::checkedHistory((uint64_t *)&v8, (WebCore::Frame *)result);
    ++*v4;
    WebCore::HistoryController::setCurrentItem();
    if (v4) {
      WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
    }
    BOOL v7 = v8;
    char v8 = 0;
    if (v7)
    {
      if (!*v7)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*v7;
    }
    return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
  }
  if (v4) {
    return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
  }
  return result;
}

void WebKit::WebPage::requestFontAttributesAtSelectionStart(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v16, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v16[0]);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v5 = v16[0];
  v16[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      return;
    }
    --*(_DWORD *)v5;
  }
  if (v3)
  {
    BOOL v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
    WebCore::Editor::fontAttributesAtSelectionStart((uint64_t *)v16, v6);
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v7 + 16))(v7, v16);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v8);
    if ((*((void *)&v17 + 1) & 0x8000000000000) != 0)
    {
      uint64_t v13 = (unsigned int *)(*((void *)&v17 + 1) & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v17 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v9);
      }
    }
    if ((v17 & 0x8000000000000) != 0)
    {
      char v14 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v9);
      }
    }
    if (((unint64_t)v16[1] & 0x8000000000000) != 0)
    {
      uint64_t v15 = (unsigned int *)((unint64_t)v16[1] & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v16[1] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v9);
      }
    }
    uint64_t v10 = v16[0];
    v16[0] = 0;
    if (v10) {
      WTF::RefCounted<WebCore::Font>::deref(v10);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    __int16 v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)BOOL v16 = 0u;
    memset(v20, 0, 19);
    uint64_t v11 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v11 + 16))(v11, v16);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)v16, v12);
  }
}

void WebKit::WebPage::cancelCurrentInteractionInformationRequest(WebKit::WebPage *this)
{
  v4[81] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 205);
  *((void *)this + 205) = 0;
  if (v1)
  {
    double v2 = WebKit::InteractionInformationAtPosition::invalidInformation((uint64_t)v4);
    (*(void (**)(uint64_t, void *, double))(*(void *)v1 + 16))(v1, v4, v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v4, v3);
  }
}

double WebKit::InteractionInformationAtPosition::invalidInformation@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 7) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 11) = 1;
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 21) = 0;
  *(unsigned char *)(a1 + 23) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 54) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 72));
  *(void *)(a1 + 112) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 112));
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_WORD *)(a1 + 386) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

unsigned int *WebKit::WebPage::dispatchTouchEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v27[7] = *MEMORY[0x1E4F143B8];
  char v8 = *(unsigned char *)(a1 + 920);
  *(unsigned char *)(a1 + 920) = 1;
  *(void *)(a1 + 1240) = *(void *)(a4 + 80);
  uint64_t v9 = (_DWORD *)WebKit::g_currentEvent;
  if (WebKit::g_currentEvent) {
    ++*(_DWORD *)WebKit::g_currentEvent;
  }
  WebKit::g_currentEvent = a4;
  {
    uint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = *(void *)(v11 + 24);
    if (v12 && (uint64_t v13 = *(void *)(v12 + 8)) != 0 && !*(unsigned char *)(v13 + 144))
    {
      char v14 = (unsigned int *)(v13 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
      if (*(void *)(v13 + 288))
      {
        WebKit::platform(a4, (uint64_t)&v23);
        WebCore::EventHandler::handleTouchEvent();
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v15);
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v16);
        long long v18 = v24;
        if (v24)
        {
          uint64_t v24 = 0;
          int v25 = 0;
          WTF::fastFree(v18, v17);
        }
      }
      else
      {
        *(unsigned char *)a5 = 0;
        *(_DWORD *)(a5 + 24) = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
    }
    else
    {
      *(unsigned char *)a5 = 0;
      *(_DWORD *)(a5 + 24) = 0;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
    if (*(_DWORD *)(a5 + 24)) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = *(unsigned char *)a5 == 0;
    }
    int v20 = !v19;
  }
  else
  {
    int v20 = 0;
    *(unsigned char *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  double result = WebKit::WebPage::updatePotentialTapSecurityOrigin((unsigned int *)a1, a4, v20);
  WebKit::g_currentEvent = (uint64_t)v9;
  if (v9)
  {
    if (!*v9)
    {
      __break(0xC471u);
      JUMPOUT(0x199385374);
    }
    --*v9;
  }
  *(unsigned char *)(a1 + 920) = v8;
  return result;
}

unsigned int *WebKit::WebPage::updatePotentialTapSecurityOrigin(unsigned int *result, uint64_t a2, int a3)
{
  if (!a3 && *(unsigned char *)(a2 + 89) && *(unsigned char *)(a2 + 4) == 11)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(*((void *)result + 6) + 160);
    if (v5 && *(unsigned char *)(v5 + 144) == 0)
    {
      uint64_t v7 = (unsigned int *)(v5 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
      uint64_t v8 = *(void *)(v5 + 296);
      if (v8)
      {
        int v9 = *(_DWORD *)(v8 + 28);
        *(_DWORD *)(v8 + 28) = v9 + 2;
        if (*(unsigned char *)(v8 + 705))
        {
          atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
          uint64_t v10 = *(void *)(v5 + 624);
          uint64_t v11 = *(void *)(v10 + 832);
          if (v11 && !*(unsigned char *)(v11 + 144))
          {
            do
            {
              uint64_t v12 = v11;
              atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
              uint64_t v10 = *(void *)(v12 + 624);
              uint64_t v11 = *(void *)(v10 + 832);
              if (!v11) {
                break;
              }
              uint64_t v5 = v12;
            }
            while (!*(unsigned char *)(v11 + 144));
          }
          else
          {
            uint64_t v12 = v5;
          }
          if (*(_DWORD *)(v10 + 828))
          {
            uint64_t v13 = *(void *)(v12 + 296);
            if (v13)
            {
              char v14 = (atomic_uint *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13 + 208));
              if (v14) {
                atomic_fetch_add(v14, 1u);
              }
              uint64_t v16 = *((void *)v4 + 159);
              *((void *)v4 + 159) = v14;
              if (v16) {
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v16, v15);
              }
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
          int v9 = *(_DWORD *)(v8 + 28) - 2;
        }
        if (v9)
        {
          *(_DWORD *)(v8 + 28) = v9;
        }
        else if ((*(_WORD *)(v8 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::scroll(uint64_t a1)
{
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(a1 + 72));
  if (result)
  {
    double v2 = (unsigned int *)(result + 8);
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    uint64_t v3 = WebCore::EventHandler::scrollRecursively();
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
    return v3;
  }
  return result;
}

uint64_t WebKit::WebPage::centerSelectionInVisibleArea(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    WebCore::FrameSelection::revealSelection();
    WebKit::FindController::updateFindIndicator(this[56], 0, 1);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setControlledByAutomation(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 1091) = a2;
  return this;
}

unsigned int *WebKit::WebPage::connectInspector(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  return WebKit::WebPageInspectorTargetController::connectInspector(*(void *)(a1 + 488), a2, a3);
}

unsigned int *WebKit::WebPage::disconnectInspector(WebKit::WebPageInspectorTargetController **this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  return WebKit::WebPageInspectorTargetController::disconnectInspector(this[61], a2, a3);
}

unsigned int *WebKit::WebPage::sendMessageToTargetBackend(WebKit::WebPageInspectorTargetController **this, WTF::StringImpl **a2, const WTF::String *a3)
{
  return WebKit::WebPageInspectorTargetController::sendMessageToTargetBackend(this[61], a2, a3);
}

uint64_t WebKit::WebPage::insertNewlineInQuotedContent(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v6, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v6;
  BOOL v6 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = *(WebCore::Document **)(result + 296);
    if (*(unsigned char *)(*((void *)v4 + 387) + 153))
    {
      uint64_t v5 = (WebCore::Editor *)WebCore::Document::editor(v4);
      WebCore::Editor::insertParagraphSeparatorInQuotedContent(v5);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setIndicating(WebKit::WebPage *this)
{
  return MEMORY[0x1F416F630](*(void *)(*((void *)this + 6) + 80));
}

uint64_t WebKit::WebPage::setBackgroundColor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (WebCore::Color *)(a1 + 224);
  uint64_t result = std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>(a1 + 224, a2);
  if ((result & 1) == 0)
  {
    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>(v4, (uint64_t)a2);
    uint64_t v6 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
    if (v6)
    {
      uint64_t v7 = (_DWORD *)v6;
      ++*(_DWORD *)(v6 + 8);
      WebCore::LocalFrameView::updateBackgroundRecursively();
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)a1[9] + 40);
    return v8();
  }
  return result;
}

float *WebKit::WebPage::setTopContentInsetFenced(WebKit::WebPage *this, float a2, const WTF::MachSendRight *a3)
{
  (*(void (**)(void, const WTF::MachSendRight *))(**((void **)this + 9) + 152))(*((void *)this + 9), a3);

  return WebKit::WebPage::setTopContentInset(this, a2);
}

uint64_t WebKit::WebPage::viewWillStartLiveResize(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    WebCore::Page::checkedFocusController((uint64_t *)&v5, (WebCore::Page *)result);
    uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
    uint64_t v2 = result;
    if (result) {
      atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    }
    uint64_t v3 = v5;
    uint64_t v5 = 0;
    if (v3)
    {
      if (!*(_DWORD *)v3)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v3;
    }
    if (result)
    {
      uint64_t v4 = *(WebCore::LocalFrameView **)(result + 288);
      if (v4)
      {
        ++*((_DWORD *)v4 + 2);
        WebCore::LocalFrameView::willStartLiveResize(v4);
        if (*((_DWORD *)v4 + 2) == 1) {
          (*(void (**)(WebCore::LocalFrameView *))(*(void *)v4 + 8))(v4);
        }
        else {
          --*((_DWORD *)v4 + 2);
        }
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return result;
}

uint64_t WebKit::WebPage::viewWillEndLiveResize(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    WebCore::Page::checkedFocusController((uint64_t *)&v5, (WebCore::Page *)result);
    uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
    uint64_t v2 = result;
    if (result) {
      atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    }
    uint64_t v3 = v5;
    uint64_t v5 = 0;
    if (v3)
    {
      if (!*(_DWORD *)v3)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v3;
    }
    if (result)
    {
      uint64_t v4 = *(WebCore::LocalFrameView **)(result + 288);
      if (v4)
      {
        ++*((_DWORD *)v4 + 2);
        WebCore::LocalFrameView::willEndLiveResize(v4);
        if (*((_DWORD *)v4 + 2) == 1) {
          (*(void (**)(WebCore::LocalFrameView *))(*(void *)v4 + 8))(v4);
        }
        else {
          --*((_DWORD *)v4 + 2);
        }
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::setInitialFocus(uint64_t a1, uint64_t a2, int a3, WebKit *a4, uint64_t *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    char v10 = *(unsigned char *)(a1 + 920);
    *(unsigned char *)(a1 + 920) = 1;
    uint64_t v11 = *(WebCore::FocusController **)(v6 + 72);
    ++*(_DWORD *)v11;
    uint64_t v12 = WebCore::FocusController::focusedOrMainFrame(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      char v14 = (unsigned int *)(v12 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
      WebCore::Document::setFocusedElement(*(WebCore::Document **)(v12 + 296), 0);
      if (a3 && *((unsigned char *)a4 + 96) && *((unsigned char *)a4 + 4) == 7)
      {
        WebKit::platform(a4, (uint64_t)v25);
        WebCore::PlatformKeyboardEvent::disambiguateKeyDownEvent();
        uint64_t v15 = *(WebCore::WindowProxy **)(v13 + 112);
        ++*(_DWORD *)v15;
        uint64_t v23 = v15;
        WebCore::KeyboardEvent::create();
        WebCore::FocusController::setInitialFocus();
        if (v24)
        {
          if (v24[4] == 1) {
            (*(void (**)())(*(void *)v24 + 8))();
          }
          else {
            --v24[4];
          }
        }
        if (v23) {
          WTF::RefCounted<WebCore::WindowProxy>::deref(v23);
        }
        uint64_t v20 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v25, v21);
      }
      else
      {
        WebCore::FocusController::setInitialFocus();
        uint64_t v19 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
    }
    else
    {
      uint64_t v22 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x199385DE4);
    }
    --*(_DWORD *)v11;
    *(unsigned char *)(a1 + 920) = v10;
  }
  else
  {
    uint64_t v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    long long v17 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);
    return (unsigned int *)v17(v16);
  }
  return result;
}

uint64_t WebKit::WebPage::didStartPageTransition(WebKit::WebPage *this)
{
  uint64_t result = WebKit::WebPage::freezeLayerTree((uint64_t)this, 1);
  *((_DWORD *)this + 507) = 2;
  *((unsigned char *)this + 1248) = 0;
  *((unsigned char *)this + 1251) = 0;
  return result;
}

IPC::Encoder *WebKit::WebPage::show(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2095;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::setIsTakingSnapshotsForApplicationSuspension(WebKit::WebPage *this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358438;
  if (os_log_type_enabled((os_log_t)qword_1EB358438, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 5);
    int v7 = 134218496;
    uint64_t v8 = this;
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::setIsTakingSnapshotsForApplicationSuspension(%d)", (uint8_t *)&v7, 0x1Cu);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    *(unsigned char *)(v6 + 1680) = a2;
  }
}

unsigned int *WebKit::WebPage::setNeedsDOMWindowResizeEvent(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 160);
    if (v2 && *(unsigned char *)(v2 + 144) == 0)
    {
      uint64_t v4 = (unsigned int *)(v2 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
      uint64_t v5 = *(void *)(v2 + 296);
      if (v5)
      {
        *(_DWORD *)(v5 + 28) += 2;
        WebCore::Document::setNeedsDOMWindowResizeEvent((WebCore::Document *)v5);
        if (*(_DWORD *)(v5 + 28) == 2)
        {
          if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
        }
        else
        {
          *(_DWORD *)(v5 + 28) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::suspend(void *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[5];
    uint64_t v7 = a1[6];
    *(_DWORD *)long long v18 = 134218496;
    *(void *)&v18[4] = a1;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    __int16 v21 = 2048;
    uint64_t v22 = v7;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::suspend: m_page=%p", v18, 0x20u);
  }
  if (a1[6])
  {
    uint64_t v8 = (WebCore::BackForwardCache *)WebKit::WebPage::freezeLayerTree((uint64_t)a1, 8);
    WebCore::BackForwardCache::singleton(v8);
    WebCore::BackForwardCache::suspendPage();
    uint64_t v10 = *(void *)v18;
    *(void *)long long v18 = 0;
    uint64_t v11 = a1[299];
    a1[299] = v10;
    if (v11)
    {
      v9.n128_f64[0] = WebCore::CachedPage::operator delete();
      uint64_t v12 = *(void *)v18;
      *(void *)long long v18 = 0;
      if (v12) {
        v9.n128_f64[0] = WebCore::CachedPage::operator delete();
      }
    }
    uint64_t v13 = *(void *)(a1[11] + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14)
      {
        if (!*(unsigned char *)(v14 + 144))
        {
          uint64_t v15 = (unsigned int *)(v14 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
          WebCore::Frame::detachFromAllOpenedFrames((WebCore::Frame *)v14);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
        }
      }
    }
    uint64_t v16 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v16 + 16))(v16, 1, v9);
  }
  else
  {
    uint64_t v16 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void, __n128))(*(void *)v16 + 16))(v16, 0, v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
}

void WebKit::WebPage::resume(void *a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    int v10 = 134218496;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::resume: m_page=%p", (uint8_t *)&v10, 0x20u);
  }
  if (a1[6] && (uint64_t v7 = a1[299], a1[299] = 0, v7))
  {
    WebCore::CachedPage::restore();
    WebKit::WebPage::unfreezeLayerTree((uint64_t)a1, 8);
    uint64_t v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    WebCore::CachedPage::operator delete();
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

char *WebKit::WebPage::screenToRootView(WebKit::WebPage *this, const WebCore::IntPoint *a2)
{
  uint64_t v7 = (int *)a2;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)v2 + 48))(v2);
  if (v4)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::ScreenToRootView>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
    int v5 = v10;
    if (v10 == -1) {
      return 0;
    }
    uint64_t v2 = v9;
  }
  else
  {
    v8[0] = 3;
    int v5 = 1;
    int v10 = 1;
  }
  ((void (*)(int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16ScreenToRootViewEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5) {
    return 0;
  }
  else {
    return v2;
  }
}

char *WebKit::WebPage::rootViewToScreen(WebKit::WebPage *this, const WebCore::IntRect *a2)
{
  v10[0] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits(a2);
  v10[1] = v3;
  uint64_t v11 = v10;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v4 = (char *)this + 32;
  uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
  uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v4 + 48))(v4);
  if (!v7)
  {
    v12[0] = 3;
    int v8 = 1;
    int v14 = 1;
    goto LABEL_5;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>(v7, &v11, v6, 0, (uint64_t)v12, INFINITY);
  int v8 = v14;
  uint64_t v4 = v13;
  if (v14 != -1) {
LABEL_5:
  }
    ((void (*)(void *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16RootViewToScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v8])(v10, v12);
  if (v8) {
    return 0;
  }
  else {
    return v4;
  }
}

char *WebKit::WebPage::accessibilityScreenToRootView(WebKit::WebPage *this, const WebCore::IntPoint *a2)
{
  uint64_t v7 = (int *)a2;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)v2 + 48))(v2);
  if (v4)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::AccessibilityScreenToRootView>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
    int v5 = v10;
    if (v10 == -1) {
      return 0;
    }
    uint64_t v2 = v9;
  }
  else
  {
    v8[0] = 3;
    int v5 = 1;
    int v10 = 1;
  }
  ((void (*)(int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5) {
    return 0;
  }
  else {
    return v2;
  }
}

char *WebKit::WebPage::rootViewToAccessibilityScreen(WebKit::WebPage *this, const WebCore::IntRect *a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)v2 + 48))(v2);
  if (!v4)
  {
    v8[0] = 3;
    int v5 = 1;
    int v10 = 1;
    goto LABEL_5;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
  int v5 = v10;
  uint64_t v2 = v9;
  if (v10 != -1) {
LABEL_5:
  }
    ((void (*)(void **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t WebKit::WebPage::keyboardUIMode(WebKit::WebPage *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 258) | (*((unsigned __int8 *)this + 187) << 28);
}

void WebKit::WebPage::runJavaScript(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a2 || (uint64_t v7 = *(void *)(a2 + 24)) == 0 || (v8 = *(void *)(v7 + 8)) == 0 || *(unsigned char *)(v8 + 144))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)&uint8_t buf[8] = 0;
    buf[16] = 1;
    long long v37 = 0;
    goto LABEL_6;
  }
  uint64_t v14 = WebKit::WebUserContentController::worldForIdentifier(*(WebKit **)(a1 + 624), a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    if (!WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections((WebKit::WebFrame *)a2))
    {
      if (*(unsigned char *)(a1 + 920))
      {
        char v22 = 1;
        char v23 = 1;
      }
      else if (*(unsigned char *)(a3 + 80))
      {
        char v23 = WTF::linkedOnOrAfterSDKWithBehavior();
        char v22 = *(unsigned char *)(a1 + 920);
      }
      else
      {
        char v22 = 0;
        char v23 = 0;
      }
      *(unsigned char *)(a1 + 920) = v23;
      CFRetain(*(CFTypeRef *)(v15 + 8));
      uint64_t v24 = (WebCore *)CFRetain(*(CFTypeRef *)(a2 + 8));
      uint64_t v25 = *(void *)(a2 + 24);
      if (v25 && (uint64_t v26 = *(void *)(v25 + 8)) != 0)
      {
        if (*(unsigned char *)(v26 + 144)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v26;
        }
      }
      else
      {
        uint64_t v27 = 0;
      }
      atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
      uint64_t v28 = *a5;
      *a5 = 0;
      if (!*MEMORY[0x1E4FB64D8]) {
        WebCore::commonVMSlow(v24);
      }
      MEMORY[0x19972D160](buf);
      uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x28);
      *uint64_t v29 = &unk_1EEA00DB0;
      v29[1] = v15;
      v29[2] = a2;
      v29[3] = v27;
      v29[4] = v28;
      long long v35 = v29;
      WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld();
      if (v35) {
        (*(void (**)(void *))(*v35 + 8))(v35);
      }
      MEMORY[0x19972D170](buf);
      *(unsigned char *)(a1 + 920) = v22;
      goto LABEL_40;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)&uint8_t buf[8] = 0;
    buf[16] = 2;
    long long v37 = 0;
    char v38 = 1;
    uint64_t v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, void, unsigned char *))(*(void *)v16 + 16))(v16, 0, 0, buf);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    if (v38)
    {
      int v32 = v37;
      long long v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v17);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      char v34 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v17);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 160) + 144)) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 160);
    }
    if (v18)
    {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
      uint64_t v19 = *(void *)(v18 + 296);
      if (v19)
      {
        *(_DWORD *)(v19 + 28) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage();
        __int16 v21 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        if (*(_DWORD *)(v19 + 28) == 2)
        {
          if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v19);
          }
        }
        else
        {
          *(_DWORD *)(v19 + 28) -= 2;
        }
      }
    }
    char v30 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v33;
      _os_log_error_impl(&dword_1985F2000, v30, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::runJavaScript: Ignoring user script injection for non app-bound domain", buf, 0x16u);
      if (!v18) {
        goto LABEL_40;
      }
    }
    else if (!v18)
    {
LABEL_40:
      CFRelease(*(CFTypeRef *)(v15 + 8));
      return;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
    goto LABEL_40;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v37 = 0;
  *(void *)&uint8_t buf[8] = 0;
  buf[16] = 0;
LABEL_6:
  char v38 = 1;
  uint64_t v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void, void, unsigned char *))(*(void *)v9 + 16))(v9, 0, 0, buf);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v38)
  {
    uint64_t v11 = v37;
    long long v37 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    BOOL v31 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v10);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

uint64_t std::optional<WebCore::ExceptionDetails>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void WebKit::WebPage::runJavaScriptInFrameInScriptWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v10 = qword_1EB358960;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a3 + 16)) {
      uint64_t v13 = *(void *)a3;
    }
    else {
      uint64_t v13 = 0;
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v12;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v28 = v13;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: frameID=%llu", buf, 0x20u);
  }
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v25 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v11);
    if (!*(unsigned char *)(a3 + 16)) {
      __break(1u);
    }
    uint64_t v14 = WebKit::WebProcess::webFrame(v25, *(void *)a3, *(void *)(a3 + 8));
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 88);
  }
  if (v14) {
    CFRetain(*(CFTypeRef *)(v14 + 8));
  }
  uint64_t v15 = WebKit::WebUserContentController::addContentWorld(*(WebKit **)(a1 + 624), a4);
  if (v15)
  {
    uint64_t v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    uint64_t v17 = *(void *)(a1 + 48);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 160);
      if (v18)
      {
        uint64_t v19 = *(void *)(v16 + 24);
        atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
        while (1)
        {
          if (!*(unsigned char *)(v18 + 144))
          {
            atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
            (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v18 + 280) + 16) + 1000))(*(void *)(*(void *)(v18 + 280) + 16), v19);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
          }
          uint64_t v20 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v18 + 48), 0);
          if (!v20) {
            break;
          }
          uint64_t v21 = v20;
          atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 1u);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
          uint64_t v18 = v21;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
      }
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v22 = *a4;
  *(void *)buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v23 = *a5;
  *a5 = 0;
  uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v24 = &unk_1EEA00DF8;
  v24[1] = a1;
  void v24[2] = a1;
  void v24[3] = v23;
  *(_OWORD *)&uint8_t buf[8] = 0uLL;
  uint64_t v26 = v24;
  WebKit::WebPage::runJavaScript(a1, v14, a2, v22, (uint64_t *)&v26);
  if (v26) {
    (*(void (**)(void *))(*v26 + 8))(v26);
  }
  WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0::~$_0((uint64_t)buf);
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
}

uint64_t WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

WTF::StringImpl *WebKit::WebPage::getContentsAsString(uint64_t a1, char a2, uint64_t *a3)
{
  if (a2)
  {
    v25[0] = 0;
    v25[1] = 0;
    int v26 = 0;
    char v27 = 1;
    uint64_t v7 = *(void *)(*(void *)(a1 + 88) + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (!*(unsigned char *)(v8 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
          int64x2_t v12 = vdupq_n_s64(3uLL);
          v12.i64[0] = (uint64_t)"\n\n";
          int8x16_t v21 = (int8x16_t)v12;
          while (1)
          {
            WebKit::WebFrame::fromCoreFrame(v8, &v24);
            uint64_t v13 = v24;
            if (v24)
            {
              int32x2_t v14 = vdup_n_s32(v26 == 0);
              v15.i64[0] = v14.u32[0];
              v15.i64[1] = v14.u32[1];
              int8x16_t v16 = (int8x16_t)vdupq_n_s64(1uLL);
              v16.i64[0] = (uint64_t)"";
              *(int8x16_t *)uint64_t v23 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), v16, v21);
              WebKit::WebFrame::contentsAsString((unsigned int *)v24, &v22);
              WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)v25, (uint64_t)v23, (uint64_t *)&v22);
              uint64_t v18 = v22;
              uint64_t v22 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2) {
                  WTF::StringImpl::destroy(v18, v17);
                }
                else {
                  *(_DWORD *)v18 -= 2;
                }
              }
              CFRelease(*((CFTypeRef *)v13 + 1));
            }
            uint64_t Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v8 + 48), 0);
            if (!Rendered) {
              break;
            }
            uint64_t v20 = Rendered;
            atomic_fetch_add((atomic_uint *volatile)(Rendered + 8), 1u);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
            uint64_t v8 = v20;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
        }
      }
    }
    WTF::StringBuilder::toString((WTF::StringBuilder *)v25, v23);
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, v23);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    BOOL v11 = v23[0];
    v23[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v25, v10);
  }
  else
  {
    WebKit::WebFrame::contentsAsString(*(unsigned int **)(a1 + 88), v25);
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, v25);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t result = v25[0];
    v25[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::getRenderTreeExternalRepresentation(uint64_t a1, uint64_t *a2)
{
  WebCore::externalRepresentation();
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::getSelectionAsWebArchiveData(uint64_t a1, WebCore::Page *a2)
{
  uint64_t v3 = (atomic_uint *)WebKit::frameWithSelection(*(WebKit **)(a1 + 48), a2);
  if (!v3)
  {
    int v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
LABEL_16:
    uint64_t v6 = 0;
    uint64_t v13 = 0;
    uint64_t v20 = 0;
    goto LABEL_17;
  }
  int v5 = (unsigned int *)(v3 + 2);
  atomic_fetch_add(v3 + 2, 1u);
  WebCore::LegacyWebArchive::createFromSelection((uint64_t *)&v26, (WebCore::LegacyWebArchive *)v3, v4);
  WebCore::LegacyWebArchive::rawDataRepresentation((uint64_t *)&v20, v26);
  uint64_t v6 = v20;
  uint64_t v20 = 0;
  uint64_t v7 = v26;
  int v26 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1) {
      (*(void (**)(WebCore::LegacyWebArchive *))(*(void *)v7 + 8))(v7);
    }
    else {
      --*((_DWORD *)v7 + 2);
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  int v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v24 = v6;
  WebCore::SharedBuffer::create<__CFData const*>(&v24, v8, &v25);
  uint64_t v9 = (unsigned int *)v25;
  int v10 = *(WebCore::LegacyWebArchive **)(v25 + 48);
  uint64_t v25 = 0;
  uint64_t v20 = v10;
  int8x16_t v21 = v9;
  uint64_t v22 = 0;
  IPC::SharedBufferReference::operator=(&v26, (uint64_t *)&v20);
  if (v22) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v22);
  }
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v11);
  }
  int64x2_t v12 = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v11);
  }
  uint64_t v13 = (unsigned int *)v27;
  uint64_t v20 = v26;
  if (v27) {
    atomic_fetch_add(v27, 1u);
  }
LABEL_17:
  int8x16_t v21 = v13;
  int32x2_t v14 = (unsigned int *)v28;
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  uint64_t v22 = v14;
  char v23 = 1;
  uint64_t v15 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t, WebCore::LegacyWebArchive **))(*(void *)v15 + 16))(v15, &v20);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v16);
  uint64_t v18 = (unsigned int *)v28;
  uint64_t v28 = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
  }
  uint64_t v19 = (unsigned int *)v27;
  char v27 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v17);
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t WebKit::frameWithSelection(WebKit *this, WebCore::Page *a2)
{
  for (uint64_t result = *((void *)this + 20);
        result;
        uint64_t result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(result + 48), 0))
  {
    if (!*(unsigned char *)(result + 144) && *(unsigned char *)(*(void *)(*(void *)(result + 296) + 3096) + 153) == 2) {
      break;
    }
  }
  return result;
}

void *IPC::SharedBufferReference::operator=(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  uint64_t v6 = (unsigned int *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
  }
  uint64_t v7 = a2[2];
  a2[2] = 0;
  CFDataRef v8 = (unsigned int *)a1[2];
  a1[2] = v7;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  }
  return a1;
}

void IPC::SharedBufferReference::~SharedBufferReference(IPC::SharedBufferReference *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
}

uint64_t WebKit::WebPage::copyLinkWithHighlight(WebCore::Page **this)
{
  WebCore::Page::fragmentDirectiveURLForSelectedText((uint64_t *)&v11, this[6]);
  WebCore::Page::checkedFocusController((uint64_t *)&v10, this[6]);
  uint64_t v2 = WebCore::FocusController::focusedOrMainFrame(v10);
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  uint64_t v5 = v10;
  int v10 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (v2)
  {
    if (v12)
    {
      uint64_t v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v2 + 296));
      int v10 = 0;
      WebCore::Editor::copyURL(v6, (const WTF::URL *)&v11, (const WTF::String *)&v10);
      CFDataRef v8 = v10;
      int v10 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  uint64_t result = (uint64_t)v11;
  BOOL v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::getSelectionOrContentsAsString(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v17, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v17);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v5 = v17;
  uint64_t v17 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      return;
    }
    --*(_DWORD *)v5;
  }
  if (v3)
  {
    WebKit::WebFrame::fromCoreFrame(v3, &v17);
    uint64_t v6 = v17;
  }
  else
  {
    uint64_t v6 = 0;
  }
  WebKit::WebFrame::selectionAsString((unsigned int *)v6, &v16);
  if (!v16 || !*((_DWORD *)v16 + 1))
  {
    WebKit::WebFrame::contentsAsString((unsigned int *)v6, &v15);
    uint64_t v9 = v15;
    CFDataRef v8 = v16;
    uint64_t v15 = 0;
    int8x16_t v16 = v9;
    if (v8)
    {
      int v10 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2) {
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v8, v7);
      CFDataRef v8 = v15;
      uint64_t v15 = 0;
      if (!v8) {
        goto LABEL_16;
      }
      int v10 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v11);
      }
      else {
LABEL_15:
      }
        *(_DWORD *)CFDataRef v8 = v10;
    }
  }
LABEL_16:
  uint64_t v12 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v12 + 16))(v12, &v16);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  int32x2_t v14 = v16;
  int8x16_t v16 = 0;
  if (!v14) {
    goto LABEL_19;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_19:
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (v6) {
LABEL_20:
  }
    CFRelease(*((CFTypeRef *)v6 + 1));
LABEL_21:
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
}

WTF::StringImpl *WebKit::WebPage::getSourceForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL v11 = 0;
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    WebKit::WebFrame::source((unsigned int *)v6, &v11);
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v11);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  uint64_t result = v11;
  BOOL v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::getMainResourceDataOfFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (!v5)
  {
    uint64_t v12 = 0;
    goto LABEL_17;
  }
  uint64_t v6 = v5;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v8 = *(void *)(v6 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      int v10 = 1;
      if (*(unsigned char *)(v9 + 144))
      {
        uint64_t v9 = 0;
      }
      else
      {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
        int v10 = 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  int v10 = 1;
LABEL_8:
  BOOL v11 = (atomic_uchar *)WebKit::WebPage::pluginViewForFrame(v9, v7);
  if (v11 && (WebKit::PluginView::liveResourceData(v11, v19), (uint64_t v12 = v19[0]) != 0))
  {
    if (v10)
    {
      CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_19:
      int32x2_t v14 = (atomic_uint *)*((void *)v12 + 6);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v13 = *(WebCore::DocumentLoader **)(*(void *)(v9 + 280) + 88);
    if (v13)
    {
      ++*((_DWORD *)v13 + 6);
      WebCore::DocumentLoader::mainResourceData((uint64_t *)v19, v13);
      uint64_t v12 = v19[0];
      if (*((_DWORD *)v13 + 6) == 1) {
        (*(void (**)(WebCore::DocumentLoader *))(*(void *)v13 + 24))(v13);
      }
      else {
        --*((_DWORD *)v13 + 6);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  CFRelease(*(CFTypeRef *)(v6 + 8));
  if (v12) {
    goto LABEL_19;
  }
LABEL_17:
  int32x2_t v14 = 0;
LABEL_18:
  v19[0] = v14;
  v19[1] = v12;
  v19[2] = 0;
  char v20 = 1;
  uint64_t v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, atomic_uint **))(*(void *)v15 + 16))(v15, v19);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v16);
}

uint64_t WebKit::WebPage::getResourceDataFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t *a5)
{
  {
    uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WTF::URL::URL((uint64_t)v20, a4);
    uint64_t v10 = *(void *)(*(void *)(v8 + 24) + 8);
    if (*(unsigned char *)(v10 + 144)) {
      uint64_t v10 = 0;
    }
    BOOL v11 = *(WebCore::DocumentLoader **)(*(void *)(v10 + 280) + 88);
    if (v11)
    {
      ++*((_DWORD *)v11 + 6);
      WebCore::DocumentLoader::subresource(&v22, v11, (const WTF::URL *)v20);
      if (v22)
      {
        uint64_t v12 = *(void *)(v22 + 312);
        if (v12)
        {
          atomic_fetch_add((atomic_uint *volatile)v12, 1u);
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v12, v9);
        }
        atomic_fetch_add((atomic_uint *volatile)v12, 1u);
        uint64_t v13 = (_DWORD *)v22;
        uint64_t v22 = 0;
        if (v13)
        {
          if (v13[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
          }
          else {
            --v13[2];
          }
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (*((_DWORD *)v11 + 6) == 1) {
        (*(void (**)(WebCore::DocumentLoader *))(*(void *)v11 + 24))(v11);
      }
      else {
        --*((_DWORD *)v11 + 6);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    int32x2_t v14 = v20[0];
    v20[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
    if (v12)
    {
      uint64_t v15 = *(WTF::StringImpl **)(v12 + 48);
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v15 = 0;
LABEL_23:
  v20[0] = v15;
  v20[1] = (WTF::StringImpl *)v12;
  void v20[2] = 0;
  char v21 = 1;
  uint64_t v16 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v16 + 16))(v16, v20);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v17);
}

uint64_t WebKit::WebPage::getWebArchiveOfFrameWithFileName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  LOBYTE(v25[0]) = 0;
  char v26 = 0;
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebFrame::webArchiveData(v8, 0, 0, (uint64_t *)&cf);
    if (cf)
    {
      uint64_t v19 = (WebCore::FragmentedSharedBuffer *)cf;
      WebCore::SharedBuffer::create<__CFData const*>(&v19, v9, &v20);
      BOOL v11 = (unsigned int *)v20;
      uint64_t v12 = *(void *)(v20 + 48);
      uint64_t v20 = 0;
      uint64_t v21 = v12;
      uint64_t v22 = v11;
      char v23 = 0;
      if (v26)
      {
        IPC::SharedBufferReference::operator=(v25, &v21);
        if (v23) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v23);
        }
      }
      else
      {
        uint64_t v22 = 0;
        v25[0] = v12;
        v25[1] = v11;
        void v25[2] = 0;
        char v26 = 1;
      }
      if (v22) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v10);
      }
      uint64_t v13 = (unsigned int *)v20;
      uint64_t v20 = 0;
      if (v13) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
      }
      CFTypeRef v14 = cf;
      CFTypeRef cf = 0;
      if (v14) {
        CFRelease(v14);
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v15 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v15 + 16))(v15, v25);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v16);
}

void WebKit::WebPage::getWebArchiveOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    {
      uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v13);
    }
    uint64_t v4 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a2, *(void *)(a2 + 8));
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (v4)
    {
LABEL_4:
      CFRetain(*(CFTypeRef *)(v4 + 8));
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      WebKit::WebFrame::webArchiveData(v4, 0, 0, (uint64_t *)&v19);
      uint64_t v5 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
LABEL_7:
  uint64_t v18 = v5;
  WebCore::SharedBuffer::create<__CFData const*>(&v18, (const __CFData *)a2, (uint64_t *)&v19);
  uint64_t v7 = (uint64_t)v19;
  uint64_t v8 = *((void *)v19 + 6);
  uint64_t v19 = 0;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v16 = 0;
  char v17 = 1;
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v14);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v10);
  uint64_t v12 = (unsigned int *)v19;
  uint64_t v19 = 0;
  if (!v12)
  {
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v11);
  if (v4) {
LABEL_9:
  }
    CFRelease(*(CFTypeRef *)(v4 + 8));
LABEL_10:
  if (v5) {
    CFRelease(v5);
  }
}

unsigned int *WebKit::WebPage::getAccessibilityTreeData(uint64_t a1, uint64_t *a2)
{
  long long v37 = 0;
  char v38 = 0;
  uint64_t v39 = 0;
  WebCore::Page::accessibilityTreeData((uint64_t *)&v28, *(WebCore::Page **)(a1 + 48));
  if (!(_BYTE)v30) {
    goto LABEL_36;
  }
  uint64_t v3 = CFWriteStreamCreateWithAllocatedBuffers(0, 0);
  CFWriteStreamOpen(v3);
  if (!(_BYTE)v30) {
    goto LABEL_45;
  }
  WTF::String::utf8();
  if (!v34) {
    goto LABEL_46;
  }
  uint64_t v4 = (const UInt8 *)v34 + 16;
  for (CFIndex i = *((void *)v34 + 1); ; CFIndex i = 0)
  {
    CFWriteStreamWrite(v3, v4, i);
    uint64_t v7 = v34;
    char v34 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        WTF::fastFree(v7, v6);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
    if ((_BYTE)v30) {
      break;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    uint64_t v4 = 0;
  }
  WTF::String::utf8();
  if (v34)
  {
    uint64_t v8 = (const UInt8 *)v34 + 16;
    CFIndex v9 = *((void *)v34 + 1);
  }
  else
  {
    CFIndex v9 = 0;
    uint64_t v8 = 0;
  }
  CFWriteStreamWrite(v3, v8, v9);
  BOOL v11 = v34;
  char v34 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1) {
      WTF::fastFree(v11, v10);
    }
    else {
      --*(_DWORD *)v11;
    }
  }
  CFTypeRef v12 = CFWriteStreamCopyProperty(v3, (CFStreamPropertyKey)*MEMORY[0x1E4F1D440]);
  uint64_t v13 = (WebCore::FragmentedSharedBuffer *)WTF::checked_cf_cast<__CFData const*>(v12);
  CFWriteStreamClose(v3);
  int v32 = v13;
  WebCore::SharedBuffer::create<__CFData const*>(&v32, v14, &v33);
  uint64_t v15 = (unsigned int *)v33;
  uint64_t v16 = *(WTF **)(v33 + 48);
  uint64_t v33 = 0;
  char v34 = v16;
  long long v35 = v15;
  char v36 = 0;
  IPC::SharedBufferReference::operator=(&v37, (uint64_t *)&v34);
  if (v36) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v36);
  }
  if (v35) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v17);
  }
  uint64_t v18 = (unsigned int *)v33;
  uint64_t v33 = 0;
  if (v18)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v17);
    if (!v13)
    {
LABEL_22:
      if (!v3) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  else if (!v13)
  {
    goto LABEL_22;
  }
  CFRelease(v13);
  if (v3) {
LABEL_23:
  }
    CFRelease(v3);
LABEL_24:
  if ((_BYTE)v30)
  {
    uint64_t v19 = v29;
    uint64_t v29 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v28;
    uint64_t v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
LABEL_36:
  uint64_t v21 = (WTF::StringImpl *)v38;
  uint64_t v28 = v37;
  if (v38) {
    atomic_fetch_add(v38, 1u);
  }
  uint64_t v29 = v21;
  uint64_t v22 = v39;
  if (v39) {
    atomic_fetch_add(v39, 1u);
  }
  char v30 = v22;
  char v31 = 1;
  uint64_t v23 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v23 + 16))(v23, &v28);
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v24);
  char v26 = (unsigned int *)v39;
  uint64_t v39 = 0;
  if (v26) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v26);
  }
  uint64_t result = (unsigned int *)v38;
  char v38 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v25);
  }
  return result;
}

uint64_t WebKit::WebPage::updateRenderingWithForcedRepaint(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 80))(*(void *)(a1 + 72), a1, a2);
}

IPC::Encoder *WebKit::WebPage::preferencesDidChange(WebKit::WebPage *this, WebKit::WebPreferencesStore *a2, uint64_t a3, char a4)
{
  if (!a4) {
    goto LABEL_12;
  }
  {
    BOOL v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v12 = a3;
  uint64_t result = IPC::Connection::sendSync<Messages::WebProcessProxy::WaitForSharedPreferencesForWebProcessToSync>(v6, &v12, 0, 0, (uint64_t)v13, INFINITY);
  if (v14) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v13[8] == 0;
  }
  int v9 = !v8;
  if (v14 != -1) {
    uint64_t result = (IPC::Encoder *)((uint64_t (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy43WaitForSharedPreferencesForWebProcessToSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(&v12, v13);
  }
  if (v9)
  {
LABEL_12:
    {
      uint64_t v10 = (WTF::StringImpl **)WebKit::BOOLTestRunnerOverridesMap(void)::map;
      if (WebKit::BOOLTestRunnerOverridesMap(void)::map)
      {
        WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2);
      }
    }
    else
    {
      WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
    }
    return (IPC::Encoder *)WebKit::WebPage::updatePreferences(this, a2);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebProcessProxy::WaitForSharedPreferencesForWebProcessToSync>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3825, a3, &v24, &v23);
  BOOL v11 = v23;
  if (a4)
  {
    **((unsigned char **)v23 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, a2);
  IPC::Connection::sendSyncMessage(a1, v24, (uint64_t *)&v23, a4, (uint64_t)&v21, a6);
  if (!v22)
  {
    __int16 v20 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
    if (!HIBYTE(v20))
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
      int v12 = v22;
      if (v22 == -1) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    int v12 = v22;
    if (!v22)
    {
      int v14 = v21;
      uint64_t v21 = 0;
      char v15 = v20;
      *(void *)a5 = v14;
      *(unsigned char *)(a5 + 8) = v15;
      *(_DWORD *)(a5 + 16) = 0;
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v19 = (WebKit::WebPage *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::WebPage::isParentProcessAWebBrowser(v19);
  }
  if (v22 != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)a5 = (_BYTE)v21;
  int v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_10:
  ((void (*)(__int16 *, uint64_t **))off_1EEA00D90[v12])(&v20, &v21);
LABEL_11:
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::WebPage::isParentProcessAWebBrowser(WebKit::WebPage *this, WebKit::AuxiliaryProcess *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = (WebKit *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::isParentProcessAFullWebBrowser(v2, a2);
}

WTF::StringImpl *WebKit::WebPage::adjustSettingsForLockdownMode(WebKit::WebPage *this, WebCore::Settings *a2, const WebKit::WebPreferencesStore *a3)
{
  uint64_t v5 = (WebCore::Settings *)WebCore::Settings::disableUnstableFeaturesForModernWebKit(this);
  WebCore::Settings::disableGlobalUnstableFeaturesForModernWebKit(v5);
  uint64_t v6 = (PAL *)WebCore::Settings::disableFeaturesForLockdownMode(this);
  if (*((unsigned char *)this + 368) != 3)
  {
    char v7 = 1;
    if ((*((unsigned char *)this + 690) & 4) != 0)
    {
      if (PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(v6)) {
        char v7 = 2;
      }
      else {
        char v7 = 1;
      }
    }
    *((unsigned char *)this + 368) = v7;
  }
  uint64_t result = (WTF::StringImpl *)CGEnterLockdownModeForPDF();
  if (a2)
  {
    {
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key, &v18);
    WebCore::SettingsBase::setAllowedMediaContainerTypes(this, (const WTF::String *)&v18);
    uint64_t v10 = v18;
    uint64_t v18 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    {
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key, &v18);
    WebCore::SettingsBase::setAllowedMediaCodecTypes(this, (const WTF::String *)&v18);
    int v12 = v18;
    uint64_t v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    {
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key, &v18);
    WebCore::SettingsBase::setAllowedMediaVideoCodecIDs(this, (const WTF::String *)&v18);
    int v14 = v18;
    uint64_t v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    {
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key, &v18);
    WebCore::SettingsBase::setAllowedMediaAudioCodecIDs(this, (const WTF::String *)&v18);
    uint64_t v16 = v18;
    uint64_t v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    {
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key, &v18);
    WebCore::SettingsBase::setAllowedMediaCaptionFormatTypes(this, (const WTF::String *)&v18);
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebPage::setDataDetectionResults(WebKit::WebPage *this, NSArray *cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v4 = (char *)this + 32;
  uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2068;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v12 = v7;
  IPC::encodeObjectDirectly<NSArray>(v7, cf);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  int v9 = v12;
  int v12 = 0;
  if (!v9)
  {
    if (!cf) {
      return;
    }
LABEL_7:
    CFRelease(cf);
    return;
  }
  IPC::Encoder::~Encoder(v9, v8);
  WTF::fastFree(v10, v11);
  if (cf) {
    goto LABEL_7;
  }
}

void WebKit::WebPage::removeDataDetectedLinks(uint64_t a1, Document *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 160);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  if (v3)
  {
    while (1)
    {
      if (!*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        uint64_t v4 = *(void *)(v3 + 296);
        if (v4)
        {
          *(_DWORD *)(v4 + 28) += 2;
          WebCore::DataDetection::removeDataDetectedLinksInDocument((WebCore::DataDetection *)v4, a2);
          uint64_t v5 = *(const void ***)(v3 + 312);
          if (v5)
          {
            uint64_t v6 = *v5;
            WebCore::Settings *v5 = 0;
            if (v6) {
              CFRelease(v6);
            }
          }
          if (*(_DWORD *)(v4 + 28) == 2)
          {
            if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v4);
            }
          }
          else
          {
            *(_DWORD *)(v4 + 28) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
      uint64_t v7 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v3 + 48), 0);
      if (!v7) {
        break;
      }
      uint64_t v8 = v7;
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      uint64_t v3 = v8;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  CFTypeRef cf = 0;
  uint64_t v9 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v9 + 16))(v9, &cf);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
}

WTF *WebKit::WebPage::detectDataInAllFrames(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(void *)uint64_t v6 = 0;
  uint64_t v13 = v6;
  WebCore::Page::protectedMainFrame(&v12, *(WebCore::Page **)(a1 + 48));
  uint64_t v7 = v12;
  uint64_t v8 = (unsigned int *)(v12 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
  WebKit::detectDataInFrame(v7, a2, a1 + 280, (uint64_t *)&v13, a3);
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  uint64_t result = v13;
  if (v13) {
    return (WTF *)std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v13, v9);
  }
  return result;
}

unsigned int *WebKit::detectDataInFrame(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (!a1 || *(unsigned char *)(a1 + 144))
  {
    uint64_t v11 = *a4;
    uint64_t v12 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v11);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    uint64_t v7 = *a4;
    *a4 = 0;
    *(void *)&long long v14 = *(void *)a3;
    BYTE8(v14) = *(unsigned char *)(a3 + 8);
    uint64_t v8 = *a5;
    *a5 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v9 = &unk_1EEA00B68;
    *(void *)(v9 + 8) = a1;
    *(void *)(v9 + 16) = v7;
    *(_OWORD *)(v9 + 24) = v14;
    *(void *)(v9 + 40) = v8;
    *(unsigned char *)(v9 + 48) = a2;
    uint64_t v15 = v9;
    WebCore::DataDetection::detectContentInFrame();
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(a1 + 8));
  }
}

uint64_t WebKit::WebPage::willDestroyDecodedDataForAllImages(WebKit::WebPage *this)
{
  uint64_t v2 = *((void *)this + 300);
  if (v2) {
    WebKit::RemoteResourceCacheProxy::releaseAllImageResources((WebKit::RemoteRenderingBackendProxy **)(v2 + 72));
  }
  uint64_t result = *((void *)this + 9);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 392);
    return v4();
  }
  return result;
}

uint64_t WebKit::WebPage::inspector(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 186)) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 464);
  if (a2 == 1 && !result)
  {
    uint64_t v4 = (WebKit::WebInspector *)WTF::fastMalloc((WTF *)0x40);
    WebKit::WebInspector::WebInspector(v4, (WebKit::WebPage *)a1);
    uint64_t v5 = *(unsigned int **)(a1 + 464);
    *(void *)(a1 + 464) = v4;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5 + 5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5 + 5);
        (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
      }
    }
    return *(void *)(a1 + 464);
  }
  return result;
}

WebKit::WebInspectorUI *WebKit::WebPage::inspectorUI(WebKit::WebPage *this)
{
  if (*((unsigned char *)this + 186)) {
    return 0;
  }
  uint64_t result = (WebKit::WebInspectorUI *)*((void *)this + 59);
  if (!result)
  {
    uint64_t v3 = (WebKit::WebInspectorUI *)WTF::fastMalloc((WTF *)0x98);
    uint64_t result = WebKit::WebInspectorUI::WebInspectorUI(v3, this);
    uint64_t v4 = (_DWORD *)*((void *)this + 59);
    *((void *)this + 59) = result;
    if (v4)
    {
      if (v4[5] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return (WebKit::WebInspectorUI *)*((void *)this + 59);
      }
      else
      {
        --v4[5];
      }
    }
  }
  return result;
}

WebKit::RemoteWebInspectorUI *WebKit::WebPage::remoteInspectorUI(WebKit::WebPage *this)
{
  if (*((unsigned char *)this + 186)) {
    return 0;
  }
  uint64_t result = (WebKit::RemoteWebInspectorUI *)*((void *)this + 60);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteWebInspectorUI *)WTF::fastMalloc((WTF *)0x78);
    uint64_t result = WebKit::RemoteWebInspectorUI::RemoteWebInspectorUI(v3, this);
    uint64_t v5 = *((void *)this + 60);
    *((void *)this + 60) = result;
    if (v5)
    {
      WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref((_DWORD *)(v5 + 16), v4);
      return (WebKit::RemoteWebInspectorUI *)*((void *)this + 60);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::inspectorFrontendCountChanged(WebKit::WebPage *this, int a2)
{
  int v9 = a2;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1896;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v4, &v9);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebKit::PlaybackSessionManager *WebKit::WebPage::playbackSessionManager(WebKit::WebPage *this)
{
  uint64_t result = (WebKit::PlaybackSessionManager *)*((void *)this + 62);
  if (!result)
  {
    WebKit::PlaybackSessionManager::create(this, &v4);
    uint64_t result = v4;
    uint64_t v3 = (_DWORD *)*((void *)this + 62);
    *((void *)this + 62) = v4;
    if (v3)
    {
      if (v3[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
        return (WebKit::PlaybackSessionManager *)*((void *)this + 62);
      }
      else
      {
        --v3[4];
      }
    }
  }
  return result;
}

WebKit::VideoPresentationManager *WebKit::WebPage::videoPresentationManager(WebKit::WebPage *this)
{
  uint64_t result = (WebKit::VideoPresentationManager *)*((void *)this + 63);
  if (!result)
  {
    uint64_t v3 = WebKit::WebPage::playbackSessionManager(this);
    WebKit::VideoPresentationManager::create(this, v3, &v5);
    uint64_t result = v5;
    uint64_t v4 = (_DWORD *)*((void *)this + 63);
    *((void *)this + 63) = v5;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return (WebKit::VideoPresentationManager *)*((void *)this + 63);
      }
      else
      {
        --v4[4];
      }
    }
  }
  return result;
}

WebKit::WebFullScreenManager *WebKit::WebPage::fullScreenManager(WebKit::WebPage *this)
{
  uint64_t result = (WebKit::WebFullScreenManager *)*((void *)this + 70);
  if (!result)
  {
    uint64_t v3 = (WebKit::WebFullScreenManager *)WTF::fastMalloc((WTF *)0xA8);
    uint64_t result = WebKit::WebFullScreenManager::WebFullScreenManager(v3, (CFTypeRef *)this);
    uint64_t v4 = (_DWORD *)*((void *)this + 70);
    *((void *)this + 70) = result;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return (WebKit::WebFullScreenManager *)*((void *)this + 70);
      }
      else
      {
        --v4[4];
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::startPlayingPredominantVideo(uint64_t a1, uint64_t *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t v8 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    int v9 = *(_DWORD **)(v4 + 288);
    if (v9)
    {
      ++v9[2];
      uint64_t v10 = *(void *)(v4 + 296);
      if (v10)
      {
        *(_DWORD *)(v10 + 28) += 2;
        long long v37 = 0;
        uint64_t v38 = 0;
        WebCore::Document::updateLayoutIgnorePendingStylesheets();
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v11 = &unk_1EEA00E20;
        v11[1] = &v37;
        uint64_t v39 = v11;
        WebCore::Document::forEachMediaElement();
        uint64_t v12 = v39;
        uint64_t v39 = 0;
        if (v12) {
          (*(void (**)(void *))(*v12 + 8))(v12);
        }
        uint64_t v13 = WebCore::ScrollView::unobscuredContentRect();
        unint64_t v15 = v14;
        if ((v14 & 0x80000000) == 0) {
          unsigned int v16 = v14;
        }
        else {
          unsigned int v16 = -(int)v14;
        }
        unint64_t v17 = HIDWORD(v14);
        if ((v14 & 0x8000000000000000) != 0) {
          LODWORD(v17) = -HIDWORD(v14);
        }
        unint64_t v18 = v16 * (unint64_t)v17;
        if ((v18 & 0xFFFFFFFF00000000) != 0 || !HIDWORD(v38)) {
          goto LABEL_43;
        }
        uint64_t v19 = v13;
        __int16 v20 = 0;
        float v21 = (double)v18 * 0.25;
        int v22 = v37;
        uint64_t v23 = 8 * HIDWORD(v38);
        float v24 = 0.0;
        do
        {
          v36.m_location = (IntPoint)WebCore::Element::boundingBoxInRootViewCoordinates(*v22);
          v36.int32x2_t m_size = v25;
          uint64_t v39 = (void *)v19;
          unint64_t v40 = v15;
          WebCore::IntRect::intersect((WebCore::IntRect *)&v39, &v36);
          BOOL v26 = (int)v40 < 1 || SHIDWORD(v40) < 1;
          if (v26
            || (unint64_t v27 = v40 * (unint64_t)HIDWORD(v40), (v27 & 0xFFFFFFFF00000000) != 0)
            || ((float v28 = (float)v27, v24 < (float)v27) ? (v29 = v28 < v21) : (v29 = 1), v29))
          {
            float v28 = v24;
          }
          else
          {
            char v30 = *v22;
            if (*v22) {
              *((_DWORD *)v30 + 7) += 2;
            }
            if (v20)
            {
              if (*((_DWORD *)v20 + 7) == 2)
              {
                if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v20);
                }
              }
              else
              {
                *((_DWORD *)v20 + 7) -= 2;
              }
            }
            __int16 v20 = v30;
          }
          ++v22;
          float v24 = v28;
          v23 -= 8;
        }
        while (v23);
        if (v20)
        {
          char v41 = 0;
          char v42 = 0;
          WebCore::UserGestureIndicator::UserGestureIndicator();
          (*(void (**)(WebCore::Element *))(*(void *)v20 + 1448))(v20);
          uint64_t v31 = *a2;
          *a2 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, 1);
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          MEMORY[0x1997355E0](&v39);
          if (*((_DWORD *)v20 + 7) == 2)
          {
            if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v20);
            }
          }
          else
          {
            *((_DWORD *)v20 + 7) -= 2;
          }
        }
        else
        {
LABEL_43:
          uint64_t v33 = *a2;
          *a2 = 0;
          (*(void (**)(uint64_t, void))(*(void *)v33 + 16))(v33, 0);
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        WTF::Vector<WTF::Ref<WebCore::HTMLMediaElement,WTF::RawPtrTraits<WebCore::HTMLMediaElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLMediaElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v32);
        if (*(_DWORD *)(v10 + 28) == 2)
        {
          if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
        }
        else
        {
          *(_DWORD *)(v10 + 28) -= 2;
        }
      }
      else
      {
        uint64_t v35 = *a2;
        *a2 = 0;
        (*(void (**)(uint64_t, void))(*(void *)v35 + 16))(v35, 0);
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      if (v9[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    else
    {
      uint64_t v34 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v34 + 16))(v34, 0);
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (unsigned int *)v6(v5);
  }
}

uint64_t WebKit::WebPage::setSceneIdentifier(WebCore::AudioSession *a1, uint64_t a2)
{
  uint64_t v4 = WebCore::AudioSession::sharedSession(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 256))(v4, a2);
  uint64_t v5 = *((void *)a1 + 6);

  return MEMORY[0x1F4172640](v5, a2);
}

uint64_t WebKit::WebPage::setAllowsMediaDocumentInlinePlayback(WebKit::WebPage *this)
{
  return MEMORY[0x1F41728B8](*((void *)this + 6));
}

uint64_t WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 *)(result + 2257);
  *(unsigned char *)(result + 2257) = v2 & ~(_BYTE)a2;
  if (*(double *)(*(void *)(*(void *)(result + 48) + 112) + 432) != 0.0 && v2 != 0 && (v2 & ~a2) == 0)
  {
    char v5 = 1;
    return IPC::MessageSender::send<Messages::WebPageProxy::SetAllowsLayoutViewportHeightExpansion>(result + 32, &v5);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion(IPC::Encoder *result, char a2)
{
  int v2 = *((unsigned __int8 *)result + 2257);
  *((unsigned char *)result + 2257) = v2 | a2;
  if (*(double *)(*(void *)(*((void *)result + 6) + 112) + 432) != 0.0
    && v2 == 0
    && (v2 | a2) != 0)
  {
    char v11 = 0;
    char v5 = (char *)result + 32;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*((void *)result + 4) + 56))((uint64_t)result + 32);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2063;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v12 = v7;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v7, &v11);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::addConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t result = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (result)
  {
    return WebKit::WebFrame::addConsoleMessage(result);
  }
  return result;
}

void WebKit::WebPage::enqueueSecurityPolicyViolationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        if (!*(unsigned char *)(v6 + 144))
        {
          uint64_t v7 = (unsigned int *)(v6 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
          uint64_t v8 = *(void *)(v6 + 296);
          if (v8)
          {
            *(_DWORD *)(v8 + 28) += 2;
            WebCore::Document::enqueueSecurityPolicyViolationEvent();
            if (*(_DWORD *)(v8 + 28) == 2)
            {
              if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v8);
              }
            }
            else
            {
              *(_DWORD *)(v8 + 28) -= 2;
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
        }
      }
    }
    int v9 = *(const void **)(v4 + 8);
    CFRelease(v9);
  }
}

void WebKit::WebPage::notifyReportObservers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        if (!*(unsigned char *)(v6 + 144))
        {
          uint64_t v7 = (unsigned int *)(v6 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
          uint64_t v8 = *(void *)(v6 + 296);
          if (v8)
          {
            *(_DWORD *)(v8 + 28) += 2;
            if (!*(void *)(v8 + 3232)) {
              WebCore::Document::ensureReportingScope((WebCore::Document *)v8);
            }
            WebCore::ReportingScope::notifyReportObservers();
            if (*(_DWORD *)(v8 + 28) == 2)
            {
              if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v8);
              }
            }
            else
            {
              *(_DWORD *)(v8 + 28) -= 2;
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
        }
      }
    }
    int v9 = *(const void **)(v4 + 8);
    CFRelease(v9);
  }
}

void WebKit::WebPage::sendReportToEndpoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, WTF::RefCountedBase **a7)
{
  uint64_t v7 = *a7;
  *a7 = 0;
  if (v7)
  {
    {
      float v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v28);
    }
    uint64_t v11 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
    if (v11)
    {
      uint64_t v12 = v11;
      CFRetain(*(CFTypeRef *)(v11 + 8));
      uint64_t v13 = *(void *)(v12 + 24);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          if (!*(unsigned char *)(v14 + 144))
          {
            uint64_t v15 = *((unsigned int *)a5 + 3);
            if (v15)
            {
              uint64_t v16 = *a5;
              uint64_t v17 = 8 * v15;
              do
              {
                MEMORY[0x19972E8B0](v30, a4, v16, 0);
                ++*(_DWORD *)v7;
                WebCore::PingLoader::sendViolationReport();
                BOOL v29 = 0;
                WTF::RefCounted<WebCore::FormData>::deref(v7);
                unint64_t v18 = v30[0];
                v30[0] = 0;
                if (v18)
                {
                  if (*(_DWORD *)v18 == 2) {
                    WTF::StringImpl::destroy(v18, v19);
                  }
                  else {
                    *(_DWORD *)v18 -= 2;
                  }
                }
                v16 += 8;
                v17 -= 8;
              }
              while (v17);
              uint64_t v14 = *(void *)(*(void *)(v12 + 24) + 8);
              if (*(unsigned char *)(v14 + 144)) {
                uint64_t v14 = 0;
              }
            }
            uint64_t v20 = *(void *)(v14 + 296);
            if (v20)
            {
              int v21 = *(_DWORD *)(v20 + 28);
              *(_DWORD *)(v20 + 28) = v21 + 2;
              uint64_t v22 = *(unsigned int *)(a6 + 12);
              if (v22)
              {
                uint64_t v23 = *(const WTF::String **)a6;
                uint64_t v24 = 8 * v22;
                while (1)
                {
                  WebCore::Document::endpointURIForToken((uint64_t *)&v29, (WebCore::Document *)v20, v23);
                  BOOL v26 = v29;
                  if (v29)
                  {
                    if (*((_DWORD *)v29 + 1))
                    {
                      MEMORY[0x19972E8B0](v30, a4, &v29, 0);
                      ++*(_DWORD *)v7;
                      WebCore::PingLoader::sendViolationReport();
                      WTF::RefCounted<WebCore::FormData>::deref(v7);
                      unint64_t v27 = v30[0];
                      v30[0] = 0;
                      if (v27)
                      {
                        if (*(_DWORD *)v27 == 2) {
                          WTF::StringImpl::destroy(v27, v25);
                        }
                        else {
                          *(_DWORD *)v27 -= 2;
                        }
                      }
                      BOOL v26 = v29;
                      BOOL v29 = 0;
                      if (!v26) {
                        goto LABEL_30;
                      }
                    }
                    else
                    {
                      BOOL v29 = 0;
                    }
                    if (*(_DWORD *)v26 == 2) {
                      WTF::StringImpl::destroy(v26, v25);
                    }
                    else {
                      *(_DWORD *)v26 -= 2;
                    }
                  }
LABEL_30:
                  uint64_t v23 = (const WTF::String *)((char *)v23 + 8);
                  v24 -= 8;
                  if (!v24)
                  {
                    int v21 = *(_DWORD *)(v20 + 28) - 2;
                    break;
                  }
                }
              }
              if (v21)
              {
                *(_DWORD *)(v20 + 28) = v21;
              }
              else if ((*(_WORD *)(v20 + 34) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v20);
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  }
}

uint64_t WebKit::WebPage::notificationPermissionRequestManager(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 77);
  if (!result)
  {
    WebKit::NotificationPermissionRequestManager::create(this, &v4);
    uint64_t result = v4;
    uint64_t v3 = (WebKit::NotificationPermissionRequestManager *)*((void *)this + 77);
    *((void *)this + 77) = v4;
    if (v3)
    {
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v3);
      return *((void *)this + 77);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::performDragControllerAction(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  if (!*(void *)(a1 + 48))
  {
    uint64_t v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, void, void, void, void, void))(*(void *)v9 + 16))(v9, 0, 0, 0, 0, 0, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    {
      uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v24);
    }
    uint64_t result = (unsigned int *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a2, *(void *)(a2 + 8));
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *(unsigned int **)(a1 + 88);
    if (!result) {
      return result;
    }
  }
  uint64_t v10 = *((void *)result + 3);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      if (!*(unsigned char *)(v11 + 144))
      {
        uint64_t v12 = (unsigned int *)(v11 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
        if (a3 >= 2)
        {
          if (a3 == 2)
          {
            WebCore::DragController::dragExited();
            uint64_t v14 = *a5;
            *a5 = 0;
            (*(void (**)(uint64_t, void, void, void, void, void, void))(*(void *)v14 + 16))(v14, 0, 0, 0, 0, 0, 0);
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        else
        {
          WebCore::DragController::dragEnteredOrUpdated();
          if (v27)
          {
            if (v27 != 1)
            {
              uint64_t v25 = std::__throw_bad_variant_access[abi:sn180100]();
              return (unsigned int *)WebKit::WebPage::performDragOperation(v25);
            }
            uint64_t v13 = *a5;
            *a5 = 0;
            (*(void (**)(uint64_t, void, void, void, void, void, void))(*(void *)v13 + 16))(v13, 0, 0, 0, 0, 0, 0);
          }
          else
          {
            uint64_t v15 = *(void *)(a1 + 48);
            uint64_t v16 = *(void *)(v15 + 64);
            uint64_t v17 = *(unsigned __int8 *)(v16 + 44);
            if (*(void *)(v16 + 32)) {
              unint64_t v18 = WTF::RefPtr<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>>::unspecifiedBoolTypeInstance;
            }
            else {
              unint64_t v18 = 0;
            }
            BOOL v19 = v18 != 0;
            uint64_t v20 = *(unsigned int *)(v16 + 40);
            uint64_t v21 = WebCore::DragCaretController::caretRectInRootViewCoordinates(*(WebCore::DragCaretController **)(v15 + 56));
            uint64_t v23 = v22;
            WebCore::DragCaretController::editableElementRectInRootViewCoordinates(*(WebCore::DragCaretController **)(*(void *)(a1 + 48) + 56));
            uint64_t v13 = *a5;
            *a5 = 0;
            (*(void (**)(uint64_t, void, uint64_t, BOOL, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v26, v17, v19, v20, v21, v23);
          }
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::performDragOperation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (*a3)
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v9 = 1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)(v9 + 8) = v10;
    *(void *)(v9 + 16) = 0;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(const char ****)(a1 + 712);
  *(void *)(a1 + 712) = v9;
  if (v11) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
  }
  if (*((_DWORD *)a4 + 3))
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *a4;
      if (*(void *)(*a4 + 8 * v12))
      {
        uint64_t v14 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)uint64_t v14 = 1;
        uint64_t v15 = *(void *)(v13 + 8 * v12);
        *(void *)(v13 + 8 * v12) = 0;
        *(void *)(v14 + 8) = v15;
        *(void *)(v14 + 16) = 0;
        uint64_t v23 = (const char ***)v14;
        uint64_t v16 = *(unsigned int *)(a1 + 732);
        if (v16 == *(_DWORD *)(a1 + 728))
        {
          WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>(a1 + 720, (unint64_t)&v23);
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 720);
          *(_DWORD *)uint64_t v14 = 2;
          *(void *)(v17 + 8 * v16) = v14;
          *(_DWORD *)(a1 + 732) = v16 + 1;
        }
        unint64_t v18 = v23;
        uint64_t v23 = 0;
        if (v18) {
          WTF::RefCounted<WebKit::SandboxExtension>::deref(v18);
        }
      }
      ++v12;
    }
    while (v12 < *((unsigned int *)a4 + 3));
  }
  uint64_t v19 = WebCore::DragController::performDragOperation();
  uint64_t v20 = *(const char ****)(a1 + 712);
  *(void *)(a1 + 712) = 0;
  if (v20) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v20);
  }
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 720, 0);
  uint64_t v21 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
  return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
}

unsigned int *WebKit::WebPage::dragEnded(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(WebCore::DragController **)(*(void *)(a1 + 48) + 64);
  int v12 = *((_DWORD *)v11 + 13);
  int v13 = *((_DWORD *)v11 + 14);
  WebCore::DragController::dragEnded(v11);
  if (*(unsigned char *)(a2 + 16))
  {
    {
      IntRect v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v36);
    }
    uint64_t v14 = (WTF::WallTime *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a2, *(void *)(a2 + 8));
    if (!v14) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = *(WTF::WallTime **)(a1 + 88);
    if (!v14)
    {
LABEL_9:
      uint64_t v17 = *a6;
      *a6 = 0;
      LOBYTE(v40) = 0;
      char v43 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v40);
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v15 = *((void *)v14 + 3);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (!v16 || *(unsigned char *)(v16 + 144)) {
    goto LABEL_9;
  }
  uint64_t v19 = (unsigned int *)(v16 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
  uint64_t v20 = *(_DWORD **)(v16 + 288);
  if (v20)
  {
    unint64_t v21 = HIDWORD(a3);
    unint64_t v22 = HIDWORD(a4);
    uint64_t v23 = (v12 + a3);
    uint64_t v24 = (v13 + v21);
    uint64_t v25 = (v12 + a4);
    uint64_t v26 = (v13 + v22);
    ++v20[2];
    int v27 = (WebCore *)WTF::WallTime::now(v14);
    uint64_t v40 = v28;
    __int16 v41 = 5;
    char v42 = 0;
    char v44 = 0;
    __int16 v45 = 0;
    uint64_t v46 = v23 | (v24 << 32);
    uint64_t v47 = v25 | (v26 << 32);
    uint64_t v49 = 0;
    uint64_t v48 = 0;
    uint64_t v50 = 0;
    int v51 = 1;
    BOOL v29 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v27);
    if (v29) {
      *(_DWORD *)v29 += 2;
    }
    char v52 = v29;
    uint64_t v53 = 0;
    __int16 v54 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    WebCore::EventHandler::dragSourceEndedAt();
    v39[0] = v37;
    v39[1] = v38;
    uint64_t v30 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v30 + 16))(v30, v39);
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    *(unsigned char *)(a1 + 795) = 0;
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v31);
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v32);
    uint64_t v34 = v52;
    char v52 = 0;
    uint64_t v19 = (unsigned int *)(v16 + 8);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
    }
    else {
      --v20[2];
    }
  }
  else
  {
    uint64_t v35 = *a6;
    *a6 = 0;
    LOBYTE(v40) = 0;
    char v43 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v35 + 16))(v35, &v40);
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
}

uint64_t WebKit::WebPage::mayPerformUploadDragDestinationAction(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 720;
  if (*((_DWORD *)this + 183))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 90) + 8 * v3);
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v4 + 8));
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v4 + 8), 0);
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 183));
  }

  return WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v1, 0);
}

unsigned int *WebKit::WebPage::didStartDrag(unsigned int *this)
{
  *((unsigned char *)this + 795) = 0;
  uint64_t v1 = *(void *)(*((void *)this + 6) + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    unint64_t v3 = (unsigned int *)(v1 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
    WebCore::EventHandler::didStartDrag(*(WebCore::EventHandler **)(v1 + 624));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return this;
}

unsigned int *WebKit::WebPage::dragCancelled(unsigned int *this)
{
  *((unsigned char *)this + 795) = 0;
  uint64_t v1 = *(void *)(*((void *)this + 6) + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    unint64_t v3 = (unsigned int *)(v1 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
    WebCore::EventHandler::dragCancelled(*(WebCore::EventHandler **)(v1 + 624));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return this;
}

WTF *WebKit::WebPage::removeWebEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  uint64_t v7 = a2;
  BOOL v2 = (uint64_t *)((char *)this + 336);
  unint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 42, &v7);
  uint64_t result = (WTF *)WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::take(v2, v3, &v6);
  if (v6)
  {
    (*(void (**)(void))(**((void **)v6 + 1) + 48))(*((void *)v6 + 1));
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, v5);
    }
  }
  return result;
}

WTF *WebKit::WebPage::unapplyEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = (WTF *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 42, &v5);
  if (result)
  {
    unint64_t v3 = result;
    ++*(_DWORD *)result;
    (*(void (**)(void))(**((void **)result + 1) + 16))(*((void *)result + 1));
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(v3, v4);
  }
  return result;
}

WTF *WebKit::WebPage::reapplyEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t result = (WTF *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 42, &v6);
  if (result)
  {
    uint64_t v4 = result;
    ++*(_DWORD *)result;
    *((unsigned char *)this + 185) = 1;
    (*(void (**)(void))(**((void **)result + 1) + 24))(*((void *)result + 1));
    *((unsigned char *)this + 185) = 0;
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(v4, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::closeCurrentTypingCommand(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v6, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  unint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = *(void *)(result + 296);
    if (v4)
    {
      *(_DWORD *)(v4 + 28) += 2;
      uint64_t v5 = (WebCore::Editor *)WebCore::Document::editor((WebCore::Document *)v4);
      WebCore::Editor::closeTyping(v5);
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

_DWORD *WebKit::WebPage::setActivePopupMenu(WebKit::WebPage *this, WebKit::WebPopupMenu *a2)
{
  if (a2) {
    ++*((_DWORD *)a2 + 2);
  }
  uint64_t result = (_DWORD *)*((void *)this + 72);
  *((void *)this + 72) = a2;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::setActiveColorChooser(WebKit::WebPage *this, WebKit::WebColorChooser *a2)
{
  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
    uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)this + 73);
  *((void *)this + 73) = v4;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WebKit::WebPage::didChooseColor(uint64_t this, const Color *a2)
{
  uint64_t v2 = *(void *)(this + 584);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (*(uint64_t (**)(void, const Color *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), a2);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setActiveDataListSuggestionPicker(WebKit::WebPage *this, WebKit::WebDataListSuggestionPicker *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t result = (unsigned int *)*((void *)this + 74);
  *((void *)this + 74) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

uint64_t WebKit::WebPage::didSelectDataListOption(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(this + 592);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (*(uint64_t (**)(void, const WTF::String *))(**(void **)(v3 + 16) + 32))(*(void *)(v3 + 16), a2);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::didCloseSuggestions(uint64_t this, void *a2)
{
  uint64_t v2 = *(void *)(this + 592);
  *(void *)(this + 592) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      this = (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16));
    }
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2);
      return WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setActiveDateTimeChooser(WebKit::WebPage *this, WebKit::WebDateTimeChooser *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t result = (unsigned int *)*((void *)this + 75);
  *((void *)this + 75) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

uint64_t WebKit::WebPage::didChooseDate(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(this + 600);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        unint64_t v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0x100000000;
      }
      return (*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), v5, v6);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::didEndDateTimePicker(uint64_t this, void *a2)
{
  uint64_t v2 = *(void *)(this + 600);
  *(void *)(this + 600) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      this = (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 24))(*(void *)(v3 + 16));
    }
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2);
      return WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::setTextIndicator(WebKit::WebPage *this, const WebCore::TextIndicatorData *a2)
{
  uint64_t v3 = (char *)this + 32;
  uint64_t v2 = *((void *)this + 4);
  long long v10 = *(_OWORD *)(*((void *)this + 11) + 80);
  v11[0] = &v10;
  v11[1] = a2;
  v11[2] = 1;
  uint64_t v4 = (*(uint64_t (**)(char *))(v2 + 56))((char *)this + 32);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2082;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::TextIndicatorData const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::TextIndicatorData const&,unsigned long long>,0ul,1ul,2ul>(v5, (uint64_t)v11);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v12, 0);
  uint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::findString(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
}

uint64_t WebKit::WebPage::findStringIncludingImages(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findStringIncludingImages(*(void *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::findStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findStringMatches(*(void *)(a1 + 448), a2, a3, a4, a5);
}

WTF *WebKit::WebPage::findRectsForStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findRectsForStringMatches(*(void *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::findTextRangesForStringMatches(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::WebFoundTextRangeController::findTextRangesForStringMatches(*(void *)(a1 + 456), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::replaceFoundTextRangeWithString(WebKit::WebFoundTextRangeController **this, const WebFoundTextRange *a2, const WTF::String *a3)
{
  return WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString(this[57], a2, a3);
}

uint64_t WebKit::WebPage::decorateTextRangeWithStyle(uint64_t a1, uint64_t a2, int a3)
{
  return WebKit::WebFoundTextRangeController::decorateTextRangeWithStyle(*(WebKit::WebFoundTextRangeController **)(a1 + 456), a2, a3);
}

uint64_t WebKit::WebPage::scrollTextRangeToVisible(WebKit::WebFoundTextRangeController **this, const WebFoundTextRange *a2)
{
  return WebKit::WebFoundTextRangeController::scrollTextRangeToVisible(this[57], a2);
}

uint64_t WebKit::WebPage::requestRectForFoundTextRange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebFoundTextRangeController::requestRectForFoundTextRange(*(WebKit::WebFoundTextRangeController **)(a1 + 456), a2, a3);
}

uint64_t WebKit::WebPage::addLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  return WebKit::WebFoundTextRangeController::addLayerForFindOverlay(*(void *)(a1 + 456), a2);
}

uint64_t WebKit::WebPage::removeLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  WebKit::WebFoundTextRangeController::removeLayerForFindOverlay(*(void *)(a1 + 456));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::countStringMatches(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, unsigned int a4, uint64_t *a5)
{
  return WebKit::FindController::countStringMatches(*(void *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::replaceMatches(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v6 = WebKit::FindController::replaceMatches(*(void *)(a1 + 448), a2, a3);
  uint64_t v7 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, v6);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

WebKit::WebPopupMenu *WebKit::WebPage::didChangeSelectedIndexForActivePopupMenu(WebKit::WebPage *this, int a2)
{
  uint64_t result = (WebKit::WebPopupMenu *)*((void *)this + 72);
  if (result)
  {
    WebKit::WebPopupMenu::didChangeSelectedIndex(result, a2);
    uint64_t result = (WebKit::WebPopupMenu *)*((void *)this + 72);
    *((void *)this + 72) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
      {
        uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
        return (WebKit::WebPopupMenu *)v4();
      }
      else
      {
        --*((_DWORD *)result + 2);
      }
    }
  }
  else
  {
    *((void *)this + 72) = 0;
  }
  return result;
}

WebCore::Icon *WebKit::WebPage::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WebCore::Icon *result, int a2, int a3, UInt8 *bytes, CFIndex length)
{
  if (!*((void *)result + 76)) {
    return result;
  }
  uint64_t v5 = result;
  if (length)
  {
    CFDataRef v6 = CFDataCreate(0, bytes, length);
    uint64_t v7 = CGDataProviderCreateWithCFData(v6);
    CGImageRef v11 = CGImageCreateWithPNGDataProvider(v7, 0, 1, kCGRenderingIntentDefault);
    if (!v11) {
      CGImageRef v11 = CGImageCreateWithJPEGDataProvider(v7, 0, 1, kCGRenderingIntentDefault);
    }
    WebCore::Icon::create();
    uint64_t v8 = v10;
    if (v11)
    {
      CFRelease(v11);
      if (!v7)
      {
LABEL_8:
        if (v6) {
          CFRelease(v6);
        }
        goto LABEL_11;
      }
    }
    else if (!v7)
    {
      goto LABEL_8;
    }
    CFRelease(v7);
    goto LABEL_8;
  }
  uint64_t v8 = 0;
LABEL_11:
  WebCore::FileChooser::chooseMediaFiles();
  uint64_t result = (WebCore::Icon *)*((void *)v5 + 76);
  *((void *)v5 + 76) = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(result, v9);
  }
  if (v8) {
    return WTF::RefCounted<WebCore::Icon>::deref(v8);
  }
  return result;
}

WebKit::WebOpenPanelResultListener *WebKit::WebPage::didChooseFilesForOpenPanel(WebKit::WebOpenPanelResultListener *result)
{
  if (*((void *)result + 76))
  {
    uint64_t v1 = result;
    WebCore::FileChooser::chooseFiles();
    uint64_t result = (WebKit::WebOpenPanelResultListener *)*((void *)v1 + 76);
    *((void *)v1 + 76) = 0;
    if (result)
    {
      return WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(result, v2);
    }
  }
  return result;
}

WebKit::WebOpenPanelResultListener *WebKit::WebPage::didCancelForOpenPanel(WebKit::WebOpenPanelResultListener *this)
{
  uint64_t v1 = *((void *)this + 76);
  if (v1)
  {
    uint64_t v2 = this;
    WebCore::FileChooser::cancelFileChoosing(*(WebCore::FileChooser **)(v1 + 16));
    this = (WebKit::WebOpenPanelResultListener *)*((void *)v2 + 76);
    *((void *)v2 + 76) = 0;
    if (this)
    {
      return WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(this, v3);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::extendSandboxForFilesFromOpenPanel(uint64_t a1, const WebKit::SandboxExtensionHandle *a2)
{
  uint64_t result = WebKit::SandboxExtension::consumePermanently((uint64_t)a2, a2);
  if ((result & 1) == 0)
  {
    return WTFLogAlways();
  }
  return result;
}

unsigned int *WebKit::WebPage::didReceiveGeolocationPermissionDecision(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return WebKit::GeolocationPermissionRequestManager::didReceiveGeolocationPermissionDecision(*(uint64_t **)(a1 + 648), a2, a3);
}

_DWORD *WebKit::WebPage::userMediaAccessWasGranted(uint64_t a1, const WebKit::SandboxExtensionHandle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  WebKit::SandboxExtension::consumePermanently(a6, a2);
  uint64_t v13 = *(void *)(a1 + 656);

  return WebKit::UserMediaPermissionRequestManager::userMediaAccessWasGranted(v13, (uint64_t)a2, a3, a4, a5, a7);
}

_DWORD *WebKit::WebPage::userMediaAccessWasDenied(uint64_t a1, uint64_t a2)
{
  return WebKit::UserMediaPermissionRequestManager::userMediaAccessWasDenied(*(void *)(a1 + 656), a2);
}

WebCore::MediaKeySystemRequest *WebKit::WebPage::mediaKeySystemWasDenied(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return WebKit::MediaKeySystemPermissionRequestManager::mediaKeySystemWasDenied(*(void *)(a1 + 664), a2, a3);
}

uint64_t WebKit::WebPage::hasRichlyEditableSelection(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, this[6]);
  uint64_t v2 = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (!v2) {
    return 0;
  }
  if (WebCore::DragCaretController::isContentRichlyEditable(*((WebCore::DragCaretController **)this[6] + 7))) {
    uint64_t isContentRichlyEditable = 1;
  }
  else {
    uint64_t isContentRichlyEditable = WebCore::VisibleSelection::isContentRichlyEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(v3 + 296) + 3096) + 56));
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  return isContentRichlyEditable;
}

uint64_t WebKit::WebPage::changeSpellingToWord(WebCore::Page **this, const WTF::String *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t v2 = WebCore::FocusController::focusedOrMainFrame(v5);
  WebCore::Document::editor(*(WebCore::Document **)(v2 + 296));
  uint64_t result = WebCore::Editor::replaceSelectionWithText();
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4)
    {
      --*(_DWORD *)v4;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::unmarkAllMisspellings(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 48) + 160);
  if (v1)
  {
    do
    {
      if (!*(unsigned char *)(v1 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
        uint64_t v2 = *(void *)(v1 + 296);
        if (v2)
        {
          *(_DWORD *)(v2 + 28) += 2;
          if (!*(void *)(v2 + 1536)) {
            WebCore::Document::ensureMarkers((WebCore::Document *)v2);
          }
          WebCore::DocumentMarkerController::removeMarkers();
          if (*(_DWORD *)(v2 + 28) == 2)
          {
            if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v2);
            }
          }
          else
          {
            *(_DWORD *)(v2 + 28) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      uint64_t v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebKit::WebPage::unmarkAllBadGrammar(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 48) + 160);
  if (v1)
  {
    do
    {
      if (!*(unsigned char *)(v1 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
        uint64_t v2 = *(void *)(v1 + 296);
        if (v2)
        {
          *(_DWORD *)(v2 + 28) += 2;
          if (!*(void *)(v2 + 1536)) {
            WebCore::Document::ensureMarkers((WebCore::Document *)v2);
          }
          WebCore::DocumentMarkerController::removeMarkers();
          if (*(_DWORD *)(v2 + 28) == 2)
          {
            if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v2);
            }
          }
          else
          {
            *(_DWORD *)(v2 + 28) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      uint64_t v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebKit::WebPage::restoreSelectionInFocusedEditableElement(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v6, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v6;
  CFDataRef v6 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = *(void *)(result + 296);
    if (!*(unsigned char *)(*(void *)(v4 + 3096) + 153))
    {
      *(_DWORD *)(v4 + 28) += 2;
      uint64_t v5 = *(WebCore::Node **)(v4 + 1280);
      if (v5)
      {
        *((_DWORD *)v5 + 7) += 2;
        (*(void (**)(WebCore::Node *, void, uint64_t))(*(void *)v5 + 680))(v5, 0, 3);
        if (*((_DWORD *)v5 + 7) == 2)
        {
          if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v5);
          }
        }
        else
        {
          *((_DWORD *)v5 + 7) -= 2;
        }
      }
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

BOOL WebKit::WebPage::mainFrameHasCustomContentProvider(WebKit::WebPage *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 160);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)(v2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v4 = *(void *)(*(void *)(v2 + 280) + 16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 1072))(v4)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  BOOL v6 = *(unsigned __int8 *)(v5 + 50) != 0;
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  return v6;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollOffsetPinningForMainFrame>(uint64_t a1, char **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1902;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF *WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PluginView>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit10PluginViewES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v13);
    unsigned int v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(void *)a1)
    {
      unsigned int v8 = *(_DWORD *)(*(void *)a1 - 12);
      if (v8 > 0x7FFFFFFE) {
        unsigned int v8 = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WTF *)(a2 + 16), a2);
  uint64_t v9 = *(WTF **)(a2 + 16);
  *(_DWORD *)v9 += 2;
  int v12 = v9;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add((uint64_t *)a1, &v12, a3);
  uint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      uint64_t result = (WTF *)WTF::fastFree(result, v10);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  if (*(_DWORD *)v9 == 1) {
    return (WTF *)WTF::fastFree(v9, v10);
  }
  --*(_DWORD *)v9;
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::PluginView>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit10PluginViewES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v11);
    unsigned int v6 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(void *)a1)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)a1 - 12);
      if (v6 > 0x7FFFFFFE) {
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a1 + 12) = 2 * v6;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7 || !*(void *)(v7 + 8)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a2 + 16);
  unsigned int v8 = (WTF **)WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoader const*>((uint64_t *)a1, &v12);
  if (*(void *)a1)
  {
    uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(*(void *)a1 - 4);
    if ((WTF **)v9 != v8) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 0;
LABEL_9:
  if ((WTF **)v9 != v8) {
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, v8);
  }
  return 1;
}

IPC::Encoder *WebKit::WebPage::sendSetWindowFrame(WebKit::WebPage *this, const WebCore::FloatRect *a2)
{
  unsigned int v4 = (char *)this + 32;
  uint64_t v3 = *((void *)this + 4);
  *((unsigned char *)this + 199) = 0;
  uint64_t v5 = (*(uint64_t (**)(char *))(v3 + 56))((char *)this + 32);
  unsigned int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v6 = 2084;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, (float *)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v11, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebPage::setMainFrameIsScrollable(WebKit::WebPage *this, char a2)
{
  *((unsigned char *)this + 188) = a2;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 9) + 176))(*((void *)this + 9));
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 11) + 24) + 8);
  if (*(unsigned char *)(v5 + 144)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 288);
  if (v6)
  {
    ++*(_DWORD *)(v6 + 8);
    uint64_t result = WebCore::LocalFrameView::setCanHaveScrollbars((WebCore::LocalFrameView *)v6);
    *(unsigned char *)(v6 + 315) = a2 ^ 1;
    if (*(_DWORD *)(v6 + 8) == 1)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
      return v7(v6);
    }
    else
    {
      --*(_DWORD *)(v6 + 8);
    }
  }
  return result;
}

BOOL non-virtual thunk to'WebKit::WebPage::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, WTF::StringImpl **a4)
{
  return WebKit::WebPage::didReceiveSyncWebPageMessage(a1 - 16, a2, a3, a4);
}

BOOL WebKit::WebPage::SandboxExtensionTracker::shouldReuseCommittedSandboxExtension(WebKit::WebPage::SandboxExtensionTracker *this, WebKit::WebFrame *a2)
{
  uint64_t v3 = *(void *)(*((void *)a2 + 3) + 8);
  if (*(unsigned char *)(v3 + 144)) {
    uint64_t v3 = 0;
  }
  unsigned int v4 = *(WebCore::FrameLoader **)(v3 + 280);
  WebCore::FrameLoader::loadType(v4);
  if ((WebCore::isReload() & 1) == 0)
  {
    if (*(void *)this) {
      return 0;
    }
    uint64_t v6 = (_DWORD *)*((void *)v4 + 11);
    if (v6)
    {
      int v7 = v6[6];
      v6[6] = v7 + 1;
      unsigned int v8 = (_DWORD *)*((void *)v4 + 12);
      if (!v8)
      {
        BOOL v5 = 0;
        if (v7) {
          goto LABEL_18;
        }
        goto LABEL_22;
      }
      ++v8[6];
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v6 + 218));
      BOOL v5 = 0;
      if (WTF::URL::protocolIs())
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 218));
        if (WTF::URL::protocolIs()) {
          BOOL v5 = 1;
        }
      }
    }
    else
    {
      unsigned int v8 = (_DWORD *)*((void *)v4 + 12);
      if (!v8) {
        return 0;
      }
      BOOL v5 = 0;
      ++v8[6];
    }
    if (v8[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v8 + 24))(v8);
      if (!v6) {
        return v5;
      }
    }
    else
    {
      --v8[6];
      if (!v6) {
        return v5;
      }
    }
    int v7 = v6[6] - 1;
    if (v6[6] != 1)
    {
LABEL_18:
      v6[6] = v7;
      return v5;
    }
LABEL_22:
    (*(void (**)(_DWORD *))(*(void *)v6 + 24))(v6);
    return v5;
  }
  return 1;
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didStartProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3)
      {
        uint64_t v4 = (uint64_t)this;
        BOOL v5 = (const char ****)(this + 2);
        if (this[2]
          && WebKit::WebPage::SandboxExtensionTracker::shouldReuseCommittedSandboxExtension((WebKit::WebPage::SandboxExtensionTracker *)this, a2))
        {
          WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>::operator=((const char ****)v4, v5);
        }
        uint64_t v6 = *(const char ****)v4;
        this = *(const char ****)(v4 + 8);
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = v6;
        if (this)
        {
          this = WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
          uint64_t v6 = *(const char ****)(v4 + 8);
        }
        if (v6)
        {
          int v7 = v6[2];
          v6[2] = (const char **)((char *)v7 + 1);
          if (!v7)
          {
            unsigned int v8 = (WebKit::SandboxExtensionImpl *)v6[1];
            return (const char ***)WebKit::SandboxExtensionImpl::consume(v8);
          }
        }
      }
    }
  }
  return this;
}

const char ****WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>::operator=(const char ****a1, const char ****a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    ++*(_DWORD *)v3;
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v4);
  }
  return a1;
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didCommitProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3)
      {
        uint64_t v4 = this;
        this = (const char ***)this[2];
        if (this)
        {
          WebKit::SandboxExtension::revoke((WebKit::SandboxExtension *)this);
          uint64_t v6 = v4[1];
          this = (const char ***)v4[2];
          v4[1] = 0;
          v4[2] = v6;
          if (this)
          {
            return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
          }
        }
        else
        {
          BOOL v5 = v4[1];
          v4[1] = 0;
          v4[2] = v5;
        }
      }
    }
  }
  return this;
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didFailProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3)
      {
        uint64_t v4 = this;
        this = (const char ***)this[1];
        if (this)
        {
          uint64_t v5 = (uint64_t)this[2] - 1;
          this[2] = (const char **)v5;
          if (v5)
          {
            v4[1] = 0;
          }
          else
          {
            this[1][1] = 0;
            sandbox_extension_release();
            this = (const char ***)v4[1];
            v4[1] = 0;
            if (!this) {
              return this;
            }
          }
          return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::setCustomTextEncodingName(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 48) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return MEMORY[0x1F416C5C8](*(void *)(v2 + 280), a2);
  }
  return this;
}

void WebKit::WebPage::beginPrinting(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  unsigned int v8 = qword_1EB3582D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3582D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "Begin printing.", buf, 2u);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(void *)buf = a1;
  char v24 = *(unsigned char *)(a1 + 680);
  *(unsigned char *)(a1 + 680) = 1;
  {
    uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v9 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v11 = *(void *)(v10 + 24);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12)
      {
        if (!*(unsigned char *)(v12 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
          if (!*(void *)(a1 + 672))
          {
            char v13 = (WebCore::PrintContext *)WTF::fastMalloc((WTF *)0x38);
            WebCore::PrintContext::PrintContext(v13, (WebCore::LocalFrame *)v12);
            uint64_t v14 = *(void *)(a1 + 672);
            *(void *)(a1 + 672) = v13;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
            }
            WebCore::Page::dispatchBeforePrintEvent(*(WebCore::Page **)(a1 + 48));
          }
          WebKit::WebPage::freezeLayerTree(a1, 16);
          WebCore::PrintContext::computedPageSize();
          float v16 = v15;
          float v18 = v17;
          WebCore::PrintContext::begin(*(WebCore::PrintContext **)(a1 + 672), v15, v17);
          uint64_t v19 = *(WebCore::PrintContext **)(a1 + 672);
          if (v19)
          {
            float v22 = 0.0;
            v21.m_location = 0;
            v21.m_size.m_double width = v16;
            v21.m_size.m_double height = v18;
            WebCore::PrintContext::computePageRects(v19, &v21, 0.0, 0.0, *a4, &v22);
          }
          else
          {
            WebKit::WebPage::unfreezeLayerTree(a1, 16);
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)buf);
}

uint64_t WebKit::WebPage::endPrinting(WebKit::WebPage *a1, uint64_t *a2)
{
  uint64_t v4 = qword_1EB3582D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3582D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "End printing.", v7, 2u);
  }
  if (*((unsigned char *)a1 + 680)) {
    *((unsigned char *)a1 + 681) = 1;
  }
  else {
    WebKit::WebPage::endPrintingImmediately(a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WebKit::WebPage::endPrintingImmediately(WebKit::WebPage *this)
{
  if (*((unsigned char *)this + 680))
  {
    BOOL v3 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/WebPage/WebPage.cpp";
    uint64_t v4 = "void WebKit::WebPage::endPrintingImmediately()";
    uint64_t v6 = 6425;
    uint64_t v5 = 427;
    __break(0xC471u);
    return MEMORY[0x1F4172710](v6, v3, v4, v5);
  }
  *((unsigned char *)this + 681) = 0;
  WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 16);
  uint64_t result = *((void *)this + 84);
  if (result)
  {
    *((void *)this + 84) = 0;
    (*(void (**)(uint64_t))(*(void *)result + 24))(result);
    uint64_t v6 = *((void *)this + 6);
    return MEMORY[0x1F4172710](v6, v3, v4, v5);
  }
  return result;
}

void WebKit::WebPage::computePagesForPrinting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v17 = 0;
  uint64_t v18 = a1;
  char v19 = *(unsigned char *)(a1 + 680);
  *(unsigned char *)(a1 + 680) = 1;
  uint64_t v15 = 0x3FF0000000000000;
  float v16 = 0;
  long long v14 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl(a1, a2, a3, (float *)a4, (uint64_t)&v16, (double *)&v15, &v14);
  double v10 = *(double *)&v15;
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **, long long *, double))(*(void *)v11 + 16))(v11, &v16, &v14, v10);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  char v13 = v16;
  if (v16)
  {
    float v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v13, v12);
  }
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v18);
}

void WebKit::WebPage::computePagesForPrintingImpl(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, double *a6, _DWORD *a7)
{
  WebKit::WebPage::beginPrinting(a1, a2, a3, a4);
  if (*(void *)(a1 + 672))
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(void *)&long long v28 = a1;
    BYTE8(v28) = *(unsigned char *)(a1 + 680);
    *(unsigned char *)(a1 + 680) = 1;
    uint64_t v12 = *(void *)(a1 + 672);
    if (v12 + 24 != a5)
    {
      unsigned int v13 = *(_DWORD *)(a5 + 12);
      unsigned int v14 = *(_DWORD *)(v12 + 36);
      if (v13 <= v14)
      {
        if (v14 > *(_DWORD *)(a5 + 8))
        {
          WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a5, 0);
          WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a5, *(unsigned int *)(v12 + 36));
          unsigned int v13 = *(_DWORD *)(a5 + 12);
        }
      }
      else
      {
        *(_DWORD *)(a5 + 12) = v14;
        unsigned int v13 = v14;
      }
      if (v13)
      {
        memmove(*(void **)a5, *(const void **)(v12 + 24), 16 * v13);
        unsigned int v13 = *(_DWORD *)(a5 + 12);
      }
      uint64_t v15 = *(unsigned int *)(v12 + 36);
      if (v13 != v15)
      {
        float v16 = (_OWORD *)(*(void *)a5 + 16 * v13);
        uint64_t v17 = (long long *)(*(void *)(v12 + 24) + 16 * v13);
        uint64_t v18 = 16 * v15 - 16 * v13;
        do
        {
          long long v19 = *v17++;
          *v16++ = v19;
          v18 -= 16;
        }
        while (v18);
        unsigned int v13 = *(_DWORD *)(v12 + 36);
      }
      *(_DWORD *)(a5 + 12) = v13;
    }
    WebCore::PrintContext::computedPageMargin();
    *a7 = v20;
    a7[1] = v21;
    a7[2] = v22;
    a7[3] = v23;
    WebCore::PrintContext::computedPageSize();
    v27[0] = v24;
    v27[1] = v25;
    WebCore::PrintContext::computeAutomaticScaleFactor(*(WebCore::PrintContext **)(a1 + 672), (const WebCore::FloatSize *)v27);
    *a6 = (float)(v26 * *a4);
    WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v28);
  }
  if (!*(_DWORD *)(a5 + 12))
  {
    long long v28 = xmmword_1994F8ED0;
    if (*(_DWORD *)(a5 + 8)) {
      *(_OWORD *)*(void *)a5 = v28;
    }
    else {
      *(_OWORD *)(*(void *)a5 + 16 * *(unsigned int *)(a5 + 12)) = *(_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, 1uLL, (unint64_t)&v28);
    }
    ++*(_DWORD *)(a5 + 12);
  }
}

unsigned int *WebKit::WebPage::drawToPDF(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v6 = *(void *)(*((void *)result + 6) + 160);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    uint64_t v11 = result;
    uint64_t v12 = (unsigned int *)(v6 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
    uint64_t v13 = *(void *)(v6 + 288);
    ++*(_DWORD *)(v13 + 8);
    if (*(unsigned char *)(a4 + 16))
    {
      v41.m_colorAndFlags = *(void *)(a4 + 8);
      WebCore::IntSize::IntSize((WebCore::IntSize *)&v39, (const WebCore::FloatSize *)&v41);
      uint64_t v14 = v39;
    }
    else
    {
      uint64_t v14 = WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v13);
    }
    if (*(unsigned char *)(a4 + 16)) {
      unint64_t v15 = (int)*(float *)a4 | ((unint64_t)(int)*(float *)(a4 + 4) << 32);
    }
    else {
      unint64_t v15 = 0;
    }
    long long v39 = *(_OWORD *)(v13 + 1088);
    int v40 = *(_DWORD *)(v13 + 1104);
    v16.i64[0] = v15;
    v16.i64[1] = v14;
    v17.i64[0] = 0xFE000000FE000000;
    v17.i64[1] = 0xFE000000FE000000;
    int8x16_t v18 = (int8x16_t)vcgtq_s32(v16, v17);
    v19.i64[0] = 0xFE000000FE000000;
    v19.i64[1] = 0xFE000000FE000000;
    v20.i64[0] = 0x8000000080000000;
    v20.i64[1] = 0x8000000080000000;
    int8x16_t v37 = vorrq_s8((int8x16_t)(*(_OWORD *)&v18 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v19, v16), v20, (int8x16_t)vshlq_n_s32(v16, 6uLL)), v18));
    char v38 = 1;
    WebCore::LocalFrameView::setLayoutViewportOverrideRect();
    WebCore::LocalFrameView::paintBehavior((WebCore::LocalFrameView *)v13);
    WebCore::LocalFrameView::setPaintBehavior();
    WebCore::LocalFrameView::baseBackgroundColor((uint64_t *)&v41, (WebCore::LocalFrameView *)v13);
    if (a5)
    {
      WebCore::LocalFrameView::setTransparent((WebCore::LocalFrameView *)v13);
      CFTypeRef cf = (CFTypeRef)0x1104000000000000;
      WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v13, (const Color *)&cf);
      if (((unint64_t)cf & 0x8000000000000) != 0)
      {
        uint64_t v30 = (unsigned int *)((unint64_t)cf & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)cf & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v21);
        }
      }
      WebKit::WebPage::pdfSnapshotAtSize(v11, v15, v14, (int32x2_t)v14, 0, (__CFData **)&cf);
      WebCore::LocalFrameView::setTransparent((WebCore::LocalFrameView *)v13);
      WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v13, &v41);
    }
    else
    {
      WebKit::WebPage::pdfSnapshotAtSize(v11, v15, v14, (int32x2_t)v14, 0, (__CFData **)&cf);
    }
    long long v34 = v39;
    int v35 = v40;
    WebCore::LocalFrameView::setLayoutViewportOverrideRect();
    WebCore::LocalFrameView::setPaintBehavior();
    uint64_t v31 = (WebCore::FragmentedSharedBuffer *)cf;
    WebCore::SharedBuffer::create<__CFData const*>(&v31, v22, (uint64_t *)&v32);
    uint64_t v23 = (uint64_t)v32;
    int v32 = 0;
    uint64_t v33 = (unsigned int *)v23;
    uint64_t v24 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(void *)v24 + 16))(v24, &v33);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    float v26 = v33;
    uint64_t v33 = 0;
    if (v26) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v26, v25);
    }
    int v27 = v32;
    int v32 = 0;
    if (v27) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v25);
    }
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
    if ((v41.m_colorAndFlags & 0x8000000000000) != 0)
    {
      BOOL v29 = (unsigned int *)(v41.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v41.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v25);
      }
    }
    if (*(_DWORD *)(v13 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    else {
      --*(_DWORD *)(v13 + 8);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  return result;
}

void WebKit::WebPage::drawRectToImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const IntRect *a5, int32x2_t *a6, uint64_t *a7)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v29 = a1;
  char v30 = *(unsigned char *)(a1 + 680);
  *(unsigned char *)(a1 + 680) = 1;
  {
    int v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v13 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  uint64_t v14 = v13;
  if (!v13
    || (unint64_t v15 = (WebCore::DestinationColorSpace *)CFRetain(*(CFTypeRef *)(v13 + 8)), (v16 = *(void *)(v14 + 24)) == 0)
    || (uint64_t v17 = *(void *)(v16 + 8)) == 0
    || *(unsigned char *)(v17 + 144))
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    LOBYTE(v27[0]) = 0;
    char v28 = 0;
    char v19 = 1;
    goto LABEL_10;
  }
  atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
  int8x16_t v20 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v15);
  WebKit::WebImage::create(a6, 2, v20, *(void *)(*(void *)(*(void *)(a1 + 48) + 48) + 16), (WebKit::WebImage *)v27);
  uint64_t v18 = *(void *)v27;
  if (*(void *)v27)
  {
    uint64_t v21 = *(void *)(*(void *)v27 + 16);
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
      CFDataRef v22 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(v18 + 16) + 16))(*(void *)(v18 + 16));
      v27[0] = (float)a6->i32[0] / (float)a5->m_size.m_width;
      v27[1] = v27[0];
      (*(void (**)(void))(*(void *)v22 + 624))();
      WebCore::PrintContext::spoolRect(*(WebCore::PrintContext **)(a1 + 672), v22, a5);
      LOBYTE(v27[0]) = 0;
      char v28 = 0;
      WebKit::WebImage::createHandle(v18, 0, v26);
      std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v27, (uint64_t)v26);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
      char v19 = 0;
LABEL_10:
      uint64_t v23 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, float *))(*(void *)v23 + 16))(v23, v27);
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v27);
      if (!v18) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  LOBYTE(v27[0]) = 0;
  char v28 = 0;
  uint64_t v24 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, float *))(*(void *)v24 + 16))(v24, v27);
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v27);
  char v19 = 0;
  if (v18) {
LABEL_11:
  }
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_12:
  if ((v19 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
  }
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v29);
}

void WebKit::WebPage::drawPagesToPDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  CFMutableDataRef v24 = 0;
  uint64_t v25 = a1;
  char v26 = *(unsigned char *)(a1 + 680);
  *(unsigned char *)(a1 + 680) = 1;
  WebKit::WebPage::drawPagesToPDFImpl(a1, a2, a3, a4, a5, a6, &v24);
  CFMutableDataRef v14 = v24;
  uint64_t v21 = v24;
  WebCore::SharedBuffer::create<__CFData *>(&v21, v15, (uint64_t *)&v22);
  uint64_t v16 = (uint64_t)v22;
  CFDataRef v22 = 0;
  uint64_t v23 = (unsigned int *)v16;
  uint64_t v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(void *)v17 + 16))(v17, &v23);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  char v19 = v23;
  uint64_t v23 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v18);
  }
  int8x16_t v20 = v22;
  CFDataRef v22 = 0;
  if (v20)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v18);
    if (!v14) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v14) {
LABEL_5:
  }
    CFRelease(v14);
LABEL_6:
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v25);
}

void WebKit::WebPage::drawPagesToPDFImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, CFMutableDataRef *a7)
{
  LODWORD(v9) = a5;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  {
    long long v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v34);
  }
  uint64_t v12 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  uint64_t v13 = v12;
  if (!v12 || (CFRetain(*(CFTypeRef *)(v12 + 8)), (uint64_t v14 = *(void *)(v13 + 24)) == 0))
  {
    uint64_t v15 = 0;
    goto LABEL_37;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15)
  {
LABEL_37:
    char v16 = 1;
    goto LABEL_8;
  }
  char v16 = 1;
  if (*(unsigned char *)(v15 + 144))
  {
    uint64_t v15 = 0;
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
    char v16 = 0;
  }
LABEL_8:
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  CFMutableDataRef v18 = *a7;
  *a7 = Mutable;
  if (v18) {
    CFRelease(v18);
  }
  if (v15)
  {
    char v19 = CGDataConsumerCreateWithCFData(*a7);
    memset(&mediaBox, 0, 24);
    uint64_t v20 = *(void *)(a1 + 672);
    if (v20 && *(_DWORD *)(v20 + 36))
    {
      WebCore::IntRect::operator CGRect();
      mediaBox.origin.double x = v22;
      mediaBox.origin.double y = v23;
      mediaBox.size.double width = v24;
    }
    else
    {
      CGFloat v25 = *(float *)(a4 + 4);
      double v21 = *(float *)(a4 + 8);
      mediaBox.origin.double x = 0.0;
      mediaBox.origin.double y = 0.0;
      mediaBox.size.double width = v25;
    }
    mediaBox.size.double height = v21;
    CGContextRef v26 = CGPDFContextCreate(v19, &mediaBox, 0);
    int v27 = v26;
    if (*(void *)(a1 + 672))
    {
      CFTypeRef cf = v19;
      char v36 = v16;
      if (a6 + (int)v9 > v9)
      {
        uint64_t v28 = 16 * v9;
        unint64_t v9 = v9;
        uint64_t v29 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        char v30 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        do
        {
          if (v9 >= *(unsigned int *)(*(void *)(a1 + 672) + 36)) {
            break;
          }
          CFDictionaryRef v31 = CFDictionaryCreateMutable(0, 0, v29, v30);
          CGPDFContextBeginPage(v27, v31);
          WebCore::GraphicsContextCG::GraphicsContextCG();
          unint64_t v37 = 0xBF8000003F800000;
          WebCore::GraphicsContextCG::scale((WebCore::GraphicsContextCG *)v39, (const WebCore::FloatSize *)&v37);
          uint64_t v32 = *(void *)(a1 + 672);
          if (v9 < *(unsigned int *)(v32 + 36))
          {
            WebCore::GraphicsContextCG::translate((WebCore::GraphicsContextCG *)v39, 0.0, (float)-*(_DWORD *)(*(void *)(v32 + 24) + v28 + 12));
            uint64_t v33 = *(void *)(a1 + 672);
            if (v9 < *(unsigned int *)(v33 + 36)) {
              continue;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x19938D6F0);
          WebCore::PrintContext::spoolPage((WebCore::PrintContext *)v33, (WebCore::GraphicsContext *)v39, (float)*(int *)(*(void *)(v33 + 24) + v28 + 8));
          CGPDFContextEndPage(v27);
          WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v39);
          if (v31) {
            CFRelease(v31);
          }
          ++v9;
          v28 += 16;
          --a6;
        }
        while (a6);
      }
      CGPDFContextClose(v27);
      if (v27) {
        CFRelease(v27);
      }
      char v16 = v36;
      char v19 = cf;
      if (!cf) {
        goto LABEL_31;
      }
    }
    else if (v26)
    {
      CFRelease(v26);
      if (!v19) {
        goto LABEL_31;
      }
    }
    else if (!v19)
    {
      goto LABEL_31;
    }
    CFRelease(v19);
  }
LABEL_31:
  if ((v16 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  }
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

uint64_t *WebKit::WebPage::addResourceRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this, uint64_t a4)
{
  uint64_t v34 = a2;
  if (!a4) {
    goto LABEL_20;
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)(a4 + 32);
  uint64_t v6 = (uint64_t *)(a1 + 872);
  uint64_t v7 = *(void *)(a1 + 872);
  if (v7
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 872), 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  LODWORD(v35) = -1640531527;
  WORD2(v35) = 0;
  BYTE6(v35) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v35, v33);
  unsigned int v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35) & v8;
  uint64_t v10 = v7 + 24 * v9;
  unint64_t v12 = *(void *)v10;
  unint64_t v11 = *(void *)(v10 + 8);
  if (*(_OWORD *)v10 != 0)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (__PAIR128__(v11, v12) != *(_OWORD *)v33)
    {
      if (v11 == -1) {
        uint64_t v13 = (void *)v10;
      }
      unsigned int v9 = (v9 + v14) & v8;
      uint64_t v10 = v7 + 24 * v9;
      unint64_t v12 = *(void *)v10;
      unint64_t v11 = *(void *)(v10 + 8);
      ++v14;
      if (*(_OWORD *)v10 == 0)
      {
        if (v13)
        {
          void *v13 = 0;
          v13[1] = 0;
          uint64_t v13[2] = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v10 = (uint64_t)v13;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_18;
  }
LABEL_12:
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v33;
  *(_DWORD *)(v10 + 16) = 0;
  uint64_t v15 = *v6;
  if (*v6) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *v6;
  if (*v6) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 872), (long long *)v10);
    goto LABEL_18;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_36;
  }
LABEL_18:
  int v21 = *(_DWORD *)(v10 + 16);
  if (!v21)
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
    CGFloat v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)CGFloat v25 = 2108;
    *((void *)v25 + 1) = v24;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    int v35 = v25;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v25, v33);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, &v35, 0);
    int v27 = v35;
    int v35 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v26);
      WTF::fastFree(v31, v32);
    }
    int v21 = *(_DWORD *)(v10 + 16);
  }
  *(_DWORD *)(v10 + 16) = v21 + 1;
LABEL_20:
  uint64_t result = (uint64_t *)WebCore::ResourceRequestBase::url(this);
  if ((result[1] & 2) != 0)
  {
    if (!*(unsigned char *)(a1 + 2024)
      || (uint64_t result = (uint64_t *)WebCore::UserGestureIndicator::processingUserGesture(0, v23), result))
    {
      uint64_t v28 = (uint64_t *)(a1 + 880);
      uint64_t v29 = *(void *)(a1 + 880);
      if (v29)
      {
        int v30 = *(_DWORD *)(v29 - 12);
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(v28, &v34, (uint64_t)v33);
        if (v30) {
          return result;
        }
      }
      else
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(v28, &v34, (uint64_t)v33);
      }
      LOBYTE(v33[0]) = 1;
      return (uint64_t *)IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>(a1 + 32, (char *)v33);
    }
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2077;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::removeResourceRequest(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  if (a3)
  {
    long long v26 = *(_OWORD *)(a3 + 32);
    uint64_t v4 = a1[109];
    int v5 = *(_DWORD *)(v4 - 8);
    LODWORD(v28) = -1640531527;
    WORD2(v28) = 0;
    BYTE6(v28) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v28, &v26);
    uint64_t v6 = (WTF::WallTime *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
    unsigned int v7 = v6 & v5;
    uint64_t v8 = v4 + 24 * (v6 & v5);
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    if (*(void *)v8 != (void)v26 || v10 != *((void *)&v26 + 1))
    {
      int v16 = 1;
      while (v9 | v10)
      {
        unsigned int v7 = (v7 + v16) & v5;
        uint64_t v8 = v4 + 24 * v7;
        uint64_t v9 = *(void *)v8;
        uint64_t v10 = *(void *)(v8 + 8);
        ++v16;
        if (*(void *)v8 == (void)v26 && v10 == *((void *)&v26 + 1)) {
          goto LABEL_7;
        }
      }
      uint64_t v8 = a1[109] + 24 * *(unsigned int *)(a1[109] - 4);
    }
LABEL_7:
    int v12 = *(_DWORD *)(v8 + 16) - 1;
    *(_DWORD *)(v8 + 16) = v12;
    if (!v12)
    {
      WTF::WallTime::now(v6);
      double v19 = v18;
      uint64_t v20 = (*(uint64_t (**)(void *))(a1[4] + 56))(a1 + 4);
      int v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v21 = 1968;
      *((void *)v21 + 1) = v20;
      *((void *)v21 + 66) = (char *)v21 + 16;
      *((void *)v21 + 67) = 512;
      *((void *)v21 + 68) = 0;
      *((void *)v21 + 70) = 0;
      *((void *)v21 + 69) = 0;
      IPC::Encoder::encodeHeader(v21);
      uint64_t v28 = v21;
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v21, (uint64_t *)&v26);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v21, v19);
      (*(void (**)(void *, IPC::Encoder **, void))(a1[4] + 32))(a1 + 4, &v28, 0);
      CGFloat v23 = v28;
      uint64_t v28 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v22);
        WTF::fastFree(v24, v25);
      }
    }
  }
  uint64_t result = (IPC::Encoder *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 110, &v27);
  uint64_t v14 = a1[110];
  if (v14)
  {
    uint64_t v15 = (IPC::Encoder *)(v14 + 8 * *(unsigned int *)(v14 - 4));
    if (v15 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v15 = 0;
  }
  if (v15 != result)
  {
    uint64_t result = (IPC::Encoder *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 110, result);
    uint64_t v14 = a1[110];
  }
  if (!v14 || !*(_DWORD *)(v14 - 12))
  {
    LOBYTE(v26) = 0;
    return IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>((uint64_t)(a1 + 4), (char *)&v26);
  }
  return result;
}

uint64_t WebKit::WebPage::stopMediaCapture(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::stopMediaCapture();
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebPage::setMayStartMediaWhenInWindow(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 328) != a2)
  {
    *(unsigned char *)(this + 328) = a2;
    if (a2)
    {
      if ((*(_WORD *)(*(void *)(this + 48) + 658) & 0x10) != 0) {
        return WTF::RunLoop::TimerBase::start();
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::runModal(uint64_t this)
{
  if (!*(unsigned char *)(this + 186) && !*(unsigned char *)(this + 794))
  {
    uint64_t v2 = *(void *)(this + 32);
    uint64_t v1 = this + 32;
    *(unsigned char *)(this + 794) = 1;
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(v2 + 56))(this + 32);
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 2054;
    *((void *)v4 + 1) = v3;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v9 = v4;
    (*(void (**)(uint64_t, WTF::RunLoop **, void))(*(void *)v1 + 32))(v1, &v9, 0);
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      uint64_t v6 = (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
    return WTF::RunLoop::run(v6);
  }
  return this;
}

uint64_t WebKit::WebPage::canHandleRequest(WebKit::WebPage *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v3 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
  WTF::URL::protocol(v3);
  if (WebCore::LegacySchemeRegistry::shouldLoadURLSchemeAsEmptyDocument()) {
    return 1;
  }
  WebCore::ResourceRequestBase::url(this);
  if (WTF::URL::protocolIs()) {
    return 1;
  }

  return WebKit::WebPage::platformCanHandleRequest(this, v4);
}

uint64_t WebKit::WebPage::handleAlternativeTextUIResult(WebCore::Page **this, const WTF::String *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  int v5 = v7;
  unsigned int v7 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::handleAlternativeTextUIResult(v6, a2);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::setCompositionForTesting(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v19, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v19);
  uint64_t v8 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v9 = v19;
  double v19 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19938E164);
    }
    --*(_DWORD *)v9;
  }
  if (result)
  {
    uint64_t v10 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)result + 37));
    if (WebCore::Editor::canEdit(v10))
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      if ((a5 & 1) == 0)
      {
        uint64_t v11 = *a2;
        if (*a2) {
          LODWORD(v11) = *(_DWORD *)(v11 + 4);
        }
        v18.m_colorAndFlags = 0x11040000000000FFLL;
        LODWORD(v19) = 0;
        HIDWORD(v19) = v11;
        char v20 = 1;
        WebCore::Color::Color((WebCore::Color *)&v21, &v18);
        char v22 = 0;
        if (HIDWORD(v24) == v24)
        {
          WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>((uint64_t)&v23, (unint64_t)&v19);
        }
        else
        {
          uint64_t v13 = v23 + 32 * HIDWORD(v24);
          uint64_t v14 = v19;
          *(unsigned char *)(v13 + 8) = v20;
          *(void *)uint64_t v13 = v14;
          WebCore::Color::Color();
          *(unsigned char *)(v13 + 24) = v22;
          ++HIDWORD(v24);
        }
        if ((v21 & 0x8000000000000) != 0)
        {
          int v16 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v12);
          }
        }
        if ((v18.m_colorAndFlags & 0x8000000000000) != 0)
        {
          uint64_t v17 = (unsigned int *)(v18.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v18.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v12);
          }
        }
      }
      WebCore::Document::editor(*((WebCore::Document **)v8 + 37));
      WebCore::Editor::setComposition();
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v15);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::hasCompositionForTesting(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, this[6]);
  uint64_t v1 = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v2 = v1;
  if (v1) {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
  }
  uint64_t v3 = v7;
  unsigned int v7 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (!v1) {
    return 0;
  }
  if (*(void *)(WebCore::Document::editor(*(WebCore::Document **)(v1 + 296)) + 32)) {
    uint64_t v4 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v4 = 0;
  }
  BOOL v5 = v4 != 0;
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  return v5;
}

uint64_t WebKit::WebPage::confirmCompositionForTesting(WebCore::Page **this, const WTF::String *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v9, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v9);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  BOOL v5 = v9;
  uint64_t v9 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    if (WebCore::Editor::canEdit(v6))
    {
      if (!*(void *)a2)
      {
        unsigned int v7 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
        WebCore::Editor::confirmComposition(v7);
      }
      uint64_t v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::Editor::confirmComposition(v8, a2);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setTextAsync(WebCore::Page **this, const WTF::String *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v9, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v9[0]);
  uint64_t v5 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296) + 3096)
                                                                                                + 56)))
    {
      MEMORY[0x199738700](v9, v5);
      WebCore::FrameSelection::selectAll(*(WebCore::FrameSelection **)(*(void *)(v5 + 296) + 3096));
      if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
      {
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::insertText();
      }
      else
      {
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::deleteSelectionWithSmartDelete();
      }
      WebCore::UserTypingGestureIndicator::~UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v9);
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    unsigned int v7 = this[116];
    if (!v7) {
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    int v8 = *((_DWORD *)v7 + 7);
    *((_DWORD *)v7 + 7) = v8 + 2;
    if ((*((_WORD *)v7 + 16) & 0x10) != 0
      && *(void *)(*((void *)v7 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      WebCore::HTMLInputElement::setValueForUser(v7, a2);
      int v8 = *((_DWORD *)v7 + 7) - 2;
      if (*((_DWORD *)v7 + 7) != 2) {
        goto LABEL_15;
      }
    }
    else if (v8)
    {
LABEL_15:
      *((_DWORD *)v7 + 7) = v8;
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    if ((*((_WORD *)v7 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(v7);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::insertTextAsync(uint64_t a1, const WTF::String *a2, void *a3, unsigned char *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  WebKit::WebPage::platformWillPerformEditingCommand((WebCore::Page **)a1);
  WebCore::Page::checkedFocusController((uint64_t *)v39, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v39[0]);
  uint64_t v9 = (uint64_t)result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v10 = v39[0];
  v39[0] = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19938EA4CLL);
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    v41[8] = 0;
    v41[24] = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator();
    if (*a3 != -1)
    {
      WebKit::EditingRange::toRange(v9, a4[4], (uint64_t)v40);
      if (v40[32])
      {
        char v11 = *(unsigned char *)(a1 + 2026);
        *(unsigned char *)(a1 + 2026) = a4[1];
        WebCore::VisibleSelection::VisibleSelection();
        WebCore::FrameSelection::setSelection();
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v39);
        *(unsigned char *)(a1 + 2026) = v11;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40);
    }
    if (*a4)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v12 = a1 + 32;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 2036;
      *((void *)v15 + 1) = v14;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 70) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      v39[0] = v15;
      (*(void (**)(uint64_t, WebCore::FocusController **, void))(*(void *)v12 + 32))(v12, v39, 0);
      uint64_t v17 = v39[0];
      v39[0] = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v16);
        WTF::fastFree(v37, v38);
      }
    }
    Color v18 = *(WebCore **)(v9 + 296);
    if (v18 && (double v19 = (WebCore::Node *)*((void *)v18 + 160)) != 0)
    {
      *((_DWORD *)v19 + 7) += 2;
      int v21 = a4[3];
      char v20 = a4 + 3;
      if (v21)
      {
        uint64_t v22 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v22 || (Color v18 = *(WebCore **)(v22 + 96)) == 0) {
          Color v18 = (WebCore *)WebCore::threadGlobalDataSlow(v18);
        }
        if (!*((void *)v18 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v18);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v19 + 48))(v19, v39[0]);
        uint64_t v23 = v39[0];
        v39[0] = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 4) == 1) {
            (*(void (**)(WebCore::FocusController *))(*(void *)v23 + 8))(v23);
          }
          else {
            --*((_DWORD *)v23 + 4);
          }
        }
        char v24 = 0;
        Color v18 = *(WebCore **)(v9 + 296);
      }
      else
      {
        char v24 = 0;
      }
    }
    else
    {
      double v19 = 0;
      char v20 = a4 + 3;
      char v24 = 1;
    }
    if (*(void *)(WebCore::Document::editor(v18) + 32)) {
      CGFloat v25 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    }
    else {
      CGFloat v25 = 0;
    }
    if (v25)
    {
      long long v26 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
      inserted = (WebCore *)WebCore::Editor::confirmComposition(v26, a2);
LABEL_41:
      if (*v20) {
        char v29 = v24;
      }
      else {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        uint64_t v31 = *(void *)(StatusReg + 736);
        if (!v31 || (uint64_t v32 = *(WebCore::ThreadGlobalData **)(v31 + 96)) == 0) {
          uint64_t v32 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(inserted);
        }
        if (!*((void *)v32 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v32);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v19 + 48))(v19, v39[0]);
        uint64_t v33 = v39[0];
        v39[0] = 0;
        if (v33)
        {
          if (*((_DWORD *)v33 + 4) == 1) {
            uint64_t v33 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(void *)v33 + 8))(v33);
          }
          else {
            --*((_DWORD *)v33 + 4);
          }
        }
        uint64_t v34 = *(void *)(StatusReg + 736);
        if (!v34 || (int v35 = *(WebCore::ThreadGlobalData **)(v34 + 96)) == 0) {
          int v35 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v33);
        }
        if (!*((void *)v35 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v35);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v19 + 48))(v19, v39[0]);
        char v36 = v39[0];
        v39[0] = 0;
        if (v36)
        {
          if (*((_DWORD *)v36 + 4) == 1)
          {
            (*(void (**)(WebCore::FocusController *))(*(void *)v36 + 8))(v36);
            if ((v24 & 1) == 0)
            {
LABEL_63:
              if (*((_DWORD *)v19 + 7) == 2)
              {
                if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v19);
                }
              }
              else
              {
                *((_DWORD *)v19 + 7) -= 2;
              }
            }
LABEL_65:
            MEMORY[0x1997355E0](v41);
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
          }
          --*((_DWORD *)v36 + 4);
        }
      }
      if ((v24 & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_65;
    }
    if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
    {
      uint64_t v28 = *(WebCore::Document **)(v9 + 296);
    }
    else
    {
      uint64_t v28 = *(WebCore::Document **)(v9 + 296);
      if (*(unsigned char *)(*((void *)v28 + 387) + 153) == 2)
      {
        WebCore::Document::editor(v28);
        inserted = (WebCore *)WebCore::Editor::deleteWithDirection();
        goto LABEL_41;
      }
    }
    WebCore::Document::editor(v28);
    inserted = (WebCore *)WebCore::Editor::insertText();
    goto LABEL_41;
  }
  return result;
}

uint64_t WebKit::WebPage::hasMarkedText(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v10, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v10);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (v3)
  {
    if (*(void *)(WebCore::Document::editor(*(WebCore::Document **)(v3 + 296)) + 32)) {
      uint64_t v6 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 16))(v7, v6 != 0);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::WebPage::getMarkedRangeAsync(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v11, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v11[0]);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v5 = v11[0];
  v11[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (v3)
  {
    uint64_t v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
    WebCore::Editor::compositionRange((uint64_t *)v11, v6);
    v12[0] = WebKit::EditingRange::fromRange(v4, (uint64_t)v11);
    v12[1] = v7;
    uint64_t v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v12);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *(_OWORD *)char v11 = xmmword_1994F6020;
    uint64_t v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v10 + 16))(v10, v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

uint64_t WebKit::WebPage::getSelectedRangeAsync(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v10, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v10[0]);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v5 = v10[0];
  v10[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (v3)
  {
    WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v10, (WebCore::VisibleSelection *)(*(void *)(*(void *)(v3 + 296) + 3096) + 56));
    v11[0] = WebKit::EditingRange::fromRange(v4, (uint64_t)v10);
    v11[1] = v6;
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v11);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = xmmword_1994F6020;
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v9 + 16))(v9, v10);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::WebPage::characterIndexForPointAsync(uint64_t result, int32x2_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 48) + 160);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = (unsigned int *)(v3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    int8x8_t v8 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
    v18[0] = (uint64_t)vorr_s8((int8x8_t)(*(void *)&v8 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v8));
    WebCore::EventHandler::hitTestResultAtPoint();
    uint64_t v9 = v21;
    if (v21)
    {
      uint64_t v10 = (atomic_uint *)WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v20);
    }
    else
    {
      WebCore::Page::checkedFocusController((uint64_t *)&v19, *(WebCore::Page **)(v6 + 48));
      uint64_t v10 = (atomic_uint *)WebCore::FocusController::focusedOrMainFrame(v19);
    }
    uint64_t v12 = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add(v10 + 2, 1u);
    }
    if (!v9)
    {
      uint64_t v13 = v19;
      double v19 = 0;
      if (v13)
      {
        if (!*(_DWORD *)v13)
        {
          uint64_t result = 286;
          __break(0xC471u);
          return result;
        }
        --*(_DWORD *)v13;
      }
    }
    if (v10)
    {
      v17.m_double x = ((int)(v22 - (v11 & 0xFFFFFFC0) + 32) >> 6) + v22 / 64;
      v17.m_double y = ((int)(v23 - (v11 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64;
      WebCore::LocalFrame::rangeForPoint(v18, (WebCore::LocalFrame *)v10, &v17);
      uint64_t v14 = WebKit::EditingRange::fromRange(v12, (uint64_t)v18);
      uint64_t v15 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v14);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
    }
    else
    {
      uint64_t v16 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    MEMORY[0x199731400](v20);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  return result;
}

unsigned int *WebKit::WebPage::firstRectForCharacterRangeAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v49, *(WebCore::Page **)(a1 + 48));
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(v49);
  uint64_t v6 = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v7 = v49;
  uint64_t v49 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      uint64_t BoundaryPoint = 286;
      __break(0xC471u);
      goto LABEL_71;
    }
    --*(_DWORD *)v7;
  }
  if (!v5)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    *(_OWORD *)char v36 = xmmword_1994F6020;
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **, WebCore::Node **))(*(void *)v12 + 16))(v12, &v49, v36);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WebKit::EditingRange::toRange(v5, 0, (uint64_t)&v49);
  if (!v51)
  {
    v36[0] = 0;
    v36[1] = 0;
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::Node **, uint64_t))(*(void *)v14 + 16))(v14, v36, a2);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    goto LABEL_68;
  }
  int8x8_t v8 = *(WebCore::ScrollView **)(v6 + 288);
  if (v8) {
    ++*((_DWORD *)v8 + 2);
  }
  uint64_t BoundaryPoint = WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
  if (!v51) {
    goto LABEL_71;
  }
  v36[0] = (WebCore::Node *)WebCore::Editor::firstRectForRange();
  v36[1] = v10;
  uint64_t BoundaryPoint = WebCore::ScrollView::contentsToWindow(v8, (const WebCore::IntRect *)v36);
  v48[0] = BoundaryPoint;
  v48[1] = v11;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1) {
      uint64_t BoundaryPoint = (*(uint64_t (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
    }
    else {
      --*((_DWORD *)v8 + 2);
    }
  }
  if (!v51) {
    goto LABEL_71;
  }
  WebCore::makeContainerOffsetPosition();
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::endOfLine();
  uint64_t BoundaryPoint = (uint64_t)v36[0];
  v36[0] = 0;
  if (BoundaryPoint)
  {
    if (*(_DWORD *)(BoundaryPoint + 28) == 2) {
      goto LABEL_72;
    }
    *(_DWORD *)(BoundaryPoint + 28) -= 2;
  }
  while (1)
  {
    if (!v43)
    {
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v21 = v36[0];
      v36[0] = 0;
      int v22 = v43;
      char v43 = v21;
      if (!v22) {
        goto LABEL_45;
      }
      if (*((_DWORD *)v22 + 7) != 2)
      {
        *((_DWORD *)v22 + 7) -= 2;
LABEL_45:
        int v44 = (int)v36[1];
        char v45 = BYTE4(v36[1]);
        char v46 = v37;
        goto LABEL_46;
      }
      if ((*((_WORD *)v22 + 17) & 0x400) != 0) {
        goto LABEL_45;
      }
      goto LABEL_81;
    }
    if (v46)
    {
      WebCore::VisiblePosition::VisiblePosition();
      int v15 = WebCore::inSameLine();
      uint64_t v16 = v36[0];
      v36[0] = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 7) == 2)
        {
          if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v16);
          }
        }
        else
        {
          *((_DWORD *)v16 + 7) -= 2;
        }
      }
      if (v15)
      {
        WebCore::positionOfNextBoundaryOfGranularity();
        IntPoint v17 = v36[0];
        if (v36[0]) {
          Color v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        }
        else {
          Color v18 = 0;
        }
        if (!v18 || (v19 = WebCore::documentOrder(), IntPoint v17 = v36[0], v19 == 129) || ((char)v19 & 0x80000000) == 0)
        {
LABEL_39:
          v36[0] = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 7) == 2)
            {
              if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v17);
              }
            }
            else
            {
              *((_DWORD *)v17 + 7) -= 2;
            }
          }
          goto LABEL_46;
        }
        if (v36[0]) {
          *((_DWORD *)v36[0] + 7) += 2;
        }
        char v20 = v43;
        char v43 = v17;
        if (!v20)
        {
LABEL_38:
          int v44 = (int)v36[1];
          char v45 = BYTE4(v36[1]);
          char v46 = v37;
          goto LABEL_39;
        }
        if (*((_DWORD *)v20 + 7) != 2)
        {
          *((_DWORD *)v20 + 7) -= 2;
          goto LABEL_38;
        }
        if ((*((_WORD *)v20 + 17) & 0x400) != 0) {
          goto LABEL_38;
        }
        int v22 = v20;
LABEL_81:
        WebCore::Node::removedLastRef(v22);
        IntPoint v17 = v36[0];
        goto LABEL_38;
      }
    }
LABEL_46:
    uint64_t BoundaryPoint = WebCore::makeBoundaryPoint();
    if (!v42)
    {
      v36[0] = 0;
      v36[1] = 0;
      uint64_t v33 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WebCore::Node **, uint64_t))(*(void *)v33 + 16))(v33, v36, a2);
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      goto LABEL_60;
    }
    if (v51) {
      break;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    if ((*(_WORD *)(BoundaryPoint + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)BoundaryPoint);
    }
  }
  int v23 = v49;
  int v24 = v50;
  *((_DWORD *)v49 + 7) += 2;
  int v56 = v24;
  uint64_t v55 = 0;
  uint64_t v57 = v23;
  int v58 = v24;
  char v59 = 1;
  uint64_t v25 = v40;
  uint64_t v40 = 0;
  uint64_t v52 = v25;
  int v53 = v41;
  char v54 = 1;
  WebCore::SimpleRange::SimpleRange();
  v36[0] = v60;
  LODWORD(v36[1]) = v61;
  uint64_t v26 = v62;
  int v60 = 0;
  uint64_t v62 = 0;
  uint64_t v37 = v26;
  int v38 = v63;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v62);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v60);
  char v39 = 1;
  if (v54) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v52);
  }
  if (v59) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v57);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v55);
  unint64_t v27 = WebKit::EditingRange::fromRange(v6, (uint64_t)v36);
  uint64_t v29 = v28;
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
  int v30 = *(WebCore::Node **)a2;
  uint64_t v31 = (char *)(*(void *)(a2 + 8) + *(void *)a2);
  if (v27 > *(void *)a2) {
    int v30 = (WebCore::Node *)v27;
  }
  if (v31 < (char *)v30) {
    int v30 = (WebCore::Node *)(*(void *)(a2 + 8) + *(void *)a2);
  }
  if (v31 >= (char *)v30 + v29) {
    uint64_t v31 = (char *)v30 + v29;
  }
  v36[0] = v30;
  v36[1] = (WebCore::Node *)(v31 - (char *)v30);
  uint64_t v32 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *, WebCore::Node **))(*(void *)v32 + 16))(v32, v48, v36);
  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
LABEL_60:
  if (v42) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
  }
  uint64_t v34 = v43;
  char v43 = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 7) == 2)
    {
      if ((*((_WORD *)v34 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v34);
      }
    }
    else
    {
      *((_DWORD *)v34 + 7) -= 2;
    }
  }
  int v35 = v47;
  uint64_t v47 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 7) == 2)
    {
      if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v35);
      }
    }
    else
    {
      *((_DWORD *)v35 + 7) -= 2;
    }
  }
LABEL_68:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

uint64_t WebKit::WebPage::setCompositionAsync(WebCore::Page **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  WebKit::WebPage::platformWillPerformEditingCommand(a1);
  WebCore::Page::checkedFocusController((uint64_t *)v12, a1[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v12[0]);
  uint64_t v10 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v11 = v12[0];
  v12[0] = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296) + 3096)
                                                                                                + 56)))
    {
      if (*a7 != -1)
      {
        WebKit::EditingRange::toRange(v10, 0, (uint64_t)v13);
        if (v13[32])
        {
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13);
      }
      WebCore::Document::editor(*(WebCore::Document **)(v10 + 296));
      WebCore::Editor::setComposition();
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setWritingSuggestion(WebCore::Page **this, const WTF::String *a2, const EditingRange *a3)
{
  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController((uint64_t *)v8, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v8[0]);
  uint64_t v6 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v7 = v8[0];
  v8[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    *(EditingRange *)int8x8_t v8 = *a3;
    WebCore::Editor::setWritingSuggestion();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::confirmCompositionAsync(WebCore::Page **this)
{
  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController((uint64_t *)&v6, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  BOOL v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    uint64_t v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::confirmComposition(v5);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::sendEditorStateUpdate(WebKit::WebPage *this)
{
  v17[17] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 949) = 1;
  WebCore::Page::checkedFocusController((uint64_t *)v14, *((WebCore::Page **)this + 6));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v14[0]);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  BOOL v4 = v14[0];
  v14[0] = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x19938FCECLL);
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    if (!*(unsigned char *)(WebCore::Document::editor(*((WebCore::Document **)result + 37)) + 88))
    {
      uint64_t v5 = *((void *)v3 + 37);
      if (v5)
      {
        if (*(void *)(v5 + 1984) && !*(unsigned char *)(v5 + 3459))
        {
          *((unsigned char *)this + 948) = 0;
          WebKit::WebPage::editorState((uint64_t)this, 0, (uint64_t)v14);
          uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
          uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v7 = 1961;
          *((void *)v7 + 1) = v6;
          *((void *)v7 + 66) = (char *)v7 + 16;
          *((void *)v7 + 67) = 512;
          *((void *)v7 + 68) = 0;
          *((void *)v7 + 70) = 0;
          *((void *)v7 + 69) = 0;
          IPC::Encoder::encodeHeader(v7);
          uint64_t v13 = v7;
          IPC::ArgumentCoder<WebKit::EditorState,void>::encode(v7, (uint64_t)v14);
          (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 4) + 32))((char *)this + 32, &v13, 0);
          uint64_t v9 = v13;
          uint64_t v13 = 0;
          if (v9)
          {
            IPC::Encoder::~Encoder(v9, v8);
            WTF::fastFree(v11, v12);
          }
          if (!v16) {
            WebKit::WebPage::scheduleFullEditorStateUpdate(this);
          }
          std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v8);
          if (v16) {
            WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v15, v10);
          }
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  BOOL v4 = v5;
  uint64_t v5 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    if (!*(unsigned char *)(WebCore::Document::editor(*(WebCore::Document **)(result + 296)) + 488) && !*((unsigned char *)this + 2026)) {
      WebKit::WebPage::scheduleFullEditorStateUpdate(this);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::didChangeSelection(WebKit::WebPage *this, atomic_uint *a2)
{
  WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)this);
  uint64_t result = WebCore::Page::updateStateForSelectedSuggestionIfNeeded(*((WebCore::Page **)this + 6));
  int v5 = *((unsigned __int8 *)this + 1672);
  *((unsigned char *)this + 1672) = 0;
  if (v5)
  {
    CFRetain(*((CFTypeRef *)this + 1));
    atomic_fetch_add(a2 + 2, 1u);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EEA00E48;
    v6[1] = this;
    v6[2] = a2;
    uint64_t v7 = (uint64_t)v6;
    WTF::callOnMainRunLoop();
    uint64_t result = v7;
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return result;
}

void WebKit::WebPage::elementDidRefocus(WebKit::WebPage *a1, WebKit *a2, uint64_t a3)
{
  WebKit::WebPage::elementDidFocus(a1, a2, a3);
  if (*((unsigned char *)a1 + 920))
  {
    WebKit::WebPage::scheduleFullEditorStateUpdate(a1);
  }
}

void WebKit::WebPage::elementDidFocus(WebKit::WebPage *this, WebKit *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 201);
  *((void *)this + 201) = v6 & 0xFDFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1576));
  }
  uint64_t v7 = *((void *)this + 116);
  if (((WebKit *)v7 == a2 || *((WebKit **)this + 117) == a2) && *((unsigned char *)this + 1248))
  {
    WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded((uint64_t)this, a2);
    *((_DWORD *)a2 + 7) += 2;
    uint64_t v8 = *((void *)this + 116);
    *((void *)this + 116) = a2;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 28) == 2)
      {
        if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
      }
      else
      {
        *(_DWORD *)(v8 + 28) -= 2;
      }
    }
    uint64_t v9 = *((void *)this + 117);
    *((void *)this + 117) = 0;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 28) == 2)
      {
        if ((*(_WORD *)(v9 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
      }
      else
      {
        *(_DWORD *)(v9 + 28) -= 2;
      }
    }
    return;
  }
  if ((*((_WORD *)a2 + 16) & 0x10) == 0
    || *(void *)(*((void *)a2 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB6B08] + 24))
  {
    if (!WebKit::isTextFormControlOrEditableContent(a2, a2)) {
      return;
    }
    uint64_t v7 = *((void *)this + 116);
  }
  *((_DWORD *)a2 + 7) += 2;
  *((void *)this + 116) = a2;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 28) == 2)
    {
      if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      *(_DWORD *)(v7 + 28) -= 2;
    }
  }
  *((unsigned char *)this + 944) = 0;
  uint64_t v10 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 2032);
  if (!v10) {
    uint64_t v10 = WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((void *)a2 + 6) + 8));
  }
  if (*(void *)(v10 + 56))
  {
    uint64_t v11 = *(WebCore::FullscreenManager **)(*(void *)(*((void *)a2 + 6) + 8) + 2032);
    if (!v11) {
      uint64_t v11 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((void *)a2 + 6) + 8));
    }
    WebCore::FullscreenManager::cancelFullscreen(v11);
  }
  if ((WebKit *)v7 != a2 && (*((unsigned char *)this + 920) || *((unsigned char *)this + 1484))) {
    *((unsigned char *)this + 1672) = 1;
  }
  WebKit::WebPage::focusedElementInformation((WebCore::Page **)this, v36);
  if (v37)
  {
    uint64_t v34 = 0;
    uint64_t v12 = *((void *)this + 44);
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v35);
    uint64_t v13 = v35;
    (*(void (**)(uint64_t, WebKit::WebPage *, WebKit *, IPC::Encoder *, void, void **))(*(void *)v12 + 96))(v12, this, a2, v35, *((unsigned __int8 *)this + 920), &v34);
    if (v13) {
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
    if (v37)
    {
      v36[368] = *(unsigned char *)(a3 + 5);
      char v14 = *((unsigned char *)this + 920);
      if (*((void *)this + 117)) {
        uint64_t v15 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::unspecifiedBoolTypeInstance;
      }
      else {
        uint64_t v15 = 0;
      }
      {
        uint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v31);
      }
      int v35 = (IPC::Encoder *)&unk_1EE9E6F68;
      WebKit::UserData::transform(v34, (uint64_t)&v35, &v32);
      uint64_t v16 = v32;
      if (v32) {
        CFRetain(*(CFTypeRef *)(v32 + 8));
      }
      BOOL v17 = v15 != 0;
      uint64_t v33 = v16;
      uint64_t v18 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
      unsigned __int8 v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned __int8 v19 = 1963;
      *((void *)v19 + 1) = v18;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      int v35 = v19;
      IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode(v19, (uint64_t)v36);
      char v20 = (unsigned char *)IPC::Encoder::grow(v19, 1uLL, 1);
      if (v21)
      {
        *char v20 = v14;
        int v22 = (unsigned char *)IPC::Encoder::grow(v19, 1uLL, 1);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1993903ACLL);
        }
        *int v22 = v17;
        IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v19, *((_WORD *)this + 461));
        IPC::ArgumentCoder<WebKit::UserData,void>::encode(v19, &v33);
        (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 4) + 32))((char *)this + 32, &v35, 0);
        uint64_t v25 = v35;
        int v35 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v24);
          WTF::fastFree(v29, v30);
          if (!v16) {
            goto LABEL_44;
          }
        }
        else if (!v16)
        {
LABEL_44:
          uint64_t v26 = v32;
          uint64_t v32 = 0;
          if (v26) {
            CFRelease(*(CFTypeRef *)(v26 + 8));
          }
          uint64_t v27 = *((void *)this + 117);
          *((void *)this + 117) = 0;
          if (v27)
          {
            if (*(_DWORD *)(v27 + 28) == 2)
            {
              if ((*(_WORD *)(v27 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v27);
              }
            }
            else
            {
              *(_DWORD *)(v27 + 28) -= 2;
            }
          }
          uint64_t v28 = (CFTypeRef *)v34;
          uint64_t v34 = 0;
          if (v28) {
            CFRelease(v28[1]);
          }
          if (v37) {
            WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v36, v24);
          }
          return;
        }
        CFRelease(*(CFTypeRef *)(v16 + 8));
        goto LABEL_44;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x19939038CLL);
  }
}

BOOL WebKit::isTextFormControlOrEditableContent(WebKit *this, const WebCore::Element *a2)
{
  return ((*(uint64_t (**)(WebKit *, const WebCore::Element *))(*(void *)this + 872))(this, a2) & 1) != 0
      || WebCore::Node::computeEditability() != 0;
}

uint64_t WebKit::WebPage::elementDidBlur(uint64_t this, WebCore::Element *a2)
{
  if (*(WebCore::Element **)(this + 928) == a2)
  {
    uint64_t v2 = this;
    *(void *)(this + 928) = 0;
    uint64_t v3 = *(void *)(this + 936);
    *(void *)(v2 + 936) = a2;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 28) == 2)
      {
        if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
      }
      else
      {
        *(_DWORD *)(v3 + 28) -= 2;
      }
    }
    CFRetain(*(CFTypeRef *)(v2 + 8));
    BOOL v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *BOOL v4 = &unk_1EEA00E70;
    v4[1] = v2;
    uint64_t v5 = (uint64_t)v4;
    WTF::callOnMainRunLoop();
    this = v5;
    if (v5) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(unsigned char *)(v2 + 944) = 0;
    *(unsigned char *)(v2 + 1672) = 0;
  }
  return this;
}

uint64_t WebKit::WebPage::focusedElementDidChangeInputMode(uint64_t result, WebKit *this, char a3)
{
  if (*(WebKit **)(result + 928) == this)
  {
    uint64_t v4 = result;
    uint64_t result = WebKit::isTextFormControlOrEditableContent(this, this);
    if (result)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      uint64_t v5 = v4 + 32;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 1973;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      uint64_t v12 = v8;
      IPC::ArgumentCoder<WebCore::InputMode,void>::encode<IPC::Encoder>(v8, a3);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        return WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didEndUserTriggeredSelectionChanges(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    if (!*(unsigned char *)(WebCore::Document::editor(*(WebCore::Document **)(result + 296)) + 88)) {
      WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)this);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::discardedComposition(WebKit::WebPage *this, const WebCore::Document *a2)
{
  uint64_t v4 = (char *)this + 32;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1881;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v11, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  if (*((void *)a2 + 248))
  {
    if (!*((unsigned char *)a2 + 3459)) {
      return (IPC::Encoder *)WebKit::WebPage::sendEditorStateUpdate(this);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::canceledComposition(WebKit::WebPage *this)
{
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1881;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v8, v9);
  }
  return WebKit::WebPage::sendEditorStateUpdate(this);
}

uint64_t WebKit::WebPage::navigateServiceWorkerClient(WebCore::Document *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  uint64_t v7 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v6, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    *(_DWORD *)(v7 + 28) += 2;
    uint64_t result = WebCore::Document::navigateFromServiceWorker();
    if (*(_DWORD *)(v8 + 28) == 2)
    {
      if ((*(_WORD *)(v8 + 34) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 28) -= 2;
    }
  }
  else
  {
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
  return result;
}

uint64_t WebKit::WebPage::setAlwaysShowsHorizontalScroller(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 189) == a2) {
    return this;
  }
  *(unsigned char *)(this + 189) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*(void *)(this + 48) + 160) + 56))(*(void *)(*(void *)(this + 48) + 160));
  uint64_t v4 = (_DWORD *)v3;
  if (v3)
  {
    ++*(_DWORD *)(v3 + 8);
    if (a2)
    {
LABEL_10:
      this = WebCore::ScrollView::setHorizontalScrollbarMode();
      if (v4[2] == 1)
      {
        uint64_t v5 = *(uint64_t (**)(_DWORD *))(*(void *)v4 + 8);
        return v5(v4);
      }
      else
      {
        --v4[2];
      }
      return this;
    }
LABEL_9:
    *(unsigned char *)(v3 + 313) = 0;
    goto LABEL_10;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_9;
  }

  return WebCore::ScrollView::setHorizontalScrollbarMode();
}

uint64_t WebCore::ScrollView::setHorizontalScrollbarMode()
{
  return WebCore::ScrollView::setScrollbarModes();
}

uint64_t WebKit::WebPage::setAlwaysShowsVerticalScroller(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 190) == a2) {
    return this;
  }
  *(unsigned char *)(this + 190) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*(void *)(this + 48) + 160) + 56))(*(void *)(*(void *)(this + 48) + 160));
  uint64_t v4 = (_DWORD *)v3;
  if (v3)
  {
    ++*(_DWORD *)(v3 + 8);
    if (a2)
    {
LABEL_10:
      this = WebCore::ScrollView::setVerticalScrollbarMode();
      if (v4[2] == 1)
      {
        uint64_t v5 = *(uint64_t (**)(_DWORD *))(*(void *)v4 + 8);
        return v5(v4);
      }
      else
      {
        --v4[2];
      }
      return this;
    }
LABEL_9:
    *(unsigned char *)(v3 + 314) = 0;
    goto LABEL_10;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_9;
  }

  return WebCore::ScrollView::setVerticalScrollbarMode();
}

uint64_t WebCore::ScrollView::setVerticalScrollbarMode()
{
  return WebCore::ScrollView::setScrollbarModes();
}

WebKit::WebPage *WebKit::WebPage::setSelectTrailingWhitespaceEnabled(WebKit::WebPage *this, int a2)
{
  uint64_t v2 = *(void **)(*((void *)this + 6) + 112);
  unint64_t v3 = v2[87];
  if (((v3 >> 23) & 1) != a2)
  {
    uint64_t v4 = v2 + 83;
    uint64_t v5 = v2[90];
    uint64_t v6 = v2[89];
    uint64_t v7 = v2[88];
    uint64_t v8 = v2[86];
    uint64_t v9 = v2[85];
    uint64_t v10 = v2[84];
    uint64_t v11 = v2[83];
    uint64_t v12 = 0x800000;
    if (!a2) {
      uint64_t v12 = 0;
    }
    *uint64_t v4 = v11;
    v4[1] = v10;
    v4[2] = v9;
    v4[3] = v8;
    unsigned char v4[4] = v3 & 0xFFFFFFFFFF7FFFFFLL | v12;
    v4[5] = v7;
    v4[6] = v6;
    v4[7] = v5;
    return (WebKit::WebPage *)WebKit::WebPage::setSmartInsertDeleteEnabled(this, a2 != 1);
  }
  return this;
}

uint64_t WebKit::WebPage::canShowResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v4 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType(a2);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v5 = &unk_1EEA00E98;
  v5[1] = this;
  v5[2] = a2;
  uint64_t v8 = v5;
  uint64_t canShowMIMEType = WebKit::WebPage::canShowMIMEType((uint64_t)this, v4, (uint64_t)&v8);
  (*(void (**)(void *))(*v5 + 8))(v5);
  return canShowMIMEType;
}

uint64_t WebKit::WebPage::canShowMIMEType(uint64_t a1, WebCore::MIMETypeRegistry *this, uint64_t a3)
{
  if ((WebCore::MIMETypeRegistry::canShowMIMEType(this, this) & 1) != 0
    || *(void *)this
    && (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)(a1 + 1784), (WTF::ASCIICaseInsensitiveHash **)this) & 1) != 0)
  {
    return 1;
  }
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)a3 + 16);

  return v7();
}

uint64_t WebKit::WebPage::canShowMIMEType(WebKit::WebPage *this, const WTF::String *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EEA00EC0;
  v4[1] = this;
  uint64_t v7 = v4;
  uint64_t canShowMIMEType = WebKit::WebPage::canShowMIMEType((uint64_t)this, a2, (uint64_t)&v7);
  (*(void (**)(void *))(*v4 + 8))(v4);
  return canShowMIMEType;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v21;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_33:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

_DWORD *WebKit::WebPage::didFinishCheckingText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 120);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 120), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v7);
  uint64_t result = v7;
  if (v7)
  {
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v7 + 24))(v7, a3);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::didCancelCheckingText(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 120);
  unint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 120), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  uint64_t result = v5;
  if (v5)
  {
    (*(void (**)(_DWORD *))(*(void *)v5 + 32))(v5);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

void WebKit::WebPage::willReplaceMultipartContent(WebKit::WebPage *this, const WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3)
      {
        *((float *)this + 378) = (*(float (**)(void))(**((void **)this + 9) + 160))(*((void *)this + 9));
        *((_DWORD *)this + 379) = v5;
        *((_DWORD *)this + 380) = v6;
        *((_DWORD *)this + 381) = v7;
      }
    }
  }
}

uint64_t WebKit::WebPage::didReplaceMultipartContent(uint64_t this, const WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3) {
        return (*(uint64_t (**)(void, uint64_t))(**(void **)(this + 72) + 168))(*(void *)(this + 72), this + 1512);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::didCommitLoad(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 9);
  if (*(unsigned char *)(v5 + 24))
  {
    uint64_t v47 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    uint64_t v48 = 96;
    __break(0xC471u);
    goto LABEL_97;
  }
  uint64_t v3 = a2;
  uint64_t v2 = this;
  uint64_t v4 = (uint64_t *)(*(void *)(v5 + 248) + 1);
  *((void *)a2 + 12) = v4;
  uint64_t result = (unsigned int *)WebKit::WebPage::cancelPotentialTapInFrame(this, a2);
  uint64_t v7 = *((void *)v2 + 116);
  if (v7)
  {
    uint64_t v8 = *((void *)v3 + 3);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (*(void *)(*(void *)(v9 + 128) + 8) == v9) {
          goto LABEL_92;
        }
      }
    }
    uint64_t v10 = *(void *)(*(void *)(*(void *)(v7 + 48) + 8) + 544);
    if (v10) {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    if (v8)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 144)) {
          uint64_t v8 = 0;
        }
      }
    }
    if (v10 == v8)
    {
LABEL_92:
      uint64_t v60 = *((void *)v2 + 4);
      *((unsigned char *)v2 + 1672) = 0;
      uint64_t v61 = (*(uint64_t (**)(uint64_t))(v60 + 56))((uint64_t)v2 + 32);
      uint64_t v62 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v62 = 1962;
      *((void *)v62 + 1) = v61;
      *((void *)v62 + 66) = (char *)v62 + 16;
      *((void *)v62 + 67) = 512;
      *((void *)v62 + 68) = 0;
      *((void *)v62 + 70) = 0;
      *((void *)v62 + 69) = 0;
      IPC::Encoder::encodeHeader(v62);
      *(void *)buf = v62;
      (*(void (**)(uint64_t, unsigned char *, void))(*((void *)v2 + 4) + 32))((uint64_t)v2 + 32, buf, 0);
      uint64_t v48 = *(void *)buf;
      *(void *)buf = 0;
      if (!v48) {
        goto LABEL_93;
      }
      goto LABEL_98;
    }
  }
  while (1)
  {
    uint64_t v11 = *((void *)v3 + 3);
    if (!v11) {
      return result;
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12 && *(void *)(*(void *)(v12 + 128) + 8) == v12)
    {
      *((unsigned char *)v2 + 2344) = 0;
    }
    else if (*((unsigned char *)v2 + 2344))
    {
      unint64_t v13 = *(unsigned char *)(v12 + 144) ? 0 : *(atomic_uint **)(v11 + 8);
      uint64_t result = WebKit::WebPage::startTextManipulationForFrame((unsigned int *)v2, v13);
      uint64_t v11 = *((void *)v3 + 3);
      if (!v11) {
        return result;
      }
    }
    uint64_t result = *(unsigned int **)(v11 + 8);
    if (!result) {
      return result;
    }
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    if (!result) {
      return result;
    }
    uint64_t v14 = *((void *)v2 + 9);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 64))(v14);
    }
    WebKit::WebPage::unfreezeLayerTree((uint64_t)v2, 32);
    unsigned int v16 = *((_DWORD *)v2 + 605);
    if (v16)
    {
      uint64_t v17 = *((void *)v2 + 301);
      uint64_t v18 = v17 + 24 * v16;
      do
      {
        uint64_t v19 = *(unsigned int *)(v17 + 20);
        if (v19)
        {
          uint64_t v20 = *(uint64_t **)(v17 + 8);
          uint64_t v21 = 8 * v19;
          do
          {
            *(void *)buf = 0;
            uint64_t v22 = *v20;
            *uint64_t v20 = 0;
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 16))(v22, buf);
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            uint64_t v23 = *(void *)buf;
            *(void *)buf = 0;
            if (v23)
            {
              if (*(_DWORD *)(v23 + 28) == 2)
              {
                if ((*(_WORD *)(v23 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v23);
                }
              }
              else
              {
                *(_DWORD *)(v23 + 28) -= 2;
              }
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
        v17 += 24;
      }
      while (v17 != v18);
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::shrinkCapacity((uint64_t)v2 + 2408, v15);
    int v25 = (WTF::StringImpl **)*((void *)v2 + 278);
    if (v25)
    {
      *((void *)v2 + 278) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v24);
    }
    uint64_t v26 = *(void *)(*((void *)v3 + 3) + 8);
    int v27 = *(unsigned __int8 *)(v26 + 144);
    if (*(unsigned char *)(v26 + 144)) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *(void *)(*((void *)v3 + 3) + 8);
    }
    if (*(unsigned char *)(*(void *)(v28 + 280) + 352))
    {
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      (*(void (**)(void, WebKit::WebPage *, unsigned char *))(**((void **)v2 + 45) + 256))(*((void *)v2 + 45), v2, buf);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v29);
      uint64_t v26 = *(void *)(*((void *)v3 + 3) + 8);
      int v27 = *(unsigned __int8 *)(v26 + 144);
    }
    if (v27) {
      uint64_t v26 = 0;
    }
    if (!WebCore::FrameLoader::loadType(*(WebCore::FrameLoader **)(v26 + 280)))
    {
      uint64_t v36 = *(void *)(*((void *)v3 + 3) + 8);
      if (*(unsigned char *)(v36 + 144)) {
        uint64_t v36 = 0;
      }
      uint64_t v37 = *(void *)(v36 + 24);
      if (v37)
      {
        uint64_t v38 = *(void *)(v37 + 8);
        if (v38)
        {
          if (*(float *)(v38 + 356) != 1.0)
          {
            *(void *)buf = 0;
            WebKit::WebPage::scalePage(v2, 1.0, (const WebCore::IntPoint *)buf);
          }
        }
      }
    }
    PAL::HysteresisActivity::cancel((WebKit::WebPage *)((char *)v2 + 736));
    *((unsigned char *)v2 + 2253) = 0;
    int v30 = (WebCore::TemporarySelectionChange *)*((void *)v2 + 210);
    *((void *)v2 + 210) = 0;
    std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)v2 + 210, 0);
    if (v30)
    {
      WebCore::TemporarySelectionChange::invalidate(v30);
      uint64_t v31 = (WTF *)MEMORY[0x199737F60](v30);
      WTF::fastFree(v31, v32);
    }
    *((unsigned char *)v2 + 1672) = 0;
    *((void *)v2 + 196) = v4;
    *((_DWORD *)v2 + 320) = 0;
    *((void *)v2 + 162) = 0x3F91111111111111;
    *((unsigned char *)v2 + 1286) = 1;
    if (*((unsigned char *)v2 + 1664)) {
      *((unsigned char *)v2 + 1664) = 0;
    }
    uint64_t v33 = (unsigned int *)WTF::fastMalloc((WTF *)0xA0);
    *(void *)uint64_t v33 = v33 + 4;
    *((void *)v33 + 1) = 1;
    unint64_t v68 = v33;
    uint64_t v4 = &qword_1EB35A000;
    {
      char v65 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v65);
    }
    WebKit::EventDispatcher::takeQueuedTouchEventsForPage(WebKit::WebProcess::singleton(void)::process + 144, (uint64_t)v2, (uint64_t *)&v68);
    WebKit::WebPage::cancelAsynchronousTouchEvents((uint64_t)v2, (uint64_t)&v68);
    uint64_t v34 = *((void *)v3 + 3);
    if (!v34) {
      goto LABEL_57;
    }
    uint64_t v35 = *(void *)(v34 + 8);
    if (!v35) {
      goto LABEL_65;
    }
    if (!*(unsigned char *)(v35 + 144)) {
      atomic_fetch_add((atomic_uint *volatile)(v35 + 8), 1u);
    }
    else {
LABEL_57:
    }
      uint64_t v35 = 0;
LABEL_65:
    WebKit::WebPage::resetViewportDefaultConfiguration(v2, v3, 0);
    uint64_t v3 = (WebKit::WebPage *)((char *)v2 + 952);
    shouldIgnoreMetaViewport = (WebCore::LocalFrame *)WebKit::WebPage::shouldIgnoreMetaViewport(v2);
    WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded((void *)v2 + 119, (WebCore::ViewportConfiguration *)v35, shouldIgnoreMetaViewport);
    int v40 = WebKit::WebPage::shouldIgnoreMetaViewport(v2);
    BOOL v41 = 0;
    if (v40) {
      BOOL v41 = *((unsigned char *)v2 + 924) != 0;
    }
    *((unsigned char *)v2 + 1171) = v41;
    *(void *)buf = WebCore::ScrollView::contentsSize(*(WebCore::ScrollView **)(v35 + 288));
    int v42 = WebCore::ViewportConfiguration::setContentsSize((WebKit::WebPage *)((char *)v2 + 952), (const IntSize *)buf);
    WebCore::Document::viewportArguments((uint64_t *)buf, *(WebCore::Document **)(v35 + 296));
    char v43 = WebCore::ViewportConfiguration::setViewportArguments();
    uint64_t IsKnownToLayOutWiderThanViewport = WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebKit::WebPage *)((char *)v2 + 952));
    if ((IsKnownToLayOutWiderThanViewport & 1) != 0 || (v43 & 1) != 0 || v42) {
      uint64_t IsKnownToLayOutWiderThanViewport = (uint64_t)WebKit::WebPage::viewportConfigurationChanged((uint64_t)v2, 0);
    }
    if ((*((void *)v2 + 274) & 0xFFFFFFFFFFFFLL) != 0) {
      uint64_t IsKnownToLayOutWiderThanViewport = WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)v2 + 2160));
    }
    WTF::WallTime::now((WTF::WallTime *)IsKnownToLayOutWiderThanViewport);
    *((void *)v2 + 255) = v45;
    uint64_t v46 = *((void *)v2 + 287);
    *((void *)v2 + 287) = v46 & 0xFDFFFFFFFFFFFFLL;
    if ((v46 & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)v2 + 2264));
    }
    *((unsigned char *)v2 + 2328) = 0;
    WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion((uint64_t)v2, *((unsigned __int8 *)v2 + 2257));
    if (*(void *)(*(void *)(v35 + 128) + 8) != v35) {
      goto LABEL_86;
    }
    {
      __int16 v67 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v67);
    }
    uint64_t v48 = WebKit::WebProcess::singleton(void)::process;
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
    {
      uint64_t v49 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
      if ((v49 & 0x8000000000000000) == 0 || v49 == -1)
      {
        uint64_t v50 = WebCore::Document::loader(*(WebCore::Document **)(v35 + 296));
        if (v50)
        {
          char v51 = (_DWORD *)v50;
          int v52 = *(_DWORD *)(v50 + 24);
          *(_DWORD *)(v50 + 24) = v52 + 1;
          if (*(_WORD *)(v50 + 3514))
          {
            int v53 = qword_1EB357BA0;
            if (os_log_type_enabled((os_log_t)qword_1EB357BA0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v54 = *((void *)v2 + 5);
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v2;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v54;
              _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::didCommitLoad: advanced privacy protections enabled in non-ephemeral session", buf, 0x16u);
              int v52 = v51[6] - 1;
            }
          }
          if (v52) {
            v51[6] = v52;
          }
          else {
            (*(void (**)(_DWORD *))(*(void *)v51 + 24))(v51);
          }
        }
      }
LABEL_86:
      *((unsigned char *)v2 + 945) = 1;
      uint64_t v55 = (unsigned int *)*((void *)v2 + 292);
      *((void *)v2 + 292) = 0;
      if (v55) {
        WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v55, v47);
      }
      {
        char v66 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v66);
      }
      WebKit::WebPage::updateMainFrameScrollOffsetPinning(v2);
      WebKit::WebPage::updateMockAccessibilityElementAfterCommittingLoad((id *)v2);
      WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v2 + 2456, v56);
      WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)v2);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v35 + 8));
      uint64_t result = v68;
      unint64_t v68 = 0;
      if (result)
      {
        int v58 = (WTF *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, v57);
        return (unsigned int *)WTF::fastFree(v58, v59);
      }
      return result;
    }
LABEL_97:
    __break(1u);
LABEL_98:
    IPC::Encoder::~Encoder((IPC::Encoder *)v48, v47);
    WTF::fastFree(v63, v64);
LABEL_93:
    uint64_t result = (unsigned int *)*((void *)v2 + 116);
    *((void *)v2 + 116) = 0;
    if (result)
    {
      if (result[7] == 2)
      {
        if ((*((_WORD *)result + 17) & 0x400) == 0) {
          uint64_t result = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      else
      {
        result[7] -= 2;
      }
    }
  }
}

unsigned int *WebKit::WebPage::startTextManipulationForFrame(unsigned int *this, atomic_uint *a2)
{
  if (!*((unsigned char *)a2 + 144))
  {
    uint64_t v2 = (unsigned int *)(a2 + 2);
    atomic_fetch_add(a2 + 2, 1u);
    uint64_t v3 = *((void *)a2 + 37);
    if (!v3) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
    }
    int v4 = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(v3 + 28) = v4 + 2;
    if (*(void *)(v3 + 3072))
    {
LABEL_17:
      if (v4)
      {
        *(_DWORD *)(v3 + 28) = v4;
      }
      else if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
    }
    uint64_t v5 = (uint64_t)this;
    if (*((unsigned char *)this + 2368))
    {
      uint64_t v6 = this[591];
      uint64_t v20 = 0;
      int v21 = 0;
      int v22 = v6;
      if (!v6)
      {
LABEL_12:
        WebCore::Document::textManipulationController((WebCore::Document *)v3);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 24), v5 + 16);
        unsigned int v15 = *(atomic_uint **)(v5 + 24);
        if (v15) {
          atomic_fetch_add(v15, 1u);
        }
        unsigned int v16 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v16 = &unk_1EEA010E8;
        v16[1] = v15;
        uint64_t v19 = v16;
        WebCore::TextManipulationController::startObservingParagraphs();
        uint64_t v18 = v19;
        uint64_t v19 = 0;
        if (v18) {
          (*(void (**)(void *))(*v18 + 8))(v18);
        }
        WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
        int v4 = *(_DWORD *)(v3 + 28) - 2;
        goto LABEL_17;
      }
      if (!(v6 >> 27))
      {
        uint64_t v7 = WTF::fastMalloc((WTF *)(32 * v6));
        int v21 = v6;
        uint64_t v20 = v7;
        uint64_t v8 = *(unsigned int *)(v5 + 2364);
        if (v8)
        {
          uint64_t v9 = *(void *)(v5 + 2352);
          uint64_t v10 = v9 + 32 * v8;
          uint64_t v11 = (_DWORD *)(v7 + 24);
          uint64_t v12 = v9 + 8;
          do
          {
            uint64_t v13 = v12 - 8;
            *((unsigned char *)v11 - 24) = *(unsigned char *)(v12 - 8);
            *((unsigned char *)v11 - 16) = 0;
            *uint64_t v11 = -1;
            uint64_t v14 = *(unsigned int *)(v12 + 16);
            if (v14 != -1)
            {
              ((void (*)(void **, _DWORD *, uint64_t))off_1EEA010C0[v14])(&v19, v11 - 4, v12);
              *uint64_t v11 = v14;
            }
            v11 += 8;
            v12 += 32;
          }
          while (v13 + 32 != v10);
        }
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
  }
  return this;
}

void *WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded(void *this, WebCore::ViewportConfiguration *a2, WebCore::LocalFrame *a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    this = (void *)*((void *)a2 + 37);
    if (this)
    {
      char v4 = (char)a3;
      uint64_t v5 = (WebCore::Quirks *)this[90];
      if (!v5) {
        uint64_t v5 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)this);
      }
      this = (void *)WebCore::Quirks::shouldIgnoreViewportArgumentsToAvoidExcessiveZoom(v5);
      if (this) {
        *((unsigned char *)v3 + 220) = v4;
      }
    }
  }
  return this;
}

BOOL WebKit::WebPage::usesEphemeralSession(WebKit::WebPage *this)
{
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = *(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 672);
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
    if ((v1 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return v1 != -1;
}

unsigned int **WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int ***)a1;
  if (result)
  {
    *(void *)a1 = 0;
    uint64_t result = (unsigned int **)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, a2);
    char v4 = *(unsigned int ***)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v4)
    {
      LODWORD(v4) = *((_DWORD *)v4 - 3);
      if (v4 > 0x7FFFFFFE) {
        LODWORD(v4) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * v4;
  return result;
}

unsigned int *WebKit::WebPage::didFinishDocumentLoad(unsigned int *this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3) {
        return WebKit::WebPage::shrinkToFitContent(this, 1);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::didFinishLoad(unsigned int *this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(void *)(*(void *)(v3 + 128) + 8) == v3)
      {
        uint64_t v5 = this;
        uint64_t v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)this);
        WebKit::WebFrame::url(a2, (uint64_t)v9);
        WebKit::WebProcess::sendPrewarmInformation(v6, (const WTF::URL *)v9);
        uint64_t v8 = v9[0];
        v9[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v7);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        return WebKit::WebPage::shrinkToFitContent(v5, 1);
      }
    }
  }
  return this;
}

void WebKit::WebPage::didSameDocumentNavigationForFrame(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  uint64_t v35 = 0;
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (*(unsigned char *)(v5 + 144)) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v33 = *(void *)(*(void *)(*(void *)(v6 + 280) + 88) + 2528);
    BOOL v34 = v33 != 0;
    if (*(void *)(*(void *)(v5 + 128) + 8) == v5) {
      *((void *)this + 236) = 0;
    }
  }
  else
  {
    uint64_t v33 = *(void *)(*(void *)(MEMORY[0x118] + 88) + 2528);
    BOOL v34 = v33 != 0;
  }
  (*(void (**)(void, WebKit::WebPage *, WebKit::WebFrame *, void, void **))(**((void **)this + 45)
                                                                                         + 96))(*((void *)this + 45), this, a2, 0, &v35);
  uint64_t v7 = (char *)this + 32;
  *(_OWORD *)int v30 = *((_OWORD *)a2 + 5);
  uint64_t v8 = *(void *)(*((void *)a2 + 3) + 8);
  if (*(unsigned char *)(v8 + 144)) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 296);
  {
    uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  int v25 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v35, (uint64_t)&v25, &v31);
  uint64_t v10 = v31;
  if (v31) {
    CFRetain(*(CFTypeRef *)(v31 + 8));
  }
  uint64_t v32 = v10;
  uint64_t v11 = (*(uint64_t (**)(char *))(*(void *)v7 + 56))((char *)this + 32);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1948;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, v30);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v12, (uint64_t)&v33);
  uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1993922A8);
  }
  unsigned char *v13 = 0;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)(v9 + 768));
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v12, &v32);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v7 + 32))((char *)this + 32, &v25, 0);
  unsigned int v16 = v25;
  int v25 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v22, v23);
  }
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v17 = v31;
  uint64_t v31 = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, v30);
  uint64_t v18 = *((void *)this + 20);
  if (v18)
  {
    uint64_t v20 = *(unsigned int *)(v18 - 4);
    uint64_t v19 = v18 + 8 * v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  int v25 = (WebKit::WebPage *)((char *)this + 160);
  uint64_t v26 = v19;
  uint64_t v27 = v19;
  uint64_t v28 = v19;
  uint64_t v29 = v18 + 8 * v20;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
  while (v30[1] != v26)
  {
    WebKit::PluginView::didSameDocumentNavigationForFrame(*(atomic_uchar **)(*(void *)v30[1] + 8), a2);
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v30);
  }
  int v21 = (CFTypeRef *)v35;
  uint64_t v35 = 0;
  if (v21) {
    CFRelease(v21[1]);
  }
}

uint64_t WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t *a2)
{
  if (atomic_load(&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    uint64_t result = 7803;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WebKit::WebPage::currentSelectionAsRange@<X0>(WebKit **this@<X0>, WebCore::Page *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t *)WebKit::frameWithSelection(this[6], a2);
  if (result)
  {
    uint64_t v5 = (WebCore::VisibleSelection *)(*(void *)(result[37] + 3096) + 56);
    return WebCore::VisibleSelection::toNormalizedRange((uint64_t *)a3, v5);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::loadAndDecodeImage(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = WebCore::ResourceRequestBase::url(this);
  uint64_t v13 = *(WTF::StringImpl **)v12;
  if (*(void *)v12) {
    *(_DWORD *)v13 += 2;
  }
  long long v31 = *(_OWORD *)(v12 + 24);
  long long v32 = *(_OWORD *)(v12 + 8);
  {
    int v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v30);
  }
  uint64_t v14 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                             + 24);
  uint64_t v15 = *a6;
  *a6 = 0;
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  unsigned int v16 = (uint64_t *)(a1 + 2120);
  uint64_t v35 = a3;
  LOBYTE(v36) = a4;
  uint64_t v37 = v13;
  long long v38 = v32;
  long long v39 = v31;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v17 = &unk_1EEA00EE8;
  *(void *)(v17 + 8) = v15;
  uint64_t v34 = 0;
  int v18 = v36;
  *(void *)(v17 + 16) = v35;
  *(_DWORD *)(v17 + 24) = v18;
  v20.n128_f64[0] = WTF::URL::URL(v17 + 32, (uint64_t *)&v37);
  int v21 = v37;
  uint64_t v37 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v19);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = v34;
  uint64_t v34 = 0;
  if (v22) {
    (*(void (**)(uint64_t, __n128))(*(void *)v22 + 8))(v22, v20);
  }
  uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v24 = 247;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 66) = (char *)v24 + 16;
  *((void *)v24 + 67) = 512;
  *((void *)v24 + 68) = 0;
  *((void *)v24 + 70) = 0;
  *((void *)v24 + 69) = 0;
  IPC::Encoder::encodeHeader(v24);
  uint64_t v33 = v24;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v24, this);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, v16);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v24, a5);
  uint64_t v34 = v17;
  uint64_t v35 = v23;
  IPC::Connection::sendMessageWithAsyncReply(v14, &v33, &v34, 0, 0);
  uint64_t v26 = v34;
  uint64_t v34 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v28, v29);
    if (!v13) {
      return result;
    }
  }
  else if (!v13)
  {
    return result;
  }
  if (*(_DWORD *)v13 == 2) {
    return (IPC::Encoder *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v25);
  }
  *(_DWORD *)v13 -= 2;
  return result;
}

uint64_t WebKit::WebPage::flushPendingEditorStateUpdate(uint64_t this)
{
  if (*(unsigned char *)(this + 948))
  {
    uint64_t v1 = (WebKit::WebPage *)this;
    WebCore::Page::checkedFocusController((uint64_t *)&v4, *(WebCore::Page **)(this + 48));
    this = WebCore::FocusController::focusedOrMainFrame(v4);
    uint64_t v2 = this;
    if (this) {
      atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u);
    }
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    if (v3)
    {
      if (!*(_DWORD *)v3)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      --*(_DWORD *)v3;
    }
    if (this)
    {
      if (!*(unsigned char *)(WebCore::Document::editor(*(WebCore::Document **)(this + 296)) + 88)) {
        WebKit::WebPage::sendEditorStateUpdate(v1);
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::updateWebsitePolicies(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 6);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(*((void *)result + 11) + 24);
    if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && *(unsigned char *)(v5 + 144) && (result = *(unsigned int **)(v5 + 264)) != 0)
    {
      return WebKit::WebRemoteFrameClient::applyWebsitePolicies(result, a2);
    }
    else
    {
      uint64_t v6 = *(void *)(v2 + 160);
      if (v6) {
        BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
        uint64_t v8 = *(_DWORD **)(*(void *)(v6 + 280) + 88);
        if (v8)
        {
          ++v8[6];
          *((unsigned char *)v3 + 2248) = *(unsigned char *)(a2 + 102);
          WebKit::WebsitePoliciesData::applyToDocumentLoader(a2, (uint64_t)v8);
          WebCore::Page::updateMediaElementRateChangeRestrictions(*((WebCore::Page **)v3 + 6));
          shouldIgnoreMetaViewport = (WebCore::LocalFrame *)WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v3);
          WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded((void *)v3 + 119, (WebCore::ViewportConfiguration *)v6, shouldIgnoreMetaViewport);
          if (v8[6] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v8 + 24))(v8);
          }
          else {
            --v8[6];
          }
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::extendIncrementalRenderingSuppression(WebKit::WebPage *this)
{
  unsigned int v10 = 0;
  uint64_t v2 = (unsigned int *)((char *)this + 1816);
  uint64_t v3 = (uint64_t *)((char *)this + 1808);
  uint64_t v4 = (unsigned int *)((char *)this + 1816);
  do
  {
    do
    {
      unsigned int v5 = *v4;
      unsigned int v10 = *v4 + 1;
      uint64_t v4 = &v10;
    }
    while (v5 > 0xFFFFFFFD);
    uint64_t v4 = &v10;
  }
  while (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(v3, (int *)&v10));
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v3, (int *)&v10, (uint64_t)&v9);
  uint64_t v6 = *(void *)(*((void *)this + 6) + 160);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(*(WebCore::LocalFrameView **)(v6 + 288));
  }
  uint64_t result = v10;
  unsigned int *v2 = v10;
  return result;
}

_DWORD *WebKit::WebPage::stopExtendingIncrementalRenderingSuppression(WebKit::WebPage *this, int a2)
{
  int v9 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 1808);
  uint64_t result = (_DWORD *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>((uint64_t *)this + 226, &v9);
  uint64_t v5 = *((void *)this + 226);
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(v5 + 4 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    uint64_t result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(v3, result);
  }
  uint64_t v7 = *(void *)(*((void *)this + 6) + 160);
  if (v7) {
    BOOL v8 = *(unsigned char *)(v7 + 144) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    return (_DWORD *)WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(*(WebCore::LocalFrameView **)(v7 + 288));
  }
  return result;
}

uint64_t WebKit::WebPage::setScrollbarOverlayStyle(uint64_t result, uint64_t a2)
{
  __int16 v2 = a2 | 0x100;
  if ((a2 & 0xFF00000000) == 0) {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 1821) = v2;
  uint64_t v3 = *(void *)(*(void *)(result + 48) + 160);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return MEMORY[0x1F416DB80](*(void *)(v3 + 288));
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::getBytecodeProfile(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4FB64D8];
  uint64_t v4 = *MEMORY[0x1E4FB64D8];
  if (!*MEMORY[0x1E4FB64D8]) {
    uint64_t v4 = WebCore::commonVMSlow(0);
  }
  if (*(void *)(v4 + 93400))
  {
    uint64_t v8 = *v3;
    if (!*v3) {
      uint64_t v8 = WebCore::commonVMSlow(0);
    }
    JSC::Profiler::Database::toJSON((uint64_t *)&v10, *(JSC::Profiler::Database **)(v8 + 93400));
    WTF::JSONImpl::Value::toJSONString((uint64_t *)&v11, v10);
    int v9 = v10;
    unsigned int v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v9;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v11);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::getSamplingProfilerOutput(uint64_t a1, uint64_t *a2)
{
  v11[20] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *MEMORY[0x1E4FB64D8];
  if (!*MEMORY[0x1E4FB64D8]) {
    uint64_t v3 = WebCore::commonVMSlow(0);
  }
  if (*(void *)(v3 + 93752))
  {
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v11);
    JSC::SamplingProfiler::reportTopFunctions();
    JSC::SamplingProfiler::reportTopBytecodes();
    WTF::StringPrintStream::toString((uint64_t *)&v10, (WTF::StringPrintStream *)v11);
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, &v10);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v6 = v10;
    unsigned int v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v11);
  }
  else
  {
    v11[0] = 0;
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, v11);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    int v9 = v11[0];
    v11[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void WebKit::WebPage::postMessage(WebKit::WebPage *this, const WTF::String *a2, API::Object *a3)
{
  uint64_t v4 = (char *)this + 32;
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  unsigned int v16 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(a3, (uint64_t)&v16, &v14);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  uint64_t v15 = v5;
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 56))(v4);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1983;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v16 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v7, &v15);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v16, 0);
  int v9 = v16;
  unsigned int v16 = 0;
  if (!v9)
  {
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  IPC::Encoder::~Encoder(v9, v8);
  WTF::fastFree(v11, v12);
  if (v5) {
LABEL_4:
  }
    CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_5:
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

void WebKit::WebPage::postMessageWithAsyncReply(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 32;
  if (a3) {
    CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  uint64_t v18 = a3;
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1984;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  __n128 v20 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v10, &v18);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v11 = &unk_1EEA00F40;
  v11[1] = v8;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v19[0] = v11;
  v19[1] = v12;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v20, v19, 0);
  uint64_t v14 = v19[0];
  v19[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v20;
  __n128 v20 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
    if (!a3) {
      return;
    }
  }
  else if (!a3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(a3 + 8));
}

void WebKit::WebPage::postMessageIgnoringFullySynchronousMode(WebKit::WebPage *this, const WTF::String *a2, API::Object *a3)
{
  uint64_t v4 = (char *)this + 32;
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  unsigned int v16 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(a3, (uint64_t)&v16, &v14);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  uint64_t v15 = v5;
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 56))(v4);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1983;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v16 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v7, &v15);
  (*(void (**)(char *, IPC::Encoder **, uint64_t))(*(void *)v4 + 32))(v4, &v16, 4);
  uint64_t v9 = v16;
  unsigned int v16 = 0;
  if (!v9)
  {
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  IPC::Encoder::~Encoder(v9, v8);
  WTF::fastFree(v11, v12);
  if (v5) {
LABEL_4:
  }
    CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_5:
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

void WebKit::WebPage::postSynchronousMessageForTesting(uint64_t a1, uint64_t *a2, const void *a3, uint64_t *a4)
{
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  v21[0] = &unk_1EE9E6F68;
  WebKit::UserData::transform(a3, (uint64_t)v21, &v18);
  uint64_t v7 = v18;
  uint64_t v18 = 0;
  uint64_t v19 = v7;
  v20[0] = a2;
  v20[1] = &v19;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  if (v11)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::HandleSynchronousMessage>(v11, v20, v10, 1, (uint64_t)v21, INFINITY);
  }
  else
  {
    LOBYTE(v21[0]) = 3;
    int v22 = 1;
  }
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  if (!v22)
  {
    v20[0] = (uint64_t *)&unk_1EE9E6F38;
    WebKit::UserData::transform((CFTypeRef)v21[1], (uint64_t)v20, &v19);
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    uint64_t v16 = *a4;
    *a4 = v15;
    if (!v16) {
      goto LABEL_15;
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (!v14) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v14 = *a4;
  *a4 = 0;
  if (v14) {
LABEL_14:
  }
    CFRelease(*(CFTypeRef *)(v14 + 8));
LABEL_15:
  if (v22 != -1) {
    ((void (*)(uint64_t **, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24HandleSynchronousMessageEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v22])(v20, v21);
  }
}

unsigned char *WebKit::WebPage::setShouldScaleViewToFitDocument(WebKit::WebPage *this, int a2)
{
  uint64_t result = (unsigned char *)*((void *)this + 9);
  if (result)
  {
    if (result[65] != a2)
    {
      result[65] = a2;
      return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 264))();
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::imageOrMediaDocumentSizeChanged(WebKit::WebPage *this, const WebCore::IntSize *a2)
{
  uint64_t v3 = (char *)this + 32;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1992;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v5, (int *)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::addUserScript(WTF *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = WTF::aboutBlankURL(a1);
  uint64_t v11 = *(WTF::StringImpl **)v10;
  if (*(void *)v10) {
    *(_DWORD *)v11 += 2;
  }
  v20[1] = 0;
  int v21 = v11;
  long long v12 = *(_OWORD *)(v10 + 24);
  long long v22 = *(_OWORD *)(v10 + 8);
  long long v23 = v12;
  v19[1] = 0;
  v20[0] = 0;
  v19[0] = 0;
  MEMORY[0x19972F8D0](v24, a2, &v21, v20, v19, a5, a4, 0);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v14);
  uint64_t v16 = v21;
  int v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (_DWORD *)*((void *)a1 + 78);
  ++v17[2];
  LOBYTE(v21) = 0;
  LOBYTE(v22) = 0;
  WebKit::WebUserContentController::addUserScriptInternal((uint64_t)v17, a3, (long long *)&v21, v24, 0);
  if (v17[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
  }
  else {
    --v17[2];
  }
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v24, v18);
}

WTF::StringImpl *WebKit::WebPage::addUserStyleSheet(WTF *a1)
{
  WTF::aboutBlankURL(a1);
  long long v17 = 0uLL;
  v12[0] = 0;
  v12[1] = 0;
  WebCore::UserStyleSheet::UserStyleSheet();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v2);
  uint64_t v4 = (WebKit::InjectedBundleScriptWorld *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v3);
  uint64_t v5 = (WebCore::UserContentProvider *)*((void *)a1 + 78);
  ++*((_DWORD *)v5 + 2);
  uint64_t v6 = WebKit::InjectedBundleScriptWorld::normalWorld(v4);
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  WebKit::WebUserContentController::addUserStyleSheetInternal((uint64_t)v5, (uint64_t)v6, &v17, (uint64_t)&v13);
  WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v5);
  if (*((_DWORD *)v5 + 2) == 1) {
    (*(void (**)(WebCore::UserContentProvider *))(*(void *)v5 + 8))(v5);
  }
  else {
    --*((_DWORD *)v5 + 2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v8);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::removeAllUserContent(WebKit::WebPage *this, void *a2)
{
  __int16 v2 = (WebKit::WebUserContentController *)*((void *)this + 78);
  ++*((_DWORD *)v2 + 2);
  uint64_t result = WebKit::WebUserContentController::removeAllUserContent(v2, a2);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(WebKit::WebUserContentController *))(*(void *)v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidChangeIntrinsicContentSize>(uint64_t a1, int **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1897;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::didRestoreScrollPosition(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1946;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *WebKit::WebPage::gamepadActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    qword_1EB35A910 = 0;
    unk_1EB35A918 = 0;
    byte_1EB35A920 = 0;
    WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F0318;
    xmmword_1EB35A928 = 0u;
    unk_1EB35A938 = 0u;
    xmmword_1EB35A948 = 0u;
  }
  return WebKit::WebGamepadProvider::gamepadActivity((uint64_t)&WebKit::WebGamepadProvider::singleton(void)::provider, a2, a3);
}

IPC::Encoder *WebKit::WebPage::gamepadsRecentlyAccessed(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1976;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::didGetLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 144) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v6 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v7 = *(_DWORD **)(*(void *)(v4 + 280) + 88);
    if (v7)
    {
      ++v7[6];
      uint64_t v8 = *a4;
      *a4 = 0;
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v9 = &unk_1EEA00F68;
      v9[1] = v8;
      uint64_t v15 = v9;
      WebCore::DocumentLoader::didGetLoadDecisionForIcon();
      uint64_t v10 = v15;
      uint64_t v15 = 0;
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
      if (v7[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 24))(v7);
      }
      else {
        --v7[6];
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v13 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 16))(v13, &v15);
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      IPC::SharedBufferReference::~SharedBufferReference((IPC::SharedBufferReference *)&v15, v14);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 16))(v11, &v15);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    IPC::SharedBufferReference::~SharedBufferReference((IPC::SharedBufferReference *)&v15, v12);
  }
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WTF::StringViewHashTranslator::hash(*a2, a2[1]);
  for (i = 0; ; int v6 = i + v8)
  {
    uint64_t v8 = v6 & v5;
    uint64_t v9 = (uint64_t *)(v2 + 16 * v8);
    if (*v9 != -1)
    {
      if (!*v9) {
        return 0;
      }
      if (WTF::StringViewHashTranslator::equal(v9, (unsigned __int8 *)*a2, a2[1])) {
        break;
      }
    }
    ++i;
  }
  return *(void *)(v2 + 16 * v8 + 8);
}

WebKit::WebURLSchemeHandlerProxy **WebKit::WebPage::stopAllURLSchemeTasks(WebKit::WebPage *this)
{
  uint64_t v19 = 0;
  uint64_t v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 260);
  uint64_t v3 = v2;
  unsigned int v5 = v4;
  uint64_t v6 = *((void *)this + 260);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v2)
  {
    do
    {
      uint64_t v8 = (WebKit::WebURLSchemeHandlerProxy *)v3[1];
      if (v8) {
        ++*(_DWORD *)v8;
      }
      uint64_t v18 = v8;
      WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::add((uint64_t *)&v19, &v18, (uint64_t)v17);
      uint64_t v10 = v18;
      uint64_t v18 = 0;
      if (v10) {
        WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v10, v9);
      }
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v3 = v5;
LABEL_13:
      ;
    }
    while (v3 != v7);
  }
  long long v12 = (WebKit::WebURLSchemeTaskProxy **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v19);
  uint64_t v13 = v11;
  uint64_t result = v19;
  if (v19) {
    uint64_t v15 = &v19[*((unsigned int *)v19 - 1)];
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v12)
  {
    do
    {
      uint64_t v16 = *v12++;
      WebKit::WebURLSchemeHandlerProxy::stopAllTasks(v16);
      while (v12 != v13)
      {
        if ((unint64_t)*v12 + 1 > 1) {
          goto LABEL_23;
        }
        ++v12;
      }
      long long v12 = v13;
LABEL_23:
      ;
    }
    while (v12 != v15);
    uint64_t result = v19;
  }
  if (result) {
    return (WebKit::WebURLSchemeHandlerProxy **)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::deallocateTable(result, v11);
  }
  return result;
}

void WebKit::WebPage::urlSchemeTaskWillPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const String *a5, uint64_t *a6)
{
  uint64_t v10 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 2088), a2);
  uint64_t v11 = v10;
  if (v10) {
    ++*(_DWORD *)v10;
  }
  WebCore::ResourceRequest::ResourceRequest(v14, a5);
  WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection((uint64_t)v11, a3, a4, (uint64_t)a5, a6);
  CFTypeRef v12 = cf;
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
  if (v11) {
    WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v11, v13);
  }
}

WebKit::WebURLSchemeHandlerProxy *WebKit::WebPage::urlSchemeTaskDidPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 2088), a2);
  uint64_t v9 = v8;
  if (v8) {
    ++*(_DWORD *)v8;
  }
  uint64_t v10 = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v10 = &unk_1EEA00F90;
  uint64_t v13 = v10;
  WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection((uint64_t)v9, a3, a4, a5, (uint64_t *)&v13);
  uint64_t result = v13;
  if (v13) {
    uint64_t result = (WebKit::WebURLSchemeHandlerProxy *)(*(uint64_t (**)(WebKit::WebURLSchemeHandlerProxy *))(*(void *)v13 + 8))(v13);
  }
  if (v9)
  {
    return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v9, v11);
  }
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebPage::urlSchemeTaskDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 2088), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)v6;
    WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse((uint64_t)v6, a3, a4);
    return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
  }
  else
  {
    return WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse(0, a3, a4);
  }
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebPage::urlSchemeTaskDidReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, atomic_uint **a4)
{
  uint64_t v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 2088), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)v6;
    WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData((uint64_t)v6, a3, a4);
    return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
  }
  else
  {
    return WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData(0, a3, a4);
  }
}

uint64_t *WebKit::WebPage::urlSchemeTaskDidComplete(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceError *a4)
{
  uint64_t v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 2088), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)v6;
    WebKit::WebURLSchemeHandlerProxy::taskDidComplete((uint64_t)v6, a3, a4);
    return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
  }
  else
  {
    return WebKit::WebURLSchemeHandlerProxy::taskDidComplete(0, a3, a4);
  }
}

void WebKit::WebPage::setIsSuspended(WebKit::WebPage *this, int a2)
{
  if (*((unsigned __int8 *)this + 2108) != a2)
  {
    *((unsigned char *)this + 2108) = a2;
    if (a2)
    {
      WebKit::WebPage::freezeLayerTree((uint64_t)this, 8);
      WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 2);
      {
        uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v26);
      }
      uint64_t v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      WebKit::WebFrame::url(*((WebKit::WebFrame **)this + 11), (uint64_t)v27);
      WebKit::WebProcess::sendPrewarmInformation(v3, (const WTF::URL *)v27);
      unsigned int v5 = v27[0];
      v27[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)this);
      uint64_t v6 = (WebCore::BackForwardCache *)CFRetain(*((CFTypeRef *)this + 1));
      uint64_t v7 = *(void *)(*(void *)(*((void *)this + 11) + 24) + 8);
      if (*(unsigned char *)(v7 + 144)) {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(_DWORD **)(*(void *)(v7 + 184) + 16);
      if (v8)
      {
        ++*v8;
        WebCore::BackForwardCache::singleton(v6);
        if (WebCore::BackForwardCache::addIfCacheable())
        {
          uint64_t v9 = *(void *)(*((void *)this + 11) + 24);
          if (v9)
          {
            uint64_t v10 = *(WebCore::Frame **)(v9 + 8);
            if (v10)
            {
              if (!*((unsigned char *)v10 + 144)) {
                WebCore::Frame::detachFromAllOpenedFrames(v10);
              }
            }
          }
          uint64_t v11 = (char *)this + 32;
          uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
          uint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x238);
          uint64_t v14 = v13;
          __int16 v15 = 1953;
        }
        else
        {
          uint64_t v11 = (char *)this + 32;
          uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
          uint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x238);
          uint64_t v14 = v13;
          __int16 v15 = 1917;
        }
        *(_WORD *)uint64_t v13 = v15;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        v27[0] = v14;
        (*(void (**)(char *, WTF::StringImpl **, void))(*(void *)v11 + 32))(v11, v27, 0);
        uint64_t v17 = v27[0];
        v27[0] = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v16);
          WTF::fastFree(v18, v19);
        }
        WTF::RefCounted<WebCore::HistoryItem>::deref(v8);
      }
      else
      {
        uint64_t v20 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
        int v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v21 = 1917;
        *((void *)v21 + 1) = v20;
        *((void *)v21 + 66) = (char *)v21 + 16;
        *((void *)v21 + 67) = 512;
        *((void *)v21 + 68) = 0;
        *((void *)v21 + 70) = 0;
        *((void *)v21 + 69) = 0;
        IPC::Encoder::encodeHeader(v21);
        v27[0] = v21;
        (*(void (**)(char *, WTF::StringImpl **, void))(*((void *)this + 4) + 32))((char *)this + 32, v27, 0);
        long long v23 = v27[0];
        v27[0] = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v24, v25);
        }
      }
      CFRelease(*((CFTypeRef *)this + 1));
    }
  }
}

uint64_t WebKit::WebPage::hasStorageAccess(uint64_t *a1, WebCore::RegistrableDomain *a2, WebCore::RegistrableDomain *a3, uint64_t a4, uint64_t *a5)
{
  if (WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)a1, (WTF::ASCIICaseInsensitiveHash **)a3, (WTF::ASCIICaseInsensitiveHash **)a2))
  {
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 1);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
  else
  {
    {
      uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v14);
    }
    uint64_t v13 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                               + 24);
    long long v15 = *(_OWORD *)(a4 + 80);
    v16[0] = (uint64_t *)a2;
    v16[1] = (uint64_t *)a3;
    float v16[2] = (uint64_t *)&v15;
    v16[3] = a1 + 5;
    return IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(v13, v16, a5, 0, 0);
  }
}

uint64_t WebKit::WebPage::hasPageLevelStorageAccess(WebKit::WebPage *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 277, a2);
  uint64_t v6 = *((void *)this + 277);
  if (v6) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if (v6 == v5) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)(v5 + 8);

  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v7, a3);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EEA00FB8;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 242;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v21 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul,3ul>(v12, a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  int v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

IPC::Encoder *WebKit::WebPage::requestStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  {
    int v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v12 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                             + 24);
  long long v26 = *(_OWORD *)(a4 + 80);
  v27[0] = a2;
  v27[1] = a3;
  _DWORD v27[2] = &v26;
  v27[3] = a1 + 40;
  _OWORD v27[4] = a1 + 2120;
  char v28 = a5;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v13 = *a6;
  *a6 = 0;
  CFRetain(*(CFTypeRef *)(a4 + 8));
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a4 + 80);
  uint64_t v16 = *(void *)(a4 + 88);
  uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x40);
  *uint64_t v17 = &unk_1EEA00FE0;
  v17[1] = a1;
  v17[2] = a1;
  v17[3] = v13;
  v17[4] = a4;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 273;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  int v30 = v19;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::StorageAccessScope>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::StorageAccessScope>,0ul,1ul,2ul,3ul,4ul,5ul>(v19, (uint64_t)v27);
  v29[0] = (uint64_t)v17;
  v29[1] = v18;
  IPC::Connection::sendMessageWithAsyncReply(v12, &v30, v29, 0, 0);
  uint64_t v21 = v29[0];
  v29[0] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t result = v30;
  int v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

_DWORD *WebKit::WebPage::setLoginStatus(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    ++*(_DWORD *)v5;
    LOBYTE(v20[0]) = 0;
    char v23 = 0;
    if (*(unsigned char *)(v5 + 1968))
    {
      uint64_t v8 = *(_DWORD **)(v5 + 1928);
      if (v8) {
        *v8 += 2;
      }
      v20[0] = v8;
      uint64_t v9 = *(_DWORD **)(v5 + 1936);
      if (v9) {
        *v9 += 2;
      }
      v20[1] = v9;
      uint64_t v22 = *(void *)(v5 + 1960);
      long long v21 = *(_OWORD *)(v5 + 1944);
      char v23 = 1;
    }
    {
      uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v15);
    }
    uint64_t v10 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(v10 + 24));
    uint64_t v16 = a2;
    char v17 = a3;
    uint64_t v18 = v20;
    IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::SetLoginStatus,WTF::CompletionHandler<void ()(void)>>(v19, (uint64_t)&v16, a4, 0, 0);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v19);
    std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v11);
    return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v5);
  }
  else
  {
    uint64_t v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);
    return (_DWORD *)v14(v13);
  }
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::SetLoginStatus,WTF::CompletionHandler<void ()(void)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EEA01008;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 283;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v21 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus> const&>,0ul,1ul,2ul>(v12, a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  long long v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

atomic_uchar *volatile **WebKit::WebPage::isLoggedIn(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v9, (uint64_t **)(v5 + 24));
  uint64_t v8 = a2;
  IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(v9, &v8, a3, 0, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v9);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EEA01030;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 245;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v21 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  long long v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

WTF::StringImpl *WebKit::WebPage::addDomainWithPageLevelStorageAccess(WebKit::WebPage *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::StringImpl **a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 2216);
  uint64_t v10 = 0;
  WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t *)this + 277, a2, (uint64_t *)&v10, (uint64_t)v13);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v13[0] + 8), a3, (uint64_t)v12);
  if (v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v10, v6);
  }
  uint64_t result = (WTF::StringImpl *)WebCore::NetworkStorageSession::findAdditionalLoginDomain();
  if (v11)
  {
    uint64_t v9 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(v5, a2, (uint64_t *)&v9, (uint64_t)v13);
    if (v11)
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v13[0] + 8), &v10, (uint64_t)v12);
      uint64_t result = (WTF::StringImpl *)v9;
      if (v9) {
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
      }
      if (v11)
      {
        uint64_t result = v10;
        uint64_t v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  uint64_t v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    int v14 = 0;
    int v15 = 1;
    do
    {
      if (*(void *)v11 == -1)
      {
        int v14 = (void *)v11;
      }
      else
      {
        uint64_t result = (WTF::StringImpl **)WTF::equalIgnoringASCIICase(*(WTF **)v11, *a2, v13);
        if (result)
        {
          uint64_t v25 = *a1;
          if (*a1) {
            uint64_t v26 = *(unsigned int *)(v25 - 4);
          }
          else {
            uint64_t v26 = 0;
          }
          char v28 = 0;
          uint64_t v27 = v25 + 16 * v26;
          goto LABEL_29;
        }
      }
      unsigned int v10 = (v10 + v15) & v9;
      uint64_t v11 = v8 + 16 * v10;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v13));
    if (v14)
    {
      void *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = (uint64_t)v14;
    }
  }
  WTF::String::operator=((uint64_t *)v11, a2);
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t result = *(WTF::StringImpl ***)(v11 + 8);
  *(void *)(v11 + 8) = v18;
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v17);
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_23:
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v11);
      uint64_t v11 = (uint64_t)result;
      uint64_t v21 = *a1;
      if (*a1) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_23;
  }
  uint64_t v27 = v21 + 16 * v24;
  char v28 = 1;
LABEL_29:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::WebPage::wasLoadedWithDataTransferFromPrevalentResource(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 160);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        this = *(void *)(v2 + 296);
        if (this) {
          return MEMORY[0x1F4173270]();
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebPage::didLoadFromRegistrableDomain(uint64_t a1, WTF **a2)
{
  WebKit::WebFrame::url(*(WebKit::WebFrame **)(a1 + 88), (uint64_t)v9);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, (const WTF::URL *)v9);
  char v6 = WTF::equal(*a2, v10, v4);
  uint64_t v7 = v10;
  unsigned int v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if ((v6 & 1) == 0) {
    return (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 2224), a2, (uint64_t)v9);
  }
  return result;
}

uint64_t WebKit::WebPage::getLoadedSubresourceDomains(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(v5, (uint64_t *)(a1 + 2224), (const WTF::StringImpl *)&v6);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a2, v5);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

uint64_t WebKit::WebPage::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  v12[0] = a2;
  v12[1] = a3;
  v10[0] = v12;
  v10[1] = a4;
  char v11 = a5;
  uint64_t v7 = a1 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  return IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(v7, (uint64_t)v10, a6, v8, 0);
}

uint64_t WebKit::WebPage::requestDOMPasteAccess(CFTypeRef *a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v20[0] = a3;
  v20[1] = a4;
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)a1);
  CFRetain(a1[1]);
  uint64_t v18 = a1;
  uint64_t v8 = WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v19, (uint64_t *)&v18, 1);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification(v8, v9);
  CFRelease(a1[1]);
  v14[0] = WebKit::WebPage::rectForElementAtInteractionLocation((int32x2_t *)a1);
  v14[1] = v10;
  LOBYTE(v15[0]) = a2;
  v15[1] = v20;
  v15[2] = v14;
  void v15[3] = a5;
  WebKit::WebPage::sendSyncWithDelayedReply<Messages::WebPageProxy::RequestDOMPasteAccess>((WebKit::WebPage *)a1, v15, 0, (uint64_t)v16);
  int v11 = v17;
  unsigned int v12 = v16[8];
  if (v17 != -1) {
    ((void (*)(uint64_t **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21RequestDOMPasteAccessEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v17])(v15, v16);
  }
  if (v11) {
    return 0;
  }
  else {
    return v12;
  }
}

IPC::Encoder *WebKit::WebPage::sendSyncWithDelayedReply<Messages::WebPageProxy::RequestDOMPasteAccess>@<X0>(WebKit::WebPage *a1@<X0>, uint64_t **a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v6 = a1;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest(a1);
  uint64_t v8 = *((void *)v6 + 4);
  char v6 = (WebKit::WebPage *)((char *)v6 + 32);
  uint64_t v9 = (*(uint64_t (**)(WebKit::WebPage *))(v8 + 56))(v6);
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(WebKit::WebPage *))(*(void *)v6 + 48))(v6);
  if (result)
  {
    return IPC::Connection::sendSync<Messages::WebPageProxy::RequestDOMPasteAccess>((uint64_t)result, a2, v9, (void **)a3, a4, INFINITY);
  }
  else
  {
    *(unsigned char *)a4 = 3;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::WebPage::simulateDeviceOrientationChange(uint64_t this, double a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(this + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 160);
    if (v5)
    {
      if (!*(unsigned char *)(v5 + 144))
      {
        this = *(void *)(v5 + 296);
        if (this) {
          return MEMORY[0x1F4173250](a2, a3, a4);
        }
      }
    }
  }
  return this;
}

WebCore::Document *WebKit::WebPage::systemPreviewActionTriggered(WebCore::Document *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  uint64_t result = (WebCore::Document *)WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v5, (uint64_t *)(a2 + 32));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = (WebCore::Document *)WebCore::Document::pageID(result);
    if (v8)
    {
      uint64_t v9 = *(WebCore::Document **)(a2 + 16);
      if (v9)
      {
        if (v9 == result)
        {
          return (WebCore::Document *)MEMORY[0x1F4173258](v7, a2, a3);
        }
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::speakingErrorOccurred(WebKit::WebPage *this)
{
  (*(void (**)(WTF **__return_ptr))(**(void **)(*((void *)this + 6) + 272) + 24))(&v4);
  uint64_t result = (unsigned int *)v4;
  if (v4)
  {
    uint64_t v3 = *((void *)v4 + 1);
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 48))(*((void *)v4 + 1));
      uint64_t result = (unsigned int *)v4;
      uint64_t v4 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v1);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::boundaryEventOccurred(WebKit::WebPage *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(WTF **__return_ptr))(**(void **)(*((void *)this + 6) + 272) + 24))(&v10);
  uint64_t result = (unsigned int *)v10;
  if (v10)
  {
    uint64_t v9 = *((void *)v10 + 1);
    if (v9)
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 56))(*((void *)v10 + 1), a2, a3, a4);
      uint64_t result = (unsigned int *)v10;
      uint64_t v10 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::voicesDidChange(WebKit::WebPage *this)
{
  (*(void (**)(WTF **__return_ptr))(**(void **)(*((void *)this + 6) + 272) + 24))(&v4);
  uint64_t result = (unsigned int *)v4;
  if (v4)
  {
    uint64_t v3 = *((void *)v4 + 1);
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 64))(*((void *)v4 + 1));
      uint64_t result = (unsigned int *)v4;
      uint64_t v4 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v1);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::insertAttachment(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl **a4, WTF::AtomStringImpl **a5, uint64_t *a6)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v19, *(WebCore::Page **)(a1 + 48));
  uint64_t v9 = WebCore::FocusController::focusedOrMainFrame(v19);
  uint64_t v10 = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  int v11 = v19;
  uint64_t v19 = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (v9)
  {
    WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
    WTF::AtomString::AtomString((WTF::AtomString *)&v19, a4);
    WTF::AtomString::AtomString((WTF::AtomString *)&v18, a5);
    WebCore::Editor::insertAttachment();
    uint64_t v13 = v18;
    uint64_t v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v12);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  else
  {
    uint64_t v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
}

uint64_t WebKit::WebPage::updateAttachmentAttributes(uint64_t a1, const WTF::String *a2, uint64_t a3, WTF::AtomStringImpl **a4, WTF::AtomStringImpl **a5, uint64_t a6, uint64_t *a7)
{
  WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v24, *(const WTF::String **)(a1 + 48), a2);
  if (v24)
  {
    int v11 = *(WTF::StringImpl **)(*((void *)v24 + 6) + 8);
    *((_DWORD *)v11 + 7) += 2;
    uint64_t v23 = v11;
    WebCore::Document::updateLayout();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v23);
    WTF::AtomString::AtomString((WTF::AtomString *)&v23, a4);
    WTF::AtomString::AtomString((WTF::AtomString *)&v22, a5);
    WebCore::HTMLAttachmentElement::updateAttributes();
    uint64_t v13 = v22;
    int v22 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v23;
    uint64_t v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    if (*(void *)a6 || *(void *)(a6 + 8))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a6, (uint64_t *)&v22);
      int v15 = v22;
    }
    else
    {
      uint64_t v21 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      int v15 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v21);
    }
    uint64_t v23 = v15;
    WebCore::HTMLAttachmentElement::updateAssociatedElementWithData();
    uint64_t v17 = (unsigned int *)v23;
    uint64_t v23 = 0;
    if (v17) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v16);
    }
    uint64_t v18 = v24;
    unint64_t v24 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 7) == 2)
      {
        if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v18);
        }
      }
      else
      {
        *((_DWORD *)v18 + 7) -= 2;
      }
    }
  }
  uint64_t v19 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
  return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
}

unsigned int *WebKit::WebPage::attachmentElementWithIdentifier(unsigned int *this, const WTF::String *a2, const WTF::String *a3)
{
  if (a2 && (uint64_t v3 = *((void *)a2 + 20)) != 0 && !*(unsigned char *)(v3 + 144))
  {
    uint64_t v4 = (unsigned int *)(v3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    uint64_t v5 = *(void *)(v3 + 296);
    if (v5)
    {
      *(_DWORD *)(v5 + 28) += 2;
      WebCore::Document::attachmentForIdentifier((WebCore::Document *)v5, a3);
      if (*(_DWORD *)(v5 + 28) == 2)
      {
        if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
      }
      else
      {
        *(_DWORD *)(v5 + 28) -= 2;
      }
    }
    else
    {
      *(void *)this = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

unsigned int *WebKit::WebPage::updateAttachmentThumbnail(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  uint64_t result = WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v28, *(const WTF::String **)(a1 + 48), a2);
  if (!v28) {
    return result;
  }
  if (*(unsigned char *)(a3 + 64))
  {
    WebCore::ShareableBitmap::create();
    if (v27)
    {
      if (*(unsigned char *)(v28 + 120) != 1)
      {
        WebCore::ShareableBitmap::createImage((uint64_t *)&v24.m_location, (WebCore::ShareableBitmap *)v27);
        WebCore::HTMLAttachmentElement::updateThumbnailForNarrowLayout();
        m_location = (_DWORD *)v24.m_location;
        v24.m_location = 0;
        if (m_location)
        {
          if (m_location[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)m_location + 8))(m_location);
          }
          else {
            --m_location[2];
          }
        }
        goto LABEL_27;
      }
      *(float *)&int v5 = (float)v27[1].m_height;
      *(float *)&v24.m_location.m_double x = (float)v27[1].m_width;
      v24.m_location.m_double y = v5;
      WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v27);
      WebCore::ImageBuffer::create();
      if (v26)
      {
        uint64_t v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
        IntSize v8 = v27[1];
        v24.m_location = 0;
        v24.int32x2_t m_size = v8;
        IntPoint v25 = 0;
        WebCore::ShareableBitmap::paint((WebCore::ShareableBitmap *)v27, v7, &v25, &v24);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::ImageBuffer::toData();
        uint64_t v10 = (WTF::StringImpl *)v25;
        IntPoint v25 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        WebCore::HTMLAttachmentElement::updateThumbnailForWideLayout();
        unsigned int v12 = (WTF *)v24.m_location;
        if (v24.m_location)
        {
          v24.m_location = 0;
          v24.m_size.m_double width = 0;
          WTF::fastFree(v12, v6);
        }
        uint64_t v13 = v26;
        uint64_t v26 = 0;
        if (v13)
        {
          char v14 = 0;
          uint64_t v15 = *(void *)(v13 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
          if (v14) {
            MEMORY[0x19972E8D0](v15);
          }
          int v16 = 1;
          uint64_t v17 = *(void *)(v15 + 8) - 1;
          *(void *)(v15 + 8) = v17;
          if (v17)
          {
            uint64_t v18 = 0;
            BOOL v19 = 1;
          }
          else
          {
            uint64_t v21 = *(void *)(v15 + 16);
            uint64_t v18 = *(void *)(v15 + 24);
            *(void *)(v15 + 24) = 0;
            BOOL v19 = v21 != 0;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
          if (v16 == 1)
          {
            if (!v17)
            {
LABEL_23:
              if (v18) {
                (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
              }
              if (!v19) {
                WTF::fastFree((WTF *)v15, v6);
              }
            }
          }
          else
          {
            uint64_t v22 = v17;
            uint64_t v23 = v18;
            WTF::Lock::unlockSlow((WTF::Lock *)v15);
            uint64_t v18 = v23;
            if (!v22) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_27:
      int v20 = (WebCore::ShareableBitmap *)v27;
      uint64_t v27 = 0;
      if (v20) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v20, v6);
      }
    }
  }
  uint64_t result = (unsigned int *)v28;
  uint64_t v28 = 0;
  if (result)
  {
    if (result[7] == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        return (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      result[7] -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::updateAttachmentIcon(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  uint64_t result = WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v30, *(const WTF::String **)(a1 + 48), a2);
  if (!v30) {
    return result;
  }
  if (*(unsigned char *)(a3 + 64))
  {
    WebCore::ShareableBitmap::create();
    if (v29)
    {
      if (*(unsigned char *)(v30 + 120) != 1)
      {
        WebCore::ShareableBitmap::createImage((uint64_t *)&v26.m_location, (WebCore::ShareableBitmap *)v29);
        WebCore::HTMLAttachmentElement::updateIconForNarrowLayout();
        m_location = (_DWORD *)v26.m_location;
        v26.m_location = 0;
        if (m_location)
        {
          if (m_location[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)m_location + 8))(m_location);
          }
          else {
            --m_location[2];
          }
        }
        goto LABEL_31;
      }
      *(float *)&int v5 = (float)v29[1].m_height;
      *(float *)&v26.m_location.m_double x = (float)v29[1].m_width;
      v26.m_location.m_double y = v5;
      WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v29);
      WebCore::ImageBuffer::create();
      if (v28)
      {
        uint64_t v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
        IntSize v8 = v29[1];
        v26.m_location = 0;
        v26.int32x2_t m_size = v8;
        IntPoint v27 = 0;
        WebCore::ShareableBitmap::paint((WebCore::ShareableBitmap *)v29, v7, &v27, &v26);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::ImageBuffer::toData();
        uint64_t v10 = (WTF::StringImpl *)v27;
        IntPoint v27 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        WebCore::HTMLAttachmentElement::updateIconForWideLayout();
        char v14 = (WTF *)v26.m_location;
        if (v26.m_location)
        {
          v26.m_location = 0;
          v26.m_size.m_double width = 0;
          WTF::fastFree(v14, v11);
        }
        uint64_t v15 = v28;
        uint64_t v28 = 0;
        if (!v15) {
          goto LABEL_31;
        }
        char v16 = 0;
        uint64_t v17 = *(void *)(v15 + 8);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
        if (v16) {
          MEMORY[0x19972E8D0](v17);
        }
        int v18 = 1;
        uint64_t v19 = *(void *)(v17 + 8) - 1;
        *(void *)(v17 + 8) = v19;
        if (v19)
        {
          uint64_t v20 = 0;
          BOOL v21 = 1;
        }
        else
        {
          uint64_t v23 = *(void *)(v17 + 16);
          uint64_t v20 = *(void *)(v17 + 24);
          *(void *)(v17 + 24) = 0;
          BOOL v21 = v23 != 0;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
        if (v18 == 1)
        {
          if (!v19)
          {
LABEL_27:
            if (v20) {
              (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
            }
            if (!v21) {
              WTF::fastFree((WTF *)v17, v11);
            }
          }
        }
        else
        {
          uint64_t v24 = v19;
          uint64_t v25 = v20;
          WTF::Lock::unlockSlow((WTF::Lock *)v17);
          uint64_t v20 = v25;
          if (!v24) {
            goto LABEL_27;
          }
        }
LABEL_31:
        uint64_t v22 = (WebCore::ShareableBitmap *)v29;
        uint64_t v29 = 0;
        if (v22) {
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v22, v11);
        }
        goto LABEL_33;
      }
      uint64_t v13 = (WebCore::ShareableBitmap *)v29;
      uint64_t v29 = 0;
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v6);
    }
  }
  if (*(unsigned char *)(v30 + 120) == 1)
  {
    v26.m_location = 0;
    v26.int32x2_t m_size = 0;
    WebCore::HTMLAttachmentElement::updateIconForWideLayout();
  }
  else
  {
    WebCore::HTMLAttachmentElement::updateIconForNarrowLayout();
    v26.m_location = 0;
  }
LABEL_33:
  uint64_t result = (unsigned int *)v30;
  uint64_t v30 = 0;
  if (result)
  {
    if (result[7] == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        return (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      result[7] -= 2;
    }
  }
  return result;
}

WebCore::Node *WebKit::WebPage::requestAttachmentIcon(const WTF::String **this, const WTF::String *a2, const WebCore::FloatSize *a3)
{
  WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v22, this[6], a2);
  uint64_t result = v22;
  if (v22)
  {
    BOOL v21 = 0;
    uint64_t v7 = WebCore::HTMLAttachmentElement::file(v22);
    if (v7) {
      WTF::String::operator=((uint64_t *)&v21, (WTF::StringImpl **)(v7 + 128));
    }
    WebCore::HTMLAttachmentElement::attachmentType((uint64_t *)&v20, v22);
    WebCore::HTMLAttachmentElement::attachmentTitle((uint64_t *)&v19, v22);
    uint64_t v9 = this[4];
    IntSize v8 = (char *)(this + 4);
    uint64_t v10 = (*((uint64_t (**)(char *))v9 + 7))(v8);
    int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v11 = 2041;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v23 = v11;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v21);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v19);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v11, (float *)a3);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v23, 0);
    uint64_t v13 = v23;
    uint64_t v23 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v17, v18);
    }
    char v14 = v19;
    uint64_t v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v20;
    uint64_t v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    char v16 = v21;
    BOOL v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 7) == 2)
      {
        if ((*((_WORD *)result + 17) & 0x400) == 0) {
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
      }
      else
      {
        *((_DWORD *)result + 7) -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebPage::getApplicationManifest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 88) + 24) + 8);
  if (*(unsigned char *)(v3 + 144)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 296);
  if (v4)
  {
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t v5 = WebCore::Document::loader((WebCore::Document *)v4);
    if (v5)
    {
      char v6 = (_DWORD *)v5;
      ++*(_DWORD *)(v5 + 24);
      WebCore::DocumentLoader::loadApplicationManifest();
      if (v6[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      }
      else {
        --v6[6];
      }
LABEL_8:
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
      return;
    }
  }
  v9[0] = 0;
  char v10 = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 16))(v7, v9);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v10) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v9, v8);
  }
  if (v4) {
    goto LABEL_8;
  }
}

void WebKit::WebPage::getTextFragmentMatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 144))
      {
        uint64_t v8 = *(void *)(v4 + 296);
        if (v8)
        {
          *(_DWORD *)(v8 + 28) += 2;
          uint64_t v9 = *(WTF::StringImpl **)(v8 + 3104);
          if (v9 && (int v10 = *((_DWORD *)v9 + 1), *(_DWORD *)v9 += 2, v10))
          {
            WebCore::FragmentDirectiveParser::FragmentDirectiveParser();
            if (v43)
            {
              long long v38 = 0;
              unsigned int v39 = 0;
              unsigned int v40 = v42;
              if (v42)
              {
                if (v42 >> 27)
                {
                  __break(0xC471u);
                  return;
                }
                int v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v42));
                unsigned int v39 = v42;
                long long v38 = v11;
                unsigned int v12 = v41;
                uint64_t v13 = (WTF::StringImpl *)((char *)v41 + 32 * v42);
                do
                {
                  char v14 = *(_DWORD **)v12;
                  if (*(void *)v12) {
                    *v14 += 2;
                  }
                  *(void *)int v11 = v14;
                  uint64_t v15 = (_DWORD *)*((void *)v12 + 1);
                  if (v15) {
                    *v15 += 2;
                  }
                  *((void *)v11 + 1) = v15;
                  char v16 = (_DWORD *)*((void *)v12 + 2);
                  if (v16) {
                    *v16 += 2;
                  }
                  *((void *)v11 + 2) = v16;
                  uint64_t v17 = (_DWORD *)*((void *)v12 + 3);
                  if (v17) {
                    *v17 += 2;
                  }
                  *((void *)v11 + 3) = v17;
                  unsigned int v12 = (WTF::StringImpl *)((char *)v12 + 32);
                  int v11 = (WTF::StringImpl *)((char *)v11 + 32);
                }
                while (v12 != v13);
              }
              WebCore::FragmentDirectiveRangeFinder::findRangesFromTextDirectives();
              if (v37) {
                WebCore::plainText();
              }
              else {
                uint64_t v35 = 0;
              }
              uint64_t v24 = *a2;
              *a2 = 0;
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v24 + 16))(v24, &v35);
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
              IntRect v26 = v35;
              uint64_t v35 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, v25);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
              WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
              if (v40)
              {
                uint64_t v28 = 32 * v40;
                uint64_t v29 = (char *)v38 + 16;
                do
                {
                  uint64_t v30 = (WTF::StringImpl *)*((void *)v29 + 1);
                  *((void *)v29 + 1) = 0;
                  if (v30)
                  {
                    if (*(_DWORD *)v30 == 2) {
                      WTF::StringImpl::destroy(v30, v27);
                    }
                    else {
                      *(_DWORD *)v30 -= 2;
                    }
                  }
                  long long v31 = *(WTF::StringImpl **)v29;
                  *(void *)uint64_t v29 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2) {
                      WTF::StringImpl::destroy(v31, v27);
                    }
                    else {
                      *(_DWORD *)v31 -= 2;
                    }
                  }
                  long long v32 = (WTF::StringImpl *)*((void *)v29 - 1);
                  *((void *)v29 - 1) = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2) {
                      WTF::StringImpl::destroy(v32, v27);
                    }
                    else {
                      *(_DWORD *)v32 -= 2;
                    }
                  }
                  uint64_t v33 = (WTF::StringImpl *)*((void *)v29 - 2);
                  *((void *)v29 - 2) = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2) {
                      WTF::StringImpl::destroy(v33, v27);
                    }
                    else {
                      *(_DWORD *)v33 -= 2;
                    }
                  }
                  v29 += 32;
                  v28 -= 32;
                }
                while (v28);
              }
              uint64_t v34 = v38;
              if (v38)
              {
                long long v38 = 0;
                unsigned int v39 = 0;
                WTF::fastFree(v34, v27);
              }
            }
            else
            {
              long long v38 = 0;
              uint64_t v21 = *a2;
              *a2 = 0;
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v21 + 16))(v21, &v38);
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
              uint64_t v23 = v38;
              long long v38 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, v22);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            WebCore::FragmentDirectiveParser::~FragmentDirectiveParser((WebCore::FragmentDirectiveParser *)&v41);
          }
          else
          {
            BOOL v41 = 0;
            uint64_t v18 = *a2;
            *a2 = 0;
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v18 + 16))(v18, &v41);
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            uint64_t v20 = v41;
            BOOL v41 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
              {
                WTF::StringImpl::destroy(v20, v19);
                if (!v9) {
                  goto LABEL_67;
                }
                goto LABEL_64;
              }
              *(_DWORD *)v20 -= 2;
            }
            if (!v9) {
              goto LABEL_67;
            }
          }
LABEL_64:
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v19);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
LABEL_67:
          if (*(_DWORD *)(v8 + 28) == 2)
          {
            if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
            }
          }
          else
          {
            *(_DWORD *)(v8 + 28) -= 2;
          }
          return;
        }
      }
    }
  }
  BOOL v41 = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v41);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t v7 = v41;
  BOOL v41 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebKit::WebPage::setCanShowPlaceholder(WebKit::WebPage *this, const WebCore::ElementContext *a2)
{
  uint64_t result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v4);
  uint64_t v3 = v4;
  if (v4)
  {
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 872))(v3);
    if (result) {
      uint64_t result = WebCore::HTMLTextFormControlElement::setCanShowPlaceholder((WebCore::HTMLTextFormControlElement *)v3);
    }
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        uint64_t result = WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::elementForContext@<X0>(uint64_t this@<X0>, const WebCore::ElementContext *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4) {
    BOOL v5 = v4 == *(void *)(this + 40);
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && (uint64_t v7 = this, (this = *((void *)a2 + 8)) != 0) && (this = WebCore::Element::fromIdentifier()) != 0)
  {
    int v8 = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = v8 + 2;
    if ((*(unsigned char *)(this + 22) & 8) == 0) {
      goto LABEL_22;
    }
    uint64_t v9 = *(void **)(*(void *)(this + 48) + 8);
    BOOL v10 = v9[55] == *((void *)a2 + 5) && v9[54] == *((void *)a2 + 4);
    if (!v10 || v9[56] != *((void *)a2 + 6)) {
      goto LABEL_22;
    }
    uint64_t v12 = v9[68];
    if (v12)
    {
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12)
      {
        uint64_t v12 = *(void *)(v12 + 24);
        if (v12) {
          uint64_t v12 = *(void *)(v12 + 8);
        }
      }
    }
    if (v12 == *(void *)(v7 + 48))
    {
      *a3 = this;
    }
    else
    {
LABEL_22:
      *a3 = 0;
      if (v8)
      {
        *(_DWORD *)(this + 28) = v8;
      }
      else if ((*(_WORD *)(this + 34) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t *WebKit::WebPage::contextForElement@<X0>(WebKit::WebPage *this@<X0>, WebCore::Element *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*((void *)a2 + 6) + 8);
  *(_DWORD *)(v4 + 28) += 2;
  uint64_t v18 = v4;
  uint64_t v5 = *((void *)this + 6);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(v4 + 544);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 8);
  }
  if (v10 == v5)
  {
    int v11 = (unsigned int *)(v7 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    v17[0] = WebCore::Element::boundingBoxInRootViewCoordinates(a2);
    v17[1] = v12;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v19, (const WebCore::IntRect *)v17);
    *(void *)&long long v20 = *((void *)this + 5);
    long long v13 = *(_OWORD *)(v18 + 448);
    long long v21 = *(_OWORD *)(v18 + 432);
    long long v22 = v13;
    *(void *)&long long v23 = WebCore::Element::identifier(a2);
    long long v14 = v22;
    *(_OWORD *)(a3 + 32) = v21;
    *(_OWORD *)(a3 + 48) = v14;
    long long v15 = v20;
    *(_OWORD *)a3 = v19;
    *(_OWORD *)(a3 + 16) = v15;
    *(_OWORD *)(a3 + 64) = v23;
    *(unsigned char *)(a3 + 80) = 1;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
LABEL_7:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 80) = 0;
  }
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v18);
}

uint64_t WebKit::WebPage::startTextManipulations(WebKit::WebPage *this, _DWORD *a2, int a3, uint64_t *a4)
{
  if (*((void *)this + 6))
  {
    int v8 = (WTF **)((char *)this + 2352);
    if (*((unsigned char *)this + 2368))
    {
      uint64_t v9 = *((unsigned int *)this + 591);
      uint64_t v10 = (WTF *)*((void *)this + 294);
      if (v9)
      {
        uint64_t v11 = 32 * v9;
        uint64_t v12 = (_DWORD *)((char *)v10 + 24);
        do
        {
          uint64_t v13 = *v12;
          if (v13 != -1) {
            ((void (*)(char *, _DWORD *))off_1EEA00BA0[v13])(&v25, v12 - 4);
          }
          *uint64_t v12 = -1;
          v12 += 8;
          v11 -= 32;
        }
        while (v11);
        uint64_t v10 = *v8;
      }
      if (v10)
      {
        *((void *)this + 294) = 0;
        *((_DWORD *)this + 590) = 0;
        WTF::fastFree(v10, a2);
      }
      uint64_t v14 = *(void *)a2;
      *(void *)a2 = 0;
      *((void *)this + 294) = v14;
      LODWORD(v14) = a2[2];
      a2[2] = 0;
      *((_DWORD *)this + 590) = v14;
      LODWORD(v14) = a2[3];
      a2[3] = 0;
      *((_DWORD *)this + 591) = v14;
    }
    else
    {
      void *v8 = 0;
      *((void *)this + 295) = 0;
      uint64_t v15 = *(void *)a2;
      *(void *)a2 = 0;
      *((void *)this + 294) = v15;
      LODWORD(v15) = a2[2];
      a2[2] = 0;
      *((_DWORD *)this + 590) = v15;
      LODWORD(v15) = a2[3];
      a2[3] = 0;
      *((_DWORD *)this + 591) = v15;
      *((unsigned char *)this + 2368) = 1;
    }
    *((unsigned char *)this + 2344) = a3;
    uint64_t v16 = *(void *)(*((void *)this + 11) + 24);
    if (v16 && (uint64_t v17 = *(void *)(v16 + 8)) != 0)
    {
      if (*(unsigned char *)(v17 + 144)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (atomic_uint *)v17;
      }
      if (a3) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v18 = 0;
      if (a3)
      {
LABEL_19:
        if (!v18) {
          goto LABEL_27;
        }
        atomic_fetch_add(v18 + 2, 1u);
        WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, v18);
        uint64_t Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v18 + 12), 0);
        if (Rendered)
        {
          do
          {
            long long v20 = (atomic_uint *)Rendered;
            atomic_fetch_add((atomic_uint *volatile)(Rendered + 8), 1u);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v18 + 2);
            WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, v20);
            uint64_t Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v20 + 12), 0);
            uint64_t v18 = v20;
          }
          while (Rendered);
        }
        else
        {
          long long v20 = v18;
        }
        long long v21 = (unsigned int *)(v20 + 2);
LABEL_26:
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v21);
        goto LABEL_27;
      }
    }
    if (!v18) {
      goto LABEL_27;
    }
    long long v21 = (unsigned int *)(v18 + 2);
    atomic_fetch_add(v18 + 2, 1u);
    WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, v18);
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v22 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  long long v23 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 8);

  return v23(v22);
}

WTF *WebKit::WebPage::completeTextManipulation(uint64_t a1, long long **a2, uint64_t *a3)
{
  if (*(void *)(a1 + 48) && (unsigned int v5 = *((_DWORD *)a2 + 3)) != 0)
  {
    uint64_t v6 = *a2;
    long long v39 = **a2;
    long long v38 = &v39;
    uint64_t v7 = &v6[3 * v5];
    int v8 = v6;
    do
    {
      if ((void)v39 != *(void *)v8 || *((void *)&v39 + 1) != *((void *)v8 + 1))
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        unsigned int v40 = (WTF *)&v38;
        BOOL v41 = &v35;
        do
        {
          long long v20 = (char *)*((void *)&v39 + 1);
          if ((void)v39 != *(void *)v6 || *((void *)&v39 + 1) != *((void *)v6 + 1))
          {
            unint64_t v22 = v18 - v19;
            if (v18 < v19)
            {
              __break(0xC471u);
              JUMPOUT(0x1993973DCLL);
            }
            unint64_t v23 = *((unsigned int *)a2 + 3);
            BOOL v24 = v23 >= v22;
            char v25 = (long long *)(v23 - v22);
            if (!v24 || (unint64_t)v25 < v19) {
              goto LABEL_33;
            }
            WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>((uint64_t)v34, (uint64_t)&(*a2)[3 * v22], v19);
            WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()((uint64_t)&v40, v22, v34);
            WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v26);
            unint64_t v19 = 0;
            long long v39 = *v6;
          }
          ++v18;
          ++v19;
          v6 += 3;
        }
        while (v6 != v7);
        unint64_t v22 = v18 - v19;
        if (v18 < v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1993973FCLL);
        }
        char v25 = (long long *)*((unsigned int *)a2 + 3);
        long long v20 = (char *)v25 - v22;
        if ((unint64_t)v25 >= v22)
        {
          char v25 = *a2;
          if (v19 == -1) {
            goto LABEL_34;
          }
          if ((unint64_t)v20 >= v19) {
            goto LABEL_35;
          }
        }
LABEL_33:
        __break(1u);
LABEL_34:
        unint64_t v19 = (unint64_t)v20;
LABEL_35:
        WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>((uint64_t)v33, (uint64_t)&v25[3 * v22], v19);
        WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()((uint64_t)&v40, v22, v33);
        WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v27);
        uint64_t v17 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, void, WTF **))(*(void *)v17 + 16))(v17, 0, &v35);
        goto LABEL_36;
      }
      v8 += 3;
    }
    while (v8 != v7);
    {
      long long v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v32);
    }
    uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, v39, *((uint64_t *)&v39 + 1));
    if (!v10) {
      goto LABEL_16;
    }
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = *(void *)(v11 + 24);
    if (!v12 || (uint64_t v13 = *(void *)(v12 + 8)) == 0 || *(unsigned char *)(v13 + 144))
    {
      CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_16:
      unsigned int v40 = 0;
      BOOL v41 = 0;
      uint64_t v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(void *)v14 + 16))(v14, 1, &v40);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      uint64_t result = v40;
      if (!v40) {
        return result;
      }
      unsigned int v40 = 0;
      LODWORD(v41) = 0;
      return (WTF *)WTF::fastFree(result, v15);
    }
    uint64_t v28 = (unsigned int *)(v13 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    uint64_t v29 = *(void *)(*(void *)(v13 + 296) + 3072);
    if (v29)
    {
      WebCore::TextManipulationController::completeManipulation();
      uint64_t v35 = v40;
      uint64_t v36 = v41;
      char v30 = 1;
    }
    else
    {
      char v30 = 0;
      LOBYTE(v35) = 0;
    }
    char v37 = v30;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v28);
    CFRelease(*(CFTypeRef *)(v11 + 8));
    if (!v29) {
      goto LABEL_16;
    }
    uint64_t v31 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, WTF **))(*(void *)v31 + 16))(v31, 0, &v35);
    uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
    if (v37) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(void *)v17 + 16))(v17, 1, &v35);
LABEL_36:
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
LABEL_37:
    uint64_t result = v35;
    if (v35)
    {
      uint64_t v35 = 0;
      LODWORD(v36) = 0;
      return (WTF *)WTF::fastFree(result, v15);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v7 = *(uint64_t ***)a1;
  v45[0] = *a3;
  v45[1] = a3[1];
  v44[0] = 0;
  *a3 = 0;
  v44[1] = 0;
  a3[1] = 0;
  {
    unsigned int v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v40);
  }
  uint64_t v8 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, **v7, (*v7)[1]);
  if (v8)
  {
    uint64_t v10 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v11 = *(void *)(v10 + 24);
    if (v11 && (uint64_t v12 = *(void *)(v11 + 8)) != 0 && !*(unsigned char *)(v12 + 144))
    {
      uint64_t v15 = (unsigned int *)(v12 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
      if (*(void *)(*(void *)(v12 + 296) + 3072))
      {
        WebCore::TextManipulationController::completeManipulation();
        uint64_t v14 = (WTF *)v41;
        unsigned int v3 = HIDWORD(v41);
        int v13 = 1;
      }
      else
      {
        uint64_t v14 = 0;
        int v13 = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = 0;
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = 0;
  }
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v9);
  uint64_t result = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v16);
  if (!v13)
  {
    unsigned int v29 = *((_DWORD *)a3 + 3);
    if (!v29) {
      return result;
    }
    char v30 = *a3;
    uint64_t v31 = (uint64_t)&(*a3)[3 * v29];
    do
    {
      uint64_t v32 = *(void *)(a1 + 8);
      long long v41 = *v30;
      *(void *)&long long v42 = *((void *)v30 + 3);
      *((void *)&v42 + 1) = a2;
      LOBYTE(v43) = 0;
      uint64_t v33 = *(unsigned int *)(v32 + 12);
      if (v33 == *(_DWORD *)(v32 + 8))
      {
        uint64_t result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v41);
        uint64_t v34 = *(void *)v32 + 40 * *(unsigned int *)(v32 + 12);
        uint64_t v35 = *(void *)(result + 32);
        long long v36 = *(_OWORD *)(result + 16);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)result;
        *(_OWORD *)(v34 + 16) = v36;
        *(void *)(v34 + 32) = v35;
      }
      else
      {
        uint64_t v37 = *(void *)v32 + 40 * v33;
        long long v38 = v41;
        long long v39 = v42;
        *(void *)(v37 + 32) = v43;
        *(_OWORD *)uint64_t v37 = v38;
        *(_OWORD *)(v37 + 16) = v39;
      }
      ++*(_DWORD *)(v32 + 12);
      ++a2;
      v30 += 3;
    }
    while (v30 != (long long *)v31);
    goto LABEL_27;
  }
  if (!v3)
  {
LABEL_27:
    if (v13)
    {
      if (v14) {
        return WTF::fastFree(v14, v18);
      }
    }
    return result;
  }
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(unsigned int *)(v19 + 12);
  uint64_t v21 = 40 * v3;
  unint64_t v22 = (unint64_t)v14;
  while (1)
  {
    if (v20 == *(_DWORD *)(v19 + 8))
    {
      uint64_t result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, v22);
      uint64_t v23 = *(void *)v19 + 40 * *(unsigned int *)(v19 + 12);
      uint64_t v24 = *(void *)(result + 32);
      long long v25 = *(_OWORD *)(result + 16);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)result;
      *(_OWORD *)(v23 + 16) = v25;
      *(void *)(v23 + 32) = v24;
    }
    else
    {
      uint64_t v26 = *(void *)v19 + 40 * v20;
      long long v27 = *(_OWORD *)v22;
      long long v28 = *(_OWORD *)(v22 + 16);
      *(void *)(v26 + 32) = *(void *)(v22 + 32);
      *(_OWORD *)uint64_t v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
    }
    ++*(_DWORD *)(v19 + 12);
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = *(unsigned int *)(v19 + 12);
    if (!v20) {
      break;
    }
    *(void *)(*(void *)v19 + 40 * v20 - 16) += a2;
    v22 += 40;
    v21 -= 40;
    if (!v21) {
      goto LABEL_27;
    }
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::WebPage::configureLoggingChannel(uint64_t a1, uint64_t a2, char a3, char a4)
{
  {
    unint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 336);
  if (v8)
  {
    char v9 = 0;
    uint64_t v10 = *(void *)(v8 + 24);
    int v11 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    ++*(void *)(v10 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
    }
    uint64_t v12 = *(void *)(v8 + 32);
    uint64_t v24 = a2;
    char v25 = a3;
    char v26 = a4;
    IPC::Connection::send<Messages::GPUConnectionToWebProcess::ConfigureLoggingChannel>(v12, (uint64_t)&v24, 0, 0, 0);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v13);
  }
  uint64_t v24 = a2;
  char v25 = a3;
  char v26 = a4;
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v14 = a1 + 32;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1882;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v23 = v17;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>(v17, (uint64_t)&v24);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v14 + 32))(v14, &v23, 0);
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

void *WebKit::WebPage::textAutosizingUsesIdempotentModeChanged(void *this)
{
  if ((*(unsigned char *)(*(void *)(this[6] + 112) + 720) & 0x40) == 0 && (this[274] & 0xFFFFFFFFFFFFLL) != 0) {
    return (void *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 270));
  }
  return this;
}

uint64_t WebKit::WebPage::setOverriddenMediaType(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*a2, this[279], a3);
  if ((result & 1) == 0)
  {
    WTF::AtomString::AtomString((WTF::AtomString *)&v11, a2);
    uint64_t v7 = v11;
    int v11 = 0;
    uint64_t v8 = this[279];
    this[279] = v7;
    if (v8)
    {
      int v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_6:
        *(_DWORD *)uint64_t v8 = v9;
        return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
      }
      WTF::StringImpl::destroy(v8, v6);
      uint64_t v8 = v11;
      int v11 = 0;
      if (v8)
      {
        int v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v10);
          return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
        }
        goto LABEL_6;
      }
    }
    return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
  }
  return result;
}

uint64_t WebKit::WebPage::updateCORSDisablingPatterns(uint64_t result, _DWORD *a2)
{
  if (*(void *)(result + 48))
  {
    unsigned int v3 = (WebKit::WebPage *)result;
    uint64_t v4 = (WTF::StringImpl **)(result + 2376);
    uint64_t v5 = *(unsigned int *)(result + 2388);
    if (v5) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*v4, (WTF::StringImpl *)((char *)*v4 + 8 * v5));
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, a2);
    WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(v3);
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(v7, (uint64_t)v4);
    WebCore::Page::setCORSDisablingPatterns();
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::isPlayingMediaDidChange(uint64_t a1, int a2)
{
  int v9 = a2;
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1994;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::OptionSet<WebCore::MediaProducerMediaState>,void>::encode<IPC::Encoder>(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebCore::ShareableBitmap *WebKit::WebPage::requestTextRecognition(WebCore::ShareableBitmap *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if ((*(_WORD *)(a2 + 32) & 0x10) != 0)
  {
    uint64_t v7 = (unsigned int *)result;
    *(_DWORD *)(a2 + 28) += 2;
    uint64_t result = (WebCore::ShareableBitmap *)WebCore::Page::hasCachedTextRecognitionResult(*((WebCore::Page **)result + 6), (const WebCore::HTMLElement *)a2);
    if (result)
    {
      if (!*a4) {
        goto LABEL_24;
      }
      __int16 v67 = 0;
      if (WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)a2, v8))
      {
        *(_DWORD *)(a2 + 28) += 2;
        __int16 v67 = (WebCore::Node *)a2;
      }
      uint64_t v9 = *a4;
LABEL_21:
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v9 + 16))(v9, &v67);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t result = v67;
      __int16 v67 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 7) == 2)
        {
          if ((*((_WORD *)result + 17) & 0x400) == 0) {
            uint64_t result = (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
          }
        }
        else
        {
          *((_DWORD *)result + 7) -= 2;
        }
      }
      goto LABEL_24;
    }
    uint64_t v10 = v7 + 602;
    unint64_t v11 = v7[605];
    if (v11)
    {
      unint64_t v12 = 0;
      int v13 = (_DWORD *)(*v10 + 20);
      while (1)
      {
        uint64_t v14 = *(void *)(v13 - 5);
        if (v14)
        {
          if (*(void *)(v14 + 8) == a2) {
            break;
          }
        }
        ++v12;
        v13 += 6;
        if (v11 == v12) {
          goto LABEL_12;
        }
      }
      uint64_t v21 = *a4;
      if (*a4)
      {
        if (v12 < v11)
        {
          uint64_t v22 = *v13;
          if (v22 == *(v13 - 1))
          {
            uint64_t result = (WebCore::ShareableBitmap *)WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 - 3, v22 + 1, (unint64_t)a4);
            uint64_t v23 = *v13;
            int v24 = v23 + 1;
            uint64_t v25 = *(void *)(v13 - 3);
            uint64_t v26 = *(void *)result;
            *(void *)uint64_t result = 0;
            *(void *)(v25 + 8 * v23) = v26;
          }
          else
          {
            int v24 = v22 + 1;
            uint64_t v30 = *(void *)(v13 - 3);
            *a4 = 0;
            *(void *)(v30 + 8 * v22) = v21;
          }
          _DWORD *v13 = v24;
          goto LABEL_24;
        }
        __break(0xC471u);
        goto LABEL_89;
      }
LABEL_24:
      if (*(_DWORD *)(a2 + 28) != 2)
      {
        *(_DWORD *)(a2 + 28) -= 2;
        return result;
      }
      if ((*(_WORD *)(a2 + 34) & 0x400) == 0)
      {
        uint64_t result = (WebCore::ShareableBitmap *)a2;
        return (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
      }
      return result;
    }
LABEL_12:
    uint64_t v15 = *(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v15) {
      goto LABEL_19;
    }
    if ((*(unsigned char *)((*(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    if ((((*(unsigned char *)((*(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(unsigned char *)((*(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) == 0)
    {
LABEL_19:
      uint64_t v9 = *a4;
      if (!*a4) {
        goto LABEL_24;
      }
      __int16 v67 = 0;
      goto LABEL_21;
    }
    ++*(_DWORD *)((*(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
    LOBYTE(v67) = 0;
    char v68 = 0;
    char v69 = 0;
    char v70 = *(unsigned char *)(a3 + 16);
    WebKit::createShareableBitmap(v15, (uint64_t)&v67, &v72);
    uint64_t result = v72;
    if (v72)
    {
      WebCore::ShareableBitmap::createHandle();
      if (v71)
      {
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        if (*a4)
        {
          uint64_t v16 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v65, 1uLL, (unint64_t)a4);
          uint64_t v17 = HIDWORD(v66);
          int v18 = HIDWORD(v66) + 1;
          uint64_t v19 = v65;
          uint64_t v20 = *v16;
          uint64_t *v16 = 0;
          *(void *)(v19 + 8 * v17) = v20;
          HIDWORD(v66) = v18;
        }
        else
        {
          int v18 = 0;
          uint64_t v19 = 0;
        }
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
        uint64_t v34 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
        if (v34)
        {
          atomic_fetch_add(v34, 1u);
          uint64_t v19 = v65;
          int v18 = HIDWORD(v66);
        }
        uint64_t v61 = (WTF::StringImpl *)v34;
        uint64_t v62 = v19;
        int v35 = v66;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        int v63 = v35;
        int v64 = v18;
        uint64_t v36 = v7[605];
        if (v36 == v7[604])
        {
          unint64_t v37 = WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::expandCapacity<(WTF::FailureAction)0>(v7 + 602, v36 + 1, (unint64_t)&v61);
          uint64_t v38 = *((void *)v7 + 301) + 24 * v7[605];
          uint64_t v39 = *(void *)v37;
          *(void *)unint64_t v37 = 0;
          *(void *)(v38 + 8) = 0;
          *(void *)(v38 + 16) = 0;
          *(void *)uint64_t v38 = v39;
          uint64_t v40 = *(void *)(v37 + 8);
          *(void *)(v37 + 8) = 0;
          *(void *)(v38 + 8) = v40;
          LODWORD(v40) = *(_DWORD *)(v37 + 16);
          *(_DWORD *)(v37 + 16) = 0;
          *(_DWORD *)(v38 + 16) = v40;
          LODWORD(v40) = *(_DWORD *)(v37 + 20);
          *(_DWORD *)(v37 + 20) = 0;
          *(_DWORD *)(v38 + 20) = v40;
        }
        else
        {
          uint64_t v41 = *v10 + 24 * v36;
          uint64_t v61 = 0;
          *(void *)(v41 + 8) = 0;
          *(void *)(v41 + 16) = 0;
          *(void *)uint64_t v41 = v34;
          uint64_t v42 = v62;
          uint64_t v62 = 0;
          *(void *)(v41 + 8) = v42;
          LODWORD(v42) = v63;
          int v63 = 0;
          *(_DWORD *)(v41 + 16) = v42;
          LODWORD(v42) = v64;
          int v64 = 0;
          *(_DWORD *)(v41 + 20) = v42;
        }
        ++v7[605];
        WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v33);
        int v44 = (unsigned int *)v61;
        uint64_t v61 = 0;
        if (v44) {
          WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v44, v43);
        }
        uint64_t v45 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v15 + 224) + 24));
        if (v45)
        {
          WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v45 + 160));
          WebCore::Document::completeURL();
        }
        else
        {
          uint64_t v61 = 0;
          WTF::URL::invalidate((WTF::URL *)&v61);
        }
        if (!v71)
        {
LABEL_89:
          __break(1u);
LABEL_90:
          JUMPOUT(0x199398280);
        }
        uint64_t v46 = v7 + 8;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 6, (uint64_t)(v7 + 4));
        uint64_t v47 = (atomic_uint *)*((void *)v7 + 3);
        if (v47) {
          atomic_fetch_add(v47, 1u);
        }
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
        uint64_t v48 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
        if (v48) {
          atomic_fetch_add(v48, 1u);
        }
        uint64_t v49 = (*(uint64_t (**)(unsigned int *))(*(void *)v46 + 56))(v7 + 8);
        uint64_t v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v50 = 2049;
        *((void *)v50 + 1) = v49;
        *((void *)v50 + 66) = (char *)v50 + 16;
        *((void *)v50 + 67) = 512;
        *((void *)v50 + 68) = 0;
        *((void *)v50 + 70) = 0;
        *((void *)v50 + 69) = 0;
        IPC::Encoder::encodeHeader(v50);
        unint64_t v74 = v50;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v50, (uint64_t *)&v61);
        IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(v50, (unint64_t)&v67);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v50, (uint64_t *)a3);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v50, (uint64_t *)(a3 + 8));
        char v51 = (void *)WTF::fastMalloc((WTF *)0x18);
        *char v51 = &unk_1EEA01110;
        v51[1] = v47;
        v51[2] = v48;
        uint64_t v52 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v73[0] = v51;
        v73[1] = v52;
        (*(void (**)(unsigned int *, IPC::Encoder **, void *, void))(*(void *)v46 + 40))(v46, &v74, v73, 0);
        uint64_t v54 = v73[0];
        v73[0] = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
        uint64_t v55 = v74;
        unint64_t v74 = 0;
        if (v55)
        {
          IPC::Encoder::~Encoder(v55, v53);
          WTF::fastFree(v58, v59);
        }
        int v56 = v61;
        uint64_t v61 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v53);
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
        WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v53);
      }
      else
      {
        uint64_t v31 = *a4;
        if (*a4)
        {
          uint64_t v61 = 0;
          *a4 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v31 + 16))(v31, &v61);
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          uint64_t v32 = v61;
          uint64_t v61 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 7) == 2)
            {
              if ((*((_WORD *)v32 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v32);
              }
            }
            else
            {
              *((_DWORD *)v32 + 7) -= 2;
            }
          }
        }
      }
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v67);
    }
    else
    {
      uint64_t v27 = *a4;
      if (!*a4)
      {
LABEL_69:
        int v57 = *(_DWORD *)(v15 + 16);
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x1993982A0);
        }
        *(_DWORD *)(v15 + 16) = v57 - 1;
        goto LABEL_24;
      }
      __int16 v67 = 0;
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v27 + 16))(v27, &v67);
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      unsigned int v29 = v67;
      __int16 v67 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 7) == 2)
        {
          if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v29);
          }
        }
        else
        {
          *((_DWORD *)v29 + 7) -= 2;
        }
      }
    }
    uint64_t result = v72;
    long long v72 = 0;
    if (result) {
      uint64_t result = (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v28);
    }
    goto LABEL_69;
  }
  uint64_t v60 = *a4;
  if (*a4)
  {
    __int16 v67 = 0;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v60 + 16))(v60, &v67);
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
    uint64_t result = v67;
    __int16 v67 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 7) != 2)
      {
        *((_DWORD *)result + 7) -= 2;
        return result;
      }
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        return (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
      }
    }
  }
  return result;
}

WebCore::Node *WebKit::WebPage::updateWithTextRecognitionResult(uint64_t a1, int a2, WebCore::ElementContext *a3, float *a4, uint64_t *a5)
{
  WebKit::WebPage::elementForContext(a1, a3, &v31);
  uint64_t v8 = v31;
  if (!v31)
  {
LABEL_5:
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    goto LABEL_35;
  }
  int v9 = *((_DWORD *)v31 + 7);
  *((_DWORD *)v31 + 7) = v9 + 2;
  if ((*((_WORD *)v8 + 16) & 0x10) == 0)
  {
    if (v9)
    {
      *((_DWORD *)v8 + 7) = v9;
    }
    else if ((*((_WORD *)v8 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v8);
    }
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v11) {
    BOOL v12 = *(unsigned char *)(v11 + 144) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    WebCore::ImageOverlay::updateWithTextRecognitionResult();
    float v13 = roundf(*a4);
    if (v13 > -2147500000.0) {
      int v14 = (int)v13;
    }
    else {
      int v14 = 0x80000000;
    }
    if (v13 < 2147500000.0) {
      int v15 = v14;
    }
    else {
      int v15 = 0x7FFFFFFF;
    }
    float v16 = roundf(a4[1]);
    if (v16 > -2147500000.0) {
      int v17 = (int)v16;
    }
    else {
      int v17 = 0x80000000;
    }
    if (v16 < 2147500000.0) {
      int v18 = v17;
    }
    else {
      int v18 = 0x7FFFFFFF;
    }
    int8x8_t v19 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v18, v15), (int32x2_t)0xFE000000FE000000);
    v32[0] = (uint64_t)vorr_s8((int8x8_t)(*(void *)&v19 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v18, v15)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v18, v15), 6uLL)), v19));
    WebCore::EventHandler::hitTestResultAtPoint();
    uint64_t v20 = v30;
    if (v30
      && (*((_DWORD *)v30 + 7) += 2, uint64_t v21 = (WebCore::Node *)WebCore::Node::shadowHost(v20), v31 == v21)
      && WebCore::ImageOverlay::isInsideOverlay(v20, v22))
    {
      WebCore::DataDetection::findDataDetectionResultElementInImageOverlay(v32, (WebCore::DataDetection *)a4, v8, v23);
      if (v33)
      {
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v32);
        uint64_t isOverlayText = 2;
      }
      else
      {
        uint64_t isOverlayText = WebCore::ImageOverlay::isOverlayText(v20, v24);
      }
    }
    else
    {
      uint64_t isOverlayText = 0;
    }
    uint64_t v26 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, isOverlayText);
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    if (v20)
    {
      if (*((_DWORD *)v20 + 7) == 2)
      {
        if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v20);
        }
      }
      else
      {
        *((_DWORD *)v20 + 7) -= 2;
      }
    }
    MEMORY[0x199731400](&v29);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
  }
  else
  {
    uint64_t v28 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v28 + 16))(v28, 0);
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (*((_DWORD *)v8 + 7) == 2)
  {
    if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(v8);
    }
  }
  else
  {
    *((_DWORD *)v8 + 7) -= 2;
  }
LABEL_35:
  uint64_t result = v31;
  if (v31)
  {
    if (*((_DWORD *)v31 + 7) == 2)
    {
      if ((*((_WORD *)v31 + 17) & 0x400) == 0) {
        return (WebCore::Node *)WebCore::Node::removedLastRef(v31);
      }
    }
    else
    {
      *((_DWORD *)v31 + 7) -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::startVisualTranslation(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(this + 88) + 24) + 8);
  if (*(unsigned char *)(v3 + 144)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 296);
  if (v4)
  {
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t v7 = (WebCore::ImageAnalysisQueue *)WebCore::Page::imageAnalysisQueue(*(WebCore::Page **)(this + 48));
    this = WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(v7, (Document *)v4, a2, a3);
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
  return this;
}

uint64_t WebKit::WebPage::requestImageBitmap(uint64_t a1, const WebCore::ElementContext *a2, uint64_t *a3)
{
  WebKit::WebPage::elementForContext(a1, a2, &v32);
  uint64_t v4 = v32;
  if (v32)
  {
    uint64_t v5 = *(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if ((*(unsigned char *)((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_42;
      }
      if ((((*(unsigned char *)((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(unsigned char *)((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0x35)) != 0)
      {
        ++*(_DWORD *)((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
        v29[0] = 0;
        v29[8] = 0;
        __int16 v30 = 1;
        WebKit::createShareableBitmap(v5, (uint64_t)v29, &v28);
        if (!v28)
        {
          v29[0] = 0;
          char v31 = 0;
          v26[0] = 0;
          uint64_t v19 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v19 + 16))(v19, v29, v26);
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          uint64_t v11 = v26[0];
          v26[0] = 0;
          if (!v11) {
            goto LABEL_32;
          }
LABEL_24:
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
          goto LABEL_32;
        }
        WebCore::ShareableBitmap::createHandle();
        if (!v31)
        {
          LOBYTE(v26[0]) = 0;
          char v27 = 0;
          uint64_t v25 = 0;
          uint64_t v20 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v20 + 16))(v20, v26, &v25);
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          uint64_t v22 = v25;
          uint64_t v25 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
LABEL_32:
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
          uint64_t result = (uint64_t)v28;
          uint64_t v28 = 0;
          if (result) {
            uint64_t result = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v23);
          }
          int v24 = *(_DWORD *)(v5 + 16);
          if (v24)
          {
            *(_DWORD *)(v5 + 16) = v24 - 1;
LABEL_36:
            if (*(_DWORD *)(v4 + 28) == 2)
            {
              if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
                return WebCore::Node::removedLastRef((WebCore::Node *)v4);
              }
            }
            else
            {
              *(_DWORD *)(v4 + 28) -= 2;
            }
            return result;
          }
LABEL_43:
          uint64_t result = 286;
          __break(0xC471u);
          return result;
        }
        uint64_t v25 = 0;
        uint64_t v6 = (WebCore::CachedImage *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v5 + 224) + 24));
        if (v6)
        {
          uint64_t v7 = (WebCore::Image *)WebCore::CachedImage::image(v6);
          if (v7) {
            WebCore::Image::mimeType((uint64_t *)&v25, v7);
          }
        }
        if (v31)
        {
          double v8 = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v26, (uint64_t)v29);
          char v27 = 1;
          uint64_t v9 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, double))(*(void *)v9 + 16))(v9, v26, &v25, v8);
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
          uint64_t v11 = v25;
          uint64_t v25 = 0;
          if (!v11) {
            goto LABEL_32;
          }
          goto LABEL_24;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    v29[0] = 0;
    char v31 = 0;
    v26[0] = 0;
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v12 + 16))(v12, v29, v26);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    int v14 = v26[0];
    v26[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
    goto LABEL_36;
  }
  v29[0] = 0;
  char v31 = 0;
  v26[0] = 0;
  uint64_t v15 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v15 + 16))(v15, v29, v26);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  int v17 = v26[0];
  v26[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
}

IPC::Encoder *WebKit::WebPage::notifyPageOfAppBoundBehavior(IPC::Encoder *this)
{
  if (!*((unsigned char *)this + 2250) && !*((unsigned char *)this + 2249))
  {
    uint64_t v1 = (char *)this + 32;
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*((void *)this + 4) + 56))((uint64_t)this + 32);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 2071;
    *((void *)v3 + 1) = v2;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v7 = v3;
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v7, 0);
    this = v7;
    uint64_t v7 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::createAppHighlightInSelectedRange(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  char v6 = *(unsigned char *)(a1 + 196);
  *(unsigned char *)(a1 + 196) = a2;
  char v7 = *(unsigned char *)(a1 + 197);
  *(unsigned char *)(a1 + 197) = a3;
  WebCore::Page::checkedFocusController((uint64_t *)v22, *(WebCore::Page **)(a1 + 48));
  uint64_t v8 = WebCore::FocusController::focusedOrMainFrame(v22[0]);
  uint64_t v9 = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  uint64_t v10 = v22[0];
  v22[0] = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x199398EF4);
    }
    --*(_DWORD *)v10;
  }
  if (!v8)
  {
    BOOL v15 = 0;
LABEL_25:
    *(unsigned char *)(a1 + 197) = v7;
    *(unsigned char *)(a1 + 196) = v6;
    return v15;
  }
  uint64_t v11 = *(void *)(v8 + 296);
  if (v11) {
    *(_DWORD *)(v11 + 28) += 2;
  }
  uint64_t v12 = *(void *)(v11 + 544);
  if (!v12 || (uint64_t v13 = *(void *)(v12 + 8)) == 0)
  {
    BOOL v15 = 0;
    goto LABEL_22;
  }
  int v14 = (unsigned int *)(v13 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
  WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v22, (WebCore::VisibleSelection *)(*(void *)(*(void *)(v13 + 296) + 3096) + 56));
  BOOL v15 = v23 != 0;
  if (!v23)
  {
LABEL_21:
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
LABEL_22:
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
    goto LABEL_25;
  }
  WebCore::Document::appHighlightRegistry((WebCore::Document *)v11);
  if (v23)
  {
    WebCore::StaticRange::create();
    WebCore::HighlightRegistry::addAnnotationHighlightWithRange();
    if (v21)
    {
      if (v21[2] == 1) {
        (*(void (**)())(*(void *)v21 + 8))();
      }
      else {
        --v21[2];
      }
    }
    WebCore::Document::appHighlightStorage((WebCore::Document *)v11);
    if (v23)
    {
      WebCore::StaticRange::create();
      uint64_t v16 = *a4;
      *a4 = 0;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      int v17 = (void *)WTF::fastMalloc((WTF *)0x20);
      *int v17 = &unk_1EEA01160;
      v17[1] = v16;
      void v17[2] = a1;
      v17[3] = a1;
      uint64_t v20 = v17;
      WebCore::AppHighlightStorage::storeAppHighlight();
      if (v20) {
        (*(void (**)(void *))(*v20 + 8))(v20);
      }
      goto LABEL_21;
    }
  }
  uint64_t v19 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::WebPage::restoreAppHighlightsAndScrollToIndex(v19);
}

uint64_t WebKit::WebPage::restoreAppHighlightsAndScrollToIndex(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v14, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v14);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v5 = v14;
  int v14 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = *(void *)(result + 296);
    if (v6) {
      *(_DWORD *)(v6 + 28) += 2;
    }
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      int v8 = 0;
      uint64_t v9 = *a2;
      uint64_t v10 = 16 * v7;
      do
      {
        WebCore::SharedMemory::map();
        if (v14)
        {
          WebCore::Document::appHighlightStorage((WebCore::Document *)v6);
          WebCore::SharedMemory::createSharedBuffer(v14);
          WebCore::AppHighlightStorage::restoreAndScrollToAppHighlight();
          if (v13) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v11);
          }
          uint64_t v13 = 0;
          ++v8;
          uint64_t v12 = (unsigned int *)v14;
          int v14 = 0;
          if (v12) {
            WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
          }
        }
        v9 += 16;
        v10 -= 16;
      }
      while (v10);
    }
    if (v6)
    {
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
      }
      else
      {
        *(_DWORD *)(v6 + 28) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::setAppHighlightsVisibility(unsigned int *result, char a2)
{
  *((unsigned char *)result + 2424) = a2;
  uint64_t v2 = *(void *)(*((void *)result + 11) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        while (1)
        {
          if (!*(unsigned char *)(v3 + 144))
          {
            atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
            uint64_t v4 = *(void *)(v3 + 296);
            if (v4)
            {
              *(_DWORD *)(v4 + 28) += 2;
              WebCore::Document::appHighlightRegistry((WebCore::Document *)v4);
              WebCore::HighlightRegistry::setHighlightVisibility();
              if (*(_DWORD *)(v4 + 28) == 2)
              {
                if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v4);
                }
              }
              else
              {
                *(_DWORD *)(v4 + 28) -= 2;
              }
            }
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
          }
          uint64_t Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v3 + 48), 0);
          if (!Rendered) {
            break;
          }
          uint64_t v6 = Rendered;
          atomic_fetch_add((atomic_uint *volatile)(Rendered + 8), 1u);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
          uint64_t v3 = v6;
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::lastNavigationWasAppInitiated(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 160)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    int v8 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v9 = *(unsigned __int8 *)(WebCore::Document::loader(*(WebCore::Document **)(v4 + 296)) + 3535);
    uint64_t v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (unsigned int *)v6(v5);
  }
}

_DWORD *WebKit::WebPage::scrollToRect(WebKit::WebPage *this, const WebCore::FloatRect *a2, const WebCore::FloatPoint *a3)
{
  uint64_t result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    uint64_t v5 = result;
    ++result[2];
    uint64_t v6 = *(void *)a2;
    WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v7, (const WebCore::FloatPoint *)&v6);
    uint64_t result = (_DWORD *)WebCore::LocalFrameView::setScrollPosition();
    if (v5[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return result;
}

WebCore::RenderVideo *WebKit::WebPage::beginTextRecognitionForVideoInElementFullScreen(WebCore::RenderVideo *this, const WebCore::HTMLVideoElement *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(WebCore::ScrollView **)(v3 + 288);
      if (v4)
      {
        uint64_t v6 = this;
        ++*((_DWORD *)v4 + 2);
        this = (WebCore::RenderVideo *)WebCore::HTMLMediaElement::playerIdentifier(a2);
        if (v7) {
          int v8 = this;
        }
        else {
          int v8 = 0;
        }
        uint64_t v22 = v8;
        if (v8)
        {
          this = (WebCore::RenderVideo *)(*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL);
          if (this)
          {
            if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
              goto LABEL_27;
            }
            if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
              || (*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1993995B8);
            }
            if (*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
            {
LABEL_27:
              __break(0xC471u);
              JUMPOUT(0x199399598);
            }
            v20[0] = WebCore::RenderVideo::videoBox(this);
            v20[1] = v10;
            this = (WebCore::RenderVideo *)WebCore::ScrollView::contentsToRootView(v4, (const WebCore::IntRect *)v20);
            v21[0] = this;
            v21[1] = v11;
            if ((int)v11 >= 1 && SHIDWORD(v11) >= 1)
            {
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v20, (const WebCore::IntRect *)v21);
              uint64_t v14 = *((void *)v6 + 4);
              uint64_t v13 = (char *)v6 + 32;
              uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 56))(v13);
              uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v16 = 1873;
              *((void *)v16 + 1) = v15;
              *((void *)v16 + 66) = (char *)v16 + 16;
              *((void *)v16 + 67) = 512;
              *((void *)v16 + 68) = 0;
              *((void *)v16 + 70) = 0;
              *((void *)v16 + 69) = 0;
              IPC::Encoder::encodeHeader(v16);
              char v23 = v16;
              IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, (uint64_t *)&v22);
              IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v16, (float *)v20);
              (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v13 + 32))(v13, &v23, 0);
              this = v23;
              char v23 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder(this, v17);
                this = (WebCore::RenderVideo *)WTF::fastFree(v18, v19);
              }
            }
          }
        }
        if (*((_DWORD *)v4 + 2) == 1) {
          return (WebCore::RenderVideo *)(*(uint64_t (**)(WebCore::ScrollView *))(*(void *)v4 + 8))(v4);
        }
        else {
          --*((_DWORD *)v4 + 2);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1875;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::WebPage::shouldAllowRemoveBackground(uint64_t a1, const WebCore::ElementContext *a2, uint64_t *a3)
{
  WebKit::WebPage::elementForContext(a1, a2, &v19);
  uint64_t v5 = v19;
  if (v19)
  {
    uint64_t v6 = *(void *)(v19 + 16);
    ++*(_DWORD *)(a1 + 2464);
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) == 0 || !*(void *)((v6 & 0xFFFFFFFFFFFFLL) + 8) || (uint64_t v8 = *(void *)(a1 + 2456)) == 0)
    {
LABEL_10:
      uint64_t v16 = 1;
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v8 - 8);
    unint64_t v10 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
    for (int i = 1; ; ++i)
    {
      uint64_t v15 = *(void *)(v8 + 8 * v13);
      if (v15 != -1)
      {
        if (!v15) {
          goto LABEL_10;
        }
        if (v15 == v7) {
          break;
        }
      }
      unsigned int v13 = (v13 + i) & v9;
    }
  }
  uint64_t v16 = 0;
LABEL_12:
  uint64_t v17 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::insertTextPlaceholder(WebCore::Page **a1, const IntSize *a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)v15, a1[6]);
  uint64_t v6 = WebCore::FocusController::focusedOrMainFrame(v15[0]);
  uint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  uint64_t v8 = v15[0];
  v15[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x199399A2CLL);
    }
    --*(_DWORD *)v8;
  }
  if (v6)
  {
    int v9 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
    WebCore::Editor::insertTextPlaceholder((uint64_t *)&v14, v9, a2);
    if (v14)
    {
      WebKit::WebPage::contextForElement((WebKit::WebPage *)a1, v14, (uint64_t)v15);
    }
    else
    {
      LOBYTE(v15[0]) = 0;
      char v16 = 0;
    }
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v12 + 16))(v12, v15);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    unsigned int v13 = v14;
    uint64_t v14 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 7) == 2)
      {
        if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v13);
        }
      }
      else
      {
        *((_DWORD *)v13 + 7) -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    LOBYTE(v15[0]) = 0;
    char v16 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(void *)v10 + 16))(v10, v15);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

uint64_t WebKit::WebPage::removeTextPlaceholder(uint64_t a1, const WebCore::ElementContext *a2, uint64_t *a3)
{
  WebKit::WebPage::elementForContext(a1, a2, &v11);
  uint64_t v4 = v11;
  if (v11)
  {
    uint64_t v5 = *(void *)(*(void *)(*((void *)v11 + 6) + 8) + 544);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = (unsigned int *)(v6 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
        WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
        uint64_t v4 = v11;
        if (((*(uint64_t (**)(WebCore::Node *))(*(void *)v11 + 888))(v11) & 1) == 0)
        {
          uint64_t result = 96;
          __break(0xC471u);
          return result;
        }
        WebCore::Editor::removeTextPlaceholder();
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
      }
    }
    if (*((_DWORD *)v4 + 7) == 2)
    {
      if ((*((_WORD *)v4 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v4);
      }
    }
    else
    {
      *((_DWORD *)v4 + 7) -= 2;
    }
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

unsigned int *WebKit::WebPage::generateTestReport(unsigned int *result)
{
  uint64_t v1 = *(void *)(*((void *)result + 6) + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v1 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
    uint64_t v4 = *(void *)(v1 + 296);
    if (v4)
    {
      *(_DWORD *)(v4 + 28) += 2;
      if (!*(void *)(v4 + 3232)) {
        WebCore::Document::ensureReportingScope((WebCore::Document *)v4);
      }
      WebCore::ReportingScope::generateTestReport();
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return result;
}

uint64_t WebKit::WebPage::pauseAllAnimations(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::setImageAnimationEnabled(*(WebCore::Page **)(a1 + 48));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::playAllAnimations(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::setImageAnimationEnabled(*(WebCore::Page **)(a1 + 48));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPage::shouldSkipDecidePolicyForResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  if (!*((unsigned char *)this + 2255)) {
    return 0;
  }
  int v3 = WebCore::ResourceResponseBase::httpStatusCode(a2);
  uint64_t result = 0;
  if (v3 == 204) {
    return result;
  }
  if (v3 > 399) {
    return result;
  }
  uint64_t result = *(void *)WebCore::ResourceResponseBase::mimeType(a2);
  if (!result) {
    return result;
  }
  uint64_t result = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(result, "text/html");
  if (!result) {
    return result;
  }
  WebCore::ResourceResponseBase::url(a2);
  if (WTF::URL::protocolIs()) {
    return 0;
  }
  WebCore::ResourceResponseBase::httpHeaderField();
  WTF::String::split();
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v8) {
    WTF::String::trim();
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
  return 1;
}

uint64_t WebKit::WebPage::logger(WebKit::WebPage *this)
{
  if (!*((void *)this + 312))
  {
    uint64_t v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(void *)uint64_t v2 = &unk_1EE9BEFD8;
    *(unsigned char *)(v2 + 12) = 1;
    *(void *)(v2 + 16) = this;
    int v3 = (unsigned int *)*((void *)this + 312);
    *((void *)this + 312) = v2;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 312);
    char isAlwaysOnLoggingAllowed = WebKit::WebPage::isAlwaysOnLoggingAllowed(this);
    if (*(WebKit::WebPage **)(v4 + 16) == this) {
      *(unsigned char *)(v4 + 12) = isAlwaysOnLoggingAllowed;
    }
  }
  return *((void *)this + 312);
}

uint64_t WebKit::WebPage::isAlwaysOnLoggingAllowed(WebKit::WebPage *this)
{
  uint64_t v1 = (WebCore::Page *)*((void *)this + 6);
  if (!v1) {
    return 0;
  }
  ++*(_DWORD *)v1;
  uint64_t isAlwaysOnLoggingAllowed = WebCore::Page::isAlwaysOnLoggingAllowed(v1);
  WTF::RefCounted<WebCore::Page>::deref(v1);
  return isAlwaysOnLoggingAllowed;
}

void WebKit::WebPage::useRedirectionForCurrentNavigation(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v6 = (unsigned int *)(v3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    uint64_t v7 = *(void *)(v3 + 280);
    int v8 = *(WebCore::DocumentLoader **)(v7 + 104);
    if (v8 || (int v8 = *(WebCore::DocumentLoader **)(v7 + 96)) != 0)
    {
      ++*((_DWORD *)v8 + 6);
      uint64_t v9 = WebCore::DocumentLoader::mainResourceLoader(v8);
      uint64_t v10 = qword_1EB358050;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          uint64_t v12 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = a1;
          __int16 v28 = 2048;
          uint64_t v29 = v12;
          _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation to network process", buf, 0x16u);
        }
        {
          uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v25);
        }
        uint64_t v13 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                        + 24);
        uint64_t v26 = *(void *)(v9 + 744);
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 293;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        *(void *)buf = v14;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v14, &v26);
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v14, a2);
        IPC::Connection::sendMessageImpl(v13, (uint64_t *)buf, 0, 0);
        char v16 = *(IPC::Encoder **)buf;
        *(void *)buf = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v15);
          WTF::fastFree(v17, v18);
        }
      }
      else
      {
        if (v11)
        {
          uint64_t v19 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = a1;
          __int16 v28 = 2048;
          uint64_t v29 = v19;
          _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation as substiute data", buf, 0x16u);
        }
        WebCore::DocumentLoader::setRedirectionAsSubstituteData();
      }
      if (*((_DWORD *)v8 + 6) == 1) {
        (*(void (**)(WebCore::DocumentLoader *))(*(void *)v8 + 24))(v8);
      }
      else {
        --*((_DWORD *)v8 + 6);
      }
    }
    else
    {
      char v23 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v28 = 2048;
        uint64_t v29 = v24;
        _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation failed without loader", buf, 0x16u);
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    uint64_t v20 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v28 = 2048;
      uint64_t v29 = v22;
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation failed without frame", buf, 0x16u);
    }
  }
}

WebCore *WebKit::WebPage::dispatchLoadEventToFrameOwnerElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t result = (WebCore *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (result)
  {
    uint64_t v4 = *((void *)result + 3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 144))
        {
          uint64_t v6 = *(void *)(v5 + 120);
          if (v6)
          {
            uint64_t v7 = *(void *)(v6 + 8);
            if (v7)
            {
              uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v8 || (uint64_t result = *(WebCore **)(v8 + 96)) == 0) {
                uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
              }
              if (!*((void *)result + 5)) {
                WebCore::ThreadGlobalData::initializeEventNames(result);
              }
              WebCore::Event::create();
              (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
              uint64_t result = v10;
              if (v10)
              {
                if (*((_DWORD *)v10 + 4) == 1) {
                  return (WebCore *)(*(uint64_t (**)())(*(void *)v10 + 8))();
                }
                else {
                  --*((_DWORD *)v10 + 4);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::frameWasFocusedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t result = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (result)
  {
    return WebCore::FocusController::setFocusedFrame();
  }
  return result;
}

void WebKit::WebPage::remotePostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
    uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v8 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a5, a6);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10)
    {
      BOOL v11 = *(WebCore::LocalFrame **)(v10 + 8);
      if (v11)
      {
        if (!*((unsigned char *)v11 + 144))
        {
          uint64_t v12 = (_DWORD *)WebCore::LocalFrame::window(v11);
          if (v12)
          {
            uint64_t v13 = v12;
            ++v12[6];
            uint64_t v14 = WebCore::LocalDOMWindow::frame((WebCore::LocalDOMWindow *)v12);
            if (v14)
            {
              uint64_t v15 = v14;
              char v16 = (unsigned int *)(v14 + 8);
              atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
              {
                uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                WebKit::WebProcess::WebProcess(v25);
              }
              uint64_t v17 = (CFTypeRef *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
              int v18 = v17;
              if (v17 && (uint64_t v17 = (CFTypeRef *)CFRetain(v17[1]), (v19 = v18[3]) != 0) && (v20 = v19[1]) != 0)
              {
                uint64_t v21 = *(WebCore::WindowProxy **)(v20 + 112);
                if (v21) {
                  ++*(_DWORD *)v21;
                }
              }
              else
              {
                uint64_t v21 = 0;
              }
              uint64_t v22 = *(WebCore::ScriptController **)(v15 + 304);
              char v23 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld((WebCore *)v17);
              if (*(void *)(WebCore::ScriptController::jsWindowProxy(v22, v23) + 16)) {
                WebCore::LocalDOMWindow::postMessageFromRemoteFrame();
              }
              if (v21) {
                WTF::RefCounted<WebCore::WindowProxy>::deref(v21);
              }
              if (v18) {
                CFRelease(v18[1]);
              }
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
            }
            if (v13[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v13 + 72))(v13);
            }
            else {
              --v13[6];
            }
          }
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebPage::renderTreeAsTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  {
    uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  uint64_t v8 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0 && !*(unsigned char *)(v11 + 144))
    {
      atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
      uint64_t v15 = (WebCore *)WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)v11);
      if (v15)
      {
        WebCore::createTextStream((uint64_t *)&v28, v15, v16);
        int v30 = a4;
        WebCore::externalRepresentationForLocalFrame();
        WTF::TextStream::release((uint64_t *)&v27, (WTF::TextStream *)&v28);
        uint64_t v17 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v17 + 16))(v17, &v27);
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        uint64_t v19 = v27;
        char v27 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t v21 = v29;
        uint64_t v29 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v18);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v20 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v28);
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      uint64_t v22 = v28;
      __int16 v28 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v18);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v12 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v12 + 16))(v12, &v28);
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v14 = v28;
      __int16 v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v23 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v23 + 16))(v23, &v28);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    uint64_t v25 = v28;
    __int16 v28 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
}

void WebKit::WebPage::frameTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v5)
  {
    uint64_t v6 = (CFTypeRef *)v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    WebKit::WebFrame::frameTextForTesting((WTF::StringImpl *)v6, 1, &v14);
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v14);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    CFRelease(v6[1]);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v10 + 16))(v10, &v14);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

uint64_t WebKit::WebPage::requestTargetedElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(WebCore::Page **)(a1 + 48);
  if (!v4)
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v9 + 16))(v9, v12);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
  }
  ++*(_DWORD *)v4;
  WebCore::Page::checkedElementTargetingController((uint64_t *)&v11, v4);
  WebCore::ElementTargetingController::findTargets();
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, v12);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    if (!*v7)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*v7;
  }
  return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
}

_DWORD *WebKit::WebPage::requestTextExtraction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(_DWORD **)(a1 + 48);
  ++*v4;
  WebCore::TextExtraction::extractItem();
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v8);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  if (v9 != -1) {
    ((void (*)(char *, unsigned char *))off_1EEA00BB8[v9])(&v11, v8);
  }
  int v9 = -1;
  return WTF::RefCounted<WebCore::Page>::deref(v4);
}

uint64_t WebKit::WebPage::remoteViewRectToRootView(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  float v9 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a6, a7, a1, a2, a3, a4);
  uint64_t v10 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, float))(*(void *)v10 + 16))(v10, v9);
  char v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

float WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  float v6 = a3;
  *(float *)char v16 = a3;
  *(float *)&v16[1] = a4;
  *(float *)&float v16[2] = a5;
  *(float *)&v16[3] = a6;
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a1, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 144))
        {
          char v11 = (unsigned int *)(v10 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
          uint64_t v12 = *(WebCore::ScrollView **)(v10 + 256);
          if (v12)
          {
            ++*((_DWORD *)v12 + 2);
            WebCore::ScrollView::contentsToRootView(v12, (const WebCore::FloatRect *)v16);
            float v6 = v13;
            if (*((_DWORD *)v12 + 2) == 1) {
              (*(void (**)(WebCore::ScrollView *))(*(void *)v12 + 8))(v12);
            }
            else {
              --*((_DWORD *)v12 + 2);
            }
          }
          else
          {
            float v6 = *(float *)v16;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return v6;
}

uint64_t WebKit::WebPage::remoteViewPointToRootView(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  float v7 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(a4, a5, a1, a2);
  uint64_t v8 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, float))(*(void *)v8 + 16))(v8, v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

float WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v4 = a3;
  *(float *)uint64_t v14 = a3;
  *(float *)&v14[1] = a4;
  {
    float v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a1, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 144))
        {
          uint64_t v9 = (unsigned int *)(v8 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
          uint64_t v10 = *(WebCore::ScrollView **)(v8 + 256);
          if (v10)
          {
            ++*((_DWORD *)v10 + 2);
            WebCore::ScrollView::contentsToRootView(v10, (const WebCore::FloatPoint *)v14);
            float v4 = v11;
            if (*((_DWORD *)v10 + 2) == 1) {
              (*(void (**)(WebCore::ScrollView *))(*(void *)v10 + 8))(v10);
            }
            else {
              --*((_DWORD *)v10 + 2);
            }
          }
          else
          {
            float v4 = *(float *)v14;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return v4;
}

WTF *WebKit::WebPage::remoteDictionaryPopupInfoToRootView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  *(float *)a4 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(a2, a3, *(float *)a4, *((float *)a4 + 1));
  *((_DWORD *)a4 + 1) = v9;
  *((float *)a4 + 2) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 2), *((float *)a4 + 3), *((float *)a4 + 4), *((float *)a4 + 5));
  *((_DWORD *)a4 + 3) = v10;
  *((_DWORD *)a4 + 4) = v11;
  *((_DWORD *)a4 + 5) = v12;
  *((float *)a4 + 6) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 6), *((float *)a4 + 7), *((float *)a4 + 8), *((float *)a4 + 9));
  *((_DWORD *)a4 + 7) = v13;
  *((_DWORD *)a4 + 8) = v14;
  *((_DWORD *)a4 + 9) = v15;
  *((float *)a4 + 10) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 10), *((float *)a4 + 11), *((float *)a4 + 12), *((float *)a4 + 13));
  *((_DWORD *)a4 + 11) = v16;
  *((_DWORD *)a4 + 12) = v17;
  *((_DWORD *)a4 + 13) = v18;
  if (*((_DWORD *)a4 + 17))
  {
    uint64_t v19 = (float *)a4[7];
    do
    {
      *uint64_t v19 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *v19, v19[1], v19[2], v19[3]);
      *((_DWORD *)v19 + 1) = v20;
      *((_DWORD *)v19 + 2) = v21;
      *((_DWORD *)v19 + 3) = v22;
      v19 += 4;
    }
    while (v19 != (float *)(a4[7] + 16 * *((unsigned int *)a4 + 17)));
  }
  uint64_t v51 = *a4;
  long long v52 = *(_OWORD *)(a4 + 1);
  long long v53 = *(_OWORD *)(a4 + 3);
  long long v54 = *(_OWORD *)(a4 + 5);
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v55, (uint64_t)(a4 + 7));
  int v57 = *((_DWORD *)a4 + 18);
  uint64_t v23 = a4[10];
  if (v23) {
    ++*(_DWORD *)(v23 + 8);
  }
  *(void *)&long long v58 = v23;
  uint64_t v24 = a4[11];
  if (v24) {
    ++*(_DWORD *)(v24 + 8);
  }
  *((void *)&v58 + 1) = v24;
  uint64_t v25 = (_DWORD *)a4[12];
  if (v25) {
    ++v25[2];
  }
  char v59 = v25;
  WebCore::Color::Color((WebCore::Color *)&v60, (const Color *)a4 + 13);
  int v61 = *((_DWORD *)a4 + 28);
  MEMORY[0x199732DC0](v62, a4 + 15);
  uint64_t v26 = *a5;
  *a5 = 0;
  long long v64 = v52;
  long long v65 = v53;
  long long v66 = v54;
  char v27 = v55;
  uint64_t v55 = 0;
  uint64_t v63 = v51;
  __int16 v67 = v27;
  uint64_t v28 = v56;
  uint64_t v56 = 0;
  uint64_t v68 = v28;
  int v69 = v57;
  long long v29 = v58;
  long long v58 = 0u;
  long long v70 = v29;
  char v71 = v59;
  char v59 = 0;
  WebCore::Color::Color();
  int v73 = v61;
  WebCore::AttributedString::AttributedString();
  long long v76 = v64;
  long long v77 = v65;
  long long v78 = v66;
  int v30 = v67;
  __int16 v67 = 0;
  uint64_t v75 = v63;
  uint64_t v79 = v30;
  uint64_t v31 = v68;
  uint64_t v68 = 0;
  uint64_t v80 = v31;
  int v81 = v69;
  long long v32 = v70;
  long long v70 = 0u;
  long long v82 = v32;
  uint64_t v83 = v71;
  char v71 = 0;
  WebCore::Color::Color();
  int v85 = v73;
  WebCore::AttributedString::AttributedString();
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 16))(v26, &v75);
  MEMORY[0x199732DE0](&v86);
  if ((v84 & 0x8000000000000) != 0)
  {
    uint64_t v48 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v48);
      WTF::fastFree((WTF *)v48, v33);
    }
  }
  uint64_t v34 = v83;
  uint64_t v83 = 0;
  if (v34)
  {
    if (v34[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
    }
    else {
      --v34[2];
    }
  }
  int v35 = (_DWORD *)*((void *)&v82 + 1);
  *((void *)&v82 + 1) = 0;
  if (v35)
  {
    if (v35[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
    }
    else {
      --v35[2];
    }
  }
  uint64_t v36 = (_DWORD *)v82;
  *(void *)&long long v82 = 0;
  if (v36)
  {
    if (v36[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
    }
    else {
      --v36[2];
    }
  }
  unint64_t v37 = v79;
  if (v79)
  {
    uint64_t v79 = 0;
    LODWORD(v80) = 0;
    WTF::fastFree(v37, v33);
  }
  MEMORY[0x199732DE0](&v74);
  if ((v72 & 0x8000000000000) != 0)
  {
    uint64_t v49 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v38);
    }
  }
  uint64_t v39 = v71;
  char v71 = 0;
  if (v39)
  {
    if (v39[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
    }
    else {
      --v39[2];
    }
  }
  uint64_t v40 = (_DWORD *)*((void *)&v70 + 1);
  *((void *)&v70 + 1) = 0;
  if (v40)
  {
    if (v40[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v40 + 8))(v40);
    }
    else {
      --v40[2];
    }
  }
  uint64_t v41 = (_DWORD *)v70;
  *(void *)&long long v70 = 0;
  if (v41)
  {
    if (v41[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
    }
    else {
      --v41[2];
    }
  }
  uint64_t v42 = v67;
  if (v67)
  {
    __int16 v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v42, v38);
  }
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  MEMORY[0x199732DE0](v62);
  if ((v60 & 0x8000000000000) != 0)
  {
    uint64_t v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v43);
    }
  }
  int v44 = v59;
  char v59 = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  uint64_t v45 = (_DWORD *)*((void *)&v58 + 1);
  *((void *)&v58 + 1) = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  uint64_t v46 = (_DWORD *)v58;
  *(void *)&long long v58 = 0;
  if (v46)
  {
    if (v46[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v46 + 8))(v46);
    }
    else {
      --v46[2];
    }
  }
  uint64_t result = v55;
  if (v55)
  {
    uint64_t v55 = 0;
    LODWORD(v56) = 0;
    return (WTF *)WTF::fastFree(result, v43);
  }
  return result;
}

uint64_t WebKit::WebPage::adjustVisibilityForTargetedElements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float v4 = *(WebCore::Page **)(a1 + 48);
  if (v4)
  {
    ++*(_DWORD *)v4;
    WebCore::Page::checkedElementTargetingController((uint64_t *)&v11, v4);
    uint64_t v5 = WebCore::ElementTargetingController::adjustVisibility();
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = v11;
    int v11 = 0;
    if (!v7) {
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    if (*v7)
    {
      --*v7;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    uint64_t result = 286;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
  return result;
}

uint64_t WebKit::WebPage::resetVisibilityAdjustmentsForTargetedElements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float v4 = *(WebCore::Page **)(a1 + 48);
  if (v4)
  {
    ++*(_DWORD *)v4;
    WebCore::Page::checkedElementTargetingController((uint64_t *)&v11, v4);
    uint64_t v5 = WebCore::ElementTargetingController::resetVisibilityAdjustments();
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = v11;
    int v11 = 0;
    if (!v7) {
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    if (*v7)
    {
      --*v7;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    uint64_t result = 286;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
  return result;
}

WTF::MachSendRight *WebKit::WebPage::takeSnapshotForTargetedElement(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(WebCore::Page **)(a1 + 48);
  if (v5)
  {
    ++*(_DWORD *)v5;
    WebCore::Page::checkedElementTargetingController((uint64_t *)&v27, v5);
    long long v7 = a3[1];
    long long v31 = *a3;
    long long v32 = v7;
    WebCore::ElementTargetingController::snapshotIgnoringVisibilityAdjustment();
    uint64_t v8 = v27;
    char v27 = 0;
    if (v8)
    {
      if (!*v8)
      {
        __break(0xC471u);
        JUMPOUT(0x19939BFFCLL);
      }
      --*v8;
    }
    if (v26)
    {
      v23[0] = (*(float (**)(_DWORD *, void))(*(void *)v26 + 168))(v26, 0);
      v23[1] = v9;
      WebCore::IntSize::IntSize((WebCore::IntSize *)&v24, (const WebCore::FloatSize *)v23);
      LOBYTE(v21) = 0;
      char v22 = 0;
      MEMORY[0x199738D60](&v27, &v24, &v21, 0);
      WebCore::ShareableBitmap::create();
      if (v29)
      {
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      if (v22)
      {
        CFTypeRef v11 = v21;
        CFTypeRef v21 = 0;
        if (v11) {
          CFRelease(v11);
        }
      }
      if (v25)
      {
        WebCore::ShareableBitmap::createGraphicsContext(&v24, v25);
        if (v24)
        {
          char v27 = 0;
          WebCore::GraphicsContext::drawImage();
          WebCore::ShareableBitmap::createHandle();
        }
        else
        {
          LOBYTE(v27) = 0;
          char v30 = 0;
        }
        uint64_t v15 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _DWORD **))(*(void *)v15 + 16))(v15, &v27);
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
        uint64_t v16 = v24;
        uint64_t v24 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      else
      {
        LOBYTE(v27) = 0;
        char v30 = 0;
        uint64_t v13 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _DWORD **))(*(void *)v13 + 16))(v13, &v27);
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
      }
      int v17 = v25;
      uint64_t v25 = 0;
      if (v17) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v17, v14);
      }
    }
    else
    {
      LOBYTE(v27) = 0;
      char v30 = 0;
      uint64_t v12 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _DWORD **))(*(void *)v12 + 16))(v12, &v27);
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
    }
    int v18 = v26;
    uint64_t v26 = 0;
    if (v18)
    {
      if (v18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
      }
      else {
        --v18[2];
      }
    }
    return (WTF::MachSendRight *)WTF::RefCounted<WebCore::Page>::deref(v5);
  }
  else
  {
    LOBYTE(v27) = 0;
    char v30 = 0;
    uint64_t v20 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(void *)v20 + 16))(v20, &v27);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
  }
}

uint64_t WebKit::WebPage::numberOfVisibilityAdjustmentRects(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(WebCore::Page **)(a1 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::checkedElementTargetingController((uint64_t *)&v10, v3);
    uint64_t v4 = WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(v10);
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v6 = v10;
    CFTypeRef v10 = 0;
    if (!v6) {
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    }
    if (*(_DWORD *)v6)
    {
      --*(_DWORD *)v6;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    }
    uint64_t result = 286;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
    int v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  return result;
}

uint64_t WebKit::WebPage::startObservingNowPlayingMetadata(uint64_t this)
{
  if (!*(void *)(this + 2488))
  {
    uint64_t v1 = this;
    uint64_t v2 = (uint64_t *)(this + 2488);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(this + 24), this + 16);
    uint64_t v3 = *(atomic_uint **)(v1 + 24);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    uint64_t v5 = (WebCore::PlatformMediaSessionManager *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EEA00BE8;
    *((void *)v5 + 1) = v3;
    *uint64_t v4 = 0;
    v4[1] = v5;
    uint64_t v6 = *v2;
    uint64_t *v2 = (uint64_t)v4;
    if (v6) {
      std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)v2, v6);
    }
    uint64_t v7 = WebCore::PlatformMediaSessionManager::sharedManager(v5);
    uint64_t v8 = *v2;
    return MEMORY[0x1F41718E0](v7, v8);
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 32;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1892;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  CFTypeRef v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  CFTypeRef v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::frameNameWasChangedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl **a4)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        int v9 = (unsigned int *)(v8 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
        CFTypeRef v10 = (WebCore::FrameTree *)(v8 + 48);
        WTF::AtomString::AtomString((WTF::AtomString *)&v14, a4);
        WebCore::FrameTree::setSpecifiedName(v10, &v14);
        m_ptr = v14.var0.m_impl.m_ptr;
        v14.var0.m_impl.m_ptr = 0;
        if (m_ptr)
        {
          if (*(_DWORD *)m_ptr == 2) {
            WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v11);
          }
          else {
            *(_DWORD *)m_ptr -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
      }
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

uint64_t WebKit::WebPage::updateLastNodeBeforeWritingSuggestions(uint64_t this, const WebCore::KeyboardEvent *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (uint64_t v5 = *(WebCore::ThreadGlobalData **)(v4 + 96)) == 0)
  {
    this = WebCore::threadGlobalDataSlow((WebCore *)this);
    uint64_t v5 = (WebCore::ThreadGlobalData *)this;
  }
  uint64_t v6 = *((void *)v5 + 5);
  if (!v6)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames(v5);
    uint64_t v6 = *((void *)v5 + 5);
  }
  if (*((void *)a2 + 3) == *(void *)(v6 + 1056))
  {
    WebCore::Page::checkedFocusController((uint64_t *)&v15, *(WebCore::Page **)(v3 + 48));
    this = WebCore::FocusController::focusedOrMainFrame(v15);
    uint64_t v7 = this;
    if (this) {
      atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u);
    }
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      if (!*(_DWORD *)v8)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      --*(_DWORD *)v8;
    }
    if (this)
    {
      int v9 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(this + 296));
      uint64_t v10 = WebCore::Editor::nodeBeforeWritingSuggestions(v9);
      if (v10)
      {
        uint64_t v12 = v10;
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(v10 + 16), v10);
        uint64_t v13 = (atomic_uint *)(*(void *)(v12 + 16) & 0xFFFFFFFFFFFFLL);
        if (v13) {
          atomic_fetch_add(v13, 1u);
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      AtomString v14 = *(unsigned int **)(v3 + 2336);
      *(void *)(v3 + 2336) = v13;
      if (v14) {
        WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v14, v11);
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
    }
  }
  return this;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::SetAllowsLayoutViewportHeightExpansion>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2063;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

IPC::Encoder *WebKit::WebPage::hasActiveNowPlayingSessionChanged(WebKit::WebPage *this, char a2)
{
  char v9 = a2;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1986;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned int *WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (!*(unsigned char *)(v5 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
        uint64_t v117 = v5;
        uint64_t v8 = *(WebCore::ScrollView **)(v5 + 288);
        if (!v8) {
          goto LABEL_5;
        }
        ++*((_DWORD *)v8 + 2);
        uint64_t v9 = *(void *)(v5 + 296);
        if (v9)
        {
          *(_DWORD *)(v9 + 28) += 2;
          uint64_t v11 = WebCore::Document::body((WebCore::Document *)v9);
          if (v11)
          {
            uint64_t v12 = (WebCore *)v11;
            *(_DWORD *)(v11 + 28) += 2;
            unsigned int v115 = 0;
            uint64_t v116 = 0;
            v114.i64[0] = WebCore::ScrollView::unobscuredContentRect();
            v114.i64[1] = (uint64_t)v13;
            URL v107 = v12;
            WebCore::makeRangeSelectingNodeContents(&v111, v12, v13);
            unsigned __int8 v14 = MEMORY[0x19973C250](&v111, v113);
            if (v14 == 129 || ((char)v14 & 0x80000000) == 0) {
              goto LABEL_65;
            }
            do
            {
              WebCore::findPlainText();
              uint64_t v15 = *(void *)&v120[2];
              if (*(void *)buf == *(void *)&v120[2] && *(_DWORD *)&buf[8] == v121)
              {
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v120[2]);
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)buf);
                break;
              }
              *(_DWORD *)(*(void *)&v120[2] + 28) += 2;
              uint64_t v17 = v111;
              uint64_t v111 = v15;
              *(void *)uint64_t v135 = v17;
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v135);
              int v112 = v121;
              uint64_t v18 = *(void *)buf;
              *(_DWORD *)(*(void *)buf + 28) += 2;
              while (1)
              {
                uint64_t v19 = v18;
                if ((*(_WORD *)(v18 + 32) & 0x10) != 0) {
                  break;
                }
LABEL_21:
                uint64_t v20 = WebCore::Node::parentElementInComposedTree((WebCore::Node *)v18);
                uint64_t v18 = v20;
                if (v20) {
                  *(_DWORD *)(v20 + 28) += 2;
                }
                if (*(_DWORD *)(v19 + 28) == 2)
                {
                  if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
                    WebCore::Node::removedLastRef((WebCore::Node *)v19);
                  }
                }
                else
                {
                  *(_DWORD *)(v19 + 28) -= 2;
                }
                if (!v18) {
                  goto LABEL_55;
                }
              }
              *(_DWORD *)(v18 + 28) += 2;
              if ((WebCore::Node::willRespondToMouseClickEvents((WebCore::Node *)v18, 0) & 1) == 0
                && (*(_WORD *)(v18 + 34) & 1) == 0)
              {
                if (*(_DWORD *)(v18 + 28) == 2)
                {
                  if ((*(_WORD *)(v18 + 34) & 0x400) == 0) {
                    WebCore::Node::removedLastRef((WebCore::Node *)v18);
                  }
                }
                else
                {
                  *(_DWORD *)(v18 + 28) -= 2;
                }
                goto LABEL_21;
              }
              if (*(_DWORD *)(v18 + 28) == 2)
              {
                if ((*(_WORD *)(v18 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v18);
                }
              }
              else
              {
                *(_DWORD *)(v18 + 28) -= 2;
              }
              WebCore::RenderObject::absoluteBorderAndTextRects();
              if (HIDWORD(v110))
              {
                uint64_t v22 = 0;
                unint64_t v23 = 0;
                while (1)
                {
                  *(void *)uint64_t v135 = WebCore::enclosingIntRect((WTF *)((char *)v109 + v22), v21);
                  *(void *)&v135[8] = v24;
                  if (WebCore::IntRect::intersects((WebCore::IntRect *)&v114, (const WebCore::IntRect *)v135)) {
                    break;
                  }
                  ++v23;
                  v22 += 16;
                  if (v23 >= HIDWORD(v110)) {
                    goto LABEL_50;
                  }
                }
                *(void *)uint64_t v135 = v19;
                if (v23 >= HIDWORD(v110))
                {
                  __break(0xC471u);
LABEL_188:
                  JUMPOUT(0x19939D660);
                }
                float v25 = roundf(*(float *)((char *)v109 + v22) + (float)(*(float *)((char *)v109 + v22 + 8) * 0.5));
                uint64_t v26 = (int)v25;
                if (v25 <= -2147500000.0) {
                  uint64_t v26 = 0x80000000;
                }
                if (v25 >= 2147500000.0) {
                  uint64_t v26 = 0x7FFFFFFFLL;
                }
                float v27 = roundf(*(float *)((char *)v109 + v22 + 4) + (float)(*(float *)((char *)v109 + v22 + 12) * 0.5));
                if (v27 >= 2147500000.0)
                {
                  unint64_t v28 = 0x7FFFFFFF00000000;
                }
                else if (v27 <= -2147500000.0)
                {
                  unint64_t v28 = 0x8000000000000000;
                }
                else
                {
                  unint64_t v28 = (unint64_t)(int)v27 << 32;
                }
                *(void *)&v135[8] = v28 | v26;
                int v29 = HIDWORD(v116);
                if (HIDWORD(v116) == v116)
                {
                  WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)> &&>((uint64_t)&v115, (unint64_t)v135);
                }
                else
                {
                  char v30 = (uint64_t *)((char *)v115 + 16 * HIDWORD(v116));
                  *(void *)uint64_t v135 = 0;
                  *char v30 = v19;
                  v30[1] = *(void *)&v135[8];
                  HIDWORD(v116) = v29 + 1;
                }
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v135);
                uint64_t v19 = 0;
              }
LABEL_50:
              long long v31 = v109;
              if (v109)
              {
                CFTypeRef v109 = 0;
                LODWORD(v110) = 0;
                WTF::fastFree(v31, v21);
              }
              if (v19)
              {
                if (*(_DWORD *)(v19 + 28) == 2)
                {
                  if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
                    WebCore::Node::removedLastRef((WebCore::Node *)v19);
                  }
                }
                else
                {
                  *(_DWORD *)(v19 + 28) -= 2;
                }
              }
LABEL_55:
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v120[2]);
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)buf);
              unsigned __int8 v32 = MEMORY[0x19973C250](&v111, v113);
            }
            while (v32 != 129 && (char)v32 < 0);
LABEL_65:
            WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t *)&v115);
            uint64_t v33 = qword_1EB3580F0;
            BOOL v34 = os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT);
            unsigned int v35 = HIDWORD(v116);
            if (v34)
            {
              uint64_t v36 = *(void *)(a1 + 40);
              *(_DWORD *)buf = 134218496;
              *(void *)&uint8_t buf[4] = a1;
              __int16 v119 = 2048;
              *(void *)char v120 = v36;
              *(_WORD *)&v120[8] = 2048;
              uint64_t v121 = HIDWORD(v116);
              _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Simulating click - found %zu candidate(s) from visible text", buf, 0x20u);
            }
            if (v35) {
              goto LABEL_140;
            }
            v37.i64[0] = 0xFE000000FE000000;
            v37.i64[1] = 0xFE000000FE000000;
            int8x16_t v38 = (int8x16_t)vcgtq_s32(v114, v37);
            v39.i64[0] = 0xFE000000FE000000;
            v39.i64[1] = 0xFE000000FE000000;
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            *(int8x16_t *)uint64_t v135 = vorrq_s8((int8x16_t)(*(_OWORD *)&v38 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v39, v114), v40, (int8x16_t)vshlq_n_s32(v114, 6uLL)), v38));
            WebCore::HitTestResult::HitTestResult((WebCore::HitTestResult *)buf, (const WebCore::LayoutRect *)v135);
            *(_DWORD *)uint64_t v135 = 32769;
            v135[4] = 1;
            WebCore::Document::hitTest();
            uint64_t v41 = *(uint64_t **)(WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)buf) + 8);
            if (v41)
            {
              while (1)
              {
                uint64_t v42 = *v41;
                *(_DWORD *)(v42 + 28) = *(_DWORD *)(*v41 + 28) + 2;
                uint64_t v108 = v42;
                if ((*(unsigned char *)(v42 + 32) & 0x10) == 0)
                {
                  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v108);
                  goto LABEL_123;
                }
                uint64_t v108 = 0;
                *(void *)uint64_t v135 = 0;
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v135);
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v108);
                uint64_t v44 = *(void *)(v42 + 112);
                if (!v44) {
                  break;
                }
                unint64_t v45 = *(unsigned int *)(v44 + 4);
                if (v45)
                {
                  uint64_t v46 = *(void *)(v44 + 40);
                  unint64_t v47 = *(unsigned int *)(v44 + 52);
                  if (!v47) {
                    break;
                  }
                }
                else
                {
                  uint64_t v46 = v44 + 32;
                  unint64_t v47 = v45 >> 5;
                  if (!(v45 >> 5)) {
                    break;
                  }
                }
                uint64_t v48 = *MEMORY[0x1E4FB6758];
                uint64_t v49 = (WTF::StringImpl **)(v46 + 8);
                while (1)
                {
                  uint64_t v50 = (uint64_t)*(v49 - 1);
                  if (v50 == v48
                    || *(void *)(v50 + 24) == *(void *)(v48 + 24) && *(void *)(v50 + 32) == *(void *)(v48 + 32))
                  {
                    break;
                  }
                  v49 += 2;
                  if (!--v47) {
                    goto LABEL_81;
                  }
                }
LABEL_82:
                uint64_t v51 = *v49;
                if (!*v49) {
                  goto LABEL_94;
                }
                int v52 = *(_DWORD *)v51;
                *(_DWORD *)v51 += 2;
                *(void *)uint64_t v135 = v51;
                if (!*((_DWORD *)v51 + 1))
                {
                  *(void *)uint64_t v135 = 0;
                  if (v52) {
                    *(_DWORD *)uint64_t v51 = v52;
                  }
                  else {
                    WTF::StringImpl::destroy(v51, v43);
                  }
LABEL_94:
                  int v56 = *(_DWORD *)(v42 + 28);
                  *(_DWORD *)(v42 + 28) = v56 + 2;
                  if (*(void *)(*(void *)(v42 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
                  {
                    if (v56) {
                      goto LABEL_96;
                    }
LABEL_104:
                    if ((*(_WORD *)(v42 + 34) & 0x400) == 0) {
                      WebCore::Node::removedLastRef((WebCore::Node *)v42);
                    }
                    goto LABEL_121;
                  }
                  if ((WebCore::HTMLInputElement::isSubmitButton((WebCore::HTMLInputElement *)v42) & 1) == 0
                    && !WebCore::HTMLInputElement::isTextButton((WebCore::HTMLInputElement *)v42)
                    || (WebCore::HTMLInputElement::visibleValue((uint64_t *)v135, (WebCore::HTMLInputElement *)v42),
                        (long long v58 = *(WTF::StringImpl **)v135) == 0))
                  {
                    int v56 = *(_DWORD *)(v42 + 28) - 2;
                    if (*(_DWORD *)(v42 + 28) == 2) {
                      goto LABEL_104;
                    }
LABEL_96:
                    *(_DWORD *)(v42 + 28) = v56;
LABEL_121:
                    if (*(_DWORD *)(v42 + 28) == 2)
                    {
                      if ((*(_WORD *)(v42 + 34) & 0x400) == 0) {
                        WebCore::Node::removedLastRef((WebCore::Node *)v42);
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v42 + 28) -= 2;
                    }
                    goto LABEL_123;
                  }
                  if (*(_DWORD *)(*(void *)v135 + 4))
                  {
                    int v59 = WebCore::containsPlainText();
                    long long v58 = *(WTF::StringImpl **)v135;
                    *(void *)uint64_t v135 = 0;
                    if (!v58) {
                      goto LABEL_110;
                    }
                  }
                  else
                  {
                    int v59 = 0;
                    *(void *)uint64_t v135 = 0;
                  }
                  if (*(_DWORD *)v58 == 2) {
                    WTF::StringImpl::destroy(v58, v57);
                  }
                  else {
                    *(_DWORD *)v58 -= 2;
                  }
LABEL_110:
                  if (*(_DWORD *)(v42 + 28) == 2)
                  {
                    if ((*(_WORD *)(v42 + 34) & 0x400) != 0)
                    {
                      if (!v59) {
                        goto LABEL_121;
                      }
                    }
                    else
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v42);
                      if ((v59 & 1) == 0) {
                        goto LABEL_121;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v42 + 28) -= 2;
                    if ((v59 & 1) == 0) {
                      goto LABEL_121;
                    }
                  }
                  goto LABEL_112;
                }
                char v54 = WebCore::containsPlainText();
                uint64_t v55 = *(WTF::StringImpl **)v135;
                *(void *)uint64_t v135 = 0;
                if (!v55) {
                  goto LABEL_87;
                }
                if (*(_DWORD *)v55 != 2)
                {
                  *(_DWORD *)v55 -= 2;
LABEL_87:
                  if ((v54 & 1) == 0) {
                    goto LABEL_94;
                  }
                  goto LABEL_112;
                }
                WTF::StringImpl::destroy(v55, v53);
                if ((v54 & 1) == 0) {
                  goto LABEL_94;
                }
LABEL_112:
                WebCore::Element::boundingAbsoluteRectWithoutLayout((uint64_t *)v135, (WebCore::Element *)v42);
                if ((_BYTE)v137)
                {
                  CFTypeRef v109 = (WTF *)v42;
                  uint64_t v61 = WebCore::enclosingIntRect((WebCore *)&v135[8], v60);
                  if ((v62 & 0x80000000) == 0) {
                    int v63 = v62;
                  }
                  else {
                    int v63 = v62 + 1;
                  }
                  uint64_t v64 = (v61 + (v63 >> 1));
                  unint64_t v65 = HIDWORD(v62);
                  if ((v62 & 0x8000000000000000) != 0) {
                    LODWORD(v65) = HIDWORD(v62) + 1;
                  }
                  unint64_t v110 = v64 | ((unint64_t)(HIDWORD(v61) + ((int)v65 >> 1)) << 32);
                  int v66 = HIDWORD(v116);
                  if (HIDWORD(v116) == v116)
                  {
                    WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)> &&>((uint64_t)&v115, (unint64_t)&v109);
                  }
                  else
                  {
                    __int16 v67 = (WTF **)((char *)v115 + 16 * HIDWORD(v116));
                    uint64_t v68 = v109;
                    CFTypeRef v109 = 0;
                    *__int16 v67 = v68;
                    v67[1] = (WTF *)v110;
                    HIDWORD(v116) = v66 + 1;
                  }
                  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v109);
                  if ((_BYTE)v137 && *(void *)v135)
                  {
                    int v69 = *(_DWORD *)(*(void *)v135 + 16);
                    if (!v69)
                    {
                      __break(0xC471u);
                      goto LABEL_188;
                    }
                    *(_DWORD *)(*(void *)v135 + 16) = v69 - 1;
                  }
                }
                else if (v42)
                {
                  goto LABEL_121;
                }
LABEL_123:
                uint64_t v41 = (uint64_t *)v41[2];
                if (!v41) {
                  goto LABEL_137;
                }
              }
LABEL_81:
              uint64_t v49 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
              goto LABEL_82;
            }
LABEL_137:
            WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t *)&v115);
            long long v70 = qword_1EB3580F0;
            BOOL v71 = os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT);
            unsigned int v35 = HIDWORD(v116);
            if (v71)
            {
              uint64_t v72 = *(void *)(a1 + 40);
              *(_DWORD *)uint64_t v135 = 134218496;
              *(void *)&v135[4] = a1;
              *(_WORD *)&v135[12] = 2048;
              *(void *)&v135[14] = v72;
              __int16 v136 = 2048;
              uint64_t v137 = HIDWORD(v116);
              _os_log_impl(&dword_1985F2000, v70, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Simulating click - found %zu candidate(s) from DOM attributes", v135, 0x20u);
            }
            MEMORY[0x199731400](buf);
            if (v35)
            {
LABEL_140:
              if (v35 < 2)
              {
                long long v76 = v115;
                char v106 = *(unsigned char *)(a1 + 920);
                *(unsigned char *)(a1 + 920) = 1;
                uint64_t v77 = WebCore::ScrollView::contentsToWindow(v8, (WTF *)((char *)v76 + 8));
                long long v78 = qword_1EB3580F0;
                BOOL v79 = os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT);
                if (v79)
                {
                  uint64_t v80 = *(void *)(a1 + 40);
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = a1;
                  __int16 v119 = 2048;
                  *(void *)char v120 = v80;
                  _os_log_impl(&dword_1985F2000, v78, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Simulating click - dispatching events", buf, 0x16u);
                }
                int v81 = (WebCore *)WTF::WallTime::now((WTF::WallTime *)v79);
                *(void *)buf = v82;
                *(_WORD *)&uint8_t buf[8] = 6;
                v120[2] = 0;
                char v122 = 0;
                __int16 v123 = 256;
                uint64_t v124 = v77;
                uint64_t v125 = v77;
                uint64_t v127 = 0;
                uint64_t v126 = 0;
                uint64_t v128 = 0x3FF0000000000000;
                int v129 = 1;
                uint64_t v83 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v81);
                if (v83) {
                  *(_DWORD *)v83 += 2;
                }
                uint64_t v130 = v83;
                uint64_t v131 = 1;
                __int16 v132 = 0;
                long long v133 = 0u;
                long long v134 = 0u;
                WebCore::EventHandler::handleMousePressEvent();
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v84);
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v85);
                uint64_t v87 = v130;
                uint64_t v130 = 0;
                if (v87)
                {
                  if (*(_DWORD *)v87 == 2) {
                    uint64_t v87 = (WTF::StringImpl *)WTF::StringImpl::destroy(v87, v86);
                  }
                  else {
                    *(_DWORD *)v87 -= 2;
                  }
                }
                if (*(unsigned char *)(a1 + 186))
                {
                  uint64_t v91 = *a3;
                  *a3 = 0;
                  (*(void (**)(uint64_t, void))(*(void *)v91 + 16))(v91, 0);
                  char v92 = v106;
                }
                else
                {
                  uint64_t v93 = (WebCore *)WTF::WallTime::now(v87);
                  *(void *)buf = v94;
                  *(_WORD *)&uint8_t buf[8] = 7;
                  v120[2] = 0;
                  char v122 = 0;
                  __int16 v123 = 256;
                  uint64_t v124 = v77;
                  uint64_t v125 = v77;
                  uint64_t v127 = 0;
                  uint64_t v126 = 0;
                  uint64_t v128 = 0x3FF0000000000000;
                  int v129 = 1;
                  char v95 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v93);
                  if (v95) {
                    *(_DWORD *)v95 += 2;
                  }
                  uint64_t v130 = v95;
                  uint64_t v131 = 1;
                  __int16 v132 = 0;
                  long long v133 = 0u;
                  long long v134 = 0u;
                  WebCore::EventHandler::handleMouseReleaseEvent();
                  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v96);
                  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v97);
                  uint64_t v99 = v130;
                  uint64_t v130 = 0;
                  char v92 = v106;
                  if (v99)
                  {
                    if (*(_DWORD *)v99 == 2) {
                      WTF::StringImpl::destroy(v99, v98);
                    }
                    else {
                      *(_DWORD *)v99 -= 2;
                    }
                  }
                  uint64_t v91 = *a3;
                  *a3 = 0;
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, 1);
                }
                (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
                *(unsigned char *)(a1 + 920) = v92;
                unsigned int v35 = 1;
              }
              else
              {
                int v73 = qword_1EB3580F0;
                if (os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v74 = *(void *)(a1 + 40);
                  *(_DWORD *)buf = 134218496;
                  *(void *)&uint8_t buf[4] = a1;
                  __int16 v119 = 2048;
                  *(void *)char v120 = v74;
                  *(_WORD *)&v120[8] = 2048;
                  uint64_t v121 = v35;
                  _os_log_impl(&dword_1985F2000, v73, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Simulating click - too many matches found (%zu)", buf, 0x20u);
                }
                uint64_t v75 = *a3;
                *a3 = 0;
                (*(void (**)(uint64_t, void))(*(void *)v75 + 16))(v75, 0);
                (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
              }
            }
            else
            {
              uint64_t v88 = qword_1EB3580F0;
              if (os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v89 = *(void *)(a1 + 40);
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = a1;
                __int16 v119 = 2048;
                *(void *)char v120 = v89;
                _os_log_impl(&dword_1985F2000, v88, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Simulating click - no matches found", buf, 0x16u);
              }
              uint64_t v90 = *a3;
              *a3 = 0;
              (*(void (**)(uint64_t, void))(*(void *)v90 + 16))(v90, 0);
              (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
              unsigned int v35 = 0;
            }
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v113);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v111);
            uint64_t v101 = v115;
            if (v35)
            {
              uint64_t v102 = 16 * v35;
              unint64_t v103 = (uint64_t *)v115;
              do
              {
                unint64_t v103 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v103)
                     + 2;
                v102 -= 16;
              }
              while (v102);
            }
            if (v101) {
              WTF::fastFree(v101, v100);
            }
            uint64_t result = (unsigned int *)v107;
            if (*((_DWORD *)v107 + 7) == 2)
            {
              if ((*((_WORD *)v107 + 17) & 0x400) == 0) {
                uint64_t result = (unsigned int *)WebCore::Node::removedLastRef(v107);
              }
            }
            else
            {
              *((_DWORD *)v107 + 7) -= 2;
            }
          }
          else
          {
            uint64_t v105 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, void))(*(void *)v105 + 16))(v105, 0);
            uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v105 + 8))(v105);
          }
          if (*(_DWORD *)(v9 + 28) == 2)
          {
            if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
              uint64_t result = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
          }
          else
          {
            *(_DWORD *)(v9 + 28) -= 2;
          }
        }
        else
        {
          uint64_t v104 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, void))(*(void *)v104 + 16))(v104, 0);
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
        if (*((_DWORD *)v8 + 2) == 1) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
        }
        else {
          --*((_DWORD *)v8 + 2);
        }
        goto LABEL_177;
      }
    }
  }
  uint64_t v117 = 0;
LABEL_5:
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
LABEL_177:
  if (v117) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v117 + 8));
  }
  return result;
}

uint64_t *WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (WebCore::Node **)*result;
  uint64_t v3 = *((unsigned int *)result + 3);
  uint64_t v4 = (uint64_t *)(*result + 16 * v3);
  if (v3)
  {
    int v5 = 0;
    uint64_t v6 = *result;
    uint64_t v7 = (uint64_t *)(*result + 16 * v3);
    uint64_t v8 = v7;
    while (1)
    {
      WebCore::EventHandler::hitTestResultAtPoint();
      uint64_t v9 = v14;
      if (v14)
      {
        *((_DWORD *)v14 + 7) += 2;
        char v10 = WebCore::Node::containsIncludingShadowDOM(*v2, v9);
        if (*((_DWORD *)v9 + 7) == 2)
        {
          if ((*((_WORD *)v9 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v9);
          }
        }
        else
        {
          *((_DWORD *)v9 + 7) -= 2;
        }
        uint64_t result = (uint64_t *)MEMORY[0x199731400](v13);
        if (v10) {
          goto LABEL_12;
        }
      }
      else
      {
        MEMORY[0x199731400](v13);
      }
      uint64_t v11 = (uint64_t *)v2;
      if (v8 != (uint64_t *)(*v1 + 16 * *((unsigned int *)v1 + 3)))
      {
        if (v2 == (WebCore::Node **)v7)
        {
          uint64_t v11 = v8;
        }
        else
        {
          WTF::VectorTypeOperations<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate>::moveOverlapping(v7, (uint64_t *)v2, v8);
          uint64_t v11 = (uint64_t *)((char *)v8 + v6 - (void)v7);
        }
      }
      uint64_t v7 = (uint64_t *)(v2 + 2);
      uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v2);
      ++v5;
      uint64_t v8 = v11;
LABEL_12:
      v2 += 2;
      v6 += 16;
      if (v2 >= (WebCore::Node **)v4)
      {
        uint64_t v2 = (WebCore::Node **)*v1;
        LODWORD(v3) = *((_DWORD *)v1 + 3);
        uint64_t v4 = v8;
        goto LABEL_18;
      }
    }
  }
  int v5 = 0;
  uint64_t v7 = (uint64_t *)(*result + 16 * v3);
LABEL_18:
  uint64_t v12 = (uint64_t *)&v2[2 * v3];
  if (v7 != v12)
  {
    uint64_t result = WTF::VectorTypeOperations<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate>::moveOverlapping(v7, v12, v4);
    LODWORD(v3) = *((_DWORD *)v1 + 3);
  }
  *((_DWORD *)v1 + 3) = v3 - v5;
  return result;
}

WTF::StringImpl *WebKit::WebPage::updateCaptureState(uint64_t a1, void *a2, __int16 a3, __int16 a4, uint64_t *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[68];
  if (v6 && (uint64_t v8 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v12 = (unsigned int *)(v8 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    WebKit::WebFrame::fromCoreFrame(v8, &v35);
    uint64_t v13 = a1 + 32;
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    uint64_t v14 = WebCore::Document::topOrigin((WebCore::Document *)a2);
    v38[0] = 0;
    int v41 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v38, v14 + 8);
    uint64_t v15 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 26));
    v42[0] = 0;
    int v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v42, v15 + 8);
    long long v33 = *(_OWORD *)(v35 + 80);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    uint64_t v16 = *(atomic_uint **)(a1 + 24);
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    uint64_t v17 = *a5;
    *a5 = 0;
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(a1 + 32);
    uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v19 = 2121;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    int32x4_t v37 = v19;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &IdentifierInternal);
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v19, (uint64_t)v38);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v19, (uint64_t *)&v33);
    uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v19, 1uLL, 1);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x19939DBF4);
    }
    __int16 v22 = a3 | (a4 << 8);
    *uint64_t v20 = a3;
    IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(v19, a4);
    uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v23 = &unk_1EEA011B0;
    *(void *)(v23 + 8) = v16;
    *(_WORD *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v17;
    uint64_t v24 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v36[0] = v23;
    v36[1] = v24;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v13 + 40))(v13, &v37, v36, 0);
    uint64_t v26 = v36[0];
    v36[0] = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    float v27 = v37;
    int32x4_t v37 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v25);
      WTF::fastFree(v29, v30);
    }
    if (v43 != -1) {
      ((void (*)(void *, unsigned char *))off_1EEA00AF8[v43])(v36, v42);
    }
    int v43 = -1;
    if (v41 != -1) {
      ((void (*)(void *, char *))off_1EEA00AF8[v41])(v36, v38);
    }
    if (v35) {
      CFRelease(*(CFTypeRef *)(v35 + 8));
    }
    return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v38[0] = 8;
    char v40 = 1;
    uint64_t v31 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v31 + 16))(v31, v38);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
    if (v40)
    {
      uint64_t result = v39;
      int32x4_t v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)140>::type()
{
  return 140;
}

uint64_t API::InjectedBundle::FormClient::shouldNotifyOnFormChanges(API::InjectedBundle::FormClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageLoaderClient::shouldForceUniversalAccessFromLocalURL(API::InjectedBundle::PageLoaderClient *this, WebKit::WebPage *a2, const WTF::String *a3)
{
  return 0;
}

uint64_t API::InjectedBundle::PageLoaderClient::layoutMilestones(API::InjectedBundle::PageLoaderClient *this)
{
  return 0;
}

uint64_t API::InjectedBundle::ResourceLoadClient::shouldCacheResponse()
{
  return 1;
}

uint64_t API::InjectedBundle::ResourceLoadClient::shouldUseCredentialStorage()
{
  return 1;
}

uint64_t API::InjectedBundle::PageUIClient::statusBarIsVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::menuBarIsVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::toolbarsAreVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::didExceedDatabaseQuota(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2, API::SecurityOrigin *a3, const WTF::String *a4, const WTF::String *a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  return 0;
}

void API::InjectedBundle::PageUIClient::plugInStartLabelTitle(void *a1@<X8>)
{
  uint64_t v3 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v3 += 2;
  }
  *a1 = v3;
}

void API::InjectedBundle::PageUIClient::plugInStartLabelSubtitle(void *a1@<X8>)
{
  uint64_t v3 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v3 += 2;
  }
  *a1 = v3;
}

void API::InjectedBundle::PageUIClient::plugInExtraStyleSheet(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void API::InjectedBundle::PageUIClient::plugInExtraScript(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void WebKit::WebSpeechRecognitionProvider::~WebSpeechRecognitionProvider(WebKit::WebSpeechRecognitionProvider *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

unsigned int *WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct((WTF::StringImpl *)(*(void *)a1 + 72 * v5), (WTF::StringImpl *)(*(void *)a1 + 72 * v4));
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(void *)a1;
    if (v4)
    {
      uint64_t v8 = v6 + 72 * v4;
      do
      {
        WTF::String::operator=((uint64_t *)v7, (WTF::StringImpl **)v6);
        long long v9 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v6 + 8);
        *(_OWORD *)(v7 + 24) = v9;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 40), v6 + 40);
        WTF::String::operator=((uint64_t *)(v7 + 56), (WTF::StringImpl **)(v6 + 56));
        *(unsigned char *)(v7 + 64) = *(unsigned char *)(v6 + 64);
        v6 += 72;
        v7 += 72;
      }
      while (v6 != v8);
      uint64_t v6 = *(void *)a2;
      uint64_t v10 = a1[3];
      uint64_t v7 = *(void *)a1;
    }
    else
    {
      uint64_t v10 = 0;
    }
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(v6 + 72 * v10, v6 + 72 * a2[3], v7 + 72 * v10);
    a1[3] = a2[3];
  }
  return a1;
}

void WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WTF::String const>(uint64_t a1)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t v2 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::UserContentURLPattern::parse();
  __int16 v9 = v2;
  if (v2)
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(v2);
    WebCore::OriginAccessPatternsForWebProcess::allowAccessTo();
    long long v4 = v7;
    long long v7 = 0uLL;
    *(_OWORD *)a1 = v4;
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = v9;
    char v6 = 1;
  }
  *(unsigned char *)(a1 + 32) = v6;
  WebCore::UserContentURLPattern::~UserContentURLPattern((WebCore::UserContentURLPattern *)&v7, v3);
}

unint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v7;
  *(_WORD *)(v4 + 24) = *(_WORD *)(result + 24);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (unsigned int *)-1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v5, a2);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl ***)(a1 + 8);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(void *)(v4 - 16) != -1)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(WTF::StringImpl ***)(v4 - 8);
        if (v5) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
        }
        uint64_t v6 = *(WTF::StringImpl **)(v4 - 16);
        *(void *)(v4 - 16) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

double WebCore::CachedPage::operator delete()
{
  uint64_t v0 = MEMORY[0x19972F4C0]();
  if (*(_DWORD *)v0)
  {
    *(void *)(v0 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)uint64_t v0 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v0, v1);
  }
  return result;
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 8));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::SubstituteData *)((char *)this + 48));
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 186) = *((unsigned char *)this + 186) & 0xF1 | 4;
  *((unsigned char *)this + 304) = 1;
  return this;
}

void WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer(WebKit::SendStopResponsivenessTimer *this)
{
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(this) + 40);
  char v2 = 0;
  IPC::Connection::send<Messages::WebProcessProxy::StopResponsivenessTimer>(v1, (uint64_t)&v2, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::StopResponsivenessTimer>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  __int16 v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v9 = 2610;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v13 = v9;
  uint64_t v10 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, a4, a5);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v11);
  return v10;
}

WebCore::HistoryItem **std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(WebCore::HistoryItem **result, WebCore::HistoryItem **a2, unint64_t a3, WebCore::HistoryItem **a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = a2 - 1;
      uint64_t v8 = (WTF *)WebCore::HistoryItem::target(*(a2 - 1));
      __int16 v9 = (const WTF::String *)WebCore::HistoryItem::target(*v6);
      double result = (WebCore::HistoryItem **)WTF::codePointCompare(v8, v9, v10);
      if ((result & 0x80000000) != 0)
      {
        return (WebCore::HistoryItem **)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v6, v7);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        uint64_t v17 = result + 1;
        if (result + 1 != a2)
        {
          uint64_t v18 = 0;
          uint64_t v19 = result;
          do
          {
            uint64_t v20 = v19;
            uint64_t v19 = v17;
            uint64_t v21 = (WTF *)WebCore::HistoryItem::target(v20[1]);
            __int16 v22 = (const WTF::String *)WebCore::HistoryItem::target(*v20);
            double result = (WebCore::HistoryItem **)WTF::codePointCompare(v21, v22, v23);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v24 = 0;
              float v25 = *v19;
              *uint64_t v19 = 0;
              for (uint64_t i = v18; ; i -= 8)
              {
                float v27 = (WebCore::HistoryItem **)((char *)v6 + i);
                uint64_t v28 = *(uint64_t *)((char *)v6 + i);
                *float v27 = 0;
                v27[1] = v28;
                if (v24) {
                  WTF::RefCounted<WebCore::HistoryItem>::deref(v24);
                }
                if (!i) {
                  break;
                }
                int v29 = (WebCore::HistoryItem **)((char *)v6 + i);
                char v30 = (WTF *)WebCore::HistoryItem::target(v25);
                uint64_t v31 = (const WTF::String *)WebCore::HistoryItem::target(*(WebCore::HistoryItem **)((char *)v6 + i - 8));
                if ((WTF::codePointCompare(v30, v31, v32) & 0x80000000) == 0) {
                  goto LABEL_23;
                }
                uint64_t v24 = (_DWORD *)*v27;
              }
              int v29 = v6;
LABEL_23:
              double result = (WebCore::HistoryItem **)*v29;
              *int v29 = v25;
              if (result) {
                double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
              }
            }
            uint64_t v17 = v19 + 1;
            v18 += 8;
          }
          while (v19 + 1 != a2);
        }
      }
    }
    else
    {
      uint64_t v13 = a4;
      unint64_t v14 = a3 >> 1;
      uint64_t v15 = &result[a3 >> 1];
      unint64_t v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)result, v15, v16, a4);
        long long v33 = &v13[v14];
        double result = (WebCore::HistoryItem **)std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v33);
        BOOL v34 = &v13[a3];
        uint64_t v35 = v33;
        uint64_t v36 = v13;
        while (v35 != v34)
        {
          int32x4_t v37 = (WTF *)WebCore::HistoryItem::target(*v35);
          int8x16_t v38 = (const WTF::String *)WebCore::HistoryItem::target(*v36);
          if ((WTF::codePointCompare(v37, v38, v39) & 0x80000000) != 0)
          {
            int v41 = *v35;
            *uint64_t v35 = 0;
            double result = (WebCore::HistoryItem **)*v6;
            WTF::StringImpl *v6 = v41;
            if (result) {
              double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            }
            ++v35;
          }
          else
          {
            char v40 = *v36;
            _DWORD *v36 = 0;
            double result = (WebCore::HistoryItem **)*v6;
            WTF::StringImpl *v6 = v40;
            if (result) {
              double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            }
            ++v36;
          }
          ++v6;
          if (v36 == v33)
          {
            if (v35 != v34)
            {
              uint64_t v42 = 0;
              do
              {
                int v43 = v35[v42];
                v35[v42] = 0;
                double result = (WebCore::HistoryItem **)v6[v42];
                v6[v42] = v43;
                if (result) {
                  double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
                }
                ++v42;
              }
              while (&v35[v42] != v34);
            }
            goto LABEL_48;
          }
        }
        if (v36 != v33)
        {
          uint64_t v44 = 0;
          do
          {
            unint64_t v45 = v36[v44];
            v36[v44] = 0;
            double result = (WebCore::HistoryItem **)v6[v44];
            v6[v44] = v45;
            if (result) {
              double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            }
            ++v44;
          }
          while (&v36[v44] != v33);
        }
LABEL_48:
        if (v13)
        {
          unint64_t v46 = a3;
          do
          {
            double result = (WebCore::HistoryItem **)*v13;
            IPC::Encoder *v13 = 0;
            if (result) {
              double result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            }
            ++v13;
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(result, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
        return (WebCore::HistoryItem **)std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
  return result;
}

_DWORD *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(void *a1, void *a2)
{
  uint64_t v4 = (_DWORD *)*a1;
  *a1 = 0;
  uint64_t v5 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t v6 = (_DWORD *)*a1;
  *a1 = v5;
  if (v6) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(v6);
  }
  double result = (_DWORD *)*a2;
  *a2 = v4;
  if (result)
  {
    return WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(uint64_t result, WebCore::HistoryItem **a2, unint64_t a3, WebCore::HistoryItem **a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = (WebCore::HistoryItem **)result;
    if (a3 == 2)
    {
      __int16 v9 = a2 - 1;
      uint64_t v10 = (WTF *)WebCore::HistoryItem::target(*(a2 - 1));
      uint64_t v11 = (const WTF::String *)WebCore::HistoryItem::target(*v7);
      double result = WTF::codePointCompare(v10, v11, v12);
      if ((int)result >= 0) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = v9;
      }
      if ((int)result >= 0) {
        unint64_t v14 = v9;
      }
      else {
        unint64_t v14 = v7;
      }
      uint64_t v15 = *v13;
      IPC::Encoder *v13 = 0;
      *uint64_t v4 = v15;
      unint64_t v16 = *v14;
      WebCore::Node *v14 = 0;
      v4[1] = v16;
    }
    else if (a3 == 1)
    {
      uint64_t v8 = *(WebCore::HistoryItem **)result;
      *(void *)double result = 0;
      *a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v36 = (WebCore::HistoryItem **)(result + 8 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(result, v36, a3 >> 1, a4, a3 >> 1);
      double result = std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      int32x4_t v37 = &v7[a3 >> 1];
      while (v37 != a2)
      {
        int8x16_t v38 = (WTF *)WebCore::HistoryItem::target(*v37);
        int32x4_t v39 = (const WTF::String *)WebCore::HistoryItem::target(*v7);
        double result = WTF::codePointCompare(v38, v39, v40);
        if ((result & 0x80000000) != 0)
        {
          int v41 = *v37;
          *v37++ = 0;
        }
        else
        {
          int v41 = *v7;
          *v7++ = 0;
        }
        *v4++ = v41;
        if (v7 == v36)
        {
          if (v37 != a2)
          {
            uint64_t v42 = 0;
            do
            {
              int v43 = v37[v42];
              v37[v42] = 0;
              v4[v42++] = v43;
            }
            while (&v37[v42] != a2);
          }
          return result;
        }
      }
      if (v7 != v36)
      {
        uint64_t v44 = 0;
        do
        {
          unint64_t v45 = v7[v44];
          v7[v44] = 0;
          v4[v44++] = v45;
        }
        while (&v7[v44] != v36);
      }
    }
    else if ((WebCore::HistoryItem **)result != a2)
    {
      uint64_t v17 = *(WebCore::HistoryItem **)result;
      *(void *)double result = 0;
      uint64_t v18 = (WebCore::HistoryItem **)(result + 8);
      *a4 = v17;
      if ((WebCore::HistoryItem **)(result + 8) != a2)
      {
        uint64_t v19 = 0;
        uint64_t v20 = a4;
        do
        {
          uint64_t v21 = v20;
          __int16 v22 = (WTF *)WebCore::HistoryItem::target(*v18);
          uint64_t v23 = *v20++;
          uint64_t v24 = (const WTF::String *)WebCore::HistoryItem::target(v23);
          double result = WTF::codePointCompare(v22, v24, v25);
          if ((result & 0x80000000) != 0)
          {
            float v27 = *v21;
            *uint64_t v21 = 0;
            v21[1] = v27;
            uint64_t v28 = (uint64_t *)v4;
            if (v21 != v4)
            {
              uint64_t v29 = v19;
              while (1)
              {
                uint64_t v28 = (uint64_t *)((char *)v4 + v29);
                char v30 = (WTF *)WebCore::HistoryItem::target(*v18);
                uint64_t v31 = (const WTF::String *)WebCore::HistoryItem::target(*(WebCore::HistoryItem **)((char *)v4 + v29 - 8));
                if ((WTF::codePointCompare(v30, v31, v32) & 0x80000000) == 0) {
                  break;
                }
                BOOL v34 = (_DWORD *)*(v28 - 1);
                long long v33 = (_DWORD *)*v28;
                *(v28 - 1) = 0;
                *uint64_t v28 = (uint64_t)v34;
                if (v33) {
                  WTF::RefCounted<WebCore::HistoryItem>::deref(v33);
                }
                v29 -= 8;
                if (!v29)
                {
                  uint64_t v28 = (uint64_t *)v4;
                  break;
                }
              }
            }
            uint64_t v35 = *v18;
            *uint64_t v18 = 0;
            double result = *v28;
            *uint64_t v28 = (uint64_t)v35;
            if (result) {
              double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
            }
          }
          else
          {
            uint64_t v26 = *v18;
            *uint64_t v18 = 0;
            *uint64_t v20 = v26;
          }
          ++v18;
          v19 += 8;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(uint64_t result, WebCore::HistoryItem **a2, WebCore::HistoryItem **a3, uint64_t a4, uint64_t a5, WebCore::HistoryItem **a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v7 = a7;
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v13 = (WebCore::HistoryItem **)result;
  while (a4 > v7 && v9 > v7)
  {
    if (!a4) {
      return result;
    }
    unint64_t v14 = (WTF *)WebCore::HistoryItem::target(*a2);
    for (uint64_t i = *v13; ; uint64_t i = v18)
    {
      unint64_t v16 = (const WTF::String *)WebCore::HistoryItem::target(i);
      double result = WTF::codePointCompare(v14, v16, v17);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (!--a4) {
        return result;
      }
      unint64_t v14 = (WTF *)WebCore::HistoryItem::target(*a2);
      uint64_t v18 = v13[1];
      ++v13;
    }
    long long v78 = a3;
    if (a4 >= v9)
    {
      if (a4 == 1)
      {
        return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v13, a2);
      }
      if (a4 >= 0) {
        uint64_t v31 = a4;
      }
      else {
        uint64_t v31 = a4 + 1;
      }
      uint64_t v77 = v31 >> 1;
      uint64_t v23 = &v13[v31 >> 1];
      if (a3 == a2)
      {
        uint64_t v21 = a2;
      }
      else
      {
        unint64_t v32 = a3 - a2;
        uint64_t v21 = a2;
        do
        {
          long long v33 = &v21[v32 >> 1];
          uint64_t v35 = *v33;
          BOOL v34 = v33 + 1;
          uint64_t v36 = (WTF *)WebCore::HistoryItem::target(v35);
          int32x4_t v37 = (const WTF::String *)WebCore::HistoryItem::target(*v23);
          int v39 = WTF::codePointCompare(v36, v37, v38);
          if (v39 >= 0) {
            v32 >>= 1;
          }
          else {
            v32 += ~(v32 >> 1);
          }
          if (v39 < 0) {
            uint64_t v21 = v34;
          }
        }
        while (v32);
        uint64_t v8 = a6;
        uint64_t v7 = a7;
      }
      uint64_t v20 = v21 - a2;
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = v9 + 1;
      }
      uint64_t v20 = v19 >> 1;
      uint64_t v21 = &a2[v19 >> 1];
      if (a2 == v13)
      {
        uint64_t v23 = a2;
        char v30 = a2;
      }
      else
      {
        uint64_t v74 = v19 >> 1;
        unint64_t v22 = a2 - v13;
        uint64_t v23 = v13;
        do
        {
          uint64_t v24 = &v23[v22 >> 1];
          float v25 = (WTF *)WebCore::HistoryItem::target(*v21);
          float v27 = *v24;
          uint64_t v26 = v24 + 1;
          uint64_t v28 = (const WTF::String *)WebCore::HistoryItem::target(v27);
          if ((int)WTF::codePointCompare(v25, v28, v29) < 0)
          {
            v22 >>= 1;
          }
          else
          {
            uint64_t v23 = v26;
            v22 += ~(v22 >> 1);
          }
        }
        while (v22);
        char v30 = v13;
        uint64_t v8 = a6;
        uint64_t v20 = v74;
        uint64_t v7 = a7;
      }
      uint64_t v77 = v23 - v30;
    }
    char v40 = v21;
    if (v23 != a2)
    {
      char v40 = v23;
      if (a2 != v21)
      {
        uint64_t v75 = v20;
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v23, a2);
        char v40 = v23 + 1;
        for (uint64_t j = a2 + 1; j != v21; ++j)
        {
          if (v40 == a2) {
            a2 = j;
          }
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v40++, j);
        }
        if (v40 == a2)
        {
          char v40 = a2;
          a3 = v78;
        }
        else
        {
          uint64_t v42 = v40;
          int v43 = a2;
          do
          {
            while (1)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v42++, a2);
              if (++a2 == v21) {
                break;
              }
              if (v42 == v43) {
                int v43 = a2;
              }
            }
            a2 = v43;
          }
          while (v42 != v43);
          a3 = v78;
          uint64_t v7 = a7;
        }
        uint64_t v20 = v75;
      }
    }
    a4 -= v77;
    v9 -= v20;
    if (v77 + v20 >= a4 + v9)
    {
      uint64_t v44 = a4;
      uint64_t v45 = v20;
      double result = std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v40, v21, a3, v44, v9, v8, v7);
      uint64_t v21 = v23;
      uint64_t v9 = v45;
      a4 = v77;
      a3 = v40;
    }
    else
    {
      double result = std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v13, v23, v40, v77, v20, v8, v7);
      uint64_t v13 = v40;
    }
    a2 = v21;
    if (!v9) {
      return result;
    }
  }
  if (a4 > v9)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    do
    {
      uint64_t v48 = a2[v46];
      a2[v46] = 0;
      v8[v46] = v48;
      ++v47;
      ++v46;
    }
    while (&a2[v46] != a3);
    if (!(v46 * 8)) {
      goto LABEL_103;
    }
    uint64_t v49 = &v8[v46];
    uint64_t v50 = (uint64_t *)(a3 - 1);
    while (1)
    {
      if (a2 == v13)
      {
        if (v49 != v8)
        {
          uint64_t v68 = 0;
          do
          {
            uint64_t v69 = (uint64_t)v49[v68 - 1];
            v49[v68 - 1] = 0;
            double result = v50[v68];
            v50[v68] = v69;
            if (result) {
              double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
            }
            --v68;
          }
          while (&v49[v68] != v8);
        }
        goto LABEL_103;
      }
      uint64_t v51 = (uint64_t *)(v49 - 1);
      int v52 = (WTF *)WebCore::HistoryItem::target(*(v49 - 1));
      long long v53 = a2 - 1;
      char v54 = (const WTF::String *)WebCore::HistoryItem::target(*(a2 - 1));
      if ((WTF::codePointCompare(v52, v54, v55) & 0x80000000) != 0) {
        break;
      }
      uint64_t v56 = *v51;
      *uint64_t v51 = 0;
      double result = *v50;
      *uint64_t v50 = v56;
      long long v53 = a2;
      --v49;
      if (result) {
        goto LABEL_69;
      }
LABEL_70:
      --v50;
      a2 = v53;
      if (v49 == v8) {
        goto LABEL_103;
      }
    }
    int v57 = *v53;
    *long long v53 = 0;
    double result = *v50;
    *uint64_t v50 = (uint64_t)v57;
    if (!result) {
      goto LABEL_70;
    }
LABEL_69:
    double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
    goto LABEL_70;
  }
  if (v13 != a2)
  {
    uint64_t v58 = 0;
    unint64_t v47 = 0;
    do
    {
      int v59 = v13[v58];
      v13[v58] = 0;
      v8[v58] = v59;
      ++v47;
      ++v58;
    }
    while (&v13[v58] != a2);
    if (!(v58 * 8)) {
      goto LABEL_103;
    }
    uint64_t v60 = &v8[v58];
    uint64_t v61 = (uint64_t)&v8[v58 - 1];
    unint64_t v62 = v8;
    while (a2 != a3)
    {
      int v63 = (WTF *)WebCore::HistoryItem::target(*a2);
      uint64_t v64 = (const WTF::String *)WebCore::HistoryItem::target(*v62);
      if ((WTF::codePointCompare(v63, v64, v65) & 0x80000000) != 0)
      {
        __int16 v67 = *a2;
        *a2 = 0;
        double result = (uint64_t)*v13;
        IPC::Encoder *v13 = v67;
        if (result) {
          double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
        }
        ++a2;
      }
      else
      {
        int v66 = *v62;
        IPC::Encoder *v62 = 0;
        double result = (uint64_t)*v13;
        IPC::Encoder *v13 = v66;
        if (result) {
          double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
        }
        ++v62;
      }
      ++v13;
      if (v60 == v62) {
        goto LABEL_103;
      }
    }
    if (v60 != v62)
    {
      uint64_t v70 = 0;
      do
      {
        BOOL v71 = v62[v70];
        v62[v70] = 0;
        double result = (uint64_t)v13[v70];
        v13[v70] = v71;
        if (result) {
          double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
        }
        ++v70;
      }
      while ((WebCore::HistoryItem **)v61 != &v62[v70 - 1]);
    }
LABEL_103:
    if (v8)
    {
      unint64_t v72 = 0;
      do
      {
        double result = (uint64_t)v8[v72];
        v8[v72] = 0;
        if (result) {
          double result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
        }
        ++v72;
      }
      while (v72 < v47);
    }
  }
  return result;
}

int8x8_t WebCore::LayoutRect::LayoutRect(int8x8_t *this, const IntRect *a2)
{
  int8x8_t v2 = (int8x8_t)vcgt_s32((int32x2_t)a2->m_location, (int32x2_t)0xFE000000FE000000);
  *this = vorr_s8((int8x8_t)(*(void *)&v2 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)a2->m_location), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)a2->m_location, 6uLL)), v2));
  IntSize m_size = a2->m_size;
  int8x8_t v4 = (int8x8_t)vcgt_s32((int32x2_t)m_size, (int32x2_t)0xFE000000FE000000);
  int8x8_t result = vorr_s8((int8x8_t)(*(void *)&v4 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)m_size), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)m_size, 6uLL)), v4));
  this[1] = result;
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16ScreenToRootViewEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16RootViewToScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy43WaitForSharedPreferencesForWebProcessToSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA00B68;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int8x8_t v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4) {
    std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v4, a2);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00B68;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int8x8_t v4 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v4, a2);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::call(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  }
  uint64_t v5 = (const void **)WebCore::LocalFrame::dataDetectionResults((WebCore::LocalFrame *)v4);
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = *v5;
  _DWORD *v5 = cf;
  if (v6) {
    CFRelease(v6);
  }
  if (*(void *)(*(void *)(v4 + 128) + 8) == v4)
  {
    uint64_t v7 = *(const void ***)(a1 + 16);
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v8 = *v7;
    *uint64_t v7 = cf;
    if (v8) {
      CFRelease(v8);
    }
  }
  uint64_t v9 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(*(void *)(a1 + 8) + 48), 0);
  if (v9)
  {
    uint64_t v10 = (unsigned int *)(v9 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    WebKit::detectDataInFrame(v9, *(unsigned char *)(a1 + 48), a1 + 24, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 40));
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v11);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  if (cf)
  {
    CFRelease(cf);
  }
}

uint64_t std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = *(const void **)this;
  *(void *)this = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

void WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope(WebKit::WebPage::PrintContextAccessScope *this)
{
  int v2 = *((unsigned __int8 *)this + 8);
  uint64_t v3 = *(void *)this;
  *(unsigned char *)(v3 + 680) = v2;
  if (v2 || !*(unsigned char *)(v3 + 681))
  {
    *(void *)this = 0;
  }
  else
  {
    WebKit::WebPage::endPrintingImmediately((WebKit::WebPage *)v3);
    uint64_t v3 = *(void *)this;
    *(void *)this = 0;
    if (!v3) {
      return;
    }
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

void *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24HandleSynchronousMessageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::deallocateTable(WebKit::WebURLSchemeHandlerProxy **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WebKit::WebURLSchemeHandlerProxy *)-1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v5, a2);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21RequestDOMPasteAccessEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EEA00BE8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EEA00BE8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 56))(v3 + 16);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 2020;
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v11 = v6;
      IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode(v6, a2);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 16) + 32))(v3 + 16, &v11, 0);
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8)
      {
        IPC::Encoder::~Encoder(v8, v7);
        WTF::fastFree(v9, v10);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

uint64_t *WTF::VectorTypeOperations<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate>::moveOverlapping(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = result;
  if (result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v7 = (uint64_t *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF0) - 8);
      int8x8_t result = a2 - 2;
      do
      {
        uint64_t v8 = *result;
        _DWORD *result = 0;
        *(v7 - 1) = v8;
        *uint64_t v7 = result[1];
        v7 -= 2;
        uint64_t v9 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(result);
        BOOL v10 = v9 == v5;
        int8x8_t result = v9 - 2;
      }
      while (!v10);
    }
  }
  else
  {
    while (v5 != a2)
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      *uint64_t v3 = v6;
      v3[1] = v5[1];
      int8x8_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v5);
      v5 += 2;
      v3 += 2;
    }
  }
  return result;
}

WebKit::WebURLSchemeHandlerProxy *WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(WebKit::WebURLSchemeHandlerProxy *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebURLSchemeHandlerProxy::~WebURLSchemeHandlerProxy(result, a2);
    return (WebKit::WebURLSchemeHandlerProxy *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::WebPage(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters &&)::$_0,void,PAL::HysteresisState>::call(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(result + 8) + 88) + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
          WebCore::Frame::checkedHistory((uint64_t *)&v5, (WebCore::Frame *)v3);
          WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v5, *(WebCore::HistoryItem **)(*(void *)(v3 + 184) + 16));
          uint64_t v4 = v5;
          uint64_t v5 = 0;
          if (v4)
          {
            if (!*(_DWORD *)v4)
            {
              int8x8_t result = 286;
              __break(0xC471u);
              return result;
            }
            --*(_DWORD *)v4;
          }
          return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPage::*&)(void),WebKit::WebPage*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

unsigned int *WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(unsigned int *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (unsigned int **)result;
    do
    {
      WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      int8x8_t result = *v3;
      *uint64_t v3 = 0;
      if (result) {
        int8x8_t result = WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#2},WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA00CB0;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EEA00CB0;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#2},WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(result + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(result + 24) = v6;
  LOBYTE(v6) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(result + 32) = v6;
  *(void *)uint64_t result = &unk_1EE9F71A8;
  *(void *)(result + 8) = &unk_1EE9F7238;
  *a2 = result;
  return result;
}

void WebKit::WebSpeechRecognitionProvider::~WebSpeechRecognitionProvider(WebKit::WebSpeechRecognitionProvider *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebSpeechRecognitionProvider::speechRecognitionConnection(WebKit::WebSpeechRecognitionProvider *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
    uint64_t result = WebKit::WebSpeechRecognitionConnection::WebSpeechRecognitionConnection(v4, v3);
    uint64_t v5 = (_DWORD *)*((void *)this + 2);
    *((void *)this + 2) = result;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        return *((void *)this + 2);
      }
      else
      {
        --v5[2];
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[v2];
  }
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit10PluginViewES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      int v6 = 0;
      unsigned int v7 = v4 - 1;
      do
      {
        uint64_t v8 = (WTF **)(v2 + 8 * v7);
        if ((unint64_t)*v8 + 1 >= 2 && !*((void *)*v8 + 1))
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v8, a2);
          ++v6;
        }
      }
      while ((unint64_t)v7--);
      uint64_t v10 = *a1;
      uint64_t v2 = v6 != 0;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 12);
        }
        else {
          int v12 = 0;
        }
        *(_DWORD *)(v11 - 12) = v12 - v6;
        uint64_t v10 = *a1;
      }
      if (v10)
      {
        unsigned int v13 = *(_DWORD *)(v10 - 4);
        if (6 * *(_DWORD *)(v10 - 12) < v13 && v13 >= 9) {
          WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(a1);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_8;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_6;
  }
LABEL_8:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

WTF **WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(WTF **result, void *a2)
{
  unsigned int v2 = *result;
  void *result = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      unsigned int v3 = result;
      WTF::fastFree(v2, a2);
      uint64_t result = v3;
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  void *result = (WTF *)-1;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      unsigned int v13 = (WTF **)(v6 + 8 * v11);
      unint64_t v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (WTF **)(v15 + 8 * v22);
          *uint64_t v24 = 0;
          float v25 = *v13;
          IPC::Encoder *v13 = 0;
          *uint64_t v24 = v25;
          uint64_t v26 = *v13;
          IPC::Encoder *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1) {
              WTF::fastFree(v26, v10);
            }
            else {
              --*(_DWORD *)v26;
            }
          }
          if (v13 == a3) {
            int v12 = v24;
          }
        }
        else
        {
          IPC::Encoder *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA00D78;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00D78;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::call(uint64_t a1, void *a2)
{
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::ScreenToRootView>@<X0>(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3776, a3, &v23, &v22);
  uint64_t v11 = v22;
  if (a4)
  {
    **((unsigned char **)v22 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  int v12 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(unsigned char *)a5 = (_BYTE)v20;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, unint64_t **))off_1EEA00D90[v12])(&v24, &v20);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  unsigned int v13 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(v20);
  if ((_BYTE)v14)
  {
    if (!v21)
    {
      uint64_t v15 = v20;
      unsigned int v20 = 0;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>(v19);
  }
  *(unsigned char *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  int v12 = v21;
  if (v21 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = v22;
  unsigned int v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  void v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3771, a3, &v22, &v21);
  uint64_t v11 = v21;
  if (a4)
  {
    **((unsigned char **)v21 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v22, (uint64_t *)&v21, a4, (uint64_t)&v19, a6);
  if (!v20)
  {
    IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(v19, (uint64_t)&v23);
    if (!v25)
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 24) = 1;
      int v12 = v20;
      if (v20 == -1) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    char v14 = v23;
    v26[0] = *(void *)v24;
    *(void *)((char *)v26 + 7) = *(void *)&v24[7];
    int v12 = v20;
    if (!v20)
    {
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      *(void *)(a5 + 9) = v26[0];
      *(void *)(a5 + 16) = *(void *)((char *)v26 + 7);
      *(void *)a5 = v15;
      *(unsigned char *)(a5 + 8) = v14;
      *(_DWORD *)(a5 + 24) = 0;
      goto LABEL_10;
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v20 != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)a5 = (_BYTE)v19;
  int v12 = 1;
  *(_DWORD *)(a5 + 24) = 1;
LABEL_10:
  ((void (*)(char *, unint64_t **))off_1EEA00D90[v12])(&v23, &v19);
LABEL_11:
  uint64_t result = v21;
  int v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IntRect>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::AccessibilityScreenToRootView>@<X0>(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3740, a3, &v23, &v22);
  uint64_t v11 = v22;
  if (a4)
  {
    **((unsigned char **)v22 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  int v12 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(unsigned char *)a5 = (_BYTE)v20;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, unint64_t **))off_1EEA00D90[v12])(&v24, &v20);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  unsigned int v13 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(v20);
  if ((_BYTE)v14)
  {
    if (!v21)
    {
      uint64_t v15 = v20;
      int v20 = 0;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>(v19);
  }
  *(unsigned char *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  int v12 = v21;
  if (v21 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  void v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3770, a3, &v22, &v21);
  uint64_t v11 = v21;
  if (a4)
  {
    **((unsigned char **)v21 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v22, (uint64_t *)&v21, a4, (uint64_t)&v19, a6);
  if (!v20)
  {
    IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(v19, (uint64_t)&v23);
    if (!v25)
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 24) = 1;
      int v12 = v20;
      if (v20 == -1) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    char v14 = v23;
    v26[0] = *(void *)v24;
    *(void *)((char *)v26 + 7) = *(void *)&v24[7];
    int v12 = v20;
    if (!v20)
    {
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      *(void *)(a5 + 9) = v26[0];
      *(void *)(a5 + 16) = *(void *)((char *)v26 + 7);
      *(void *)a5 = v15;
      *(unsigned char *)(a5 + 8) = v14;
      *(_DWORD *)(a5 + 24) = 0;
      goto LABEL_10;
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v20 != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)a5 = (_BYTE)v19;
  int v12 = 1;
  *(_DWORD *)(a5 + 24) = 1;
LABEL_10:
  ((void (*)(char *, unint64_t **))off_1EEA00D90[v12])(&v23, &v19);
LABEL_11:
  uint64_t result = v21;
  int v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA00DB0;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00DB0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = 0;
  int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<JSC::JSValue,WebCore::ExceptionDetails>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<JSC::JSValue,WebCore::ExceptionDetails>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  uint64_t result = WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WebCore::RunJavaScriptParameters &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::RunJavaScriptParameters &&::SupportsObjectIdentifierNullState)1>,WebCore::RunJavaScriptParameters &&::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WebCore::RunJavaScriptParameters &&::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1::operator()(v2, (uint64_t)v4);
  if (v5 != -1) {
    return (unsigned int *)((uint64_t (*)(char *, unsigned char *))off_1EEA00DC8[v5])(&v6, v4);
  }
  return result;
}

unsigned int *WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WebCore::RunJavaScriptParameters &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::RunJavaScriptParameters &&::SupportsObjectIdentifierNullState)1>,WebCore::RunJavaScriptParameters &&::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WebCore::RunJavaScriptParameters &&::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v4 = (WebCore::SerializedScriptValue *)WebKit::WebFrame::jsContextForWorld(*(WebKit::WebFrame **)(a1 + 8), *(void *)a1);
    int v5 = *(WebCore::ScriptController **)(*(void *)(a1 + 16) + 304);
    char v6 = *(WebCore::DOMWrapperWorld **)(*(void *)a1 + 24);
    ++*(_DWORD *)v6;
    WebCore::ScriptController::jsWindowProxy(v5, v6);
    if (*(_DWORD *)(a2 + 32)) {
      goto LABEL_13;
    }
    WebCore::SerializedScriptValue::create(v17, v4, *(const OpaqueJSContext **)a2, 0, v7);
    uint64_t v8 = v17[0];
    v17[0] = 0;
    WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v6);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(unsigned int *)(v8 + 20);
      goto LABEL_5;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
LABEL_5:
  LOBYTE(v17[0]) = 0;
  char v18 = 0;
  int v11 = *(_DWORD *)(a2 + 32);
  if (!v11) {
    goto LABEL_6;
  }
  if (v11 != 1)
  {
LABEL_13:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)std::optional<WebCore::ExceptionDetails>::operator=[abi:sn180100]<WebCore::ExceptionDetails&,void>(v15, v16);
  }
  std::optional<WebCore::ExceptionDetails>::operator=[abi:sn180100]<WebCore::ExceptionDetails&,void>((uint64_t)v17, a2);
LABEL_6:
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 16))(v12, v9, v10, v17);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  uint64_t result = (unsigned int *)std::optional<WebCore::ExceptionDetails>::~optional((uint64_t)v17, v13);
  if (v8) {
    return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
  }
  return result;
}

uint64_t std::optional<WebCore::ExceptionDetails>::operator=[abi:sn180100]<WebCore::ExceptionDetails&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
    char v4 = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = v4;
    WTF::String::operator=((uint64_t *)(a1 + 24), (WTF::StringImpl **)(a2 + 24));
  }
  else
  {
    int v5 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    *(void *)a1 = v5;
    uint64_t v6 = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    BOOL v7 = *(_DWORD **)(a2 + 24);
    if (v7) {
      *v7 += 2;
    }
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<JSC::JSValue,WebCore::ExceptionDetails>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<JSC::JSValue,WebCore::ExceptionDetails>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA00DC8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA00DD8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a3 + 16);
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = a3[3];
  a3[3] = 0;
  *(void *)(a2 + 24) = v5;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA00DF8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00DF8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = qword_1EB358960;
  if (*(unsigned char *)(a4 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(v8 + 40);
      WTF::String::utf8();
      uint64_t v14 = v16 ? (uint64_t)v16 + 16 : 0;
      *(_DWORD *)buf = 134218499;
      uint64_t v18 = v8;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      __int16 v21 = 2081;
      uint64_t v22 = v14;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: Request to run JavaScript failed with error %{private}s", buf, 0x20u);
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(v8 + 40);
    *(_DWORD *)buf = 134218240;
    uint64_t v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v10;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: Request to run JavaScript succeeded", buf, 0x16u);
  }
  uint64_t v11 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HTMLMediaElement,WTF::RawPtrTraits<WebCore::HTMLMediaElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLMediaElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 28) == 2)
        {
          if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
        }
        else
        {
          *(_DWORD *)(v6 + 28) -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  char v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::startPlayingPredominantVideo(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(void *)a2 + 1528))(a2);
  if (result)
  {
    uint64_t result = (void *)WebCore::HTMLMediaElement::isVisibleInViewport(a2);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      unint64_t v6 = *(unsigned int *)(v5 + 12);
      if (v6 == *(_DWORD *)(v5 + 8))
      {
        unint64_t v7 = v6 + (v6 >> 2);
        if (v7 >= 0x10) {
          unint64_t v8 = v7 + 1;
        }
        else {
          unint64_t v8 = 16;
        }
        if (v8 <= v6 + 1) {
          unint64_t v9 = v6 + 1;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v10 = *(void **)v5;
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(v5 + 8) = v9;
        *(void *)uint64_t v5 = v11;
        uint64_t result = memcpy(v11, v10, 8 * v6);
        if (v10)
        {
          if (*(void **)v5 == v10)
          {
            *(void *)uint64_t v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
          }
          uint64_t result = (void *)WTF::fastFree((WTF *)v10, v12);
        }
        unint64_t v6 = *(unsigned int *)(v5 + 12);
        uint64_t v13 = (WebCore::HTMLMediaElement **)(*(void *)v5 + 8 * v6);
      }
      else
      {
        uint64_t v13 = (WebCore::HTMLMediaElement **)(*(void *)v5 + 8 * v6);
      }
      *((_DWORD *)a2 + 7) += 2;
      WTF::StringImpl *v13 = a2;
      *(_DWORD *)(v5 + 12) = v6 + 1;
    }
  }
  return result;
}

WTF *WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    uint64_t v20 = *a3;
    *a3 = 0;
    uint64_t result = (WTF *)v16[1];
    uint64_t *v16 = v11;
    v16[1] = v20;
    if (result) {
      uint64_t result = WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        uint64_t result = (WTF *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1, v16);
        uint64_t v16 = (uint64_t *)result;
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t result = (WTF *)v16[1];
  v16[1] = v29;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (WTF *)v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v27, v10);
          }
          *int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          char v30 = *(WTF **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v30, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(WTF **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(a1, a2);
  }
  return a1;
}

WTF *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (WTF *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::TextIndicatorData const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::TextIndicatorData const&,unsigned long long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (unint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  int v10 = (uint64_t *)*a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    uint64_t v17 = (uint64_t **)(v6 + 8 * v16);
    int v18 = *v17;
    if (*v17 != (uint64_t *)-1) {
      break;
    }
    uint64_t v9 = (uint64_t **)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      NSObject *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      int v10 = (uint64_t *)*a2;
      uint64_t v17 = v9;
    }
    *a2 = 0;
    unint64_t result = *v17;
    *uint64_t v17 = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        uint64_t v28 = v17;
        unint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v17);
        uint64_t v17 = v28;
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    uint64_t v19 = *v4;
    if (*v4) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v4;
    if (*v4) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_22:
        unint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(v4, (WTF **)v17);
        uint64_t v17 = (uint64_t **)result;
        uint64_t v21 = *v4;
        if (*v4) {
          unint64_t v24 = *(unsigned int *)(v21 - 4);
        }
        else {
          unint64_t v24 = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_22;
    }
    uint64_t v25 = v21 + 8 * v24;
    char v26 = 1;
    goto LABEL_28;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *(unsigned int *)(v6 - 4);
  }
  char v26 = 0;
  uint64_t v25 = v6 + 8 * v27;
LABEL_28:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v25;
  *(unsigned char *)(a3 + 16) = v26;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v4, a2);
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove(uint64_t *a1, WTF **a2)
{
  unint64_t result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_4:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      unint64_t v13 = (long long *)(v4 + 24 * v10);
      if (*((void *)v13 + 1) != -1 && *v13 != 0)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v21 = -1640531527;
        __int16 v22 = 0;
        char v23 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v21, (void *)(v4 + 24 * v10));
        int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
        int v17 = 0;
        do
        {
          uint64_t v18 = v14 + 24 * (v16 & v15);
          int v16 = ++v17 + (v16 & v15);
        }
        while (*(_OWORD *)v18 != 0);
        long long v19 = *v13;
        *(void *)(v18 + 16) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        if (v13 == a2) {
          uint64_t v11 = v18;
        }
      }
      ++v10;
    }
    while (v10 != v12);
    goto LABEL_15;
  }
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v11;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::CompositionUnderline>::destruct(*(void **)a1, (void *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::VectorDestructor<true,WebCore::CompositionUnderline>::destruct(void *result, void *a2)
{
  for (; result != a2; result += 4)
  {
    uint64_t v2 = result[2];
    if ((v2 & 0x8000000000000) != 0)
    {
      uint64_t v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v3);
        uint64_t v4 = a2;
        unsigned int v5 = result;
        WTF::fastFree((WTF *)v3, a2);
        a2 = v4;
        uint64_t result = v5;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v3 + 8);
  *(void *)uint64_t v4 = v5;
  WebCore::Color::Color();
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(v3 + 24);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1993A1DA8);
    }
    uint64_t v4 = *(unsigned int **)a1;
    uint64_t v5 = (unsigned int *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::CompositionUnderline>::move(v4, v5, v6);
    if (v4)
    {
      if (*(unsigned int **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
  }
  return 1;
}

unsigned int *WTF::VectorMover<false,WebCore::CompositionUnderline>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 16;
    uint64_t v5 = result + 4;
    do
    {
      unint64_t v7 = v5 - 4;
      uint64_t v6 = *((void *)v5 - 2);
      *(unsigned char *)(v4 - 8) = *((unsigned char *)v5 - 8);
      *(void *)(v4 - 16) = v6;
      uint64_t result = (unsigned int *)WebCore::Color::Color();
      *(unsigned char *)(v4 + 8) = *((unsigned char *)v5 + 8);
      uint64_t v9 = *(void *)v5;
      if ((*(void *)v5 & 0x8000000000000) != 0)
      {
        uint64_t result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
        }
      }
      v4 += 32;
      v5 += 8;
    }
    while (v7 + 8 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA00E48;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00E48;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1 = *(void *)(*((void *)result + 2) + 296);
  if (v1 && *(void *)(v1 + 1984) && !*(unsigned char *)(v1 + 3459))
  {
    if (*(unsigned char *)(*(void *)(v1 + 3096) + 153)) {
      return WebKit::WebPage::preemptivelySendAutocorrectionContext(*((WebKit::WebPage **)result + 1));
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA00E70;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA00E70;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(void *)(v1 + 936))
  {
    uint64_t v2 = result;
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v3 = v1 + 32;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 1962;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v12 = v6;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v12, 0);
    unint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v10, v11);
    }
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t result = *(void *)(v9 + 936);
    *(void *)(v9 + 936) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 28) == 2)
      {
        if ((*(_WORD *)(result + 34) & 0x400) == 0) {
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      else
      {
        *(_DWORD *)(result + 28) -= 2;
      }
    }
  }
  else
  {
    *(void *)(v1 + 936) = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::InputMode,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::canShowResponse(WebCore::ResourceResponse const&)::$_0,BOOL,WTF::String const&,WebCore::PluginData::AllowedPluginTypes>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WebCore::Page::pluginData(*(WebCore::Page **)(*(void *)(a1 + 8) + 48));
  uint64_t v7 = WebCore::ResourceResponseBase::url(*(WebCore::ResourceResponseBase **)(a1 + 16));

  return MEMORY[0x1F4173E48](v6, a2, a3, v7);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::canShowMIMEType(WTF::String const&)::$_0,BOOL,WTF::String const&,WebCore::PluginData::AllowedPluginTypes>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = WebCore::Page::pluginData(*(WebCore::Page **)(*(void *)(a1 + 8) + 48));

  return MEMORY[0x1F4173E40](v5, a2, a3);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
            }
            else {
              --v27[2];
            }
          }
          *char v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          char v30 = *(_DWORD **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[2];
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v16 = *(_DWORD **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            }
            else {
              --v16[2];
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  unint64_t result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>>::customDeleteBucket(void *a1)
{
  unint64_t result = (_DWORD *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::shrinkCapacity(uint64_t result, void *a2)
{
  if (*(_DWORD *)(result + 8))
  {
    uint64_t v2 = result;
    unsigned int v3 = *(_DWORD *)(result + 12);
    if (v3)
    {
      WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*(unsigned int **)result, (void *)(*(void *)result + 24 * v3));
      *(_DWORD *)(v2 + 12) = 0;
    }
    unint64_t result = *(void *)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)(result + 2);
    do
    {
      uint64_t v7 = v5 - 8;
      uint64_t v6 = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = v6;
      uint64_t v8 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      unint64_t result = *(unsigned int **)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      if (result) {
        unint64_t result = WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v5 += 24;
      a3 += 24;
    }
    while ((unsigned int *)(v7 + 24) != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA00EE8;
  unsigned int v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA00EE8;
  unsigned int v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (float *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v22 = *((void *)a2 + 3);
        if (v22)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
            uint64_t v23 = *(void *)a2;
            uint64_t v24 = *((void *)a2 + 1);
            uint64_t v25 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            if (v25)
            {
              if (v24) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
              }
            }
          }
        }
        goto LABEL_5;
      }
      uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
      *((void *)a2 + 2) = v6 + 1;
      unsigned int v7 = *v6;
      if (v7 > 1)
      {
LABEL_5:
        uint64_t v8 = *(void *)a2;
        uint64_t v9 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v10 = *((void *)a2 + 3);
        if (v10 && v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
        }
        LOBYTE(v35[0]) = 0;
        char v37 = 0;
        goto LABEL_7;
      }
      if (v7)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a2, &v26);
        if (BYTE8(v26))
        {
          *(void *)&v38[0] = v26;
          int v16 = 1;
          int v44 = 1;
        }
        else
        {
          int v16 = 0;
          LOBYTE(v38[0]) = 0;
        }
        char v45 = v16;
        int v21 = 1;
        if (!v16) {
          goto LABEL_5;
        }
      }
      else
      {
        IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)&v26);
        if (v34)
        {
          long long v18 = v26;
          long long v26 = 0uLL;
          v38[0] = v18;
          v38[1] = v27;
          v38[2] = v28;
          LODWORD(v27) = v27 & 0xFFFFFFFE;
          uint64_t v39 = v29;
          int v40 = v30;
          __int16 v41 = v31;
          uint64_t v19 = v32;
          uint64_t v29 = 0;
          uint64_t v32 = 0;
          uint64_t v42 = v19;
          char v43 = v33;
          int v20 = 1;
          int v44 = 0;
        }
        else
        {
          int v20 = 0;
          LOBYTE(v38[0]) = 0;
        }
        char v45 = v20;
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v17);
        int v21 = 0;
        if (!v20) {
          goto LABEL_5;
        }
      }
      LOBYTE(v35[0]) = 0;
      int v36 = -1;
      ((void (*)(long long *, const void **, _OWORD *))off_1EEA00F10[v21])(&v26, v35, v38);
      int v36 = v21;
      char v37 = 1;
      if (!v45 || v44 == -1 || (((void (*)(long long *, _OWORD *))off_1EEA00F00[v44])(&v26, v38), v37))
      {
LABEL_25:
        unint64_t result = WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0::operator()(v2, v35);
        if (v37)
        {
          if (v36 != -1) {
            return (_DWORD *)((uint64_t (*)(_OWORD *, const void **))off_1EEA00F00[v36])(v38, v35);
          }
        }
        return result;
      }
LABEL_7:
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (!v13) {
        return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      if (!v12) {
        return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      if (!v37) {
        return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      goto LABEL_25;
    }
  }
  uint64_t v15 = (float *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v15);
}

_DWORD *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(float *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  v5[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v5);
  v6[2] = 0;
  v6[0] = 0;
  *(void *)((char *)v6 + 6) = 0;
  char v7 = 1;
  int v8 = 0;
  unint64_t result = WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0::operator()(a1, &v4);
  if (v8 != -1) {
    return (_DWORD *)((uint64_t (*)(char *, const void **))off_1EEA00F00[v8])(&v3, &v4);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  uint64_t v6 = a3[6];
  a3[6] = 0;
  *(void *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  uint64_t v7 = a3[8];
  a3[8] = 0;
  *(void *)(a2 + 64) = v7;
  *(unsigned char *)(a2 + 72) = *((unsigned char *)a3 + 72);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_DWORD *WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0::operator()(float *a1, const void **a2)
{
  CFTypeRef v4 = a2;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 20);
  if (v6 != 1)
  {
    if (!v6)
    {
      uint64_t v7 = *a2;
      *a2 = 0;
      cf[0] = v7;
      double v8 = WTF::URL::URL((uint64_t)&cf[1], (uint64_t *)a2 + 1);
      uint64_t v9 = *((void *)v4 + 6);
      *((void *)v4 + 6) = 0;
      v75[0] = v9;
      WORD2(v75[1]) = *((_WORD *)v4 + 30);
      LODWORD(v75[1]) = *((_DWORD *)v4 + 14);
      uint64_t v10 = (const void *)*((void *)v4 + 8);
      *((void *)v4 + 8) = 0;
      CFTypeRef v76 = v10;
      char v77 = *((unsigned char *)v4 + 72);
      int v78 = 0;
      uint64_t v11 = *(void *)a1;
      *(void *)a1 = 0;
      (*(void (**)(uint64_t, CFTypeRef *, double))(*(void *)v11 + 16))(v11, cf, v8);
      unint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
      if (v78 != -1) {
        return (_DWORD *)((uint64_t (*)(CFTypeRef *, CFTypeRef *))off_1EEA00F20[v78])(v62, cf);
      }
      return result;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_84;
  }
  WebCore::BitmapImage::create();
  atomic_uint *volatile v13 = *(atomic_uint *volatile *)v4;
  atomic_fetch_add(*(atomic_uint *volatile *)v4, 1u);
  cf[0] = v13;
  WebCore::Image::setData();
  uint64_t v15 = (unsigned int *)cf[0];
  cf[0] = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v14);
  }
  (*(void (**)(WebCore::NativeImage **__return_ptr))(**(void **)(v71 + 64) + 128))(&v70);
  if (v70)
  {
    uint64_t v16 = WebCore::NativeImage::size(v70);
    float v2 = (float)(int)v16;
    float v3 = (float)SHIDWORD(v16);
    float v18 = (float)(int)v16;
    float v19 = (float)SHIDWORD(v16);
    if (*((unsigned char *)a1 + 16))
    {
      float v20 = a1[2];
      float v21 = a1[3];
      if (v20 >= v2) {
        float v20 = (float)(int)v16;
      }
      cf[0] = 0;
      if (v21 >= v3) {
        float v21 = (float)SHIDWORD(v16);
      }
      cf[1] = (CFTypeRef)__PAIR64__(LODWORD(v21), LODWORD(v20));
      WebCore::largestRectWithAspectRatioInsideRect((WebCore *)cf, v2 / v3, v17);
    }
    float v22 = floorf(v18);
    uint64_t v23 = 0x7FFFFFFFLL;
    uint64_t v24 = 0x80000000;
    if (v22 > -2147500000.0) {
      uint64_t v24 = (int)v22;
    }
    if (v22 < 2147500000.0) {
      uint64_t v23 = v24;
    }
    float v25 = floorf(v19);
    uint64_t v26 = 0x7FFFFFFF00000000;
    unint64_t v27 = 0x8000000000000000;
    if (v25 > -2147500000.0) {
      unint64_t v27 = (unint64_t)(int)v25 << 32;
    }
    if (v25 < 2147500000.0) {
      uint64_t v26 = v27;
    }
    uint64_t v61 = v26 | v23;
    long long v28 = &v60;
    WebCore::NativeImage::colorSpace((uint64_t *)&v60, v70);
    uint64_t v29 = (WebCore::DestinationColorSpace *)WebCore::DestinationColorSpace::supportsOutput((WebCore::DestinationColorSpace *)&v60);
    if ((v29 & 1) == 0) {
      long long v28 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v29);
    }
    CFTypeRef v4 = *v28;
    if (v4)
    {
      CFRetain(v4);
      v62[0] = v4;
      CFRetain(v4);
      goto LABEL_26;
    }
LABEL_84:
    v62[0] = 0;
LABEL_26:
    LOBYTE(v62[1]) = 1;
    MEMORY[0x199738D60](cf, &v61, v62, 0);
    WebCore::ShareableBitmap::create();
    if ((_BYTE)v73)
    {
      CFTypeRef v30 = cf[1];
      cf[1] = 0;
      if (v30) {
        CFRelease(v30);
      }
    }
    if (LOBYTE(v62[1]))
    {
      CFTypeRef v31 = v62[0];
      v62[0] = 0;
      if (v31) {
        CFRelease(v31);
      }
    }
    if (v59)
    {
      WebCore::ShareableBitmap::createGraphicsContext(&v58, v59);
      if (v58)
      {
        cf[0] = 0;
        cf[1] = (CFTypeRef)vcvt_f32_s32((int32x2_t)v61);
        uint64_t v55 = 0;
        float v56 = v2;
        float v57 = v3;
        WebCore::GraphicsContext::drawNativeImage();
        uint64_t v32 = v59;
        int v59 = 0;
        cf[0] = v32;
        int v78 = 1;
      }
      else
      {
        cf[0] = 0;
        cf[1] = 0;
        WTF::URL::invalidate((WTF::URL *)&cf[1]);
        CFTypeRef v76 = 0;
        memset(v75, 0, 14);
        char v77 = 1;
        int v78 = 0;
      }
      uint64_t v40 = *(void *)a1;
      *(void *)a1 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v40 + 16))(v40, cf);
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      if (v78 != -1) {
        ((void (*)(uint64_t *, CFTypeRef *))off_1EEA00F20[v78])(&v55, cf);
      }
      uint64_t v41 = v58;
      uint64_t v58 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      WTF::URL::invalidate((WTF::URL *)&cf[1]);
      CFTypeRef v76 = 0;
      memset(v75, 0, 14);
      char v77 = 1;
      int v78 = 0;
      uint64_t v39 = *(void *)a1;
      *(void *)a1 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v39 + 16))(v39, cf);
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      if (v78 != -1) {
        ((void (*)(uint64_t *, CFTypeRef *))off_1EEA00F20[v78])(&v55, cf);
      }
    }
    uint64_t v42 = v59;
    int v59 = 0;
    if (v42) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v42, v36);
    }
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v43 = v60;
    CFTypeRef v60 = 0;
    if (v43) {
      CFRelease(v43);
    }
    goto LABEL_64;
  }
  WebKit::decodeError((uint64_t)v62);
  long long v33 = *(_OWORD *)v62;
  v62[0] = 0;
  v62[1] = 0;
  *(_OWORD *)CFTypeRef cf = v33;
  long long v73 = v63;
  long long v74 = v64;
  LODWORD(v63) = v63 & 0xFFFFFFFE;
  v75[0] = v65;
  WORD2(v75[1]) = v67;
  LODWORD(v75[1]) = v66;
  CFTypeRef v34 = v68;
  unint64_t v65 = 0;
  CFTypeRef v68 = 0;
  CFTypeRef v76 = v34;
  char v77 = v69;
  int v78 = 0;
  uint64_t v35 = *(void *)a1;
  *(void *)a1 = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v35 + 16))(v35, cf);
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  if (v78 != -1) {
    ((void (*)(uint64_t *, CFTypeRef *))off_1EEA00F20[v78])(&v55, cf);
  }
  int v78 = -1;
  CFTypeRef v37 = v68;
  CFTypeRef v68 = 0;
  if (v37) {
    CFRelease(v37);
  }
  int8x16_t v38 = v65;
  unint64_t v65 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  int v44 = (WTF::StringImpl *)v62[1];
  v62[1] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v36);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  char v45 = (WTF::StringImpl *)v62[0];
  v62[0] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v36);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
LABEL_64:
  uint64_t v46 = v70;
  uint64_t v70 = 0;
  if (v46)
  {
    char v47 = 0;
    uint64_t v48 = *((void *)v46 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v48, (unsigned __int8 *)&v47, 1u, memory_order_acquire, memory_order_acquire);
    if (v47) {
      MEMORY[0x19972E8D0](v48);
    }
    uint64_t v49 = *(void *)(v48 + 8);
    int v50 = 1;
    uint64_t v51 = v49 - 1;
    *(void *)(v48 + 8) = v49 - 1;
    if (v49 == 1)
    {
      uint64_t v54 = *(void *)(v48 + 16);
      uint64_t v52 = *(void *)(v48 + 24);
      *(void *)(v48 + 24) = 0;
      BOOL v53 = v54 != 0;
    }
    else
    {
      uint64_t v52 = 0;
      BOOL v53 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v48, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
    if (v50 == 1)
    {
      if (!v51)
      {
LABEL_71:
        if (v52) {
          (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
        }
        if (!v53) {
          WTF::fastFree((WTF *)v48, v36);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v48);
      if (!v51) {
        goto LABEL_71;
      }
    }
  }
  unint64_t result = (_DWORD *)v71;
  uint64_t v71 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

BOOL WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  unsigned int v7 = (v6 ^ HIWORD(v6)) & v3;
  int v8 = *(_DWORD *)(v2 + 4 * v7);
  if (v8 == *a2) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v10) & v3;
    int v8 = *(_DWORD *)(v2 + 4 * v7);
    ++v10;
  }
  while (v8 != v4);
  return result;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (BOOL result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  int v9 = *a2;
  unsigned int v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  unsigned int v12 = (v11 ^ HIWORD(v11)) & v8;
  atomic_uint *volatile v13 = (int *)(v6 + 4 * v12);
  int v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if (v7) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v6 - 4);
        }
        char v24 = 0;
        uint64_t v25 = v6 + 4 * v23;
        goto LABEL_27;
      }
      if (v14 == -1) {
        uint64_t v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v8;
      atomic_uint *volatile v13 = (int *)(v6 + 4 * v12);
      int v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *uint64_t v15 = 0;
      --*(_DWORD *)(*v4 - 16);
      int v9 = *a2;
      atomic_uint *volatile v13 = v15;
    }
  }
  int *v13 = v9;
  uint64_t v17 = *v4;
  if (*v4) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *v4;
  if (*v4) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_18:
      BOOL result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(v4, v13);
      atomic_uint *volatile v13 = (int *)result;
      uint64_t v19 = *v4;
      if (*v4) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_18;
  }
  uint64_t v25 = v19 + 4 * v22;
  char v24 = 1;
LABEL_27:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v25;
  *(unsigned char *)(a3 + 16) = v24;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(4 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    do
    {
      atomic_uint *volatile v13 = (int *)(v6 + 4 * v11);
      int v14 = *v13;
      if ((*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        int v17 = 0;
        unsigned int v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        unsigned int v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v20 = v19 & v16;
          unsigned int v19 = ++v17 + v20;
        }
        while (*(_DWORD *)(v15 + 4 * v20));
        uint64_t v21 = (_DWORD *)(v15 + 4 * v20);
        *uint64_t v21 = v14;
        if (v13 == a3) {
          unsigned int v12 = v21;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unsigned int v12 = 0;
    BOOL result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  int v2 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v2 = *(_DWORD *)(v3 - 12) - 1;
  }
  *(_DWORD *)(v3 - 12) = v2;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  uint64_t v6 = (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & v3;
  int v7 = *(_DWORD *)(v2 + 4 * v6);
  if (v7 == *a2) {
    return v2 + 4 * v6;
  }
  int v8 = 1;
  while (v7)
  {
    uint64_t v6 = (v6 + v8) & v3;
    int v7 = *(_DWORD *)(v2 + 4 * v6);
    ++v8;
    if (v7 == v4) {
      return v2 + 4 * v6;
    }
  }
  return v2 + 4 * *(unsigned int *)(v2 - 4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA00F40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA00F40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::UserData>>(a2, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v3 = v9;
      if (v9) {
        CFRetain(*(CFTypeRef *)(v9 + 8));
      }
      uint64_t v4 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      if (v3) {
        CFRelease(*(CFTypeRef *)(v3 + 8));
      }
      if (v10)
      {
        uint64_t v5 = v9;
        uint64_t v9 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    int v7 = *(void (**)(uint64_t))(*(void *)v6 + 8);
    v7(v6);
  }
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::HandleSynchronousMessage>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3763, a3, &v27, &v26);
  uint64_t v11 = v26;
  if (a4)
  {
    **((unsigned char **)v26 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v11, a2[1]);
  IPC::Connection::sendSyncMessage(a1, v27, (uint64_t *)&v26, a4, (uint64_t)&v24, a6);
  if (!v25)
  {
    LOBYTE(v22) = 0;
    unsigned __int8 v23 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(v24, (uint64_t)&v22);
    if (v23)
    {
      if (v25) {
        goto LABEL_19;
      }
      int v14 = v24;
      char v24 = 0;
      uint64_t v15 = v22;
      if (v22)
      {
        CFRetain(*(CFTypeRef *)(v22 + 8));
        CFRetain(*(CFTypeRef *)(v15 + 8));
        CFRelease(*(CFTypeRef *)(v15 + 8));
        int v16 = v23;
        *(void *)a5 = v14;
        *(void *)(a5 + 8) = v15;
        *(_DWORD *)(a5 + 16) = 0;
        if (!v16) {
          goto LABEL_13;
        }
      }
      else
      {
        *(void *)a5 = v14;
        *(void *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 0;
      }
      uint64_t v17 = v22;
      uint64_t v22 = 0;
      if (v17) {
        CFRelease(*(CFTypeRef *)(v17 + 8));
      }
    }
    else
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
    }
LABEL_13:
    int v12 = v25;
    if (v25 == -1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v25 != 1)
  {
LABEL_19:
    uint64_t v21 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(v21);
  }
  *(unsigned char *)a5 = (_BYTE)v24;
  int v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_14:
  ((void (*)(uint64_t *, IPC::Decoder **))off_1EEA00D90[v12])(&v22, &v24);
LABEL_15:
  BOOL result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA00F68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA00F68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::call(uint64_t a1, uint64_t a2)
{
}

void WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    atomic_fetch_add((atomic_uint *volatile)a2, 1u);
    uint64_t v2 = *(void *)(a2 + 48);
  }
  else
  {
    uint64_t v2 = 0;
  }
  v5[0] = v2;
  v5[1] = a2;
  uint64_t v5[2] = 0;
  uint64_t v3 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  IPC::SharedBufferReference::~SharedBufferReference((IPC::SharedBufferReference *)v5, v4);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::add@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (BOOL result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = (WebKit::WebURLSchemeHandlerProxy *)*a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  int v14 = (WebKit::WebURLSchemeHandlerProxy **)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    int v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == (WebKit::WebURLSchemeHandlerProxy *)-1) {
        int v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      int v14 = (WebKit::WebURLSchemeHandlerProxy **)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      _DWORD *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = (WebKit::WebURLSchemeHandlerProxy *)*a2;
      int v14 = v16;
    }
  }
  *a2 = 0;
  BOOL result = (uint64_t *)*v14;
  IPC::Decoder *v14 = v9;
  if (result) {
    BOOL result = (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref((WebKit::WebURLSchemeHandlerProxy *)result, a2);
  }
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      BOOL result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(v4, v14);
      int v14 = (WebKit::WebURLSchemeHandlerProxy **)result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_31:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + 16) = v25;
  return result;
}

WebKit::WebURLSchemeHandlerProxy **WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(uint64_t *a1, WebKit::WebURLSchemeHandlerProxy **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (WebKit::WebURLSchemeHandlerProxy **)(v4 + 8 * v10);
      unsigned int v13 = *v12;
      if (*v12 != (WebKit::WebURLSchemeHandlerProxy *)-1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = ((unint64_t)v13 + ~((void)v13 << 32)) ^ (((unint64_t)v13 + ~((void)v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 8 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (WebKit::WebURLSchemeHandlerProxy **)(v14 + 8 * v21);
          *uint64_t v23 = 0;
          unint64_t v24 = *v12;
          *unint64_t v12 = 0;
          *uint64_t v23 = v24;
          char v25 = *v12;
          *unint64_t v12 = 0;
          if (v25) {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v25, v9);
          }
          if (v12 == a2) {
            unint64_t v11 = v23;
          }
        }
        else
        {
          *unint64_t v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    unint64_t v11 = 0;
    BOOL result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      unsigned int v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 & v17;
            unsigned int v19 = ++v20 + v21;
          }
          while (*(void *)(v16 + 16 * v21));
          uint64_t v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          uint64_t v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v23, v9);
            unint64_t v24 = *v22;
            *uint64_t v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v9);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v22 = 0;
          }
          char v25 = *v12;
          *unint64_t v12 = 0;
          *uint64_t v22 = v25;
          uint64_t v26 = v4 + 16 * v10;
          uint64_t v27 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          v22[1] = v27;
          long long v28 = *(WebKit::WebURLSchemeHandlerProxy **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28) {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v28, v9);
          }
          uint64_t v29 = *v12;
          *unint64_t v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v9);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a2) {
            unint64_t v11 = v22;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          int v15 = *(WebKit::WebURLSchemeHandlerProxy **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v15, v9);
            unsigned int v13 = *v12;
          }
          *unint64_t v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    unint64_t v11 = 0;
    BOOL result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (uint64_t *)(v2 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          uint64_t v22 = (uint64_t *)(v13 + 16 * v20);
          uint64_t v23 = (unsigned int *)v22[1];
          v22[1] = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v7);
          }
          *uint64_t v22 = *v9;
          uint64_t v24 = v2 + 16 * v8;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v22[1] = v25;
          unint64_t v12 = *(atomic_uint **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v12 || atomic_fetch_add(v12, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v11 = v2 + 16 * v8;
          unint64_t v12 = *(atomic_uint **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (!v12 || atomic_fetch_add(v12, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        atomic_store(1u, (unsigned int *)v12);
        WTF::fastFree((WTF *)v12, v7);
      }
LABEL_20:
      if (++v8 == v3) {
        goto LABEL_27;
      }
    }
  }
  if (v2)
  {
LABEL_27:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 16 * v6);
    if (v7 != a2)
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 16 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      return 0;
    }
LABEL_6:
    uint64_t v9 = *(void *)(result + 16 * v6 + 8);
    if (!v9) {
      return 0;
    }
    return *(void *)(v9 + 8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA00FB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA00FB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, a2[2]);
  unsigned __int16 v4 = a2[3];

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA00FE0;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA00FE0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::decode(a2, (uint64_t)&v18);
    if (v20)
    {
LABEL_4:
      __int16 v13 = (__int16)v18;
      char v14 = BYTE2(v18);
      char v17 = 1;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(v2, &v18);
      uint64_t v5 = v19[1];
      v19[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t v8 = v19[0];
      v19[0] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v4);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v4);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v11 = a2[3];
    if (v11)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
        if (v20) {
          goto LABEL_4;
        }
        unint64_t v12 = (WTF::StringImpl *)*a2;
        uint64_t v10 = a2[1];
        uint64_t v11 = a2[3];
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v12 = 0;
LABEL_20:
    LOBYTE(v13) = 0;
    char v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    if (v11 && v10) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v11 + 16))(v11, v12);
    }
    std::__optional_destruct_base<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v12);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(v2);
  }
  uint64_t v6 = a1 + 8;

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(v6);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(uint64_t a1)
{
  LOWORD(v4) = 0;
  BYTE2(v4) = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(a1, &v4);
  uint64_t v2 = v6;
  uint64_t v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v1);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    if (*((unsigned char *)a2 + 2))
    {
      WebKit::WebPage::addDomainWithPageLevelStorageAccess(*(WebKit::WebPage **)a1, a2 + 1, a2 + 2);
    }
    else
    {
      uint64_t v4 = WebKit::WebFrame::localFrameLoaderClient(*(WebKit::WebFrame **)(a1 + 24));
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(unsigned __int8 *)(v4 + 80);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 40);
      *(void *)(v4 + 72) = v5;
      if (!v6) {
        *(unsigned char *)(v4 + 80) = 1;
      }
    }
  }
  __int16 v12 = *(_WORD *)a2;
  char v13 = *((unsigned char *)a2 + 2);
  uint64_t v7 = a2[1];
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  char v14 = v7;
  uint64_t v8 = a2[2];
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v15 = v8;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 16), (uint64_t)&v12);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v14;
  char v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::StorageAccessScope>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::StorageAccessScope>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 32));
  char v4 = *(unsigned char *)(a2 + 40);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetLoginStatus,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA01008;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetLoginStatus,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA01008;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetLoginStatus,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::InputMode,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WebCore::LoginStatus>,void>::encode<IPC::Encoder,std::optional<WebCore::LoginStatus> const&>(a1, v4);
}

void *IPC::ArgumentCoder<std::optional<WebCore::LoginStatus>,void>::encode<IPC::Encoder,std::optional<WebCore::LoginStatus> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 40);
  uint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993A50D0);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 40))
    {
      return (void *)IPC::ArgumentCoder<WebCore::LoginStatus,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993A50F0);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA01030;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA01030;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsLoggedIn,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2085;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,BOOL>,0ul,1ul,2ul>(v10, a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  __int16 v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v12 = &unk_1EEA01058;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  char v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, *(char **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA01058;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA01058;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, v4);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
        uint64_t v11 = a2[3];
        uint64_t v12 = *a2;
        uint64_t v13 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        if (v11)
        {
          if (v13) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v12);
          }
        }
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2098;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::encode(v10, *a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EEA01080;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  char v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA01080;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA01080;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2087;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::encode(v10, *a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EEA010A8;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  char v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA010A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA010A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (unsigned __int16 v4 = *(char **)a2) == 0)
  {
    uint64_t v21 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v21);
  }
  unint64_t v5 = *((void *)a2 + 1);
  if (v5 <= *((void *)a2 + 2) - (void)v4)
  {
    unint64_t v27 = 0;
    long long v28 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v29 = *((void *)a2 + 3);
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        unint64_t v27 = 0;
        uint64_t v52 = *(char **)a2;
        uint64_t v53 = *((void *)a2 + 1);
        uint64_t v54 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        long long v28 = 0;
        if (v54 && v53)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v54 + 16))(v54, v52);
          long long v28 = *(char **)a2;
          unint64_t v27 = *((void *)a2 + 1);
        }
      }
      else
      {
        unint64_t v27 = 0;
        long long v28 = 0;
      }
    }
    goto LABEL_31;
  }
  uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
  uint64_t v7 = v6 + 1;
  *((void *)a2 + 2) = v6 + 1;
  unsigned int v8 = *v6;
  if (v8 >= 2)
  {
    unint64_t v27 = v5;
    long long v28 = v4;
LABEL_31:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (v30 && v27) {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
    }
    goto LABEL_50;
  }
  if (v8)
  {
    unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v9 || v5 - v9 <= 7)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v31 = *((void *)a2 + 3);
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
        uint64_t v32 = *(char **)a2;
        uint64_t v33 = *((void *)a2 + 1);
        uint64_t v34 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v34)
        {
          if (v33) {
            (*(void (**)(uint64_t, char *))(*(void *)v34 + 16))(v34, v32);
          }
        }
      }
LABEL_49:
      CFTypeRef v43 = *(char **)a2;
      uint64_t v44 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v45 = *((void *)a2 + 3);
      if (v45 && v44) {
        (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v43);
      }
LABEL_50:
      uint64_t v46 = *(char **)a2;
      uint64_t v47 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v48 = *((void *)a2 + 3);
      if (v48 && v47)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v48 + 16))(v48, v46);
        uint64_t v49 = *(char **)a2;
        uint64_t v50 = *((void *)a2 + 1);
        uint64_t v51 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v51)
        {
          if (v50) {
            (*(void (**)(uint64_t, char *))(*(void *)v51 + 16))(v51, v49);
          }
        }
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
      }
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
    }
    uint64_t v11 = (unint64_t *)&v4[v9];
    unint64_t v12 = *v11;
    *((void *)a2 + 2) = v11 + 1;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    if (v12 >= 0x5555)
    {
      do
      {
        IPC::Decoder::decode<WebCore::ContactInfo>((uint64_t)&v66, a2);
        if (!v75) {
          goto LABEL_48;
        }
        int v35 = HIDWORD(v77);
        if (HIDWORD(v77) == v77)
        {
          WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>((uint64_t)&v76, (unint64_t)&v66);
        }
        else
        {
          uint64_t v36 = v76 + 48 * HIDWORD(v77);
          *(void *)uint64_t v36 = 0;
          *(void *)(v36 + 8) = 0;
          uint64_t v37 = v66;
          uint64_t v66 = 0;
          *(void *)uint64_t v36 = v37;
          LODWORD(v37) = v67;
          int v67 = 0;
          *(_DWORD *)(v36 + 8) = v37;
          LODWORD(v37) = v68;
          int v68 = 0;
          *(_DWORD *)(v36 + 12) = v37;
          *(void *)(v36 + 16) = 0;
          *(void *)(v36 + 24) = 0;
          uint64_t v38 = v69;
          uint64_t v69 = 0;
          *(void *)(v36 + 16) = v38;
          LODWORD(v38) = v70;
          int v70 = 0;
          *(_DWORD *)(v36 + 24) = v38;
          LODWORD(v38) = v71;
          int v71 = 0;
          *(_DWORD *)(v36 + 28) = v38;
          *(void *)(v36 + 32) = 0;
          *(void *)(v36 + 40) = 0;
          uint64_t v39 = v72;
          uint64_t v72 = 0;
          *(void *)(v36 + 32) = v39;
          LODWORD(v39) = v73;
          int v73 = 0;
          *(_DWORD *)(v36 + 40) = v39;
          LODWORD(v39) = v74;
          int v74 = 0;
          *(_DWORD *)(v36 + 44) = v39;
          HIDWORD(v77) = v35 + 1;
        }
        uint64_t result = std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v13);
        --v12;
      }
      while (v12);
      LODWORD(v12) = v77;
      int v19 = (WTF *)v76;
      unsigned int v55 = HIDWORD(v77);
      if (v77 > HIDWORD(v77))
      {
        uint64_t v40 = (WTF *)v76;
        if (HIDWORD(v77))
        {
          if (HIDWORD(v77) >= 0x5555556)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v41 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v77)));
          LODWORD(v12) = 48 * v55 / 0x30;
          if ((WTF *)v41 == v19)
          {
            uint64_t v40 = v19;
          }
          else
          {
            uint64_t v40 = (WTF *)v41;
            WTF::VectorMover<false,WebCore::ContactInfo>::move((uint64_t)v19, (char *)v19 + 48 * v55, v41);
          }
        }
        if (v19)
        {
          if (v40 == v19)
          {
            LODWORD(v12) = 0;
            uint64_t v40 = 0;
            uint64_t v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(v19, v4);
        }
        int v19 = v40;
      }
      uint64_t v76 = 0;
      LODWORD(v77) = 0;
      unsigned int v20 = v55;
      goto LABEL_26;
    }
    if (v12)
    {
      LODWORD(v77) = 48 * (int)v12 / 0x30u;
      uint64_t v76 = WTF::fastMalloc((WTF *)(48 * v12));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ContactInfo>((uint64_t)&v66, a2);
        if (!v75) {
          break;
        }
        int v14 = HIDWORD(v77);
        if (HIDWORD(v77) == v77)
        {
          WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>((uint64_t)&v76, (unint64_t)&v66);
        }
        else
        {
          uint64_t v15 = v76 + 48 * HIDWORD(v77);
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v66;
          uint64_t v66 = 0;
          *(void *)uint64_t v15 = v16;
          LODWORD(v16) = v67;
          int v67 = 0;
          *(_DWORD *)(v15 + 8) = v16;
          LODWORD(v16) = v68;
          int v68 = 0;
          *(_DWORD *)(v15 + 12) = v16;
          *(void *)(v15 + 16) = 0;
          *(void *)(v15 + 24) = 0;
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          *(void *)(v15 + 16) = v17;
          LODWORD(v17) = v70;
          int v70 = 0;
          *(_DWORD *)(v15 + 24) = v17;
          LODWORD(v17) = v71;
          int v71 = 0;
          *(_DWORD *)(v15 + 28) = v17;
          *(void *)(v15 + 32) = 0;
          *(void *)(v15 + 40) = 0;
          uint64_t v18 = v72;
          uint64_t v72 = 0;
          *(void *)(v15 + 32) = v18;
          LODWORD(v18) = v73;
          int v73 = 0;
          *(_DWORD *)(v15 + 40) = v18;
          LODWORD(v18) = v74;
          int v74 = 0;
          *(_DWORD *)(v15 + 44) = v18;
          HIDWORD(v77) = v14 + 1;
        }
        std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v13);
        if (!--v12)
        {
          int v19 = (WTF *)v76;
          LODWORD(v12) = v77;
          unsigned int v20 = HIDWORD(v77);
          goto LABEL_25;
        }
      }
LABEL_48:
      std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v13);
      WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v42);
      goto LABEL_49;
    }
    unsigned int v20 = 0;
    int v19 = 0;
LABEL_25:
    uint64_t v76 = 0;
    LODWORD(v77) = 0;
LABEL_26:
    HIDWORD(v77) = 0;
    char v65 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v4);
    v64[0] = 0;
    v64[1] = 0;
    char v62 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64, v23);
    char v63 = 1;
    v61[0] = 0;
    v61[1] = 0;
    float v56 = v19;
    int v57 = v12;
    unsigned int v58 = v20;
    char v59 = 1;
    char v60 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v24);
  }
  else
  {
    LOBYTE(v56) = 0;
    char v59 = 0;
    char v60 = 1;
  }
  uint64_t v25 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v25 + 16))(v25, &v56);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 8))(v25);
  if (v60 && v59) {
    return WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v26);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  char v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5) {
    return WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ContactInfo>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ContactInfo,void>::decode(a2, a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  uint64_t v7 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(v4 + 32) = v7;
  LODWORD(v7) = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1993A6674);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (void *)(*(void *)result + 48 * *(unsigned int *)(result + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::ContactInfo>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::ContactInfo>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v8 = *(void *)(v5 + 32);
      *(void *)(v5 + 32) = 0;
      *(void *)(a3 + 32) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 40);
      *(_DWORD *)(v5 + 40) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 44);
      *(_DWORD *)(v5 + 44) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 32, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 16, v9);
      unint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v10);
      v5 += 48;
      a3 += 48;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v4);
  }
  return a1;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RequestDOMPasteAccess>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3769, a3, &v38, &v37);
  uint64_t v11 = v37;
  if (a4)
  {
    **((unsigned char **)v37 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  char v12 = *(unsigned char *)a2;
  uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1993A68D4);
  }
  unsigned char *v13 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, a2[1]);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2[3]);
  IPC::Connection::sendSyncMessage(a1, v38, (uint64_t *)&v37, (char)a4, (uint64_t)&v35, a6);
  int v15 = v36;
  if (!v36)
  {
    a4 = v35;
    uint64_t v16 = v35[1];
    uint64_t v17 = (char *)*v35;
    unint64_t v18 = (unsigned char *)v35[2] - (unsigned char *)*v35;
    if ((unint64_t)v16 <= v18)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      *int v35 = 0;
      a4[1] = 0;
      uint64_t v24 = a4[3];
      if (v24)
      {
        if (v16)
        {
          (*(void (**)(void *, char *, void *))(*(void *)v24 + 16))(v24, v17, v16);
          uint64_t v23 = *a4;
          uint64_t v22 = a4[1];
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
        }
      }
    }
    else
    {
      int v19 = &v17[v18];
      IntPoint v35[2] = v19 + 1;
      if (v17)
      {
        unsigned int v20 = *v19;
        if (v20 < 3)
        {
          int v21 = 0;
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      uint64_t v22 = v16;
      uint64_t v23 = 0;
    }
    *a4 = 0;
    a4[1] = 0;
    uint64_t v25 = (uint64_t)a4[3];
    if (v25) {
      goto LABEL_27;
    }
    goto LABEL_14;
  }
  if (v36 == 1)
  {
    *(unsigned char *)a5 = (_BYTE)v35;
LABEL_18:
    *(_DWORD *)(a5 + 16) = v15;
LABEL_19:
    ((void (*)(char *, void ***))off_1EEA00D90[v15])(&v39, &v35);
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v25 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    if (v22) {
      (*(void (**)(uint64_t, void *))(*(void *)v25 + 16))(v25, v23);
    }
LABEL_14:
    LOBYTE(v20) = 0;
    int v21 = 1;
LABEL_15:
    if (v21) {
      break;
    }
    if (!v36)
    {
      uint64_t v26 = v35;
      int v35 = 0;
      *(void *)a5 = v26;
      *(unsigned char *)(a5 + 8) = v20;
      goto LABEL_18;
    }
  }
  unint64_t v27 = *a4;
  uint64_t v31 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v32 = a4[3];
  if (v32)
  {
    if (v31)
    {
      (*(void (**)(void *, void *))(*(void *)v32 + 16))(v32, v27);
      unint64_t v27 = *a4;
      uint64_t v33 = a4[1];
      uint64_t v34 = a4[3];
      *a4 = 0;
      a4[1] = 0;
      if (v34)
      {
        if (v33) {
          (*(void (**)(void *, void *))(*(void *)v34 + 16))(v34, v27);
        }
      }
    }
  }
  *(unsigned char *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  int v15 = v36;
  if (v36 != -1) {
    goto LABEL_19;
  }
LABEL_20:
  unint64_t result = v37;
  uint64_t v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v27);
    return (IPC::Encoder *)WTF::fastFree(v29, v30);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *a2 = v3;
  uint64_t v4 = *(_DWORD **)(a3 + 8);
  if (v4) {
    *v4 += 2;
  }
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EEA010E8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EEA010E8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(a2 + 544);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    char v7 = 1;
    if (v6)
    {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
      char v7 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  uint64_t v8 = *((void *)result + 1);
  if (v8 && *(void *)(v8 + 8))
  {
    if (v7) {
      return result;
    }
    WebKit::WebFrame::fromCoreFrame(v6, &v20);
    if (v20)
    {
      uint64_t v9 = *((void *)v4 + 1);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10) {
          uint64_t v11 = v10 - 16;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v13 = *(void *)(v11 + 32);
      uint64_t v12 = v11 + 32;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
      int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v15 = 1918;
      *((void *)v15 + 1) = v14;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 70) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      int v21 = v15;
      IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v15, a3);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v12 + 32))(v12, &v21, 0);
      uint64_t v17 = v21;
      int v21 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v16);
        WTF::fastFree(v18, v19);
      }
      if (v20) {
        CFRelease(*(CFTypeRef *)(v20 + 8));
      }
    }
  }
  else if (v7)
  {
    return result;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  *(void *)unint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x5555556)
  {
    uint64_t v5 = 48 * a3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a3));
    *(_DWORD *)(v3 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v3 = v6;
    uint64_t v7 = v6 + 32;
    uint64_t v8 = a2 + 32;
    do
    {
      long long v9 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(v7 - 16) = v9;
      uint64_t v7 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v8)
         + 48;
      v8 += 48;
      v5 -= 48;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::MediaProducerMediaState>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, int *a2)
{
  int v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v4 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)unint64_t result = v2;
  }
  return result;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      unint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          void *v9 = 0;
          *(void *)unint64_t v7 = v10;
          unint64_t result = *v9;
          void *v9 = 0;
          if (result) {
            unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)unint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      unsigned int v2 = result;
      unint64_t v3 = *(unsigned int **)result;
      unint64_t v4 = (unsigned int *)(*(void *)result + 24 * result[3]);
      int v5 = 24 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)unsigned int v2 = v6;
      unint64_t result = WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v3, v4, v6);
      if (v3)
      {
        if (*(unsigned int **)v2 == v3)
        {
          *(void *)unsigned int v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree((WTF *)v3, v7);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA01110;
  unint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  unint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA01110;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebCore::TextRecognitionResult>(a2, (uint64_t)&v20);
    if (v27)
    {
      uint64_t v5 = v20;
      uint64_t v20 = 0;
      v18[0] = v5;
      uint64_t v6 = v21;
      uint64_t v21 = 0;
      v18[1] = v6;
      uint64_t v7 = v22;
      uint64_t v22 = 0;
      void v18[2] = v7;
      uint64_t v8 = v23;
      uint64_t v23 = 0;
      v18[3] = v8;
      uint64_t v9 = v24;
      uint64_t v24 = 0;
      v18[4] = v9;
      uint64_t v10 = v25;
      uint64_t v25 = 0;
      uint64_t v18[5] = v10;
      uint64_t v11 = v26;
      uint64_t v26 = 0;
      v18[6] = v11;
      char v19 = 1;
      std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v4);
      WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(v2);
      return std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v12);
    }
    else
    {
      LOBYTE(v18[0]) = 0;
      char v19 = 0;
      std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v4);
      int v15 = (void *)*a2;
      unint64_t v16 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v17 = a2[3];
      if (v17)
      {
        if (v16) {
          (*(void (**)(unint64_t, void *))(*(void *)v17 + 16))(v17, v15);
        }
      }
      std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v15);
      return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(v2);
    }
  }
  else
  {
    uint64_t v14 = a1 + 8;
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(v14);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(a1);
  CFTypeRef cf = 0;
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v1);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v3);
}

void IPC::Decoder::decode<WebCore::TextRecognitionResult>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      long long v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    unint64_t v3 = *(const void **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v4);
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v5);
  }
  return a1;
}

void WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v1 = *(void *)(*(void *)a1 + 8);
    if (v1)
    {
      uint64_t v2 = a1;
      CFRetain(*(CFTypeRef *)(v1 - 8));
      unint64_t v4 = *(void *)(v1 + 2392);
      unsigned int v5 = *(_DWORD *)(v1 + 2404);
      unint64_t v6 = v4 + 24 * v5;
      if (v5)
      {
        uint64_t v37 = v2;
        int v7 = 0;
        uint64_t v8 = (unsigned int *)(v4 + 24 * v5);
        unint64_t v9 = (unint64_t)v8;
        do
        {
          if (!*(void *)v4 || !*(void *)(*(void *)v4 + 8))
          {
            uint64_t v10 = *(unsigned int *)(v4 + 20);
            if (v10)
            {
              uint64_t v11 = *(uint64_t **)(v4 + 8);
              uint64_t v12 = 8 * v10;
              do
              {
                uint64_t v38 = 0;
                uint64_t v13 = *v11;
                *uint64_t v11 = 0;
                (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v13 + 16))(v13, &v38);
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
                uint64_t v14 = v38;
                uint64_t v38 = 0;
                if (v14)
                {
                  if (*((_DWORD *)v14 + 7) == 2)
                  {
                    if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v14);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v14 + 7) -= 2;
                  }
                }
                ++v11;
                v12 -= 8;
              }
              while (v12);
            }
            unint64_t v15 = v4;
            if (v9 != *(void *)(v1 + 2392) + 24 * *(unsigned int *)(v1 + 2404))
            {
              if (v8 == (unsigned int *)v4)
              {
                unint64_t v15 = v9;
              }
              else
              {
                WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(v8, (unsigned int *)v4, v9);
                unint64_t v15 = v9 + v4 - (void)v8;
              }
            }
            WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 8, v3);
            unint64_t v16 = *(unsigned int **)v4;
            *(void *)unint64_t v4 = 0;
            uint64_t v8 = (unsigned int *)(v4 + 24);
            if (v16) {
              WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v16, v3);
            }
            ++v7;
            unint64_t v9 = v15;
          }
          v4 += 24;
        }
        while (v4 < v6);
        unint64_t v4 = *(void *)(v1 + 2392);
        unsigned int v5 = *(_DWORD *)(v1 + 2404);
        unint64_t v6 = v9;
        uint64_t v2 = v37;
      }
      else
      {
        int v7 = 0;
        uint64_t v8 = *(unsigned int **)(v1 + 2392);
      }
      unint64_t v17 = (unsigned int *)(v4 + 24 * v5);
      if (v8 != v17)
      {
        WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(v8, v17, v6);
        unsigned int v5 = *(_DWORD *)(v1 + 2404);
      }
      *(_DWORD *)(v1 + 2404) = v5 - v7;
      uint64_t v18 = *(void *)(v2 + 8);
      if (!v18) {
        goto LABEL_62;
      }
      uint64_t v19 = *(void *)(v18 + 8);
      if (!v19) {
        goto LABEL_62;
      }
      *(_DWORD *)(v19 + 28) += 2;
      if ((*(_WORD *)(v19 + 32) & 0x10) != 0)
      {
        WebCore::ImageOverlay::updateWithTextRecognitionResult();
        uint64_t v21 = *(unsigned int *)(v1 + 2404);
        if (!v21)
        {
LABEL_60:
          if (*(_DWORD *)(v19 + 28) == 2)
          {
            if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v19);
            }
          }
          else
          {
            *(_DWORD *)(v19 + 28) -= 2;
          }
LABEL_62:
          CFRelease(*(CFTypeRef *)(v1 - 8));
          return;
        }
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        uint64_t v24 = 24 * v21;
        while (1)
        {
          uint64_t v25 = *(void *)(*(void *)(v1 + 2392) + v22);
          if (v25) {
            uint64_t v25 = *(void *)(v25 + 8);
          }
          if (v25 == v19) {
            break;
          }
          ++v23;
          v22 += 24;
          if (v24 == v22) {
            goto LABEL_60;
          }
        }
        if (WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)v19, v20)) {
          uint64_t v27 = v19;
        }
        else {
          uint64_t v27 = 0;
        }
        if (v27) {
          *(_DWORD *)(v27 + 28) += 2;
        }
        if (v23 < *(unsigned int *)(v1 + 2404))
        {
          uint64_t v28 = *(void *)(v1 + 2392);
          uint64_t v29 = *(unsigned int *)(v28 + v22 + 20);
          if (v29)
          {
            uint64_t v30 = *(uint64_t **)(v28 + v22 + 8);
            uint64_t v31 = 8 * v29;
            do
            {
              if (v27) {
                *(_DWORD *)(v27 + 28) += 2;
              }
              uint64_t v38 = (WebCore::Node *)v27;
              uint64_t v32 = *v30;
              *uint64_t v30 = 0;
              (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v32 + 16))(v32, &v38);
              (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
              uint64_t v33 = v38;
              uint64_t v38 = 0;
              if (v33)
              {
                if (*((_DWORD *)v33 + 7) == 2)
                {
                  if ((*((_WORD *)v33 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v33);
                  }
                }
                else
                {
                  *((_DWORD *)v33 + 7) -= 2;
                }
              }
              ++v30;
              v31 -= 8;
            }
            while (v31);
            uint64_t v28 = *(void *)(v1 + 2392);
          }
          unint64_t v34 = v28 + v22;
          WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28 + v22 + 8, v26);
          int v36 = *(unsigned int **)v34;
          *(void *)unint64_t v34 = 0;
          if (v36) {
            WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v36, v35);
          }
          WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping((unsigned int *)(v34 + 24), (unsigned int *)(*(void *)(v1 + 2392) + 24 * *(unsigned int *)(v1 + 2404)), v34);
          --*(_DWORD *)(v1 + 2404);
          if (v27)
          {
            if (*(_DWORD *)(v27 + 28) == 2)
            {
              if ((*(_WORD *)(v27 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v27);
              }
            }
            else
            {
              *(_DWORD *)(v27 + 28) -= 2;
            }
          }
          goto LABEL_60;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1993A7988);
    }
  }
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v4 = a3 + 24 * (((char *)a2 - (char *)result) / 24) - 8;
      unsigned int v5 = a2;
      do
      {
        uint64_t v6 = *((void *)v5 - 3);
        v5 -= 6;
        *(void *)unsigned int v5 = 0;
        *(void *)(v4 - 8) = 0;
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 - 16) = v6;
        uint64_t v8 = *((void *)a2 - 2);
        int v7 = a2 - 4;
        *(void *)int v7 = 0;
        *(void *)(v4 - 8) = v8;
        unsigned int v9 = v7[2];
        void v7[2] = 0;
        *(_DWORD *)uint64_t v4 = v9;
        unsigned int v10 = v7[3];
        v7[3] = 0;
        *(_DWORD *)(v4 + 4) = v10;
        WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v7);
        unint64_t result = *(unsigned int **)v5;
        *(void *)unsigned int v5 = 0;
        if (result) {
          unint64_t result = WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(result, v11);
        }
        v4 -= 24;
        a2 = v5;
      }
      while (v5 != v3);
    }
  }
  else
  {
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(result, a2, a3);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 2094;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v10, *(float **)a2);
  IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v10, *(void *)(a2 + 8));
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EEA01138;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  unint64_t v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA01138;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA01138;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2 && (unint64_t v3 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a2), v4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA01160;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA01160;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::call(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 24) = *(_WORD *)(*(void *)(a1 + 24) + 196);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_4:
  uint64_t v6 = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 32 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v38 = v3;
    do
    {
      uint64_t v12 = v2 + 32 * v10;
      uint64_t v13 = *(WTF::StringImpl **)v12;
      if (*(void *)v12)
      {
        if (v13 != (WTF::StringImpl *)-1)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v13 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 32 * v19));
          uint64_t v20 = v14 + 32 * v19;
          uint64_t v21 = (void *)(v20 + 16);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 16, v7);
          uint64_t v24 = (void *)(v20 + 8);
          unint64_t v23 = *(WTF::StringImpl ***)(v20 + 8);
          if (v23) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v22);
          }
          uint64_t v25 = *(WTF::StringImpl **)v20;
          *(void *)uint64_t v20 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v22);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          uint64_t v26 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          *(void *)uint64_t v20 = v26;
          uint64_t v27 = v2 + 32 * v10;
          *uint64_t v24 = 0;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *uint64_t v24 = v28;
          *uint64_t v21 = 0;
          *(void *)(v20 + 24) = 0;
          uint64_t v29 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          *uint64_t v21 = v29;
          LODWORD(v28) = *(_DWORD *)(v27 + 24);
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v30 = v14 + 32 * v19;
          *(_DWORD *)(v30 + 24) = v28;
          LODWORD(v28) = *(_DWORD *)(v27 + 28);
          *(_DWORD *)(v27 + 28) = 0;
          *(_DWORD *)(v30 + 28) = v28;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 16, v22);
          uint64_t v31 = *(WTF::StringImpl ***)(v27 + 8);
          if (v31) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)v7);
          }
          uint64_t v32 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v14 + 32 * v19;
          }
        }
      }
      else
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 16, v7);
        uint64_t v33 = *(WTF::StringImpl ***)(v12 + 8);
        if (v33) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v7);
        }
        unint64_t v34 = *(WTF::StringImpl **)v12;
        *(void *)uint64_t v12 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v7);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      ++v10;
    }
    while (v10 != v38);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v8;
  uint64_t v12 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v6;
    do
    {
      unsigned int v16 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v13);
      if (*v16 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v16, 0, v10))
        {
          WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~KeyValuePair(v5 + 16 * v13, v17);
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = WTF::ASCIICaseInsensitiveHash::hash(*v16, v17);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            int v23 = WTF::equal(*(WTF **)(v18 + 16 * v22), 0, v10);
            int v20 = ++v21 + v22;
          }
          while (!v23);
          uint64_t v24 = v18 + 16 * v22;
          uint64_t v26 = (void *)(v24 + 8);
          uint64_t v25 = *(WTF::StringImpl ***)(v24 + 8);
          if (v25) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v9);
          }
          uint64_t v27 = *(WTF::StringImpl **)v24;
          *(void *)uint64_t v24 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v9);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          uint64_t v28 = *v16;
          unsigned int *v16 = 0;
          *(void *)uint64_t v24 = v28;
          uint64_t v29 = v5 + 16 * v13;
          *uint64_t v26 = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          *(void *)(v29 + 8) = 0;
          *uint64_t v26 = v30;
          uint64_t v31 = *(WTF::StringImpl ***)(v29 + 8);
          if (v31) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v9);
          }
          uint64_t v32 = *v16;
          unsigned int *v16 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v9);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v24;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v14;
}

uint64_t *WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)> &&>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  int v4 = (void *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
  uint64_t v5 = *result;
  uint64_t *result = 0;
  *int v4 = v5;
  v4[1] = result[1];
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WebKit::WebPage::simulateClickOverFirstMatchingTextInViewportWithUserInteraction(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::Candidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 2);
  unint64_t v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 16;
  }
  if (v4 <= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v6 = result;
      int v7 = (WTF *)*result;
      uint64_t v8 = *((unsigned int *)result + 3);
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v5));
      *((_DWORD *)v6 + 2) = v5;
      uint64_t *v6 = (uint64_t)result;
      if (v8)
      {
        uint64_t v10 = result;
        uint64_t result = (uint64_t *)v7;
        do
        {
          uint64_t v11 = *result;
          uint64_t *result = 0;
          uint64_t *v10 = v11;
          v10[1] = result[1];
          uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(result)
                 + 2;
          v10 += 2;
        }
        while (result != (uint64_t *)((char *)v7 + 16 * v8));
      }
      if (v7)
      {
        if ((WTF *)*v6 == v7)
        {
          uint64_t *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0)#1},void,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA011B0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0)#1},void,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA011B0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0)#1},void,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (void *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::Exception>>>(a2, (uint64_t)&v11);
    if (!v14)
    {
      IPC::Connection::cancelReply<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(v2);
      return;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v11);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v13)
    {
      BOOL v6 = 0;
    }
    else
    {
      if (!*v2) {
        return;
      }
      uint64_t v8 = *(void *)(*v2 + 8);
      if (!v8) {
        return;
      }
      CFRetain(*(CFTypeRef *)(v8 - 8));
      uint64_t v9 = *(_DWORD **)(v8 + 32);
      if (v9)
      {
        ++*v9;
        WebCore::Page::updateCaptureState();
        WTF::RefCounted<WebCore::Page>::deref(v9);
      }
      CFRelease(*(CFTypeRef *)(v8 - 8));
      BOOL v6 = v13 == 0;
    }
    if (v14)
    {
      if (!v6)
      {
        uint64_t v10 = v12;
        uint64_t v12 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v5);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
    }
  }
  else
  {
    int v7 = (void *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(v7);
  }
}

void IPC::Connection::cancelReply<Messages::WebPageProxy::ValidateCaptureStateUpdate,WebKit::WebPage::updateCaptureState(WebCore::Document const&,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0>(void *a1)
{
  v7[0] = 0;
  char v9 = 0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v7);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v9) {
    goto LABEL_2;
  }
  if (*a1)
  {
    uint64_t v5 = *(void *)(*a1 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      BOOL v6 = *(_DWORD **)(v5 + 32);
      if (v6)
      {
        ++*v6;
        WebCore::Page::updateCaptureState();
        WTF::RefCounted<WebCore::Page>::deref(v6);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
      if (v9)
      {
LABEL_2:
        uint64_t v4 = v8;
        uint64_t v8 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            WTF::StringImpl::destroy(v4, v3);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
  }
}

void IPC::handleMessage<Messages::WebPage::SetTopContentInsetFenced,WebKit::WebPage,WebKit::WebPage,void ()(float,WTF::MachSendRight const&)>(IPC::Decoder *a1, WebKit::WebPage *a2)
{
  IPC::Decoder::decode<std::tuple<float,WTF::MachSendRight>>(&v3, a1);
  if (v5)
  {
    WebKit::WebPage::setTopContentInsetFenced(a2, v3, (const WTF::MachSendRight *)v4);
    if (v5) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
}

uint64_t IPC::handleMessage<Messages::WebPage::SetUnderPageBackgroundColorOverride,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::Color &&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::Color>>(a1, v5);
  if (v5[8]) {
    WebKit::WebPage::setUnderPageBackgroundColorOverride(a2);
  }
  return std::optional<WebCore::Color>::~optional((uint64_t)v5, v3);
}

void IPC::handleMessage<Messages::WebPage::LoadRequest,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::LoadParameters &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebKit::LoadParameters>>(v4, a1);
  if (v5)
  {
    WebKit::WebPage::loadRequest(a2, (uint64_t)v4);
    if (v5) {
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)v4, v3);
    }
  }
}

uint64_t IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WebKit::ContentAsStringIncludesChildFrames>>(a2);
  if ((unsigned __int16)result >= 0x100u)
  {
    char v7 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v8)
    {
      uint64_t v12 = (uint64_t *)result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v13, a1);
      char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v9 = &unk_1EEA01788;
      v9[1] = v12;
      uint64_t v10 = v13[0];
      v13[0] = 0;
      void v9[2] = v10;
      uint64_t v11 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v13);
      uint64_t v15 = a3;
      v14[0] = WebKit::WebPage::getContentsAsString;
      v14[1] = 0;
      uint64_t v12 = &v15;
      v13[0] = (atomic_uchar *volatile *)v14;
      v13[1] = (atomic_uchar *volatile *)&v11;
      IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&),std::tuple<WebKit::ContentAsStringIncludesChildFrames>,void ()(WTF::String const&)>(WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*,std::tuple<WebKit::ContentAsStringIncludesChildFrames> &&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebKit::ContentAsStringIncludesChildFrames>((uint64_t)&v12, v7);
      uint64_t result = (uint64_t)v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>(v15, a2);
  if (!v16) {
    return (atomic_uchar *volatile **)std::optional<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>::~optional((uint64_t)v15, v6);
  }
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!(_BYTE)v6) {
    return (atomic_uchar *volatile **)std::optional<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>::~optional((uint64_t)v15, v6);
  }
  uint64_t v12 = v7;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  char v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EEA01918;
  v8[1] = v12;
  char v9 = v13;
  char v13 = 0;
  char v14 = v8;
  void v8[2] = v9;
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v16)
  {
    IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&),WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>,std::__1<WebCore::ExceptionDetails> const&>(a3, (uint64_t)v15, (uint64_t)&v14);
    uint64_t v11 = v14;
    char v14 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    return (atomic_uchar *volatile **)std::optional<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>::~optional((uint64_t)v15, v6);
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebPage::TakeSnapshot,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(atomic_uchar *volatile *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>>(v13, a2);
  if (v13[28])
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      char v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EEA02188;
      v8[1] = v10;
      char v9 = v11;
      uint64_t v11 = 0;
      uint64_t v12 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&),std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,std::optional<WebCore::ShareableBitmapHandle> &&>(a3, (uint64_t)v13, (uint64_t)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<BOOL,WebKit::CallbackID>>(v11, a2);
  if (v13)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v7)
    {
      char v14 = (uint64_t *)result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v15, a1);
      char v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EEA02200;
      v8[1] = v14;
      char v9 = v15[0];
      v15[0] = 0;
      void v8[2] = v9;
      uint64_t v10 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
      uint64_t v17 = a3;
      v16[0] = WebKit::WebPage::didGetLoadDecisionForIcon;
      v16[1] = 0;
      char v14 = &v17;
      v15[0] = (atomic_uchar *volatile *)v16;
      v15[1] = (atomic_uchar *volatile *)&v10;
      IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&),std::tuple<BOOL,WebKit::CallbackID>,void ()(IPC::SharedBufferReference const&)>(WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*,std::tuple<BOOL,WebKit::CallbackID> &&,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<BOOL,WebKit::CallbackID>((uint64_t)&v14, v11[0], v12);
      uint64_t result = (uint64_t)v10;
      uint64_t v10 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebPage::SetLinkDecorationFilteringData,WebKit::WebPage,WebKit::WebPage,void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v5, a1);
  if (v6)
  {
    WebKit::WebPage::setLinkDecorationFilteringData(a2, v5, v3);
    if (v6) {
      WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
    }
  }
}

uint64_t IPC::handleMessage<Messages::WebPage::SetAllowedQueryParametersForAdvancedPrivacyProtections,WebKit::WebPage,WebKit::WebPage,void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v6, a1);
  if (v7)
  {
    uint64_t result = (uint64_t)WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(a2, (WTF::StringImpl *)v6, v4);
    if (v7) {
      return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
    }
  }
  return result;
}

BOOL WebKit::WebPage::didReceiveSyncWebPageMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, WTF::StringImpl **a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  CFRetain(*(CFTypeRef *)(a1 + 8));
  switch(*((_WORD *)a3 + 25))
  {
    case 0xEC7:
      IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, &v100);
      BOOL v8 = v105 != 0;
      if (!v105) {
        break;
      }
      char v9 = *a4;
      *a4 = 0;
      unint64_t v97 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EEA02938;
      v10[1] = v97;
      uint64_t v11 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      void v10[2] = v11;
      uint64_t v99 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      char v13 = v97;
      unint64_t v97 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v12);
        WTF::fastFree(v81, v82);
      }
      if (!v105) {
        goto LABEL_76;
      }
      unint64_t v97 = v103;
      char v14 = v104;
      unint64_t v103 = 0;
      uint64_t v104 = 0;
      v98[0] = v14;
      WebKit::WebPage::bindRemoteAccessibilityFrames(a1, v100, (uint64_t)v101, v102, (uint64_t)&v97, (uint64_t *)&v99);
      char v16 = v97;
      if (v97)
      {
        unint64_t v97 = 0;
        LODWORD(v98[0]) = 0;
        WTF::fastFree(v16, v15);
      }
      uint64_t v17 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      if (v105)
      {
        uint64_t v18 = v103;
        if (v103)
        {
          unint64_t v103 = 0;
          LODWORD(v104) = 0;
          WTF::fastFree(v18, v15);
        }
      }
      break;
    case 0xEC8:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::PrintInfo>>((uint64_t)&v100, a3);
      BOOL v8 = v106 != 0;
      if (v106)
      {
        unsigned int v19 = *a4;
        *a4 = 0;
        unint64_t v97 = v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
        int v20 = (void *)WTF::fastMalloc((WTF *)0x18);
        *int v20 = &unk_1EEA02910;
        v20[1] = v97;
        int v21 = v98[0];
        unint64_t v97 = 0;
        v98[0] = 0;
        void v20[2] = v21;
        uint64_t v99 = v20;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
        int v23 = v97;
        unint64_t v97 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v83, v84);
        }
        WebKit::WebPage::computePagesForPrintingiOS(a1, (uint64_t)v100, (uint64_t)v101, (uint64_t)&v102, (uint64_t *)&v99);
        uint64_t v24 = (uint64_t)v99;
        uint64_t v99 = 0;
        if (v24) {
          goto LABEL_18;
        }
      }
      break;
    case 0xEC9:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, (uint64_t)&v100);
      BOOL v8 = (_BYTE)v102 != 0;
      if (!(_BYTE)v102) {
        break;
      }
      uint64_t v25 = *a4;
      *a4 = 0;
      unint64_t v97 = v25;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v26 = &unk_1EEA02A28;
      v26[1] = v97;
      uint64_t v27 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      void v26[2] = v27;
      uint64_t v99 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      uint64_t v29 = v97;
      unint64_t v97 = 0;
      if (v29)
      {
        IPC::Encoder::~Encoder(v29, v28);
        WTF::fastFree(v85, v86);
      }
      if (!(_BYTE)v102) {
        goto LABEL_76;
      }
      WebKit::WebPage::frameTextForTesting(a1, (uint64_t)v100, (uint64_t)v101, (uint64_t *)&v99);
      goto LABEL_46;
    case 0xECA:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v100);
      BOOL v8 = (_BYTE)v101 != 0;
      if (!(_BYTE)v101) {
        break;
      }
      uint64_t v30 = *a4;
      *a4 = 0;
      unint64_t v97 = v30;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      uint64_t v31 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v31 = &unk_1EEA02988;
      v31[1] = v97;
      uint64_t v32 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      v31[2] = v32;
      uint64_t v99 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      unint64_t v34 = v97;
      unint64_t v97 = 0;
      if (v34)
      {
        IPC::Encoder::~Encoder(v34, v33);
        WTF::fastFree(v87, v88);
      }
      if (!(_BYTE)v101) {
        goto LABEL_76;
      }
      int v35 = v100;
      uint64_t v100 = 0;
      unint64_t v97 = v35;
      WebKit::WebPage::getDataSelectionForPasteboard(a1, (uint64_t)&v97, (uint64_t *)&v99);
      uint64_t v37 = v97;
      unint64_t v97 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v36);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      uint64_t v74 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v74) {
        (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
      }
      goto LABEL_70;
    case 0xECB:
      uint64_t v38 = *a4;
      *a4 = 0;
      uint64_t v100 = v38;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v101, a2);
      char v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v39 = &unk_1EEA02960;
      *((void *)v39 + 1) = v100;
      uint64_t v40 = v101;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      *((void *)v39 + 2) = v40;
      unint64_t v97 = v39;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v101);
      uint64_t v42 = v100;
      uint64_t v100 = 0;
      if (v42)
      {
        IPC::Encoder::~Encoder(v42, v41);
        WTF::fastFree(v77, v78);
      }
      WebKit::WebPage::getStringSelectionForPasteboard(a1, (uint64_t *)&v97);
      CFTypeRef v43 = v97;
      unint64_t v97 = 0;
      if (v43) {
        goto LABEL_65;
      }
      goto LABEL_66;
    case 0xECC:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v100);
      BOOL v8 = (_BYTE)v101 != 0;
      if (!(_BYTE)v101) {
        break;
      }
      uint64_t v44 = *a4;
      *a4 = 0;
      unint64_t v97 = v44;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v45 = &unk_1EEA029B0;
      v45[1] = v97;
      uint64_t v46 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      void v45[2] = v46;
      uint64_t v99 = v45;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      uint64_t v48 = v97;
      unint64_t v97 = 0;
      if (v48)
      {
        IPC::Encoder::~Encoder(v48, v47);
        WTF::fastFree(v89, v90);
      }
      if (!(_BYTE)v101) {
        goto LABEL_76;
      }
      WebKit::WebPage::readSelectionFromPasteboard(a1, (const WTF::String *)&v100, (uint64_t *)&v99);
      uint64_t v49 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v49) {
        (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
      }
LABEL_70:
      if ((_BYTE)v101)
      {
        char v75 = v100;
        uint64_t v100 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2) {
            WTF::StringImpl::destroy(v75, v36);
          }
          else {
            *(_DWORD *)v75 -= 2;
          }
        }
      }
      break;
    case 0xECD:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>(a3, &v100);
      BOOL v8 = (_BYTE)v104 != 0;
      if (!(_BYTE)v104) {
        break;
      }
      uint64_t v50 = *a4;
      *a4 = 0;
      unint64_t v97 = v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      uint64_t v51 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v51 = &unk_1EEA02A00;
      v51[1] = v97;
      uint64_t v52 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      v51[2] = v52;
      uint64_t v99 = v51;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      uint64_t v54 = v97;
      unint64_t v97 = 0;
      if (v54)
      {
        IPC::Encoder::~Encoder(v54, v53);
        WTF::fastFree(v91, v92);
      }
      if (!(_BYTE)v104) {
        goto LABEL_76;
      }
      WebKit::WebPage::renderTreeAsTextForTesting(a1, (uint64_t)v100, (uint64_t)v101, v102, (unsigned __int16)v103, (uint64_t *)&v99);
LABEL_46:
      uint64_t v24 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v24) {
LABEL_18:
      }
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      break;
    case 0xECE:
      IPC::Decoder::decode<std::tuple<WebKit::WebMouseEvent>>((uint64_t)&v100, (uint64_t *)a3);
      BOOL v8 = v107 != 0;
      if (!v107) {
        goto LABEL_54;
      }
      float v56 = *a4;
      *a4 = 0;
      unint64_t v97 = v56;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      int v57 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v57 = &unk_1EEA029D8;
      v57[1] = v97;
      unsigned int v58 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      v57[2] = v58;
      uint64_t v99 = v57;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      char v60 = v97;
      unint64_t v97 = 0;
      if (v60)
      {
        IPC::Encoder::~Encoder(v60, v59);
        WTF::fastFree(v93, v94);
      }
      if (!v107) {
        goto LABEL_76;
      }
      WebKit::WebPage::shouldDelayWindowOrderingEvent(a1, (uint64_t)&v100, (uint64_t *)&v99);
      uint64_t v61 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v61) {
        (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      }
LABEL_54:
      std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v100, v55);
      break;
    case 0xECF:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,BOOL>>((uint64_t)&v100, a3);
      BOOL v8 = (_BYTE)v103 != 0;
      if (!(_BYTE)v103) {
        goto LABEL_61;
      }
      char v63 = *a4;
      *a4 = 0;
      unint64_t v97 = v63;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v98, a2);
      long long v64 = (void *)WTF::fastMalloc((WTF *)0x18);
      *long long v64 = &unk_1EEA028E8;
      v64[1] = v97;
      char v65 = v98[0];
      unint64_t v97 = 0;
      v98[0] = 0;
      void v64[2] = v65;
      uint64_t v99 = v64;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v98);
      int v67 = v97;
      unint64_t v97 = 0;
      if (v67)
      {
        IPC::Encoder::~Encoder(v67, v66);
        WTF::fastFree(v95, v96);
      }
      if (!(_BYTE)v103) {
LABEL_76:
      }
        __break(1u);
      WebKit::WebPage::syncApplyAutocorrection(a1, &v100, &v101, v102, (uint64_t *)&v99);
      uint64_t v68 = (uint64_t)v99;
      uint64_t v99 = 0;
      if (v68) {
        (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
      }
LABEL_61:
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v100, v62);
      break;
    case 0xED0:
      uint64_t v69 = *a4;
      *a4 = 0;
      uint64_t v100 = v69;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v101, a2);
      int v70 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v70 = &unk_1EEA028C0;
      *((void *)v70 + 1) = v100;
      int v71 = v101;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      *((void *)v70 + 2) = v71;
      unint64_t v97 = v70;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v101);
      int v73 = v100;
      uint64_t v100 = 0;
      if (v73)
      {
        IPC::Encoder::~Encoder(v73, v72);
        WTF::fastFree(v79, v80);
      }
      WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(a1, (uint64_t *)&v97);
      CFTypeRef v43 = v97;
      unint64_t v97 = 0;
      if (v43) {
LABEL_65:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v43 + 8))(v43);
LABEL_66:
      BOOL v8 = 1;
      break;
    default:
      BOOL v8 = 0;
      break;
  }
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return v8;
}

void IPC::Decoder::decode<WebKit::WebKeyboardEvent>(unsigned char *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::decode(a2, a1);
  if (!a1[96])
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA011D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA011D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v3 = 3495;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

void IPC::Decoder::decode<std::tuple<float,WTF::MachSendRight>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  if ((v4 & 0xFF00000000) != 0)
  {
    IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder,float>((uint64_t)a1, a2, (uint64_t)&v4);
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder,float>(uint64_t a1, IPC::Decoder *this, uint64_t a3)
{
  IPC::Decoder::takeLastAttachment(this, v5);
  if (v6)
  {
    if (*(unsigned char *)(a3 + 4))
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      WTF::MachSendRight::MachSendRight();
      *(unsigned char *)(a1 + 8) = 1;
      if (v6) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v3 = 3409;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v5)
  {
    unint64_t v11 = *a2;
    unint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      goto LABEL_11;
    }
LABEL_18:
    (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
    goto LABEL_11;
  }
  char v6 = v4;
  unsigned __int16 v7 = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(a2);
  if (v7 <= 0xFFu)
  {
    unint64_t v11 = *a2;
    unint64_t v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (!v13 || !v15) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  char v8 = v7;
  uint64_t result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>((uint64_t *)a2);
  if (v10)
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = result;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  unint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EE4callESC_SD_SE_SI_(uint64_t a1, int *a2, char a3, char a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v11 = 3492;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unint64_t v16 = v11;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v11, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, a4);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::SelectionFlags>,void>::encode<IPC::Encoder>(v11, a5);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  unint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::SelectionFlags>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EE4callESC_SD_SH_(uint64_t a1, int *a2, char a3, char a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v9 = 3517;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  BOOL v14 = v9;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v9, a3);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::SelectionFlags>,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  unint64_t result = v14;
  BOOL v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA012A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA012A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EE4callESC_SD_SE_SI_(uint64_t a1, int *a2, char a3, char a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v11 = 3493;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unint64_t v16 = v11;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v11, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, a4);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::SelectionFlags>,void>::encode<IPC::Encoder>(v11, a5);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  unint64_t result = v16;
  unint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA012C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA012C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v3 = 3411;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA012F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA012F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v3 = 3410;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v3 = 3453;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebCore::TextGranularity,BOOL>>(unint64_t *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v3)
  {
    uint64_t v4 = v2;
    if ((unsigned __int16)IPC::Decoder::decode<WebCore::TextGranularity>((uint64_t *)a1) < 0x100u) {
      goto LABEL_3;
    }
    unint64_t v8 = a1[1];
    unint64_t v9 = *a1;
    unint64_t v10 = a1[2] - *a1;
    if (v8 <= v10)
    {
      unint64_t v16 = 0;
      unint64_t v17 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v18 = a1[3];
      if (v18)
      {
        if (v8)
        {
          (*(void (**)(unint64_t))(*(void *)v18 + 16))(v18);
          unint64_t v17 = *a1;
          unint64_t v16 = a1[1];
        }
        else
        {
          unint64_t v16 = 0;
          unint64_t v17 = 0;
        }
      }
    }
    else
    {
      unint64_t v11 = (unsigned __int8 *)(v9 + v10);
      a1[2] = (unint64_t)(v11 + 1);
      if (v9)
      {
        if (*v11 < 2u) {
          return v4;
        }
LABEL_18:
        *a1 = 0;
        a1[1] = 0;
        unint64_t v14 = a1[3];
        if (!v14 || !v8) {
          goto LABEL_3;
        }
        goto LABEL_20;
      }
      unint64_t v16 = v8;
      unint64_t v17 = 0;
    }
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        unint64_t v9 = *a1;
        unint64_t v8 = a1[1];
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v9 = 0;
      }
    }
    goto LABEL_18;
  }
  unint64_t v9 = *a1;
  unint64_t v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v14 = a1[3];
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
LABEL_20:
  }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v9);
LABEL_3:
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v7 = a1[3];
  if (v7 && v6) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v5);
  }
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3491;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3489;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3452;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA013B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA013B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3490;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA013E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA013E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3384;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3516;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3515;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3481;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::RevealItem,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EE4callEbSE_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3463;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v14 = v7;
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    unsigned char *v8 = a2;
    IPC::ArgumentCoder<WebKit::RevealItem,void>::encode(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    unint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA014A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA014A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, id *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3474;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v21);
  if (!v22)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_17;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v23);
  if (!v24)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_34;
  }
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v6 <= v7)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v17 = *(WTF::StringImpl **)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
      }
    }
  }
  else
  {
    unint64_t v8 = (unsigned __int8 *)v5 + v7;
    *((void *)a2 + 2) = v8 + 1;
    if (v5)
    {
      unsigned int v9 = *v8;
      if (v9 < 2)
      {
        if (v22)
        {
          int v10 = 0;
          unint64_t v11 = v21;
          int v21 = 0;
          unint64_t v12 = v23;
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v12;
          *(unsigned char *)(a1 + 16) = v9 != 0;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_8;
        }
        __break(1u);
LABEL_33:
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    unint64_t v16 = v6;
    unint64_t v17 = 0;
  }
  unint64_t v6 = 0;
  unint64_t v5 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *((void *)a2 + 3);
  if (v19)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
      unint64_t v5 = *(WTF::StringImpl **)a2;
      unint64_t v6 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      unint64_t v5 = 0;
    }
  }
LABEL_27:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result && v6) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
  }
                                                                                                + 16))(result, v5);
  *(unsigned char *)a1 = 0;
  int v20 = v24;
  *(unsigned char *)(a1 + 24) = 0;
  if (!v20) {
    goto LABEL_34;
  }
  uint64_t result = v23;
  int v23 = 0;
  if (!result) {
    goto LABEL_34;
  }
  if (*(_DWORD *)result == 2) {
    goto LABEL_33;
  }
  *(_DWORD *)result -= 2;
LABEL_34:
  int v10 = 1;
LABEL_8:
  if (v22)
  {
    uint64_t result = v21;
    int v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v10) {
          return result;
        }
        goto LABEL_17;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v10) {
    return result;
  }
LABEL_17:
  uint64_t v13 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    BOOL v15 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v15();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA014D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA014D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3383;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA014F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA014F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3476;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3458;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3418;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EE4callESC_SC_SC_(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v9 = 3439;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  BOOL v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  BOOL v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01598;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01598;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3433;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA015C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA015C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3432;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA015E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA015E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3477;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 416);
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993ACD90);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 416))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993ACDB0);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01610;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01610;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3514;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3475;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3508;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3419;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA016B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA016B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3386;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ElementContext>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t result = IPC::Decoder::decode<WebCore::ElementContext>(a2, (uint64_t)v9);
  if (v10)
  {
    long long v5 = v9[3];
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v9[4];
    long long v6 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 80) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 80) = 0;
    unint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result)
    {
      if (v8) {
        return (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v7);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA016D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA016D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EE4callESI_SL_(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3479;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v7, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::GoToBackForwardItemParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::GoToBackForwardItemParameters,void>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v5 = a1 + 32;
  *(unsigned char *)(a1 + 152) = 0;
  if (*((unsigned char *)a2 + 152))
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(v5, (uint64_t *)a2 + 4);
    *(unsigned char *)(a1 + 152) = 1;
  }
  long long v6 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 160) = v6;
  uint64_t v7 = *((void *)a2 + 23);
  *((void *)a2 + 23) = 0;
  *(void *)(a1 + 184) = v7;
  uint64_t v8 = *((void *)a2 + 24);
  *((void *)a2 + 24) = 0;
  *(void *)(a1 + 192) = v8;
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::LoadParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebKit::LoadParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[584])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::LoadParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::LoadParameters>(a2, v5);
  if (v6)
  {
    WebKit::LoadParameters::LoadParameters((uint64_t)a1, v5);
    int v4 = v6;
    a1[584] = 1;
    if (v4) {
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)v5, v3);
    }
  }
  else
  {
    *a1 = 0;
    a1[584] = 0;
  }
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v7);
  if (v8) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2, &v7, (uint64_t)a3);
  }
  *a3 = 0;
  a3[40] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  char v8 = v11;
  if (!v11)
  {
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 16) && *((unsigned char *)a3 + 16))
  {
    long long v9 = *a3;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_OWORD *)(a4 + 16) = v9;
    *(void *)(a4 + 32) = v10;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 40) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3425;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 296);
  unsigned __int8 v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993ADB0CLL);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 296))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v5, (char *)a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993ADB2CLL);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3426;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, (uint64_t)(a2 + 296));
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3430;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v10);
  if (v12)
  {
    *(void *)a1 = v10;
    uint64_t v5 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)(a1 + 8) = v5;
    uint64_t result = WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      long long v9 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v9();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::BackForwardListItemState>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[312])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v5);
  char v3 = v6;
  if (v6)
  {
    std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>((uint64_t)a2, (uint64_t)v5);
    char v3 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[312] = v3;
  return std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::ContentAsStringIncludesChildFrames>>(IPC::Decoder *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    IPC::Decoder::markInvalid(a1);
    int v3 = 0;
  }
  if (v2 <= 0x100) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = v2;
  }
  return v3 | v4;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  return IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::GetContentsAsString &&)#1}::operator()<WTF::String const&>((uint64_t *)(a1 + 8), a2);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::GetContentsAsString &&)#1}::operator()<WTF::String const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3424;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v8 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v8, v6);
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&),std::tuple<WebKit::ContentAsStringIncludesChildFrames>,void ()(WTF::String const&)>(WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*,std::tuple<WebKit::ContentAsStringIncludesChildFrames> &&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebKit::ContentAsStringIncludesChildFrames>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(uint64_t (**)(void *, BOOL, void))v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = (void *)(**(void **)a1 + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, BOOL, void))(*v5 + v3);
  }
  return v3(v5, a2 != 0, *(void *)(a1 + 16));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA017B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA017B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3423;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA017D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA017D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3428;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[24];
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993AE4A8);
    }
    unsigned char *v5 = 1;
    if (a2[24])
    {
      IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(a1, (IPC::SharedBufferReference *)a2);
    }
    else
    {
      uint64_t v7 = (IPC::Decoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993AE4C8);
    }
    unsigned char *v5 = 0;
  }
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[24] = 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3435;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3434;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3440;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3438;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA018A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA018A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3441;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA018C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA018C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3443;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MarkupExclusionRule>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MarkupExclusionRule,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MarkupExclusionRule,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA018F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA018F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EE4callESY_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3444;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[128])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&),WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>,std::__1<WebCore::ExceptionDetails> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  v5[0] = WebKit::WebPage::runJavaScriptInFrameInScriptWorld;
  v5[1] = 0;
  v4[0] = &v6;
  v4[1] = v5;
  v4[2] = a3;
  return IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&),WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>,std::__1<WebCore::ExceptionDetails> const&>(WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*,WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String> &&,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&<std::__1<WebCore::ExceptionDetails> const&> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>((uint64_t)v4, a2, (long long *)(a2 + 88), a2 + 112);
}

uint64_t std::optional<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      if (v7) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::RunJavaScriptParameters>(v6, a2);
  if (v6[88])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters>(a1, a2, (uint64_t)v6);
  }
  else
  {
    *a1 = 0;
    a1[128] = 0;
  }
  return std::optional<WebCore::RunJavaScriptParameters>::~optional((uint64_t)v6, v4);
}

uint64_t IPC::Decoder::decode<WebCore::RunJavaScriptParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::decode(a2, a1);
  if (!a1[88])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)v7);
  if (v7[24]) {
    return (void *)IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t *)a2, a3, (uint64_t)v7);
  }
  *a1 = 0;
  a1[128] = 0;
  return result;
}

uint64_t std::optional<WebCore::RunJavaScriptParameters>::~optional(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
      }
    }
    int v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(unsigned char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>(a2, (uint64_t)v9);
  if (v9[16])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>((uint64_t)a1, a3, a4, (uint64_t)v9);
  }
  else
  {
    *a1 = 0;
    a1[128] = 0;
  }
  return std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 88) && *(unsigned char *)(a3 + 24) && *(unsigned char *)(a4 + 16))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore23RunJavaScriptParametersENS_8optionalINS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEENS_4pairINS8_IN6WebKit26ContentWorldIdentifierTypeESB_yLSC_1EEENS7_6StringEEEEEC1B8sn180100IJLm0ELm1ELm2EEJS4_SF_SL_EJEJEJS4_SF_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSP_IJDpT2_EEEDpOT3_(result, (uint64_t *)a2, (long long *)a3, (void *)a4);
    *(unsigned char *)(result + 128) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore23RunJavaScriptParametersENS_8optionalINS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEENS_4pairINS8_IN6WebKit26ContentWorldIdentifierTypeESB_yLSC_1EEENS7_6StringEEEEEC1B8sn180100IJLm0ELm1ELm2EEJS4_SF_SL_EJEJEJS4_SF_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSP_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t *a2, long long *a3, void *a4)
{
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  WTF::URL::URL(a1 + 16, a2 + 2);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 64) = 0;
    uint64_t v12 = a2[8];
    a2[8] = 0;
    *(void *)(a1 + 64) = v12;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  long long v9 = *a3;
  *(void *)(a1 + 104) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 88) = v9;
  *(void *)(a1 + 112) = *a4;
  uint64_t v10 = a4[1];
  a4[1] = 0;
  *(void *)(a1 + 120) = v10;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yLSJ_1EEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_S11_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yLSJ_1EEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_S11_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yLSJ_1EEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_S11_EE4callESX_S11_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a2;
  v5[1] = a3;
  return IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::RunJavaScriptInFrameInScriptWorld &&)#1}::operator()<unsigned char const,std::__1<WebCore::ExceptionDetails> const>((uint64_t *)(a1 + 8), (uint64_t)v5, a4);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::RunJavaScriptInFrameInScriptWorld &&)#1}::operator()<unsigned char const,std::__1<WebCore::ExceptionDetails> const>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3488;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v10 = v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, *(const void **)a2, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionDetails> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v10, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
}

_DWORD *IPC::ArgumentCoder<std::optional<WebCore::ExceptionDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionDetails> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v9 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v9);
    if (*(unsigned char *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&),WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>,std::__1<WebCore::ExceptionDetails> const&>(WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*,WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String> &&,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&<std::__1<WebCore::ExceptionDetails> const&> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>(v5, v6, v7, v8);
    }
  }
  else
  {
    char v10 = 0;
    return (_DWORD *)IPC::Encoder::operator<<<BOOL>(a1, &v10);
  }
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&),WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>,std::__1<WebCore::ExceptionDetails> const&>(WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*,WebCore::RunJavaScriptParameters &&::tuple<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String> &&,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::ProcessQualified::String> const&<std::__1<WebCore::ExceptionDetails> const&> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebCore::RunJavaScriptParameters,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified::String>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t, long long *, uint64_t, void))v4;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = (void *)(**(void **)a1 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, long long *, uint64_t, void))(*v7 + v5);
  }
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  return v5(v7, a2, &v9, a4, *(void *)(a1 + 16));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3420;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3513;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, NSArray **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3395;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::encodeObjectDirectly<NSArray>(v5, *a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA019B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA019B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, NSArray **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3469;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::encodeObjectDirectly<NSArray>(v5, *a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore,std::optional<unsigned long long>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::WebPreferencesStore>(a2, (uint64_t)&v13);
  if (!v21)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 64) = 0;
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v22);
  int v5 = v23;
  if (v23)
  {
    if (!v21)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = v13;
    uint64_t v13 = 0;
    *(void *)a1 = v6;
    uint64_t v7 = v14;
    uint64_t v14 = 0;
    *(void *)(a1 + 8) = v7;
    LODWORD(v6) = v15;
    int v15 = 0;
    *(_DWORD *)(a1 + 16) = v6;
    LOBYTE(v6) = v16;
    char v16 = 0;
    *(unsigned char *)(a1 + 20) = (_BYTE)v6;
    uint64_t v8 = v17;
    unint64_t v17 = 0;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = v18;
    uint64_t v18 = 0;
    *(void *)(a1 + 32) = v9;
    LODWORD(v8) = v19;
    int v19 = 0;
    *(_DWORD *)(a1 + 40) = v8;
    LOBYTE(v8) = v20;
    char v20 = 0;
    *(unsigned char *)(a1 + 44) = (_BYTE)v8;
    *(_OWORD *)(a1 + 48) = v22;
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    int v10 = v21;
    *(unsigned char *)(a1 + 64) = 0;
    if (!v10) {
      goto LABEL_12;
    }
    if (v17) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v17, (WTF::StringImpl *)v18);
    }
  }
  uint64_t result = (uint64_t)v13;
  if (v13)
  {
    uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v13, (WTF::StringImpl *)v14);
    if (v5) {
      return result;
    }
  }
  else if (v5)
  {
    return result;
  }
LABEL_12:
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v11)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v12();
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebPreferencesStore,std::optional<unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = *(WTF **)(a1 + 24);
    if (v2) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*(unsigned int *)(a1 + 32));
    }
    if (*(void *)a1) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)a1, (WTF::StringImpl *)*(unsigned int *)(a1 + 8));
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA019E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA019E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3505;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3487;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3510;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEE4callEbi(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3522;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v16 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v9 || (unsigned char *v8 = a2, v10 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4), v11 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1993B03A0);
  }
  _DWORD *v10 = a3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3478;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<double,WebCore::IntPoint>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<double,WebCore::IntPoint>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<double,WebCore::IntPoint>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    uint64_t v6 = (void *)(v3 + v4);
    a1[2] = (unint64_t)(v6 + 1);
    if (v3)
    {
      v14[0] = *v6;
      v14[1] = 1;
      return IPC::ArgumentCoder<std::tuple<double,WebCore::IntPoint>,void>::decode<IPC::Decoder,double>(a1, (uint64_t)v14, (uint64_t)a2);
    }
    unint64_t v8 = v2;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        unint64_t v9 = *v11;
        unint64_t v8 = v11[1];
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result)
  {
    if (v8)
    {
      uint64_t v12 = a2;
      uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<double,WebCore::IntPoint>,void>::decode<IPC::Decoder,double>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    unint64_t v7 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_12:
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
LABEL_10:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = result;
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::OptionSet<WebKit::FindOptions>,unsigned int>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v31);
  if (!v32)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_11;
  }
  unint64_t v7 = *((void *)a2 + 1);
  char v8 = *(WTF::StringImpl **)a2;
  unint64_t v9 = ((*((void *)a2 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a2;
  if (v7 < v9 || v7 - v9 <= 1)
  {
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v19 + 16))(v19, v8, v7);
        unint64_t v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_19;
  }
  unint64_t v11 = (_WORD *)((char *)v8 + v9);
  *((void *)a2 + 2) = v11 + 1;
  if (!v8)
  {
    unint64_t v6 = v7;
    unint64_t v5 = 0;
LABEL_19:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v6) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v5);
    goto LABEL_20;
  }
  unsigned int v12 = (unsigned __int16)*v11;
  if (v12 <= 0xFFF)
  {
    __int16 v13 = v12 & 0xF00;
    __int16 v14 = *v11;
    unsigned int v15 = 0x10000;
    goto LABEL_21;
  }
LABEL_20:
  unsigned int v15 = 0;
  __int16 v14 = 0;
  __int16 v13 = 0;
LABEL_21:
  if (!HIWORD(v15))
  {
LABEL_41:
    unint64_t v5 = *(WTF::StringImpl **)a2;
    unint64_t v6 = *((void *)a2 + 1);
    goto LABEL_42;
  }
  unint64_t v20 = *((void *)a2 + 1);
  unsigned __int8 v21 = *(WTF::StringImpl **)a2;
  unint64_t v22 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v20 >= v22 && v20 - v22 > 3)
  {
    unsigned __int8 v24 = (int *)((char *)v21 + v22);
    *((void *)a2 + 2) = v24 + 1;
    if (v21)
    {
      if (v32)
      {
        int v25 = 0;
        __int16 v26 = v14 | v15 | v13;
        int v27 = *v24;
        uint64_t v28 = v31;
        uint64_t v31 = 0;
        *(void *)a1 = v28;
        *(_WORD *)(a1 + 8) = v26;
        *(_DWORD *)(a1 + 12) = v27;
        char v29 = 1;
        goto LABEL_30;
      }
      __break(1u);
      goto LABEL_45;
    }
    unint64_t v6 = v20;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (!v30) {
      goto LABEL_42;
    }
    if (v20)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v30 + 16))(v30, v21, v20);
      goto LABEL_41;
    }
    unint64_t v6 = 0;
    unint64_t v5 = 0;
  }
LABEL_42:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
LABEL_45:
    if (v6) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v5);
  }
  char v29 = 0;
  *(unsigned char *)a1 = 0;
  int v25 = 1;
LABEL_30:
  *(unsigned char *)(a1 + 16) = v29;
  if (v32)
  {
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v25) {
          return result;
        }
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v25) {
    return result;
  }
LABEL_11:
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v18();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEE4callESR_SX_jib(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  __int16 v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v13 = 3415;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  unsigned __int8 v24 = v13;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v13, a2);
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, a3);
  __int16 v14 = (_DWORD *)IPC::Encoder::grow(v13, 4uLL, 4);
  if (v15 <= 3) {
    goto LABEL_9;
  }
  _DWORD *v14 = a4;
  uint64_t v16 = (_DWORD *)IPC::Encoder::grow(v13, 4uLL, 4);
  if (v17 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B0C3CLL);
  }
  _DWORD *v16 = a5;
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v19)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1993B0C1CLL);
  }
  *uint64_t v18 = a6;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v24, 0, 0);
  uint64_t result = v24;
  unsigned __int8 v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(void **)a2;
    uint64_t v7 = 16 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, v6);
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SX_jibEE4callESR_SX_jib(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  __int16 v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v13 = 3413;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  unsigned __int8 v24 = v13;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v13, a2);
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, a3);
  __int16 v14 = (_DWORD *)IPC::Encoder::grow(v13, 4uLL, 4);
  if (v15 <= 3) {
    goto LABEL_9;
  }
  _DWORD *v14 = a4;
  uint64_t v16 = (_DWORD *)IPC::Encoder::grow(v13, 4uLL, 4);
  if (v17 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B0EB8);
  }
  _DWORD *v16 = a5;
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v19)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1993B0E98);
  }
  *uint64_t v18 = a6;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v24, 0, 0);
  unint64_t result = v24;
  unsigned __int8 v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEE4callESM_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3414;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v17 = v7;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a2 + 12));
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = 16 * v8;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, v9);
      v9 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  unint64_t v11 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4);
  if (v12 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *unint64_t v11 = a3;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v17, 0, 0);
    uint64_t result = (uint64_t)v17;
    unint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3390;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  uint64_t v6 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3472;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  uint64_t v6 = (void *)IPC::Encoder::grow(v5, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3412;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3416;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  __int16 v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    unint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = 32 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(v5, v7);
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  __int16 v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebKit::WebFoundTextRange>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v9);
  if (v12)
  {
    *(_OWORD *)a1 = v9;
    uint64_t v5 = v11;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v8();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, float a2, float a3, float a4, float a5)
{
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  v12[3] = a5;
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v7 = 3482;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  __int16 v13 = v7;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v7, v12);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  __int16 v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3381;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3470;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::DragData>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DragData,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 88))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::DragData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESS_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_bjSS_SS_SU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESS_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_bjSS_SS_SU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESS_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_bjSS_SS_SU_EE4callESQ_SR_bjSS_SS_SU_(uint64_t a1, __int16 a2, char a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v32[0] = a6;
  v32[1] = a7;
  v31[0] = a9;
  v31[1] = a10;
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 3459;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v33 = v17;
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if ((a2 & 0xFF00) != 0)
  {
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B1E3CLL);
    }
    *uint64_t v18 = 1;
    uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
    if (!v20)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1993B1CF4);
    }
  }
  else
  {
    if (!v19) {
      goto LABEL_17;
    }
    LOBYTE(a2) = 0;
  }
  *uint64_t v18 = a2;
  unsigned __int8 v21 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B1DDCLL);
  }
  *unsigned __int8 v21 = a3;
  unsigned __int8 v23 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B1DFCLL);
  }
  *unsigned __int8 v23 = a4;
  int v25 = (_DWORD *)IPC::Encoder::grow(v17, 4uLL, 4);
  if (v26 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B1E1CLL);
  }
  *int v25 = a5;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v17, v32);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v17, v31);
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v17, a11);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v27);
    return (IPC::Encoder *)WTF::fastFree(v29, v30);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3460;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSB_8IntPointESL_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSB_8IntPointESL_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSB_8IntPointESL_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3399;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebCore::IntPoint,WTF::OptionSet<WebCore::DragSourceAction>>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v5)
  {
    unint64_t v10 = *a2;
    unint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v15 = a2[3];
    if (v15) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t v6 = v4;
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v8) {
    goto LABEL_17;
  }
  unint64_t v9 = a2[1];
  unint64_t v10 = *a2;
  unint64_t v11 = a2[2] - *a2;
  if (v9 <= v11)
  {
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v19 = a2[3];
    if (v19)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(void *)v19 + 16))(v19);
        unint64_t v18 = *a2;
        unint64_t v17 = a2[1];
      }
      else
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
      }
    }
    goto LABEL_14;
  }
  char v12 = (char *)(v10 + v11);
  a2[2] = (unint64_t)(v12 + 1);
  if (!v10)
  {
    unint64_t v17 = v9;
    unint64_t v18 = 0;
LABEL_14:
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v20 = a2[3];
    if (!v20) {
      goto LABEL_18;
    }
    if (!v17)
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      goto LABEL_18;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
LABEL_17:
    unint64_t v10 = *a2;
    unint64_t v9 = a2[1];
    goto LABEL_18;
  }
  int v13 = *v12;
  if ((v13 & 0x80000000) == 0)
  {
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = result;
    *(unsigned char *)(a1 + 16) = v13;
    *(unsigned char *)(a1 + 20) = 1;
    return result;
  }
LABEL_18:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v15 = a2[3];
  if (v15 && v9) {
LABEL_25:
  }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v10);
LABEL_19:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 20) = 0;
  unint64_t v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v21)
  {
    uint64_t v22 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v22();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EE4callESL_SP_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3448;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 112);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B24FCLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 112))
    {
      return (unsigned char *)IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B251CLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3449;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3471;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13CaptureDeviceESH_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13CaptureDeviceESH_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13CaptureDeviceESH_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3521;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3480;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3457;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01DA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01DA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3504;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01DC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01DC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3486;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::PrintInfo>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v10);
  if (v11 && (uint64_t result = IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v12, (uint64_t *)a2), v13))
  {
    if (v11)
    {
      long long v5 = v12[0];
      long long v6 = v12[1];
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v9();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::PrintInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::PrintInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01DF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01DF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3408;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01E18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01E18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3407;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01E40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01E40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EE4callESS_dSW_(uint64_t a1, uint64_t a2, float *a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v9 = 3389;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unint64_t v14 = v9;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v9, a4);
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v9, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  unint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01E68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01E68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_dSW_EE4callESS_dSW_(uint64_t a1, uint64_t a2, float *a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v9 = 3388;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unint64_t v14 = v9;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v9, a4);
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v9, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  unint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::PrintInfo,WebCore::IntRect,WebCore::IntSize>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v15);
  if (v16)
  {
    IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v17, (uint64_t *)a2);
    if (v18)
    {
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v19);
      if (v20)
      {
        uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
        if (v5)
        {
          if (v16 && v18 && v20)
          {
            long long v6 = v17[0];
            long long v7 = v17[1];
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v6;
            long long v8 = v19;
            *(_OWORD *)(a1 + 32) = v7;
            *(_OWORD *)(a1 + 48) = v8;
            *(void *)(a1 + 64) = result;
            *(unsigned char *)(a1 + 72) = 1;
            return result;
          }
          __break(1u);
        }
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v11 = *((void *)a2 + 3);
        if (v11 && v10) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
        }
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v12 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unint64_t *)*((void *)a2 + 3);
  if (result) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    unint64_t v14 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v14();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01E90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01E90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3403;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01EB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01EB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3402;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::PrintInfo,unsigned int,unsigned int>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v27);
  if (v28)
  {
    uint64_t result = IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v29, (uint64_t *)a2);
    if (v30)
    {
      unint64_t v5 = *((void *)a2 + 1);
      uint64_t v6 = *(void *)a2;
      unint64_t v7 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
      if (v5 >= v7 && v5 - v7 > 3)
      {
        uint64_t v9 = (int *)(v6 + v7);
        *((void *)a2 + 2) = v9 + 1;
        if (!v6)
        {
          unint64_t v17 = v5;
          uint64_t v18 = 0;
          goto LABEL_17;
        }
        unint64_t v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        if (v5 < v10 || v5 - v10 <= 3)
        {
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v20 = *((void *)a2 + 3);
          if (v20)
          {
            if (v5)
            {
              (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
              uint64_t v24 = *(void *)a2;
              uint64_t v25 = *((void *)a2 + 1);
              uint64_t v26 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              if (v26)
              {
                if (v25) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
                }
              }
            }
          }
          goto LABEL_21;
        }
        int v12 = *v9;
        uint64_t v14 = v6 + v10 + 4;
        int v13 = *(_DWORD *)(v6 + v10);
        *((void *)a2 + 2) = v14;
        if (v28)
        {
          long long v15 = v29[0];
          long long v16 = v29[1];
          *(_OWORD *)a1 = v27;
          *(_OWORD *)(a1 + 16) = v15;
          *(_OWORD *)(a1 + 32) = v16;
          *(_DWORD *)(a1 + 48) = v12;
          *(_DWORD *)(a1 + 52) = v13;
          *(unsigned char *)(a1 + 56) = 1;
          return result;
        }
        __break(1u);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t result = *((void *)a2 + 3);
        if (!result) {
          goto LABEL_17;
        }
      }
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)result + 16))(result);
        uint64_t v18 = *(void *)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
LABEL_17:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19 && v17) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v18, v17);
      }
    }
  }
LABEL_21:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v21 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    unsigned __int8 v23 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v23();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01EE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01EE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3401;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01F08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01F08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3400;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01F30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01F30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3406;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01F58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01F58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3404;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01F80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01F80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3405;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01FA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01FA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3496;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01FD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01FD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3503;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (unint64_t *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (unint64_t *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((unint64_t *)a1, (uint64_t)v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    unint64_t v7 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    __break(1u);
LABEL_12:
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
LABEL_10:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = result;
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebKit::ViewWindowCoordinates>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebKit::ViewWindowCoordinates>((uint64_t)v7, a2);
  if (v9)
  {
    long long v5 = v7[1];
    *(_OWORD *)a1 = v7[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v7[2];
    *(void *)(a1 + 48) = v8;
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    uint64_t result = (unint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 56) = v6;
  return result;
}

unint64_t *IPC::Decoder::decode<WebKit::ViewWindowCoordinates>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::ViewWindowCoordinates,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 56))
  {
    return (unint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

void *IPC::Decoder::decode<WebKit::InsertTextOptions>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::decode(a1);
  if (!BYTE5(result))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DictationAlternative>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DictationAlternative,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA01FF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01FF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3380;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  BOOL v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02020;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02020;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3396;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = 8 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v7++);
      v8 -= 8;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  int v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02048;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02048;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3446;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02070;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02070;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3429;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::Encoder::operator<<<unsigned long long const&>(v5, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v5, a2 + 1);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02098;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02098;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3437;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::Encoder::operator<<<unsigned long long const&>(v5, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v5, a2 + 1);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA020C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA020C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3385;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (void *)IPC::Encoder::grow(v5, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA020E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA020E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EE4callESG_SB_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3417;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v12 = v7;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v7, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v7, a3);
  IPC::Encoder::operator<<<unsigned long long const&>(v7, a3 + 1);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WebCore::CompositionUnderline>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::decode(a2, a1);
  if (!a1[32])
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (unsigned int *)v7();
    }
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WebCore::CompositionHighlight>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::decode(a2, a1);
  if (!a1[40])
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (unsigned int *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CompositionHighlight,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 40))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((v2 & 0x8000000000000) != 0)
      {
        uint64_t v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v4);
          uint64_t v6 = result;
          WTF::fastFree((WTF *)v4, a2);
          uint64_t result = v6;
        }
      }
    }
    if (*(unsigned char *)(result + 16))
    {
      uint64_t v3 = *(void *)(result + 8);
      if ((v3 & 0x8000000000000) != 0)
      {
        uint64_t v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          uint64_t v7 = result;
          WTF::fastFree((WTF *)v5, a2);
          return v7;
        }
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3498;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3422;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3436;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[28])
  {
    return (unint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&),std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,std::optional<WebCore::ShareableBitmapHandle> &&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  v5[0] = WebKit::WebPage::takeSnapshot;
  v5[1] = 0;
  v4[0] = &v6;
  v4[1] = v5;
  v4[2] = a3;
  return IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&),std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,std::optional<WebCore::ShareableBitmapHandle> &&>(WebKit::WebPage *,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::WebPage::*,std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>> &&,WTF::CompletionHandler<std::optional<WebCore::ShareableBitmapHandle> &&> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>((uint64_t)v4, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_WORD *)(a2 + 24));
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = (unint64_t *)IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder,WebCore::IntRect>(a1, a2, (uint64_t)v5);
  }
  *a1 = 0;
  a1[28] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder,WebCore::IntRect>(unsigned char *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IntSize>(a2);
  uint64_t v8 = result;
  int v9 = v7;
  if ((_BYTE)v7) {
    return (unint64_t *)IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder,WebCore::IntRect,WebCore::IntSize>((uint64_t)a1, (IPC::Decoder *)a2, a3, (uint64_t)&v8);
  }
  *a1 = 0;
  a1[28] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,void>::decode<IPC::Decoder,WebCore::IntRect,WebCore::IntSize>(uint64_t a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebKit::SnapshotOption>>(a2);
  unsigned int v8 = WORD1(result);
  if (!WORD1(result))
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 16) && *(unsigned char *)(a4 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(void *)(a1 + 16) = *(void *)a4;
    *(_WORD *)(a1 + 24) = result;
    LOBYTE(v8) = 1;
LABEL_5:
    *(unsigned char *)(a1 + 28) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::SnapshotOption>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WTF::OptionSet<WebKit::SnapshotOption>,void>::decode<IPC::Decoder>(a1);
  if (!WORD1(v2)) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::SnapshotOption>,void>::decode<IPC::Decoder>(void *a1)
{
  uint64_t v1 = IPC::Decoder::decode<unsigned short>(a1);
  if ((v1 & 0xFF0000) != 0)
  {
    __int16 v2 = v1;
    BOOL v3 = WTF::isValidOptionSet<WebKit::SnapshotOption>(v1);
    int v4 = v2 & 0xFF00;
    int v5 = v2;
    if (v3) {
      int v6 = 0x10000;
    }
    else {
      int v6 = 0;
    }
    if (!v3)
    {
      int v5 = 0;
      int v4 = 0;
    }
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
    int v4 = 0;
  }
  return v5 | v6 | v4;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeENS_9OptionSetINS7_14SnapshotOptionEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeENS_9OptionSetINS7_14SnapshotOptionEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeENS_9OptionSetINS7_14SnapshotOptionEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, unint64_t a2)
{
  return IPC::handleMessageAsync<Messages::WebPage::TakeSnapshot,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::TakeSnapshot &&)#1}::operator()<std::optional<WebCore::ShareableBitmapHandle>>((uint64_t *)(a1 + 8), a2);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebPage::TakeSnapshot,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::TakeSnapshot &&)#1}::operator()<std::optional<WebCore::ShareableBitmapHandle>>(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3507;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v8 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v8, v6);
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&),std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>,std::optional<WebCore::ShareableBitmapHandle> &&>(WebKit::WebPage *,void ()(WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::WebPage::*,std::tuple<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>> &&,WTF::CompletionHandler<std::optional<WebCore::ShareableBitmapHandle> &&> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<WebCore::IntRect,WebCore::IntSize,WTF::OptionSet<WebKit::SnapshotOption>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, void, void))v5;
  uint64_t v7 = *(void *)(v5 + 8);
  unsigned int v8 = (void *)(**(void **)a1 + (v7 >> 1));
  if (v7) {
    int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, void, void))(*v8 + v6);
  }
  return v6(v8, a2, a3, a4, a5, *(void *)(a1 + 16));
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebMouseEvent>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::WebMouseEvent>(a2, (uint64_t)v14);
  if (v22)
  {
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)v15;
    long long v5 = *(_OWORD *)&v15[7];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v15[3];
    *(_OWORD *)(a1 + 32) = v5;
    long long v6 = *(_OWORD *)&v15[15];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v15[11];
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)&v15[19];
    *(void *)(a1 + 96) = v16;
    *(unsigned char *)(a1 + 104) = v17;
    uint64_t v7 = v18;
    uint64_t v16 = 0;
    uint64_t v18 = 0;
    *(void *)(a1 + 112) = v7;
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    *(void *)(a1 + 120) = v8;
    uint64_t v9 = v20;
    uint64_t v20 = 0;
    *(void *)(a1 + 128) = v9;
    uint64_t v10 = v21;
    uint64_t v21 = 0;
    *(void *)(a1 + 136) = v10;
    *(unsigned char *)(a1 + 144) = 1;
    return std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v4);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 144) = 0;
    std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v4);
    uint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v12)
    {
      int v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA021B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA021B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EE4callESE_SH_SJ_(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  char v13 = a3;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 3461;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(v8, a2);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(v8, &v13);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA021D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA021D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3473;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    unsigned char *v8 = a2;
    IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WebKit::CallbackID>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  __int16 v5 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder,BOOL>((uint64_t)a1, a2, &v5);
  }
  *a1 = 0;
  a1[16] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder,BOOL>(uint64_t a1, IPC::Decoder *a2, unsigned char *a3)
{
  uint64_t result = IPC::Decoder::decode<WebKit::CallbackID>(a2, &v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_4;
  }
  if (a3[1])
  {
    *(unsigned char *)a1 = *a3;
    *(void *)(a1 + 8) = v7;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a1 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CallbackID>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CallbackID,void>::decode(a1, a2);
  if (!a2[8])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, IPC::SharedBufferReference *a2)
{
  return IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon &&)#1}::operator()<IPC::SharedBufferReference const&>((uint64_t *)(a1 + 8), a2);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon &&)#1}::operator()<IPC::SharedBufferReference const&>(uint64_t *a1, IPC::SharedBufferReference *a2)
{
  uint64_t v4 = *a1;
  __int16 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v5 = 3397;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v8 = v5;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v8, v6);
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&),std::tuple<BOOL,WebKit::CallbackID>,void ()(IPC::SharedBufferReference const&)>(WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*,std::tuple<BOOL,WebKit::CallbackID> &&,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<BOOL,WebKit::CallbackID>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(void *, BOOL, uint64_t *, void))v3;
  uint64_t v5 = *(void *)(v3 + 8);
  char v6 = (void *)(**(void **)a1 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, BOOL, uint64_t *, void))(*v6 + v4);
  }
  uint64_t v8 = a3;
  return v4(v6, a2 != 0, &v8, *(void *)(a1 + 16));
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v6, v5);
        uint64_t v20 = *a1;
        unint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_24;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    if (v10 >= 0x3333)
    {
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::GamepadData>>((uint64_t)a1, (uint64_t)&v30);
        if (!v42) {
          break;
        }
        if (HIDWORD(v44) == v44)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>((uint64_t)&v43, (unint64_t)&v30);
        }
        else
        {
          uint64_t v23 = v43 + 80 * HIDWORD(v44);
          *(unsigned char *)uint64_t v23 = 0;
          *(unsigned char *)(v23 + 72) = 0;
          if (v41)
          {
            *(_DWORD *)uint64_t v23 = v30;
            uint64_t v24 = v31;
            uint64_t v31 = 0;
            *(void *)(v23 + 8) = v24;
            uint64_t v25 = v32;
            uint64_t v32 = 0;
            *(void *)(v23 + 24) = 0;
            *(void *)(v23 + 32) = 0;
            *(void *)(v23 + 16) = v25;
            uint64_t v26 = v33;
            uint64_t v33 = 0;
            *(void *)(v23 + 24) = v26;
            LODWORD(v26) = v34;
            int v34 = 0;
            *(_DWORD *)(v23 + 32) = v26;
            LODWORD(v26) = v35;
            int v35 = 0;
            *(_DWORD *)(v23 + 36) = v26;
            *(void *)(v23 + 40) = 0;
            *(void *)(v23 + 48) = 0;
            uint64_t v27 = v36;
            uint64_t v36 = 0;
            *(void *)(v23 + 40) = v27;
            LODWORD(v27) = v37;
            int v37 = 0;
            *(_DWORD *)(v23 + 48) = v27;
            LODWORD(v27) = v38;
            int v38 = 0;
            *(_DWORD *)(v23 + 52) = v27;
            *(void *)(v23 + 56) = v39;
            *(void *)(v23 + 64) = 0;
            uint64_t v28 = v40;
            uint64_t v40 = 0;
            *(void *)(v23 + 64) = v28;
            *(unsigned char *)(v23 + 72) = 1;
          }
          ++HIDWORD(v44);
        }
        if (v42) {
          std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, a2);
        }
        if (!--v10)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v43, HIDWORD(v44));
          *(void *)a3 = v43;
          uint64_t v29 = v44;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          *(void *)(a3 + 8) = v29;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
LABEL_21:
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v18;
LABEL_22:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
      }
      LODWORD(v44) = 80 * (int)v10 / 0x50u;
      uint64_t v43 = WTF::fastMalloc((WTF *)(80 * v10));
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::GamepadData>>((uint64_t)a1, (uint64_t)&v30);
        if (!v42) {
          break;
        }
        if (HIDWORD(v44) == v44)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>((uint64_t)&v43, (unint64_t)&v30);
        }
        else
        {
          uint64_t v11 = v43 + 80 * HIDWORD(v44);
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 72) = 0;
          if (v41)
          {
            *(_DWORD *)uint64_t v11 = v30;
            uint64_t v12 = v31;
            uint64_t v31 = 0;
            *(void *)(v11 + 8) = v12;
            uint64_t v13 = v32;
            uint64_t v32 = 0;
            *(void *)(v11 + 24) = 0;
            *(void *)(v11 + 32) = 0;
            *(void *)(v11 + 16) = v13;
            uint64_t v14 = v33;
            uint64_t v33 = 0;
            *(void *)(v11 + 24) = v14;
            LODWORD(v14) = v34;
            int v34 = 0;
            *(_DWORD *)(v11 + 32) = v14;
            LODWORD(v14) = v35;
            int v35 = 0;
            *(_DWORD *)(v11 + 36) = v14;
            *(void *)(v11 + 40) = 0;
            *(void *)(v11 + 48) = 0;
            uint64_t v15 = v36;
            uint64_t v36 = 0;
            *(void *)(v11 + 40) = v15;
            LODWORD(v15) = v37;
            int v37 = 0;
            *(_DWORD *)(v11 + 48) = v15;
            LODWORD(v15) = v38;
            int v38 = 0;
            *(_DWORD *)(v11 + 52) = v15;
            *(void *)(v11 + 56) = v39;
            *(void *)(v11 + 64) = 0;
            uint64_t v16 = v40;
            uint64_t v40 = 0;
            *(void *)(v11 + 64) = v16;
            *(unsigned char *)(v11 + 72) = 1;
          }
          ++HIDWORD(v44);
        }
        if (v42) {
          std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, a2);
        }
        if (!--v10)
        {
          uint64_t v17 = v43;
          uint64_t v18 = v44;
          goto LABEL_21;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
  }
  unint64_t v19 = v5;
  uint64_t v20 = 0;
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v19) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v20);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::GamepadData>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::decode<IPC::Decoder>((char **)a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::decode<IPC::Decoder>@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (unint64_t)a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      unint64_t v19 = a1;
      if (v3)
      {
        (*(void (**)(char *))(*(void *)v16 + 16))(v16);
        a1 = v19;
        uint64_t v15 = *v19;
        unint64_t v14 = (unint64_t)v19[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = &v4[v5];
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v14 = v3;
    uint64_t v15 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v18 = a1;
      if (v14)
      {
        (*(void (**)(char *, char *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        uint64_t v4 = *v18;
        unint64_t v3 = (unint64_t)v18[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::GamepadData>((IPC::Decoder *)a1, (uint64_t)&v20);
      char v8 = v28;
      if (v28)
      {
        *(_DWORD *)a2 = v20;
        long long v9 = v21;
        long long v21 = 0uLL;
        *(_OWORD *)(a2 + 8) = v9;
        uint64_t v10 = v22;
        uint64_t v22 = 0;
        *(void *)(a2 + 24) = v10;
        *(void *)&long long v9 = v23;
        uint64_t v23 = 0;
        *(void *)(a2 + 32) = v9;
        uint64_t v11 = v24;
        uint64_t v24 = 0;
        *(void *)(a2 + 40) = v11;
        *(void *)&long long v9 = v25;
        uint64_t v25 = 0;
        *(void *)(a2 + 48) = v9;
        uint64_t v12 = v27;
        uint64_t v27 = 0;
        *(void *)(a2 + 56) = v26;
        *(void *)(a2 + 64) = v12;
        char v8 = 1;
        *(unsigned char *)(a2 + 72) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      char v28 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 72) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 80) = v8;
    return std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v4);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result && v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GamepadData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GamepadData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = (unsigned char *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 12));
  *uint64_t v4 = 0;
  v4[72] = 0;
  if (*(unsigned char *)(v3 + 72))
  {
    std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>((uint64_t)v4, v3);
    v4[72] = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B6B08);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (void *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 12));
    int v5 = 80 * a2;
    uint64_t v6 = (unsigned char *)WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move(uint64_t result, void *a2, unsigned char *a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *a3 = 0;
      a3[72] = 0;
      if (*(unsigned char *)(v5 + 72))
      {
        std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>((uint64_t)a3, v5);
        a3[72] = 1;
      }
      uint64_t result = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](v5, a2);
      a3 += 80;
      v5 += 80;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  if (*(unsigned int *)(result + 8) > this)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      uint64_t result = *(void *)result + 80 * this;
      uint64_t v5 = 80 * v4 - 80 * this;
      do
      {
        uint64_t result = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](result, (void *)this)+ 80;
        v5 -= 80;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v7 = (WTF *)(80 * this);
      uint64_t result = WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x50;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v6) {
        uint64_t result = WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move((uint64_t)v6, (char *)v6 + 80 * v4, (unsigned char *)result);
      }
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse,WebCore::ResourceRequest>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v5
    || (uint64_t v6 = v4,
        uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2),
        !v8))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 472) = 0;
LABEL_13:
    uint64_t v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      uint64_t v25 = *(void (**)(void))(*(void *)v23 + 16);
      v25();
    }
    return;
  }
  uint64_t v9 = v7;
  IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)a2, v26);
  if (v27)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)a2, (uint64_t)v28);
    char v11 = v43;
    if (v43)
    {
      if (!v27)
      {
        __break(1u);
        return;
      }
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v9;
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1 + 16, (uint64_t)v26);
      WTF::URL::URL(a1 + 272, v28);
      WTF::URL::URL(a1 + 312, v29);
      uint64_t v12 = v31;
      *(void *)(a1 + 352) = v29[5];
      long long v13 = v30;
      long long v30 = 0u;
      *(_OWORD *)(a1 + 360) = v13;
      uint64_t v31 = 0;
      *(void *)(a1 + 376) = v12;
      uint64_t v14 = v32;
      uint64_t v32 = 0;
      *(void *)(a1 + 384) = v14;
      uint64_t v15 = v33;
      uint64_t v33 = 0;
      *(void *)(a1 + 392) = v15;
      uint64_t v16 = v34;
      uint64_t v34 = 0;
      *(void *)(a1 + 400) = v16;
      uint64_t v17 = v35;
      uint64_t v35 = 0;
      *(void *)(a1 + 408) = v17;
      LODWORD(v16) = v36;
      *(unsigned char *)(a1 + 420) = v37;
      *(_DWORD *)(a1 + 416) = v16;
      long long v18 = v38;
      long long v38 = 0u;
      *(_OWORD *)(a1 + 424) = v18;
      uint64_t v19 = v39;
      uint64_t v20 = v40;
      *(unsigned char *)(a1 + 456) = v41;
      *(void *)(a1 + 440) = v19;
      *(void *)(a1 + 448) = v20;
      uint64_t v21 = v42;
      uint64_t v39 = 0;
      uint64_t v42 = 0;
      char v11 = 1;
      *(void *)(a1 + 464) = v21;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 472) = v11;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v28);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 472) = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v26, v10);
  if (!*(unsigned char *)(a1 + 472)) {
    goto LABEL_13;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSD_1EEEONSF_16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSD_1EEEONSF_16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSD_1EEEONSF_16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3511;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse,WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 472))
  {
    __int16 v2 = *(const void **)(a1 + 464);
    *(void *)(a1 + 464) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 272));
    uint64_t v4 = *(const void **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 16), v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3447;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3512;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA022A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA022A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3421;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 272);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B7450);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 272))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B7470);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  long long v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA022C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA022C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3442;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebCore::PlatformEventModifier>>>(IPC::Decoder *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::Decoder::decode<WTF::OptionSet<WebCore::PlatformEventModifier>>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    IPC::Decoder::markInvalid(a1);
    int v3 = 0;
  }
  if (v2 <= 0x100) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = v2;
  }
  return v3 | v4;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::PlatformEventModifier>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WTF::OptionSet<WebCore::PlatformEventModifier>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::PlatformEventModifier>,void>::decode<IPC::Decoder>(void *a1)
{
  unsigned __int16 v1 = IPC::Decoder::decode<unsigned char>(a1);
  if (v1 < 0x100u)
  {
    unsigned __int8 v4 = 0;
    int v3 = 0;
  }
  else
  {
    unsigned __int8 v2 = v1;
    int v3 = WTF::isValidOptionSet<WebCore::PlatformEventModifier>(v1);
    if (v3) {
      unsigned __int8 v4 = v2;
    }
    else {
      unsigned __int8 v4 = 0;
    }
  }
  return v4 | (v3 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA022F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA022F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3427;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SystemPreviewInfo>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 112))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::decode(a2, a1);
  if (!a1[32])
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3502;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v6, v5);
        uint64_t v17 = *(void *)a1;
        unint64_t v16 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextManipulationItem>(a1, (uint64_t)&v24);
        if (!v29) {
          break;
        }
        if (HIDWORD(v31) == v31)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>((uint64_t)&v30, (unint64_t)&v24);
        }
        else
        {
          uint64_t v20 = v30 + 48 * HIDWORD(v31);
          long long v21 = v25;
          *(_OWORD *)uint64_t v20 = v24;
          *(_OWORD *)(v20 + 16) = v21;
          *(void *)(v20 + 32) = 0;
          *(void *)(v20 + 40) = 0;
          uint64_t v22 = v26;
          uint64_t v26 = 0;
          *(void *)(v20 + 32) = v22;
          LODWORD(v22) = v27;
          int v27 = 0;
          *(_DWORD *)(v20 + 40) = v22;
          LODWORD(v22) = v28;
          int v28 = 0;
          *(_DWORD *)(v20 + 44) = v22;
          ++HIDWORD(v31);
        }
        if (v29) {
          WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v30, HIDWORD(v31));
          *(void *)a3 = v30;
          uint64_t v23 = v31;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          *(void *)(a3 + 8) = v23;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
LABEL_19:
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v15;
LABEL_20:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
      }
      LODWORD(v31) = 48 * (int)v10 / 0x30u;
      uint64_t v30 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextManipulationItem>(a1, (uint64_t)&v24);
        if (!v29) {
          break;
        }
        if (HIDWORD(v31) == v31)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>((uint64_t)&v30, (unint64_t)&v24);
        }
        else
        {
          uint64_t v11 = v30 + 48 * HIDWORD(v31);
          long long v12 = v25;
          *(_OWORD *)uint64_t v11 = v24;
          *(_OWORD *)(v11 + 16) = v12;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 40) = 0;
          uint64_t v13 = v26;
          uint64_t v26 = 0;
          *(void *)(v11 + 32) = v13;
          LODWORD(v13) = v27;
          int v27 = 0;
          *(_DWORD *)(v11 + 40) = v13;
          LODWORD(v13) = v28;
          int v28 = 0;
          *(_DWORD *)(v11 + 44) = v13;
          ++HIDWORD(v31);
        }
        if (v29) {
          WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
        }
        if (!--v10)
        {
          uint64_t v14 = v30;
          uint64_t v15 = v31;
          goto LABEL_19;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
  }
  unint64_t v16 = v5;
  uint64_t v17 = 0;
LABEL_22:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v16) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationItem>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t v5 = 48 * v4 - 48 * this;
      uint64_t result = (unsigned int *)(*(void *)result + 48 * this + 32);
      do
      {
        uint64_t result = (unsigned int *)(WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, (void *)this)+ 48);
        v5 -= 48;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v7 = (WTF *)(48 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v6) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::TextManipulationItem>::move((uint64_t)v6, (char *)v6 + 48 * v4, (uint64_t)result);
      }
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EE4callEbSL_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3387;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    unsigned char *v8 = a2;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a3 + 12));
    uint64_t v10 = *(unsigned int *)(a3 + 12);
    if (v10)
    {
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = 40 * v10;
      do
      {
        IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::encode(v7, v11);
        v11 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v17, 0, 0);
    uint64_t result = (uint64_t)v17;
    uint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v15, v16);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3431;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA023A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA023A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3391;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::AppHighlight,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSR_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yLSF_1EEEEEEENSR_INS9_23WheelScrollGestureStateEEEbNSR_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_SZ_bS11_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA023D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSR_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yLSF_1EEEEEEENSR_INS9_23WheelScrollGestureStateEEEbNSR_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_SZ_bS11_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA023D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSR_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yLSF_1EEEEEEENSR_INS9_23WheelScrollGestureStateEEEbNSR_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_SZ_bS11_EE4callESX_SZ_bS11_(uint64_t a1, uint64_t a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 3445;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  long long v24 = v11;
  LODWORD(v10) = *(unsigned __int8 *)(a2 + 16);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (v10)
  {
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B86D0);
    }
    *uint64_t v12 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v23 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v23);
    }
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, (uint64_t *)a2);
  }
  else
  {
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B8710);
    }
    *uint64_t v12 = 0;
  }
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if ((a3 & 0xFF00) != 0)
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B86F0);
    }
    unsigned char *v14 = 1;
    uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B8618);
    }
  }
  else
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1993B8730);
    }
    LOBYTE(a3) = 0;
  }
  unsigned char *v14 = a3;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1993B86B0);
  }
  *uint64_t v17 = a4;
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v11, a5);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v24, 0, 0);
  uint64_t result = v24;
  long long v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA023F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA023F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3398;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02420;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02420;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3450;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3520;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)v8);
  if (v8[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder,WebCore::FloatRect>(a1, (uint64_t)v8, (uint64_t)a2);
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder,WebCore::FloatRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    unint64_t v7 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    __break(1u);
LABEL_12:
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
LABEL_10:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = result;
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02470;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02470;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3454;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v7);
  char v5 = v9;
  if (v9)
  {
    *(void *)a1 = v7;
    uint64_t v6 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(a1 + 8) = v6;
    unint64_t result = WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02498;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02498;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3456;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA024C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA024C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3462;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[104])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[104] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    unint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>(a1, a2, (uint64_t)&v8, a3);
    if (v9)
    {
      unint64_t result = v8;
      uint64_t v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[104] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v9);
  if (v9[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, a2, a3, (uint64_t)v9, a4);
  }
  *a4 = 0;
  a4[104] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(a1, (uint64_t)v13);
  if (v16)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>>((IPC::Decoder *)a1, a2, a3, a4, (uint64_t)v13, a5);
    if (v16) {
      BOOL v11 = v15 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v14 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EEA016F0[v14])(&v12, v13);
    }
  }
  else
  {
    *a5 = 0;
    a5[104] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)v13);
  if (v13[24])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>(a2, a3, a4, a5, (uint64_t)v13, (uint64_t)a6);
  }
  else
  {
    *a6 = 0;
    a6[104] = 0;
  }
  return std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t result = a6;
  if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 16) && *(unsigned char *)(a4 + 40) && *(unsigned char *)(a5 + 24))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEENS5_6StringESC_NS_8optionalINS3_18SecurityOriginDataEEENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4EEJSC_SD_SC_SG_SH_EJEJEJSC_SD_SC_SG_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSL_IJDpT2_EEEDpOT3_(a6, (_OWORD *)a1, (uint64_t *)a2, (long long *)a3, a4, (uint64_t *)a5);
    *(unsigned char *)(result + 104) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEENS5_6StringESC_NS_8optionalINS3_18SecurityOriginDataEEENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4EEJSC_SD_SC_SG_SH_EJEJEJSC_SD_SC_SG_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSL_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t *a3, long long *a4, uint64_t a5, uint64_t *a6)
{
  *(_OWORD *)a1 = *a2;
  uint64_t v8 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v8;
  long long v9 = *a4;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v10 = a1 + 40;
  *(_OWORD *)(v10 - 16) = v9;
  *(unsigned char *)(v10 + 32) = 0;
  if (*(unsigned char *)(a5 + 32))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v10, a5);
    *(unsigned char *)(a1 + 72) = 1;
  }
  uint64_t v11 = *a6;
  *a6 = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v11;
  uint64_t v12 = a6[1];
  a6[1] = 0;
  *(void *)(a1 + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a6 + 4);
  *((_DWORD *)a6 + 4) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a6 + 5);
  *((_DWORD *)a6 + 5) = 0;
  *(_DWORD *)(a1 + 100) = v12;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v3 = *(WTF **)(a1 + 88);
    if (v3)
    {
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(unsigned int **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v4);
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 64);
      if (v5 != -1) {
        ((void (*)(char *, uint64_t))off_1EEA016F0[v5])(&v8, a1 + 40);
      }
      *(_DWORD *)(a1 + 64) = -1;
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3483;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 176 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::encode(v5, v7);
      v7 += 176;
      v8 -= 176;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3484;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36ShouldDismissKeyboardAfterTapAtPointEN6WebKit7WebPageES8_FvN7WebCore10FloatPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36ShouldDismissKeyboardAfterTapAtPointEN6WebKit7WebPageES8_FvN7WebCore10FloatPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36ShouldDismissKeyboardAfterTapAtPointEN6WebKit7WebPageES8_FvN7WebCore10FloatPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3499;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  unsigned int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::WritingTools::Session>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3523;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}