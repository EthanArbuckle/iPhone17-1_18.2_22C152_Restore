uint64_t WebKit::WebAutomationSessionProxy::computeElementLayout(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v13;
  const WTF::String *v14;
  WebKit::WebFrame *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  WebCore::LocalFrameView *v29;
  WebCore::ScrollView *v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  uint64_t v35;
  unsigned int *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  __int32 v41;
  __int32 v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  WebCore::DOMRectList *v49;
  float64x2_t *v50;
  unsigned int v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  unsigned int *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  WebKit::WebProcess *v87;
  WebKit::WebProcess *v88;
  float32x2_t v89;
  WTF::StringImpl *v90;
  char v91;
  WTF::StringImpl *v92;
  char v93;
  _DWORD *v94;
  char v95;
  WTF::StringImpl *v96;
  char v97;
  WTF::StringImpl *v98;
  char v99;
  WTF::StringImpl *v100;
  char v101;
  WTF::StringImpl *v102;
  char v103;
  WTF::StringImpl *v104;
  char v105;
  WTF::StringImpl *v106;
  char v107;
  float32x4_t v108;
  WTF::StringImpl *v109;
  float v110;
  float v111;
  IntPoint v112;

  {
    v87 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v87);
  }
  v109 = a2;
  v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v109);
  if (!v13)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v109);
    v16 = v109;
    if (v109) {
      *(_DWORD *)v109 += 2;
    }
    v106 = v16;
    v107 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v106, 0, 0);
    if (!v107) {
      goto LABEL_23;
    }
    result = (uint64_t)v106;
    if (!v106) {
      goto LABEL_23;
    }
LABEL_20:
    if (*(_DWORD *)result == 2) {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
LABEL_23:
    if (!v16) {
      return result;
    }
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
      return result;
    }
    result = (uint64_t)v16;
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
  }
  if (*(unsigned char *)(a3 + 16))
  {
    {
      v88 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v88);
    }
    v15 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v15)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v109);
      v16 = v109;
      if (v109) {
        *(_DWORD *)v109 += 2;
      }
      v104 = v16;
      v105 = 1;
      result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v104, 0, 0);
      if (!v105) {
        goto LABEL_23;
      }
      result = (uint64_t)v104;
      if (!v104) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  else
  {
    v15 = *(WebKit::WebFrame **)(v13 + 88);
    if (!v15) {
      goto LABEL_16;
    }
  }
  v19 = *((void *)v15 + 3);
  if (!v19) {
    goto LABEL_16;
  }
  v20 = *(void *)(v19 + 8);
  if (!v20 || *(unsigned char *)(v20 + 144) || !*(void *)(v20 + 288)) {
    goto LABEL_16;
  }
  if (!WebKit::isValidNodeHandle(*a4, v14))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v109);
    v16 = v109;
    if (v109) {
      *(_DWORD *)v109 += 2;
    }
    v102 = v16;
    v103 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v102, 0, 0);
    if (!v103) {
      goto LABEL_23;
    }
    result = (uint64_t)v102;
    if (!v102) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  result = (uint64_t)WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v15, (const WTF::String *)a4);
  if (!result)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v109);
    v16 = v109;
    if (v109) {
      *(_DWORD *)v109 += 2;
    }
    v100 = v16;
    v101 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v100, 0, 0);
    if (!v101) {
      goto LABEL_23;
    }
    result = (uint64_t)v100;
    if (!v100) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  v21 = result;
  v22 = result;
  if ((*(_WORD *)(result + 32) & 0x10) != 0)
  {
    v23 = *(void *)(*(void *)(result + 104) + 24);
    if (v23 == *(void *)(*MEMORY[0x1E4FB6AF0] + 24))
    {
      v22 = *(void *)(result + 40);
      if (v22 && (v24 = *(_WORD *)(v22 + 32), (v24 & 8) != 0))
      {
        while ((v24 & 0x10) == 0
             || (v24 & 0x110) == 0x110
             || *(void *)(*(void *)(v22 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6630] + 24))
        {
          v22 = *(void *)(v22 + 40);
          if (v22)
          {
            v24 = *(_WORD *)(v22 + 32);
            if ((v24 & 8) != 0) {
              continue;
            }
          }
          goto LABEL_54;
        }
      }
      else
      {
LABEL_54:
        result = WebCore::HTMLOptionElement::ownerSelectElement((WebCore::HTMLOptionElement *)result);
        v22 = result;
      }
    }
    else
    {
      v22 = result;
      if (v23 == *(void *)(*MEMORY[0x1E4FB6668] + 24))
      {
        *(_DWORD *)(result + 28) += 2;
        result = WebCore::HTMLOptGroupElement::ownerSelectElement((WebCore::HTMLOptGroupElement *)result);
        v22 = result;
        if (*(_DWORD *)(v21 + 28) == 2)
        {
          if ((*(_WORD *)(v21 + 34) & 0x400) == 0) {
            result = WebCore::Node::removedLastRef((WebCore::Node *)v21);
          }
        }
        else
        {
          *(_DWORD *)(v21 + 28) -= 2;
        }
      }
    }
  }
  if (a5 && v22) {
    result = WebCore::Element::scrollIntoViewIfNotVisible((WebCore::Element *)v22);
  }
  v25 = *(void *)(*((void *)v15 + 3) + 8);
  if (*(unsigned char *)(v25 + 144)) {
    v26 = 0;
  }
  else {
    v26 = *(void *)(*((void *)v15 + 3) + 8);
  }
  v27 = *(void *)(*(void *)(v25 + 128) + 8);
  if (v27) {
    v28 = *(unsigned char *)(v27 + 144) == 0;
  }
  else {
    v28 = 0;
  }
  if (!v28) {
    return result;
  }
  v29 = *(WebCore::LocalFrameView **)(v26 + 288);
  v30 = *(WebCore::ScrollView **)(v27 + 288);
  if (a6 == 1)
  {
    WebCore::Element::boundingClientRect((WebCore::Element *)v21);
    v109 = (WTF::StringImpl *)__PAIR64__(v32, v31);
    v110 = v33;
    v111 = v34;
    if (*((unsigned char *)v29 + 312) == 1)
    {
      v35 = WebCore::LocalFrameView::frame(v29);
      v36 = (unsigned int *)(v35 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v35 + 8), 1u);
      v37 = *(float *)(v35 + 576);
      WebCore::LocalFrame::frameScaleFactor((WebCore::LocalFrame *)v35);
      WebCore::FloatRect::scale((WebCore::FloatRect *)&v109, v37 * v38, v37 * v38);
      v112 = (IntPoint)WebCore::ScrollView::contentsScrollPosition(v29);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v108, &v112);
      v89 = vadd_f32(*(float32x2_t *)v108.f32, (float32x2_t)v109);
      v109 = (WTF::StringImpl *)v89;
      v39 = v110;
      v40 = v111;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v36);
      v42 = v89.i32[1];
      v41 = v89.i32[0];
    }
    else
    {
      WebCore::LocalFrameView::clientToDocumentRect();
      v108.i64[0] = __PAIR64__(v44, v43);
      v108.i64[1] = __PAIR64__(v46, v45);
      WebCore::ScrollView::contentsToRootView(v29, (const WebCore::FloatRect *)&v108);
      v39 = v47;
      v40 = v48;
    }
    v109 = (WTF::StringImpl *)__PAIR64__(v42, v41);
    v110 = v39;
    v111 = v40;
    WebCore::ScrollView::rootViewToContents(v30, (const WebCore::FloatRect *)&v109);
    WebCore::LocalFrameView::absoluteToLayoutViewportRect();
  }
  else if (!a6)
  {
    WebCore::Element::boundingClientRect((WebCore::Element *)v21);
  }
  if (!v22)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v109);
    v16 = v109;
    if (v109) {
      *(_DWORD *)v109 += 2;
    }
    v98 = v16;
    v99 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v98, 0, 0);
    if (!v99) {
      goto LABEL_23;
    }
    result = (uint64_t)v98;
    if (!v98) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  WebCore::Element::getClientRects((uint64_t *)&v109, (WebCore::Element *)v22);
  v49 = v109;
  if (!*((_DWORD *)v109 + 5))
  {
    v109 = 0;
    WTF::RefCounted<WebCore::DOMRectList>::deref(v49);
LABEL_94:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v109);
    v16 = v109;
    if (v109) {
      *(_DWORD *)v109 += 2;
    }
    v96 = v16;
    v97 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v96, 0, 0);
    if (!v97) {
      goto LABEL_23;
    }
    result = (uint64_t)v96;
    if (!v96) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  v50 = (float64x2_t *)**((void **)v109 + 1);
  v109 = 0;
  WTF::RefCounted<WebCore::DOMRectList>::deref(v49);
  if (!v50) {
    goto LABEL_94;
  }
  WebCore::LocalFrameView::visualViewportRect(v29);
  WebCore::LocalFrameView::documentToClientRect();
  v108 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50[1]), v50[2]);
  v109 = (WTF::StringImpl *)__PAIR64__(v52, v51);
  v110 = v53;
  v111 = v54;
  WebCore::FloatRect::intersect((WebCore::FloatRect *)&v109, (const WebCore::FloatRect *)&v108);
  if (v110 > 0.0 && v111 > 0.0)
  {
    v55 = *(float *)&v109 + (float)(v110 * 0.5);
    v56 = *((float *)&v109 + 1) + (float)(v111 * 0.5);
    WebCore::TreeScope::elementsFromPoint();
    if (v111 == 0.0)
    {
LABEL_82:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v112);
      v58 = (WTF::StringImpl *)v112;
      if (v112) {
        *(_DWORD *)v112.m_x += 2;
      }
      v92 = v58;
      v93 = 1;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v92, 0, 0);
      if (v93 && v92)
      {
        if (*(_DWORD *)v92 == 2) {
          WTF::StringImpl::destroy(v92, v59);
        }
        else {
          *(_DWORD *)v92 -= 2;
        }
      }
      if (!v58) {
        goto LABEL_133;
      }
      if (*(_DWORD *)v58 != 2)
      {
        *(_DWORD *)v58 -= 2;
LABEL_133:
        if (v111 != 0.0)
        {
          v84 = v109;
          v85 = 8 * LODWORD(v111);
          do
          {
            v86 = *(void *)v84;
            *(void *)v84 = 0;
            if (v86)
            {
              if (*(_DWORD *)(v86 + 28) == 2)
              {
                if ((*(_WORD *)(v86 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v86);
                }
              }
              else
              {
                *(_DWORD *)(v86 + 28) -= 2;
              }
            }
            v84 = (WTF::StringImpl *)((char *)v84 + 8);
            v85 -= 8;
          }
          while (v85);
        }
        result = (uint64_t)v109;
        if (v109)
        {
          v109 = 0;
          v110 = 0.0;
          return WTF::fastFree((WTF *)result, v59);
        }
        return result;
      }
      v60 = v58;
LABEL_132:
      WTF::StringImpl::destroy(v60, v59);
      goto LABEL_133;
    }
    v57 = 0;
    while (*(void *)((char *)v109 + v57) != v22)
    {
      v57 += 8;
      if (8 * LODWORD(v111) == v57) {
        goto LABEL_82;
      }
    }
    if (*(void *)v109 != v22) {
      WebCore::Node::isDescendantOrShadowDescendantOf(*(WebCore::Node **)v109, (const WebCore::Node *)v22);
    }
    if (a6 == 1)
    {
      if (*((unsigned char *)v29 + 312) == 1)
      {
        v64 = WebCore::LocalFrameView::frame(v29);
        v65 = (unsigned int *)(v64 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v64 + 8), 1u);
        v66 = *(float *)(v64 + 576);
        WebCore::LocalFrame::frameScaleFactor((WebCore::LocalFrame *)v64);
        v68 = v66 * v67;
        v69 = v55 * v68;
        v70 = v56 * v68;
        v71 = WebCore::ScrollView::contentsScrollPosition(v29);
        *(float *)&v72 = v69 + (float)(int)v71;
        *(float *)&v73 = v70 + (float)SHIDWORD(v71);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v65);
      }
      else
      {
        WebCore::LocalFrameView::clientToDocumentPoint();
        v112.m_x = v76;
        v112.m_y = v77;
        WebCore::ScrollView::contentsToRootView(v29, (const WebCore::FloatPoint *)&v112);
        v72 = v78;
        v73 = v79;
      }
      v112.m_x = v72;
      v112.m_y = v73;
      WebCore::ScrollView::rootViewToContents(v30, (const WebCore::FloatPoint *)&v112);
      WebCore::LocalFrameView::absoluteToLayoutViewportPoint();
      v82 = roundf(v81);
      if (v82 >= 2147500000.0)
      {
        v62 = 0x7FFFFFFFLL;
      }
      else
      {
        v62 = 0x80000000;
        if (v82 > -2147500000.0) {
          v62 = (int)v82;
        }
      }
      v63 = roundf(v80);
    }
    else
    {
      if (a6)
      {
        v74 = 0;
        v75 = 0;
        goto LABEL_128;
      }
      v61 = roundf(v55);
      if (v61 >= 2147500000.0)
      {
        v62 = 0x7FFFFFFFLL;
      }
      else
      {
        v62 = 0x80000000;
        if (v61 > -2147500000.0) {
          v62 = (int)v61;
        }
      }
      v63 = roundf(v56);
    }
    if (v63 >= 2147500000.0)
    {
      v83 = 0x7FFFFFFF00000000;
    }
    else if (v63 <= -2147500000.0)
    {
      v83 = 0x8000000000000000;
    }
    else
    {
      v83 = (unint64_t)(int)v63 << 32;
    }
    v75 = v83 | v62;
    v74 = 1;
LABEL_128:
    LOBYTE(v90) = 0;
    v91 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v90, v75, v74);
    if (!v91) {
      goto LABEL_133;
    }
    v60 = v90;
    if (!v90) {
      goto LABEL_133;
    }
    if (*(_DWORD *)v90 != 2)
    {
      *(_DWORD *)v90 -= 2;
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  LOBYTE(v94) = 0;
  v95 = 0;
  result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v94, 0, 0);
  if (v95)
  {
    result = (uint64_t)v94;
    if (v94)
    {
      if (*v94 != 2)
      {
        *v94 -= 2;
        return result;
      }
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    v5 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    v9 = v5;
    char v10 = 1;
  }
  else
  {
    LOBYTE(v9) = 0;
    char v10 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, void))(*(void *)v4 + 16))(v4, &v9, a3, a4);
  if (v10)
  {
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

atomic_uchar *WebKit::WebAutomationSessionProxy::getComputedRole(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, long long *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  long long v27 = *a3;
  uint64_t v28 = *((void *)a3 + 2);
  v29 = 0;
  v6 = *a4;
  if (*a4) {
    *(_DWORD *)v6 += 2;
  }
  v26 = v6;
  uint64_t AccessibilityObjectForNode = WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(a1, a2, (uint64_t)&v27, (const WTF::String *)&v26, &v29);
  v9 = (atomic_uchar **)AccessibilityObjectForNode;
  if (AccessibilityObjectForNode) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(AccessibilityObjectForNode + 8));
  }
  char v10 = v26;
  v26 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v29;
  if (v29)
  {
    *(_DWORD *)v29 += 2;
    v24 = v11;
    char v25 = 1;
    LOBYTE(v22) = 0;
    char v23 = 0;
    result = (atomic_uchar *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v24, (uint64_t)&v22);
    if (v23)
    {
      result = (atomic_uchar *)v22;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          result = (atomic_uchar *)WTF::StringImpl::destroy(v22, v13);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    if (v25)
    {
      result = (atomic_uchar *)v24;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          result = (atomic_uchar *)WTF::StringImpl::destroy(v24, v13);
          if (!v9)
          {
LABEL_25:
            if (*(_DWORD *)v11 == 2) {
              return (atomic_uchar *)WTF::StringImpl::destroy(v11, v13);
            }
            *(_DWORD *)v11 -= 2;
            return result;
          }
LABEL_24:
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(v9[1], v13);
          goto LABEL_25;
        }
        *(_DWORD *)v24 -= 2;
      }
    }
    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  LOBYTE(v20) = 0;
  char v21 = 0;
  (*((void (**)(WTF::StringImpl **__return_ptr, atomic_uchar **))*v9 + 274))(&v17, v9);
  v14 = v17;
  v17 = 0;
  v18 = v14;
  char v19 = 1;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v20, (uint64_t)&v18);
  if (v19 && v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v15);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  v16 = v17;
  v17 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (v21 && v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v15);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(v9[1], v15);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3 = 0;
  uint64_t v4 = *a1;
  *a1 = 0;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
  }
  int v6 = *(unsigned __int8 *)(a3 + 8);
  if (*(unsigned char *)(a3 + 8))
  {
    v7 = *(WTF::StringImpl **)a3;
    *(void *)a3 = 0;
  }
  else
  {
    v7 = 0;
  }
  LOBYTE(v14) = 0;
  char v15 = 0;
  if (v5)
  {
    v14 = v3;
    char v15 = 1;
    v3 = 0;
  }
  LOBYTE(v12) = 0;
  char v13 = 0;
  if (v6)
  {
    v12 = v7;
    char v13 = 1;
    v7 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v4 + 16))(v4, &v14, &v12);
  if (v13)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (!v15 || (char v10 = v14, v14 = 0, !v10))
  {
LABEL_19:
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!v6) {
    goto LABEL_25;
  }
LABEL_22:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v8);
      if (!v5) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      goto LABEL_28;
    }
    *(_DWORD *)v7 -= 2;
  }
LABEL_25:
  if (!v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
LABEL_28:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v8);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::getComputedLabel(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, long long *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  long long v25 = *a3;
  uint64_t v26 = *((void *)a3 + 2);
  long long v27 = 0;
  int v6 = *a4;
  if (*a4) {
    *(_DWORD *)v6 += 2;
  }
  v24 = v6;
  uint64_t AccessibilityObjectForNode = WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(a1, a2, (uint64_t)&v25, (const WTF::String *)&v24, &v27);
  v9 = (atomic_uchar **)AccessibilityObjectForNode;
  if (AccessibilityObjectForNode) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(AccessibilityObjectForNode + 8));
  }
  char v10 = v24;
  v24 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v27;
  if (v27)
  {
    *(_DWORD *)v27 += 2;
    v22 = v11;
    char v23 = 1;
    LOBYTE(v20) = 0;
    char v21 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v22, (uint64_t)&v20);
    if (v21)
    {
      result = v20;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v13);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (!v23) {
      goto LABEL_31;
    }
    result = v22;
    if (!v22) {
      goto LABEL_31;
    }
  }
  else
  {
    LOBYTE(v18) = 0;
    char v19 = 0;
    WebCore::AccessibilityObject::computedLabel((uint64_t *)&v15, (WebCore::AccessibilityObject *)v9);
    v14 = v15;
    char v15 = 0;
    v16 = v14;
    char v17 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v18, (uint64_t)&v16);
    if (v17 && v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    result = v15;
    char v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (!v19 || (result = v18) == 0)
    {
LABEL_31:
      if (!v9) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_31;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  if (v9) {
LABEL_32:
  }
    result = (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(v9[1], v13);
LABEL_33:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v13);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::selectOptionElement(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, uint64_t *a5)
{
  {
    uint64_t v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v28);
  }
  v44 = a2;
  uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v44);
  if (!v9)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v44);
    v12 = v44;
    if (v44) {
      *(_DWORD *)v44 += 2;
    }
    v42 = v12;
    char v43 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v42);
    if (!v43) {
      goto LABEL_23;
    }
    result = v42;
    v42 = 0;
    if (!result) {
      goto LABEL_23;
    }
LABEL_20:
    if (*(_DWORD *)result == 2) {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
LABEL_23:
    if (!v12) {
      return result;
    }
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
      return result;
    }
    result = v12;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  }
  if (*(unsigned char *)(a3 + 16))
  {
    {
      v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v29);
    }
    v11 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v11)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v44);
      v12 = v44;
      if (v44) {
        *(_DWORD *)v44 += 2;
      }
      v40 = v12;
      char v41 = 1;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v40);
      if (!v41) {
        goto LABEL_23;
      }
      result = v40;
      v40 = 0;
      if (!result) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  else
  {
    v11 = *(WebKit::WebFrame **)(v9 + 88);
    if (!v11) {
      goto LABEL_16;
    }
  }
  uint64_t v15 = *((void *)v11 + 3);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (!v16 || *(unsigned char *)(v16 + 144) || !*(void *)(v16 + 288)) {
    goto LABEL_16;
  }
  if (!WebKit::isValidNodeHandle(*a4, v10))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v44);
    v12 = v44;
    if (v44) {
      *(_DWORD *)v44 += 2;
    }
    v38 = v12;
    char v39 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v38);
    if (!v39) {
      goto LABEL_23;
    }
    result = v38;
    v38 = 0;
    if (!result) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  JSObjectRef v17 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v11, (const WTF::String *)a4);
  if (!v17
    || (JSObjectRef v18 = v17, (*((_WORD *)v17 + 16) & 0x10) == 0)
    || (uint64_t v19 = MEMORY[0x1E4FB6AF0],
        uint64_t v20 = *(void *)(*((void *)v17 + 13) + 24),
        uint64_t v21 = MEMORY[0x1E4FB6668],
        v20 != *(void *)(*MEMORY[0x1E4FB6AF0] + 24))
    && v20 != *(void *)(*MEMORY[0x1E4FB6668] + 24))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v44);
    v12 = v44;
    if (v44) {
      *(_DWORD *)v44 += 2;
    }
    v36 = v12;
    char v37 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v36);
    if (!v37) {
      goto LABEL_23;
    }
    result = v36;
    v36 = 0;
    if (!result) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v44);
  if ((*((_WORD *)v18 + 16) & 0x10) == 0) {
    goto LABEL_70;
  }
  uint64_t v22 = *(void *)(*((void *)v18 + 13) + 24);
  if (v22 == *(void *)(*(void *)v21 + 24))
  {
    uint64_t v26 = v44;
    if (v44) {
      *(_DWORD *)v44 += 2;
    }
    v34 = v26;
    char v35 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v34);
    if (v35)
    {
      long long v25 = v34;
      v34 = 0;
      if (v25) {
        goto LABEL_64;
      }
    }
    goto LABEL_67;
  }
  if (v22 != *(void *)(*(void *)v19 + 24))
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x199259790);
  }
  uint64_t v23 = WebCore::HTMLOptionElement::ownerSelectElement(v18);
  if (v23)
  {
    v24 = (WebCore::HTMLSelectElement *)v23;
    if (((*(uint64_t (**)(uint64_t))(*(void *)v23 + 960))(v23) & 1) == 0
      && (WebCore::HTMLOptionElement::isDisabledFormControl(v18) & 1) == 0)
    {
      WebCore::HTMLOptionElement::index(v18);
      WebCore::HTMLSelectElement::optionSelectedByUser(v24);
    }
    LOBYTE(v30) = 0;
    char v31 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v30);
    if (!v31) {
      goto LABEL_67;
    }
    long long v25 = v30;
    v30 = 0;
    if (!v25) {
      goto LABEL_67;
    }
LABEL_64:
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v14);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
    goto LABEL_67;
  }
  long long v27 = v44;
  if (v44) {
    *(_DWORD *)v44 += 2;
  }
  v32 = v27;
  char v33 = 1;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v32);
  if (v33)
  {
    long long v25 = v32;
    v32 = 0;
    if (v25) {
      goto LABEL_64;
    }
  }
LABEL_67:
  result = v44;
  if (v44)
  {
    if (*(_DWORD *)v44 != 2)
    {
      *(_DWORD *)v44 -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, const WTF::String *a4, uint64_t *a5, uint64_t *a6)
{
  {
    v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  v60 = a2;
  uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v60);
  if (!v11)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v60);
    char v13 = v60;
    if (v60) {
      *(_DWORD *)v60 += 2;
    }
    v57 = v13;
    char v58 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v57);
    if (!v58) {
      goto LABEL_22;
    }
    result = v57;
    v57 = 0;
    if (!result) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    {
      v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v48);
    }
    v12 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v12)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v60);
      char v13 = v60;
      if (v60) {
        *(_DWORD *)v60 += 2;
      }
      v55 = v13;
      char v56 = 1;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v55);
      if (!v56) {
        goto LABEL_22;
      }
      result = v55;
      v55 = 0;
      if (!result) {
        goto LABEL_22;
      }
LABEL_20:
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        if (!v13) {
          return result;
        }
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
LABEL_22:
      if (!v13) {
        return result;
      }
LABEL_25:
      if (*(_DWORD *)v13 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v15);
      }
      *(_DWORD *)v13 -= 2;
      return result;
    }
  }
  else
  {
    v12 = *(WebKit::WebFrame **)(v11 + 88);
    if (!v12) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = *((void *)v12 + 3);
  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if (!v17 || *(unsigned char *)(v17 + 144) || !*(void *)(v17 + 288)) {
    goto LABEL_16;
  }
  JSObjectRef v18 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v12, a4);
  JSObjectRef v19 = v18;
  if (!v18) {
    goto LABEL_44;
  }
  if ((*((_WORD *)v18 + 16) & 0x10) == 0
    || *(void *)(*((void *)v18 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    JSObjectRef v19 = 0;
LABEL_44:
    char v27 = 1;
    goto LABEL_46;
  }
  *((_DWORD *)v18 + 7) += 2;
  if ((WebCore::HTMLInputElement::isFileUpload(v18) & 1) == 0)
  {
    char v27 = 0;
LABEL_46:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v60);
    uint64_t v28 = v60;
    if (v60) {
      *(_DWORD *)v60 += 2;
    }
    v53 = v28;
    char v54 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v53);
    if (v54)
    {
      result = v53;
      v53 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
          if (!v28) {
            goto LABEL_57;
          }
          goto LABEL_55;
        }
        *(_DWORD *)result -= 2;
      }
    }
    if (!v28)
    {
LABEL_57:
      if (v27) {
        return result;
      }
      goto LABEL_91;
    }
LABEL_55:
    if (*(_DWORD *)v28 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v29);
      if (v27) {
        return result;
      }
      goto LABEL_91;
    }
    *(_DWORD *)v28 -= 2;
    goto LABEL_57;
  }
  v51 = 0;
  uint64_t v52 = 0;
  unint64_t v20 = 0;
  if (WebCore::HTMLInputElement::multiple(v19))
  {
    uint64_t v21 = WebCore::HTMLInputElement::files(v19);
    if (v21 && (unint64_t v20 = *(unsigned int *)(v21 + 28), v20))
    {
      uint64_t v22 = *(uint64_t **)(v21 + 16);
      if (v20 <= 0x10) {
        unint64_t v23 = 16;
      }
      else {
        unint64_t v23 = *(unsigned int *)(v21 + 28);
      }
      result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v51, v23);
      if (v20 < HIDWORD(v52))
      {
        __break(0xC471u);
        return result;
      }
      v24 = &v51[HIDWORD(v52)];
      uint64_t v25 = 8 * v20;
      do
      {
        uint64_t v26 = *v22++;
        ++*(_DWORD *)(v26 + 16);
        *v24++ = v26;
        v25 -= 8;
      }
      while (v25);
      HIDWORD(v52) = v20;
    }
    else
    {
      unint64_t v20 = 0;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v51, v20 + *((unsigned int *)a5 + 3));
  uint64_t v30 = *((unsigned int *)a5 + 3);
  if (v30)
  {
    uint64_t v31 = *a5;
    uint64_t v32 = 8 * v30;
    do
    {
      v62 = 0;
      v63 = 0;
      LOBYTE(v60) = 0;
      char v61 = 0;
      WebCore::File::create();
      v34 = v62;
      v62 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v33);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      char v35 = v63;
      v63 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v33);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      int v36 = HIDWORD(v52) + 1;
      char v37 = v51;
      v38 = v59;
      v59 = 0;
      v51[HIDWORD(v52)] = v38;
      HIDWORD(v52) = v36;
      char v39 = v59;
      v59 = 0;
      if (v39)
      {
        if (v39[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
        }
        else {
          --v39[4];
        }
      }
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
  }
  else
  {
    char v37 = v51;
    int v36 = HIDWORD(v52);
  }
  uint64_t v40 = WebCore::FileList::operator new((WebCore::FileList *)0x20);
  *(void *)uint64_t v40 = 0;
  *(_DWORD *)(v40 + 8) = 1;
  *(void *)(v40 + 16) = v37;
  int v41 = v52;
  v51 = 0;
  uint64_t v52 = 0;
  *(_DWORD *)(v40 + 24) = v41;
  *(_DWORD *)(v40 + 28) = v36;
  v60 = (WTF::StringImpl *)v40;
  WebCore::HTMLInputElement::setFiles();
  char v43 = v60;
  v60 = 0;
  if (v43)
  {
    if (*((_DWORD *)v43 + 2) == 1)
    {
      WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43 + 16, v42);
      if (*(void *)v43)
      {
        *(void *)(*(void *)v43 + 8) = 3;
        *(void *)char v43 = 0;
      }
      bmalloc::api::isoDeallocate(v43, v44);
    }
    else
    {
      --*((_DWORD *)v43 + 2);
    }
  }
  LOBYTE(v49) = 0;
  char v50 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v49);
  if (v50)
  {
    v46 = v49;
    v49 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v45);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v45);
LABEL_91:
  if (*((_DWORD *)v19 + 7) == 2)
  {
    if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
      return (WTF::StringImpl *)WebCore::Node::removedLastRef(v19);
    }
  }
  else
  {
    *((_DWORD *)v19 + 7) -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::takeScreenshot(WebKit::WebAutomationSessionProxy *a1, unint64_t a2, long long *a3, WTF::StringImpl **a4, int a5, int a6, uint64_t a7)
{
  long long v20 = *a3;
  uint64_t v21 = *((void *)a3 + 2);
  v12 = *a4;
  if (*a4) {
    *(_DWORD *)v12 += 2;
  }
  JSObjectRef v19 = v12;
  long long v16 = *a3;
  char v17 = *((unsigned char *)a3 + 16);
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9FAFA0;
  *(void *)(v13 + 8) = a2;
  *(_OWORD *)(v13 + 16) = v16;
  *(unsigned char *)(v13 + 32) = v17;
  *(void *)(v13 + 40) = a7;
  uint64_t v18 = v13;
  WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(a1, a2, (uint64_t)&v20, (const WTF::String *)&v19, a5, a6, &v18);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  result = v19;
  JSObjectRef v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(WebKit::WebAutomationSessionProxy *a1, unint64_t a2, uint64_t a3, const WTF::String *a4, int a5, int a6, uint64_t *a7)
{
  {
    v55 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v55);
  }
  unint64_t v76 = a2;
  uint64_t v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v76);
  if (!v13)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v74);
    char v17 = v74;
    if (v74) {
      *(_DWORD *)v74 += 2;
    }
    v71 = v17;
    char v72 = 1;
    unint64_t v76 = 0;
    int64_t v77 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v71);
    if (v72)
    {
      result = v71;
      if (v71) {
        goto LABEL_20;
      }
    }
    goto LABEL_23;
  }
  uint64_t v15 = (WebKit::WebPage *)v13;
  if (*(unsigned char *)(a3 + 16))
  {
    {
      char v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v56);
    }
    long long v16 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v16)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v74);
      char v17 = v74;
      if (v74) {
        *(_DWORD *)v74 += 2;
      }
      v69 = v17;
      char v70 = 1;
      unint64_t v76 = 0;
      int64_t v77 = 0;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v69);
      if (v70)
      {
        result = v69;
        if (v69)
        {
LABEL_20:
          if (*(_DWORD *)result == 2) {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
LABEL_23:
      if (v17)
      {
        if (*(_DWORD *)v17 != 2)
        {
          *(_DWORD *)v17 -= 2;
          return result;
        }
        result = v17;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      }
      return result;
    }
  }
  else
  {
    long long v16 = *(WebKit::WebFrame **)(v13 + 88);
    if (!v16) {
      goto LABEL_16;
    }
  }
  uint64_t v20 = *((void *)v16 + 3);
  if (!v20) {
    goto LABEL_16;
  }
  uint64_t v21 = *(void *)(v20 + 8);
  if (!v21 || *(unsigned char *)(v21 + 144)) {
    goto LABEL_16;
  }
  uint64_t v22 = *(WebKit **)a4;
  if (*(void *)a4 && *((_DWORD *)v22 + 1))
  {
    if (!WebKit::isValidNodeHandle(v22, v14))
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v74);
      char v17 = v74;
      if (v74) {
        *(_DWORD *)v74 += 2;
      }
      v67 = v17;
      char v68 = 1;
      unint64_t v76 = 0;
      int64_t v77 = 0;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v67);
      if (v68)
      {
        result = v67;
        if (v67) {
          goto LABEL_20;
        }
      }
      goto LABEL_23;
    }
    unint64_t v23 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v16, a4);
    if (!v23)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v74);
      char v17 = v74;
      if (v74) {
        *(_DWORD *)v74 += 2;
      }
      v65 = v17;
      char v66 = 1;
      unint64_t v76 = 0;
      int64_t v77 = 0;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v65);
      if (v66)
      {
        result = v65;
        if (v65) {
          goto LABEL_20;
        }
      }
      goto LABEL_23;
    }
    v24 = v23;
    if (a5) {
      WebCore::Element::scrollIntoViewIfNotVisible(v23);
    }
    char v25 = 0;
  }
  else
  {
    v24 = 0;
    char v25 = 1;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(21, &v64);
  if (!WebKit::WebPage::localMainFrameView(v15)) {
    goto LABEL_54;
  }
  if (v25)
  {
    uint64_t v26 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(v15);
    if (v26)
    {
      if (a6)
      {
        unint64_t v27 = WebCore::ScrollableArea::visibleContentRect();
      }
      else
      {
        int64_t v28 = WebCore::ScrollView::contentsSize(v26);
        unint64_t v27 = 0;
      }
      goto LABEL_66;
    }
LABEL_54:
    unint64_t v76 = 0;
    int64_t v77 = 0;
    goto LABEL_55;
  }
  v29 = (WebCore::RenderObject *)(*((void *)v24 + 9) & 0xFFFFFFFFFFFFLL);
  if (!v29) {
    goto LABEL_54;
  }
  if ((*(unsigned char *)((*((void *)v24 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19925A424);
  }
  v74 = 0;
  uint64_t v75 = 0;
  uint64_t v30 = WebCore::RenderObject::paintingRootRect(v29, (WebCore::LayoutRect *)&v74);
  unsigned int v33 = v30 - (v32 & 0xFFFFFFC0);
  int v34 = v33 + 32;
  unsigned int v36 = HIDWORD(v30) - (v35 & 0xFFFFFFC0);
  int v37 = v36 + 32;
  unint64_t v27 = (((int)(v33 + 32) >> 6) + (int)v30 / 64) | ((unint64_t)(((int)(v36 + 32) >> 6)
                                                                                                 + SHIDWORD(v30) / 64) << 32);
  BOOL v39 = __OFADD__(v33, v38);
  int v40 = v33 + v38;
  int v41 = (v33 >> 31) + 0x7FFFFFFF;
  if (!v39) {
    int v41 = v40;
  }
  uint64_t v42 = (v41 / 64 - (v34 >> 6) + ((int)(v41 - (v40 & 0xFFFFFFC0) + 32) >> 6));
  BOOL v39 = __OFADD__(v36, v31);
  int v43 = v36 + v31;
  int v44 = (v36 >> 31) + 0x7FFFFFFF;
  if (!v39) {
    int v44 = v43;
  }
  int64_t v28 = v42 | ((unint64_t)(v44 / 64 - (v37 >> 6) + ((int)(v44 - (v43 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  unint64_t v76 = v27;
  int64_t v77 = v28;
  if (a6)
  {
    v73.m_location = (IntPoint)WebCore::ScrollableArea::visibleContentRect();
    v73.m_size = v45;
    WebCore::IntRect::intersect((WebCore::IntRect *)&v76, &v73);
    unint64_t v27 = v76;
    int64_t v28 = v77;
  }
LABEL_66:
  unint64_t v76 = v27;
  int64_t v77 = v28;
  if ((int)v28 < 1 || v28 <= 0)
  {
LABEL_55:
    v46 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    v62 = v46;
    char v63 = 1;
    v74 = 0;
    uint64_t v75 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v62);
    if (!v63) {
      goto LABEL_88;
    }
    v47 = v62;
    if (!v62) {
      goto LABEL_88;
    }
LABEL_80:
    if (*(_DWORD *)v47 != 2)
    {
      *(_DWORD *)v47 -= 2;
      goto LABEL_88;
    }
LABEL_87:
    WTF::StringImpl::destroy(v47, v19);
    goto LABEL_88;
  }
  uint64_t v48 = *(void *)(*(void *)(*(void *)(*((void *)v16 + 3) + 8) + 128) + 8);
  if (v48) {
    BOOL v49 = *(unsigned char *)(v48 + 144) == 0;
  }
  else {
    BOOL v49 = 0;
  }
  if (v49)
  {
    LOBYTE(v58) = 0;
    char v59 = 0;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v57, (const WebCore::IntRect *)&v76);
    WebCore::LocalFrameView::documentToClientRect();
    v73.m_location.m_x = v51;
    v73.m_location.m_y = v52;
    v73.m_size.m_width = v53;
    v73.m_size.m_height = v54;
    WebCore::IntRect::IntRect((WebCore::IntRect *)&v74, (const FloatRect *)&v73);
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v58);
    if (!v59) {
      goto LABEL_88;
    }
    v47 = v58;
    if (!v58) {
      goto LABEL_88;
    }
    goto LABEL_80;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v73);
  m_location = (WTF::StringImpl *)v73.m_location;
  if (v73.m_location) {
    **(_DWORD **)&v73.m_location += 2;
  }
  v60 = m_location;
  char v61 = 1;
  v74 = 0;
  uint64_t v75 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v60);
  if (v61 && v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v19);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  if (m_location)
  {
    if (*(_DWORD *)m_location != 2)
    {
      *(_DWORD *)m_location -= 2;
      goto LABEL_88;
    }
    v47 = m_location;
    goto LABEL_87;
  }
LABEL_88:
  result = v64;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    *(_DWORD *)v64 -= 2;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    v7 = v3;
    char v8 = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    char v8 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v7);
  if (v8)
  {
    int v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::getCookiesForFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  {
    unsigned int v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v36);
  }
  uint64_t v42 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v42);
  if (!v6)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v42);
    uint64_t v9 = v42;
    if (v42) {
      *(_DWORD *)v42 += 2;
    }
    uint64_t v48 = v9;
    char v49 = 1;
    v47[0] = 0;
    v47[1] = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v48, v47);
    result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v10);
    if (!v49) {
      goto LABEL_22;
    }
    result = v48;
    uint64_t v48 = 0;
    if (!result) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v7 = v6;
  if (*(unsigned char *)(a3 + 16))
  {
    {
      int v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v37);
    }
    uint64_t v8 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v8)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v42);
      uint64_t v9 = v42;
      if (v42) {
        *(_DWORD *)v42 += 2;
      }
      v44[1] = 0;
      IntSize v45 = v9;
      char v46 = 1;
      v44[0] = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v45, v44);
      result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v15);
      if (!v46) {
        goto LABEL_22;
      }
      result = v45;
      IntSize v45 = 0;
      if (!result) {
        goto LABEL_22;
      }
LABEL_20:
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        if (!v9) {
          return result;
        }
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
LABEL_22:
      if (!v9) {
        return result;
      }
LABEL_25:
      if (*(_DWORD *)v9 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v12);
      }
      *(_DWORD *)v9 -= 2;
      return result;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 88);
    if (!v8) {
      goto LABEL_16;
    }
  }
  uint64_t v13 = *(void *)(v8 + 24);
  if (!v13) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(v14 + 144)) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v14 + 296);
  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v17 = *(void *)(v16 + 1000);
  if (v17 && *(_DWORD *)(v17 + 4))
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(void, uint64_t, uint64_t, WTF::StringImpl **))(**(void **)(*(void *)(v7 + 48) + 888) + 40))(*(void *)(*(void *)(v7 + 48) + 888), v16, v16 + 1000, &v42);
    LOBYTE(v40) = 0;
    char v41 = 0;
    uint64_t v38 = 0;
    LODWORD(v39) = 0;
    HIDWORD(v39) = HIDWORD(v43);
    if (HIDWORD(v43))
    {
      if (HIDWORD(v43) >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      int v18 = 136 * HIDWORD(v43);
      uint64_t v19 = WTF::fastMalloc((WTF *)(136 * HIDWORD(v43)));
      LODWORD(v39) = (v18 & 0xFFFFFFF8) / 0x88;
      uint64_t v38 = v19;
      if (HIDWORD(v43))
      {
        uint64_t v20 = (_DWORD *)((char *)v42 + 136 * HIDWORD(v43));
        uint64_t v21 = v19 + 112;
        uint64_t v22 = (uint64_t)v42 + 112;
        do
        {
          uint64_t v24 = v22 - 112;
          unint64_t v23 = *(_DWORD **)(v22 - 112);
          if (v23) {
            *v23 += 2;
          }
          *(void *)(v21 - 112) = v23;
          char v25 = *(_DWORD **)(v22 - 104);
          if (v25) {
            *v25 += 2;
          }
          *(void *)(v21 - 104) = v25;
          uint64_t v26 = *(_DWORD **)(v22 - 96);
          if (v26) {
            *v26 += 2;
          }
          *(void *)(v21 - 96) = v26;
          unint64_t v27 = *(_DWORD **)(v22 - 88);
          if (v27) {
            *v27 += 2;
          }
          *(void *)(v21 - 88) = v27;
          long long v28 = *(_OWORD *)(v22 - 80);
          *(_OWORD *)(v21 - 69) = *(_OWORD *)(v22 - 69);
          *(_OWORD *)(v21 - 80) = v28;
          v29 = *(_DWORD **)(v22 - 48);
          if (v29) {
            *v29 += 2;
          }
          *(void *)(v21 - 48) = v29;
          uint64_t v30 = *(_DWORD **)(v22 - 40);
          if (v30) {
            *v30 += 2;
          }
          *(void *)(v21 - 40) = v30;
          long long v31 = *(_OWORD *)(v22 - 16);
          *(_OWORD *)(v21 - 32) = *(_OWORD *)(v22 - 32);
          *(_OWORD *)(v21 - 16) = v31;
          uint64_t v32 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v21, v22);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v22 + 16);
          uint64_t v21 = v32 + 136;
          v22 += 136;
        }
        while ((_DWORD *)(v24 + 136) != v20);
      }
    }
  }
  else
  {
    LOBYTE(v40) = 0;
    char v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v40, &v38);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v33);
  if (v41)
  {
    int v35 = v40;
    int v40 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v34);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  return (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v34);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::deleteCookie(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  {
    uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v26 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v26);
  if (!v8)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v26);
    uint64_t v11 = v26;
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    uint64_t v24 = v11;
    char v25 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v24);
    if (!v25) {
      goto LABEL_22;
    }
    result = v24;
    uint64_t v24 = 0;
    if (!result) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v9 = v8;
  if (*(unsigned char *)(a3 + 16))
  {
    {
      uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v21);
    }
    uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v10)
    {
LABEL_16:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v26);
      uint64_t v11 = v26;
      if (v26) {
        *(_DWORD *)v26 += 2;
      }
      uint64_t v22 = v11;
      char v23 = 1;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v22);
      if (!v23) {
        goto LABEL_22;
      }
      result = v22;
      uint64_t v22 = 0;
      if (!result) {
        goto LABEL_22;
      }
LABEL_20:
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        if (!v11) {
          return result;
        }
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
LABEL_22:
      if (!v11) {
        return result;
      }
LABEL_25:
      if (*(_DWORD *)v11 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v13);
      }
      *(_DWORD *)v11 -= 2;
      return result;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 88);
    if (!v10) {
      goto LABEL_16;
    }
  }
  uint64_t v14 = *(void *)(v10 + 24);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(v15 + 144)) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v15 + 296);
  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v17 = *(void *)(*(void *)(v9 + 48) + 888);
  uint64_t v18 = *a5;
  *a5 = 0;
  uint64_t v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v19 = &unk_1EE9FAFC8;
  *((void *)v19 + 1) = v18;
  uint64_t v26 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v17 + 56))(v17, v16, v16 + 1000, a4, &v26);
  result = v26;
  uint64_t v26 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v5 + 16), a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unint64_t JSC::JSArrayBufferView::length(JSC::JSArrayBufferView *this)
{
  int v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 7u) <= 2) {
    return *((void *)this + 3);
  }
  if ((v1 & 8) != 0)
  {
    uint64_t v3 = *((void *)this + 2);
    if (!v3) {
      return 0;
    }
    uint64_t v4 = *(void *)(MEMORY[0x1E4F309C0] + 56);
    if (v4)
    {
      BOOL v5 = *(unsigned char *)(MEMORY[0x1E4F309C0] + 34) || *MEMORY[0x1E4F309B8] == 0;
      uint64_t v6 = v3 & 0x3FFFFFFFFLL;
      if (v5 && v6 + v4 == 0) {
        return 0;
      }
    }
  }
  int v8 = v1 & 6;
  if ((v1 & 6) == 0)
  {
    unint64_t v9 = 0;
    if (v1)
    {
LABEL_16:
      unint64_t v25 = v9;
      unint64_t v27 = this;
      int v23 = v8;
      char v10 = v1 - 88;
      if ((v1 - 88) <= 0x35)
      {
        if (((1 << v10) & 0x3D) != 0)
        {
          unint64_t result = *(void *)(*((void *)this + 1) - 8);
          goto LABEL_29;
        }
        if (((1 << v10) & 0x3D000000000000) != 0)
        {
          unint64_t result = *((void *)this + 6);
          goto LABEL_29;
        }
      }
      if (v1 == 16 || v1 == 48)
      {
        unint64_t result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
LABEL_29:
        if (result)
        {
          *(_DWORD *)result += 2;
          if (!v23)
          {
            if (*(unsigned char *)(result + 64) && (uint64_t v12 = *(void *)(result + 32)) != 0) {
              unint64_t v13 = atomic_load((unint64_t *)(v12 + 32));
            }
            else {
              unint64_t v13 = *(void *)(result + 48);
            }
            unint64_t v25 = v13;
          }
          unsigned int v20 = *((unsigned __int8 *)v27 + 5) - 42;
          if (v20 > 8) {
            LOBYTE(v21) = 0;
          }
          else {
            uint64_t v21 = qword_1994F8DB0[(char)v20];
          }
          unint64_t v22 = (v25 - *((void *)v27 + 4)) >> v21;
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
          return v22;
        }
        return result;
      }
      return 0;
    }
    return *((void *)this + 3);
  }
  int v24 = v1 & 6;
  long long v28 = this;
  char v11 = v1 - 88;
  if ((v1 - 88) > 0x35) {
    goto LABEL_35;
  }
  if (((1 << v11) & 0x3D) != 0)
  {
    unint64_t result = *(void *)(*((void *)this + 1) - 8);
    goto LABEL_37;
  }
  if (((1 << v11) & 0x3D000000000000) != 0)
  {
    unint64_t result = *((void *)this + 6);
  }
  else
  {
LABEL_35:
    if (v1 != 16 && v1 != 48) {
      return 0;
    }
    unint64_t result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
  }
LABEL_37:
  if (result)
  {
    *(_DWORD *)result += 2;
    if (*(unsigned char *)(result + 64) && (uint64_t v14 = *(void *)(result + 32)) != 0) {
      unint64_t v15 = atomic_load((unint64_t *)(v14 + 32));
    }
    else {
      unint64_t v15 = *(void *)(result + 48);
    }
    unint64_t v26 = v15;
    unint64_t v16 = v15;
    unint64_t v17 = *((void *)v28 + 4);
    if ((*((unsigned char *)v28 + 40) & 1) == 0)
    {
      unsigned int v18 = *((unsigned __int8 *)v28 + 5) - 42;
      if (v18 > 8) {
        LOBYTE(v19) = 0;
      }
      else {
        uint64_t v19 = qword_1994F8DB0[(char)v18];
      }
      unint64_t v16 = (*((void *)v28 + 3) << v19) + v17;
    }
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    unint64_t result = 0;
    if (v17 <= v26 && v16 <= v26)
    {
      unint64_t v9 = v26;
      this = v28;
      int v1 = *((unsigned __int8 *)v28 + 40);
      int v8 = v24;
      if (v1) {
        goto LABEL_16;
      }
      return *((void *)this + 3);
    }
  }
  return result;
}

uint64_t JSC::Structure::ensurePropertyTableIfNotEmpty(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    return v1;
  }
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    return v1;
  }
  if (*(unsigned char *)(v1 + 5) != 1 && *(_DWORD *)(v1 + 80) < 2u) {
    return 0;
  }
  return MEMORY[0x1F40EAB88]();
}

unsigned int *WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    OpaqueJSString::~OpaqueJSString((OpaqueJSString *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

WebCore::DOMRectList *WTF::RefCounted<WebCore::DOMRectList>::deref(WebCore::DOMRectList *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::DOMRectList::~DOMRectList(result);
    return (WebCore::DOMRectList *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v16 = -1640531527;
    __int16 v17 = 0;
    char v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v16, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    int v8 = (uint64_t *)(v3 + 24 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return 1;
    }
    else
    {
      int v12 = 1;
      do
      {
        uint64_t v13 = v9 | v10;
        unint64_t result = v13 != 0;
        if (!v13) {
          break;
        }
        unsigned int v7 = (v7 + v12) & v4;
        uint64_t v14 = (uint64_t *)(v3 + 24 * v7);
        uint64_t v9 = *v14;
        uint64_t v10 = v14[1];
        ++v12;
      }
      while (v9 != *a2 || v10 != v6);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::ensureObserverForFrame(WebKit::WebFrame &)::$_0,void,WebKit::WebAutomationDOMWindowObserver &>::call(uint64_t *a1)
{
  return WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame(a1[1], a1[2], a1[3]);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    while (1)
    {
      uint64_t v11 = v4 + 24 * v9;
      if (*(void *)(v11 + 8) != -1)
      {
        if (*(_OWORD *)v11 != 0)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            unsigned int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            unsigned int v13 = 0;
          }
          unsigned int v26 = -1640531527;
          __int16 v27 = 0;
          char v28 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v26, (void *)(v4 + 24 * v9));
          int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v26);
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v13;
            uint64_t v19 = (_OWORD *)(v12 + 24 * (v16 & v13));
            int v16 = ++v17 + (v16 & v13);
          }
          while (*v19 != 0);
          uint64_t v20 = v12 + 24 * v18;
          uint64_t v23 = *(void *)(v20 + 16);
          unint64_t v22 = (void *)(v20 + 16);
          uint64_t v21 = v23;
          void *v22 = 0;
          if (v23) {
            WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v21 + 16), v8);
          }
          *uint64_t v19 = *(_OWORD *)v11;
          uint64_t v24 = v4 + 24 * v9;
          uint64_t v25 = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = 0;
          void *v22 = v25;
          uint64_t v15 = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = 0;
          if (!v15) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v15 + 16), v8);
          goto LABEL_19;
        }
        uint64_t v14 = v4 + 24 * v9;
        uint64_t v15 = *(void *)(v14 + 16);
        *(void *)(v14 + 16) = 0;
        if (v15) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v10) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

WTF *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *(void *)a2 = -1;
  *((void *)a2 + 1) = -1;
  uint64_t result = (WTF *)*((void *)a2 + 2);
  if (result)
  {
    *((void *)a2 + 2) = 0;
    *((_DWORD *)a2 + 6) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::takeScreenshot(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,BOOL,BOOL,unsigned long long)::$_0,void,std::optional<WTF::String>,WebCore::IntRect &&>::call(uint64_t a1, uint64_t a2, const WebCore::IntRect *a3)
{
  LOBYTE(v31) = 0;
  char v32 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned int v8 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    long long v31 = v8;
    char v32 = 1;
    v39[0] = 0;
    char v40 = 0;
    {
      __int16 v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v9 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    v33.m_location = *(FloatPoint *)(a1 + 40);
    v33.m_size = (FloatSize)v39;
    int v34 = &v31;
    IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v9, (uint64_t *)&v33);
  }
  else
  {
    v39[0] = 0;
    char v40 = 0;
    {
      unsigned int v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    v33.m_location = *(FloatPoint *)(a1 + 8);
    uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v33);
    uint64_t v6 = (unsigned int *)v5;
    if (*(unsigned char *)(a1 + 32))
    {
      {
        char v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v28);
      }
      uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)(a1 + 16), *(void *)(a1 + 24));
    }
    else
    {
      uint64_t v7 = *(void *)(v5 + 88);
    }
    uint64_t v10 = *(void *)(*(void *)(*(void *)(*(void *)(v7 + 24) + 8) + 128) + 8);
    if (v10) {
      BOOL v11 = *(unsigned char *)(v10 + 144) == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v37, a3);
      WebCore::LocalFrameView::clientToDocumentRect();
      v33.m_location.m_x = v12;
      v33.m_location.m_y = v13;
      v33.m_size.m_width = v14;
      v33.m_size.m_height = v15;
      WebCore::IntRect::IntRect((WebCore::IntRect *)v38, &v33);
      WebKit::WebPage::scaledSnapshotWithOptions(v6, (uint64_t)v38, (const WebCore::FloatSize *)1, &v36, 1.0);
      uint64_t v16 = v36;
      if (v36)
      {
        WebKit::WebImage::createHandle(v36, 0, &v33);
        std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v39, (uint64_t)&v33);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v33);
        {
          v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v29);
        }
        uint64_t v17 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        FloatPoint v18 = *(FloatPoint *)(a1 + 40);
        int v35 = 0;
        v33.m_location = v18;
        v33.m_size = (FloatSize)v39;
        int v34 = &v35;
        IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v17, (uint64_t *)&v33);
        uint64_t v20 = v35;
        int v35 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v19);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
      else
      {
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(21, &v35);
        {
          uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v30);
        }
        uint64_t v21 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        v33.m_location = *(FloatPoint *)(a1 + 40);
        v33.m_size = (FloatSize)v39;
        int v34 = &v35;
        IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v21, (uint64_t *)&v33);
        uint64_t v23 = v35;
        int v35 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v22);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
    }
  }
  uint64_t result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v39);
  if (v32)
  {
    uint64_t result = v31;
    long long v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1576;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  float v12 = v4;
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)IPC::Encoder::grow(v4, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v6 = v5;
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v4, a2[1]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[2]);
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    float v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FAFC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FAFC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::call(uint64_t a1)
{
  LOBYTE(v3) = 0;
  char v4 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()((uint64_t *)(a1 + 8), (uint64_t)&v3);
  if (v4)
  {
    uint64_t result = v3;
    uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v9 = a3;
  BOOL v11 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x619:
      uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v13
        || (float v14 = (WTF::StringImpl *)v12,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)v191), !(_BYTE)v192)|| (this = IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v209), !BYTE8(v209)))
      {
        int v24 = 0;
        float v14 = 0;
        goto LABEL_129;
      }
      unint64_t v15 = *((void *)v9 + 1);
      uint64_t v16 = *(WTF::StringImpl **)v9;
      unint64_t v17 = *((void *)v9 + 2) - *(void *)v9;
      if (v15 <= v17)
      {
        unint64_t v148 = 0;
        v149 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v150 = *((void *)v9 + 3);
        if (v150)
        {
          if (v15)
          {
            (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
            v149 = *(WTF::StringImpl **)v9;
            unint64_t v148 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v148 = 0;
            v149 = 0;
          }
        }
      }
      else
      {
        FloatPoint v18 = (unsigned __int8 *)v16 + v17;
        *((void *)v9 + 2) = v18 + 1;
        if (v16)
        {
          unsigned int v19 = *v18;
          if (v19 < 2)
          {
            LOBYTE(v6) = v19 != 0;
            if (v15 <= v18 + 1 - (unsigned __int8 *)v16)
            {
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v164 = *((void *)v9 + 3);
              if (v164)
              {
                (*(void (**)(uint64_t))(*(void *)v164 + 16))(v164);
                unint64_t v20 = 0;
                uint64_t v16 = *(WTF::StringImpl **)v9;
                uint64_t v184 = *((void *)v9 + 1);
                uint64_t v185 = *((void *)v9 + 3);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                unint64_t v21 = 0;
                if (v185)
                {
                  if (v184)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v185 + 16))(v185, v16);
                    unint64_t v21 = *(void *)v9;
                    unint64_t v20 = *((void *)v9 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)v9 + 2) = v18 + 2;
              LODWORD(v5) = v18[1];
              unint64_t v20 = v15;
              unint64_t v21 = (unint64_t)v16;
              if (v5 < 2)
              {
                unint64_t v22 = v192;
                if (!(_BYTE)v192) {
                  goto LABEL_168;
                }
                int v23 = 0;
                long long v206 = *(_OWORD *)v191;
                uint64_t v207 = *(void *)&v191[16];
                char v4 = (WTF::StringImpl *)v209;
                *(void *)&long long v209 = 0;
                int v24 = 1;
LABEL_202:
                if (BYTE8(v209))
                {
                  this = (WTF::StringImpl *)v209;
                  *(void *)&long long v209 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2) {
                      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
                    }
                    else {
                      *(_DWORD *)this -= 2;
                    }
                  }
                }
                if (!v23)
                {
LABEL_208:
                  if (v24)
                  {
                    this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
                    if (!(_BYTE)v35) {
                      goto LABEL_216;
                    }
                    *(void *)v191 = this;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v191[8], a2);
                    v165 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                    *(void *)v165 = &unk_1EE9FB090;
                    *((void *)v165 + 1) = *(void *)v191;
                    uint64_t v166 = *(void *)&v191[8];
                    *(void *)&v191[8] = 0;
                    *((void *)v165 + 2) = v166;
                    v203 = v165;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v191[8]);
                    *(_OWORD *)v191 = v206;
                    *(void *)&v191[16] = v207;
                    *(void *)&long long v209 = v4;
                    WebKit::WebAutomationSessionProxy::computeElementLayout(v11, v14, (uint64_t)v191, (WebKit **)&v209, v6 != 0, v5, (uint64_t *)&v203);
                    v168 = (WTF::StringImpl *)v209;
                    *(void *)&long long v209 = 0;
                    if (v168)
                    {
                      if (*(_DWORD *)v168 == 2) {
                        WTF::StringImpl::destroy(v168, v167);
                      }
                      else {
                        *(_DWORD *)v168 -= 2;
                      }
                    }
                    this = v203;
                    v203 = 0;
                    if (this) {
                      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
                    }
                  }
                  return this;
                }
LABEL_129:
                v121 = *(WTF::StringImpl **)v9;
                uint64_t v122 = *((void *)v9 + 1);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                this = (WTF::StringImpl *)*((void *)v9 + 3);
                if (this) {
                  BOOL v123 = v122 == 0;
                }
                else {
                  BOOL v123 = 1;
                }
                if (!v123) {
                  this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v121);
                }
                goto LABEL_208;
              }
            }
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            this = (WTF::StringImpl *)*((void *)v9 + 3);
            if (this && v20) {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t, unint64_t))(*(void *)this + 16))(this, v21, v20);
            }
LABEL_201:
            float v14 = 0;
            int v24 = 0;
            int v23 = 1;
            goto LABEL_202;
          }
LABEL_183:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          this = (WTF::StringImpl *)*((void *)v9 + 3);
          if (this && v15) {
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v16);
          }
          goto LABEL_201;
        }
        unint64_t v148 = v15;
        v149 = 0;
      }
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v151 = *((void *)v9 + 3);
      if (v151)
      {
        if (v148)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v151 + 16))(v151, v149, v148);
          uint64_t v16 = *(WTF::StringImpl **)v9;
          unint64_t v15 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v16 = 0;
        }
      }
      goto LABEL_183;
    case 0x61A:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v80 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_104;
        }
        *(void *)&long long v206 = v80;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        v81 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v81 = &unk_1EE9FB1A8;
        v81[1] = v206;
        uint64_t v82 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v81[2] = v82;
        *(void *)&long long v209 = v81;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        v83 = (void (*)(void *, uint64_t, long long *, WTF::StringImpl **))WebKit::WebAutomationSessionProxy::deleteCookie;
        goto LABEL_101;
      }
      return this;
    case 0x61B:
      uint64_t v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v53) {
        goto LABEL_171;
      }
      uint64_t v54 = v52;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)&v206);
      if (!v208) {
        goto LABEL_171;
      }
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v201);
      if (!v202) {
        goto LABEL_171;
      }
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, v55, (uint64_t)&v203);
      if (!v205)
      {
        int v73 = 0;
        v191[0] = 0;
        char v200 = 0;
        goto LABEL_240;
      }
      unint64_t v65 = *((void *)v9 + 1);
      char v56 = *(WTF::StringImpl **)v9;
      unint64_t v66 = *((void *)v9 + 2) - *(void *)v9;
      if (v65 <= v66)
      {
        unint64_t v156 = 0;
        v157 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v158 = *((void *)v9 + 3);
        if (v158)
        {
          if (v65)
          {
            (*(void (**)(uint64_t))(*(void *)v158 + 16))(v158);
            v157 = *(WTF::StringImpl **)v9;
            unint64_t v156 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v156 = 0;
            v157 = 0;
          }
        }
        goto LABEL_192;
      }
      v67 = (unsigned __int8 *)v56 + v66;
      *((void *)v9 + 2) = v67 + 1;
      if (!v56)
      {
        unint64_t v156 = v65;
        v157 = 0;
LABEL_192:
        unint64_t v65 = 0;
        char v56 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v159 = *((void *)v9 + 3);
        if (v159)
        {
          if (v156)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v159 + 16))(v159, v157, v156);
            char v56 = *(WTF::StringImpl **)v9;
            unint64_t v65 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v65 = 0;
            char v56 = 0;
          }
        }
        goto LABEL_193;
      }
      unsigned int v68 = *v67;
      if (v68 >= 2)
      {
LABEL_193:
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v160 = *((void *)v9 + 3);
        if (v160 && v65) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v160 + 16))(v160, v56);
        }
        goto LABEL_228;
      }
      LOBYTE(v3) = v68 != 0;
      if (v65 <= v67 + 1 - (unsigned __int8 *)v56)
      {
        unint64_t v172 = 0;
        v173 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v174 = *((void *)v9 + 3);
        if (v174)
        {
          (*(void (**)(uint64_t))(*(void *)v174 + 16))(v174);
          unint64_t v172 = 0;
          char v56 = *(WTF::StringImpl **)v9;
          uint64_t v188 = *((void *)v9 + 1);
          uint64_t v189 = *((void *)v9 + 3);
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          v173 = 0;
          if (v189)
          {
            if (v188)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v189 + 16))(v189, v56);
              v173 = *(WTF::StringImpl **)v9;
              unint64_t v172 = *((void *)v9 + 1);
            }
          }
        }
        goto LABEL_227;
      }
      *((void *)v9 + 2) = v67 + 2;
      unsigned int v69 = v67[1];
      if (v69 >= 2)
      {
        unint64_t v172 = v65;
        v173 = v56;
LABEL_227:
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v175 = *((void *)v9 + 3);
        if (v175 && v172) {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v175 + 16))(v175, v173, v172);
        }
LABEL_228:
        int v73 = 0;
        v191[0] = 0;
        char v200 = 0;
        goto LABEL_238;
      }
      LOBYTE(v4) = v69 != 0;
      IPC::Decoder::decode<std::optional<double>>(v9, &v209);
      if (!v210)
      {
LABEL_236:
        int v73 = 0;
        v191[0] = 0;
        goto LABEL_237;
      }
      unint64_t v70 = *((void *)v9 + 1);
      char v56 = *(WTF::StringImpl **)v9;
      unint64_t v71 = ((*((void *)v9 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v9;
      if (v70 < v71 || v70 - v71 <= 7)
      {
        unint64_t v176 = 0;
        v177 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v178 = *((void *)v9 + 3);
        if (v178)
        {
          if (v70)
          {
            (*(void (**)(uint64_t))(*(void *)v178 + 16))(v178);
            v177 = *(WTF::StringImpl **)v9;
            unint64_t v176 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v176 = 0;
            v177 = 0;
          }
        }
        goto LABEL_235;
      }
      unint64_t v22 = (unint64_t)v56 + v71;
      *((void *)v9 + 2) = v22 + 8;
      if (!v56)
      {
        unint64_t v176 = v70;
        v177 = 0;
LABEL_235:
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v179 = *((void *)v9 + 3);
        if (v179 && v176) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v179 + 16))(v179, v177);
        }
        goto LABEL_236;
      }
      unint64_t v21 = v208;
      if (!v208) {
        goto LABEL_168;
      }
      unint64_t v21 = v202;
      if (!v202) {
        goto LABEL_168;
      }
      unint64_t v21 = v205;
      if (!v205) {
        goto LABEL_168;
      }
      uint64_t v5 = *(OpaqueJSString **)v22;
      *(void *)v191 = v54;
      *(_OWORD *)&v191[8] = v206;
      char v72 = v201;
      v201 = 0;
      uint64_t v192 = v207;
      v193 = v72;
      unint64_t v7 = v203;
      v194 = v203;
      unsigned int v6 = v204;
      LODWORD(v54) = HIDWORD(v204);
      v203 = 0;
      uint64_t v204 = 0;
      unint64_t v195 = __PAIR64__(v54, v6);
      unsigned __int8 v196 = v3;
      char v197 = (char)v4;
      long long v198 = v209;
      int v73 = 1;
      v199 = v5;
LABEL_237:
      char v200 = v73;
LABEL_238:
      if (v205) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v203, v56);
      }
LABEL_240:
      if (v202)
      {
        v180 = v201;
        v201 = 0;
        if (v180)
        {
          if (*(_DWORD *)v180 == 2) {
            WTF::StringImpl::destroy(v180, v56);
          }
          else {
            *(_DWORD *)v180 -= 2;
          }
        }
      }
      if (!v73) {
        goto LABEL_171;
      }
      uint64_t v207 = v192;
      long long v206 = *(_OWORD *)&v191[8];
      v194 = 0;
      unint64_t v195 = 0;
      *(void *)&long long v209 = v7;
      *((void *)&v209 + 1) = __PAIR64__(v54, v6);
      WebKit::WebAutomationSessionProxy::evaluateJavaScriptFunction((uint64_t *)v11, *(OpaqueJSString **)v191, (uint64_t)&v206, (OpaqueJSString *)&v193, (uint64_t)&v209, v3 != 0, v4 != 0, v57, *(double *)&v191[8], v58, v59, v60, v61, v62, v63, v64, *(double *)&v198, SBYTE8(v198), v5);
      this = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v209, v181);
      if (v200) {
        goto LABEL_247;
      }
      return this;
    case 0x61C:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v74 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_104;
        }
        *(void *)&long long v206 = v74;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        uint64_t v75 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v75 = &unk_1EE9FB0E0;
        v75[1] = v206;
        uint64_t v76 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v75[2] = v76;
        *(void *)&long long v209 = v75;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        uint64_t v38 = (void (*)(void *, uint64_t, long long *, WTF::StringImpl **))WebKit::WebAutomationSessionProxy::getComputedLabel;
        goto LABEL_63;
      }
      return this;
    case 0x61D:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_104;
        }
        *(void *)&long long v206 = v34;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v36 = &unk_1EE9FB0B8;
        v36[1] = v206;
        uint64_t v37 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v36[2] = v37;
        *(void *)&long long v209 = v36;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        uint64_t v38 = (void (*)(void *, uint64_t, long long *, WTF::StringImpl **))WebKit::WebAutomationSessionProxy::getComputedRole;
LABEL_63:
        IPC::callMemberFunction<WebKit::WebAutomationSessionProxy,WebKit::WebAutomationSessionProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>,void ()(std::optional<WTF::String>,std::optional<WTF::String>)>((uint64_t)v11, v38, 0, (uint64_t *)v191);
        this = (WTF::StringImpl *)v209;
        *(void *)&long long v209 = 0;
        if (!this) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
      return this;
    case 0x61E:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)v191, a3);
      if ((_BYTE)v193)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (v84)
        {
          *(void *)&long long v206 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
          v85 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v85 = &unk_1EE9FB180;
          v85[1] = v206;
          uint64_t v86 = *((void *)&v206 + 1);
          *((void *)&v206 + 1) = 0;
          v85[2] = v86;
          *(void *)&long long v209 = v85;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
          long long v206 = *(_OWORD *)&v191[8];
          uint64_t v207 = v192;
          WebKit::WebAutomationSessionProxy::getCookiesForFrame((uint64_t)v11, *(WTF::StringImpl **)v191, (uint64_t)&v206, (uint64_t *)&v209);
          this = (WTF::StringImpl *)v209;
          *(void *)&long long v209 = 0;
          if (this) {
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
          }
        }
      }
      return this;
    case 0x61F:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_248;
        }
        *(void *)&long long v206 = v100;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        v101 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v101 = &unk_1EE9FB040;
        v101[1] = v206;
        uint64_t v102 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v101[2] = v102;
        *(void *)&long long v209 = v101;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        long long v206 = *(_OWORD *)&v191[8];
        uint64_t v207 = v192;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithName((uint64_t)v11, *(WTF::StringImpl **)v191, (uint64_t)&v206, &v193, (uint64_t *)&v209);
        goto LABEL_94;
      }
      return this;
    case 0x620:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v77 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_248;
        }
        *(void *)&long long v206 = v77;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        v78 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v78 = &unk_1EE9FB018;
        v78[1] = v206;
        uint64_t v79 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v78[2] = v79;
        *(void *)&long long v209 = v78;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        long long v206 = *(_OWORD *)&v191[8];
        uint64_t v207 = v192;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithNodeHandle(v11, *(WTF::StringImpl **)v191, (uint64_t)&v206, &v193, (uint64_t *)&v209);
LABEL_94:
        this = (WTF::StringImpl *)v209;
        *(void *)&long long v209 = 0;
        if (this) {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
        }
        if ((_BYTE)v194) {
          goto LABEL_248;
        }
      }
      return this;
    case 0x621:
      uint64_t v106 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v107) {
        goto LABEL_171;
      }
      v108 = (WTF::StringImpl *)v106;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)v191);
      if (!(_BYTE)v192) {
        goto LABEL_171;
      }
      unint64_t v21 = *((void *)v9 + 1);
      unint64_t v22 = *(void *)v9;
      unint64_t v109 = ((*((void *)v9 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v9;
      if (v21 < v109 || v21 - v109 <= 3) {
        goto LABEL_169;
      }
      v111 = (unsigned int *)(v22 + v109);
      *((void *)v9 + 2) = v111 + 1;
      if (!v22)
      {
        unint64_t v137 = v21;
        v138 = 0;
        goto LABEL_170;
      }
      uint64_t v112 = *v111;
      long long v206 = *(_OWORD *)v191;
      uint64_t v207 = *(void *)&v191[16];
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (v113)
      {
        *(void *)v191 = this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v191[8], a2);
        v114 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v114 = &unk_1EE9FAFF0;
        v114[1] = *(void *)v191;
        uint64_t v115 = *(void *)&v191[8];
        *(void *)&v191[8] = 0;
        v114[2] = v115;
        *(void *)&long long v209 = v114;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v191[8]);
        *(_OWORD *)v191 = v206;
        *(void *)&v191[16] = v207;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithOrdinal((uint64_t)v11, v108, (uint64_t)v191, v112, (uint64_t *)&v209);
        goto LABEL_116;
      }
      return this;
    case 0x622:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)v191, a3);
      if ((_BYTE)v193)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (v49)
        {
          *(void *)&long long v206 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
          char v50 = (void *)WTF::fastMalloc((WTF *)0x18);
          *char v50 = &unk_1EE9FB068;
          v50[1] = v206;
          uint64_t v51 = *((void *)&v206 + 1);
          *((void *)&v206 + 1) = 0;
          v50[2] = v51;
          *(void *)&long long v209 = v50;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
          long long v206 = *(_OWORD *)&v191[8];
          uint64_t v207 = v192;
          WebKit::WebAutomationSessionProxy::resolveParentFrame((uint64_t)v11, *(WTF::StringImpl **)v191, (uint64_t)&v206, (uint64_t *)&v209);
LABEL_116:
          this = (WTF::StringImpl *)v209;
          *(void *)&long long v209 = 0;
          if (this) {
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
          }
        }
      }
      return this;
    case 0x623:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>((uint64_t)v191, a3);
      if ((_BYTE)v194)
      {
        uint64_t v103 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
        if (!(_BYTE)v35) {
          goto LABEL_104;
        }
        *(void *)&long long v206 = v103;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
        v104 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v104 = &unk_1EE9FB108;
        v104[1] = v206;
        uint64_t v105 = *((void *)&v206 + 1);
        *((void *)&v206 + 1) = 0;
        v104[2] = v105;
        *(void *)&long long v209 = v104;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
        v83 = (void (*)(void *, uint64_t, long long *, WTF::StringImpl **))WebKit::WebAutomationSessionProxy::selectOptionElement;
LABEL_101:
        IPC::callMemberFunction<WebKit::WebAutomationSessionProxy,WebKit::WebAutomationSessionProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>,void ()(std::optional<WTF::String>)>((uint64_t)v11, v83, 0, (uint64_t *)v191);
        this = (WTF::StringImpl *)v209;
        *(void *)&long long v209 = 0;
        if (this) {
LABEL_102:
        }
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
LABEL_103:
        if ((_BYTE)v194)
        {
LABEL_104:
          this = v193;
          if (v193) {
            goto LABEL_249;
          }
        }
      }
      return this;
    case 0x624:
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v26
        && (uint64_t v27 = v25,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)&v206), v208)&& (IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v203), (_BYTE)v204))
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, v28, (uint64_t)&v209);
        int v30 = v210;
        if (v210)
        {
          unint64_t v22 = v208;
          if (!v208) {
            goto LABEL_168;
          }
          unint64_t v22 = v204;
          if (!(_BYTE)v204) {
            goto LABEL_168;
          }
          *(void *)v191 = v27;
          *(_OWORD *)&v191[8] = v206;
          long long v31 = v203;
          v203 = 0;
          uint64_t v192 = v207;
          v193 = v31;
          unint64_t v32 = *((void *)&v209 + 1);
          v194 = (WTF::StringImpl *)v209;
          long long v209 = 0uLL;
          unint64_t v195 = v32;
          int v33 = 1;
          unsigned __int8 v196 = 1;
          this = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v209, v29);
        }
        else
        {
          int v33 = 0;
          v191[0] = 0;
          unsigned __int8 v196 = 0;
        }
        if ((_BYTE)v204)
        {
          this = v203;
          v203 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v29);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
        if (v30)
        {
LABEL_157:
          if (v33)
          {
            uint64_t v131 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
            if (!(_BYTE)v132) {
              goto LABEL_247;
            }
            *(void *)&long long v206 = v131;
            uint64_t v9 = (IPC::Decoder *)((char *)&v206 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v206 + 1, a2);
            v133 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)v133 = &unk_1EE9FB130;
            *((void *)v133 + 1) = v206;
            uint64_t v134 = *((void *)&v206 + 1);
            *((void *)&v206 + 1) = 0;
            *((void *)v133 + 2) = v134;
            v203 = v133;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v206 + 1);
            unint64_t v22 = v196;
            if (!v196) {
              goto LABEL_168;
            }
            long long v206 = *(_OWORD *)&v191[8];
            v135 = v193;
            uint64_t v207 = v192;
            v193 = 0;
            *(void *)&long long v209 = v135;
            WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload(v11, *(WTF::StringImpl **)v191, (uint64_t)&v206, (const WTF::String *)&v209, (uint64_t *)&v194, (uint64_t *)&v203);
            v136 = (WTF::StringImpl *)v209;
            *(void *)&long long v209 = 0;
            if (v136)
            {
              if (*(_DWORD *)v136 == 2) {
                WTF::StringImpl::destroy(v136, v132);
              }
              else {
                *(_DWORD *)v136 -= 2;
              }
            }
            this = v203;
            v203 = 0;
            if (this) {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
            }
            if (v196)
            {
LABEL_247:
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v194, v132);
LABEL_248:
              this = v193;
              v193 = 0;
              if (this) {
                goto LABEL_249;
              }
            }
          }
          return this;
        }
      }
      else
      {
        int v33 = 0;
        v191[0] = 0;
        unsigned __int8 v196 = 0;
      }
      v116 = *(WTF::StringImpl **)v9;
      uint64_t v117 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      this = (WTF::StringImpl *)*((void *)v9 + 3);
      if (this && v117) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this
      }
                                                                                                  + 16))(this, v116);
      goto LABEL_157;
    case 0x625:
      uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v40
        || (unint64_t v41 = v39,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)v191), !(_BYTE)v192)|| (this = IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v209), !BYTE8(v209)))
      {
        int v48 = 0;
        unint64_t v41 = 0;
        goto LABEL_123;
      }
      unint64_t v42 = *((void *)v9 + 1);
      uint64_t v43 = *(WTF::StringImpl **)v9;
      unint64_t v44 = *((void *)v9 + 2) - *(void *)v9;
      if (v42 <= v44)
      {
        unint64_t v144 = 0;
        v145 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v146 = *((void *)v9 + 3);
        if (v146)
        {
          if (v42)
          {
            (*(void (**)(uint64_t))(*(void *)v146 + 16))(v146);
            v145 = *(WTF::StringImpl **)v9;
            unint64_t v144 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v144 = 0;
            v145 = 0;
          }
        }
      }
      else
      {
        IntSize v45 = (unsigned __int8 *)v43 + v44;
        *((void *)v9 + 2) = v45 + 1;
        if (v43)
        {
          unsigned int v46 = *v45;
          if (v46 < 2)
          {
            LOBYTE(v5) = v46 != 0;
            if (v42 <= v45 + 1 - (unsigned __int8 *)v43)
            {
              unint64_t v161 = 0;
              v162 = 0;
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v163 = *((void *)v9 + 3);
              if (v163)
              {
                (*(void (**)(uint64_t))(*(void *)v163 + 16))(v163);
                unint64_t v161 = 0;
                uint64_t v43 = *(WTF::StringImpl **)v9;
                uint64_t v182 = *((void *)v9 + 1);
                uint64_t v183 = *((void *)v9 + 3);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                v162 = 0;
                if (v183)
                {
                  if (v182)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v183 + 16))(v183, v43);
                    v162 = *(WTF::StringImpl **)v9;
                    unint64_t v161 = *((void *)v9 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)v9 + 2) = v45 + 2;
              unint64_t v22 = v45[1];
              if (v22 < 2)
              {
                unint64_t v21 = v192;
                if (!(_BYTE)v192) {
                  goto LABEL_168;
                }
                int v47 = 0;
                LOBYTE(v6) = v22 != 0;
                long long v206 = *(_OWORD *)v191;
                uint64_t v207 = *(void *)&v191[16];
                char v4 = (WTF::StringImpl *)v209;
                *(void *)&long long v209 = 0;
                int v48 = 1;
LABEL_36:
                if (BYTE8(v209))
                {
                  this = (WTF::StringImpl *)v209;
                  *(void *)&long long v209 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2) {
                      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v43);
                    }
                    else {
                      *(_DWORD *)this -= 2;
                    }
                  }
                }
                if (!v47)
                {
LABEL_147:
                  if (v48)
                  {
                    this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
                    if ((_BYTE)v35)
                    {
                      *(void *)v191 = this;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v191[8], a2);
                      v127 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                      *(void *)v127 = &unk_1EE9FB158;
                      *((void *)v127 + 1) = *(void *)v191;
                      uint64_t v128 = *(void *)&v191[8];
                      *(void *)&v191[8] = 0;
                      *((void *)v127 + 2) = v128;
                      v203 = v127;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v191[8]);
                      *(_OWORD *)v191 = v206;
                      *(void *)&v191[16] = v207;
                      *(void *)&long long v209 = v4;
                      WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(v11, v41, (uint64_t)v191, (const WTF::String *)&v209, v5 != 0, v6 != 0, (uint64_t *)&v203);
                      v130 = (WTF::StringImpl *)v209;
                      *(void *)&long long v209 = 0;
                      if (v130)
                      {
                        if (*(_DWORD *)v130 == 2) {
                          WTF::StringImpl::destroy(v130, v129);
                        }
                        else {
                          *(_DWORD *)v130 -= 2;
                        }
                      }
                      this = v203;
                      v203 = 0;
                      if (this) {
                        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
                      }
                    }
                    else
                    {
LABEL_216:
                      if (v4)
                      {
                        if (*(_DWORD *)v4 == 2)
                        {
                          this = v4;
                          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v35);
                        }
                        *(_DWORD *)v4 -= 2;
                      }
                    }
                  }
                  return this;
                }
LABEL_123:
                v118 = *(WTF::StringImpl **)v9;
                uint64_t v119 = *((void *)v9 + 1);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                this = (WTF::StringImpl *)*((void *)v9 + 3);
                if (this) {
                  BOOL v120 = v119 == 0;
                }
                else {
                  BOOL v120 = 1;
                }
                if (!v120) {
                  this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v118);
                }
                goto LABEL_147;
              }
              unint64_t v161 = v42;
              v162 = v43;
            }
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            this = (WTF::StringImpl *)*((void *)v9 + 3);
            if (this && v161) {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)this + 16))(this, v162, v161);
            }
LABEL_198:
            unint64_t v41 = 0;
            int v48 = 0;
            int v47 = 1;
            goto LABEL_36;
          }
LABEL_178:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          this = (WTF::StringImpl *)*((void *)v9 + 3);
          if (this && v42) {
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v43);
          }
          goto LABEL_198;
        }
        unint64_t v144 = v42;
        v145 = 0;
      }
      unint64_t v42 = 0;
      uint64_t v43 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v147 = *((void *)v9 + 3);
      if (v147)
      {
        if (v144)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v147 + 16))(v147, v145, v144);
          uint64_t v43 = *(WTF::StringImpl **)v9;
          unint64_t v42 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v42 = 0;
          uint64_t v43 = 0;
        }
      }
      goto LABEL_178;
    case 0x626:
      uint64_t v87 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v88
        || (unint64_t v89 = v87,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)v191), !(_BYTE)v192)|| (this = IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v209), !BYTE8(v209)))
      {
        int v99 = 0;
        unint64_t v89 = 0;
        goto LABEL_135;
      }
      unint64_t v90 = *((void *)v9 + 1);
      v91 = *(WTF::StringImpl **)v9;
      unint64_t v92 = *((void *)v9 + 2) - *(void *)v9;
      if (v90 <= v92)
      {
        unint64_t v152 = 0;
        v153 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v154 = *((void *)v9 + 3);
        if (v154)
        {
          if (v90)
          {
            (*(void (**)(uint64_t))(*(void *)v154 + 16))(v154);
            v153 = *(WTF::StringImpl **)v9;
            unint64_t v152 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v152 = 0;
            v153 = 0;
          }
        }
      }
      else
      {
        v93 = (unsigned __int8 *)v91 + v92;
        *((void *)v9 + 2) = v93 + 1;
        if (v91)
        {
          unsigned int v94 = *v93;
          if (v94 < 2)
          {
            LOBYTE(v6) = v94 != 0;
            if (v90 <= v93 + 1 - (unsigned __int8 *)v91)
            {
              unint64_t v169 = 0;
              v170 = 0;
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v171 = *((void *)v9 + 3);
              if (v171)
              {
                (*(void (**)(uint64_t))(*(void *)v171 + 16))(v171);
                unint64_t v169 = 0;
                v91 = *(WTF::StringImpl **)v9;
                uint64_t v186 = *((void *)v9 + 1);
                uint64_t v187 = *((void *)v9 + 3);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                v170 = 0;
                if (v187)
                {
                  if (v186)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v187 + 16))(v187, v91);
                    v170 = *(WTF::StringImpl **)v9;
                    unint64_t v169 = *((void *)v9 + 1);
                  }
                }
              }
            }
            else
            {
              v95 = v93 + 2;
              *((void *)v9 + 2) = v93 + 2;
              unsigned int v96 = v93[1];
              if (v96 < 2)
              {
                LOBYTE(v5) = v96 != 0;
                unint64_t v97 = ((unint64_t)(v95 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v91;
                if (v90 >= v97 && v90 - v97 > 7)
                {
                  unint64_t v22 = (unint64_t)(v95 + 7) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)v9 + 2) = v22 + 8;
                  unint64_t v21 = v192;
                  if (!(_BYTE)v192)
                  {
LABEL_168:
                    __break(1u);
LABEL_169:
                    unint64_t v137 = 0;
                    v138 = 0;
                    *(void *)uint64_t v9 = 0;
                    *((void *)v9 + 1) = 0;
                    uint64_t v139 = *((void *)v9 + 3);
                    if (v139)
                    {
                      if (v21)
                      {
                        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v139 + 16))(v139, v22, v21);
                        v138 = *(WTF::StringImpl **)v9;
                        unint64_t v137 = *((void *)v9 + 1);
                      }
                      else
                      {
                        unint64_t v137 = 0;
                        v138 = 0;
                      }
                    }
LABEL_170:
                    *(void *)uint64_t v9 = 0;
                    *((void *)v9 + 1) = 0;
                    uint64_t v140 = *((void *)v9 + 3);
                    if (v140 && v137) {
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v140 + 16))(v140, v138);
                    }
LABEL_171:
                    v141 = *(WTF::StringImpl **)v9;
                    uint64_t v142 = *((void *)v9 + 1);
                    *(void *)uint64_t v9 = 0;
                    *((void *)v9 + 1) = 0;
                    this = (WTF::StringImpl *)*((void *)v9 + 3);
                    if (this) {
                      BOOL v143 = v142 == 0;
                    }
                    else {
                      BOOL v143 = 1;
                    }
                    if (!v143) {
                      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v141);
                    }
                    return this;
                  }
                  int v98 = 0;
                  uint64_t v3 = *(void *)v22;
                  long long v206 = *(_OWORD *)v191;
                  uint64_t v207 = *(void *)&v191[16];
                  uint64_t v8 = v209;
                  *(void *)&long long v209 = 0;
                  int v99 = 1;
LABEL_87:
                  if (BYTE8(v209))
                  {
                    this = (WTF::StringImpl *)v209;
                    *(void *)&long long v209 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2) {
                        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v91);
                      }
                      else {
                        *(_DWORD *)this -= 2;
                      }
                    }
                  }
                  if (!v98)
                  {
LABEL_142:
                    if (v99)
                    {
                      *(_OWORD *)v191 = v206;
                      *(void *)&v191[16] = v207;
                      *(void *)&long long v209 = v8;
                      WebKit::WebAutomationSessionProxy::takeScreenshot(v11, v89, (long long *)v191, (WTF::StringImpl **)&v209, v6 != 0, v5 != 0, v3);
                      this = (WTF::StringImpl *)v209;
                      *(void *)&long long v209 = 0;
                      if (this)
                      {
LABEL_249:
                        if (*(_DWORD *)this == 2) {
                          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v35);
                        }
                        else {
                          *(_DWORD *)this -= 2;
                        }
                      }
                    }
                    return this;
                  }
LABEL_135:
                  v124 = *(WTF::StringImpl **)v9;
                  uint64_t v125 = *((void *)v9 + 1);
                  *(void *)uint64_t v9 = 0;
                  *((void *)v9 + 1) = 0;
                  this = (WTF::StringImpl *)*((void *)v9 + 3);
                  if (this) {
                    BOOL v126 = v125 == 0;
                  }
                  else {
                    BOOL v126 = 1;
                  }
                  if (!v126) {
                    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v124);
                  }
                  goto LABEL_142;
                }
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                this = (WTF::StringImpl *)*((void *)v9 + 3);
                if (this)
                {
                  (*(void (**)(WTF::StringImpl *))(*(void *)this + 16))(this);
                  int v99 = 0;
                  unint64_t v89 = 0;
                  v91 = *(WTF::StringImpl **)v9;
                  uint64_t v190 = *((void *)v9 + 1);
                  this = (WTF::StringImpl *)*((void *)v9 + 3);
                  int v98 = 1;
                  *(void *)uint64_t v9 = 0;
                  *((void *)v9 + 1) = 0;
                  if (this && v190)
                  {
                    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v91);
                    unint64_t v89 = 0;
                    int v99 = 0;
                  }
                  goto LABEL_87;
                }
LABEL_230:
                unint64_t v89 = 0;
                int v99 = 0;
                int v98 = 1;
                goto LABEL_87;
              }
              unint64_t v169 = v90;
              v170 = v91;
            }
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            this = (WTF::StringImpl *)*((void *)v9 + 3);
            if (this && v169) {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)this + 16))(this, v170, v169);
            }
            goto LABEL_230;
          }
LABEL_188:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          this = (WTF::StringImpl *)*((void *)v9 + 3);
          if (this && v90) {
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v91);
          }
          goto LABEL_230;
        }
        unint64_t v152 = v90;
        v153 = 0;
      }
      unint64_t v90 = 0;
      v91 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v155 = *((void *)v9 + 3);
      if (v155)
      {
        if (v152)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v155 + 16))(v155, v153, v152);
          v91 = *(WTF::StringImpl **)v9;
          unint64_t v90 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v90 = 0;
          v91 = 0;
        }
      }
      goto LABEL_188;
    default:
      return this;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEjONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FAFF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEjONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FAFF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEjONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EE4callESP_SM_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3222;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v12), v14)&& (uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15), v16))
  {
    if (v14)
    {
      *(void *)a1 = v6;
      *(_OWORD *)(a1 + 8) = v12;
      uint64_t v8 = v15;
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      BOOL v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EE4callESR_SM_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3221;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  long long v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SM_EE4callESR_SM_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3220;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  long long v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v11), v13))
  {
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v8 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (void *)*((void *)a2 + 3);
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      BOOL v10 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v10();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEESM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SM_EE4callESP_SM_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3223;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSH_ISN_EENSA_9FloatRectENSH_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_ST_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSH_ISN_EENSA_9FloatRectENSH_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_ST_bEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSH_ISN_EENSA_9FloatRectENSH_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_ST_bEE4callESQ_SR_ST_b(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, float a6, float a7, float a8, float a9)
{
  char v10 = a4;
  v25[0] = a6;
  v25[1] = a7;
  v25[2] = a8;
  v25[3] = a9;
  uint64_t v23 = a3;
  int v24 = a4;
  uint64_t v13 = *(void *)(a1 + 8);
  char v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v14 = 3215;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  char v26 = v14;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v14, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v14, v25);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
  if (v10)
  {
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19925DDE8);
    }
    unsigned char *v15 = 1;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v14, (int *)&v23);
  }
  else
  {
    if (!v16)
    {
      __break(0xC471u);
LABEL_13:
      JUMPOUT(0x19925DDC8);
    }
    unsigned char *v15 = 0;
  }
  unint64_t v17 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  unsigned char *v17 = a5;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v26, 0, 0);
  uint64_t result = v26;
  char v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebAutomationSessionProxy,WebKit::WebAutomationSessionProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>,void ()(std::optional<WTF::String>,std::optional<WTF::String>)>(uint64_t a1, void (*a2)(void *, uint64_t, long long *, WTF::StringImpl **), uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  char v5 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(void (**)(void *, uint64_t, long long *, WTF::StringImpl **))(*v5 + a2);
  }
  uint64_t v6 = *a4;
  long long v11 = *(_OWORD *)(a4 + 1);
  uint64_t v12 = a4[3];
  unint64_t v7 = (WTF::StringImpl *)a4[4];
  a4[4] = 0;
  char v10 = v7;
  v4(v5, v6, &v11, &v10);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB0B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB0B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EE4callESP_SP_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3218;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB0E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB0E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EE4callESP_SP_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3217;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebAutomationSessionProxy,WebKit::WebAutomationSessionProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String>,void ()(std::optional<WTF::String>)>(uint64_t a1, void (*a2)(void *, uint64_t, long long *, WTF::StringImpl **), uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  char v5 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(void (**)(void *, uint64_t, long long *, WTF::StringImpl **))(*v5 + a2);
  }
  uint64_t v6 = *a4;
  long long v11 = *(_OWORD *)(a4 + 1);
  uint64_t v12 = a4[3];
  unint64_t v7 = (WTF::StringImpl *)a4[4];
  a4[4] = 0;
  char v10 = v7;
  v4(v5, v6, &v11, &v10);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3224;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_6VectorISN_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_6VectorISN_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_6VectorISN_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3225;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSH_ISN_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSH_ISN_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSH_ISN_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EE4callESP_SR_(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3226;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEEONS_17CompletionHandlerIFvNSH_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SU_EE4callESP_SU_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3219;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v7, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB1A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB1A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEEENS_6StringEONS_17CompletionHandlerIFvNSH_ISN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3216;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebChromeClient::createIconForFiles(uint64_t a1, uint64_t a2)
{
  WebKit::iconForFiles(a2, &cf);
  WebCore::Icon::create((WebCore::Icon *)cf, v2);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19925E8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WebPushD::WebClipCache *WebPushD::WebClipCache::WebClipCache(WebPushD::WebClipCache *this, const WTF::String *a2)
{
  CFTypeRef v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  *(void *)this = v3;
  *((void *)this + 1) = 0;
  WebPushD::WebClipCache::load(this);
  return this;
}

void sub_19925E958(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4) {
    WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::deallocateTable(v4, a2);
  }
  char v5 = *(WTF::StringImpl **)v2;
  *(void *)uint64_t v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::WebClipCache::load(WebPushD::WebClipCache *this)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (*(void *)this) {
    uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v2 = &stru_1EEA10550;
  }
  CFTypeRef v3 = (void *)MEMORY[0x199741920]();
  uint64_t v70 = 0;
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v2 options:1 error:&v70];
  if (!v4)
  {
    uint64_t v48 = qword_1EB3583C0;
    if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543618;
    uint64_t v79 = v2;
    __int16 v80 = 2114;
    uint64_t v81 = v70;
    char v49 = "WebClipCache::load failed to read %{public}@: %{public}@";
    goto LABEL_98;
  }
  id obj = (id)[MEMORY[0x1E4F28F98] propertyListWithData:v4 options:0 format:0 error:&v70];
  if (!obj)
  {
    uint64_t v48 = qword_1EB3583C0;
    if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543618;
    uint64_t v79 = v2;
    __int16 v80 = 2114;
    uint64_t v81 = v70;
    char v49 = "WebClipCache::load failed to deserialize %{public}@: %{public}@";
LABEL_98:
    char v50 = v48;
    uint32_t v51 = 22;
LABEL_104:
    _os_log_error_impl(&dword_1985F2000, v50, OS_LOG_TYPE_ERROR, v49, buf, v51);
    goto LABEL_105;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v52 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v79 = v2;
      char v49 = "WebClipCache::load failed to deserialize %{public}@: container isn't an array";
      goto LABEL_103;
    }
    goto LABEL_105;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  *(_OWORD *)unint64_t v66 = 0u;
  long long v67 = 0u;
  uint64_t v57 = [obj countByEnumeratingWithState:v66 objects:&v75 count:16];
  if (!v57) {
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)v67;
  uint64_t v55 = *(void *)v67;
LABEL_8:
  uint64_t v6 = 0;
LABEL_9:
  if (*(void *)v67 != v5) {
    objc_enumerationMutation(obj);
  }
  unint64_t v7 = (void *)*((void *)v66[1] + v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || [v7 count] != 3)
  {
    uint64_t v52 = qword_1EB3583C0;
    if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543362;
    uint64_t v79 = v2;
    char v49 = "WebClipCache::load failed to deserialize %{public}@: entry isn't an array";
LABEL_103:
    char v50 = v52;
    uint32_t v51 = 12;
    goto LABEL_104;
  }
  long long v64 = 0u;
  long long v65 = 0u;
  *(_OWORD *)double v62 = 0u;
  long long v63 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:v62 objects:v72 count:16];
  if (!v8) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)v63;
LABEL_15:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v63 != v9) {
      objc_enumerationMutation(v7);
    }
    long long v11 = (void *)*((void *)v62[1] + v10);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || ![v11 length]) {
      break;
    }
    if (v8 == ++v10)
    {
      uint64_t v8 = [v7 countByEnumeratingWithState:v62 objects:v72 count:16];
      if (v8) {
        goto LABEL_15;
      }
LABEL_22:
      ++v6;
      uint64_t v5 = v55;
      if (v6 == v57)
      {
        uint64_t v57 = [obj countByEnumeratingWithState:v66 objects:&v75 count:16];
        uint64_t v5 = v55;
        if (!v57)
        {
LABEL_24:
          CFRetain(obj);
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          uint64_t v12 = [obj countByEnumeratingWithState:&v58 objects:v71 count:16];
          if (!v12) {
            goto LABEL_93;
          }
          uint64_t v54 = *(void *)v59;
          uint64_t v13 = (uint64_t *)((char *)this + 8);
          while (1)
          {
            uint64_t v14 = 0;
            uint64_t v56 = v12;
            do
            {
              if (*(void *)v59 != v54) {
                objc_enumerationMutation(obj);
              }
              uint64_t v15 = *(void **)(*((void *)&v58 + 1) + 8 * v14);
              uint64_t v16 = objc_msgSend(v15, "objectAtIndexedSubscript:", 0, obj);
              uint64_t v17 = [v15 objectAtIndexedSubscript:1];
              uint64_t v18 = [v15 objectAtIndexedSubscript:2];
              unsigned int v19 = (const void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:v17];
              unint64_t v20 = (WebCore::SecurityOriginData *)MEMORY[0x19972E8A0](&v75, v19);
              WebCore::SecurityOriginData::fromURL(v72, v20, v21);
              uint64_t v23 = v75;
              uint64_t v75 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, v22);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
              if (v74)
              {
                if (v74 != 1)
                {
                  std::__throw_bad_variant_access[abi:sn180100]();
                  __break(1u);
                }
              }
              else if (!v72[0] && !v72[1] && !v73)
              {
                uint64_t v36 = 0;
LABEL_82:
                ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9FB1C0[v36])(&v75, v72);
                goto LABEL_83;
              }
              MEMORY[0x19972EAD0](v66, v16);
              int v24 = v66[0];
              v66[0] = 0;
              uint64_t v75 = v24;
              std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v76, (uint64_t)v72);
              MEMORY[0x19972EAD0](v62, v18);
              uint64_t v25 = *v13;
              if (*v13
                || (WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::expand(v13, 0), (uint64_t v25 = *v13) != 0))
              {
                int v26 = *(_DWORD *)(v25 - 8);
              }
              else
              {
                int v26 = 0;
              }
              unsigned int v27 = WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::hash<0ul>(&v75) & v26;
              uint64_t v28 = v25 + 48 * v27;
              if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v28) & 1) == 0)
              {
                long long v31 = 0;
                int v32 = 1;
                do
                {
                  if (*(void *)v28 == -1)
                  {
                    long long v31 = (void *)v28;
                  }
                  else if (WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::equal<0ul>((WTF **)v28, &v75, v30))
                  {
                    goto LABEL_67;
                  }
                  unsigned int v27 = (v27 + v32) & v26;
                  uint64_t v28 = v25 + 48 * v27;
                  ++v32;
                }
                while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v28));
                if (v31)
                {
                  WTF::TupleHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>>::emptyValue(v31);
                  v31[5] = 0;
                  --*(_DWORD *)(*v13 - 16);
                  uint64_t v28 = (uint64_t)v31;
                }
              }
              uint64_t v34 = v75;
              uint64_t v75 = 0;
              int v35 = *(WTF::StringImpl **)v28;
              *(void *)uint64_t v28 = v34;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2) {
                  WTF::StringImpl::destroy(v35, v29);
                }
                else {
                  *(_DWORD *)v35 -= 2;
                }
              }
              std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v28 + 8, (uint64_t)v76);
              uint64_t v37 = v62[0];
              v62[0] = 0;
              uint64_t v38 = *(WTF::StringImpl **)(v28 + 40);
              *(void *)(v28 + 40) = v37;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2) {
                  WTF::StringImpl::destroy(v38, v33);
                }
                else {
                  *(_DWORD *)v38 -= 2;
                }
              }
              uint64_t v39 = *v13;
              if (*v13) {
                int v40 = *(_DWORD *)(v39 - 12) + 1;
              }
              else {
                int v40 = 1;
              }
              *(_DWORD *)(v39 - 12) = v40;
              uint64_t v41 = *v13;
              if (*v13) {
                int v42 = *(_DWORD *)(v41 - 12);
              }
              else {
                int v42 = 0;
              }
              uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
              unint64_t v44 = *(unsigned int *)(v41 - 4);
              if (v44 <= 0x400)
              {
                if (3 * v44 > 4 * v43) {
                  goto LABEL_67;
                }
LABEL_66:
                WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::expand(v13, v28);
                goto LABEL_67;
              }
              if (v44 <= 2 * v43) {
                goto LABEL_66;
              }
LABEL_67:
              IntSize v45 = v62[0];
              v62[0] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2) {
                  WTF::StringImpl::destroy(v45, v33);
                }
                else {
                  *(_DWORD *)v45 -= 2;
                }
              }
              if (v77 != -1) {
                ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9FB1C0[v77])(v62, v76);
              }
              int v77 = -1;
              unsigned int v46 = v75;
              uint64_t v75 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2) {
                  WTF::StringImpl::destroy(v46, v33);
                }
                else {
                  *(_DWORD *)v46 -= 2;
                }
              }
              int v47 = v66[0];
              v66[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2) {
                  WTF::StringImpl::destroy(v47, v33);
                }
                else {
                  *(_DWORD *)v47 -= 2;
                }
              }
              uint64_t v36 = v74;
              if (v74 != -1) {
                goto LABEL_82;
              }
LABEL_83:
              if (v19) {
                CFRelease(v19);
              }
              ++v14;
            }
            while (v14 != v56);
            uint64_t v12 = [obj countByEnumeratingWithState:&v58 objects:v71 count:16];
            if (!v12)
            {
LABEL_93:
              CFRelease(obj);
              return;
            }
          }
        }
        goto LABEL_8;
      }
      goto LABEL_9;
    }
  }
  uint64_t v52 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v79 = v2;
    char v49 = "WebClipCache::load failed to deserialize %{public}@: value isn't a string";
    goto LABEL_103;
  }
LABEL_105:
}

void sub_19925F15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,int a58)
{
}

void WebPushD::WebClipCache::preferredWebClipIdentifier(WebPushD::WebClipCache *this@<X0>, const WTF::String *a2@<X1>, const WebCore::SecurityOriginData *a3@<X2>, WebPushD *a4@<X8>)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN3WTF6StringEN7WebCore18SecurityOriginDataEEEC2B8sn180100IJLm0ELm1EEJS4_S6_EJEJEJRKS4_RKS6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(buf, *(_DWORD **)a2, (uint64_t)a3);
  uint64_t v8 = (uint64_t *)((char *)this + 8);
  uint64_t v9 = *((void *)this + 1);
  if (!v9)
  {
LABEL_9:
    uint64_t v12 = 0;
    goto LABEL_10;
  }
  int v10 = *(_DWORD *)(v9 - 8);
  unsigned int v11 = WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::hash<0ul>((WTF::StringImpl **)buf) & v10;
  uint64_t v12 = v9 + 48 * v11;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v12))
  {
LABEL_7:
    if (*v8)
    {
      uint64_t v12 = *v8 + 48 * *(unsigned int *)(*v8 - 4);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v14 = 1;
  while (*(void *)v12 == -1
       || (WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::equal<0ul>((WTF **)v12, (const WTF::StringImpl **)buf, v13) & 1) == 0)
  {
    unsigned int v11 = (v11 + v14) & v10;
    uint64_t v12 = v9 + 48 * v11;
    ++v14;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v12)) {
      goto LABEL_7;
    }
  }
LABEL_10:
  if (v101 != -1) {
    ((void (*)(long long *, unsigned char *))off_1EE9FB1C0[v101])(&v102, &buf[8]);
  }
  int v101 = -1;
  uint64_t v15 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      uint64_t v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v7);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (*v8) {
    uint64_t v16 = *v8 + 48 * *(unsigned int *)(*v8 - 4);
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 == v12)
  {
LABEL_50:
    uint64_t v92 = v12;
    unsigned int v94 = (uint64_t *)((char *)this + 8);
    uint64_t v28 = MEMORY[0x199741920](v15);
    v29 = (void *)[MEMORY[0x1E4F43048] webClips];
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    uint64_t v30 = [v29 countByEnumeratingWithState:&v102 objects:buf count:16];
    uint64_t v90 = v16;
    context = (void *)v28;
    v93 = (WTF::StringImpl **)a4;
    if (v30)
    {
      CFTypeRef cf = 0;
      uint64_t v31 = *(void *)v103;
      double v32 = INFINITY;
      do
      {
        uint64_t v33 = 0;
        do
        {
          if (*(void *)v103 != v31) {
            objc_enumerationMutation(v29);
          }
          uint64_t v34 = *(void **)(*((void *)&v102 + 1) + 8 * v33);
          int v35 = (const void *)objc_msgSend(v34, "identifier", v90, context);
          if (v35)
          {
            MEMORY[0x19972E8A0](v97, [v34 pageURL]);
            WebCore::SecurityOriginData::fromURL(v98, (WebCore::SecurityOriginData *)v97, v36);
            uint64_t v38 = v97[0];
            v97[0] = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, v37);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            if (WebCore::operator==())
            {
              if ((MEMORY[0x19972E990](*(void *)a2, "com.apple.SafariViewService", 27) & 1) != 0
                || (objc_opt_respondsToSelector() & 1) == 0
                || ((uint64_t v39 = (void *)[v34 trustedClientBundleIdentifiers], !*(void *)a2)
                  ? (int v40 = &stru_1EEA10550)
                  : (int v40 = (__CFString *)WTF::StringImpl::operator NSString *()),
                    [v39 containsObject:v40]))
              {
                if ([MEMORY[0x1E4F43048] pathForWebClipWithIdentifier:v35])
                {
                  MEMORY[0x19972EAD0](v97);
                  double v43 = COERCE_DOUBLE(WTF::FileSystemImpl::fileCreationTime((WTF::FileSystemImpl *)v97, v41));
                  char v44 = (char)v42;
                  IntSize v45 = v97[0];
                  v97[0] = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2) {
                      WTF::StringImpl::destroy(v45, v42);
                    }
                    else {
                      *(_DWORD *)v45 -= 2;
                    }
                  }
                  if (v44 && v32 > v43)
                  {
                    CFRetain(v35);
                    if (cf) {
                      CFRelease(cf);
                    }
                    double v32 = v43;
                    CFTypeRef cf = v35;
                  }
                }
              }
            }
            if (v99 != -1) {
              ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9FB1C0[v99])(v97, v98);
            }
          }
          ++v33;
        }
        while (v30 != v33);
        uint64_t v46 = [v29 countByEnumeratingWithState:&v102 objects:buf count:16];
        uint64_t v30 = v46;
      }
      while (v46);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    int v47 = (WTF::StringImpl *)MEMORY[0x19972EAD0](v93, cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!*v93 || !*((_DWORD *)*v93 + 1))
    {
      if (v90 == v92) {
        return;
      }
LABEL_127:
      long long v67 = (void *)MEMORY[0x199741920](v47);
      id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v69 = (WTF **)*v94;
      if (*v94)
      {
        uint64_t v70 = *((unsigned int *)v69 - 1);
        unint64_t v71 = &v69[6 * v70];
        if (*((_DWORD *)v69 - 3))
        {
          if (v70)
          {
            uint64_t v72 = 48 * v70;
            while (1)
            {
              int v73 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>(v69);
              int v74 = *v69 == (WTF *)-1 ? 1 : v73;
              if (v74 != 1) {
                break;
              }
              v69 += 6;
              v72 -= 48;
              if (!v72)
              {
                long long v69 = v71;
                break;
              }
            }
            uint64_t v75 = v69;
            long long v69 = (WTF **)*v94;
            if (!*v94) {
              goto LABEL_138;
            }
LABEL_142:
            uint64_t v76 = &v69[6 * *((unsigned int *)v69 - 1)];
LABEL_143:
            while (v75 != v76)
            {
              if (*v75) {
                int v77 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else {
                int v77 = &stru_1EEA10550;
              }
              WebCore::SecurityOriginData::toURL((uint64_t *)buf, (WebCore::SecurityOriginData *)(v75 + 1));
              uint64_t v79 = (void *)WTF::URL::operator NSURL *();
              __int16 v80 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 2) {
                  WTF::StringImpl::destroy(v80, v78);
                }
                else {
                  *(_DWORD *)v80 -= 2;
                }
              }
              uint64_t v81 = objc_msgSend(v79, "absoluteString", v90);
              if (v81)
              {
                *(void *)&long long v102 = v77;
                *((void *)&v102 + 1) = v81;
                if (v75[5]) {
                  uint64_t v82 = (__CFString *)WTF::StringImpl::operator NSString *();
                }
                else {
                  uint64_t v82 = &stru_1EEA10550;
                }
                *(void *)&long long v103 = v82;
                objc_msgSend(v68, "addObject:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v102, 3));
              }
              v83 = v75 + 6;
              uint64_t v75 = v71;
              if (v83 != v71)
              {
                uint64_t v75 = v83;
                while (1)
                {
                  int v84 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>(v75);
                  int v85 = *v75 == (WTF *)-1 ? 1 : v84;
                  if (v85 != 1) {
                    break;
                  }
                  v75 += 6;
                  if (v75 == v71)
                  {
                    uint64_t v75 = v71;
                    break;
                  }
                }
              }
            }
            v97[0] = 0;
            uint64_t v86 = objc_msgSend(MEMORY[0x1E4F28F98], "dataWithPropertyList:format:options:error:", v68, 200, 0, v97, v90);
            if (v86)
            {
              if (*(void *)this) {
                uint64_t v87 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else {
                uint64_t v87 = &stru_1EEA10550;
              }
              if (([v86 writeToFile:v87 options:1 error:v97] & 1) == 0)
              {
                char v88 = qword_1EB3583C0;
                if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  *(WTF::StringImpl **)&uint8_t buf[4] = v97[0];
                  unint64_t v89 = "WebClipCache::persist failed to write to disk: %{public}@";
                  goto LABEL_181;
                }
              }
            }
            else
            {
              char v88 = qword_1EB3583C0;
              if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(WTF::StringImpl **)&uint8_t buf[4] = v97[0];
                unint64_t v89 = "WebClipCache::persist failed to serialize plist: %{public}@";
LABEL_181:
                _os_log_error_impl(&dword_1985F2000, v88, OS_LOG_TYPE_ERROR, v89, buf, 0xCu);
                if (!v68) {
                  goto LABEL_175;
                }
                goto LABEL_174;
              }
            }
            if (!v68)
            {
LABEL_175:
              return;
            }
LABEL_174:
            CFRelease(v68);
            goto LABEL_175;
          }
          uint64_t v75 = (WTF **)*v94;
          if (v69) {
            goto LABEL_142;
          }
LABEL_138:
          uint64_t v76 = 0;
          goto LABEL_143;
        }
        uint64_t v75 = &v69[6 * v70];
      }
      else
      {
        uint64_t v75 = 0;
        LODWORD(v70) = 0;
      }
      unint64_t v71 = &v69[6 * v70];
      if (v69) {
        goto LABEL_142;
      }
      goto LABEL_138;
    }
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN3WTF6StringEN7WebCore18SecurityOriginDataEEEC2B8sn180100IJLm0ELm1EEJS4_S6_EJEJEJRKS4_RKS6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(buf, *(_DWORD **)a2, (uint64_t)a3);
    uint64_t v48 = *v94;
    if (*v94
      || (WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::expand(v94, 0), (uint64_t v48 = *v94) != 0))
    {
      unsigned int v49 = *(_DWORD *)(v48 - 8);
    }
    else
    {
      unsigned int v49 = 0;
    }
    uint64_t v50 = WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::hash<0ul>((WTF::StringImpl **)buf) & v49;
    uint64_t v51 = v48 + 48 * v50;
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v51) & 1) == 0)
    {
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        if (*(void *)v51 == -1)
        {
          uint64_t v54 = (void *)v51;
        }
        else if (WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::equal<0ul>((WTF **)v51, (const WTF::StringImpl **)buf, v53))
        {
          WTF::String::operator=((uint64_t *)(v48 + 48 * v50 + 40), v93);
          goto LABEL_121;
        }
        uint64_t v50 = (v50 + v55) & v49;
        uint64_t v51 = v48 + 48 * v50;
        ++v55;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v51));
      if (v54)
      {
        WTF::TupleHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>>::emptyValue(v54);
        v54[5] = 0;
        --*(_DWORD *)(*v94 - 16);
        uint64_t v51 = (uint64_t)v54;
      }
    }
    uint64_t v56 = *(void *)buf;
    *(void *)buf = 0;
    uint64_t v57 = *(WTF::StringImpl **)v51;
    *(void *)uint64_t v51 = v56;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v52);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v51 + 8, (uint64_t)&buf[8]);
    long long v58 = *v93;
    if (*v93) {
      *(_DWORD *)v58 += 2;
    }
    long long v59 = *(WTF::StringImpl **)(v51 + 40);
    *(void *)(v51 + 40) = v58;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v66);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
    uint64_t v60 = *v94;
    if (*v94) {
      int v61 = *(_DWORD *)(v60 - 12) + 1;
    }
    else {
      int v61 = 1;
    }
    *(_DWORD *)(v60 - 12) = v61;
    uint64_t v62 = *v94;
    if (*v94) {
      int v63 = *(_DWORD *)(v62 - 12);
    }
    else {
      int v63 = 0;
    }
    uint64_t v64 = (*(_DWORD *)(v62 - 16) + v63);
    unint64_t v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64) {
        goto LABEL_121;
      }
    }
    else if (3 * v65 > 4 * v64)
    {
LABEL_121:
      if (v101 != -1) {
        ((void (*)(long long *, unsigned char *))off_1EE9FB1C0[v101])(&v102, &buf[8]);
      }
      int v101 = -1;
      int v47 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          int v47 = (WTF::StringImpl *)WTF::StringImpl::destroy(v47, v66);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
      goto LABEL_127;
    }
    WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::expand(v94, v51);
    goto LABEL_121;
  }
  uint64_t v17 = *(_DWORD **)(v12 + 40);
  if (v17) {
    *v17 += 2;
  }
  *(void *)a4 = v17;
  if ((WebPushD::webClipExists(a4, v7) & 1) == 0)
  {
    if (*v8)
    {
      uint64_t v19 = *v8 + 48 * *(unsigned int *)(*v8 - 4);
      if (v19 == v12)
      {
LABEL_46:
        uint64_t v15 = *(WTF::StringImpl **)a4;
        *(void *)a4 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            uint64_t v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v18);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_46;
      }
      uint64_t v19 = 0;
    }
    if (v19 != v12)
    {
      uint64_t v20 = *(unsigned int *)(v12 + 32);
      if (v20 != -1) {
        ((void (*)(unsigned char *, uint64_t))off_1EE9FB1C0[v20])(buf, v12 + 8);
      }
      *(_DWORD *)(v12 + 32) = -1;
      unint64_t v21 = *(WTF::StringImpl **)v12;
      *(void *)uint64_t v12 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v18);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      *(void *)uint64_t v12 = -1;
      unint64_t v22 = *(WTF::StringImpl **)(v12 + 40);
      *(void *)(v12 + 40) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v18);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      ++*(_DWORD *)(*v8 - 16);
      uint64_t v23 = *v8;
      if (*v8) {
        int v24 = *(_DWORD *)(v23 - 12) - 1;
      }
      else {
        int v24 = -1;
      }
      *(_DWORD *)(v23 - 12) = v24;
      uint64_t v25 = *v8;
      if (*v8)
      {
        unsigned int v26 = 6 * *(_DWORD *)(v25 - 12);
        unsigned int v27 = *(_DWORD *)(v25 - 4);
        if (v26 < v27 && v27 >= 9) {
          WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::rehash(v8, v27 >> 1, 0);
        }
      }
    }
    goto LABEL_46;
  }
}

void sub_19925FCEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl **a12, uint64_t a13, uint64_t a14, CFTypeRef cf, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,int a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t v30 = *a12;
  *a12 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, a2);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::webClipExists(WebPushD *this, const WTF::String *a2)
{
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4)) {
    return 0;
  }
  CFTypeRef v3 = (void *)MEMORY[0x199741920]();
  uint64_t v4 = (void *)MEMORY[0x1E4F43048];
  if (*(void *)this) {
    uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1EEA10550;
  }
  uint64_t v6 = [v4 pathForWebClipWithIdentifier:v5];
  if (v6) {
    uint64_t v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v6);
  }
  return v6;
}

void WebPushD::WebClipCache::visibleWebClipIdentifiers(WebPushD::WebClipCache *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  uint64_t v5 = MEMORY[0x199741920](this);
  uint64_t v6 = (void *)[MEMORY[0x1E4F43048] webClips];
  context = (void *)v5;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v22;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v6);
        }
        int v10 = *(void **)(*((void *)&v21 + 1) + 8 * v9);
        uint64_t v11 = [v10 identifier];
        if (v11)
        {
          if ((MEMORY[0x19972E990](*(void *)a2, "com.apple.SafariViewService", 27) & 1) != 0
            || (objc_opt_respondsToSelector() & 1) == 0
            || ((uint64_t v12 = (void *)[v10 trustedClientBundleIdentifiers], !*(void *)a2)
              ? (uint64_t v13 = &stru_1EEA10550)
              : (uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *()),
                [v12 containsObject:v13]))
          {
            MEMORY[0x19972EAD0](&v20, v11);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v20, v14, (uint64_t)v19);
            uint64_t v16 = v20;
            uint64_t v20 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2) {
                WTF::StringImpl::destroy(v16, v15);
              }
              else {
                *(_DWORD *)v16 -= 2;
              }
            }
          }
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v17 = [v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v7 = v17;
    }
    while (v17);
  }
}

void sub_199260160(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (*v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebClipCache::isWebClipVisible(WebPushD::WebClipCache *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t result = WebPushD::webClipExists(a3, a2);
  if (result)
  {
    if (MEMORY[0x19972E990](*(void *)a2, "com.apple.SafariViewService", 27)) {
      return 1;
    }
    uint64_t v6 = (void *)MEMORY[0x1E4F43048];
    uint64_t v7 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v8 = (void *)[v6 webClipWithIdentifier:v7];
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      return 1;
    }
    else
    {
      uint64_t v9 = (void *)[v8 trustedClientBundleIdentifiers];
      if (*(void *)a2) {
        int v10 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        int v10 = &stru_1EEA10550;
      }
      return [v9 containsObject:v10];
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        uint64_t v5 = *(WTF::StringImpl **)(v4 + 40);
        *(void *)(v4 + 40) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v6 = *(unsigned int *)(v4 + 32);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_1EE9FB1C0[v6])(&v9, v4 + 8);
        }
        *(_DWORD *)(v4 + 32) = -1;
        uint64_t v7 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN3WTF6StringEN7WebCore18SecurityOriginDataEEEC2B8sn180100IJLm0ELm1EEJS4_S6_EJEJEJRKS4_RKS6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(void *a1, _DWORD *a2, uint64_t a3)
{
  if (a2) {
    *a2 += 2;
  }
  *a1 = a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_1992603BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::hash<0ul>(WTF::StringImpl **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100) {
    unsigned int v4 = v3 >> 8;
  }
  else {
    unsigned int v4 = WTF::StringImpl::hashSlowCase(v2);
  }
  int v6 = -1640531527;
  __int16 v7 = 0;
  char v8 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v6, (uint64_t)(a1 + 1));
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v4
                           + 95187966 * WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v6))) >> 4;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>(WTF **a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  WTF::TupleHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>>::emptyValue(&v8);
  if (WTF::equal(*a1, v8, v2)) {
    uint64_t v4 = WebCore::operator==();
  }
  else {
    uint64_t v4 = 0;
  }
  if (v10 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FB1C0[v10])(&v7, &v9);
  }
  int v10 = -1;
  uint64_t v5 = v8;
  char v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_199260568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
}

uint64_t WTF::TupleHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>>::emptyValue(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  long long v3 = 0u;
  long long v4 = 0u;
  *a1 = 0;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 1), (uint64_t)&v3);
  if (DWORD2(v4) != -1) {
    return ((uint64_t (*)(char *, long long *))off_1EE9FB1C0[DWORD2(v4)])(&v2, &v3);
  }
  return result;
}

void sub_19926065C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v18 = v17;
  uint64_t v20 = *v18;
  WTF::StringImpl *v18 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (a17 != -1) {
    ((void (*)(char *, char *))off_1EE9FB1C0[a17])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::equal<0ul>(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*a1, *a2, a3);
  if (result)
  {
    return WebCore::operator==();
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = result;
  uint64_t v10 = result + 16;
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = (void *)(result + 56);
    do
    {
      uint64_t result = WTF::TupleHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>>::emptyValue(v12 - 5);
      void *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v5;
    do
    {
      uint64_t v16 = v4 + 48 * v13;
      if (*(void *)v16 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)(v4 + 48 * v13)))
        {
          uint64_t v17 = v4 + 48 * v13;
          uint64_t v18 = *(WTF::StringImpl **)(v17 + 40);
          *(void *)(v17 + 40) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v8);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          uint64_t v31 = *(unsigned int *)(v16 + 32);
          if (v31 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9FB1C0[v31])(&v44, v16 + 8);
          }
          *(_DWORD *)(v16 + 32) = -1;
          double v32 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v8);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = *a1;
          uint64_t v43 = v14;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unsigned int v21 = WTF::TupleHash<WTF::String,WebCore::SecurityOriginData>::hash<0ul>((WTF::StringImpl **)(v4 + 48 * v13));
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v20;
            uint64_t v24 = v19 + 48 * (v21 & v20);
            int v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,false>::isEmptyValue<std::tuple<WTF::String,WebCore::SecurityOriginData>>((WTF **)v24);
            unsigned int v21 = ++v22 + v23;
          }
          while (!v26);
          uint64_t v27 = v19 + 48 * v23;
          uint64_t v30 = *(WTF::StringImpl **)(v27 + 40);
          v29 = (void *)(v27 + 40);
          uint64_t v28 = v30;
          void *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v25);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v33 = *(unsigned int *)(v24 + 32);
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9FB1C0[v33])(&v45, v24 + 8);
          }
          *(_DWORD *)(v24 + 32) = -1;
          uint64_t v34 = *(WTF::StringImpl **)v24;
          *(void *)uint64_t v24 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2) {
              WTF::StringImpl::destroy(v34, v25);
            }
            else {
              *(_DWORD *)v34 -= 2;
            }
          }
          int v35 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          *(void *)uint64_t v24 = v35;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v24 + 8, v16 + 8);
          uint64_t v36 = v4 + 48 * v13;
          uint64_t v37 = *(void *)(v36 + 40);
          *(void *)(v36 + 40) = 0;
          void *v29 = v37;
          uint64_t v38 = *(WTF::StringImpl **)(v36 + 40);
          *(void *)(v36 + 40) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2) {
              WTF::StringImpl::destroy(v38, v8);
            }
            else {
              *(_DWORD *)v38 -= 2;
            }
          }
          uint64_t v39 = *(unsigned int *)(v16 + 32);
          if (v39 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9FB1C0[v39])(&v46, v16 + 8);
          }
          *(_DWORD *)(v16 + 32) = -1;
          int v40 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v8);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          uint64_t v14 = v43;
          if (v16 == a3) {
            uint64_t v14 = v24;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_199260A08(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *char v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::rehash(a1, v5, a2);
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetHostnamesWithCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9FB1E0;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebCookieManager::getHostnamesWithCookies(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookiesForHostnames,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if ((_BYTE)v7
    && (uint64_t v8 = v6,
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v7, (uint64_t)&v23), v25))
  {
    uint64_t v20 = v8;
    v21[0] = v23;
    uint64_t v10 = v24;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v21[1] = v10;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
    char v22 = 1;
    uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (!(_BYTE)v12) {
      return (atomic_uchar *volatile **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
    }
    uint64_t v23 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, a1);
    uint64_t v13 = (atomic_uchar *volatile **)WTF::fastMalloc((WTF *)0x18);
    atomic_uchar *volatile *v13 = (atomic_uchar *volatile *)&unk_1EE9FB208;
    v13[1] = (atomic_uchar *volatile *)v23;
    uint64_t v14 = v24;
    uint64_t v24 = 0;
    v13[2] = v14;
    uint64_t v19 = v13;
    uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v24);
    if (v22)
    {
      WebKit::WebCookieManager::deleteCookiesForHostnames(a3, v20, (uint64_t)v21, (uint64_t *)&v19);
      uint64_t result = v19;
      uint64_t v19 = 0;
      if (result) {
        uint64_t result = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 1))(result);
      }
      if (v22) {
        return (atomic_uchar *volatile **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (atomic_uchar *volatile **)*((void *)a2 + 3);
    if (result) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **, uint64_t))*result + 2))(result, v16);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9FB230;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebCookieManager::deleteAllCookies(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::WebCookieManager::SetCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if ((_BYTE)v7
    && (uint64_t v8 = v6,
        IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v7, (uint64_t)&v23), v25))
  {
    uint64_t v20 = v8;
    v21[0] = v23;
    uint64_t v10 = v24;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v21[1] = (uint64_t)v10;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
    char v22 = 1;
    uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (!(_BYTE)v12) {
      return (atomic_uchar *volatile **)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
    }
    uint64_t v23 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, a1);
    uint64_t v13 = (atomic_uchar *volatile **)WTF::fastMalloc((WTF *)0x18);
    atomic_uchar *volatile *v13 = (atomic_uchar *volatile *)&unk_1EE9FB258;
    v13[1] = (atomic_uchar *volatile *)v23;
    uint64_t v14 = v24;
    uint64_t v24 = 0;
    v13[2] = v14;
    uint64_t v19 = v13;
    uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v24);
    if (v22)
    {
      WebKit::WebCookieManager::setCookie(a3, v20, v21, (uint64_t *)&v19);
      uint64_t result = v19;
      uint64_t v19 = 0;
      if (result) {
        uint64_t result = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 1))(result);
      }
      if (v22) {
        return (atomic_uchar *volatile **)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (atomic_uchar *volatile **)*((void *)a2 + 3);
    if (result) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **, uint64_t))*result + 2))(result, v16);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebCookieManager::SetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if ((_BYTE)v7)
  {
    uint64_t v8 = v6;
    IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, v7, (uint64_t)&v33);
    if (v35)
    {
      IPC::Decoder::decode<WTF::URL>(v4, &v36);
      if (!v39) {
        goto LABEL_36;
      }
      IPC::Decoder::decode<WTF::URL>(v4, &v40);
      if (v42)
      {
        if (!v35 || !v39) {
          goto LABEL_35;
        }
        uint64_t v24 = v8;
        v25[0] = v33;
        uint64_t v10 = v34;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        v25[1] = v10;
        uint64_t v11 = v36;
        uint64_t v36 = 0;
        int v26 = v11;
        long long v27 = v37;
        long long v28 = v38;
        LODWORD(v37) = v37 & 0xFFFFFFFE;
        v29 = v40;
        long long v30 = v41[0];
        long long v31 = v41[1];
        int v12 = 1;
        char v32 = 1;
      }
      else
      {
        int v12 = 0;
        LOBYTE(v24) = 0;
        char v32 = 0;
        if (!v39) {
          goto LABEL_12;
        }
      }
      uint64_t v13 = v36;
      uint64_t v36 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v9);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      while (1)
      {
LABEL_12:
        if (v35) {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v9);
        }
        if (!v12) {
          break;
        }
        uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
        if (!(_BYTE)v15) {
          goto LABEL_20;
        }
        int v40 = (WTF::StringImpl *)v14;
        int v4 = (IPC::Decoder *)v41;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v41, a1);
        uint64_t v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v16 = &unk_1EE9FB280;
        *((void *)v16 + 1) = v40;
        uint64_t v17 = *(void *)&v41[0];
        *(void *)&v41[0] = 0;
        *((void *)v16 + 2) = v17;
        uint64_t v36 = v16;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v41);
        if (v32)
        {
          WebKit::WebCookieManager::setCookies(a3, v24, (uint64_t)v25, (uint64_t)&v26, (uint64_t)&v29, (uint64_t *)&v36);
          uint64_t result = v36;
          uint64_t v36 = 0;
          if (result) {
            uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
          }
          if (v32)
          {
LABEL_20:
            uint64_t v19 = v29;
            v29 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2) {
                WTF::StringImpl::destroy(v19, v15);
              }
              else {
                *(_DWORD *)v19 -= 2;
              }
            }
            uint64_t v23 = v26;
            int v26 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v15);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
            return (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v15);
          }
          return result;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        int v12 = 0;
        LOBYTE(v24) = 0;
        char v32 = 0;
      }
    }
  }
  uint64_t v20 = *(void *)v4;
  uint64_t v21 = *((void *)v4 + 1);
  *(void *)int v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)v4 + 3);
  if (result) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v20);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = (WTF *)result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9FB2A8;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebCookieManager::getAllCookies(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void IPC::handleMessageAsync<Messages::WebCookieManager::GetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(a2, &v15);
  if (v17)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if ((_BYTE)v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EE9FB2D0;
      v8[1] = v12;
      char v9 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17)
      {
        __break(1u);
        return;
      }
      WebKit::WebCookieManager::getCookies(a3, v15, (const WTF::URL *)&v16, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      uint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    if (v17)
    {
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
}

void IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v7 && (uint64_t v8 = v6, IPC::Decoder::decode<WebCore::Cookie>(a2, &v29), v38))
  {
    v23[0] = v29;
    v23[1] = v30;
    long long v29 = 0u;
    long long v30 = 0u;
    v24[0] = v31[0];
    *(_OWORD *)((char *)v24 + 11) = *(_OWORD *)((char *)v31 + 11);
    long long v10 = v32;
    long long v32 = 0u;
    uint64_t v22 = v8;
    v24[2] = v10;
    v24[3] = v33;
    v24[4] = v34;
    LODWORD(v33) = v33 & 0xFFFFFFFE;
    uint64_t v25 = v35;
    uint64_t v11 = v36;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v26 = v11;
    char v27 = v37;
    char v28 = 1;
    WebCore::Cookie::~Cookie((WebCore::Cookie *)&v29, v9);
    uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (!(_BYTE)v13)
    {
LABEL_8:
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v23, v13);
      return;
    }
    *(void *)&long long v29 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v29 + 1, a1);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9FB2F8;
    v14[1] = v29;
    uint64_t v15 = *((void *)&v29 + 1);
    *((void *)&v29 + 1) = 0;
    v14[2] = v15;
    uint64_t v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v29 + 1);
    if (v28)
    {
      WebKit::WebCookieManager::deleteCookie(a3, v22, (uint64_t)v23, (uint64_t *)&v21);
      uint64_t v16 = (uint64_t)v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      if (v28) {
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
  }
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookiesModifiedSince,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v7 && (uint64_t v8 = v6, IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2), v9))
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v11)
    {
      uint64_t v17 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v12 = &unk_1EE9FB320;
      v12[1] = v17;
      uint64_t v13 = v18;
      uint64_t v18 = 0;
      uint64_t v19 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      WebKit::WebCookieManager::deleteAllCookiesModifiedSince(a3, v8, (uint64_t *)&v19);
      uint64_t result = (uint64_t)v19;
      uint64_t v19 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v14 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v16();
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>>((uint64_t)&v13, a2);
  if (v15)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EE9FB348;
      v8[1] = v10;
      char v9 = v11;
      char v11 = 0;
      uint64_t v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(a3, v13, v14, (uint64_t *)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9FB370;
      v10[1] = v12;
      char v11 = v13;
      unint64_t v13 = 0;
      unsigned __int8 v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebCookieManager::getHTTPCookieAcceptPolicy(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      unsigned __int8 v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB1E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB1E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3235;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3231;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3229;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3236;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3237;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB2A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB2A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3232;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB2D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB2D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3233;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB2F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB2F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3230;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB320;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB320;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3228;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = result, result = IPC::Decoder::decode<WebCore::HTTPCookieAcceptPolicy>(a2),
                     (unsigned __int16)result > 0xFFu))
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = result;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v7;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB348;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB348;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebCookieManager *,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebCookieManager::*)::{lambda(Messages::WebCookieManager::SetHTTPCookieAcceptPolicy &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebCookieManager *,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebCookieManager::*)::{lambda(Messages::WebCookieManager::SetHTTPCookieAcceptPolicy &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3238;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FB370;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FB370;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3234;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0xA3u, *((void *)this + 5));
  uint64_t v3 = (unsigned int **)*((void *)this + 8);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 6);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v2);
  }
  char v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v2);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider((WebKit::WebDeviceOrientationUpdateProvider *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::WebDeviceOrientationUpdateProvider::startUpdatingDeviceOrientation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a1 + 48);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 48)))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v7 = v6 + 16;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
        uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v10 = 1592;
        *((void *)v10 + 1) = v9;
        *((void *)v10 + 66) = (char *)v10 + 16;
        *((void *)v10 + 67) = 512;
        *((void *)v10 + 68) = 0;
        *((void *)v10 + 70) = 0;
        *((void *)v10 + 69) = 0;
        IPC::Encoder::encodeHeader(v10);
        v16[0] = v10;
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, v16, 0);
        uint64_t v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v14, v15);
        }
      }
    }
  }
  return WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>((uint64_t)v16, v4, a2);
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6 = a2[3];
  unsigned int v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a2;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a2;
        if (*(void *)a2) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a2;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
          uint64_t v8 = *(void *)a2;
          a2[2] = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        a2[2] = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          a2[3] = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    a2[2] = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  BOOL v20 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  uint64_t v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v23, a1);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(unsigned int *result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v4 = result[3];
  unsigned int v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)result;
    if (*(void *)result)
    {
      int v7 = *(_DWORD *)(v6 - 4);
      if (!v7) {
        goto LABEL_22;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t result = *(unsigned int **)(v6 + 8 * v9);
        if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
          *(void *)(v6 + 8 * v9) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)v3;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v11 = *(void *)v3;
        if (*(void *)v3) {
          int v12 = *(_DWORD *)(v11 - 12);
        }
        else {
          int v12 = 0;
        }
        *(_DWORD *)(v11 - 12) = v12 - v8;
        uint64_t v6 = *(void *)v3;
      }
      if (v6)
      {
        unsigned int v13 = *(_DWORD *)(v6 - 4);
        if (v13 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v13)
        {
          uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
          uint64_t v6 = *(void *)v3;
          v3[2] = 0;
          if (!v6)
          {
            unsigned int v15 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        v3[2] = 0;
LABEL_25:
        unsigned int v15 = *(_DWORD *)(v6 - 12);
        int v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
        {
LABEL_27:
          v3[3] = 2 * v16;
          goto LABEL_28;
        }
LABEL_26:
        int v16 = v15;
        goto LABEL_27;
      }
    }
    unsigned int v15 = 0;
    v3[2] = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v17 = a2[1];
  if (v17 && *(void *)(v17 + 8))
  {
    uint64_t v19 = a2[1];
    uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v3, &v19);
    if (*(void *)v3)
    {
      uint64_t v18 = *(void *)v3 + 8 * *(unsigned int *)(*(void *)v3 - 4);
      if ((unsigned int *)v18 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v18 = 0;
    }
    if ((unsigned int *)v18 != result) {
      return (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v3, (unsigned int **)result);
    }
  }
  return result;
}

unsigned int *WebKit::WebDeviceOrientationUpdateProvider::startUpdatingDeviceMotion(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (_DWORD *)(a1 + 64);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 64)))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v7 = v6 + 16;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
        uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v10 = 1591;
        *((void *)v10 + 1) = v9;
        *((void *)v10 + 66) = (char *)v10 + 16;
        *((void *)v10 + 67) = 512;
        *((void *)v10 + 68) = 0;
        *((void *)v10 + 70) = 0;
        *((void *)v10 + 69) = 0;
        IPC::Encoder::encodeHeader(v10);
        v16[0] = v10;
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, v16, 0);
        int v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v14, v15);
        }
      }
    }
  }
  return WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>((uint64_t)v16, v4, a2);
}

uint64_t WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged(WebKit::WebDeviceOrientationUpdateProvider *this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int *)&v16, (_DWORD *)this + 12);
  if (HIDWORD(v17))
  {
    uint64_t v12 = v16;
    uint64_t v13 = 8 * HIDWORD(v17);
    do
    {
      if (*(void *)v12)
      {
        uint64_t v14 = *(void *)(*(void *)v12 + 8);
        if (v14) {
          (*(void (**)(uint64_t, double, double, double, double, double))(*(void *)v14 + 16))(v14, a2, a3, a4, a5, a6);
        }
      }
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v11);
}

uint64_t WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int *)&v30, (_DWORD *)(a1 + 64));
  if (HIDWORD(v31))
  {
    uint64_t v26 = v30;
    uint64_t v27 = 8 * HIDWORD(v31);
    do
    {
      if (*(void *)v26)
      {
        uint64_t v28 = *(void *)(*(void *)v26 + 8);
        if (v28) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double, double))(*(void *)v28 + 24))(v28, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
        }
      }
      v26 += 8;
      v27 -= 8;
    }
    while (v27);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v25);
}

unsigned int *WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(unsigned int *result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_22;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  if (!v5) {
    goto LABEL_21;
  }
  int v6 = 0;
  unsigned int v7 = v5 - 1;
  do
  {
    uint64_t v8 = v7;
    uint64_t result = *(unsigned int **)(v4 + 8 * v7);
    if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
    {
      *(void *)(v4 + 8 * v7) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      *(void *)(v4 + 8 * v7) = -1;
      ++v6;
    }
    --v7;
  }
  while (v8);
  uint64_t v4 = *(void *)a2;
  if (v6)
  {
    *(_DWORD *)(v4 - 16) += v6;
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      int v10 = *(_DWORD *)(v9 - 12);
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)(v9 - 12) = v10 - v6;
    uint64_t v4 = *(void *)a2;
  }
  if (!v4)
  {
LABEL_22:
    a2[2] = 0;
    goto LABEL_23;
  }
  unsigned int v11 = *(_DWORD *)(v4 - 4);
  if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
  {
    uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    uint64_t v4 = *(void *)a2;
    a2[2] = 0;
    if (v4) {
      goto LABEL_25;
    }
LABEL_23:
    a2[3] = 0;
    goto LABEL_31;
  }
LABEL_21:
  a2[2] = 0;
LABEL_25:
  unsigned int v13 = *(_DWORD *)(v4 - 12);
  if (v13 >= 0x7FFFFFFF) {
    int v14 = -2;
  }
  else {
    int v14 = 2 * v13;
  }
  a2[3] = v14;
  uint64_t v15 = *(unsigned int *)(v4 - 12);
  if (v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)(8 * v15));
    v3[2] = v15;
    *(void *)uint64_t v3 = v16;
  }
LABEL_31:
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v30, (void **)a2);
  uint64_t v17 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    uint64_t v19 = (void *)(v17 + 8 * v18);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v25 = a2;
  uint64_t v26 = v19;
  uint64_t v27 = v19;
  uint64_t v28 = v19;
  uint64_t v29 = v17 + 8 * v18;
  uint64_t result = (unsigned int *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
  for (i = v31; i != v26; ++*(_DWORD *)(v30 + 8))
  {
    uint64_t v21 = *(void *)(*i + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v21 + 8), v21);
    uint64_t v22 = *(atomic_uint **)(v21 + 8);
    if (v22)
    {
      atomic_fetch_add(v22, 1u);
      i = v31;
    }
    uint64_t v23 = v3[3];
    *(void *)(*(void *)v3 + 8 * v23) = v22;
    v3[3] = v23 + 1;
    uint64_t v24 = i + 1;
    uint64_t v31 = i + 1;
    if (i + 1 != v32)
    {
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        if (++v24 == v32)
        {
          uint64_t v24 = v32;
          break;
        }
      }
      uint64_t v31 = v24;
    }
    uint64_t result = (unsigned int *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v30);
    i = v31;
  }
  return result;
}

_DWORD *WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage(_DWORD *this, IPC::Connection *a2, IPC::Decoder *a3, __n128 a4, __n128 a5, __n128 a6)
{
  unsigned int v7 = this;
  ++this[2];
  int v8 = *((unsigned __int16 *)a3 + 25);
  if (v8 != 1595)
  {
    if (v8 != 1596) {
      goto LABEL_69;
    }
    unint64_t v9 = *((void *)a3 + 1);
    uint64_t v10 = *(void *)a3;
    unint64_t v11 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
    if (v9 < v11 || v9 - v11 <= 7) {
      goto LABEL_76;
    }
    unsigned int v13 = (unint64_t *)(v10 + v11);
    *((void *)a3 + 2) = v13 + 1;
    if (v10)
    {
      unint64_t v14 = (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
      if (v9 >= v14 && v9 - v14 > 7)
      {
        a4.n128_u64[0] = *v13;
        *((void *)a3 + 2) = (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
        a5.n128_u64[0] = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v16 = (((((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
        if (v9 >= v16 && v9 - v16 > 7)
        {
          uint64_t v18 = (unint64_t *)(v10 + v16);
          *((void *)a3 + 2) = v18 + 1;
          a6.n128_u64[0] = *v18;
          unint64_t v19 = (((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
          if (v9 >= v19 && v9 - v19 > 7)
          {
            uint64_t v21 = (double *)(v10 + v19);
            *((void *)a3 + 2) = v21 + 1;
            unint64_t v22 = (((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
            if (v9 >= v22 && v9 - v22 > 7)
            {
              uint64_t v24 = (double *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
              double v25 = *v24;
              double v26 = *v21;
              *((void *)a3 + 2) = v24 + 1;
              this = (_DWORD *)(*(uint64_t (**)(_DWORD *, __n128, __n128, __n128, double, double))(*(void *)this + 48))(this, a4, a5, a6, v26, v25);
              goto LABEL_69;
            }
          }
        }
      }
LABEL_67:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v50 = (void *)*((void *)a3 + 3);
      if (!v50) {
        goto LABEL_68;
      }
LABEL_81:
      if (v9)
      {
        (*(void (**)(void *))(*v50 + 16))(v50);
        uint64_t v58 = *(void *)a3;
        uint64_t v59 = *((void *)a3 + 1);
        uint64_t v60 = *((void *)a3 + 3);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        if (v60)
        {
          if (v59) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
          }
        }
      }
      goto LABEL_68;
    }
LABEL_87:
    unint64_t v54 = v9;
    uint64_t v55 = v10;
LABEL_77:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v57 = *((void *)a3 + 3);
    if (v57 && v54) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
    }
    goto LABEL_68;
  }
  unint64_t v9 = *((void *)a3 + 1);
  uint64_t v10 = *(void *)a3;
  unint64_t v27 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
  if (v9 < v27 || v9 - v27 <= 7)
  {
LABEL_76:
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v56 = *((void *)a3 + 3);
    if (v56)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        uint64_t v55 = *(void *)a3;
        unint64_t v54 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v54 = 0;
        uint64_t v55 = 0;
      }
    }
    goto LABEL_77;
  }
  uint64_t v29 = (double *)(v10 + v27);
  *((void *)a3 + 2) = v29 + 1;
  if (!v10) {
    goto LABEL_87;
  }
  unint64_t v30 = (((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v9 < v30 || v9 - v30 <= 7) {
    goto LABEL_67;
  }
  double v32 = *v29;
  *((void *)a3 + 2) = (((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  double v33 = *(double *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (((((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v9 < v34 || v9 - v34 <= 7) {
    goto LABEL_67;
  }
  uint64_t v36 = (double *)(v10 + v34);
  *((void *)a3 + 2) = v36 + 1;
  double v37 = *v36;
  unint64_t v38 = (((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v9 < v38 || v9 - v38 <= 7) {
    goto LABEL_67;
  }
  int v40 = (double *)(v10 + v38);
  *((void *)a3 + 2) = v40 + 1;
  double v41 = *v40;
  unint64_t v42 = (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v9 < v42 || v9 - v42 <= 7) {
    goto LABEL_67;
  }
  char v44 = (double *)(v10 + v42);
  *((void *)a3 + 2) = v44 + 1;
  double v45 = *v44;
  unint64_t v46 = (((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8) - v10;
  if (v9 < v46 || v9 - v46 <= 7) {
    goto LABEL_67;
  }
  uint64_t v48 = (double *)(v10 + v46);
  double v49 = *v48;
  *((void *)a3 + 2) = v48 + 1;
  IPC::Decoder::decode<std::optional<double>>(a3, v61);
  if (v62)
  {
    IPC::Decoder::decode<std::optional<double>>(a3, v63);
    if (v64)
    {
      uint64_t v50 = IPC::Decoder::decode<std::optional<double>>(a3, v65);
      if (v66)
      {
        if (v62 && v64)
        {
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *, void, void, void, void, void, void, double, double, double, double, double, double))(*(void *)v7 + 56))(v7, v61[0], v61[1], v63[0], v63[1], v65[0], v65[1], v32, v33, v37, v41, v45, v49);
          goto LABEL_69;
        }
        __break(1u);
        goto LABEL_81;
      }
    }
  }
LABEL_68:
  uint64_t v51 = *(void *)a3;
  uint64_t v52 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  this = (_DWORD *)*((void *)a3 + 3);
  if (this && v52) {
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)this + 16))(this, v51);
  }
LABEL_69:
  if (v7[2] == 1)
  {
    char v53 = *(uint64_t (**)(_DWORD *))(*(void *)v7 + 8);
    return (_DWORD *)v53(v7);
  }
  else
  {
    --v7[2];
  }
  return this;
}

_DWORD *non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProvider *this, IPC::Connection *a2, IPC::Decoder *a3, __n128 a4, __n128 a5, __n128 a6)
{
  return WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage((_DWORD *)this - 4, a2, a3, a4, a5, a6);
}

void WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  *(void *)this = &unk_1EE9FB428;
  *((void *)this + 2) = &unk_1EE9FB460;
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 4) + 256) + 152, 0xA4u, *(void *)(*(void *)(*((void *)this + 4) + 32) + 1928));
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy((WebKit::WebDeviceOrientationUpdateProviderProxy *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceOrientation(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4FB61D8] sharedManager];

  return [v2 addOrientationClient:this];
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceOrientation(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4FB61D8] sharedManager];

  return [v2 removeOrientationClient:this];
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceMotion(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4FB61D8] sharedManager];

  return [v2 addMotionClient:this];
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceMotion(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4FB61D8] sharedManager];

  return [v2 removeMotionClient:this];
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProviderProxy::orientationChanged(WebKit::WebDeviceOrientationUpdateProviderProxy *this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11 = *((void *)this + 4);
  uint64_t v12 = *(void *)(v11 + 256);
  uint64_t v13 = *(void *)(*(void *)(v11 + 32) + 1928);
  unint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v14 = 1596;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  unint64_t v22 = v14;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a3);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a4);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a5);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a6);
  LOBYTE(v20) = 0;
  char v21 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v22, 0, (uint64_t)&v20, 1);
  if (v21)
  {
    uint64_t v16 = v20;
    uint64_t v20 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  uint64_t result = v22;
  unint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

void sub_199263BFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProviderProxy::motionChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  v30[0] = a2;
  v30[1] = a3;
  v29[0] = a4;
  v29[1] = a5;
  v28[0] = a6;
  v28[1] = a7;
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(v19 + 256);
  uint64_t v21 = *(void *)(*(void *)(v19 + 32) + 1928);
  unint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v22 = 1595;
  *((void *)v22 + 1) = v21;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  double v33 = v22;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a8);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a9);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a10);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a11);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a12);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, a13);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v22, (uint64_t)v30);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v22, (uint64_t)v29);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v22, (uint64_t)v28);
  LOBYTE(v31) = 0;
  char v32 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v33, 0, (uint64_t)&v31, 1);
  if (v32)
  {
    uint64_t v24 = v31;
    uint64_t v31 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  uint64_t result = v33;
  double v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

void sub_199263DF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a17 && a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a18)
  {
    IPC::Encoder::~Encoder(a18, a2);
    WTF::fastFree(v19, v20);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebDeviceOrientationUpdateProviderProxy *WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProviderProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x637:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceMotion(this);
      break;
    case 0x638:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceOrientation(this);
      break;
    case 0x639:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceMotion(this);
      break;
    case 0x63A:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceOrientation(this);
      break;
    default:
      return this;
  }
  return this;
}

WebKit::WebDeviceOrientationUpdateProviderProxy *non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProviderProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage((WebKit::WebDeviceOrientationUpdateProviderProxy *)((char *)this - 16), a2, a3);
}

void sub_199263F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19926438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v24);

  _Unwind_Resume(a1);
}

void sub_199264BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45,uint64_t a46,WTF::StringImpl *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,WTF::StringImpl *a53,char a54)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v58);
  if (a32 && a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, v60);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a30 && a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, v60);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4) {
      WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct(*(void *)a1, *(void *)a1 + 176 * v4);
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v5 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v5;
    LODWORD(v5) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v5;
    LODWORD(v5) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v5;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void WebKit::WebExtensionAction::closePopup(WebKit::WebExtensionAction *this)
{
  uint64_t v2 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Popup closed", v11, 2u);
  }
  *((unsigned char *)this + 180) &= 0xFCu;
  uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 72);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 - 8));
      *(unsigned char *)(v6 + 161) = 0;
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
  }
  unsigned int v7 = (void *)*((void *)this + 9);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v7);
  [(id)objc_claimAutoreleasedReturnValue() _close];

  int v8 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    CFRelease(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 8);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v9);
  [(id)objc_claimAutoreleasedReturnValue() dismissViewControllerAnimated:1 completion:0];

  uint64_t v10 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v10) {
    CFRelease(v10);
  }
}

void sub_199264FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1992650FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19926524C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1992653AC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19926551C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1992655B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)_WKWebExtensionActionWebView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19926569C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1992656FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199265920(_Unwind_Exception *exception_object)
{
}

void sub_199265BB4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  CFRelease(*(CFTypeRef *)(v4 - 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAction::popupWebView(WebKit::WebExtensionAction *this)
{
  if (WebKit::WebExtensionAction::presentsPopup(this)
    && (uint64_t v2 = *((void *)this + 3)) != 0
    && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v4 = (void *)*((void *)this + 9);
    if (v4)
    {
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*((id *)this + 9));
      objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v6 = WebKit::WebExtensionContext::webViewConfiguration(v3 - 16, 3);
      [v6 setSuppressesIncrementalRendering:1];
      unsigned int v7 = [[_WKWebExtensionActionWebViewDelegate alloc] initWithWebExtensionAction:this];
      int v8 = v7;
      if (v7) {
        CFRetain(v7);
      }

      unint64_t v9 = (const void *)*((void *)this + 10);
      *((void *)this + 10) = v8;
      if (v9) {
        CFRelease(v9);
      }

      uint64_t v10 = [_WKWebExtensionActionWebView alloc];
      uint64_t v11 = -[_WKWebExtensionActionWebView initWithFrame:configuration:webExtensionAction:](v10, "initWithFrame:configuration:webExtensionAction:", v6, this, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
      uint64_t v12 = v11;
      if (v11) {
        CFRetain(v11);
      }

      uint64_t v13 = (const void *)*((void *)this + 9);
      *((void *)this + 9) = v12;
      if (v13) {
        CFRelease(v13);
      }

      unint64_t v14 = (void *)*((void *)this + 10);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v14);
      objc_claimAutoreleasedReturnValue();
      uint64_t v15 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v15);
      [(id)objc_claimAutoreleasedReturnValue() setNavigationDelegate:v14];

      uint64_t v16 = (void *)*((void *)this + 10);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v16);
      objc_claimAutoreleasedReturnValue();
      uint64_t v17 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v17);
      [(id)objc_claimAutoreleasedReturnValue() setUIDelegate:v16];

      uint64_t v18 = *(void *)(*((void *)this + 3) + 8);
      if (v18) {
        uint64_t v19 = v18 - 16;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(unsigned __int8 *)(v19 + 144);
      uint64_t v21 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v21);
      [(id)objc_claimAutoreleasedReturnValue() setInspectable:v20];

      uint64_t v22 = *(void *)(*((void *)this + 3) + 8);
      if (v22) {
        uint64_t v23 = v22 - 16;
      }
      else {
        uint64_t v23 = 0;
      }
      WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(v23 + 64));
      uint64_t v24 = WTF::RetainPtr<__IOHIDDevice *>::get();
      double v25 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v25);
      [(id)objc_claimAutoreleasedReturnValue() setAccessibilityLabel:v24];

      double v26 = WebKit::WebExtensionAction::popupWebViewInspectionName(this);
      unint64_t v27 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v27);
      [(id)objc_claimAutoreleasedReturnValue() _setRemoteInspectionNameOverride:v26];

      uint64_t v28 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v28);
      [(id)objc_claimAutoreleasedReturnValue() _overrideViewportWithArguments:&unk_1EEA532A0];

      uint64_t v29 = *((void *)this + 3);
      if (v29)
      {
        uint64_t v30 = *(void *)(v29 + 8);
        if (v30) {
          uint64_t v31 = (WebKit::WebExtensionContext *)(v30 - 16);
        }
        else {
          uint64_t v31 = 0;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      char v32 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v32);
      [(id)objc_claimAutoreleasedReturnValue() _page];
      WebKit::WebExtensionContext::addPopupPage(v31, v46, (CFTypeRef *)this);

      uint64_t v33 = *((void *)this + 3);
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 8);
        if (v34) {
          uint64_t v35 = v34 - 16;
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      WebKit::WebExtensionAction::popupPath(this, &v45);
      MEMORY[0x19972E8B0](&v46, v35 + 80, &v45, 0);
      double v37 = v45;
      double v45 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v36);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      unint64_t v38 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v38);
      objc_claimAutoreleasedReturnValue();
      char v39 = (void *)MEMORY[0x1E4F18DA8];
      int v40 = WTF::URL::operator NSURL *();
      double v41 = objc_msgSend(v39, "requestWithURL:", v40, v45);
      id v42 = (id)[v38 loadRequest:v41];

      uint64_t v4 = (void *)*((void *)this + 9);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v4);
      objc_claimAutoreleasedReturnValue();
      char v44 = v46;
      unint64_t v46 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v43);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_199265FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_199266134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<UISheetPresentationController>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1992661B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199266264(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1992663D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1992665EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199266708(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_199266798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAction *WebKit::WebExtensionAction::WebExtensionAction(WebKit::WebExtensionAction *this, WebKit::WebExtensionContext *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9FB498;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 3) = v4;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 56) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 120) = *MEMORY[0x1E4F1DB30];
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *((unsigned char *)this + 180) &= 0xFCu;
  return this;
}

void sub_199266914(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAction::WebExtensionAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9FB498;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v6 = *(atomic_uint **)(a2 + 24);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  unsigned int v7 = *(atomic_uint **)(a3 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = *MEMORY[0x1E4F1DB30];
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(unsigned char *)(a1 + 180) &= 0xFCu;
  return a1;
}

void sub_199266A38(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(unsigned int **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAction::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v2 = v3 - 16;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v4 = v5 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  if (v2 != v4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(a2 + 40))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    uint64_t v9 = *(void *)(a2 + 32);
    if (v9) {
      uint64_t v9 = *(void *)(v9 + 8);
    }
    if (v8 == v9) {
      goto LABEL_23;
    }
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) != 0) != (*(unsigned char *)(a2 + 40) != 0)) {
    return 0;
  }
LABEL_23:
  BOOL v6 = (*(unsigned char *)(a1 + 56) != 0) == (*(unsigned char *)(a2 + 56) != 0);
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    uint64_t v11 = *(void *)(a2 + 48);
    if (v11) {
      uint64_t v11 = *(void *)(v11 + 8);
    }
    return v10 == v11;
  }
  return v6;
}

void WebKit::WebExtensionAction::clearCustomizations(WebKit::WebExtensionAction *this)
{
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 17) = 0;
    CFRelease(v2);
    uint64_t v3 = (const void *)*((void *)this + 18);
  }
  else
  {
    uint64_t v3 = (const void *)*((void *)this + 18);
    if (!v3
      && !*((void *)this + 11)
      && !*((void *)this + 19)
      && !*((void *)this + 20)
      && !*((unsigned char *)this + 177)
      && !*((void *)this + 21))
    {
      return;
    }
    *((void *)this + 17) = 0;
  }
  *((void *)this + 18) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
  WTF::String::operator=((uint64_t *)this + 11, MEMORY[0x1E4F30978]);
  WTF::String::operator=((uint64_t *)this + 19, v4);
  WTF::String::operator=((uint64_t *)this + 20, v4);
  if (*((unsigned char *)this + 177)) {
    *((unsigned char *)this + 177) = 0;
  }
  *((void *)this + 21) = 0;
  WebKit::WebExtensionAction::clearIconCache(this);

  WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
}

const void **WTF::RetainPtr<NSArray>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_199266CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 WebKit::WebExtensionAction::clearIconCache(WebKit::WebExtensionAction *this)
{
  uint64_t v2 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    CFRelease(v2);
  }
  id v3 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    CFRelease(v3);
  }
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  *(_OWORD *)((char *)this + 120) = *MEMORY[0x1E4F1DB30];
  return result;
}

void WebKit::WebExtensionAction::propertiesDidChange(CFTypeRef *this)
{
  CFRetain(this[1]);
  uint64_t v2 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *uint64_t v2 = MEMORY[0x1E4F14398];
  v2[1] = 50331650;
  v2[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void *)#1}::__invoke;
  v2[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::descriptor;
  v2[4] = this;
  v2[5] = this;
  aBlock = _Block_copy(v2);

  id v3 = _Block_copy(aBlock);
  dispatch_async(MEMORY[0x1E4F14428], v3);
}

void sub_199266DDC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAction::fallbackAction(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (!*((unsigned char *)this + 40))
  {
    if (*((unsigned char *)this + 56)) {
      goto LABEL_12;
    }
    return 0;
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(WebKit::WebExtensionTab **)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)v4;
      WebKit::WebExtensionTab::window(v4, &v9);
      uint64_t v5 = (WebKit::WebExtensionContext *)(v2 - 16);
      BOOL v6 = v9;
      WebKit::WebExtensionContext::getAction(v5, v9, &v10);
      uint64_t v7 = v10;
      if (v10) {
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v6);
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v4);
      return v7;
    }
  }
LABEL_12:

  return WebKit::WebExtensionContext::defaultAction((WebKit::WebExtensionContext *)(v2 - 16));
}

void sub_199266ED0(_Unwind_Exception *a1)
{
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v2);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAction::icon(WebKit::WebExtensionAction *this, CGSize a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2 || !*(void *)(v2 + 8))
  {
    uint64_t v9 = 0;
    goto LABEL_30;
  }
  double height = a2.height;
  double width = a2.width;
  if (!*((void *)this + 18) && !*((void *)this + 17))
  {
LABEL_28:
    uint64_t v21 = WebKit::WebExtensionAction::fallbackAction(this);
    if (v21)
    {
      uint64_t v22 = (CFTypeRef *)v21;
      CFRetain(*(CFTypeRef *)(v21 + 8));
      v28.double width = width;
      v28.double height = height;
      uint64_t v9 = WebKit::WebExtensionAction::icon((WebKit::WebExtensionAction *)v22, v28);
      CFRelease(v22[1]);
    }
    else
    {
      uint64_t v24 = *(void *)(*((void *)this + 3) + 8);
      if (v24) {
        uint64_t v25 = v24 - 16;
      }
      else {
        uint64_t v25 = 0;
      }
      v29.double width = width;
      v29.double height = height;
      uint64_t v9 = WebKit::WebExtension::actionIcon(*(WebKit::WebExtension **)(v25 + 64), v29);
    }
    goto LABEL_30;
  }
  BOOL v6 = WebKit::availableScreenScales(this);
  uint64_t v7 = WTF::RetainPtr<NSSet>::get((id *)this + 14);
  char v8 = [v6 isEqualToSet:v7];

  if ((v8 & 1) == 0) {
    WebKit::WebExtensionAction::clearIconCache(this);
  }
  if (!*((void *)this + 13) || width != *((double *)this + 15) || height != *((double *)this + 16))
  {
    if (*((void *)this + 18))
    {
      uint64_t v10 = *(void *)(*((void *)this + 3) + 8);
      if (v10) {
        uint64_t v11 = v10 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void *)(v11 + 64);
      uint64_t v13 = std::to_address[abi:sn180100]<char const>();
      unint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v14 = &unk_1EE9FB5B8;
      v14[1] = this;
      double v26 = v14;
      uint64_t v15 = WebKit::WebExtension::bestImageForIconVariants(v12, v13, (uint64_t)&v26, width, height);
    }
    else
    {
      if (!*((void *)this + 17))
      {
LABEL_27:
        WebKit::WebExtensionAction::clearIconCache(this);

        goto LABEL_28;
      }
      uint64_t v16 = *(void *)(*((void *)this + 3) + 8);
      if (v16) {
        uint64_t v17 = v16 - 16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void *)(v17 + 64);
      uint64_t v13 = WTF::RetainPtr<NSSet>::get((id *)this + 17);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v19 = &unk_1EE9FB5E0;
      v19[1] = this;
      double v26 = v19;
      uint64_t v15 = WebKit::WebExtension::bestImageInIconsDictionary(v18, v13, (uint64_t)&v26, width, height);
    }
    uint64_t v9 = (void *)v15;
    uint64_t v20 = v26;
    double v26 = 0;
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }

    if (v9)
    {
      WTF::RetainPtr<UIImage>::operator=((const void **)this + 13, v9);
      WTF::RetainPtr<NSSet>::operator=((const void **)this + 14, v6);
      *((double *)this + 15) = width;
      *((double *)this + 16) = height;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  uint64_t v9 = WTF::RetainPtr<NSSet>::get((id *)this + 13);
LABEL_26:

LABEL_30:

  return v9;
}

void sub_1992671C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<UIImage>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_199267298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSSet>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_19926730C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setIcons(id *this, NSDictionary *a2)
{
  id v3 = a2;
  uint64_t v4 = (const void **)(this + 17);
  if (this[17])
  {
    uint64_t v5 = WTF::RetainPtr<NSSet>::get(this + 17);
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v5);
  }
  else
  {
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, MEMORY[0x1E4F1CC08]);
  }
  BOOL v6 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  uint64_t v7 = v6;
  if (v3) {
    char v8 = v3;
  }
  else {
    char v8 = (NSDictionary *)MEMORY[0x1E4F1CC08];
  }
  char v9 = [v6 isEqualToDictionary:v8];

  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  if ((v9 & 1) == 0)
  {
    if ([(NSDictionary *)v3 count]) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = 0;
    }
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v11);
    uint64_t v12 = *v4;
    *uint64_t v4 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
    id v13 = this[18];
    this[18] = 0;
    if (v13) {
      CFRelease(v13);
    }
    WebKit::WebExtensionAction::clearIconCache((WebKit::WebExtensionAction *)this);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
  }
}

void sub_19926743C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setIconVariants(WebKit::WebExtensionAction *this, NSArray *a2)
{
  id v3 = a2;
  uint64_t v4 = (NSArray *)MEMORY[0x1E4F1CBF0];
  if (*((void *)this + 18))
  {
    WTF::RetainPtr<NSArray>::RetainPtr(&cf);
  }
  else
  {
    CFTypeRef cf = (CFTypeRef)MEMORY[0x1E4F1CBF0];
    CFRetain(MEMORY[0x1E4F1CBF0]);
  }
  uint64_t v5 = std::to_address[abi:sn180100]<char const>();
  BOOL v6 = v5;
  if (v3) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  char v8 = [v5 isEqualToArray:v7];

  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9)
  {
    CFRelease(v9);
    if (v8) {
      goto LABEL_15;
    }
  }
  else if (v8)
  {
    goto LABEL_15;
  }
  if ([(NSArray *)v3 count]) {
    CFTypeRef v10 = v3;
  }
  else {
    CFTypeRef v10 = 0;
  }
  WTF::RetainPtr<NSArray>::operator=((const void **)this + 18, v10);
  uint64_t v11 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v11) {
    CFRelease(v11);
  }
  WebKit::WebExtensionAction::clearIconCache(this);
  WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
LABEL_15:
}

void sub_199267570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<NSArray>::RetainPtr(void *a1)
{
  std::to_address[abi:sn180100]<char const>();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = v2;
  *a1 = v2;
  if (v2) {
    CFRetain(v2);
  }

  return a1;
}

void sub_199267604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::popupPath(WebKit::WebExtensionAction *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3 || !*(void *)(v3 + 8))
  {
    uint64_t v5 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (!*MEMORY[0x1E4F30980])
    {
LABEL_10:
      *a2 = v5;
      return;
    }
LABEL_9:
    *v5 += 2;
    goto LABEL_10;
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 11);
  if (v5) {
    goto LABEL_9;
  }
  uint64_t v6 = WebKit::WebExtensionAction::fallbackAction(this);
  if (v6)
  {
    uint64_t v7 = (WebKit::WebExtensionAction *)v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebExtensionAction::popupPath(v7);
    char v8 = (const void *)*((void *)v7 + 1);
    CFRelease(v8);
  }
  else
  {
    uint64_t v9 = *(void *)(*((void *)this + 3) + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    WebKit::WebExtension::populateActionPropertiesIfNeeded(*(WebKit::WebExtension **)(v10 + 64));
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19972EAD0](a2);
  }
}

void sub_199267738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setPopupPath(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 88);
  if ((WTF::equal(*(WTF **)(a1 + 88), *a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

__CFString *WebKit::WebExtensionAction::popupWebViewInspectionName(WebKit::WebExtensionAction *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2 && *(_DWORD *)(v2 + 4)) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(v4 + 64));
  WTF::RetainPtr<__IOHIDDevice *>::get();
  WebCore::formatLocalizedString((uint64_t *)&v15, (WebCore *)@"%@ — Extension Popup Page", v6, v5);
  char v8 = v15;
  uint64_t v15 = 0;
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      id v11 = v15;
      uint64_t v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
    char v8 = (WTF::StringImpl *)*((void *)this + 12);
  }
  if (v8) {
LABEL_15:
  }
    uint64_t v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else {
    uint64_t v12 = &stru_1EEA10550;
  }
  id v13 = v12;

  return v13;
}

void WebKit::WebExtensionAction::setPopupWebViewInspectionName(WebKit::WebExtensionAction *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 12, a2);
  if (*a2) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1EEA10550;
  }
  CFStringRef v6 = v4;
  uint64_t v5 = (void *)*((void *)this + 9);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v5);
  [(id)objc_claimAutoreleasedReturnValue() _setRemoteInspectionNameOverride:v6];
}

void sub_199267950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAction::popupViewController(WebKit::WebExtensionAction *this)
{
  if (WebKit::WebExtensionAction::presentsPopup(this))
  {
    uint64_t v2 = (void *)*((void *)this + 8);
    if (!v2)
    {
      uint64_t v3 = [[_WKWebExtensionActionViewController alloc] initWithWebExtensionAction:this];
      uint64_t v4 = v3;
      if (v3) {
        CFRetain(v3);
      }

      uint64_t v5 = (const void *)*((void *)this + 8);
      *((void *)this + 8) = v4;
      if (v5) {
        CFRelease(v5);
      }

      uint64_t v2 = (void *)*((void *)this + 8);
    }
    id v6 = v2;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_199267A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAction::presentsPopup(WebKit::WebExtensionAction *this)
{
  WebKit::WebExtensionAction::popupPath(this, &v6);
  uint64_t v2 = v6;
  if (!v6) {
    return 0;
  }
  int v3 = *(_DWORD *)v6;
  BOOL v4 = *((_DWORD *)v6 + 1) != 0;
  id v6 = 0;
  if (v3 == 2) {
    WTF::StringImpl::destroy(v2, v1);
  }
  else {
    *(_DWORD *)uint64_t v2 = v3 - 2;
  }
  return v4;
}

uint64_t WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && (v2 = *(void *)(v1 + 8)) != 0 && (v3 = *(void *)(v2 + 56)) != 0 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v5 = WebKit::WebExtensionController::delegate((id *)(v4 - 16));
    char v6 = objc_opt_respondsToSelector();

    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void sub_199267B10(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 - 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionController::delegate(id *this)
{
  uint64_t v1 = WebKit::WebExtensionAction::wrapper(this);
  uint64_t v2 = [v1 delegate];

  return v2;
}

void sub_199267B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::presentPopupWhenReady(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && *(void *)(v1 + 8) && (*((unsigned char *)this + 180) & 3) == 0)
  {
    char canProgrammaticallyPresentPopup = WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(this);
    uint64_t v4 = qword_1EB357DF8;
    if (canProgrammaticallyPresentPopup)
    {
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)char v6 = 0;
        _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Present popup when ready", v6, 2u);
      }
      *((unsigned char *)this + 180) |= 1u;
      id v5 = WebKit::WebExtensionAction::popupWebView(this);
    }
    else if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Delegate does not implement the webExtensionController:presentPopupForAction:forExtensionContext:completionHandler: method", buf, 2u);
    }
  }
}

void WebKit::WebExtensionAction::readyToPresentPopup(WebKit::WebExtensionAction *this)
{
  char v1 = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = v1 & 0xFE;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    int v3 = v1 & 2;
    BOOL v4 = *(void *)(v2 + 8) && v3 == 0;
    if (v4 && *((void *)this + 9))
    {
      WebKit::WebExtensionAction::setHasUnreadBadgeText(this, 0);
      *((unsigned char *)this + 180) |= 2u;
      uint64_t v6 = *(void *)(*((void *)this + 3) + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v7 + 72);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9)
        {
          CFRetain(*(CFTypeRef *)(v9 - 8));
          *(unsigned char *)(v9 + 161) = 1;
          CFRelease(*(CFTypeRef *)(v9 - 8));
        }
      }
      CFRetain(*((CFTypeRef *)this + 1));
      uint64_t v10 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      *uint64_t v10 = MEMORY[0x1E4F14398];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void *)#1}::__invoke;
      v10[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::descriptor;
      v10[4] = this;
      v10[5] = this;
      aBlock = _Block_copy(v10);

      id v11 = _Block_copy(aBlock);
      dispatch_async(MEMORY[0x1E4F14428], v11);
    }
  }
}

void sub_199267DE0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setHasUnreadBadgeText(WebKit::WebExtensionAction *this, int a2)
{
  WebKit::WebExtensionAction::badgeText(this, &v15);
  id v5 = v15;
  if (v15)
  {
    int v6 = *(_DWORD *)v15;
    int v7 = *((_DWORD *)v15 + 1);
    __int16 v8 = v7 != 0;
    if (v7) {
      int v9 = a2;
    }
    else {
      int v9 = 0;
    }
    uint64_t v15 = 0;
    int v10 = v6 - 2;
    if (v10) {
      *(_DWORD *)id v5 = v10;
    }
    else {
      WTF::StringImpl::destroy(v5, v4);
    }
    int v11 = *((unsigned __int8 *)this + 179);
    if (v7) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if ((v7 != 0) == (v11 != 0)) {
        return;
      }
    }
    else
    {
      if (*((unsigned __int8 *)this + 178) == v9) {
        return;
      }
      __int16 v8 = 1;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 179)) {
      return;
    }
    LOWORD(v9) = 0;
    __int16 v8 = 0;
  }
  *((_WORD *)this + 89) = v9 | (v8 << 8);
  uint64_t v13 = WebKit::WebExtensionAction::fallbackAction(this);
  if (v13)
  {
    unint64_t v14 = (CFTypeRef *)v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    if ((a2 & 1) == 0) {
      WebKit::WebExtensionAction::setHasUnreadBadgeText((WebKit::WebExtensionAction *)v14, 0);
    }
    CFRelease(v14[1]);
  }
  WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
}

void sub_199267EF8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::label(WebKit::WebExtensionAction *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 3);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    __int16 v8 = (_DWORD *)*((void *)a1 + 19);
    if (v8)
    {
      if (!a2 || v8[1])
      {
        *v8 += 2;
        *a3 = v8;
        return;
      }
      WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(v5 + 48));
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19972EAD0](a3);
      goto LABEL_7;
    }
    uint64_t v10 = WebKit::WebExtensionAction::fallbackAction(a1);
    if (!v10)
    {
      uint64_t v13 = *(void *)(*((void *)a1 + 3) + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      WebKit::WebExtension::populateActionPropertiesIfNeeded(*(WebKit::WebExtension **)(v14 + 64));
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = [v18 length];
      if (!a2 || v15)
      {
        MEMORY[0x19972EAD0](a3, v18);
      }
      else
      {

        uint64_t v16 = *(void *)(*((void *)a1 + 3) + 8);
        if (v16) {
          uint64_t v17 = v16 - 16;
        }
        else {
          uint64_t v17 = 0;
        }
        WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(v17 + 64));
        WTF::RetainPtr<__IOHIDDevice *>::get();
        id v18 = (id)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19972EAD0](a3);
      }
LABEL_7:

      return;
    }
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebExtensionAction::label(v11, 1);
    BOOL v12 = *(const void **)(v11 + 8);
    CFRelease(v12);
  }
  else
  {
    int v9 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v9 += 2;
    }
    *a3 = v9;
  }
}

void sub_1992680D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setLabel(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 152);
  if ((WTF::equal(*(WTF **)(a1 + 152), *a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

void WebKit::WebExtensionAction::badgeText(WebKit::WebExtensionAction *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3 || !*(void *)(v3 + 8)) {
    goto LABEL_12;
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 20);
  if (v4) {
    goto LABEL_13;
  }
  if (*((void *)this + 21))
  {
    uint64_t v5 = *((void *)this + 21);
    MEMORY[0x1F40EBA88](v5);
    return;
  }
  uint64_t v6 = WebKit::WebExtensionAction::fallbackAction(this);
  if (!v6)
  {
LABEL_12:
    uint64_t v4 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (!*MEMORY[0x1E4F30980])
    {
LABEL_14:
      *a2 = v4;
      return;
    }
LABEL_13:
    *v4 += 2;
    goto LABEL_14;
  }
  int v7 = (WebKit::WebExtensionAction *)v6;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebExtensionAction::badgeText(v7);
  __int16 v8 = (const void *)*((void *)v7 + 1);

  CFRelease(v8);
}

void sub_199268230(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setBadgeText(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 160);
  if ((WTF::equal(*(WTF **)(a1 + 160), *a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    if (*a2)
    {
      *(_WORD *)(a1 + 178) = (*((_DWORD *)*a2 + 1) != 0) | 0x100;
    }
    else if (*(unsigned char *)(a1 + 179))
    {
      *(unsigned char *)(a1 + 179) = 0;
    }
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

BOOL WebKit::WebExtensionAction::hasUnreadBadgeText(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  if (!*((unsigned char *)this + 179))
  {
    uint64_t v3 = WebKit::WebExtensionAction::fallbackAction(this);
    if (v3)
    {
      uint64_t v4 = (CFTypeRef *)v3;
      CFRetain(*(CFTypeRef *)(v3 + 8));
      uint64_t hasUnreadBadgeText = WebKit::WebExtensionAction::hasUnreadBadgeText((WebKit::WebExtensionAction *)v4);
      CFRelease(v4[1]);
      return hasUnreadBadgeText;
    }
    return 0;
  }
  return *((unsigned char *)this + 178) != 0;
}

void sub_199268358(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::incrementBlockedResourceCount(WebKit::WebExtensionAction *this, uint64_t a2)
{
  if (a2)
  {
    *((void *)this + 21) = (*((void *)this + 21) + a2) & ~((*((void *)this + 21) + a2) >> 63);
    WebKit::WebExtensionAction::badgeText(this, &v6);
    uint64_t v4 = v6;
    if (v6)
    {
      uint64_t v6 = 0;
      int v5 = *((_DWORD *)v4 + 1);
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v3);
        if (!v5) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      *(_DWORD *)v4 -= 2;
      if (v5) {
LABEL_5:
      }
        *((_WORD *)this + 89) = 257;
    }
LABEL_6:
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
  }
}

BOOL WebKit::WebExtensionAction::isEnabled(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  if (*((unsigned char *)this + 177)) {
    return *((unsigned char *)this + 176) != 0;
  }
  uint64_t v4 = WebKit::WebExtensionAction::fallbackAction(this);
  if (!v4) {
    return 1;
  }
  int v5 = (CFTypeRef *)v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t isEnabled = WebKit::WebExtensionAction::isEnabled((WebKit::WebExtensionAction *)v5);
  CFRelease(v5[1]);
  return isEnabled;
}

void sub_199268470(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setEnabled(CFTypeRef *this, __int16 a2)
{
  if ((a2 & 0xFF00) != 0 && *((unsigned char *)this + 177))
  {
    if (*((unsigned __int8 *)this + 176) == a2) {
      return;
    }
    goto LABEL_4;
  }
  if (((a2 & 0xFF00) != 0) != (*((unsigned char *)this + 177) != 0))
  {
LABEL_4:
    *((_WORD *)this + 88) = a2;
    WebKit::WebExtensionAction::propertiesDidChange(this);
  }
}

id WebKit::WebExtensionAction::platformMenuItems(WebKit::WebExtensionAction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1 || !*(void *)(v1 + 8))
  {
    int v5 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_45;
  }
  if (*((unsigned char *)this + 40) && (v3 = *((void *)this + 4)) != 0 && (uint64_t v4 = *(WebKit::WebExtensionTab **)(v3 + 8)) != 0)
  {
    ++*(_DWORD *)v4;
  }
  else if (*((unsigned char *)this + 56) && (uint64_t v6 = *((void *)this + 6)) != 0 && (v7 = *(_DWORD **)(v6 + 8)) != 0)
  {
    ++*v7;
    WebKit::WebExtensionWindow::activeTab((uint64_t)v7, 0, (uint64_t *)&v20);
    uint64_t v4 = (WebKit::WebExtensionTab *)v20;
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v7);
  }
  else
  {
    uint64_t v4 = 0;
  }
  WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)&v20);
  LOWORD(v20) = 1;
  if (v4)
  {
    *((void *)&v20 + 1) = *((void *)v4 + 2);
    char v21 = 1;
    WebKit::WebExtensionTab::url(v4, (uint64_t)v19);
  }
  else
  {
    *((void *)&v20 + 1) = 0;
    char v21 = 0;
    WTF::URL::URL((WTF::URL *)v19);
  }
  WTF::URL::operator=((uint64_t)&v22, (uint64_t)v19);
  int v9 = v19[0];
  v19[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      uint64_t v10 = v11 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  int v5 = WebKit::WebExtensionMenuItem::matchingPlatformMenuItems(v10 + 704, &v20, 6);
  uint64_t v13 = v26;
  double v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v25;
  uint64_t v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v24;
  uint64_t v24 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v23;
  uint64_t v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  if (!v17)
  {
LABEL_43:
    if (!v4) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_43;
  }
  WTF::StringImpl::destroy(v17, v12);
  if (v4) {
LABEL_44:
  }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v4);
LABEL_45:

  return v5;
}

void sub_1992686FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v35);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::~WebExtensionAction(WebKit::WebExtensionAction *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAction::~WebExtensionAction(this, a2);

  JUMPOUT(0x199740C10);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;

  *(void *)this = &unk_1EE9FB498;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (const void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7) {
    CFRelease(v7);
  }
  __int16 v8 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v8) {
    CFRelease(v8);
  }
  int v9 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v11) {
    CFRelease(v11);
  }
  BOOL v12 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13) {
    CFRelease(v13);
  }
  if (*((unsigned char *)this + 56))
  {
    uint64_t v14 = (unsigned int *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v14)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v15 = (unsigned int *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v15)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  uint64_t v16 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)111>::type()
{
  return 111;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v2 = WebKit::WebExtensionAction::wrapper(v1);
  [v3 postNotificationName:@"WKWebExtensionActionPropertiesDidChange" object:v2 userInfo:0];
}

void sub_1992688EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0>(WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0>(WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 180) & 2) == 0 && (*(unsigned char *)(v1 + 180))
  {
    if (*(void *)(v1 + 72))
    {
      uint64_t v2 = *(void *)(v1 + 24);
      if (v2)
      {
        if (*(void *)(v2 + 8))
        {
          id v3 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
          {
            int v4 = 134349056;
            uint64_t v5 = 0x406F400000000000;
            _os_log_debug_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEBUG, "Presenting popup after %{public}.0fms timeout", (uint8_t *)&v4, 0xCu);
          }
          WebKit::WebExtensionAction::readyToPresentPopup((WebKit::WebExtensionAction *)v1);
        }
      }
    }
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 || (*(unsigned char *)(v1 + 180) & 2) == 0) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 56);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    char v13 = 1;
    goto LABEL_15;
  }
  uint64_t v6 = v5 - 16;
  CFRetain(*(CFTypeRef *)(v5 - 8));
  int v7 = WebKit::WebExtensionController::delegate((id *)v6);
  if (!v7 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    char v13 = 0;
LABEL_15:
    WebKit::WebExtensionAction::closePopup((WebKit::WebExtensionAction *)v1);

    if (v13) {
      return;
    }
    goto LABEL_16;
  }
  __int16 v8 = WebKit::WebExtensionAction::wrapper((id *)v6);
  int v9 = WebKit::WebExtensionAction::wrapper((id *)v1);
  uint64_t v10 = *(void *)(v1 + 24);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      BOOL v12 = (id *)(v11 - 16);
    }
    else {
      BOOL v12 = 0;
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  uint64_t v15 = WebKit::WebExtensionAction::wrapper(v12);
  CFRetain(*(CFTypeRef *)(v1 + 8));
  uint64_t v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v16 = MEMORY[0x1E4F14398];
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void *,NSError *)#1}::__invoke;
  v16[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::descriptor;
  v16[4] = v1;
  v16[5] = v1;
  uint64_t v17 = _Block_copy(v16);

  id v18 = _Block_copy(v17);
  [v7 webExtensionController:v8 presentPopupForAction:v9 forExtensionContext:v15 completionHandler:v18];

LABEL_16:
  uint64_t v14 = *(const void **)(v6 + 8);

  CFRelease(v14);
}

void sub_199268BFC(_Unwind_Exception *a1)
{
  __int16 v8 = v7;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    WebKit::WebExtensionAction::closePopup(*(WebKit::WebExtensionAction **)(a1 + 32));
  }
}

WebKit::WebExtensionMenuItemContextParameters *WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters(WebKit::WebExtensionMenuItemContextParameters *this)
{
  *(_WORD *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 32) = 0;
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 40));
  *((void *)this + 10) = 0;
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 88));
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 128));
  *((void *)this + 21) = 0;
  *((unsigned char *)this + 176) = 0;
  return this;
}

void sub_199268D00(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = v4;
  int v7 = *v5;
  void *v5 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  __int16 v8 = *(WTF::StringImpl **)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  int v9 = *v2;
  *uint64_t v2 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WebKit::WebExtensionWindow>::deref(uint64_t result)
{
  uint64_t v1 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    objc_destroyWeak((id *)(result + 32));
    uint64_t v3 = v1[3];
    v1[3] = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1 + 1, v2);
    return WTF::fastFree((WTF *)v1, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::RefCounted<WebKit::WebExtensionTab>::deref(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v2 = *(void *)(result + 40);
    *(void *)(result + 40) = 0;
    if (v2) {
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
    objc_destroyWeak((id *)(v1 + 32));
    uint64_t v4 = *(unsigned int **)(v1 + 24);
    *(void *)(v1 + 24) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v3);
    return WTF::fastFree((WTF *)v1, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  IPC::Encoder *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x1745D18)
  {
    unsigned int v6 = 176 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(176 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0xB0;
    uint64_t *v3 = v7;
    uint64_t v8 = a2 + 176 * a3;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v10 = *v3;
      unsigned int v11 = v9;
      uint64_t v12 = *v3 + 176 * v9;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
      *(unsigned char *)(v12 + 16) = 0;
      char v13 = (void *)(v12 + 16);
      *(unsigned char *)(v12 + 56) = 0;
      uint64_t v14 = (unsigned char *)(v12 + 56);
      if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v15 = *(_DWORD **)(a2 + 16);
        if (v15) {
          *v15 += 2;
        }
        void *v13 = v15;
        uint64_t v16 = v10 + 176 * v11;
        long long v17 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(v16 + 24) = v17;
        unsigned char *v14 = 1;
      }
      uint64_t v18 = v10 + 176 * v11;
      *(unsigned char *)(v18 + 64) = 0;
      uint64_t v19 = v18 + 64;
      *(unsigned char *)(v19 + 8) = 0;
      if (*(unsigned char *)(a2 + 72))
      {
        long long v20 = *(_DWORD **)(a2 + 64);
        if (v20) {
          *v20 += 2;
        }
        *(void *)uint64_t v19 = v20;
        *(unsigned char *)(v19 + 8) = 1;
      }
      char v21 = (_OWORD *)(v10 + 176 * v11);
      long long v22 = *(_OWORD *)(a2 + 96);
      v21[5] = *(_OWORD *)(a2 + 80);
      v21[6] = v22;
      long long v23 = *(_OWORD *)(a2 + 112);
      long long v24 = *(_OWORD *)(a2 + 128);
      long long v25 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)((char *)v21 + 154) = *(_OWORD *)(a2 + 154);
      v21[8] = v24;
      v21[9] = v25;
      v21[7] = v23;
      unsigned int v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 176;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_199269024(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionAction::icon(CGSize)::$_0,void,NSError * {__strong}>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      unsigned int v6 = (const void **)(v5 - 16);
    }
    else {
      unsigned int v6 = 0;
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = v3;
  WebKit::WebExtensionContext::recordError(v6, v3);
}

void sub_199269100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionAction::icon(CGSize)::$_1,void,NSError * {__strong}>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      unsigned int v6 = (const void **)(v5 - 16);
    }
    else {
      unsigned int v6 = 0;
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = v3;
  WebKit::WebExtensionContext::recordError(v6, v3);
}

void sub_1992691A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<NSDictionary>::RetainPtr(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  *a1 = v3;
  if (v3) {
    CFRetain(v3);
  }

  return a1;
}

void sub_199269200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIAction::parseActionDetails(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _OWORD v41[2] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (_MergedGlobals_113 == 1)
  {
    uint64_t v8 = (void *)qword_1EB359F58;
  }
  else
  {
    v40[0] = @"tabId";
    v40[1] = @"windowId";
    v41[0] = objc_opt_class();
    v41[1] = objc_opt_class();
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:2];
    qword_1EB359F58 = (uint64_t)v8;
    _MergedGlobals_113 = 1;
  }
  if (!WebKit::validateDictionary(v7, @"details", 0, v8, a4)) {
    goto LABEL_15;
  }
  unsigned int v9 = [v7 objectForKeyedSubscript:@"tabId"];
  if (!v9
    || ([v7 objectForKeyedSubscript:@"windowId"],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        BOOL v11 = v10 == 0,
        v10,
        v9,
        v11))
  {
    uint64_t v14 = [v7 objectForKeyedSubscript:@"tabId"];
    uint64_t v15 = v14;
    if (!v14) {
      goto LABEL_11;
    }
    [v14 doubleValue];
    double v18 = v17;
    if (v17 == -1.0)
    {
      unint64_t v19 = -256;
      char v20 = 1;
      LOBYTE(v21) = -2;
    }
    else
    {
      LOBYTE(v21) = 0;
      char v20 = 0;
      BOOL v31 = v17 < 0.0 || ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      if (v31 && (unint64_t)(*(void *)&v17 - 1) > 0xFFFFFFFFFFFFELL)
      {
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        if (v17 < 1.84467441e19)
        {
          if (modf(v17, &v39) == 0.0)
          {
            unint64_t v37 = (unint64_t)v18;
            if ((unint64_t)v18 == -1) {
              goto LABEL_57;
            }
            LOBYTE(v21) = -2;
            if (v37 - 1 >= 0xFFFFFFFFFFFFFFFELL)
            {
              unint64_t v19 = -256;
            }
            else
            {
              unint64_t v21 = (unint64_t)v18;
              unint64_t v19 = v37 & 0xFFFFFFFFFFFFFF00;
            }
            char v20 = 1;
          }
          else
          {
            char v20 = 0;
            LOBYTE(v21) = 0;
            unint64_t v19 = 0;
          }
        }
      }
    }
    unint64_t v22 = v19 & 0xFFFFFFFFFFFFFF00 | v21;
    *(void *)a3 = v22;
    *(unsigned char *)(a3 + 8) = v20;
    if (WebKit::isValid(v22, *(void *)(a3 + 8), a4, v16))
    {
LABEL_11:

      long long v23 = [v7 objectForKeyedSubscript:@"windowId"];
      long long v24 = v23;
      if (!v23) {
        goto LABEL_29;
      }
      [v23 doubleValue];
      double v27 = v26;
      if (v26 == -1.0)
      {
        unint64_t v28 = -256;
        char v29 = 1;
        LOBYTE(v30) = -2;
        goto LABEL_28;
      }
      if (v26 == -2.0)
      {
        unint64_t v28 = -256;
        char v29 = 1;
        LOBYTE(v30) = -3;
        goto LABEL_28;
      }
      LOBYTE(v30) = 0;
      char v29 = 0;
      if ((v26 < 0.0 || ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(void *)&v26 - 1) > 0xFFFFFFFFFFFFELL)
      {
        unint64_t v28 = 0;
        goto LABEL_28;
      }
      unint64_t v28 = 0;
      if (v26 >= 1.84467441e19) {
        goto LABEL_28;
      }
      if (modf(v26, &v39) != 0.0)
      {
        char v29 = 0;
        LOBYTE(v30) = 0;
        unint64_t v28 = 0;
        goto LABEL_28;
      }
      unint64_t v38 = (unint64_t)v27;
      if ((unint64_t)v27 != -1)
      {
        LOBYTE(v30) = -2;
        if (v38 - 1 >= 0xFFFFFFFFFFFFFFFELL)
        {
          unint64_t v28 = -256;
        }
        else
        {
          unint64_t v30 = (unint64_t)v27;
          unint64_t v28 = v38 & 0xFFFFFFFFFFFFFF00;
        }
        char v29 = 1;
LABEL_28:
        unint64_t v33 = v28 & 0xFFFFFFFFFFFFFF00 | v30;
        *(void *)a2 = v33;
        *(unsigned char *)(a2 + 8) = v29;
        if (!WebKit::isValid(v33, *(void *)(a2 + 8), a4, v25))
        {
          uint64_t v13 = 0;
          goto LABEL_31;
        }
LABEL_29:
        uint64_t v13 = 1;
LABEL_31:

        goto LABEL_32;
      }
LABEL_57:
      __break(0xC471u);
      JUMPOUT(0x199269768);
    }

LABEL_15:
    uint64_t v13 = 0;
    goto LABEL_32;
  }
  WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif.isa, v12);
  uint64_t v13 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_32:

  return v13;
}

void sub_1992697F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getTitle(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  v21[0] = 0;
  v21[8] = 0;
  v20[0] = 0;
  v20[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v21, (uint64_t)v20, a4))
  {
    {
      unint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    BOOL v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)BOOL v11 = 1635;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    long long v23 = v11;
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v21);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v20);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FB608;
    v12[1] = a1;
    v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v12;
    v22[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v23, v22, 0);
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v23;
    long long v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_199269A18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setTitle(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB359F51 & 1) == 0)
  {
    v39[0] = @"title";
    qword_1EB359F60 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:1];
    byte_1EB359F51 = 1;
  }
  if ((byte_1EB359F52 & 1) == 0)
  {
    unint64_t v37 = @"title";
    double v27 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v28 = objc_opt_class();
    char v29 = objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    unint64_t v38 = v29;
    qword_1EB359F68 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];

    byte_1EB359F52 = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", (void *)qword_1EB359F60, (void *)qword_1EB359F68, a4))
  {
    v34[0] = 0;
    v34[8] = 0;
    v33[0] = 0;
    v33[8] = 0;
    if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v34, (uint64_t)v33, a4))
    {
      uint64_t v8 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
      if (*MEMORY[0x1E4F30978]) {
        *(_DWORD *)v8 += 2;
      }
      char v32 = v8;
      uint64_t v9 = WebKit::objectForKey<NSString>(v7, @"title", 0);
      if (!v9) {
        goto LABEL_15;
      }
      MEMORY[0x19972EAD0](v31, v9);
      BOOL v11 = v31[0];
      v31[0] = 0;
      uint64_t v12 = v32;
      char v32 = v11;
      if (!v12) {
        goto LABEL_15;
      }
      int v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        uint64_t v12 = v31[0];
        v31[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            unint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v30);
          }
          uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
          v31[0] = (WTF::StringImpl *)v34;
          v31[1] = (WTF::StringImpl *)v33;
          _OWORD v31[2] = (WTF::StringImpl *)&v32;
          ++*(_DWORD *)(a1 + 48);
          uint64_t v16 = *a3;
          *a3 = 0;
          uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
          double v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)double v18 = 1641;
          *((void *)v18 + 1) = v17;
          *((void *)v18 + 66) = (char *)v18 + 16;
          *((void *)v18 + 67) = 512;
          *((void *)v18 + 68) = 0;
          *((void *)v18 + 70) = 0;
          *((void *)v18 + 69) = 0;
          IPC::Encoder::encodeHeader(v18);
          uint64_t v36 = v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v18, (uint64_t *)v31);
          unint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v19 = &unk_1EE9FB650;
          v19[1] = a1;
          v19[2] = v16;
          uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          v35[0] = v19;
          v35[1] = v20;
          (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v36, v35, 0);
          uint64_t v22 = v35[0];
          v35[0] = 0;
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          long long v23 = v36;
          uint64_t v36 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v25, v26);
          }
          long long v24 = v32;
          char v32 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          goto LABEL_24;
        }
        int v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)uint64_t v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_24:
}

void sub_199269F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getBadgeText(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  v21[0] = 0;
  v21[8] = 0;
  v20[0] = 0;
  v20[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v21, (uint64_t)v20, a4))
  {
    {
      unint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    BOOL v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)BOOL v11 = 1632;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    long long v23 = v11;
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v21);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v20);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FB678;
    v12[1] = a1;
    v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v12;
    v22[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v23, v22, 0);
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v23;
    long long v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_19926A2A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setBadgeText(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB359F53 & 1) == 0)
  {
    v39[0] = @"text";
    qword_1EB359F70 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:1];
    byte_1EB359F53 = 1;
  }
  if ((byte_1EB359F54 & 1) == 0)
  {
    unint64_t v37 = @"text";
    double v27 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v28 = objc_opt_class();
    char v29 = objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    unint64_t v38 = v29;
    qword_1EB359F78 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];

    byte_1EB359F54 = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", (void *)qword_1EB359F70, (void *)qword_1EB359F78, a4))
  {
    v34[0] = 0;
    v34[8] = 0;
    v33[0] = 0;
    v33[8] = 0;
    if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v34, (uint64_t)v33, a4))
    {
      uint64_t v8 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
      if (*MEMORY[0x1E4F30978]) {
        *(_DWORD *)v8 += 2;
      }
      char v32 = v8;
      uint64_t v9 = WebKit::objectForKey<NSString>(v7, @"text", 0);
      if (!v9) {
        goto LABEL_15;
      }
      MEMORY[0x19972EAD0](v31, v9);
      BOOL v11 = v31[0];
      v31[0] = 0;
      uint64_t v12 = v32;
      char v32 = v11;
      if (!v12) {
        goto LABEL_15;
      }
      int v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        uint64_t v12 = v31[0];
        v31[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            unint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v30);
          }
          uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
          v31[0] = (WTF::StringImpl *)v34;
          v31[1] = (WTF::StringImpl *)v33;
          _OWORD v31[2] = (WTF::StringImpl *)&v32;
          ++*(_DWORD *)(a1 + 48);
          uint64_t v16 = *a3;
          *a3 = 0;
          uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
          double v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)double v18 = 1637;
          *((void *)v18 + 1) = v17;
          *((void *)v18 + 66) = (char *)v18 + 16;
          *((void *)v18 + 67) = 512;
          *((void *)v18 + 68) = 0;
          *((void *)v18 + 70) = 0;
          *((void *)v18 + 69) = 0;
          IPC::Encoder::encodeHeader(v18);
          uint64_t v36 = v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v18, (uint64_t *)v31);
          unint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v19 = &unk_1EE9FB6A0;
          v19[1] = a1;
          v19[2] = v16;
          uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          v35[0] = v19;
          v35[1] = v20;
          (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v36, v35, 0);
          uint64_t v22 = v35[0];
          v35[0] = 0;
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          long long v23 = v36;
          uint64_t v36 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v25, v26);
          }
          long long v24 = v32;
          char v32 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          goto LABEL_24;
        }
        int v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)uint64_t v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_24:
}

void sub_19926A7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getBadgeBackgroundColor(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, void *a4)
{
  v9[0] = 0;
  v9[8] = 0;
  v8[0] = 0;
  v8[8] = 0;
  id v7 = a2;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v9, (uint64_t)v8, a4)) {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*a3, (objc_object *)&unk_1EEA530F8);
  }
}

void sub_19926A9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setBadgeBackgroundColor(uint64_t a1, void *a2, JSObjectRef **a3, void *a4)
{
  v9[0] = 0;
  v9[8] = 0;
  v8[0] = 0;
  v8[8] = 0;
  id v7 = a2;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v9, (uint64_t)v8, a4)) {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*a3);
  }
}

void sub_19926AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIAction::enable(uint64_t a1, uint64_t *a2, void *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v9 = -2;
    goto LABEL_3;
  }
  BOOL v13 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v13 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19926ACD0);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v9 = -2;
    }
    else {
      uint64_t v9 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v9;
    uint64_t v28 = 1;
    __n128 result = (IPC::Encoder *)WebKit::isValid(v9, 1, a3, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    long long v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v14 = WebKit::WebProcess::singleton(void)::process;
  long long v25 = &v27;
  char v26 = 1;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v15 = *a2;
  *a2 = 0;
  uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1638;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v30 = v17;
  IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,0ul,1ul>(v17, (uint64_t)&v25);
  double v18 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v18 = &unk_1EE9FB6C8;
  v18[1] = a1;
  v18[2] = v15;
  uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v18;
  *(void *)&__y[1] = v19;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v14 + 24) + 40))(v14 + 24, &v30, __y, 0);
  long double v21 = __y[0];
  __y[0] = 0.0;
  if (v21 != 0.0) {
    (*(void (**)(long double))(**(void **)&v21 + 8))(COERCE_LONG_DOUBLE(*(void *)&v21));
  }
  __n128 result = v30;
  unint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

void sub_19926ACF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPIAction::disable(uint64_t a1, uint64_t *a2, void *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v9 = -2;
    goto LABEL_3;
  }
  BOOL v13 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v13 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19926B08CLL);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v9 = -2;
    }
    else {
      uint64_t v9 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v9;
    uint64_t v28 = 1;
    __n128 result = (IPC::Encoder *)WebKit::isValid(v9, 1, a3, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    long long v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v14 = WebKit::WebProcess::singleton(void)::process;
  long long v25 = &v27;
  char v26 = 0;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v15 = *a2;
  *a2 = 0;
  uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1638;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v30 = v17;
  IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,0ul,1ul>(v17, (uint64_t)&v25);
  double v18 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v18 = &unk_1EE9FB6F0;
  v18[1] = a1;
  v18[2] = v15;
  uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v18;
  *(void *)&__y[1] = v19;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v14 + 24) + 40))(v14 + 24, &v30, __y, 0);
  long double v21 = __y[0];
  __y[0] = 0.0;
  if (v21 != 0.0) {
    (*(void (**)(long double))(**(void **)&v21 + 8))(COERCE_LONG_DOUBLE(*(void *)&v21));
  }
  __n128 result = v30;
  unint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

void sub_19926B0B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAction::isEnabled(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  v21[0] = 0;
  v21[8] = 0;
  v20[0] = 0;
  v20[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v21, (uint64_t)v20, a4))
  {
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    BOOL v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)BOOL v11 = 1633;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    long long v23 = v11;
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v21);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v20);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FB718;
    v12[1] = a1;
    v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v12;
    v22[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v23, v22, 0);
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v23;
    long long v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_19926B3D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIAction::isValidDimensionKey(WebKit::WebExtensionAPIAction *this, NSString *a2)
{
  uint64_t v2 = this;
  if ([(WebKit::WebExtensionAPIAction *)v2 isEqualToString:@"any"])
  {
    BOOL v3 = 1;
  }
  else
  {
    [(WebKit::WebExtensionAPIAction *)v2 doubleValue];
    BOOL v3 = 0;
    if (v4 != 0.0 && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v4 > 0.0 && v4 < 1.84467441e19) {
      BOOL v3 = modf(v4, &__y) == 0.0;
    }
  }

  return v3;
}

void sub_19926B5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAPIAction *WebKit::WebExtensionAPIAction::parseIconPath(WebKit::WebExtensionAPIAction *this, NSString *a2, const WTF::URL *a3)
{
  long double v4 = this;
  if (([(WebKit::WebExtensionAPIAction *)v4 hasPrefix:@"data:"] & 1) == 0)
  {
    MEMORY[0x19972EAD0](&v13, v4);
    MEMORY[0x19972E8B0](v14, a2, &v13, 0);
    WTF::URL::path((WTF::URL *)v14);
    if ((v5 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    if (v15) {
      id v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v6 = &stru_1EEA10550;
    }
    uint64_t v8 = v6;
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    BOOL v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }

    long double v4 = (WebKit::WebExtensionAPIAction *)v8;
  }

  return v4;
}

void sub_19926B710(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  uint64_t v14 = *(WTF::StringImpl **)(v12 - 24);
  *(void *)(v12 - 24) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIAction::parseIconPathsDictionary(void *a1, NSString *a2, int a3, void *a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  long long v25 = a4;
  objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v7, "count"));
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v8 = v7;
  uint64_t v10 = [v8 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v28;
LABEL_3:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v28 != v11) {
        objc_enumerationMutation(v8);
      }
      uint64_t v13 = *(WebKit::WebExtensionAPIAction **)(*((void *)&v27 + 1) + 8 * v12);
      if (!a3
        || ([*(id *)(*((void *)&v27 + 1) + 8 * v12) isEqualToString:@"color_schemes"] & 1) == 0)
      {
        if (!WebKit::WebExtensionAPIAction::isValidDimensionKey(v13, v9))
        {
          if (a5)
          {
            WebKit::toErrorString(0, v25, &cfstr_IsNotAValidDim.isa, v14, v13);
            *a5 = (id)objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_17;
        }
        uint64_t v15 = [v8 objectForKeyedSubscript:v13];
        uint64_t v16 = [NSString stringWithFormat:@"%@[%@]", v25, v13];
        uint64_t v17 = objc_opt_class();
        BOOL v18 = WebKit::validateObject(v15, v16, v17, a5);

        if (!v18)
        {

LABEL_17:
          long double v21 = v26;
          id v26 = 0;
          goto LABEL_18;
        }
        uint64_t v20 = WebKit::WebExtensionAPIAction::parseIconPath((WebKit::WebExtensionAPIAction *)v15, a2, v19);
        [v26 setObject:v20 forKeyedSubscript:v13];
      }
      if (v10 == ++v12)
      {
        uint64_t v10 = [v8 countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v10) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  long double v21 = v8;
LABEL_18:

  return v26;
}

void sub_19926B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIAction::parseIconImageDataDictionary(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v21 = a1;
  uint64_t v22 = a3;
  objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v21, "count"));
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v21;
  uint64_t v9 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v25 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(WebKit::WebExtensionAPIAction **)(*((void *)&v24 + 1) + 8 * i);
        if (!a2
          || ([*(id *)(*((void *)&v24 + 1) + 8 * i) isEqualToString:@"color_schemes"] & 1) == 0)
        {
          if (!WebKit::WebExtensionAPIAction::isValidDimensionKey(v12, v8))
          {
            if (a4)
            {
              WebKit::toErrorString(0, v22, &cfstr_IsNotAValidDim.isa, v13, v12);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
            }
            goto LABEL_18;
          }
          uint64_t v14 = [v7 objectForKeyedSubscript:v12];
          uint64_t v15 = [NSString stringWithFormat:@"%@[%@]", v22, v12];
          uint64_t v16 = objc_opt_class();
          BOOL v17 = WebKit::validateObject(v14, v15, v16, a4);

          if (!v17
            || (WebKit::dataURLFromImageData(v14, 0, v12, a4),
                (BOOL v18 = objc_claimAutoreleasedReturnValue()) == 0))
          {

LABEL_18:
            uint64_t v19 = v23;
            id v23 = 0;
            goto LABEL_19;
          }
          [v23 setObject:v18 forKeyedSubscript:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v19 = v7;
LABEL_19:

  return v23;
}

void sub_19926BCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id WebKit::dataURLFromImageData(void *a1, size_t *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (a2) {
    *a2 = 0;
  }
  uint64_t v9 = [v7 context];
  uint64_t v10 = [v9 objectForKeyedSubscript:@"ImageData"];

  if ([v7 isInstanceOf:v10])
  {
    uint64_t v12 = [v7 objectForKeyedSubscript:@"data"];
    if (([v12 isObject] & 1) != 0
      && ([v7 context],
          uint64_t v14 = objc_claimAutoreleasedReturnValue(),
          uint64_t v15 = (const OpaqueJSContext *)[v14 JSGlobalContextRef],
          v14,
          uint64_t v16 = JSValueToObject(v15, (JSValueRef)[v12 JSValueRef], 0),
          JSValueGetTypedArrayType(v15, v16, 0) == kJSTypedArrayTypeUint8ClampedArray))
    {
      id v17 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      TypedArrayBytesPtr = JSObjectGetTypedArrayBytesPtr(v15, v16, 0);
      CFDataRef data = (const __CFData *)objc_msgSend(v17, "initWithBytes:length:", TypedArrayBytesPtr, JSObjectGetTypedArrayByteLength(v15, v16, 0));
      uint64_t v19 = [v7 objectForKeyedSubscript:@"width"];
      uint64_t v20 = [v19 toNumber];
      size_t v21 = [v20 unsignedLongValue];

      uint64_t v22 = [v7 objectForKeyedSubscript:@"height"];
      id v23 = [v22 toNumber];
      size_t v24 = [v23 unsignedLongValue];

      long long v25 = [v7 objectForKeyedSubscript:@"colorSpace"];
      long long v26 = [v25 toString];

      double v41 = v26;
      int v27 = [v26 isEqualToString:@"display-p3"];
      long long v28 = (CFStringRef *)MEMORY[0x1E4F1DB90];
      if (!v27) {
        long long v28 = (CFStringRef *)MEMORY[0x1E4F1DC98];
      }
      uint64_t v29 = CGColorSpaceCreateWithName(*v28);
      long long v30 = CGDataProviderCreateWithCFData(data);
      BOOL v31 = CGImageCreate(v21, v24, 8uLL, 0x20uLL, 4 * v21, v29, 1u, v30, 0, 1, kCGRenderingIntentDefault);
      CGDataProviderRelease(v30);
      CGColorSpaceRelease(v29);
      if (v31)
      {
        unint64_t v33 = [MEMORY[0x1E4F42A80] imageWithCGImage:v31];
        CGImageRelease(v31);
        uint64_t v34 = UIImagePNGRepresentation(v33);
        if ([v34 length])
        {
          uint64_t v36 = [v34 base64EncodedStringWithOptions:0];
          if ([v36 length])
          {
            if (a2) {
              *a2 = v21;
            }
            unint64_t v38 = [NSString stringWithFormat:@"data:image/png;base64,%@", v36];
          }
          else
          {
            WebKit::toErrorString(0, v8, &cfstr_ItIsNotAnImage.isa, v37);
            unint64_t v38 = 0;
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          long double v39 = v41;
        }
        else
        {
          WebKit::toErrorString(0, v8, &cfstr_ItIsNotAnImage.isa, v35);
          unint64_t v38 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          long double v39 = v41;
        }
      }
      else
      {
        WebKit::toErrorString(0, v8, &cfstr_ItIsNotAnImage.isa, v32);
        unint64_t v38 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        long double v39 = v41;
      }
    }
    else
    {
      WebKit::toErrorString(0, v8, &cfstr_ItIsNotAnImage.isa, v13);
      unint64_t v38 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    WebKit::toErrorString(0, v8, &cfstr_ItIsNotAnImage.isa, v11);
    unint64_t v38 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v38;
}

void sub_19926C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIAction::parseIconVariants(void *a1, NSString *a2, void *a3, void *a4)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  long long v28 = a3;
  int v27 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  id v6 = 0;
  for (unint64_t i = 0; i < [v5 count]; ++i)
  {
    id v8 = [v5 objectAtIndexedSubscript:i];
    uint64_t v9 = [NSString stringWithFormat:@"%@[%lu]", v28, i];
    if (v6) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = &v31;
    }
    if (!v6) {
      id v31 = 0;
    }
    uint64_t v11 = WebKit::WebExtensionAPIAction::parseIconImageDataDictionary(v8, 1, v9, v10);
    uint64_t v12 = (void *)v11;
    if (v6)
    {
      if (v11) {
        goto LABEL_20;
      }
    }
    else
    {
      id v6 = v31;
      if (v12) {
        goto LABEL_20;
      }
    }
    if (v6) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = &v30;
    }
    if (!v6) {
      id v30 = 0;
    }
    uint64_t v14 = WebKit::WebExtensionAPIAction::parseIconPathsDictionary(v8, a2, 1, v9, v13);
    uint64_t v15 = (void *)v14;
    if (v6)
    {
      if (!v14) {
        goto LABEL_34;
      }
    }
    else
    {
      id v6 = v30;
      if (!v15)
      {
LABEL_34:
        uint64_t v12 = 0;
        goto LABEL_38;
      }
    }
    uint64_t v12 = v15;
LABEL_20:
    uint64_t v16 = [v8 objectForKeyedSubscript:@"color_schemes"];
    if (!v16) {
      goto LABEL_32;
    }
    id v17 = [NSString stringWithFormat:@"%@['%@']", v9, @"color_schemes"];
    v32[0] = objc_opt_class();
    BOOL v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:1];
    if (v6) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = &v29;
    }
    if (!v6) {
      id v29 = 0;
    }
    BOOL v20 = WebKit::validateObject(v16, v17, v18, v19);
    if (!v6) {
      id v6 = v29;
    }

    if (v20)
    {
      if (([v16 containsObject:@"light"] & 1) != 0
        || ([v16 containsObject:@"dark"] & 1) != 0)
      {
        [v12 setObject:v16 forKeyedSubscript:@"color_schemes"];

LABEL_32:
        [v27 addObject:v12];
        goto LABEL_38;
      }
      if (!v6)
      {
        WebKit::toErrorString(0, (NSString *)v17, &cfstr_ItMustSpecifyE.isa, v21);
        id v6 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

LABEL_38:
  }
  if ([v5 count] && !objc_msgSend(v27, "count"))
  {
    if (!v6)
    {
      WebKit::toErrorString(0, v28, &cfstr_ItDidnTContain.isa, v22);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      id v6 = v6;
      id v23 = 0;
      *a4 = v6;
    }
    else
    {
      id v23 = 0;
    }
  }
  else
  {
    id v23 = (void *)[v27 copy];
  }

  return v23;
}

void sub_19926C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setIcon(uint64_t a1, WebKit::WebFrame *a2, void *a3, uint64_t *a4, void *a5)
{
  v74[3] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  v65[0] = 0;
  v65[8] = 0;
  v64[0] = 0;
  v64[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v9, (uint64_t)v65, (uint64_t)v64, a5))
  {
    if ((byte_1EB359F55 & 1) == 0)
    {
      v73[0] = @"path";
      uint64_t v50 = (void *)MEMORY[0x1E4F1CAA0];
      uint64_t v51 = objc_opt_class();
      uint64_t v52 = objc_opt_class();
      int v61 = objc_msgSend(v50, "orderedSetWithObjects:", v51, v52, objc_opt_class(), 0);
      v74[0] = v61;
      v73[1] = @"imageData";
      char v53 = (void *)MEMORY[0x1E4F1CAA0];
      uint64_t v54 = objc_opt_class();
      uint64_t v55 = objc_opt_class();
      uint64_t v56 = objc_msgSend(v53, "orderedSetWithObjects:", v54, v55, objc_opt_class(), 0);
      v74[1] = v56;
      v73[2] = @"variants";
      uint64_t v57 = (void *)MEMORY[0x1E4F1CAA0];
      uint64_t v72 = objc_opt_class();
      uint64_t v58 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v72 count:1];
      uint64_t v59 = objc_msgSend(v57, "orderedSetWithObjects:", v58, objc_opt_class(), 0);
      v74[2] = v59;
      qword_1EB359F80 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v74 forKeys:v73 count:3];

      byte_1EB359F55 = 1;
    }
    if (WebKit::validateDictionary(v9, @"details", 0, (void *)qword_1EB359F80, a5))
    {
      uint64_t v10 = [v9 objectForKeyedSubscript:@"path"];
      if (v10)
      {
        uint64_t v11 = [v9 objectForKeyedSubscript:@"imageData"];
        BOOL v12 = v11 == 0;

        if (!v12)
        {
          WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_0.isa, v13);
          *a5 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_54;
        }
      }
      uint64_t v14 = [v9 objectForKeyedSubscript:@"imageData"];
      objc_opt_class();
      uint64_t v15 = WTF::dynamic_objc_cast<JSValue>(v14);

      if (v15)
      {
        v63[0] = 0;
        uint64_t v16 = WebKit::dataURLFromImageData(v15, (size_t *)v63, @"imageData", a5);
        if (!v16) {
          goto LABEL_18;
        }
        id v17 = [NSNumber numberWithUnsignedLong:v63[0]];
        BOOL v18 = [v17 stringValue];
        uint64_t v70 = v18;
        unint64_t v71 = v16;
        uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v71 forKeys:&v70 count:1];
      }
      else
      {
        uint64_t v19 = 0;
      }

      BOOL v20 = WebKit::objectForKey<NSDictionary>(v9, @"imageData", 1, 0);
      uint64_t v15 = v20;
      if (!v20
        || (WebKit::WebExtensionAPIAction::parseIconImageDataDictionary(v20, 0, @"imageData", a5),
            uint64_t v21 = objc_claimAutoreleasedReturnValue(),
            v19,
            (uint64_t v19 = (void *)v21) != 0))
      {

        WebKit::objectForKey<NSString>(v9, @"path", 1);
        uint64_t v22 = (WebKit::WebExtensionAPIAction *)objc_claimAutoreleasedReturnValue();
        if (v22)
        {
          id v68 = @"16";
          WebKit::WebFrame::url(a2, (uint64_t)v63);
          size_t v24 = WebKit::WebExtensionAPIAction::parseIconPath(v22, v63, v23);
          long long v69 = v24;
          uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v69 forKeys:&v68 count:1];

          int v27 = (WTF::StringImpl *)v63[0];
          v63[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v26);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          uint64_t v19 = (void *)v25;
        }

        long long v28 = WebKit::objectForKey<NSDictionary>(v9, @"path", 1, 0);
        if (!v28)
        {
          id v29 = v19;
          goto LABEL_30;
        }
        WebKit::WebFrame::url(a2, (uint64_t)v63);
        id v29 = WebKit::WebExtensionAPIAction::parseIconPathsDictionary(v28, v63, 0, @"path", a5);

        id v31 = (WTF::StringImpl *)v63[0];
        v63[0] = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::destroy(v31, v30);
            if (!v29)
            {
LABEL_37:

              goto LABEL_54;
            }
LABEL_30:

            uint64_t v32 = WebKit::objectForKey<NSArray>(v9, @"variants", 1, 0);
            if (!v32)
            {
              uint64_t v34 = 0;
              goto LABEL_39;
            }
            WebKit::WebFrame::url(a2, (uint64_t)v63);
            uint64_t v34 = WebKit::WebExtensionAPIAction::parseIconVariants(v32, v63, @"variants", a5);
            uint64_t v35 = (WTF::StringImpl *)v63[0];
            v63[0] = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
              {
                WTF::StringImpl::destroy(v35, v33);
                if (!v34)
                {
LABEL_50:
                  uint64_t v34 = v32;
LABEL_53:

                  goto LABEL_54;
                }
LABEL_39:

                if (v34) {
                  uint64_t v36 = v34;
                }
                else {
                  uint64_t v36 = v29;
                }
                unint64_t v37 = WebKit::encodeJSONString(v36, 1, 0);
                {
                  uint64_t v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                  WebKit::WebProcess::WebProcess(v60);
                }
                uint64_t v38 = WebKit::WebProcess::singleton(void)::process;
                MEMORY[0x19972EAD0](&v62, v37);
                v63[0] = v65;
                v63[1] = v64;
                void v63[2] = &v62;
                ++*(_DWORD *)(a1 + 48);
                uint64_t v39 = *a4;
                *a4 = 0;
                uint64_t v40 = *(void *)(*(void *)(a1 + 24) + 24);
                double v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                *(_WORD *)double v41 = 1639;
                *((void *)v41 + 1) = v40;
                *((void *)v41 + 66) = (char *)v41 + 16;
                *((void *)v41 + 67) = 512;
                *((void *)v41 + 68) = 0;
                *((void *)v41 + 70) = 0;
                *((void *)v41 + 69) = 0;
                IPC::Encoder::encodeHeader(v41);
                long long v67 = v41;
                IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v41, (uint64_t *)v63);
                id v42 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v42 = &unk_1EE9FB760;
                v42[1] = a1;
                v42[2] = v39;
                uint64_t v43 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
                v66[0] = v42;
                v66[1] = v43;
                (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v38 + 24) + 40))(v38 + 24, &v67, v66, 0);
                uint64_t v45 = v66[0];
                v66[0] = 0;
                if (v45) {
                  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
                }
                unint64_t v46 = v67;
                long long v67 = 0;
                if (v46)
                {
                  IPC::Encoder::~Encoder(v46, v44);
                  WTF::fastFree(v48, v49);
                }
                int v47 = v62;
                char v62 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2) {
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v44);
                  }
                  else {
                    *(_DWORD *)v47 -= 2;
                  }
                }

                goto LABEL_53;
              }
              *(_DWORD *)v35 -= 2;
            }
            if (!v34) {
              goto LABEL_50;
            }
            goto LABEL_39;
          }
          *(_DWORD *)v31 -= 2;
        }
        if (!v29) {
          goto LABEL_37;
        }
        goto LABEL_30;
      }
LABEL_18:
    }
  }
LABEL_54:
}

void sub_19926CDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,IPC::Encoder *a25)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getPopup(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  v21[0] = 0;
  v21[8] = 0;
  v20[0] = 0;
  v20[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v21, (uint64_t)v20, a4))
  {
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1634;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    id v23 = v11;
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v21);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v11, (uint64_t)v20);
    BOOL v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FB788;
    v12[1] = a1;
    v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v12;
    v22[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v23, v22, 0);
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v23;
    id v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_19926D26C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setPopup(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB359F56 & 1) == 0)
  {
    v39[0] = @"popup";
    qword_1EB359F88 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:1];
    byte_1EB359F56 = 1;
  }
  if ((byte_1EB359F57 & 1) == 0)
  {
    unint64_t v37 = @"popup";
    int v27 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v28 = objc_opt_class();
    id v29 = objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    uint64_t v38 = v29;
    qword_1EB359F90 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];

    byte_1EB359F57 = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", (void *)qword_1EB359F88, (void *)qword_1EB359F90, a4))
  {
    v34[0] = 0;
    v34[8] = 0;
    v33[0] = 0;
    v33[8] = 0;
    if (WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v34, (uint64_t)v33, a4))
    {
      uint64_t v8 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
      if (*MEMORY[0x1E4F30978]) {
        *(_DWORD *)v8 += 2;
      }
      uint64_t v32 = v8;
      uint64_t v9 = WebKit::objectForKey<NSString>(v7, @"popup", 0);
      if (!v9) {
        goto LABEL_15;
      }
      MEMORY[0x19972EAD0](v31, v9);
      uint64_t v11 = v31[0];
      v31[0] = 0;
      BOOL v12 = v32;
      uint64_t v32 = v11;
      if (!v12) {
        goto LABEL_15;
      }
      int v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        BOOL v12 = v31[0];
        v31[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            id v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v30);
          }
          uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
          v31[0] = (WTF::StringImpl *)v34;
          v31[1] = (WTF::StringImpl *)v33;
          _OWORD v31[2] = (WTF::StringImpl *)&v32;
          ++*(_DWORD *)(a1 + 48);
          uint64_t v16 = *a3;
          *a3 = 0;
          uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
          BOOL v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)BOOL v18 = 1640;
          *((void *)v18 + 1) = v17;
          *((void *)v18 + 66) = (char *)v18 + 16;
          *((void *)v18 + 67) = 512;
          *((void *)v18 + 68) = 0;
          *((void *)v18 + 70) = 0;
          *((void *)v18 + 69) = 0;
          IPC::Encoder::encodeHeader(v18);
          uint64_t v36 = v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v18, (uint64_t *)v31);
          uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v19 = &unk_1EE9FB7B0;
          v19[1] = a1;
          v19[2] = v16;
          uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          v35[0] = v19;
          v35[1] = v20;
          (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v36, v35, 0);
          uint64_t v22 = v35[0];
          v35[0] = 0;
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          id v23 = v36;
          uint64_t v36 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v25, v26);
          }
          size_t v24 = v32;
          uint64_t v32 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          goto LABEL_24;
        }
        int v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)BOOL v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_24:
}

void sub_19926D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::openPopup(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  id v9 = a3;
  v24[0] = 0;
  v24[8] = 0;
  v23[0] = 0;
  v23[8] = 0;
  if (WebKit::WebExtensionAPIAction::parseActionDetails(v9, (uint64_t)v24, (uint64_t)v23, a5))
  {
    {
      uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v21);
    }
    uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v22 = *(void *)(a2 + 2120);
    ++*(_DWORD *)(a1 + 48);
    uint64_t v11 = *a4;
    *a4 = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
    int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v13 = 1636;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    long long v26 = v13;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v22);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v13, (uint64_t)v24);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v13, (uint64_t)v23);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9FB7D8;
    v14[1] = a1;
    v14[2] = v11;
    uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v25[0] = v14;
    v25[1] = v15;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v26, v25, 0);
    uint64_t v17 = v25[0];
    v25[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    BOOL v18 = v26;
    long long v26 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
  }
}

void sub_19926DB14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIAction::onClicked(WebKit::WebExtensionAPIAction *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 1;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAction &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    BOOL v3 = v7;
    id v7 = 0;
    long double v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        long double v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAction &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_19926DD7C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchActionClickedEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 176))
  {
    BOOL v3 = WebKit::toWebAPI(a2);
  }
  else
  {
    BOOL v3 = 0;
  }
  id v8 = v3;
  long double v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)long double v4 = &unk_1EE9FB858;
  *((void *)v4 + 1) = &v8;
  id v7 = v4;
  uint64_t v5 = WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v7, v5);
  unsigned __int8 v6 = v7;
  id v7 = 0;
  if (v6) {
    (*(void (**)(WebCore *))(*(void *)v6 + 8))(v6);
  }
}

void sub_19926DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB608;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB608;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FB620[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_19926E084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FB620[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FB620[v2])(&v3, &v1);
}

void sub_19926E118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FB620[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19926E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FB620[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>(a1, (uint64_t)&v4);
  if (v6)
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)&v4);
    a2[16] = 1;
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, uint64_t *))off_1EE9FB620[v5])(&v7, &v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

void sub_19926E284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FB620[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (IPC::Decoder *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19926E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FB620[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v16);
      char v9 = v17;
      if (v17)
      {
        *(void *)a2 = v16;
        *(_DWORD *)(a2 + 8) = 0;
        char v9 = 1;
LABEL_10:
        *(unsigned char *)(a2 + 16) = v9;
        return result;
      }
    }
    else
    {
      uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v16);
      char v9 = v17;
      if (v17)
      {
        *(void *)a2 = v16;
        char v9 = 1;
        *(_DWORD *)(a2 + 8) = 1;
        goto LABEL_10;
      }
    }
    *(unsigned char *)a2 = 0;
    goto LABEL_10;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (IPC::Decoder *)a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v4);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19926E574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FB620[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9FB620[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9FB630[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      char v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    id v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2) {
      uint64_t v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = (objc_object *)&stru_1EEA10550;
    }
    id v9 = v5;
    id v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }
}

_DWORD *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *a2);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2[1]);
  uint64_t v4 = (uint64_t *)a2[2];

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB650;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB650;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19926E990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19926EA4C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 16)) {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WTF::String>>(a1, &v5);
  char v4 = v7;
  if (v7)
  {
    *a2 = 0;
    a2[8] = 0;
    char v4 = 1;
    if (v6)
    {
      *(void *)a2 = v5;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19926EB3C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 16)) {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 2) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v11 = *((void *)result + 3);
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *(void *)v14;
        unint64_t v9 = *((void *)v14 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  *((void *)result + 2) = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v12 = *((void *)result + 3);
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *(void *)v13;
        unint64_t v3 = *((void *)v13 + 1);
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      *a2 = 0;
      a2[8] = 0;
      char v8 = 1;
    }
    else
    {
      uint64_t result = IPC::Decoder::decode<WTF::String>(result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15;
        char v8 = 1;
        a2[8] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    a2[16] = v8;
    return result;
  }
LABEL_13:
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)result + 3);
  if (result && v3) {
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB678;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB678;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FB620[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_19926EEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FB620[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FB620[v2])(&v3, &v1);
}

void sub_19926EF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FB620[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      char v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    id v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2) {
      int v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = (objc_object *)&stru_1EEA10550;
    }
    id v9 = v5;
    id v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB6A0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB6A0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19926F2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *(void *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB6C8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB6C8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19926F56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB6F0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB6F0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19926F7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB718;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB718;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v12 = *((void *)a2 + 3);
        if (!v12) {
          goto LABEL_24;
        }
        if (!v5)
        {
          unint64_t v10 = 0;
          uint64_t v11 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        if (*v6 >= 2u)
        {
LABEL_40:
          unint64_t v10 = v5;
          uint64_t v11 = v4;
          goto LABEL_24;
        }
        if (!*v6)
        {
          IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v29);
          if (v30)
          {
            uint64_t v26 = v29;
            int v8 = 1;
            int v27 = 1;
            char v28 = 1;
            goto LABEL_14;
          }
LABEL_25:
          uint64_t v14 = *(void *)a2;
          uint64_t v15 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v16 = *((void *)a2 + 3);
          if (v16 && v15) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
          }
          v23[0] = 0;
          char v25 = 0;
          goto LABEL_27;
        }
        if (v5 > (unint64_t)&v6[-v4 + 1])
        {
          *((void *)a2 + 2) = v6 + 2;
          unsigned int v7 = v6[1];
          if (v7 < 2)
          {
            int v8 = 0;
            LOBYTE(v26) = v7 != 0;
            int v27 = 0;
            char v28 = 1;
LABEL_14:
            v23[0] = 0;
            int v24 = -1;
            ((void (*)(uint64_t *, unsigned __int8 *, uint64_t *))off_1EE9FB740[v8])(&v29, v23, &v26);
            int v24 = v8;
            char v25 = 1;
            if (!v28 || v27 == -1 || (((void (*)(uint64_t *, uint64_t *))off_1EE9FB730[v27])(&v29, &v26), v25))
            {
LABEL_17:
              WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v23);
              if (v25)
              {
                if (v24 != -1) {
                  ((void (*)(uint64_t *, unsigned __int8 *))off_1EE9FB730[v24])(&v26, v23);
                }
              }
              return;
            }
LABEL_27:
            uint64_t v17 = *(void *)a2;
            uint64_t v18 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v19 = *((void *)a2 + 3);
            if (!v19 || !v18 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17), !v25))
            {
              IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
              return;
            }
            goto LABEL_17;
          }
          goto LABEL_40;
        }
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v12 = *((void *)a2 + 3);
        if (!v12)
        {
LABEL_24:
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v13 = *((void *)a2 + 3);
          if (v13 && v10) {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
          }
          goto LABEL_25;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      unint64_t v10 = 0;
      uint64_t v20 = *(void *)a2;
      uint64_t v21 = *((void *)a2 + 1);
      uint64_t v22 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v11 = 0;
      if (v22 && v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      goto LABEL_24;
    }
  }
  id v9 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v9);
}

void sub_19926FC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FB730[a12])(&a16, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, v1);
  if (v2 != -1) {
    ((void (*)(char *, unsigned __int8 *))off_1EE9FB730[v2])(&v3, v1);
  }
}

void sub_19926FD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FB730[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, unsigned __int8 *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 != 1)
    {
      id v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    int v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    int v8 = [NSNumber numberWithBool:*a2];
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB760;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB760;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        int v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_199270090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB788;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB788;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FB620[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992702C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FB620[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FB620[v2])(&v3, &v1);
}

void sub_19927035C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FB620[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      char v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    id v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2) {
      int v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = (objc_object *)&stru_1EEA10550;
    }
    id v9 = v5;
    id v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB7B0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB7B0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_199270674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB7D8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB7D8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        id v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992708D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(WebKit::WebExtensionAPIObject *a1, const WebKit::WebExtensionAPIObject *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(void *)uint64_t v6 = &unk_1EE9FB800;
  *(void *)(v6 + 40) = &unk_1EE9FB830;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  WebKit::toAPIString(a3, &v10);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, &v10, a2);
  id v8 = v10;
  char v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void sub_1992709FC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIObject::WebExtensionAPIObject(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9FB880;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  ++*(_DWORD *)(v4 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5) {
    ++*(_DWORD *)(v5 + 16);
  }
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = 0;
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionAPIObject::setPropertyPath(WebKit::WebExtensionAPIObject *this, WTF::StringImpl **a2, const WebKit::WebExtensionAPIObject *a3)
{
  if (a3 && (uint64_t v6 = (WTF::StringImpl *)*((void *)a3 + 4)) != 0 && *((_DWORD *)v6 + 1))
  {
    *(_DWORD *)v6 += 2;
    uint64_t v14 = v6;
    id v7 = *a2;
    if (*a2) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v13 = v7;
    WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v14, 46, (uint64_t *)&v13, &v15);
    id v9 = v15;
    uint64_t v15 = 0;
    char v10 = (WTF::StringImpl *)*((void *)this + 4);
    *((void *)this + 4) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v8);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v10 -= 2;
        uint64_t v15 = 0;
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    unint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)((char *)this + 32);
    return (WTF::StringImpl *)WTF::String::operator=(v4, a2);
  }
  return result;
}

void sub_199270C18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::toAPIString@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      unint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v3 = v4;
      break;
    default:
      uint64_t v3 = (_DWORD *)*MEMORY[0x1E4F30978];
      if (*MEMORY[0x1E4F30978]) {
        *v3 += 2;
      }
      break;
  }
  *a2 = v3;
  return result;
}

void WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(WebKit::WebExtensionAPIObject *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FB880;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v4 + 16));
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(WebKit::WebExtensionAPIEvent *this)
{
  WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FB800;
  *((void *)this + 5) = &unk_1EE9FB830;
  WebKit::WebExtensionAPIEvent::removeAllListeners((unsigned int *)this);
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

uint64_t WebKit::WebExtensionAPIObject::runtime(WebKit::WebExtensionAPIObject *this)
{
  return *((void *)this + 2);
}

void non-virtual thunk to'WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(WebKit::WebExtensionAPIEvent *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent((WebKit::WebExtensionAPIEvent *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  id v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_199271284(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchActionClickedEvent(std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && !*(unsigned char *)(v6 + 144))
  {
    char v7 = 0;
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  v11[8] = 0;
  v11[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  id v8 = (WebKit::WebExtensionAPIAction *)WebKit::WebExtensionAPINamespace::action(a3);
  id v9 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIAction::onClicked(v8);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v9, **(objc_object ***)(a1 + 8));
  unint64_t result = (unsigned int *)MEMORY[0x1997355E0](v11);
  if ((v7 & 1) == 0) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  return result;
}

void sub_199271394(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAlarms::createAlarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  void v41[3] = *MEMORY[0x1E4F143B8];
  char v7 = a2;
  id v8 = a3;
  if (_MergedGlobals_114 == 1)
  {
    id v9 = (void *)qword_1EB359FA0;
  }
  else
  {
    v40[0] = @"when";
    v41[0] = objc_opt_class();
    v40[1] = @"delayInMinutes";
    v41[1] = objc_opt_class();
    void v40[2] = @"periodInMinutes";
    _OWORD v41[2] = objc_opt_class();
    id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:3];
    qword_1EB359FA0 = (uint64_t)v9;
    _MergedGlobals_114 = 1;
  }
  if (WebKit::validateDictionary(v8, @"info", 0, v9, a4))
  {
    char v10 = WebKit::objectForKey<NSNumber>(v8, @"when");
    uint64_t v11 = WebKit::objectForKey<NSNumber>(v8, @"delayInMinutes");
    uint64_t v13 = WebKit::objectForKey<NSNumber>(v8, @"periodInMinutes");
    if (v10 && v11)
    {
      WebKit::toErrorString(0, &cfstr_Info.isa, &cfstr_ItCannotSpecif_1.isa, v12);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_37:

      goto LABEL_38;
    }
    [v10 doubleValue];
    double v15 = v14;
    [v11 doubleValue];
    double v17 = v16;
    uint64_t v18 = (WTF::WallTime *)[v13 doubleValue];
    double v20 = v19;
    WTF::WallTime::now(v18);
    double v22 = v15 / 1000.0;
    double v23 = v20 * 60.0;
    if (v22 == 0.0)
    {
      double v24 = v17 * 60.0;
      if (v24 == 0.0)
      {
        if (v23 != 0.0)
        {
LABEL_14:
          double v24 = v20 * 60.0;
          goto LABEL_17;
        }
        double v24 = 0.0;
LABEL_16:
        double v23 = 0.0;
LABEL_17:
        uint64_t v25 = *(void *)(*(void *)(a1 + 24) + 32);
        if (!v25 || (uint64_t v26 = *(void *)(v25 + 8)) == 0 || !*(unsigned char *)(v26 + 32))
        {
          double v27 = 30.0;
          if (v24 < 30.0) {
            double v24 = 30.0;
          }
          if (v23 >= 30.0) {
            double v27 = v23;
          }
          if (v23 == 0.0) {
            double v23 = 0.0;
          }
          else {
            double v23 = v27;
          }
        }
        {
          unint64_t v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v37);
        }
        uint64_t v28 = WebKit::WebProcess::singleton(void)::process;
        if (v7) {
          uint64_t v29 = v7;
        }
        else {
          uint64_t v29 = &stru_1EEA10550;
        }
        MEMORY[0x19972EAD0](&v38, v29);
        uint64_t v30 = *(void *)(*(void *)(a1 + 24) + 24);
        id v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)id v31 = 1645;
        *((void *)v31 + 1) = v30;
        *((void *)v31 + 66) = (char *)v31 + 16;
        *((void *)v31 + 67) = 512;
        *((void *)v31 + 68) = 0;
        *((void *)v31 + 70) = 0;
        *((void *)v31 + 69) = 0;
        IPC::Encoder::encodeHeader(v31);
        uint64_t v39 = v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, (uint64_t *)&v38);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v31, v24);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v31, v23);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v28 + 24) + 32))(v28 + 24, &v39, 0);
        unint64_t v33 = v39;
        uint64_t v39 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v35, v36);
        }
        uint64_t v34 = v38;
        uint64_t v38 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
        goto LABEL_37;
      }
    }
    else
    {
      double v24 = v22 - floor(v21 * 1000.0) / 1000.0;
    }
    if (v23 != 0.0)
    {
      if (v24 != 0.0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_38:
}

void sub_1992717B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, IPC::Encoder *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAlarms::get(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = a2;
  {
    double v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v6 = WebKit::WebProcess::singleton(void)::process;
  if (v5) {
    char v7 = v5;
  }
  else {
    char v7 = &stru_1EEA10550;
  }
  MEMORY[0x19972EAD0](&v20, v7);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 24);
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 1646;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  double v22 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v20);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9FB8D0;
  v11[1] = a1;
  v11[2] = v8;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v11;
  v21[1] = v12;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v6 + 24) + 40))(v6 + 24, &v22, v21, 0);
  uint64_t v14 = v21[0];
  v21[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  double v15 = v22;
  double v22 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v17, v18);
  }
  double v16 = v20;
  double v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
}

void sub_199271A38(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIAlarms::getAll(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1647;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  double v15 = v6;
  char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FB8F8;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t result = v15;
  double v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_199271D0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199271DD4()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x199271DC0);
}

void WebKit::WebExtensionAPIAlarms::clear(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = a2;
  {
    double v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v6 = WebKit::WebProcess::singleton(void)::process;
  if (v5) {
    char v7 = v5;
  }
  else {
    char v7 = &stru_1EEA10550;
  }
  MEMORY[0x19972EAD0](&v20, v7);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 24);
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 1643;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  double v22 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v20);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9FB920;
  v11[1] = a1;
  v11[2] = v8;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v11;
  v21[1] = v12;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v6 + 24) + 40))(v6 + 24, &v22, v21, 0);
  uint64_t v14 = v21[0];
  v21[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  double v15 = v22;
  double v22 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v17, v18);
  }
  double v16 = v20;
  double v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
}

void sub_199272000(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIAlarms::clearAll(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1644;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  double v15 = v6;
  char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FB948;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t result = v15;
  double v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1992722D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19927239C()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x199272388);
}

uint64_t WebKit::WebExtensionAPIAlarms::onAlarm(WebKit::WebExtensionAPIAlarms *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 2;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAlarms &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    char v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        char v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAlarms &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_19927250C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchAlarmsEvent(uint64_t a1, uint64_t a2)
{
  WebKit::toWebAPI(a2);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9FB970;
  *((void *)v3 + 1) = &v6;
  int v5 = v3;
  WebCore::mainThreadNormalWorld(v3);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v5);
  uint64_t v4 = v5;
  int v5 = 0;
  if (v4) {
    (*(void (**)(WebCore *))(*(void *)v4 + 8))(v4);
  }
}

void sub_1992725D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(uint64_t a1)
{
  char v2 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:3];
  if (*(void *)a1) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1EEA10550;
  }
  [v2 setObject:v3 forKeyedSubscript:@"name"];

  uint64_t v4 = NSNumber;
  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)(a1 + 24));
  id v6 = [v4 numberWithDouble:floor(v5 * 1000.0)];
  [v2 setObject:v6 forKeyedSubscript:@"scheduledTime"];

  double v7 = *(double *)(a1 + 16);
  if (v7 != 0.0)
  {
    uint64_t v8 = [NSNumber numberWithDouble:v7 / 60.0];
    [v2 setObject:v8 forKeyedSubscript:@"periodInMinutes"];
  }
  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

{
  void *v2;
  __CFString *v3;
  void *v4;
  unint64_t v5;
  double v6;
  void *v7;
  WebCore::SecurityOrigin *v8;
  uint64_t v9;
  __CFString *v10;
  const WTF::URL *v11;
  __CFString *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::SecurityOrigin *v15;
  void *v16;
  WebCore::SecurityOrigin *v18;
  WTF::StringImpl *v19;
  uint64_t vars8;

  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)a1) {
      uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v3 = &stru_1EEA10550;
    }
    [v2 setObject:v3 forKeyedSubscript:@"id"];
  }
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v4 = WebKit::toWebAPI(a1 + 16);
    [v2 setObject:v4 forKeyedSubscript:@"tab"];

    if (*(unsigned char *)(a1 + 208))
    {
      if (*(unsigned char *)(a1 + 192))
      {
        double v5 = *(void *)(a1 + 200);
        if (v5 == -3)
        {
          id v6 = -1.0;
        }
        else
        {
          id v6 = 0.0;
          if (v5 != -2) {
            id v6 = (double)v5;
          }
        }
        double v7 = [NSNumber numberWithDouble:v6];
        [v2 setObject:v7 forKeyedSubscript:@"frameId"];
      }
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v9 = *(void *)(a1 + 232);
    uint64_t v8 = (WebCore::SecurityOrigin *)(a1 + 232);
    if (v9) {
      char v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v10 = &stru_1EEA10550;
    }
    [v2 setObject:v10 forKeyedSubscript:@"url"];

    WebCore::SecurityOrigin::create((uint64_t *)&v18, v8, v11);
    WebCore::SecurityOrigin::toString((uint64_t *)&v19, v18);
    if (v19) {
      uint64_t v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v12 = &stru_1EEA10550;
    }
    [v2 setObject:v12 forKeyedSubscript:@"origin"];

    uint64_t v14 = v19;
    double v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    double v15 = v18;
    uint64_t v18 = 0;
    if (v15) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v13);
    }
  }
  double v16 = objc_msgSend(v2, "copy", v18, v19);

  return v16;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  unint64_t v11;
  __CFString *v12;
  __CFString *v13;
  void *v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef v17;
  void *v18;
  CFTypeRef v19;
  __CFString *v20;
  void *v21;
  id result;
  CFTypeRef cf;
  uint64_t vars8;

  char v2 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:9];
  uint64_t v3 = v2;
  if (!*(unsigned char *)(a1 + 113)) {
    goto LABEL_39;
  }
  uint64_t v4 = MEMORY[0x1E4F1CC38];
  double v5 = MEMORY[0x1E4F1CC28];
  if (*(unsigned char *)(a1 + 112)) {
    id v6 = MEMORY[0x1E4F1CC38];
  }
  else {
    id v6 = MEMORY[0x1E4F1CC28];
  }
  [v2 setObject:v6 forKeyedSubscript:@"allFrames"];
  if (*(void *)(a1 + 48)) {
    double v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    double v7 = &stru_1EEA10550;
  }
  [v3 setObject:v7 forKeyedSubscript:@"id"];

  if (!*(unsigned char *)(a1 + 104))
  {
    uint64_t result = (id)std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_42;
  }
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 88, (uint64_t *)&cf);
  uint64_t v8 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  [v3 setObject:v8 forKeyedSubscript:@"matches"];

  uint64_t v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  if (!*(unsigned char *)(a1 + 115)
    || (*(unsigned char *)(a1 + 114) ? (char v10 = v4) : (char v10 = v5),
        ([v3 setObject:v10 forKeyedSubscript:@"persistAcrossSessions"], !*(unsigned char *)(a1 + 57))
     || ((uint64_t v11 = *(char *)(a1 + 56), v11 > 2) ? (v12 = @"document_idle") : (v12 = off_1E5813B40[v11]),
         [v3 setObject:v12 forKeyedSubscript:@"runAt"],
         !*(unsigned char *)(a1 + 117))))
  {
LABEL_39:
    uint64_t result = (id)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_42:
    __break(1u);
    return result;
  }
  if (*(unsigned char *)(a1 + 116)) {
    uint64_t v13 = @"ISOLATED";
  }
  else {
    uint64_t v13 = @"MAIN";
  }
  [v3 setObject:v13 forKeyedSubscript:@"world"];
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)&cf);
    uint64_t v14 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    [v3 setObject:v14 forKeyedSubscript:@"css"];

    double v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 24, (uint64_t *)&cf);
    double v16 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    [v3 setObject:v16 forKeyedSubscript:@"js"];

    double v17 = cf;
    CFTypeRef cf = 0;
    if (v17) {
      CFRelease(v17);
    }
  }
  if (*(unsigned char *)(a1 + 80))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 64, (uint64_t *)&cf);
    uint64_t v18 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    [v3 setObject:v18 forKeyedSubscript:@"excludeMatches"];

    double v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
  }
  if (*(unsigned char *)(a1 + 119))
  {
    if (*(unsigned char *)(a1 + 118)) {
      double v20 = @"author";
    }
    else {
      double v20 = @"user";
    }
    [v3 setObject:v20 forKeyedSubscript:@"cssOrigin"];
  }
  double v21 = (void *)[v3 copy];

  return v21;
}

{
  void *v2;
  double v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  double v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  unint64_t v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __CFString *v32;
  void v33[2];
  uint64_t vars8;

  v33[1] = *MEMORY[0x1E4F143B8];
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (double)*(unint64_t *)a1;
    if (*(void *)a1 == -2) {
      uint64_t v3 = -1.0;
    }
    uint64_t v4 = [NSNumber numberWithDouble:v3];
    [v2 setObject:v4 forKeyedSubscript:@"id"];
  }
  if (*(unsigned char *)(a1 + 56))
  {
    double v5 = *(void *)(a1 + 16);
    id v6 = v5 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [v2 setObject:v6 forKeyedSubscript:@"url"];
    if (v5) {
  }
    }
  if (*(unsigned char *)(a1 + 72))
  {
    double v7 = *(void *)(a1 + 64);
    uint64_t v8 = v7 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [v2 setObject:v8 forKeyedSubscript:@"title"];
    if (v7) {
  }
    }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    char v10 = (double)v9;
    if (v9 + 3 < 2) {
      char v10 = -1.0;
    }
    uint64_t v11 = [NSNumber numberWithDouble:v10];
    [v2 setObject:v11 forKeyedSubscript:@"windowId"];
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(void *)(a1 + 96) == -1)
    {
      uint64_t v12 = &unk_1EEA53328;
    }
    else
    {
      uint64_t v12 = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
    }
    [v2 setObject:v12 forKeyedSubscript:@"index"];
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v13 = *(double *)(a1 + 120);
    uint64_t v14 = [NSNumber numberWithDouble:*(double *)(a1 + 112)];
    [v2 setObject:v14 forKeyedSubscript:@"width"];

    double v15 = [NSNumber numberWithDouble:v13];
    [v2 setObject:v15 forKeyedSubscript:@"height"];
  }
  if (*(unsigned char *)(a1 + 144))
  {
    double v16 = *(void *)(a1 + 136);
    double v17 = (double)v16;
    if (v16 == -2) {
      double v17 = -1.0;
    }
    uint64_t v18 = [NSNumber numberWithDouble:v17];
    [v2 setObject:v18 forKeyedSubscript:@"openerTabId"];
  }
  if (*(unsigned char *)(a1 + 153))
  {
    double v19 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 152)];
    [v2 setObject:v19 forKeyedSubscript:@"active"];
  }
  if (*(unsigned char *)(a1 + 155))
  {
    double v20 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 154)];
    [v2 setObject:v20 forKeyedSubscript:@"selected"];

    if (!*(unsigned char *)(a1 + 155))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    double v21 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 154)];
    [v2 setObject:v21 forKeyedSubscript:@"highlighted"];
  }
  if (*(unsigned char *)(a1 + 157))
  {
    double v22 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 156)];
    [v2 setObject:v22 forKeyedSubscript:@"pinned"];
  }
  if (*(unsigned char *)(a1 + 159))
  {
    double v23 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 158)];
    [v2 setObject:v23 forKeyedSubscript:@"audible"];
  }
  if (*(unsigned char *)(a1 + 161))
  {
    uint64_t v32 = @"muted";
    double v24 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 160)];
    v33[0] = v24;
    uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:&v32 count:1];
    [v2 setObject:v25 forKeyedSubscript:@"mutedInfo"];
  }
  if (*(unsigned char *)(a1 + 163))
  {
    if (*(unsigned char *)(a1 + 162)) {
      uint64_t v26 = @"loading";
    }
    else {
      uint64_t v26 = @"complete";
    }
    [v2 setObject:v26 forKeyedSubscript:@"status"];
  }
  if (*(unsigned char *)(a1 + 165))
  {
    double v27 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 164)];
    [v2 setObject:v27 forKeyedSubscript:@"incognito"];
  }
  if (*(unsigned char *)(a1 + 167))
  {
    uint64_t v28 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 166)];
    [v2 setObject:v28 forKeyedSubscript:@"isArticle"];
  }
  if (*(unsigned char *)(a1 + 169))
  {
    uint64_t v29 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 168)];
    [v2 setObject:v29 forKeyedSubscript:@"isInReaderMode"];
  }
  uint64_t v30 = (void *)[v2 copy];

  return v30;
}

{
  double v2;
  void *v3;
  unsigned int v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id result;
  void v30[4];
  void v31[4];
  void v32[6];
  void v33[7];
  uint64_t vars8;

  v33[6] = *MEMORY[0x1E4F143B8];
  v32[0] = @"id";
  if (!*(unsigned char *)(a1 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_27:
    uint64_t result = (id)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_30:
    __break(1u);
    return result;
  }
  char v2 = (double)*(unint64_t *)a1;
  if ((unint64_t)(*(void *)a1 + 3) < 2) {
    char v2 = -1.0;
  }
  uint64_t v3 = [NSNumber numberWithDouble:v2];
  v33[0] = v3;
  v32[1] = @"state";
  if (!*(unsigned char *)(a1 + 17)) {
    goto LABEL_27;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16) - 1;
  double v5 = @"normal";
  id v6 = @"normal";
  if (v4 <= 2) {
    id v6 = off_1E5813C18[(char)v4];
  }
  v33[1] = v6;
  void v32[2] = @"type";
  if (!*(unsigned char *)(a1 + 19)) {
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 18)) {
    double v5 = @"popup";
  }
  double v7 = v5;
  v33[2] = v7;
  v32[3] = @"focused";
  if (!*(unsigned char *)(a1 + 89)) {
    goto LABEL_27;
  }
  uint64_t v8 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 88)];
  v33[3] = v8;
  v32[4] = @"incognito";
  if (!*(unsigned char *)(a1 + 91)) {
    goto LABEL_27;
  }
  uint64_t v9 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 90)];
  v32[5] = @"alwaysOnTop";
  v33[4] = v9;
  v33[5] = MEMORY[0x1E4F1CC28];
  char v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:v32 count:6];
  uint64_t v11 = (void *)[v10 mutableCopy];

  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v13 = *(double *)(a1 + 48);
    uint64_t v12 = *(double *)(a1 + 56);
    double v15 = *(double *)(a1 + 64);
    uint64_t v14 = *(double *)(a1 + 72);
    v30[0] = @"top";
    double v16 = [NSNumber numberWithDouble:v12];
    v31[0] = v16;
    v30[1] = @"left";
    double v17 = [NSNumber numberWithDouble:v13];
    v31[1] = v17;
    void v30[2] = @"width";
    uint64_t v18 = [NSNumber numberWithDouble:v15];
    _OWORD v31[2] = v18;
    v30[3] = @"height";
    double v19 = [NSNumber numberWithDouble:v14];
    v31[3] = v19;
    double v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:v30 count:4];
    [v11 addEntriesFromDictionary:v20];
  }
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_21;
  }
  double v21 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (!*(unsigned char *)(a1 + 40)
    || (double v22 = (void *)[v21 initWithCapacity:*(unsigned int *)(a1 + 36)], !*(unsigned char *)(a1 + 40)))
  {
    uint64_t result = (id)std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_30;
  }
  double v23 = *(_DWORD *)(a1 + 36);
  if (v23)
  {
    double v24 = *(void *)(a1 + 24);
    uint64_t v25 = 176 * v23;
    do
    {
      uint64_t v26 = WebKit::toWebAPI(v24);
      [v22 addObject:v26];

      v24 += 176;
      v25 -= 176;
    }
    while (v25);
  }
  double v27 = (void *)[v22 copy];
  [v11 setObject:v27 forKeyedSubscript:@"tabs"];

LABEL_21:
  uint64_t v28 = (void *)[v11 copy];

  return v28;
}

void sub_199272740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9FB8A8;
  *((void *)v4 + 1) = a2;
  double v7 = v4;
  uint64_t v5 = WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v7, v5);
  uint64_t result = (uint64_t)v7;
  double v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19927280C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit24WebExtensionContextProxy25enumerateNamespaceObjectsERKNS_8FunctionIFvRNS2_24WebExtensionAPINamespaceEEEERN7WebCore15DOMWrapperWorldEEUlRT_RT0_E_vJRNS2_8WebFrameES6_EE4callESK_S6_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), a3);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB8D0;
  char v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB8D0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v16 = *((void *)a2 + 3);
        if (v16)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v4, v5);
            unint64_t v14 = 0;
            uint64_t v22 = *(void *)a2;
            uint64_t v23 = *((void *)a2 + 1);
            uint64_t v24 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v15 = 0;
            if (v24 && v23)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              uint64_t v15 = *(void *)a2;
              unint64_t v14 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v14 = 0;
            uint64_t v15 = 0;
          }
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            LOBYTE(v25) = 0;
            char v28 = 0;
            goto LABEL_12;
          }
          IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v30);
          if (v33)
          {
            long long v26 = v31;
            uint64_t v27 = v32;
            uint64_t v25 = v30;
            char v28 = 1;
LABEL_12:
            char v29 = 1;
            uint64_t v9 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
            WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v25);
            char v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
            id v11 = WebKit::WebExtensionCallbackHandler::call(v9, v10);

            if (v29)
            {
              if (v28)
              {
                uint64_t v13 = v25;
                uint64_t v25 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2) {
                    WTF::StringImpl::destroy(v13, v12);
                  }
                  else {
                    *(_DWORD *)v13 -= 2;
                  }
                }
              }
            }
            return;
          }
LABEL_20:
          uint64_t v18 = *(void *)a2;
          uint64_t v19 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v20 = *((void *)a2 + 3);
          if (v20)
          {
            if (v19)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
              uint64_t v21 = *(void *)a2;
              uint64_t v19 = *((void *)a2 + 1);
              uint64_t v20 = *((void *)a2 + 3);
LABEL_23:
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              if (v20 && v19) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v21);
              }
              IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
              return;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v21 = 0;
          goto LABEL_23;
        }
        unint64_t v14 = v5;
        uint64_t v15 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v17 = *((void *)a2 + 3);
      if (v17 && v14) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
      }
      goto LABEL_20;
    }
  }
  uint64_t v8 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v8);
}

void sub_199272C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if ((_BYTE)a16 && a14 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v20);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  LOBYTE(v6) = 0;
  char v7 = 0;
  WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v6);
  char v2 = (objc_object *)objc_claimAutoreleasedReturnValue();
  id v3 = WebKit::WebExtensionCallbackHandler::call(a1, v2);

  if (v7)
  {
    unint64_t v5 = v6;
    id v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
}

void sub_199272D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v15 = v14;

  if (a14 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_199272DD8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::WebExtensionAlarmParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionAlarmParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    id v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

id WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    WebKit::toWebAPI(a1);
  }
  else {
  uint64_t v1 = [MEMORY[0x1E4F1CA98] null];
  }

  return v1;
}

{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  NSMutableArray *v8;
  objc_object *v9;
  void *v10;
  CFTypeRef v11;
  CFTypeRef cf;
  uint64_t vars8;

  uint64_t v2 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  id v3 = v2;
  CFTypeRef cf = v2;
  if (v2) {
    CFRetain(v2);
  }

  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 32 * v4;
    do
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      BOOL v7 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::toWebAPI(v5);
      uint64_t v8 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v7, v8, v9);

      v5 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  char v10 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  id v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }

  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB8F8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB8F8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && (uint64_t v4 = *(WTF::StringImpl **)a2) != 0)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v27 = *((void *)a2 + 3);
      if (v27)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
          char v28 = *(WTF::StringImpl **)a2;
          uint64_t v29 = *((void *)a2 + 1);
          uint64_t v30 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v30)
          {
            if (v29) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v30 + 16))(v30, v28);
            }
          }
        }
      }
      goto LABEL_53;
    }
    uint64_t v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    *((void *)a2 + 2) = v8 + 1;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    if (v9 >= 0x8000)
    {
      do
      {
        uint64_t result = (uint64_t)IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v48);
        if (!v51) {
          goto LABEL_52;
        }
        int v31 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          uint64_t result = WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v52, HIDWORD(v53) + 1, (unint64_t)&v48);
          int v31 = HIDWORD(v53);
          uint64_t v32 = v52 + 32 * HIDWORD(v53);
          uint64_t v33 = *(void *)result;
          *(void *)uint64_t result = 0;
          *(void *)uint64_t v32 = v33;
          long long v34 = *(_OWORD *)(result + 8);
          *(void *)(v32 + 24) = *(void *)(result + 24);
        }
        else
        {
          uint64_t v32 = v52 + 32 * HIDWORD(v53);
          uint64_t v35 = v48;
          uint64_t v48 = 0;
          *(void *)uint64_t v32 = v35;
          long long v34 = v49;
          *(void *)(v32 + 24) = v50;
        }
        *(_OWORD *)(v32 + 8) = v34;
        HIDWORD(v53) = v31 + 1;
        if (v51)
        {
          uint64_t result = (uint64_t)v48;
          uint64_t v48 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        --v9;
      }
      while (v9);
      uint64_t v36 = HIDWORD(v53);
      uint64_t v17 = (WTF::StringImpl *)v52;
      if (v53 > HIDWORD(v53))
      {
        unint64_t v37 = (WTF::StringImpl *)v52;
        if (HIDWORD(v53))
        {
          if (HIDWORD(v53) >> 27)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v38 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v53)));
          LODWORD(v53) = v36;
          uint64_t v52 = v38;
          unint64_t v37 = v17;
          if ((WTF::StringImpl *)v38 != v17)
          {
            WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(v17, (WTF::StringImpl *)((char *)v17 + 32 * v36), v38);
            unint64_t v37 = (WTF::StringImpl *)v52;
          }
        }
        if (v17)
        {
          if (v37 == v17)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
          }
          WTF::fastFree(v17, v4);
LABEL_21:
          uint64_t v17 = (WTF::StringImpl *)v52;
        }
        else
        {
          uint64_t v17 = v37;
        }
      }
      uint64_t v18 = v53;
      goto LABEL_27;
    }
    if (v9)
    {
      LODWORD(v53) = v9;
      uint64_t v52 = WTF::fastMalloc((WTF *)(32 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v48);
        if (!v51) {
          break;
        }
        int v10 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          unint64_t v11 = WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v52, HIDWORD(v53) + 1, (unint64_t)&v48);
          int v10 = HIDWORD(v53);
          uint64_t v12 = v52 + 32 * HIDWORD(v53);
          uint64_t v13 = *(void *)v11;
          *(void *)unint64_t v11 = 0;
          *(void *)uint64_t v12 = v13;
          long long v14 = *(_OWORD *)(v11 + 8);
          *(void *)(v12 + 24) = *(void *)(v11 + 24);
        }
        else
        {
          uint64_t v12 = v52 + 32 * HIDWORD(v53);
          uint64_t v15 = v48;
          uint64_t v48 = 0;
          *(void *)uint64_t v12 = v15;
          long long v14 = v49;
          *(void *)(v12 + 24) = v50;
        }
        *(_OWORD *)(v12 + 8) = v14;
        HIDWORD(v53) = v10 + 1;
        if (v51)
        {
          uint64_t v16 = v48;
          uint64_t v48 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v4);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        if (!--v9) {
          goto LABEL_21;
        }
      }
LABEL_52:
      WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
LABEL_53:
      uint64_t v39 = *(WTF::StringImpl **)a2;
      uint64_t v40 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v41 = *((void *)a2 + 3);
      if (v41)
      {
        if (v40)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v39);
          id v42 = *(WTF::StringImpl **)a2;
          uint64_t v40 = *((void *)a2 + 1);
          uint64_t v41 = *((void *)a2 + 3);
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
      id v42 = 0;
LABEL_56:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v41)
      {
        if (v40) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v42);
        }
      }
      return IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
LABEL_27:
    uint64_t v43 = v18;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    char v47 = 1;
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
    v46[0] = 0;
    v46[1] = 0;
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v46, v21);
    char v45 = 1;
    v44[0] = 0;
    uint64_t v48 = v17;
    v44[1] = 0;
    *(void *)&long long v49 = v43;
    uint64_t v22 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v48);
    uint64_t v23 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v24 = WebKit::WebExtensionCallbackHandler::call(v22, v23);

    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v25);
    return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v26);
  }
  else
  {
    uint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v19);
  }
}

void sub_199273420(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 48, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v6[0] = 0;
  v6[1] = 0;
  WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)v6);
  uint64_t v2 = (objc_object *)objc_claimAutoreleasedReturnValue();
  id v3 = WebKit::WebExtensionCallbackHandler::call(a1, v2);

  return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

void sub_1992734F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x199273660);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    uint64_t result = WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      long long v7 = *(_OWORD *)((char *)v5 + 8);
      *(void *)(a3 + 24) = *((void *)v5 + 3);
      *(_OWORD *)(a3 + 8) = v7;
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionAlarmParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t result = *v3;
      WTF::StringImpl *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebExtensionAlarmParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_199273894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void WTF::addUnlessNil(WTF *this, NSMutableArray *a2, objc_object *a3)
{
  uint64_t v5 = this;
  uint64_t v4 = a2;
  if (v4) {
    [(WTF *)v5 addObject:v4];
  }
}

void sub_199273944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB920;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB920;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB948;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB948;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchAlarmsEvent(WebKit::WebExtensionAlarmParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPIAlarms *)WebKit::WebExtensionAPINamespace::alarms(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIAlarms::onAlarm(v3);
  uint64_t v5 = **(objc_object ***)(a1 + 8);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

IPC::Encoder *WebKit::WebExtensionAPICommands::getAll(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1648;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  long long v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FB998;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_199273DEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199273EB4()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x199273EA0);
}

uint64_t WebKit::WebExtensionAPICommands::onCommand(WebKit::WebExtensionAPICommands *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 4;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    long long v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        long long v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_199274024(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPICommands::onChanged(WebKit::WebExtensionAPICommands *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 3;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    long long v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        long long v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 176))
  {
    int v5 = WebKit::toWebAPI(a3);
  }
  else
  {
    int v5 = 0;
  }
  id v10 = v5;
  unsigned __int8 v6 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)unsigned __int8 v6 = &unk_1EE9FB9C0;
  *((void *)v6 + 1) = a2;
  *((void *)v6 + 2) = &v10;
  uint64_t v9 = v6;
  uint64_t v7 = WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v9, v7);
  unint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    (*(void (**)(WebCore *))(*(void *)v8 + 8))(v8);
  }
}

void sub_1992741E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(WebKit::WebExtensionContextProxy *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  v14[0] = @"name";
  if (*(void *)a2) {
    uint64_t v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  v15[0] = v7;
  v14[1] = @"oldShortcut";
  if (*(void *)a3) {
    unint64_t v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v8 = &stru_1EEA10550;
  }
  v15[1] = v8;
  void v14[2] = @"newShortcut";
  if (*(void *)a4) {
    uint64_t v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = &stru_1EEA10550;
  }
  v15[2] = v9;
  id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:3];

  uint64_t v10 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v10 = &unk_1EE9FB9E8;
  *((void *)v10 + 1) = &v13;
  uint64_t v12 = v10;
  WebCore::mainThreadNormalWorld(v10);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v12);
  unint64_t v11 = v12;
  uint64_t v12 = 0;
  if (v11) {
    (*(void (**)(WebCore *))(*(void *)v11 + 8))(v11);
  }
}

void sub_1992743C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FB998;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FB998;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && (uint64_t v4 = *(void **)a2) != 0)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v23 = *((void *)a2 + 3);
      if (v23)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          id v24 = *(void **)a2;
          uint64_t v25 = *((void *)a2 + 1);
          uint64_t v26 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v26)
          {
            if (v25) {
              (*(void (**)(uint64_t, void *))(*(void *)v26 + 16))(v26, v24);
            }
          }
        }
      }
      goto LABEL_44;
    }
    unint64_t v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    *((void *)a2 + 2) = v8 + 1;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if (v9 >= 0xAAAA)
    {
      do
      {
        IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>((uint64_t)&v45, a2);
        if (!v48) {
          goto LABEL_43;
        }
        if (HIDWORD(v50) == v50)
        {
          WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>((unsigned int *)&v49, (unint64_t)&v45);
        }
        else
        {
          int v27 = HIDWORD(v50) + 1;
          char v28 = (WTF::StringImpl **)(v49 + 24 * HIDWORD(v50));
          uint64_t v29 = v45;
          char v45 = 0;
          *char v28 = v29;
          uint64_t v30 = v46;
          unint64_t v46 = 0;
          v28[1] = v30;
          int v31 = v47;
          char v47 = 0;
          void v28[2] = v31;
          HIDWORD(v50) = v27;
        }
        uint64_t result = std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v10);
        --v9;
      }
      while (v9);
      unsigned int v32 = HIDWORD(v50);
      uint64_t v16 = (WTF::StringImpl *)v49;
      if (v50 > HIDWORD(v50))
      {
        uint64_t v33 = (WTF::StringImpl *)v49;
        if (HIDWORD(v50))
        {
          if (HIDWORD(v50) >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return result;
          }
          long long v34 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * HIDWORD(v50)));
          LODWORD(v50) = 24 * v32 / 0x18;
          uint64_t v49 = (uint64_t)v34;
          uint64_t v33 = v16;
          if (v34 != (WTF::StringImpl **)v16)
          {
            WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v16, (WTF::StringImpl *)((char *)v16 + 24 * v32), v34);
            uint64_t v33 = (WTF::StringImpl *)v49;
          }
        }
        if (v16)
        {
          if (v33 == v16)
          {
            uint64_t v49 = 0;
            LODWORD(v50) = 0;
          }
          WTF::fastFree(v16, v4);
          uint64_t v16 = (WTF::StringImpl *)v49;
        }
        else
        {
          uint64_t v16 = v33;
        }
      }
      uint64_t v49 = 0;
      uint64_t v40 = v50;
      goto LABEL_22;
    }
    if (v9)
    {
      LODWORD(v50) = 24 * (int)v9 / 0x18u;
      uint64_t v49 = WTF::fastMalloc((WTF *)(24 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>((uint64_t)&v45, a2);
        if (!v48) {
          break;
        }
        if (HIDWORD(v50) == v50)
        {
          WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>((unsigned int *)&v49, (unint64_t)&v45);
        }
        else
        {
          int v11 = HIDWORD(v50) + 1;
          uint64_t v12 = (WTF::StringImpl **)(v49 + 24 * HIDWORD(v50));
          id v13 = v45;
          char v45 = 0;
          WebCore *v12 = v13;
          long long v14 = v46;
          unint64_t v46 = 0;
          v12[1] = v14;
          uint64_t v15 = v47;
          char v47 = 0;
          v12[2] = v15;
          HIDWORD(v50) = v11;
        }
        std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v10);
        if (!--v9)
        {
          uint64_t v16 = (WTF::StringImpl *)v49;
          uint64_t v17 = v50;
          goto LABEL_21;
        }
      }
LABEL_43:
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v10);
      WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v35);
LABEL_44:
      uint64_t v36 = *(void **)a2;
      uint64_t v37 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v38 = *((void *)a2 + 3);
      if (v38)
      {
        if (v37)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v38 + 16))(v38, v36);
          uint64_t v39 = *(void **)a2;
          uint64_t v37 = *((void *)a2 + 1);
          uint64_t v38 = *((void *)a2 + 3);
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v39 = 0;
LABEL_47:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v38)
      {
        if (v37) {
          (*(void (**)(uint64_t, void *))(*(void *)v38 + 16))(v38, v39);
        }
      }
      return IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
LABEL_21:
    uint64_t v40 = v17;
    uint64_t v49 = 0;
LABEL_22:
    uint64_t v50 = 0;
    char v44 = 1;
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v4);
    v43[0] = 0;
    v43[1] = 0;
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v20);
    char v42 = 1;
    v41[0] = 0;
    char v45 = v16;
    v41[1] = 0;
    unint64_t v46 = v40;
    WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)&v45);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v21);
    return WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v22);
  }
  else
  {
    uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v18);
  }
}

void sub_19927497C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 - 48, v12);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v3);
  return WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

void sub_199274A00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_199274A8C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>(unsigned int *a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unsigned int v4 = a1[3];
  unsigned int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 24 * v4);
  uint64_t v7 = *result;
  uint64_t *result = 0;
  void *v6 = v7;
  uint64_t v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  uint64_t v9 = result[2];
  result[2] = 0;
  void v6[2] = v9;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x199274C7CLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 24 * *((unsigned int *)result + 3));
    int v5 = 24 * a2;
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionCommandParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      unsigned int v4 = v3[2];
      void v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      int v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      WTF::StringImpl *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebExtensionCommandParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  unsigned int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)(a2 + 12);
  unsigned int v4 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(a2 + 12)];
  if (*v3)
  {
    int v5 = *(void **)a2;
    uint64_t v6 = *(void *)a2 + 24 * *v3;
    do
    {
      v14[0] = @"name";
      if (*v5) {
        unint64_t v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v7 = &stru_1EEA10550;
      }
      v15[0] = v7;
      v14[1] = @"description";
      if (v5[1]) {
        unint64_t v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v8 = &stru_1EEA10550;
      }
      v15[1] = v8;
      void v14[2] = @"shortcut";
      if (v5[2]) {
        unint64_t v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v9 = &stru_1EEA10550;
      }
      v15[2] = v9;
      unint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:3];

      [v4 addObject:v10];
      v5 += 3;
    }
    while (v5 != (void *)v6);
  }
  int v11 = (objc_object *)[v4 copy];

  id v12 = WebKit::WebExtensionCallbackHandler::call(a1, v11);
}

void sub_199274F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent(WTF::String const&,std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && !*(unsigned char *)(v6 + 144))
  {
    char v7 = 0;
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  v12[8] = 0;
  v12[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  unint64_t v8 = (WebKit::WebExtensionAPICommands *)WebKit::WebExtensionAPINamespace::commands(a3);
  unint64_t v9 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPICommands::onCommand(v8);
  if (**(void **)(a1 + 8)) {
    unint64_t v10 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v10 = (objc_object *)&stru_1EEA10550;
  }
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v9, v10, **(objc_object ***)(a1 + 16));

  uint64_t result = (unsigned int *)MEMORY[0x1997355E0](v12);
  if ((v7 & 1) == 0) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  return result;
}

void sub_1992750AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  MEMORY[0x1997355E0](va);
  if ((v4 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPICommands *)WebKit::WebExtensionAPINamespace::commands(this);
  char v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPICommands::onChanged(v3);
  uint64_t v5 = **(objc_object ***)(a1 + 8);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

void WebKit::WebExtensionAPICookies::parseCookieDetails(unsigned char *a1, void *a2, void *a3, void *a4)
{
  v47[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (_MergedGlobals_115 == 1)
  {
    unint64_t v9 = (void *)qword_1EB359FB0;
  }
  else
  {
    v46[0] = @"name";
    v47[0] = objc_opt_class();
    v46[1] = @"storeId";
    v47[1] = objc_opt_class();
    void v46[2] = @"url";
    void v47[2] = objc_opt_class();
    unint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v47 forKeys:v46 count:3];
    qword_1EB359FB0 = (uint64_t)v9;
    _MergedGlobals_115 = 1;
  }
  if (!WebKit::validateDictionary(v7, @"details", v8, v9, a4))
  {
    *a1 = 0;
    a1[64] = 0;
    goto LABEL_54;
  }
  unint64_t v10 = [v7 objectForKeyedSubscript:@"name"];
  MEMORY[0x19972EAD0](&v45, v10);

  if (!v45 || *((_DWORD *)v45 + 1))
  {
    WTF::URL::URL((WTF::URL *)&v42);
    id v12 = [v7 objectForKeyedSubscript:@"url"];
    uint64_t v13 = v12;
    if (v12)
    {
      if (![v12 length])
      {
        uint64_t v19 = WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_ItMustNotBeEmp.isa, v14);
LABEL_21:
        *a4 = v19;
        *a1 = 0;
        a1[64] = 0;

LABEL_46:
        uint64_t v33 = v42;
        char v42 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v18);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        goto LABEL_50;
      }
      MEMORY[0x19972EAD0](&v41, v13);
      MEMORY[0x19972E890](&v35, &v41, 0);
      WTF::URL::operator=((uint64_t)&v42, (uint64_t)&v35);
      uint64_t v17 = v35;
      uint64_t v35 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v20 = v41;
      uint64_t v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      if ((v43 & 1) == 0)
      {
        uint64_t v19 = WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_IsNotAValidUrl_0.isa, v16, v13);
        goto LABEL_21;
      }
    }

    uint64_t v21 = [v7 objectForKeyedSubscript:@"storeId"];
    uint64_t v13 = v21;
    if (!v21)
    {
      unint64_t v25 = 0;
      LOBYTE(v26) = 0;
      char v27 = 0;
LABEL_27:

      uint64_t v35 = (WTF::StringImpl *)(v26 | v25);
      char v36 = v27;
      char v28 = v45;
      if (v45) {
        *(_DWORD *)v45 += 2;
      }
      uint64_t v37 = v28;
      uint64_t v29 = v42;
      if (v42) {
        *(_DWORD *)v42 += 2;
      }
      uint64_t v38 = v29;
      long long v39 = v43;
      long long v40 = v44;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)a1, (uint64_t)&v35);
      a1[64] = 1;
      uint64_t v30 = v38;
      uint64_t v38 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v18);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      unsigned int v32 = v37;
      uint64_t v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v18);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      goto LABEL_46;
    }
    if (![v21 length])
    {
      uint64_t v19 = WebKit::toErrorString(0, &cfstr_Storeid.isa, &cfstr_ItMustNotBeEmp.isa, v22);
      goto LABEL_21;
    }
    uint64_t v23 = [MEMORY[0x1E4F28FE8] scannerWithString:v13];
    if ([v23 scanString:@"ephemeral-" intoString:0])
    {
      unint64_t v24 = 0x8000000000000000;
    }
    else
    {
      if (![v23 scanString:@"persistent-" intoString:0]) {
        goto LABEL_40;
      }
      unint64_t v24 = 0;
    }
    uint64_t v35 = 0;
    if ([v23 scanUnsignedLongLong:&v35])
    {
      unint64_t v26 = (unint64_t)v35 | v24;
      if (v26 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {

        unint64_t v25 = v26 & 0xFFFFFFFFFFFFFF00;
        char v27 = 1;
        goto LABEL_27;
      }
    }
LABEL_40:

    uint64_t v19 = WebKit::toErrorString(0, &cfstr_Storeid.isa, &cfstr_IsNotAValidCoo.isa, v31, v13);
    goto LABEL_21;
  }
  WebKit::toErrorString(0, &cfstr_Name.isa, &cfstr_ItMustNotBeEmp.isa, v11);
  *a4 = (id)objc_claimAutoreleasedReturnValue();
  *a1 = 0;
  a1[64] = 0;
LABEL_50:
  long long v34 = v45;
  char v45 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v18);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
LABEL_54:
}

void sub_1992755F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v30);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, v30);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::get(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  void v30[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  v30[0] = @"name";
  v30[1] = @"url";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:2];
  WebKit::WebExtensionAPICookies::parseCookieDetails(v27, v7, v8, a4);

  if (v27[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v24, (uint64_t)v27);
    {
      uint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v22);
    }
    uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
    v23[0] = v24;
    v23[1] = &v25;
    _OWORD v23[2] = &v26;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v11 = *a3;
    *a3 = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1649;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v29 = v13;
    IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>(v13, (uint64_t)v23);
    long long v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9FBA10;
    v14[1] = a1;
    void v14[2] = v11;
    uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v28[0] = v14;
    v28[1] = v15;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v29, v28, 0);
    uint64_t v16 = v28[0];
    v28[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v29;
    uint64_t v29 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v9);
      WTF::fastFree(v20, v21);
    }
    uint64_t v18 = v26;
    unint64_t v26 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = v25;
    unint64_t v25 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, (WTF::StringImpl *)v9);
}

void sub_199275A08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v23 = *(void *)(v21 - 128);
  *(void *)(v21 - 128) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  unint64_t v24 = *(IPC::Encoder **)(v21 - 112);
  *(void *)(v21 - 112) = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, a2);
    WTF::fastFree(v25, v26);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20, (WTF::StringImpl *)a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::getAll(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v55[4] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  WebKit::WebExtensionAPICookies::parseCookieDetails(v51, v7, 0, a4);
  if (v51[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v48, (uint64_t)v51);
    if (byte_1EB359FA9 == 1)
    {
      unint64_t v9 = (void *)qword_1EB359FB8;
    }
    else
    {
      v54[0] = @"domain";
      v55[0] = objc_opt_class();
      v54[1] = @"path";
      v55[1] = objc_opt_class();
      v54[2] = @"secure";
      v55[2] = objc_opt_class();
      v54[3] = @"session";
      v55[3] = objc_opt_class();
      unint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v55 forKeys:v54 count:4];
      qword_1EB359FB8 = (uint64_t)v9;
      byte_1EB359FA9 = 1;
    }
    if (WebKit::validateDictionary(v7, @"details", 0, v9, a4))
    {
      LOBYTE(v41) = 0;
      char v42 = 0;
      LOBYTE(v43) = 0;
      char v44 = 0;
      LOBYTE(v45) = 0;
      char v46 = 0;
      int v47 = 0;
      if (v49) {
        std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v41, &v49);
      }
      uint64_t v10 = [v7 objectForKeyedSubscript:@"domain"];
      BOOL v11 = v10 == 0;

      if (!v11)
      {
        uint64_t v12 = [v7 objectForKeyedSubscript:@"domain"];
        MEMORY[0x19972EAD0](&v53, v12);
        WebKit::normalizeDomain(v52, v53);
        if (v44)
        {
          long long v14 = v43;
          long long v43 = v52[0];
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v13);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        else
        {
          long long v43 = v52[0];
          char v44 = 1;
        }
        uint64_t v15 = v53;
        uint64_t v53 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
      uint64_t v16 = [v7 objectForKeyedSubscript:@"path"];
      BOOL v17 = v16 == 0;

      if (!v17)
      {
        id v40 = [v7 objectForKeyedSubscript:@"path"];
        std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v45, &v40);
      }
      uint64_t v18 = [v7 objectForKeyedSubscript:@"secure"];
      BOOL v19 = v18 == 0;

      if (!v19)
      {
        uint64_t v20 = WebKit::objectForKey<NSNumber>(v7, @"secure");
        LOWORD(v47) = [v20 BOOLValue] | 0x100;
      }
      uint64_t v21 = [v7 objectForKeyedSubscript:@"session"];
      BOOL v22 = v21 == 0;

      if (!v22)
      {
        uint64_t v23 = WebKit::objectForKey<NSNumber>(v7, @"session");
        HIWORD(v47) = [v23 BOOLValue] | 0x100;
      }
      {
        long long v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v39);
      }
      uint64_t v24 = WebKit::WebProcess::singleton(void)::process;
      ++*(_DWORD *)(a1 + 48);
      uint64_t v25 = *a3;
      *a3 = 0;
      uint64_t v26 = *(void *)(*(void *)(a1 + 24) + 24);
      char v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v27 = 1650;
      *((void *)v27 + 1) = v26;
      *((void *)v27 + 66) = (char *)v27 + 16;
      *((void *)v27 + 67) = 512;
      *((void *)v27 + 68) = 0;
      *((void *)v27 + 70) = 0;
      *((void *)v27 + 69) = 0;
      IPC::Encoder::encodeHeader(v27);
      uint64_t v53 = v27;
      IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v27, (uint64_t)v48);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)&v50);
      IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::encode(v27, (uint64_t)&v41);
      char v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v28 = &unk_1EE9FBA58;
      *((void *)v28 + 1) = a1;
      *((void *)v28 + 2) = v25;
      uint64_t v29 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v52[0] = v28;
      v52[1] = v29;
      (*(void (**)(uint64_t, const WTF::String **, WTF::StringImpl **, void))(*(void *)(v24 + 24) + 40))(v24 + 24, &v53, v52, 0);
      uint64_t v30 = v52[0];
      v52[0] = 0;
      if (v30) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
      }
      int v31 = v53;
      uint64_t v53 = 0;
      if (v31)
      {
        IPC::Encoder::~Encoder(v31, v8);
        WTF::fastFree(v37, v38);
      }
      if (v46)
      {
        unsigned int v32 = v45;
        char v45 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
      }
      if (v44)
      {
        uint64_t v33 = v43;
        long long v43 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v8);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
      }
      if (v42)
      {
        long long v34 = v41;
        uint64_t v41 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
    }
    uint64_t v35 = v50;
    uint64_t v50 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    char v36 = v49;
    uint64_t v49 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, (WTF::StringImpl *)v8);
}

void sub_199276180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v29);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v29);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v29);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, v29);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v29);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a26, v29);

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::normalizeDomain(WTF::StringImpl **this, const WTF::String *a2)
{
  uint64_t v2 = this;
  if (!a2)
  {
    *this = 0;
    return this;
  }
  *(_DWORD *)a2 += 2;
  *this = a2;
  if (WTF::StringImpl::startsWith())
  {
    this = (WTF::StringImpl **)WTF::StringImpl::substring(a2);
    id v8 = v10;
    *uint64_t v2 = v10;
    if (*(_DWORD *)a2 == 2)
    {
      this = (WTF::StringImpl **)WTF::StringImpl::destroy(a2, v7);
      if (!v10) {
        return this;
      }
    }
    else
    {
      *(_DWORD *)a2 -= 2;
      if (!v10) {
        return this;
      }
    }
  }
  else
  {
    id v8 = a2;
  }
  this = (WTF::StringImpl **)WTF::StringImpl::find((uint64_t)v8, 0x3Au, 0, v4, v5, v6);
  if (this != (WTF::StringImpl **)-1)
  {
    this = (WTF::StringImpl **)WTF::StringImpl::startsWith();
    if (this)
    {
      this = (WTF::StringImpl **)WTF::StringImpl::endsWith();
      if (this)
      {
        this = (WTF::StringImpl **)WTF::StringImpl::substring(v8);
        *uint64_t v2 = v10;
        if (*(_DWORD *)v8 == 2) {
          return (WTF::StringImpl **)WTF::StringImpl::destroy(v8, v9);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  return this;
}

void sub_199276558(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  *uint64_t v2 = 0;
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    MEMORY[0x19972EAD0](a1, *a2);
    *(unsigned char *)(a1 + 8) = 1;
    return a1;
  }
  MEMORY[0x19972EAD0](&v9, *a2);
  double v4 = v9;
  unint64_t v9 = 0;
  double v5 = *(WTF::StringImpl **)a1;
  *(void *)a1 = v4;
  if (v5)
  {
    int v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2)
    {
LABEL_6:
      *(_DWORD *)double v5 = v6;
      return a1;
    }
    WTF::StringImpl::destroy(v5, v3);
    double v5 = v9;
    unint64_t v9 = 0;
    if (v5)
    {
      int v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v7);
        return a1;
      }
      goto LABEL_6;
    }
  }
  return a1;
}

void WebKit::WebExtensionAPICookies::set(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  v87[0] = @"url";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v87 count:1];
  WebKit::WebExtensionAPICookies::parseCookieDetails(v82, v7, v8, a4);

  if (!v82[64]) {
    goto LABEL_82;
  }
  uint64_t v10 = &v78;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)&v78, (uint64_t)v82);
  if (byte_1EB359FAA == 1)
  {
    BOOL v11 = (void *)qword_1EB359FC0;
  }
  else
  {
    v85[0] = @"domain";
    v86[0] = objc_opt_class();
    v85[1] = @"expirationDate";
    v86[1] = objc_opt_class();
    v85[2] = @"httpOnly";
    v86[2] = objc_opt_class();
    v85[3] = @"path";
    v86[3] = objc_opt_class();
    v85[4] = @"sameSite";
    v86[4] = objc_opt_class();
    v85[5] = @"secure";
    v86[5] = objc_opt_class();
    v85[6] = @"value";
    v86[6] = objc_opt_class();
    BOOL v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v86 forKeys:v85 count:7];
    qword_1EB359FC0 = (uint64_t)v11;
    byte_1EB359FAA = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", 0, v11, a4))
  {
    uint64_t v69 = v78;
    char v70 = v79;
    *(_OWORD *)unint64_t v71 = 0u;
    *(_OWORD *)uint64_t v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    memset(v75, 0, sizeof(v75));
    long long v76 = 0u;
    uint64_t v77 = 0;
    WTF::URL::URL((WTF::URL *)((char *)v75 + 8));
    long long v76 = 0uLL;
    LOBYTE(v77) = 0;
    uint64_t v12 = [v7 objectForKeyedSubscript:@"name"];
    uint64_t v13 = (void *)v12;
    if (v12) {
      long long v14 = (__CFString *)v12;
    }
    else {
      long long v14 = &stru_1EEA10550;
    }
    MEMORY[0x19972EAD0](v83, v14);
    uint64_t v16 = v83[0];
    v83[0] = 0;
    BOOL v17 = v71[0];
    v71[0] = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        BOOL v19 = v83[0];
        v83[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v17 -= 2;
        v83[0] = 0;
      }
    }

    uint64_t v20 = [v7 objectForKeyedSubscript:@"value"];
    uint64_t v21 = (void *)v20;
    if (v20) {
      BOOL v22 = (__CFString *)v20;
    }
    else {
      BOOL v22 = &stru_1EEA10550;
    }
    MEMORY[0x19972EAD0](v83, v22);
    uint64_t v24 = v83[0];
    v83[0] = 0;
    uint64_t v25 = v71[1];
    v71[1] = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        char v27 = v83[0];
        v83[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v25 -= 2;
        v83[0] = 0;
      }
    }

    char v28 = [v7 objectForKeyedSubscript:@"secure"];
    if (v28)
    {
      uint64_t v29 = WebKit::objectForKey<NSNumber>(v7, @"secure");
      BYTE9(v74) = [v29 BOOLValue];
    }
    else
    {
      BYTE9(v74) = 0;
    }

    uint64_t v30 = [v7 objectForKeyedSubscript:@"domain"];
    int v31 = v81;
    if (v30)
    {
      uint64_t v10 = [v7 objectForKeyedSubscript:@"domain"];
      MEMORY[0x19972EAD0](v83, v10);
    }
    else
    {
      WTF::URL::host((WTF::URL *)v81);
      if ((v33 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
      WebKit::normalizeDomain(v83, v68);
    }
    long long v34 = v83[0];
    v83[0] = 0;
    uint64_t v35 = v72[0];
    v72[0] = v34;
    if (v35)
    {
      if (*(_DWORD *)v35 != 2)
      {
        *(_DWORD *)v35 -= 2;
        v83[0] = 0;
        if (!v30) {
          goto LABEL_36;
        }
LABEL_43:

        goto LABEL_44;
      }
      WTF::StringImpl::destroy(v35, v32);
      char v36 = v83[0];
      v83[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v32);
          if (v30) {
            goto LABEL_43;
          }
          goto LABEL_36;
        }
        *(_DWORD *)v36 -= 2;
      }
    }
    if (v30) {
      goto LABEL_43;
    }
LABEL_36:
    if (v68)
    {
      if (*(_DWORD *)v68 == 2) {
        WTF::StringImpl::destroy(v68, v32);
      }
      else {
        *(_DWORD *)v68 -= 2;
      }
    }
LABEL_44:

    uint64_t v37 = [v7 objectForKeyedSubscript:@"path"];
    if (v37)
    {
      int v31 = [v7 objectForKeyedSubscript:@"path"];
      MEMORY[0x19972EAD0](v83, v31);
    }
    else
    {
      WTF::URL::path((WTF::URL *)v81);
      if ((v39 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
    }
    id v40 = v83[0];
    v83[0] = 0;
    uint64_t v41 = v72[1];
    v72[1] = v40;
    if (v41)
    {
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
        v83[0] = 0;
        if (!v37) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      WTF::StringImpl::destroy(v41, v38);
      long long v43 = v83[0];
      v83[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v42);
          if (!v37)
          {
LABEL_57:

            char v44 = WebKit::objectForKey<NSNumber>(v7, @"httpOnly");
            BYTE8(v74) = [v44 BOOLValue];

            WTF::WallTime::now(v45);
            *(double *)&long long v73 = v46 * 1000.0;
            int v47 = WebKit::objectForKey<NSNumber>(v7, @"expirationDate");
            [v47 doubleValue];
            if (v48 <= 0.0)
            {
              BYTE10(v74) = 1;
            }
            else
            {
              [v47 doubleValue];
              *((double *)&v73 + 1) = v49 * 1000.0;
              LOBYTE(v74) = 1;
            }

            uint64_t v50 = [v7 objectForKeyedSubscript:@"sameSite"];
            char v51 = v50;
            if (v50)
            {
              if ([v50 isEqualToString:@"no_restriction"])
              {
                char v52 = 0;
              }
              else if ([v51 isEqualToString:@"lax"])
              {
                char v52 = 1;
              }
              else
              {
                if (([v51 isEqualToString:@"strict"] & 1) == 0)
                {
                  WebKit::toErrorString(0, &cfstr_Samesite.isa, &cfstr_ItMustSpecifyE_0.isa, v53);
                  *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_73:
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)v71, v60);
                  goto LABEL_74;
                }
                char v52 = 2;
              }
              LOBYTE(v77) = v52;
            }

            {
              long long v67 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v67);
            }
            uint64_t v54 = WebKit::WebProcess::singleton(void)::process;
            ++*(_DWORD *)(a1 + 48);
            uint64_t v55 = *a3;
            *a3 = 0;
            uint64_t v56 = *(void *)(*(void *)(a1 + 24) + 24);
            uint64_t v57 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v57 = 1653;
            *((void *)v57 + 1) = v56;
            *((void *)v57 + 66) = (char *)v57 + 16;
            *((void *)v57 + 67) = 512;
            *((void *)v57 + 68) = 0;
            *((void *)v57 + 70) = 0;
            *((void *)v57 + 69) = 0;
            IPC::Encoder::encodeHeader(v57);
            int v84 = v57;
            IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v57, (uint64_t)&v78);
            IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v57, (uint64_t)&v69);
            IPC::ArgumentCoder<WebCore::Cookie,void>::encode(v57, (uint64_t)v71);
            uint64_t v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)uint64_t v58 = &unk_1EE9FBAA0;
            *((void *)v58 + 1) = a1;
            *((void *)v58 + 2) = v55;
            uint64_t v59 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
            v83[0] = v58;
            v83[1] = v59;
            (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v54 + 24) + 40))(v54 + 24, &v84, v83, 0);
            int v61 = v83[0];
            v83[0] = 0;
            if (v61) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v61 + 8))(v61);
            }
            char v62 = v84;
            int v84 = 0;
            if (v62)
            {
              IPC::Encoder::~Encoder(v62, v60);
              WTF::fastFree(v65, v66);
            }
            goto LABEL_73;
          }
LABEL_56:

          goto LABEL_57;
        }
        *(_DWORD *)v43 -= 2;
      }
    }
    if (!v37) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_74:
  int v63 = v81[0];
  v81[0] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v9);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  char v64 = v80;
  __int16 v80 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      WTF::StringImpl::destroy(v64, v9);
    }
    else {
      *(_DWORD *)v64 -= 2;
    }
  }
LABEL_82:
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v82, v9);
}

void sub_199276EDC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  WebCore::Cookie::~Cookie(v38, v41);
  if (a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, v42);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, v42);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a37, v42);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::remove(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  void v30[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  v30[0] = @"name";
  v30[1] = @"url";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:2];
  WebKit::WebExtensionAPICookies::parseCookieDetails(v27, v7, v8, a4);

  if (v27[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v24, (uint64_t)v27);
    {
      BOOL v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v22);
    }
    uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
    v23[0] = v24;
    v23[1] = &v25;
    _OWORD v23[2] = &v26;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v11 = *a3;
    *a3 = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1652;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v29 = v13;
    IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>(v13, (uint64_t)v23);
    long long v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9FBAC8;
    v14[1] = a1;
    void v14[2] = v11;
    uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v28[0] = v14;
    v28[1] = v15;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v29, v28, 0);
    uint64_t v16 = v28[0];
    v28[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    BOOL v17 = v29;
    uint64_t v29 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v9);
      WTF::fastFree(v20, v21);
    }
    uint64_t v18 = v26;
    uint64_t v26 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    BOOL v19 = v25;
    uint64_t v25 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, (WTF::StringImpl *)v9);
}

void sub_1992774EC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v23 = *(void *)(v21 - 128);
  *(void *)(v21 - 128) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(IPC::Encoder **)(v21 - 112);
  *(void *)(v21 - 112) = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, a2);
    WTF::fastFree(v25, v26);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20, (WTF::StringImpl *)a2);

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPICookies::getAllCookieStores(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1651;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FBAF0;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_19927783C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199277904()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x1992778F0);
}

uint64_t WebKit::WebExtensionAPICookies::onChanged(WebKit::WebExtensionAPICookies *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 5;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICookies &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICookies &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_199277A74(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(WebKit::WebExtensionContextProxy *this)
{
  uint64_t v2 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v2 = &unk_1EE9FBB38;
  uint64_t v4 = (uint64_t)v2;
  WebCore::mainThreadNormalWorld(v2);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199277B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v3;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 24));
  return a1;
}

void sub_199277B9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

_DWORD *IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBA10;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBA10;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FBA28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_199277EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36)
  {
    uint64_t v38 = *(unsigned int *)(v36 + 168);
    if (v38 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FBA28[v38])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[152] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FBA28[v4])(&v1, v3);
  }
}

void sub_199277F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a34 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FBA28[a34])(&a12, v34);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *(void *)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_19;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_19:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_20;
  }
  if (*v8 >= 2u)
  {
LABEL_20:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    char v44 = 0;
    unsigned __int8 v47 = 0;
    goto LABEL_22;
  }
  if (!*v8)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v37);
    int v11 = BYTE8(v37);
    if (BYTE8(v37))
    {
      v45[0] = v37;
      int v11 = 1;
      int v46 = 1;
    }
    else
    {
      char v44 = 0;
    }
    unsigned __int8 v47 = v11;
    if (v11) {
      goto LABEL_35;
    }
    goto LABEL_22;
  }
  if (v6 <= (unint64_t)&v8[-v5 + 1])
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
      unint64_t v23 = 0;
      uint64_t v34 = *(void *)a2;
      uint64_t v35 = *((void *)a2 + 1);
      uint64_t v36 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v24 = 0;
      if (v36)
      {
        if (v35)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
          uint64_t v24 = *(void *)a2;
          unint64_t v23 = *((void *)a2 + 1);
        }
      }
    }
    goto LABEL_28;
  }
  *((void *)a2 + 2) = v8 + 2;
  unsigned int v9 = v8[1];
  if (v9 >= 2)
  {
    unint64_t v23 = v6;
    uint64_t v24 = v5;
LABEL_28:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26 && v23) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
    }
    goto LABEL_29;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v41);
    if (v43)
    {
      long long v37 = v41;
      WebCore::Cookie::Cookie((uint64_t)v38, v42);
      char v39 = 1;
      char v40 = 1;
      if (v43) {
        goto LABEL_14;
      }
      goto LABEL_30;
    }
LABEL_29:
    LOBYTE(v37) = 0;
    char v40 = 0;
    goto LABEL_30;
  }
  LOBYTE(v41) = 0;
  char v43 = 0;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](&v37, (uint64_t)&v41);
  char v40 = 1;
  if (v43) {
LABEL_14:
  }
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v42, v10);
LABEL_30:
  if (v40
    || (uint64_t v31 = *(void *)a2,
        uint64_t v32 = *((void *)a2 + 1),
        *(void *)a2 = 0,
        *((void *)a2 + 1) = 0,
        (uint64_t v33 = *((void *)a2 + 3)) != 0)
    && v32
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31), v40))
  {
    std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v45, (uint64_t)&v37);
    int v46 = 0;
    int v28 = 1;
    unsigned __int8 v47 = 1;
    if (v40 && v39)
    {
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v38, v27);
      int v28 = v47;
    }
    if (v28) {
      goto LABEL_35;
    }
  }
  else
  {
    char v44 = 0;
    unsigned __int8 v47 = 0;
  }
LABEL_22:
  uint64_t v17 = *(void *)a2;
  uint64_t v18 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *((void *)a2 + 3);
  if (!v19 || !v18 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17), !v47))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 176) = 0;
LABEL_24:
    uint64_t v20 = *(void *)a2;
    uint64_t v21 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v21) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
      }
    }
    return;
  }
LABEL_35:
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  int v29 = v46;
  if (v46 == -1)
  {
    *(unsigned char *)(a1 + 176) = 1;
    return;
  }
  ((void (*)(long long *, uint64_t, void *))off_1EE9FBA38[v46])(&v37, a1 + 8, v45);
  *(_DWORD *)(a1 + 168) = v29;
  int v30 = v47;
  *(unsigned char *)(a1 + 176) = 1;
  if (v30)
  {
    if (v46 != -1)
    {
      ((void (*)(long long *, void *))off_1EE9FBA28[v46])(&v37, v45);
      if (!*(unsigned char *)(a1 + 176)) {
        goto LABEL_24;
      }
    }
  }
}

void sub_1992784C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if ((_BYTE)a30)
  {
    if (a28) {
      WebCore::Cookie::~Cookie((WebCore::Cookie *)&a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::WebExtensionCookieParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 152))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_199278660(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 152)) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)(v2 + 16), a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[152] = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WebCore::Cookie::Cookie((uint64_t)(a1 + 16), (uint64_t *)(a2 + 16));
    a1[152] = 1;
  }
  return a1;
}

void sub_1992786D4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 152)) {
    WebCore::Cookie::~Cookie(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, unsigned char *a2)
{
  if (a2[152]) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)(a2 + 16), a2);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

id WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152)) {
    WebKit::toWebAPI((uint64_t *)a1);
  }
  else {
  char v1 = [MEMORY[0x1E4F1CA98] null];
  }

  return v1;
}

id WebKit::toWebAPI(uint64_t *a1)
{
  v35[10] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = @"domain";
  uint64_t v2 = a1[4];
  if (v2)
  {
    int v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    uint64_t v2 = a1[4];
    uint64_t v24 = v3;
    v35[0] = v3;
    uint64_t v26 = @"hostOnly";
    uint64_t v4 = NSNumber;
    if (v2) {
      LODWORD(v2) = WTF::StringImpl::startsWith();
    }
  }
  else
  {
    uint64_t v24 = &stru_1EEA10550;
    v35[0] = &stru_1EEA10550;
    uint64_t v26 = @"hostOnly";
    uint64_t v4 = NSNumber;
  }
  unint64_t v23 = [v4 numberWithBool:v2 ^ 1];
  v35[1] = v23;
  char v27 = @"httpOnly";
  uint64_t v22 = [NSNumber numberWithBool:*((unsigned __int8 *)a1 + 72)];
  void v35[2] = v22;
  int v28 = @"name";
  if (a1[2]) {
    id v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v5 = &stru_1EEA10550;
  }
  v35[3] = v5;
  int v29 = @"path";
  if (a1[5]) {
    uint64_t v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  v35[4] = v6;
  int v30 = @"sameSite";
  int v7 = *((unsigned __int8 *)a1 + 144);
  char v8 = @"no_restriction";
  if (v7 == 1) {
    char v8 = @"lax";
  }
  if (v7 == 2) {
    unsigned int v9 = @"strict";
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = v9;
  v35[5] = v10;
  uint64_t v31 = @"secure";
  int v11 = [NSNumber numberWithBool:*((unsigned __int8 *)a1 + 73)];
  v35[6] = v11;
  uint64_t v32 = @"session";
  unint64_t v12 = [NSNumber numberWithBool:*((unsigned __int8 *)a1 + 74)];
  v35[7] = v12;
  uint64_t v33 = @"storeId";
  if (!*((unsigned char *)a1 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = @"persistent-";
  if (*a1 < 0 && v13 != -1) {
    uint64_t v14 = @"ephemeral-";
  }
  uint64_t v15 = [NSString stringWithFormat:@"%@%llu", v14, v13 & 0x7FFFFFFFFFFFFFFFLL];
  v35[8] = v15;
  uint64_t v34 = @"value";
  if (a1[3]) {
    uint64_t v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v16 = &stru_1EEA10550;
  }
  v35[9] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v25 count:10];
  uint64_t v18 = (void *)[v17 mutableCopy];

  if (*((unsigned char *)a1 + 64))
  {
    uint64_t v19 = [NSNumber numberWithDouble:*((double *)a1 + 7) / 1000.0];
    [v18 setObject:v19 forKeyedSubscript:@"expirationDate"];
  }
  uint64_t v20 = (void *)[v18 copy];

  return v20;
}

void sub_199278BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBA58;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBA58;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(char **)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v22 = *((void *)a2 + 3);
        if (v22)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
            unint64_t v20 = 0;
            char v39 = *(char **)a2;
            uint64_t v40 = *((void *)a2 + 1);
            uint64_t v41 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v21 = 0;
            if (v41 && v40)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v41 + 16))(v41, v39);
              uint64_t v21 = *(char **)a2;
              unint64_t v20 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v20 = 0;
            uint64_t v21 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        int v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (!v8)
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v49);
            if (BYTE8(v49))
            {
              v46[0] = v49;
              int v17 = 1;
              int v47 = 1;
            }
            else
            {
              int v17 = 0;
              LOBYTE(v46[0]) = 0;
            }
            char v48 = v17;
            int v19 = 1;
LABEL_53:
            if (v17)
            {
              v43[0] = 0;
              int v44 = -1;
              ((void (*)(long long *, unsigned char *, void *))off_1EE9FBA80[v19])(&v49, v43, v46);
              int v44 = v19;
              char v45 = 1;
              if (!v48
                || v47 == -1
                || (((void (*)(long long *, void *))off_1EE9FBA70[v47])(&v49, v46), v45))
              {
LABEL_57:
                WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v43);
                if (v45)
                {
                  if (v44 != -1) {
                    ((void (*)(long long *, unsigned char *))off_1EE9FBA70[v44])(&v49, v43);
                  }
                }
                return;
              }
LABEL_35:
              char v27 = *(char **)a2;
              uint64_t v28 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v29 = *((void *)a2 + 3);
              if (!v29 || !v28 || ((*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v27), !v45))
              {
                IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
                return;
              }
              goto LABEL_57;
            }
LABEL_33:
            uint64_t v24 = *(char **)a2;
            uint64_t v25 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v26 = *((void *)a2 + 3);
            if (v26 && v25) {
              (*(void (**)(uint64_t, char *))(*(void *)v26 + 16))(v26, v24);
            }
            v43[0] = 0;
            char v45 = 0;
            goto LABEL_35;
          }
          unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
          if (v5 >= v9 && v5 - v9 > 7)
          {
            int v11 = (unint64_t *)&v4[v9];
            unint64_t v12 = *v11;
            *((void *)a2 + 2) = v11 + 1;
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            if (v12 >> 1 >= 0xD79)
            {
              while (1)
              {
                IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v49);
                if (!v51) {
                  break;
                }
                if (HIDWORD(v53) == v53)
                {
                  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v52, (unint64_t)&v49);
                }
                else
                {
                  uint64_t v35 = (_OWORD *)(v52 + 152 * HIDWORD(v53));
                  *uint64_t v35 = v49;
                  WebCore::Cookie::Cookie((uint64_t)(v35 + 1), v50);
                  ++HIDWORD(v53);
                }
                if (v51) {
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)v50, v34);
                }
                if (!--v12)
                {
                  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v52, HIDWORD(v53));
LABEL_21:
                  unint64_t v12 = v52;
                  uint64_t v15 = v53;
                  goto LABEL_28;
                }
              }
            }
            else
            {
              if (!v12)
              {
                uint64_t v15 = 0;
LABEL_28:
                uint64_t v42 = v15;
                uint64_t v52 = 0;
                uint64_t v53 = 0;
                int v17 = 1;
                LOBYTE(v50[0]) = 1;
                WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v52, v4);
                long long v49 = 0uLL;
                v46[0] = v12;
                v46[1] = v42;
                int v47 = 0;
                WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v49, v18);
                goto LABEL_52;
              }
              LODWORD(v53) = 152 * (int)v12 / 0x98u;
              uint64_t v52 = WTF::fastMalloc((WTF *)(152 * v12));
              while (1)
              {
                IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v49);
                if (!v51) {
                  break;
                }
                if (HIDWORD(v53) == v53)
                {
                  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v52, (unint64_t)&v49);
                }
                else
                {
                  uint64_t v14 = (_OWORD *)(v52 + 152 * HIDWORD(v53));
                  _OWORD *v14 = v49;
                  WebCore::Cookie::Cookie((uint64_t)(v14 + 1), v50);
                  ++HIDWORD(v53);
                }
                if (v51) {
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)v50, v4);
                }
                if (!--v12) {
                  goto LABEL_21;
                }
              }
            }
            WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v52, v13);
          }
          else
          {
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v30 = *((void *)a2 + 3);
            if (v30)
            {
              (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
              uint64_t v31 = *(char **)a2;
              uint64_t v32 = *((void *)a2 + 1);
              uint64_t v33 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              if (v33)
              {
                if (v32) {
                  (*(void (**)(uint64_t, char *))(*(void *)v33 + 16))(v33, v31);
                }
              }
            }
          }
          uint64_t v36 = *(char **)a2;
          uint64_t v37 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v38 = *((void *)a2 + 3);
          if (v38 && v37) {
            (*(void (**)(uint64_t, char *))(*(void *)v38 + 16))(v38, v36);
          }
          int v17 = 0;
          LOBYTE(v46[0]) = 0;
LABEL_52:
          int v19 = 0;
          char v48 = v17;
          goto LABEL_53;
        }
        unint64_t v20 = v5;
        uint64_t v21 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v23 = *((void *)a2 + 3);
      if (v23 && v20) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
      }
      goto LABEL_33;
    }
  }
  uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v16);
}

void sub_199279314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a15)
  {
    if (a13 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FBA70[a13])(&a25, &a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FBA70[v2])(&v3, v1);
  }
}

void sub_199279438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FBA70[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = (_OWORD *)(*(void *)a1 + 152 * *(unsigned int *)(a1 + 12));
  *uint64_t v4 = *(_OWORD *)v3;
  WebCore::Cookie::Cookie((uint64_t)(v4 + 1), (uint64_t *)(v3 + 16));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 152 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1AF286C)
    {
      __break(0xC471u);
      JUMPOUT(0x199279620);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 152 * *(unsigned int *)(a1 + 12);
    unsigned int v5 = 152 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(152 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x98;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 16;
    do
    {
      *(_OWORD *)(v5 - 16) = *(_OWORD *)v4;
      WebCore::Cookie::Cookie(v5, (uint64_t *)(v4 + 16));
      WebCore::Cookie::~Cookie((WebCore::Cookie *)(v4 + 16), v6);
      v4 += 152;
      v5 += 152;
    }
    while (v4 != a2);
  }
}

void WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      uint64_t v5 = 152 * v4 - 152 * a2;
      uint64_t v6 = (WebCore::Cookie *)(152 * a2 + *(void *)a1 + 16);
      do
      {
        WebCore::Cookie::~Cookie(v6, (void *)a2);
        uint64_t v6 = (WebCore::Cookie *)(v7 + 152);
        v5 -= 152;
      }
      while (v5);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v8 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >= 0x1AF286C)
      {
        __break(0xC471u);
        return;
      }
      unint64_t v9 = (WTF *)(152 * a2);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = v9 / 0x98;
      *(void *)a1 = v10;
      if ((WTF *)v10 != v8) {
        WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move((uint64_t)v8, (uint64_t)v8 + 152 * v4, v10);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

_DWORD *WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 152 * v3;
    uint64_t v5 = (WebCore::Cookie *)(*(void *)a1 + 16);
    do
    {
      WebCore::Cookie::~Cookie(v5, a2);
      uint64_t v5 = (WebCore::Cookie *)(v6 + 152);
      v4 -= 152;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2)
{
  return WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      uint64_t v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(void *)a2) {
      uint64_t v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v6 = &stru_1EEA10550;
    }
    int v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    id v7 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
    unint64_t v8 = v7;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }

    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = *(uint64_t **)a2;
      uint64_t v11 = 152 * v9;
      do
      {
        WTF::RetainPtr<NSSet>::get((id *)&cf);
        unint64_t v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        uint64_t v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 19;
        v11 -= 152;
      }
      while (v11);
    }
    WTF::RetainPtr<NSSet>::get((id *)&cf);
    uint64_t v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    CFTypeRef v16 = cf;
    int v19 = v15;
    CFTypeRef cf = 0;
    if (v16)
    {
      CFRelease(v16);
      uint64_t v15 = v19;
    }
    id v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBAA0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBAA0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FBA28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_199279C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36)
  {
    uint64_t v38 = *(unsigned int *)(v36 + 168);
    if (v38 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FBA28[v38])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[152] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FBA28[v4])(&v1, v3);
  }
}

void sub_199279D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a34 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FBA28[a34])(&a12, v34);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBAC8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBAC8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FBA28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_19927A064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36)
  {
    uint64_t v38 = *(unsigned int *)(v36 + 168);
    if (v38 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FBA28[v38])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[152] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FBA28[v4])(&v1, v3);
  }
}

void sub_19927A138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a34 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FBA28[a34])(&a12, v34);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBAF0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBAF0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v44 = 0;
        uint64_t v45 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v46 = *((void *)a2 + 3);
        if (v46)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
            unint64_t v44 = 0;
            uint64_t v58 = *(void *)a2;
            uint64_t v59 = *((void *)a2 + 1);
            uint64_t v60 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v45 = 0;
            if (v60 && v59)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
              uint64_t v45 = *(void *)a2;
              unint64_t v44 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v44 = 0;
            uint64_t v45 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        id v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (v8)
          {
            unint64_t v9 = ((unint64_t)(v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
            if (v5 < v9 || v5 - v9 <= 3)
            {
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v54 = *((void *)a2 + 3);
              if (v54)
              {
                (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
                uint64_t v55 = *(void *)a2;
                uint64_t v56 = *((void *)a2 + 1);
                uint64_t v57 = *((void *)a2 + 3);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                if (v57)
                {
                  if (v56) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55);
                  }
                }
              }
              goto LABEL_58;
            }
            uint64_t v11 = (int *)(v4 + v9);
            int v13 = *v11;
            int v12 = *v11;
            *((void *)a2 + 2) = v11 + 1;
            uint64_t v70 = 0;
            if (!v13)
            {
              uint64_t v42 = 0;
LABEL_61:
              char v64 = (WTF *)v42;
              int v65 = 0;
              int v38 = 1;
              goto LABEL_62;
            }
            int v14 = 0;
            while (1)
            {
              uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
              if (!(_BYTE)v16
                || (uint64_t v17 = v15,
                    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, v16, (uint64_t)&v67), !v69))
              {
LABEL_56:
                if (v70) {
                  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(v70, v16);
                }
LABEL_58:
                uint64_t v39 = *(void *)a2;
                uint64_t v40 = *((void *)a2 + 1);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v41 = *((void *)a2 + 3);
                if (v41 && v40) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
                }
                int v38 = 0;
LABEL_60:
                LOBYTE(v64) = 0;
                goto LABEL_62;
              }
              if ((unint64_t)(v17 - 1) > 0xFFFFFFFFFFFFFFFDLL)
              {
                char v32 = 0;
LABEL_41:
                uint64_t v36 = v67;
                if (v67)
                {
                  long long v67 = 0;
                  LODWORD(v68) = 0;
                  WTF::fastFree(v36, v16);
                }
                goto LABEL_43;
              }
              uint64_t v18 = v70;
              if (v70
                || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v70, 0), (uint64_t v18 = v70) != 0))
              {
                int v19 = *(_DWORD *)(v18 - 8);
              }
              else
              {
                int v19 = 0;
              }
              unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
              unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
              uint64_t v24 = v18 + 24 * v23;
              uint64_t v25 = *(void *)v24;
              if (*(void *)v24)
              {
                uint64_t v26 = 0;
                int v27 = 1;
                do
                {
                  if (v25 == v17)
                  {
                    char v32 = 0;
                    goto LABEL_40;
                  }
                  if (v25 == -1) {
                    uint64_t v26 = (void *)v24;
                  }
                  unsigned int v23 = (v23 + v27) & v19;
                  uint64_t v24 = v18 + 24 * v23;
                  uint64_t v25 = *(void *)v24;
                  ++v27;
                }
                while (*(void *)v24);
                if (v26)
                {
                  void *v26 = 0;
                  v26[1] = 0;
                  v26[2] = 0;
                  --*(_DWORD *)(v18 - 16);
                  uint64_t v24 = (uint64_t)v26;
                }
              }
              *(void *)uint64_t v24 = v17;
              uint64_t v28 = v67;
              uint64_t v29 = v68;
              long long v67 = 0;
              uint64_t v68 = 0;
              uint64_t v30 = *(WTF **)(v24 + 8);
              if (v30)
              {
                *(void *)(v24 + 8) = 0;
                *(_DWORD *)(v24 + 16) = 0;
                WTF::fastFree(v30, v16);
              }
              *(void *)(v24 + 8) = v28;
              *(void *)(v24 + 16) = v29;
              int v31 = v70 ? *(_DWORD *)(v70 - 12) + 1 : 1;
              *(_DWORD *)(v70 - 12) = v31;
              int v33 = v70 ? *(_DWORD *)(v70 - 12) : 0;
              uint64_t v34 = (*(_DWORD *)(v70 - 16) + v33);
              unint64_t v35 = *(unsigned int *)(v70 - 4);
              if (v35 > 0x400) {
                break;
              }
              if (3 * v35 <= 4 * v34) {
                goto LABEL_38;
              }
LABEL_39:
              char v32 = 1;
LABEL_40:
              if (v69) {
                goto LABEL_41;
              }
LABEL_43:
              if ((v32 & 1) == 0) {
                goto LABEL_56;
              }
              if (++v14 == v12)
              {
                uint64_t v42 = v70;
                goto LABEL_61;
              }
            }
            if (v35 > 2 * v34) {
              goto LABEL_39;
            }
LABEL_38:
            WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v70, v24);
            goto LABEL_39;
          }
          IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v67);
          int v38 = v68;
          if (!(_BYTE)v68) {
            goto LABEL_60;
          }
          char v64 = v67;
          int v38 = 1;
          int v65 = 1;
LABEL_62:
          char v66 = v38;
          if (v38)
          {
            LOBYTE(v61) = 0;
            int v62 = -1;
            int v43 = v65;
            if (v65 == -1)
            {
              char v63 = 1;
            }
            else
            {
              ((void (*)(WTF **, int *, WTF **))off_1EE9FBB18[v65])(&v67, &v61, &v64);
              int v62 = v43;
              char v63 = 1;
              if (v66)
              {
                if (v65 != -1)
                {
                  ((void (*)(WTF **, WTF **))off_1EE9FBB08[v65])(&v67, &v64);
                  if (!v63) {
                    goto LABEL_79;
                  }
                }
              }
            }
LABEL_69:
            WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), &v61);
            if (v63)
            {
              if (v62 != -1) {
                ((void (*)(WTF **, int *))off_1EE9FBB08[v62])(&v67, &v61);
              }
            }
            return;
          }
LABEL_77:
          uint64_t v48 = *(void *)a2;
          uint64_t v49 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v50 = *((void *)a2 + 3);
          if (v50 && v49) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48);
          }
          LOBYTE(v61) = 0;
          char v63 = 0;
LABEL_79:
          uint64_t v51 = *(void *)a2;
          uint64_t v52 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v53 = *((void *)a2 + 3);
          if (!v53 || !v52 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51), !v63))
          {
            IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
            return;
          }
          goto LABEL_69;
        }
        unint64_t v44 = v5;
        uint64_t v45 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v47 = *((void *)a2 + 3);
      if (v47 && v44) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
      }
      goto LABEL_77;
    }
  }
  uint64_t v37 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v37);
}

void sub_19927A944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, int a19, char a20,WTF *a21,int a22,int a23,char a24,uint64_t a25)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(WTF **, uint64_t *))off_1EE9FBB08[a10])(&a21, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, &v1);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FBB08[v2])(&v3, &v1);
  }
}

void sub_19927AA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FBB08[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_19927AB24(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *a1;
        uint64_t v20 = a1[1];
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_29;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    uint64_t v20 = v5;
    uint64_t v21 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result)
    {
      if (v20) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v21);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      uint64_t v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v24 = v18;
      uint64_t v25 = a2;
      if (!(_BYTE)a2) {
        break;
      }
      if (HIDWORD(v27) == v27)
      {
        CFTypeRef v16 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((void *)v26 + HIDWORD(v27)) = *v16;
      }
      else
      {
        *((void *)v26 + HIDWORD(v27)) = v18;
      }
      unint64_t v17 = ++HIDWORD(v27);
      if (!--v10)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v26, v17);
        *(void *)a3 = v26;
        uint64_t v23 = v27;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        *(void *)(a3 + 8) = v23;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      int v13 = 0;
      int v15 = 0;
      int v14 = 0;
LABEL_17:
      uint64_t v26 = 0;
      *(void *)a3 = v14;
      HIDWORD(v27) = 0;
      *(_DWORD *)(a3 + 8) = v15;
      *(_DWORD *)(a3 + 12) = v13;
LABEL_18:
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v27) = v10;
    uint64_t v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v24 = v11;
      uint64_t v25 = a2;
      if (!(_BYTE)a2) {
        break;
      }
      if (HIDWORD(v27) == v27)
      {
        uint64_t v12 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((void *)v26 + HIDWORD(v27)) = *v12;
      }
      else
      {
        *((void *)v26 + HIDWORD(v27)) = v11;
      }
      int v13 = ++HIDWORD(v27);
      if (!--v10)
      {
        int v14 = v26;
        int v15 = v27;
        goto LABEL_17;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_25:
  uint64_t result = v26;
  if (v26)
  {
    uint64_t v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_19927ADAC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 24 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v13 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    uint64_t v15 = v6;
    do
    {
      if (*(void *)v15 != -1)
      {
        if (*(void *)v15)
        {
          unint64_t v17 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(a1, (void *)v15);
          uint64_t v18 = (WTF *)v17[1];
          if (v18)
          {
            v17[1] = 0;
            *((_DWORD *)v17 + 4) = 0;
            WTF::fastFree(v18, v10);
          }
          uint64_t v19 = *(void *)v15;
          v17[1] = 0;
          v17[2] = 0;
          uint64_t v20 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          void *v17 = v19;
          v17[1] = v20;
          LODWORD(v19) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = 0;
          *((_DWORD *)v17 + 4) = v19;
          LODWORD(v19) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = 0;
          *((_DWORD *)v17 + 5) = v19;
          uint64_t v21 = *(WTF **)(v15 + 8);
          if (v21)
          {
            *(void *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v21, v10);
          }
          if (v15 == a3) {
            int v13 = v17;
          }
        }
        else
        {
          CFTypeRef v16 = *(WTF **)(v15 + 8);
          if (v16)
          {
            *(void *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v16, v10);
          }
        }
      }
      v15 += 24;
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    uint64_t result = (void *)(v2 + 24 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (*result);
  return result;
}

uint64_t WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        unint64_t v5 = *(WTF **)v4;
        if (*(void *)v4)
        {
          *(void *)uint64_t v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSP_ISM_EENS8_15HashTableTraitsEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJST_SU_EEEEEEDcSY_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSP_ISM_EENS8_15HashTableTraitsEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJST_SU_EEEEEEDcSY_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSP_ISM_EENS8_15HashTableTraitsEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJST_SU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSP_ISM_EENS8_15HashTableTraitsEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJST_SU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, _DWORD *a2)
{
  v39[3] = *MEMORY[0x1E4F143B8];
  int v3 = a2[2];
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v34 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v34);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    unint64_t v5 = a1;
    uint64_t v36 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v5, &v4->isa);

    return;
  }
  if (*(void *)a2) {
    uint64_t v6 = *(unsigned int *)(*(void *)a2 - 12);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v6];
  uint64_t v8 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    unint64_t v10 = (uint64_t *)(v8 + 24 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      uint64_t v11 = *(uint64_t **)a2;
      if (v9)
      {
        uint64_t v12 = 24 * v9;
        uint64_t v11 = *(uint64_t **)a2;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 3;
          v12 -= 24;
          if (!v12)
          {
            uint64_t v11 = v10;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    uint64_t v11 = (uint64_t *)(v8 + 24 * v9);
  }
  else
  {
    uint64_t v11 = 0;
    LODWORD(v9) = 0;
  }
  unint64_t v10 = (uint64_t *)(v8 + 24 * v9);
LABEL_21:
  if (v8) {
    int v13 = (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  }
  else {
    int v13 = 0;
  }
  while (v11 != v13)
  {
    id v14 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v11 + 5)];
    uint64_t v15 = v14;
    CFTypeRef cf = v14;
    if (v14) {
      CFRetain(v14);
    }

    uint64_t v16 = *((unsigned int *)v11 + 5);
    if (v16)
    {
      unint64_t v17 = (unint64_t *)v11[1];
      uint64_t v18 = 8 * v16;
      do
      {
        WTF::RetainPtr<NSSet>::get((id *)&cf);
        uint64_t v19 = (WTF *)objc_claimAutoreleasedReturnValue();
        double v20 = (double)*v17;
        if (*v17 == -2) {
          double v20 = -1.0;
        }
        uint64_t v21 = [NSNumber numberWithDouble:v20];
        WTF::addUnlessNil(v19, v21, v22);

        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    uint64_t v23 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    CFTypeRef v24 = cf;
    CFTypeRef cf = 0;
    if (v24) {
      CFRelease(v24);
    }
    v38[0] = @"id";
    uint64_t v25 = *v11;
    uint64_t v26 = @"persistent-";
    if (*v11 < 0 && v25 != -1) {
      uint64_t v26 = @"ephemeral-";
    }
    uint64_t v27 = [NSString stringWithFormat:@"%@%llu", v26, v25 & 0x7FFFFFFFFFFFFFFFLL];
    v39[0] = v27;
    v39[1] = v23;
    v38[1] = @"tabIds";
    v38[2] = @"incognito";
    BOOL v28 = *v11 < 0 && *v11 != -1;
    uint64_t v29 = [NSNumber numberWithBool:v28];
    void v39[2] = v29;
    uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:3];
    [v7 addObject:v30];

    int v31 = v11 + 3;
    uint64_t v11 = v10;
    if (v31 != v10)
    {
      uint64_t v11 = v31;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 3;
        if (v11 == v10)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
  }
  char v32 = (objc_object *)[v7 copy];

  id v33 = WebKit::WebExtensionCallbackHandler::call(a1, v32);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(void)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(int a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v2 = (WebKit::WebExtensionAPICookies *)WebKit::WebExtensionAPINamespace::cookies(this);
  int v3 = (unsigned int *)WebKit::WebExtensionAPICookies::onChanged(v2);

  return WebKit::WebExtensionAPIEvent::invokeListeners(v3);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  void v35[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = &qword_1EB359000;
  if ((_MergedGlobals_116 & 1) == 0)
  {
    v34[0] = @"disableRulesetIds";
    uint64_t v33 = objc_opt_class();
    uint64_t v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v33 count:1];
    v34[1] = @"enableRulesetIds";
    v35[0] = v25;
    uint64_t v32 = objc_opt_class();
    uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v32 count:1];
    v35[1] = v26;
    qword_1EB359FD0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:2];

    _MergedGlobals_116 = 1;
    uint64_t v8 = &qword_1EB359000;
  }
  if (WebKit::validateDictionary(v7, @"options", 0, (void *)v8[506], a4))
  {
    uint64_t v9 = objc_opt_class();
    unint64_t v10 = WebKit::objectForKey<NSArray>(v7, @"enableRulesetIds", 1, v9);
    WTF::makeVector<WTF::String>(v10, (uint64_t)v29);

    uint64_t v11 = objc_opt_class();
    uint64_t v12 = WebKit::objectForKey<NSArray>(v7, @"disableRulesetIds", 1, v11);
    WTF::makeVector<WTF::String>(v12, (uint64_t)v28);

    {
      uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v13 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v14 = *a3;
    *a3 = 0;
    uint64_t v15 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 1661;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    int v31 = v16;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v16, (uint64_t)v29);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v16, (uint64_t)v28);
    unint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9FBB60;
    v17[1] = a1;
    v17[2] = v14;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v30[0] = v17;
    v30[1] = v18;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v13 + 24) + 40))(v13 + 24, &v31, v30, 0);
    uint64_t v20 = v30[0];
    v30[0] = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = v31;
    int v31 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v23, v24);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v19);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v22);
  }
}

void sub_19927B8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1656;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FBB88;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_19927BBE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19927BCA8()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x19927BC94);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB359FC9 & 1) == 0)
  {
    v70[0] = @"addRules";
    uint64_t v69 = objc_opt_class();
    uint64_t v46 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v69 count:1];
    v70[1] = @"removeRuleIds";
    v71[0] = v46;
    uint64_t v68 = objc_opt_class();
    uint64_t v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v68 count:1];
    v71[1] = v47;
    qword_1EB359FD8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:v70 count:2];

    byte_1EB359FC9 = 1;
  }
  if (WebKit::validateDictionary(v7, @"options", 0, (void *)qword_1EB359FD8, a4))
  {
    uint64_t v51 = v7;
    uint64_t v8 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, @"addRules", 0, v8);
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = [v9 countByEnumeratingWithState:&v60 objects:v67 count:16];
    uint64_t v49 = a3;
    uint64_t v50 = a1;
    if (v10)
    {
      uint64_t v11 = 0;
      id v12 = 0;
      uint64_t v13 = *(void *)v61;
      while (2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v10 + v11;
        uint64_t v16 = v12;
        do
        {
          if (*(void *)v61 != v13) {
            objc_enumerationMutation(v9);
          }
          uint64_t v17 = *(void *)(*((void *)&v60 + 1) + 8 * v14);
          uint64_t v18 = [_WKWebExtensionDeclarativeNetRequestRule alloc];
          id v59 = v16;
          uint64_t v19 = [(_WKWebExtensionDeclarativeNetRequestRule *)v18 initWithDictionary:v17 errorString:&v59];
          id v12 = v59;

          if (!v19)
          {
            WebKit::toErrorString(0, &cfstr_Addrules.isa, &cfstr_AnErrorWithRul.isa, v20, v11 + v14, v12);
            *a4 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_43;
          }
          ++v14;
          uint64_t v16 = v12;
        }
        while (v10 != v14);
        uint64_t v10 = [v9 countByEnumeratingWithState:&v60 objects:v67 count:16];
        uint64_t v11 = v15;
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v12 = 0;
    }

    uint64_t v58 = 0;
    if (v9)
    {
      uint64_t v21 = WebKit::encodeJSONString(v9, 1, 0);
      MEMORY[0x19972EAD0](v64, v21);
      uint64_t v22 = v64[0];
      v64[0] = 0;
      uint64_t v58 = v22;
    }
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v23 = objc_opt_class();
    CFTypeRef v24 = WebKit::objectForKey<NSArray>(v51, @"removeRuleIds", 0, v23);
    uint64_t v25 = v24;
    if (v24)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v26 = v24;
      uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v66 count:16];
      if (v27)
      {
        BOOL v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = *(void *)v53;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v53 != v30) {
              objc_enumerationMutation(v26);
            }
            [*(id *)(*((void *)&v52 + 1) + 8 * i) doubleValue];
            v64[0] = v32;
            if (v29 == v57)
            {
              uint64_t v33 = (void *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, v29 + 1, (unint64_t)v64);
              unsigned int v29 = HIDWORD(v57);
              BOOL v28 = v56;
              *((void *)v56 + HIDWORD(v57)) = *v33;
            }
            else
            {
              *((void *)v28 + v29) = v32;
            }
            HIDWORD(v57) = ++v29;
          }
          uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v66 count:16];
        }
        while (v27);
      }
      else
      {
        unsigned int v29 = 0;
        BOOL v28 = 0;
      }
    }
    else
    {
      unsigned int v29 = 0;
      BOOL v28 = 0;
    }

    {
      uint64_t v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v48);
    }
    uint64_t v34 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(v50 + 48);
    uint64_t v35 = *v49;
    uint64_t *v49 = 0;
    uint64_t v36 = *(void *)(*(void *)(v50 + 24) + 24);
    uint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v37 = 1660;
    *((void *)v37 + 1) = v36;
    *((void *)v37 + 66) = (char *)v37 + 16;
    *((void *)v37 + 67) = 512;
    *((void *)v37 + 68) = 0;
    *((void *)v37 + 70) = 0;
    *((void *)v37 + 69) = 0;
    IPC::Encoder::encodeHeader(v37);
    int v65 = v37;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, (uint64_t *)&v58);
    IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v37, v28, v29);
    int v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)int v38 = &unk_1EE9FBBB0;
    *((void *)v38 + 1) = v50;
    *((void *)v38 + 2) = v35;
    uint64_t v39 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v64[0] = v38;
    v64[1] = v39;
    (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v34 + 24) + 40))(v34 + 24, &v65, v64, 0);
    uint64_t v41 = v64[0];
    v64[0] = 0;
    if (v41) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v41 + 8))(v41);
    }
    uint64_t v42 = v65;
    int v65 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v40);
      WTF::fastFree(v44, v45);
    }
    if (v56) {
      WTF::fastFree(v56, v40);
    }
    int v43 = v58;
    uint64_t v58 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
LABEL_43:

    id v7 = v51;
  }
}

void sub_19927C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,IPC::Encoder *a38)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1655;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FBBD8;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_19927C690(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19927C758()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x19927C744);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB359FCA & 1) == 0)
  {
    v70[0] = @"addRules";
    uint64_t v69 = objc_opt_class();
    uint64_t v46 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v69 count:1];
    v70[1] = @"removeRuleIds";
    v71[0] = v46;
    uint64_t v68 = objc_opt_class();
    uint64_t v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v68 count:1];
    v71[1] = v47;
    qword_1EB359FE0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:v70 count:2];

    byte_1EB359FCA = 1;
  }
  if (WebKit::validateDictionary(v7, @"options", 0, (void *)qword_1EB359FE0, a4))
  {
    uint64_t v51 = v7;
    uint64_t v8 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, @"addRules", 0, v8);
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = [v9 countByEnumeratingWithState:&v60 objects:v67 count:16];
    uint64_t v49 = a3;
    uint64_t v50 = a1;
    if (v10)
    {
      uint64_t v11 = 0;
      id v12 = 0;
      uint64_t v13 = *(void *)v61;
      while (2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v10 + v11;
        uint64_t v16 = v12;
        do
        {
          if (*(void *)v61 != v13) {
            objc_enumerationMutation(v9);
          }
          uint64_t v17 = *(void *)(*((void *)&v60 + 1) + 8 * v14);
          uint64_t v18 = [_WKWebExtensionDeclarativeNetRequestRule alloc];
          id v59 = v16;
          uint64_t v19 = [(_WKWebExtensionDeclarativeNetRequestRule *)v18 initWithDictionary:v17 errorString:&v59];
          id v12 = v59;

          if (!v19)
          {
            WebKit::toErrorString(0, &cfstr_Addrules.isa, &cfstr_AnErrorWithRul.isa, v20, v11 + v14, v12);
            *a4 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_43;
          }
          ++v14;
          uint64_t v16 = v12;
        }
        while (v10 != v14);
        uint64_t v10 = [v9 countByEnumeratingWithState:&v60 objects:v67 count:16];
        uint64_t v11 = v15;
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v12 = 0;
    }

    uint64_t v58 = 0;
    if (v9)
    {
      uint64_t v21 = WebKit::encodeJSONString(v9, 1, 0);
      MEMORY[0x19972EAD0](v64, v21);
      uint64_t v22 = v64[0];
      v64[0] = 0;
      uint64_t v58 = v22;
    }
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v23 = objc_opt_class();
    CFTypeRef v24 = WebKit::objectForKey<NSArray>(v51, @"removeRuleIds", 0, v23);
    uint64_t v25 = v24;
    if (v24)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v26 = v24;
      uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v66 count:16];
      if (v27)
      {
        BOOL v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = *(void *)v53;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v53 != v30) {
              objc_enumerationMutation(v26);
            }
            [*(id *)(*((void *)&v52 + 1) + 8 * i) doubleValue];
            v64[0] = v32;
            if (v29 == v57)
            {
              uint64_t v33 = (void *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, v29 + 1, (unint64_t)v64);
              unsigned int v29 = HIDWORD(v57);
              BOOL v28 = v56;
              *((void *)v56 + HIDWORD(v57)) = *v33;
            }
            else
            {
              *((void *)v28 + v29) = v32;
            }
            HIDWORD(v57) = ++v29;
          }
          uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v66 count:16];
        }
        while (v27);
      }
      else
      {
        unsigned int v29 = 0;
        BOOL v28 = 0;
      }
    }
    else
    {
      unsigned int v29 = 0;
      BOOL v28 = 0;
    }

    {
      uint64_t v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v48);
    }
    uint64_t v34 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(v50 + 48);
    uint64_t v35 = *v49;
    uint64_t *v49 = 0;
    uint64_t v36 = *(void *)(*(void *)(v50 + 24) + 24);
    uint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v37 = 1662;
    *((void *)v37 + 1) = v36;
    *((void *)v37 + 66) = (char *)v37 + 16;
    *((void *)v37 + 67) = 512;
    *((void *)v37 + 68) = 0;
    *((void *)v37 + 70) = 0;
    *((void *)v37 + 69) = 0;
    IPC::Encoder::encodeHeader(v37);
    int v65 = v37;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, (uint64_t *)&v58);
    IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v37, v28, v29);
    int v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)int v38 = &unk_1EE9FBC10;
    *((void *)v38 + 1) = v50;
    *((void *)v38 + 2) = v35;
    uint64_t v39 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v64[0] = v38;
    v64[1] = v39;
    (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v34 + 24) + 40))(v34 + 24, &v65, v64, 0);
    uint64_t v41 = v64[0];
    v64[0] = 0;
    if (v41) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v41 + 8))(v41);
    }
    uint64_t v42 = v65;
    int v65 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v40);
      WTF::fastFree(v44, v45);
    }
    if (v56) {
      WTF::fastFree(v56, v40);
    }
    int v43 = v58;
    uint64_t v58 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
LABEL_43:

    id v7 = v51;
  }
}

void sub_19927CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,IPC::Encoder *a38)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1658;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FBC38;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_19927D140(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19927D208()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x19927D1F4);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v55[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = *(WebKit::WebExtensionContextProxy **)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v49 = *(WTF::StringImpl **)&__y[0];
  unsigned int v10 = WebKit::WebExtensionContextProxy::hasPermission(v8, &v49);
  uint64_t v11 = v49;
  uint64_t v49 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  id v12 = *(WebKit::WebExtensionContextProxy **)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v49 = *(WTF::StringImpl **)&__y[0];
  unsigned int v15 = WebKit::WebExtensionContextProxy::hasPermission(v12, &v49);
  uint64_t v16 = v49;
  uint64_t v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if ((v10 | v15))
  {
    if ((byte_1EB359FCB & 1) == 0)
    {
      v55[0] = @"tabId";
      qword_1EB359FE8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:1];
      byte_1EB359FCB = 1;
    }
    if ((byte_1EB359FCC & 1) == 0)
    {
      v53[0] = @"tabId";
      uint64_t v45 = objc_opt_class();
      v53[1] = @"minTimeStamp";
      v54[0] = v45;
      v54[1] = objc_opt_class();
      qword_1EB359FF0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v54 forKeys:v53 count:2];
      byte_1EB359FCC = 1;
    }
    uint64_t v17 = (void *)qword_1EB359FE8;
    if (v10) {
      uint64_t v17 = (void *)MEMORY[0x1E4F1CBF0];
    }
    id v18 = v17;
    if (!WebKit::validateDictionary(v7, 0, v18, (void *)qword_1EB359FF0, a4)) {
      goto LABEL_35;
    }
    uint64_t v19 = WebKit::objectForKey<NSNumber>(v7, @"tabId");
    uint64_t v20 = v19;
    if (!v19)
    {
      LOBYTE(v49) = 0;
      LOBYTE(v50) = 0;
      goto LABEL_26;
    }
    [v19 doubleValue];
    double v23 = v22;
    if (v22 == -1.0)
    {
      unint64_t v24 = -256;
      LOBYTE(v25) = -2;
    }
    else
    {
      uint64_t v26 = 0;
      if ((v22 < 0.0 || ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(void *)&v22 - 1) > 0xFFFFFFFFFFFFELL)
      {
        LOBYTE(v25) = 0;
        unint64_t v24 = 0;
        goto LABEL_21;
      }
      LOBYTE(v25) = 0;
      unint64_t v24 = 0;
      if (v22 >= 1.84467441e19)
      {
LABEL_21:
        uint64_t v27 = (WTF::StringImpl *)(v24 & 0xFFFFFFFFFFFFFF00 | v25);
        uint64_t v49 = v27;
        uint64_t v50 = v26;
        if (!v26 || v27 == (WTF::StringImpl *)-2)
        {
          WebKit::toErrorString(0, &cfstr_Tabid.isa, &cfstr_IsNotAValidTab.isa, v21, v20);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:

LABEL_35:
          goto LABEL_36;
        }
LABEL_26:
        BOOL v28 = WebKit::objectForKey<NSNumber>(v7, @"minTimeStamp");
        unsigned int v29 = v28;
        LOBYTE(v47) = 0;
        char v48 = 0;
        if (v28)
        {
          [v28 doubleValue];
          char v48 = 1;
          double v47 = v30 / 1000.0;
        }
        {
          uint64_t v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v46);
        }
        uint64_t v31 = WebKit::WebProcess::singleton(void)::process;
        ++*(_DWORD *)(a1 + 48);
        uint64_t v32 = *a3;
        *a3 = 0;
        uint64_t v33 = *(void *)(*(void *)(a1 + 24) + 24);
        uint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v34 = 1657;
        *((void *)v34 + 1) = v33;
        *((void *)v34 + 66) = (char *)v34 + 16;
        *((void *)v34 + 67) = 512;
        *((void *)v34 + 68) = 0;
        *((void *)v34 + 70) = 0;
        *((void *)v34 + 69) = 0;
        IPC::Encoder::encodeHeader(v34);
        long long v52 = v34;
        IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v34, (uint64_t)&v49);
        IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v34, (uint64_t)&v47);
        uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v35 = &unk_1EE9FBC60;
        v35[1] = a1;
        void v35[2] = v32;
        uint64_t v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        *(void *)&__y[0] = v35;
        *(void *)&__y[1] = v36;
        (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v31 + 24) + 40))(v31 + 24, &v52, __y, 0);
        long double v38 = __y[0];
        __y[0] = 0.0;
        if (v38 != 0.0) {
          (*(void (**)(long double))(**(void **)&v38 + 8))(COERCE_LONG_DOUBLE(*(void *)&v38));
        }
        uint64_t v39 = v52;
        long long v52 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v42, v43);
        }

        goto LABEL_34;
      }
      if (modf(v22, __y) != 0.0)
      {
        uint64_t v26 = 0;
        LOBYTE(v25) = 0;
        unint64_t v24 = 0;
        goto LABEL_21;
      }
      unint64_t v44 = (unint64_t)v23;
      if ((unint64_t)v23 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x19927D704);
      }
      if (v44 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        LOBYTE(v25) = -2;
      }
      else {
        unint64_t v25 = (unint64_t)v23;
      }
      if (v44 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v24 = -256;
      }
      else {
        unint64_t v24 = v44 & 0xFFFFFFFFFFFFFF00;
      }
    }
    uint64_t v26 = 1;
    goto LABEL_21;
  }
  WebKit::toErrorString(0, 0, &cfstr_EitherTheDecla.isa, v14);
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_36:
}

void sub_19927D7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::isRegexSupported(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, void *a4)
{
  void v14[3] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  if ((byte_1EB359FCD & 1) == 0)
  {
    v13[0] = @"regex";
    v14[0] = objc_opt_class();
    v13[1] = @"isCaseSensitive";
    v14[1] = objc_opt_class();
    v13[2] = @"requireCapturing";
    void v14[2] = objc_opt_class();
    qword_1EB359FF8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3];
    byte_1EB359FCD = 1;
  }
  id v12 = @"regex";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v12 count:1];
  BOOL v8 = WebKit::validateDictionary(v6, @"regexOptions", v7, (void *)qword_1EB359FF8, a4);

  if (v8)
  {
    uint64_t v9 = WebKit::objectForKey<NSString>(v6, @"regex", 1);
    if (+[WKContentRuleList _supportsRegularExpression:v9])
    {
      unsigned int v10 = (objc_object *)&unk_1EEA532F0;
    }
    else
    {
      unsigned int v10 = (objc_object *)&unk_1EEA532C8;
    }
    id v11 = WebKit::WebExtensionCallbackHandler::call(*a3, v10);
  }
}

void sub_19927DB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if (byte_1EB359FCE == 1)
  {
    BOOL v8 = (void *)qword_1EB35A000;
  }
  else
  {
    v57[0] = @"displayActionCountAsBadgeText";
    v57[1] = @"tabUpdate";
    v58[0] = objc_opt_class();
    v58[1] = objc_opt_class();
    BOOL v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v58 forKeys:v57 count:2];
    qword_1EB35A000 = (uint64_t)v8;
    byte_1EB359FCE = 1;
  }
  if (WebKit::validateDictionary(v7, @"extensionActionOptions", 0, v8, a4))
  {
    uint64_t v9 = WebKit::objectForKey<NSDictionary>(v7, @"tabUpdate", 1, 0);
    if (!v9)
    {
      {
        char v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v48);
      }
      uint64_t v32 = WebKit::WebProcess::singleton(void)::process;
      uint64_t v9 = WebKit::objectForKey<NSNumber>(v7, @"displayActionCountAsBadgeText");
      LOBYTE(v51) = [v9 BOOLValue];
      ++*(_DWORD *)(a1 + 48);
      uint64_t v33 = *a3;
      *a3 = 0;
      uint64_t v34 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v35 = 1654;
      *((void *)v35 + 1) = v34;
      *((void *)v35 + 66) = (char *)v35 + 16;
      *((void *)v35 + 67) = 512;
      *((void *)v35 + 68) = 0;
      *((void *)v35 + 70) = 0;
      *((void *)v35 + 69) = 0;
      IPC::Encoder::encodeHeader(v35);
      v50[0] = v35;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v35, (char *)&v51);
      double v36 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x18));
      **(void **)&double v36 = &unk_1EE9FBCD0;
      *(void *)(*(void *)&v36 + 8) = a1;
      *(void *)(*(void *)&v36 + 16) = v33;
      uint64_t v37 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      double __y = v36;
      uint64_t v53 = v37;
      (*(void (**)(uint64_t, IPC::Encoder **, double *, void))(*(void *)(v32 + 24) + 40))(v32 + 24, v50, &__y, 0);
      long double v39 = __y;
      double __y = 0.0;
      if (v39 != 0.0) {
        (*(void (**)(long double))(**(void **)&v39 + 8))(COERCE_LONG_DOUBLE(*(void *)&v39));
      }
      uint64_t v40 = v50[0];
      v50[0] = 0;
      if (v40)
      {
        IPC::Encoder::~Encoder(v40, v38);
        WTF::fastFree(v43, v44);
      }
      goto LABEL_27;
    }
    if ((byte_1EB359FCF & 1) == 0)
    {
      v55[0] = @"tabId";
      v55[1] = @"increment";
      v56[0] = objc_opt_class();
      v56[1] = objc_opt_class();
      qword_1EB35A008 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v56 forKeys:v55 count:2];
      byte_1EB359FCF = 1;
    }
    v54[0] = @"tabId";
    v54[1] = @"increment";
    unsigned int v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v54 count:2];
    BOOL v11 = WebKit::validateDictionary(v9, @"tabUpdate", v10, (void *)qword_1EB35A008, a4);

    if (!v11)
    {
LABEL_27:

      goto LABEL_28;
    }
    id v12 = WebKit::objectForKey<NSNumber>(v9, @"tabId");
    [v12 doubleValue];
    double v15 = v14;
    if (v14 == -1.0)
    {
      unint64_t v16 = -256;
      LOBYTE(v17) = -2;
LABEL_10:
      uint64_t v18 = 1;
      goto LABEL_11;
    }
    uint64_t v18 = 0;
    if ((v14 < 0.0 || ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*(void *)&v14 - 1) > 0xFFFFFFFFFFFFELL)
    {
      LOBYTE(v17) = 0;
      unint64_t v16 = 0;
    }
    else
    {
      LOBYTE(v17) = 0;
      unint64_t v16 = 0;
      if (v14 < 1.84467441e19)
      {
        if (modf(v14, &__y) == 0.0)
        {
          unint64_t v45 = (unint64_t)v15;
          if ((unint64_t)v15 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x19927E0E0);
          }
          if (v45 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
            LOBYTE(v17) = -2;
          }
          else {
            unint64_t v17 = (unint64_t)v15;
          }
          if (v45 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v16 = -256;
          }
          else {
            unint64_t v16 = v45 & 0xFFFFFFFFFFFFFF00;
          }
          goto LABEL_10;
        }
        uint64_t v18 = 0;
        LOBYTE(v17) = 0;
        unint64_t v16 = 0;
      }
    }
LABEL_11:
    uint64_t v19 = (IPC::Encoder *)(v16 & 0xFFFFFFFFFFFFFF00 | v17);
    v50[0] = v19;
    v50[1] = (IPC::Encoder *)v18;
    if (!v18 || v19 == (IPC::Encoder *)-2)
    {
      WebKit::toErrorString(0, &cfstr_Tabid.isa, &cfstr_IsNotAValidTab.isa, v13, v12);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      {
        uint64_t v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v49);
      }
      uint64_t v20 = WebKit::WebProcess::singleton(void)::process;
      uint64_t v21 = WebKit::objectForKey<NSNumber>(v9, @"increment");
      [v21 doubleValue];
      double v23 = v22;
      ++*(_DWORD *)(a1 + 48);
      uint64_t v24 = *a3;
      *a3 = 0;
      uint64_t v25 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v26 = 1659;
      *((void *)v26 + 1) = v25;
      *((void *)v26 + 66) = (char *)v26 + 16;
      *((void *)v26 + 67) = 512;
      *((void *)v26 + 68) = 0;
      *((void *)v26 + 70) = 0;
      *((void *)v26 + 69) = 0;
      IPC::Encoder::encodeHeader(v26);
      uint64_t v51 = v26;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, (uint64_t *)v50);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v26, v23);
      double v27 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x18));
      **(void **)&double v27 = &unk_1EE9FBCA8;
      *(void *)(*(void *)&v27 + 8) = a1;
      *(void *)(*(void *)&v27 + 16) = v24;
      uint64_t v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      double __y = v27;
      uint64_t v53 = v28;
      (*(void (**)(uint64_t, IPC::Encoder **, double *, void))(*(void *)(v20 + 24) + 40))(v20 + 24, &v51, &__y, 0);
      long double v30 = __y;
      double __y = 0.0;
      if (v30 != 0.0) {
        (*(void (**)(long double))(**(void **)&v30 + 8))(COERCE_LONG_DOUBLE(*(void *)&v30));
      }
      uint64_t v31 = v51;
      uint64_t v51 = 0;
      if (v31)
      {
        IPC::Encoder::~Encoder(v31, v29);
        WTF::fastFree(v46, v47);
      }
    }
    goto LABEL_27;
  }
LABEL_28:
}

void sub_19927E1F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Encoder *a11, uint64_t a12, IPC::Encoder *a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a13)
  {
    IPC::Encoder::~Encoder(a13, a2);
    WTF::fastFree(v19, v20);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBB60;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBB60;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        BOOL v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19927E6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBB88;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBB88;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v8);
    if (v10)
    {
      v11[0] = v8;
      uint64_t v3 = v9;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      v11[1] = v3;
      WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v11);
      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v4);
      if (v10) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    id v7 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v7);
  }
  return result;
}

void sub_19927E928(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  if ((_BYTE)v8) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v3);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

void sub_19927E984(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a2, (uint64_t *)&cf);
  WTF::RetainPtr<NSSet>::get((id *)&cf);
  uint64_t v3 = (objc_object *)objc_claimAutoreleasedReturnValue();
  id v4 = WebKit::WebExtensionCallbackHandler::call(a1, v3);

  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_19927EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBBB0;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBBB0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19927EC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBBD8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBBD8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FBBF0[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v3);
  }
}

void sub_19927EE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FBBF0[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FBBF0[v2])(&v3, &v1);
}

void sub_19927EF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FBBF0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    char v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    char v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBC10;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBC10;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19927F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBC38;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBC38;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FBBF0[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v3);
  }
}

void sub_19927F484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FBBF0[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FBBF0[v2])(&v3, &v1);
}

void sub_19927F518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FBBF0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    char v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    char v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBC60;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBC60;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(char **)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v22 = 0;
        double v23 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v24 = *((void *)a2 + 3);
        if (v24)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
            unint64_t v22 = 0;
            int v43 = *(char **)a2;
            uint64_t v44 = *((void *)a2 + 1);
            uint64_t v45 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            double v23 = 0;
            if (v45 && v44)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v43);
              double v23 = *(char **)a2;
              unint64_t v22 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v22 = 0;
            double v23 = 0;
          }
        }
      }
      else
      {
        char v6 = (unsigned __int8 *)*((void *)a2 + 2);
        char v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (!v8)
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v53);
            if ((_BYTE)v54)
            {
              v50[0] = v53;
              int v19 = 1;
              int v51 = 1;
            }
            else
            {
              int v19 = 0;
              LOBYTE(v50[0]) = 0;
            }
            char v52 = v19;
            int v21 = 1;
LABEL_59:
            if (v19)
            {
              LOBYTE(v47[0]) = 0;
              int v48 = -1;
              ((void (*)(WTF::StringImpl **, unsigned int *, void *))off_1EE9FBC88[v21])(&v53, v47, v50);
              int v48 = v21;
              char v49 = 1;
              if (!v52
                || v51 == -1
                || (((void (*)(WTF::StringImpl **, void *))off_1EE9FBC78[v51])(&v53, v50), v49))
              {
LABEL_63:
                WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v47);
                if (v49)
                {
                  if (v48 != -1) {
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1EE9FBC78[v48])(&v53, v47);
                  }
                }
                return;
              }
LABEL_38:
              unsigned int v29 = *(char **)a2;
              uint64_t v30 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v31 = *((void *)a2 + 3);
              if (!v31 || !v30 || ((*(void (**)(uint64_t, char *))(*(void *)v31 + 16))(v31, v29), !v49))
              {
                IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
                return;
              }
              goto LABEL_63;
            }
LABEL_36:
            uint64_t v26 = *(char **)a2;
            uint64_t v27 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v28 = *((void *)a2 + 3);
            if (v28 && v27) {
              (*(void (**)(uint64_t, char *))(*(void *)v28 + 16))(v28, v26);
            }
            LOBYTE(v47[0]) = 0;
            char v49 = 0;
            goto LABEL_38;
          }
          unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
          if (v5 >= v9 && v5 - v9 > 7)
          {
            char v11 = (unint64_t *)&v4[v9];
            unint64_t v12 = *v11;
            *((void *)a2 + 2) = v11 + 1;
            uint64_t v58 = 0;
            uint64_t v59 = 0;
            if (v12 >= 0x4924)
            {
              while (1)
              {
                IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v53, a2);
                if (!v57) {
                  break;
                }
                unsigned int v36 = HIDWORD(v59);
                if (HIDWORD(v59) == v59)
                {
                  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v58, (unint64_t)&v53);
                }
                else
                {
                  uint64_t v38 = v58;
                  WTF::URL::URL(v58 + 56 * HIDWORD(v59), (uint64_t *)&v53);
                  *(_OWORD *)(v38 + 56 * v36 + 40) = v56;
                  ++HIDWORD(v59);
                }
                if (v57)
                {
                  long double v39 = v53;
                  uint64_t v53 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, v37);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                if (!--v12)
                {
                  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v58, HIDWORD(v59));
LABEL_24:
                  unint64_t v12 = v58;
                  uint64_t v17 = v59;
                  goto LABEL_31;
                }
              }
            }
            else
            {
              if (!v12)
              {
                uint64_t v17 = 0;
LABEL_31:
                uint64_t v46 = v17;
                uint64_t v58 = 0;
                uint64_t v59 = 0;
                int v19 = 1;
                char v55 = 1;
                WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
                uint64_t v53 = 0;
                uint64_t v54 = 0;
                v50[0] = v12;
                v50[1] = v46;
                int v51 = 0;
                WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v20);
                goto LABEL_58;
              }
              LODWORD(v59) = 56 * (int)v12 / 0x38u;
              uint64_t v58 = WTF::fastMalloc((WTF *)(56 * v12));
              while (1)
              {
                IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v53, a2);
                if (!v57) {
                  break;
                }
                unsigned int v14 = HIDWORD(v59);
                if (HIDWORD(v59) == v59)
                {
                  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v58, (unint64_t)&v53);
                }
                else
                {
                  uint64_t v15 = v58;
                  WTF::URL::URL(v58 + 56 * HIDWORD(v59), (uint64_t *)&v53);
                  *(_OWORD *)(v15 + 56 * v14 + 40) = v56;
                  ++HIDWORD(v59);
                }
                if (v57)
                {
                  unint64_t v16 = v53;
                  uint64_t v53 = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2) {
                      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v4);
                    }
                    else {
                      *(_DWORD *)v16 -= 2;
                    }
                  }
                }
                if (!--v12) {
                  goto LABEL_24;
                }
              }
            }
            WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v13);
          }
          else
          {
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v32 = *((void *)a2 + 3);
            if (v32)
            {
              (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
              uint64_t v33 = *(char **)a2;
              uint64_t v34 = *((void *)a2 + 1);
              uint64_t v35 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              if (v35)
              {
                if (v34) {
                  (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(v35, v33);
                }
              }
            }
          }
          uint64_t v40 = *(char **)a2;
          uint64_t v41 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v42 = *((void *)a2 + 3);
          if (v42 && v41) {
            (*(void (**)(uint64_t, char *))(*(void *)v42 + 16))(v42, v40);
          }
          int v19 = 0;
          LOBYTE(v50[0]) = 0;
LABEL_58:
          int v21 = 0;
          char v52 = v19;
          goto LABEL_59;
        }
        unint64_t v22 = v5;
        double v23 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v25 = *((void *)a2 + 3);
      if (v25 && v22) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
      }
      goto LABEL_36;
    }
  }
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v18);
}

void sub_19927FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,int a22,char a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a15)
  {
    if (a13 != -1) {
      ((void (*)(WTF::StringImpl **, char *))off_1EE9FBC78[a13])(&a24, &a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (unsigned int *)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FBC78[v2])(&v3, v1);
  }
}

void sub_19927FE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FBC78[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19927FF04(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v4 = *(WTF::StringImpl **)v2;
    *(void *)uint64_t v2 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::URL::URL(*(void *)a1 + 56 * *(unsigned int *)(a1 + 12), (uint64_t *)v3);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x4924925)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 56 * *(unsigned int *)(result + 12));
    unsigned int v5 = 56 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct((WTF::StringImpl *)(*(void *)result + 56 * a2), (WTF::StringImpl *)(*(void *)result + 56 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unsigned int v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(56 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0x38;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v5, (WTF::StringImpl *)((char *)v5 + 56 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, unsigned int *a2)
{
  uint64_t v20 = a1;
  v28[3] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a2[4];
  if (v3)
  {
    if (v3 != 1)
    {
      int v19 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v19);
    }
    if (*(void *)a2) {
      unint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v4 = &stru_1EEA10550;
    }
    unsigned int v5 = v20;
    int v21 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v5, &v4->isa);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:a2[3]];
    unsigned int v7 = a2[3];
    if (v7)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)a2 + 56 * v7;
      do
      {
        v27[0] = @"request";
        uint64_t v25 = @"url";
        if (*(void *)v8) {
          unint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v10 = &stru_1EEA10550;
        }
        uint64_t v26 = v10;
        uint64_t v11 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1, v20);
        v28[0] = v11;
        v27[1] = @"timeStamp";
        unint64_t v12 = [NSNumber numberWithDouble:floor(*(double *)(v8 + 40) * 1000.0)];
        v28[1] = v12;
        v27[2] = @"tabId";
        unint64_t v13 = *(void *)(v8 + 48);
        double v14 = (double)v13;
        if (v13 == -2) {
          double v14 = -1.0;
        }
        uint64_t v15 = [NSNumber numberWithDouble:v14];
        void v28[2] = v15;
        unint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:3];
        [v6 addObject:v16];

        v8 += 56;
      }
      while (v8 != v9);
    }
    double v23 = @"rulesMatchedInfo";
    uint64_t v24 = v6;
    objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1, v20);
    uint64_t v17 = (objc_object *)objc_claimAutoreleasedReturnValue();

    id v18 = WebKit::WebExtensionCallbackHandler::call(v22, v17);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBCA8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBCA8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_199280798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBCD0;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBCD0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992809FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIEvent::invokeListeners(unsigned int *this)
{
  uint64_t v1 = this[21];
  if (v1)
  {
    uint64_t v2 = (JSObjectRef **)*((void *)this + 9);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (unsigned int *)WebKit::WebExtensionCallbackHandler::call(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2)
{
  id v7 = a2;
  uint64_t v3 = *((unsigned int *)this + 21);
  if (v3)
  {
    uint64_t v4 = (WebKit::WebExtensionCallbackHandler **)*((void *)this + 9);
    uint64_t v5 = 8 * v3;
    do
    {
      id v6 = WebKit::WebExtensionCallbackHandler::call(*v4++, v7);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_199280B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2, objc_object *a3)
{
  char v10 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = *((unsigned int *)this + 21);
  if (v6)
  {
    id v7 = (WebKit::WebExtensionCallbackHandler **)*((void *)this + 9);
    uint64_t v8 = 8 * v6;
    do
    {
      id v9 = WebKit::WebExtensionCallbackHandler::call(*v7++, v10, v5);
      v8 -= 8;
    }
    while (v8);
  }
}

void sub_199280BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2, objc_object *a3, objc_object *a4)
{
  unint64_t v13 = a2;
  id v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = *((unsigned int *)this + 21);
  if (v9)
  {
    char v10 = (WebKit::WebExtensionCallbackHandler **)*((void *)this + 9);
    uint64_t v11 = 8 * v9;
    do
    {
      id v12 = WebKit::WebExtensionCallbackHandler::call(*v10++, v13, v7, v8);
      v11 -= 8;
    }
    while (v11);
  }
}

void sub_199280C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIEvent::addListener(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 56) = *(void *)(a2 + 2120);
  uint64_t result = (IPC::Encoder *)(a1 + 72);
  uint64_t v6 = *(unsigned int *)(a1 + 84);
  if (v6 == *(_DWORD *)(a1 + 80))
  {
    uint64_t result = (IPC::Encoder *)WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>&>((uint64_t)result, (unint64_t)a3);
  }
  else
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = (_DWORD *)*a3;
    if (*a3) {
      ++*v8;
    }
    *(void *)(v7 + 8 * v6) = v8;
    *(_DWORD *)(a1 + 84) = v6 + 1;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    {
      uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v11 = *(void *)(a2 + 2120);
    char v18 = *(unsigned char *)(a1 + 8);
    uint64_t v19 = v11;
    v20[0] = &v19;
    v20[1] = a1 + 64;
    v20[2] = &v18;
    uint64_t v12 = *(void *)(v9 + 24);
    unint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v13 = 1642;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    int v21 = v13;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v13, (uint64_t)v20);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v10 + 24) + 32))(v10 + 24, &v21, 0);
    uint64_t result = v21;
    int v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void sub_199280DFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  uint64_t v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
  uint64_t v5 = *(unsigned int *)(a1 + 84);
  uint64_t v6 = &v4[v5];
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = &v4[v5];
    uint64_t v11 = v10;
    do
    {
      uint64_t v12 = WebKit::WebExtensionCallbackHandler::callbackFunction(*v4);
      unint64_t v13 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);

      if (v12 == v13)
      {
        double v14 = v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler **)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 84)))
        {
          if (v4 == v10)
          {
            double v14 = v11;
          }
          else
          {
            memmove(v11, v10, v9 - (void)v10);
            double v14 = (WebKit::WebExtensionCallbackHandler **)((char *)v11 + v9 - (void)v10);
          }
        }
        uint64_t v15 = *v4;
        *uint64_t v4 = 0;
        uint64_t v10 = v4 + 1;
        if (v15) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        }
        ++v8;
        uint64_t v11 = v14;
      }
      ++v4;
      v9 += 8;
    }
    while (v4 < v6);
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    uint64_t v6 = v11;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = &v4[v5];
  }
  unint64_t v16 = &v4[v5];
  if (v10 != v16)
  {
    memmove(v6, v10, (char *)v16 - (char *)v10);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    uint64_t v17 = *(void *)(a1 + 24);
    if (v17)
    {
      {
        uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v25);
      }
      uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
      char v26 = *(unsigned char *)(a1 + 8);
      v27[0] = a1 + 56;
      v27[1] = a1 + 64;
      v27[2] = &v26;
      void v27[3] = v8;
      uint64_t v19 = *(void *)(v17 + 24);
      uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v20 = 1674;
      *((void *)v20 + 1) = v19;
      *((void *)v20 + 66) = (char *)v20 + 16;
      *((void *)v20 + 67) = 512;
      *((void *)v20 + 68) = 0;
      *((void *)v20 + 70) = 0;
      *((void *)v20 + 69) = 0;
      IPC::Encoder::encodeHeader(v20);
      uint64_t v28 = v20;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v27);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v18 + 24) + 32))(v18 + 24, &v28, 0);
      unint64_t v22 = v28;
      uint64_t v28 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v21);
        WTF::fastFree(v23, v24);
      }
    }
  }
}

void sub_199281068(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  if (!*(_DWORD *)(a1 + 84)) {
    return 0;
  }
  unint64_t v4 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(void *)(a1 + 72)
    uint64_t v5 = + 8 * v4));
    uint64_t v6 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);

    BOOL result = v5 == v6;
    if (v5 == v6) {
      break;
    }
    ++v4;
  }
  while (v4 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_199281124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIEvent::removeAllListeners(unsigned int *this)
{
  uint64_t v1 = this[21];
  if (v1)
  {
    uint64_t v2 = this;
    this = WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(this + 18, 0);
    uint64_t v3 = *((void *)v2 + 3);
    if (v3)
    {
      {
        uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v10);
      }
      uint64_t v4 = WebKit::WebProcess::singleton(void)::process;
      char v11 = *((unsigned char *)v2 + 8);
      v12[0] = v2 + 14;
      v12[1] = v2 + 16;
      v12[2] = &v11;
      v12[3] = v1;
      uint64_t v5 = *(void *)(v3 + 24);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1674;
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      unint64_t v13 = v6;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v6, (uint64_t)v12);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v4 + 24) + 32))(v4 + 24, &v13, 0);
      this = (unsigned int *)v13;
      unint64_t v13 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)this, v7);
        return (unsigned int *)WTF::fastFree(v8, v9);
      }
    }
  }
  return this;
}

void sub_199281274(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (_DWORD **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  if (*v3) {
    ++*v6;
  }
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, **(unsigned char **)(a2 + 8));
  char v4 = **(unsigned char **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, **(unsigned char **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, **(unsigned char **)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    if (result[3] > a2) {
      unint64_t result = WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        void v3[2] = a2;
        unint64_t result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      void v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        unint64_t result = (unsigned int *)memcpy(result, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        void v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[3];
  if (v4 != a2)
  {
    uint64_t v5 = (unsigned int **)(*(void *)result + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      unint64_t result = *v5;
      void *v5 = 0;
      if (result) {
        unint64_t result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref((WebKit::WebExtensionCallbackHandler *)result);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

BOOL WebKit::WebExtensionAPIExtension::isPropertyAllowed(WebKit::WebExtensionAPIExtension *this, const char **a2, WebKit::WebPage *a3)
{
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(*((WebKit::WebExtensionContextProxy **)this + 3), (WTF::StringImpl **)this + 4, (const WTF::ASCIILiteral *)a2) & 1) == 0)
  {
    if (*a2)
    {
      if (!strcmp(*a2, "getURL")) {
        return *(double *)(*((void *)this + 3) + 112) < 3.0;
      }
    }
    else if (!"getURL")
    {
      return *(double *)(*((void *)this + 3) + 112) < 3.0;
    }
  }
  return 0;
}

id WebKit::WebExtensionAPIExtension::getURL(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  MEMORY[0x19972EAD0](&v7);
  MEMORY[0x19972E8B0](&v8, v1 + 40, &v7, 0);
  id v3 = (id)WTF::URL::operator NSURL *();
  uint64_t v4 = v8;
  unsigned int v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return v3;
}

void sub_199281684(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAPIExtension::getBackgroundPage(WebKit::WebExtensionAPIExtension *this, JSContextRef ctx)
{
  uint64_t v3 = *(void *)(*((void *)this + 3) + 168);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v6 = WebKit::toWindowObject(ctx, *(const OpaqueJSContext **)(v4 + 72), v5);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    JSValueRef Null = JSValueMakeNull(ctx);
    if (Null)
    {
      JSValueRef v9 = Null;
      uint64_t v10 = (void *)MEMORY[0x1E4F30938];
      uint64_t v11 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(ctx)];
      JSValueRef v12 = v9;
      unint64_t v13 = (void *)v11;
      uint64_t v6 = [v10 valueWithJSValueRef:v12 inContext:v11];
    }
    else
    {
      uint64_t v6 = 0;
    }
  }

  return v6;
}

void sub_1992817BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIExtension::getViews(uint64_t a1, WebKit *a2, void *a3, void *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  unsigned int v8 = @"filter";
  if (_MergedGlobals_117 == 1)
  {
    JSValueRef v9 = (void *)qword_1EB35A018;
  }
  else
  {
    v62[0] = @"type";
    uint64_t v63 = objc_opt_class();
    v62[1] = @"tabId";
    uint64_t v64 = objc_opt_class();
    v62[2] = @"windowId";
    uint64_t v65 = objc_opt_class();
    JSValueRef v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v63 forKeys:v62 count:3];
    qword_1EB35A018 = (uint64_t)v9;
    _MergedGlobals_117 = 1;
  }
  if (!WebKit::validateDictionary(v7, @"filter", 0, v9, a4)) {
    goto LABEL_32;
  }
  uint64_t v10 = [v7 objectForKeyedSubscript:@"type"];
  uint64_t v11 = v10;
  if (v10 && ([v10 isEqualToString:@"popup"] & 1) == 0)
  {
    if (([v11 isEqualToString:@"tab"] & 1) == 0)
    {
      WebKit::toErrorString(0, &cfstr_Type.isa, &cfstr_ItMustSpecifyE_1.isa, v28);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_31;
    }
    int v59 = 1;
  }
  else
  {
    int v59 = 0;
  }

  JSValueRef v12 = [v7 objectForKeyedSubscript:@"tabId"];
  unint64_t v13 = v12;
  if (!v12)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    goto LABEL_14;
  }
  [v12 doubleValue];
  double v16 = v15;
  if (v15 == -1.0)
  {
    uint64_t v17 = -256;
    LOBYTE(v18) = -2;
LABEL_10:
    uint64_t v19 = 1;
    goto LABEL_11;
  }
  uint64_t v19 = 0;
  if ((v15 < 0.0 || ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v18) = 0;
    uint64_t v17 = 0;
  }
  else
  {
    LOBYTE(v18) = 0;
    uint64_t v17 = 0;
    if (v15 < 1.84467441e19)
    {
      if (modf(v15, &__y) == 0.0)
      {
        unint64_t v18 = (unint64_t)v16;
        if ((unint64_t)v16 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x199281D68);
        }
        unint64_t v54 = v18 & 0xFFFFFFFFFFFFFF00;
        BOOL v55 = __CFADD__(v18 - 1, 2);
        if (v18 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v18) = -2;
        }
        if (v55) {
          uint64_t v17 = -256;
        }
        else {
          uint64_t v17 = v54;
        }
        goto LABEL_10;
      }
      uint64_t v19 = 0;
      LOBYTE(v18) = 0;
      uint64_t v17 = 0;
    }
  }
LABEL_11:
  unint64_t v20 = v17 & 0xFFFFFFFFFFFFFF00 | v18;
  if (!WebKit::isValid(v20, v19, a4, v14))
  {
    uint64_t v11 = v13;
LABEL_31:

LABEL_32:
LABEL_33:
    uint64_t v33 = 0;
    goto LABEL_34;
  }
LABEL_14:
  char v60 = v19;

  int v21 = [v7 objectForKeyedSubscript:@"windowId"];
  unint64_t v22 = v21;
  if (!v21)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    goto LABEL_41;
  }
  [v21 doubleValue];
  double v25 = v24;
  if (v24 == -1.0)
  {
    uint64_t v26 = -256;
    LOBYTE(v27) = -2;
LABEL_39:
    uint64_t v29 = 1;
    goto LABEL_40;
  }
  if (v24 == -2.0)
  {
    uint64_t v26 = -256;
    LOBYTE(v27) = -3;
    goto LABEL_39;
  }
  uint64_t v29 = 0;
  if ((v24 < 0.0 || ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&v24 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v27) = 0;
    uint64_t v26 = 0;
  }
  else
  {
    LOBYTE(v27) = 0;
    uint64_t v26 = 0;
    if (v24 < 1.84467441e19)
    {
      if (modf(v24, &__y) == 0.0)
      {
        unint64_t v27 = (unint64_t)v25;
        if ((unint64_t)v25 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x199281D88);
        }
        unint64_t v56 = v27 & 0xFFFFFFFFFFFFFF00;
        BOOL v57 = __CFADD__(v27 - 1, 2);
        if (v27 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v27) = -2;
        }
        if (v57) {
          uint64_t v26 = -256;
        }
        else {
          uint64_t v26 = v56;
        }
        goto LABEL_39;
      }
      uint64_t v29 = 0;
      LOBYTE(v27) = 0;
      uint64_t v26 = 0;
    }
  }
LABEL_40:
  unint64_t v30 = v26 & 0xFFFFFFFFFFFFFF00 | v27;
  if (!WebKit::isValid(v30, v29, a4, v23))
  {

    goto LABEL_33;
  }
LABEL_41:

  uint64_t v35 = [MEMORY[0x1E4F1CA48] array];
  if (v11 || v19 | v29)
  {
    char v40 = v59 ^ 1;
    if (!v11) {
      char v40 = 1;
    }
    if ((v40 & 1) == 0) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(a1 + 24) + 168);
    if (v36)
    {
      uint64_t v37 = *(void *)(v36 + 8);
      if (v37)
      {
        CFRetain(*(CFTypeRef *)(v37 - 8));
        long double v39 = WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(v37 + 72), v38);
        if (v39) {
          [v35 addObject:v39];
        }

        CFRelease(*(CFTypeRef *)(v37 - 8));
      }
    }
  }
  uint64_t v58 = a1;
  WebKit::WebExtensionContextProxy::popupPages(*(void *)(a1 + 24), v20, v60, v30, v29, (uint64_t)&v63);
  if (HIDWORD(v64))
  {
    uint64_t v43 = v63;
    uint64_t v44 = 8 * HIDWORD(v64);
    do
    {
      uint64_t v45 = WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(*(void *)v43 + 88), v42);
      if (v45) {
        [v35 addObject:v45];
      }

      v43 += 8;
      v44 -= 8;
    }
    while (v44);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v41);
  if (v11) {
    int v46 = v59;
  }
  else {
    int v46 = 1;
  }
  if (v46 != 1) {
    goto LABEL_67;
  }
  a1 = v58;
LABEL_61:
  WebKit::WebExtensionContextProxy::tabPages(*(void *)(a1 + 24), v20, v60, v30, v29, (uint64_t)&v63);
  if (HIDWORD(v64))
  {
    uint64_t v49 = v63;
    uint64_t v50 = 8 * HIDWORD(v64);
    do
    {
      int v51 = WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(*(void *)v49 + 88), v48);
      if (v51) {
        [v35 addObject:v51];
      }

      v49 += 8;
      v50 -= 8;
    }
    while (v50);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v47);
LABEL_67:
  uint64_t v33 = (void *)[v35 copy];

LABEL_34:

  return v33;
}

void sub_199281E18(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 - 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(uint64_t a1, uint64_t *a2)
{
  {
    unint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1663;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long double v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FBCF8;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t result = v15;
  long double v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_199282060(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199282128()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x199282114);
}

id WebKit::toWindowObject(WebKit *this, const OpaqueJSContext *a2, WebKit::WebFrame *a3)
{
  uint64_t v4 = (const OpaqueJSContext *)WebKit::WebFrame::jsContext(a2);
  if (v4)
  {
    GlobalObject = JSContextGetGlobalObject(v4);
    if (GlobalObject)
    {
      uint64_t v6 = (void *)MEMORY[0x1E4F30938];
      id v7 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      GlobalObject = [v6 valueWithJSValueRef:GlobalObject inContext:v7];
    }
  }
  else
  {
    GlobalObject = 0;
  }

  return GlobalObject;
}

void sub_19928221C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBCF8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBCF8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
      [NSNumber numberWithBool:v4 != 0];
      uint64_t v11 = (objc_object *)objc_claimAutoreleasedReturnValue();
      id v6 = WebKit::WebExtensionCallbackHandler::call(v5, v11);

      return;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
  }
  uint64_t v10 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v10);
}

void sub_199282458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v3 = [NSNumber numberWithBool:0];
  id v2 = WebKit::WebExtensionCallbackHandler::call(a1, v3);
}

void sub_1992824D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPILocalization::getMessage(WebKit::WebExtensionAPILocalization *this, NSString *a2, objc_object *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  uint64_t v7 = WTF::RetainPtr<NSSet>::get((id *)(*((void *)this + 3) + 96));
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v12[0] = v6;
    uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
LABEL_5:
    uint64_t v9 = (void *)v8;
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v8 = WebKit::filterObjects<NSArray>(v6, &__block_literal_global_33);
    goto LABEL_5;
  }
  uint64_t v9 = 0;
LABEL_7:
  uint64_t v10 = [v7 localizedStringForKey:v5 withPlaceholders:v9];

  return v10;
}

void sub_199282640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27WebExtensionAPILocalization10getMessageEP8NSStringP11objc_object_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1992826B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPILocalization::getUILanguage(WebKit::WebExtensionAPILocalization *this)
{
  uint64_t v1 = [MEMORY[0x1E4F1CA20] currentLocale];
  id v3 = WebKit::toWebAPI(v1, v2);

  return v3;
}

void sub_199282718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPILocalization::getAcceptLanguages(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA20] preferredLanguages];
  unsigned __int16 v4 = objc_msgSend(MEMORY[0x1E4F1CA70], "orderedSetWithCapacity:", objc_msgSend(v3, "count"));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        objc_msgSend(v4, "addObject:", v9, (void)v15);
        uint64_t v10 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v9];
        uint64_t v11 = [v10 languageCode];
        [v4 addObject:v11];
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  JSValueRef v12 = *a2;
  unint64_t v13 = [v4 array];
  id v14 = WebKit::WebExtensionCallbackHandler::call(v12, v13);
}

void sub_1992828C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(uint64_t a1, int a2, void *a3, NSString *a4, uint64_t a5, WebKit::WebExtensionCallbackHandler **a6, void *a7)
{
  LODWORD(v7) = a2;
  v251[1] = *MEMORY[0x1E4F143B8];
  id v191 = a3;
  if ((_MergedGlobals_118 & 1) == 0)
  {
LABEL_220:
    v251[0] = @"title";
    qword_1EB35A028 = [MEMORY[0x1E4F1C978] arrayWithObjects:v251 count:1];
    _MergedGlobals_118 = 1;
  }
  if ((byte_1EB35A021 & 1) == 0)
  {
    v249[0] = @"checked";
    v250[0] = objc_opt_class();
    v249[1] = @"command";
    v250[1] = objc_opt_class();
    v249[2] = @"contexts";
    uint64_t v248 = objc_opt_class();
    id v185 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v248 count:1];
    v250[2] = v185;
    v249[3] = @"documentUrlPatterns";
    uint64_t v247 = objc_opt_class();
    uint64_t v182 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v247 count:1];
    v250[3] = v182;
    v249[4] = @"enabled";
    v250[4] = objc_opt_class();
    v249[5] = @"icons";
    uint64_t v150 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v151 = objc_opt_class();
    uint64_t v152 = objc_opt_class();
    v181 = objc_msgSend(v150, "orderedSetWithObjects:", v151, v152, objc_opt_class(), 0);
    v250[5] = v181;
    v249[6] = @"icon_variants";
    v153 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v246 = objc_opt_class();
    uint64_t v154 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v246 count:1];
    uint64_t v155 = objc_msgSend(v153, "orderedSetWithObjects:", v154, objc_opt_class(), 0);
    v250[6] = v155;
    v249[7] = @"id";
    unint64_t v156 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v157 = objc_opt_class();
    uint64_t v158 = objc_msgSend(v156, "orderedSetWithObjects:", v157, objc_opt_class(), 0);
    v250[7] = v158;
    v249[8] = @"onclick";
    v250[8] = objc_opt_class();
    v249[9] = @"parentId";
    uint64_t v159 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v160 = objc_opt_class();
    unint64_t v161 = objc_msgSend(v159, "orderedSetWithObjects:", v160, objc_opt_class(), 0);
    v250[9] = v161;
    v249[10] = @"targetUrlPatterns";
    uint64_t v245 = objc_opt_class();
    v162 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v245 count:1];
    v250[10] = v162;
    v249[11] = @"title";
    v250[11] = objc_opt_class();
    v249[12] = @"type";
    v250[12] = objc_opt_class();
    v249[13] = @"visible";
    v250[13] = objc_opt_class();
    qword_1EB35A030 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v250 forKeys:v249 count:14];

    byte_1EB35A021 = 1;
  }
  uint64_t v8 = WebKit::objectForKey<NSString>(v191, @"type", 1);
  int v9 = [v8 isEqualToString:@"separator"];

  if (v9 | v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (void *)qword_1EB35A028;
  }
  if (!WebKit::validateDictionary(v191, @"properties", v10, (void *)qword_1EB35A030, a7))
  {
    uint64_t v14 = 0;
    goto LABEL_174;
  }
  v218 = 0;
  LOBYTE(v219) = 0;
  char v220 = 0;
  __int16 v221 = 0;
  v225[0] = 0;
  v225[16] = 0;
  v226[0] = 0;
  v226[16] = 0;
  LOBYTE(v227) = 0;
  BYTE2(v227) = 0;
  v223 = 0;
  memset(v224, 0, 14);
  v222 = 0;
  uint64_t v11 = [v191 objectForKeyedSubscript:@"type"];
  JSValueRef v12 = v11;
  if (v11)
  {
    if ([v11 isEqualToString:@"normal"])
    {
      __int16 v13 = 256;
    }
    else if ([v12 isEqualToString:@"checkbox"])
    {
      __int16 v13 = 257;
    }
    else if ([v12 isEqualToString:@"radio"])
    {
      __int16 v13 = 258;
    }
    else
    {
      if (([v12 isEqualToString:@"separator"] & 1) == 0)
      {
        WebKit::toErrorString(0, &cfstr_Type.isa, &cfstr_ItMustSpecifyE_2.isa, v15);
        *a7 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_172;
      }
      __int16 v13 = 259;
    }
    __int16 v221 = v13;
  }

  long long v16 = [v191 objectForKeyedSubscript:@"contexts"];
  if (!v16) {
    goto LABEL_76;
  }
  id v184 = v16;
  if ((byte_1EB35A022 & 1) == 0)
  {
    __int16 v216 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)v233, (uint64_t)"action", 7, &v216);
    __int16 v215 = 2;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v234, (uint64_t)"audio", 6, &v215);
    __int16 v214 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v235, (uint64_t)"browser_action", 15, &v214);
    __int16 v213 = 4;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v236, (uint64_t)"editable", 9, &v213);
    __int16 v212 = 8;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v237, (uint64_t)"frame", 6, &v212);
    __int16 v211 = 16;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v238, (uint64_t)"image", 6, &v211);
    __int16 v210 = 32;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v239, (uint64_t)"link", 5, &v210);
    __int16 v209 = 64;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v240, (uint64_t)"page", 5, &v209);
    __int16 v208 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v241, (uint64_t)"page_action", 12, &v208);
    __int16 v207 = 128;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v242, (uint64_t)"selection", 10, &v207);
    __int16 v206 = 256;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v243, (uint64_t)"tab", 4, &v206);
    __int16 v205 = 512;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v244, (uint64_t)"video", 6, &v205);
    Table = 0;
    uint64_t v183 = 0;
    Table = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(0x20u);
    *((_OWORD *)Table - 1) = xmmword_1994F8E10;
    while (1)
    {
      uint64_t v164 = Table;
      if (Table
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&Table),
            (uint64_t v164 = Table) != 0))
      {
        int v165 = *((_DWORD *)v164 - 2);
      }
      else
      {
        int v165 = 0;
      }
      uint64_t v166 = (WTF::StringImpl **)&v233[2 * v183];
      unsigned int v167 = *((_DWORD *)*v166 + 4);
      if (v167 >= 0x100) {
        unsigned int v168 = v167 >> 8;
      }
      else {
        unsigned int v168 = WTF::StringImpl::hashSlowCase(*v166);
      }
      unint64_t v169 = 0;
      for (int i = 1; ; ++i)
      {
        unsigned int v171 = v168 & v165;
        unint64_t v172 = (uint64_t *)((char *)v164 + 16 * (v168 & v165));
        v173 = (WTF *)*v172;
        if (*v172 == -1)
        {
          unint64_t v169 = (char *)v164 + 16 * v171;
          goto LABEL_234;
        }
        if (!v173) {
          break;
        }
        if (WTF::equal(v173, *v166, v163)) {
          goto LABEL_243;
        }
LABEL_234:
        unsigned int v168 = i + v171;
      }
      if (v169)
      {
        *(void *)unint64_t v169 = 0;
        *((_WORD *)v169 + 4) = 0;
        --*((_DWORD *)Table - 4);
        unint64_t v172 = (uint64_t *)v169;
      }
      WTF::String::operator=(v172, v166);
      *((_WORD *)v172 + 4) = *((_WORD *)v166 + 4);
      uint64_t v175 = Table;
      if (Table) {
        int v176 = *((_DWORD *)Table - 3) + 1;
      }
      else {
        int v176 = 1;
      }
      *((_DWORD *)Table - 3) = v176;
      uint64_t v177 = (*((_DWORD *)v175 - 4) + v176);
      unint64_t v178 = *((unsigned int *)v175 - 1);
      if (v178 > 0x400)
      {
        if (v178 <= 2 * v177) {
LABEL_242:
        }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&Table);
      }
      else if (3 * v178 <= 4 * v177)
      {
        goto LABEL_242;
      }
LABEL_243:
      if (++v183 == 12)
      {
        qword_1EB35A038 = (uint64_t)Table;
        for (uint64_t j = 22; j != -2; j -= 2)
        {
          v180 = (WTF::StringImpl *)v233[j];
          v233[j] = 0;
          if (v180)
          {
            if (*(_DWORD *)v180 == 2) {
              WTF::StringImpl::destroy(v180, v174);
            }
            else {
              *(_DWORD *)v180 -= 2;
            }
          }
        }
        byte_1EB35A022 = 1;
        long long v16 = v184;
        break;
      }
    }
  }
  if (!BYTE2(v227)) {
    BYTE2(v227) = 1;
  }
  LOWORD(v227) = 0;
  long long v201 = 0u;
  long long v202 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  id v17 = v16;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v201 objects:v232 count:16];
  if (!v18) {
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)v202;
  while (2)
  {
    for (uint64_t k = 0; k != v18; ++k)
    {
      if (*(void *)v202 != v7) {
        objc_enumerationMutation(v17);
      }
      uint64_t v20 = *(void **)(*((void *)&v201 + 1) + 8 * k);
      if ([v20 isEqualToString:@"all"])
      {
        if (!BYTE2(v227)) {
          BYTE2(v227) = 1;
        }
        LOWORD(v227) = 1023;
        goto LABEL_75;
      }
      MEMORY[0x19972EAD0](v233, v20);
      uint64_t v23 = qword_1EB35A038;
      long double v24 = (WTF::StringImpl *)v233[0];
      if (qword_1EB35A038)
      {
        int v25 = *(_DWORD *)(qword_1EB35A038 - 8);
        unsigned int v26 = *((_DWORD *)v233[0] + 4);
        if (v26 >= 0x100) {
          unsigned int v27 = v26 >> 8;
        }
        else {
          unsigned int v27 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v233[0]);
        }
        for (m = 0; ; unsigned int v27 = m + v30)
        {
          int v30 = v27 & v25;
          uint64_t v31 = *(WTF **)(v23 + 16 * (v27 & v25));
          if (v31 != (WTF *)-1)
          {
            if (!v31)
            {
              char v28 = 0;
              goto LABEL_41;
            }
            if (WTF::equal(v31, (const WTF::StringImpl *)v233[0], v22)) {
              break;
            }
          }
          ++m;
        }
        char v28 = 1;
LABEL_41:
        long double v24 = (WTF::StringImpl *)v233[0];
      }
      else
      {
        char v28 = 0;
      }
      v233[0] = 0;
      if (!v24) {
        goto LABEL_45;
      }
      if (*(_DWORD *)v24 != 2)
      {
        *(_DWORD *)v24 -= 2;
LABEL_45:
        if ((v28 & 1) == 0) {
          continue;
        }
        goto LABEL_48;
      }
      WTF::StringImpl::destroy(v24, v21);
      if ((v28 & 1) == 0) {
        continue;
      }
LABEL_48:
      if ([v20 isEqualToString:@"action"]
        && *(double *)(*(void *)(a1 + 24) + 112) < 3.0
        || (([v20 isEqualToString:@"browser_action"] & 1) != 0
         || [v20 isEqualToString:@"page_action"])
        && *(double *)(*(void *)(a1 + 24) + 112) >= 3.0)
      {
        WebKit::toErrorString(0, &cfstr_Contexts.isa, &cfstr_IsNotAValidCon.isa, v32, v20);
        *a7 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_172;
      }
      if (!BYTE2(v227))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        goto LABEL_220;
      }
      MEMORY[0x19972EAD0](v233, v20);
      uint64_t v35 = qword_1EB35A038;
      if (qword_1EB35A038)
      {
        int v36 = *(_DWORD *)(qword_1EB35A038 - 8);
        unsigned int v37 = *((_DWORD *)v233[0] + 4);
        if (v37 >= 0x100) {
          unsigned int v38 = v37 >> 8;
        }
        else {
          unsigned int v38 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v233[0]);
        }
        for (n = 0; ; unsigned int v38 = n + v40)
        {
          uint64_t v40 = v38 & v36;
          uint64_t v41 = *(WTF **)(v35 + 16 * v40);
          if (v41 != (WTF *)-1)
          {
            if (!v41) {
              goto LABEL_63;
            }
            if (WTF::equal(v41, (const WTF::StringImpl *)v233[0], v34)) {
              break;
            }
          }
          ++n;
        }
        __int16 v42 = *(_WORD *)(v35 + 16 * v40 + 8);
      }
      else
      {
LABEL_63:
        __int16 v42 = 0;
      }
      LOWORD(v227) = v227 | v42;
      uint64_t v43 = (WTF::StringImpl *)v233[0];
      v233[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v33);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    uint64_t v18 = [v17 countByEnumeratingWithState:&v201 objects:v232 count:16];
    if (v18) {
      continue;
    }
    break;
  }
LABEL_75:

  long long v16 = v184;
LABEL_76:

  uint64_t v44 = [v191 objectForKeyedSubscript:@"documentUrlPatterns"];
  uint64_t v45 = v44;
  if (v44)
  {
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    id v46 = v44;
    uint64_t v47 = [v46 countByEnumeratingWithState:&v197 objects:v231 count:16];
    if (v47)
    {
      uint64_t v48 = *(void *)v198;
      while (2)
      {
        for (iint i = 0; ii != v47; ++ii)
        {
          if (*(void *)v198 != v48) {
            objc_enumerationMutation(v46);
          }
          uint64_t v50 = *(void *)(*((void *)&v197 + 1) + 8 * ii);
          MEMORY[0x19972EAD0](&Table, v50);
          WebKit::WebExtensionMatchPattern::getOrCreate(&Table, v51, (uint64_t *)v233);
          unint64_t v54 = Table;
          Table = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2) {
              WTF::StringImpl::destroy(v54, v52);
            }
            else {
              *(_DWORD *)v54 -= 2;
            }
          }
          if (!v233[0]
            || (WebKit::WebExtensionMatchPattern::isSupported((WebKit::WebExtensionMatchPattern *)v233[0]) & 1) == 0)
          {
            WebKit::toErrorString(0, &cfstr_Documenturlpat.isa, &cfstr_IsNotAValidPat.isa, v53, v50);
            *a7 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v78 = (WTF::StringImpl *)v233[0];
            v233[0] = 0;
            if (v78) {
              CFRelease(*((CFTypeRef *)v78 + 1));
            }

            goto LABEL_172;
          }
          BOOL v55 = (WTF::StringImpl *)v233[0];
          v233[0] = 0;
          if (v55) {
            CFRelease(*((CFTypeRef *)v55 + 1));
          }
        }
        uint64_t v47 = [v46 countByEnumeratingWithState:&v197 objects:v231 count:16];
        if (v47) {
          continue;
        }
        break;
      }
    }

    WTF::makeVector<WTF::String>(v46, (uint64_t)v233);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v225, v233);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v233, v56);
  }

  BOOL v57 = [v191 objectForKeyedSubscript:@"targetUrlPatterns"];
  uint64_t v58 = v57;
  if (v57)
  {
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    id v59 = v57;
    uint64_t v60 = [v59 countByEnumeratingWithState:&v193 objects:v230 count:16];
    if (v60)
    {
      uint64_t v61 = *(void *)v194;
      while (2)
      {
        for (uint64_t jj = 0; jj != v60; ++jj)
        {
          if (*(void *)v194 != v61) {
            objc_enumerationMutation(v59);
          }
          uint64_t v63 = *(void *)(*((void *)&v193 + 1) + 8 * jj);
          MEMORY[0x19972EAD0](&Table, v63);
          WebKit::WebExtensionMatchPattern::getOrCreate(&Table, v64, (uint64_t *)v233);
          long long v67 = Table;
          Table = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2) {
              WTF::StringImpl::destroy(v67, v65);
            }
            else {
              *(_DWORD *)v67 -= 2;
            }
          }
          uint64_t v68 = (WTF::StringImpl *)v233[0];
          if (!v233[0] || !*((unsigned char *)v233[0] + 49))
          {
            WebKit::toErrorString(0, &cfstr_Targeturlpatte.isa, &cfstr_IsNotAValidPat.isa, v66, v63);
            *a7 = (id)objc_claimAutoreleasedReturnValue();
            __int16 v80 = (WTF::StringImpl *)v233[0];
            v233[0] = 0;
            if (v80) {
              CFRelease(*((CFTypeRef *)v80 + 1));
            }

            goto LABEL_172;
          }
          v233[0] = 0;
          CFRelease(*((CFTypeRef *)v68 + 1));
        }
        uint64_t v60 = [v59 countByEnumeratingWithState:&v193 objects:v230 count:16];
        if (v60) {
          continue;
        }
        break;
      }
    }

    WTF::makeVector<WTF::String>(v59, (uint64_t)v233);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v226, v233);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v233, v69);
  }

  uint64_t v70 = WebKit::objectForKey<NSString>(v191, @"id", 0);
  unint64_t v71 = v70;
  if (!v70)
  {
    uint64_t v81 = WebKit::objectForKey<NSNumber>(v191, @"id");
    uint64_t v82 = v81;
    if (v81)
    {
      v83 = [v81 stringValue];
      MEMORY[0x19972EAD0](v233, v83);
      int v85 = (WTF::StringImpl *)v233[0];
      v233[0] = 0;
      uint64_t v86 = v218;
      v218 = v85;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::destroy(v86, v84);
          char v88 = (WTF::StringImpl *)v233[0];
          v233[0] = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2) {
              WTF::StringImpl::destroy(v88, v87);
            }
            else {
              *(_DWORD *)v88 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v86 -= 2;
          v233[0] = 0;
        }
      }
    }
    goto LABEL_135;
  }
  if (![v70 length])
  {
    WebKit::toErrorString(0, &cfstr_Id.isa, &cfstr_ItMustNotBeEmp.isa, v72);
    *a7 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_172;
  }
  MEMORY[0x19972EAD0](v233, v71);
  long long v74 = (WTF::StringImpl *)v233[0];
  v233[0] = 0;
  uint64_t v75 = v218;
  v218 = v74;
  if (v75)
  {
    int v76 = *(_DWORD *)v75 - 2;
    if (*(_DWORD *)v75 != 2) {
      goto LABEL_114;
    }
    WTF::StringImpl::destroy(v75, v73);
    uint64_t v75 = (WTF::StringImpl *)v233[0];
    v233[0] = 0;
    if (v75)
    {
      int v76 = *(_DWORD *)v75 - 2;
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v77);
      }
      else {
LABEL_114:
      }
        *(_DWORD *)uint64_t v75 = v76;
    }
  }
LABEL_135:

  WebKit::objectForKey<NSString>(v191, @"parentId", 0);
  unint64_t v89 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();
  v233[0] = v89;
  if (!v89)
  {
    v91 = WebKit::objectForKey<NSNumber>(v191, @"parentId");
    uint64_t v92 = v91;
    if (v91)
    {
      id v192 = [v91 stringValue];
      std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v219, &v192);
    }
LABEL_141:

    v93 = [v191 objectForKeyedSubscript:@"title"];
    unsigned int v94 = v93;
    if (v93)
    {
      if (![v93 length] && (!HIBYTE(v221) || v221 != 3))
      {
        WebKit::toErrorString(0, &cfstr_Title_0.isa, &cfstr_ItMustNotBeEmp.isa, v95);
        *a7 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_172;
      }
      MEMORY[0x19972EAD0](v233, v94);
      unint64_t v97 = (WTF::StringImpl *)v233[0];
      v233[0] = 0;
      int v98 = v222;
      v222 = v97;
      if (v98)
      {
        int v99 = *(_DWORD *)v98 - 2;
        if (*(_DWORD *)v98 != 2) {
          goto LABEL_149;
        }
        WTF::StringImpl::destroy(v98, v96);
        int v98 = (WTF::StringImpl *)v233[0];
        v233[0] = 0;
        if (!v98) {
          goto LABEL_150;
        }
        int v99 = *(_DWORD *)v98 - 2;
        if (*(_DWORD *)v98 == 2) {
          WTF::StringImpl::destroy(v98, v100);
        }
        else {
LABEL_149:
        }
          *(_DWORD *)int v98 = v99;
      }
    }
LABEL_150:

    int v101 = [v191 objectForKeyedSubscript:@"onclick"];
    long long v102 = v101;
    if (v101)
    {
      if (![(JSValue *)v101 _isFunction])
      {
        WebKit::toErrorString(0, &cfstr_Onclick.isa, &cfstr_ItMustBeAFunct.isa, v103);
        *a7 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_172;
      }
      long long v104 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
      WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v104, v102);
      long long v105 = *a6;
      *a6 = v104;
      if (v105) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v105);
      }
    }
    WebKit::objectForKey<NSString>(v191, @"icons", 1);
    uint64_t v106 = (WebKit::WebExtensionAPIAction *)objc_claimAutoreleasedReturnValue();
    v108 = v106;
    if (v106)
    {
      v228 = @"16";
      unint64_t v109 = WebKit::WebExtensionAPIAction::parseIconPath(v106, a4, v107);
      v229 = v109;
      v110 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v229 forKeys:&v228 count:1];
    }
    else
    {
      v110 = 0;
    }

    v111 = WebKit::objectForKey<NSDictionary>(v191, @"icons", 1, 0);
    uint64_t v112 = v111;
    if (v111)
    {
      uint64_t v113 = WebKit::WebExtensionAPIAction::parseIconPathsDictionary(v111, a4, 0, @"icons", a7);

      v110 = (void *)v113;
      if (!v113)
      {

        goto LABEL_172;
      }
    }

    v114 = WebKit::objectForKey<NSArray>(v191, @"icon_variants", 0, 0);
    uint64_t v115 = v114;
    if (v114)
    {
      v116 = WebKit::WebExtensionAPIAction::parseIconVariants(v114, a4, @"icon_variants", a7);

      if (!v116)
      {
        v116 = 0;
        goto LABEL_216;
      }
      uint64_t v117 = v116;
    }
    else
    {
      v116 = 0;
      if (![v110 count])
      {
LABEL_182:
        uint64_t v125 = [v191 objectForKeyedSubscript:@"icon_variants"];
        if (v125)
        {
          BOOL v126 = WebKit::objectForKey<NSNull>(v191, @"icon_variants");
          BOOL v127 = v126 == 0;

          if (!v127) {
            goto LABEL_186;
          }
        }
        uint64_t v128 = [v191 objectForKeyedSubscript:@"icons"];
        if (v128)
        {
          v129 = WebKit::objectForKey<NSNull>(v191, @"icons");
          BOOL v130 = v129 == 0;

          if (!v130) {
LABEL_186:
          }
            WTF::String::operator=((uint64_t *)v224, MEMORY[0x1E4F30980]);
        }
        uint64_t v131 = [v191 objectForKeyedSubscript:@"command"];
        v132 = v131;
        if (!v131) {
          goto LABEL_194;
        }
        if ([v131 length])
        {
          MEMORY[0x19972EAD0](v233, v132);
          v135 = (WTF::StringImpl *)v233[0];
          v233[0] = 0;
          v136 = v223;
          v223 = v135;
          if (v136)
          {
            int v137 = *(_DWORD *)v136 - 2;
            if (*(_DWORD *)v136 != 2)
            {
LABEL_193:
              *(_DWORD *)v136 = v137;
              goto LABEL_194;
            }
            WTF::StringImpl::destroy(v136, v134);
            v136 = (WTF::StringImpl *)v233[0];
            v233[0] = 0;
            if (v136)
            {
              int v137 = *(_DWORD *)v136 - 2;
              if (*(_DWORD *)v136 == 2)
              {
                WTF::StringImpl::destroy(v136, v138);
                goto LABEL_194;
              }
              goto LABEL_193;
            }
          }
LABEL_194:

          uint64_t v139 = [v191 objectForKeyedSubscript:@"checked"];
          uint64_t v140 = v139;
          if (v139) {
            LOWORD(v224[1]) = [v139 BOOLValue] | 0x100;
          }

          v141 = [v191 objectForKeyedSubscript:@"enabled"];
          uint64_t v142 = v141;
          if (v141) {
            WORD1(v224[1]) = [v141 BOOLValue] | 0x100;
          }

          BOOL v143 = [v191 objectForKeyedSubscript:@"visible"];
          unint64_t v144 = v143;
          if (v143) {
            WORD2(v224[1]) = [v143 BOOLValue] | 0x100;
          }

          if (*(unsigned char *)(a5 + 120))
          {
            WTF::String::operator=((uint64_t *)a5, &v218);
            std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(a5 + 8), &v219);
            *(_WORD *)(a5 + 24) = v221;
            WTF::String::operator=((uint64_t *)(a5 + 32), &v222);
            WTF::String::operator=((uint64_t *)(a5 + 40), &v223);
            WTF::String::operator=((uint64_t *)(a5 + 48), v224);
            *(_DWORD *)(a5 + 56) = v224[1];
            *(_WORD *)(a5 + 60) = WORD2(v224[1]);
            std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a5 + 64), v225);
            std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a5 + 88), v226);
            *(_WORD *)(a5 + 112) = v227;
            *(unsigned char *)(a5 + 114) = BYTE2(v227);
            uint64_t v14 = 1;
          }
          else
          {
            v145 = v218;
            if (v218) {
              *(_DWORD *)v218 += 2;
            }
            *(void *)a5 = v145;
            *(unsigned char *)(a5 + 8) = 0;
            *(unsigned char *)(a5 + 16) = 0;
            if (v220)
            {
              uint64_t v146 = v219;
              if (v219) {
                *(_DWORD *)v219 += 2;
              }
              *(void *)(a5 + 8) = v146;
              *(unsigned char *)(a5 + 16) = 1;
            }
            *(_WORD *)(a5 + 24) = v221;
            uint64_t v147 = v222;
            if (v222) {
              *(_DWORD *)v222 += 2;
            }
            *(void *)(a5 + 32) = v147;
            unint64_t v148 = v223;
            if (v223) {
              *(_DWORD *)v223 += 2;
            }
            *(void *)(a5 + 40) = v148;
            v149 = v224[0];
            if (v224[0]) {
              *(_DWORD *)v224[0] += 2;
            }
            *(void *)(a5 + 48) = v149;
            *(_DWORD *)(a5 + 56) = v224[1];
            *(_WORD *)(a5 + 60) = WORD2(v224[1]);
            std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a5 + 64), (uint64_t)v225);
            std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a5 + 88), (uint64_t)v226);
            *(_DWORD *)(a5 + 112) = v227;
            uint64_t v14 = 1;
            *(unsigned char *)(a5 + 120) = 1;
          }
          goto LABEL_217;
        }
        WebKit::toErrorString(0, &cfstr_Command.isa, &cfstr_ItMustNotBeEmp.isa, v133);
        *a7 = (id)objc_claimAutoreleasedReturnValue();

LABEL_216:
        uint64_t v14 = 0;
LABEL_217:

        goto LABEL_173;
      }
      uint64_t v117 = v110;
    }
    v118 = WebKit::encodeJSONString(v117, 1, 0);
    MEMORY[0x19972EAD0](v233, v118);
    BOOL v120 = (WTF::StringImpl *)v233[0];
    v233[0] = 0;
    v121 = v224[0];
    v224[0] = v120;
    if (v121)
    {
      if (*(_DWORD *)v121 == 2)
      {
        WTF::StringImpl::destroy(v121, v119);
        v124 = (WTF::StringImpl *)v233[0];
        v233[0] = 0;
        if (v124)
        {
          if (*(_DWORD *)v124 == 2) {
            WTF::StringImpl::destroy(v124, v123);
          }
          else {
            *(_DWORD *)v124 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v121 -= 2;
        v233[0] = 0;
      }
    }

    goto LABEL_182;
  }
  if ([(WTF::StringImpl *)v89 length])
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v219, v233);
    goto LABEL_141;
  }
  WebKit::toErrorString(0, &cfstr_Parentid.isa, &cfstr_ItMustNotBeEmp.isa, v90);
  *a7 = (id)objc_claimAutoreleasedReturnValue();

LABEL_172:
  uint64_t v14 = 0;
LABEL_173:
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v218, v79);
LABEL_174:

  return v14;
}

void sub_199284078(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,WTF::StringImpl *a51,char a52)
{
  uint64_t v53 = 176;
  while (1)
  {
    unint64_t v54 = *(WTF::StringImpl **)((char *)&STACK[0x360] + v53);
    *(unint64_t *)((char *)&STACK[0x360] + v53) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, a2);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
    v53 -= 16;
    if (v53 == -16)
    {

      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a52, v55);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v5 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v5;
    LODWORD(v5) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v5;
    LODWORD(v5) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v5;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

id WebKit::objectForKey<NSNull>(void *a1, uint64_t a2)
{
  id v2 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  id v3 = v2;
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_19928472C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIMenus::createMenu(uint64_t a1, uint64_t a2, WebKit::WebFrame *a3, void *a4, uint64_t *a5, void *a6)
{
  id v11 = a4;
  *(void *)(a1 + 56) = *(void *)(a2 + 2120);
  LOBYTE(v38[0]) = 0;
  char v39 = 0;
  unsigned int v37 = 0;
  WebKit::WebFrame::url(a3, (uint64_t)v36);
  char updated = WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(a1, 0, v11, (NSString *)v36, (uint64_t)v38, &v37, a6);
  uint64_t v14 = v36[0];
  v36[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      uint64_t v14 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v12);
      if (updated) {
        goto LABEL_5;
      }
LABEL_25:
      if (v37) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v37);
      }
      uint64_t v31 = 0;
      goto LABEL_28;
    }
    *(_DWORD *)v14 -= 2;
  }
  if ((updated & 1) == 0) {
    goto LABEL_25;
  }
LABEL_5:
  if (!v39) {
    goto LABEL_36;
  }
  if (v38[0] && *((_DWORD *)v38[0] + 1)) {
    goto LABEL_14;
  }
  WTF::createVersion4UUIDString((uint64_t *)v36, v14);
  if (!v39)
  {
LABEL_36:
    id result = (id)std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  long long v16 = v36[0];
  v36[0] = 0;
  id v17 = v38[0];
  v38[0] = v16;
  if (!v17) {
    goto LABEL_14;
  }
  int v18 = *(_DWORD *)v17 - 2;
  if (*(_DWORD *)v17 != 2) {
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v17, v15);
  id v17 = v36[0];
  v36[0] = 0;
  if (!v17) {
    goto LABEL_14;
  }
  int v18 = *(_DWORD *)v17 - 2;
  if (*(_DWORD *)v17 == 2) {
    WTF::StringImpl::destroy(v17, v19);
  }
  else {
LABEL_13:
  }
    *(_DWORD *)id v17 = v18;
LABEL_14:
  {
    uint64_t v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v35);
  }
  uint64_t v20 = WebKit::WebProcess::singleton(void)::process;
  if (!v39) {
    goto LABEL_36;
  }
  ++*(_DWORD *)(a1 + 48);
  uint64_t v21 = *a5;
  *a5 = 0;
  unint64_t v22 = v37;
  uint64_t v23 = v38[0];
  unsigned int v37 = 0;
  if (v38[0]) {
    *(_DWORD *)v38[0] += 2;
  }
  uint64_t v24 = *(void *)(*(void *)(a1 + 24) + 24);
  int v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v25 = 1664;
  *((void *)v25 + 1) = v24;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  uint64_t v40 = v25;
  IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode(v25, (uint64_t)v38);
  unsigned int v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(void *)unsigned int v26 = &unk_1EE9FBD40;
  *((void *)v26 + 1) = a1;
  *((void *)v26 + 2) = a1;
  *((void *)v26 + 3) = v21;
  *((void *)v26 + 4) = v22;
  *((void *)v26 + 5) = v23;
  unsigned int v27 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v36[0] = v26;
  v36[1] = v27;
  (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v20 + 24) + 40))(v20 + 24, &v40, v36, 0);
  uint64_t v29 = v36[0];
  v36[0] = 0;
  if (v29) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v29 + 8))(v29);
  }
  int v30 = v40;
  uint64_t v40 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v28);
    WTF::fastFree(v33, v34);
  }
  if (!v39) {
    goto LABEL_36;
  }
  uint64_t v31 = WebKit::toMenuIdentifierWebAPI((WebKit *)v38, (const WTF::String *)v28);
LABEL_28:
  if (v39) {
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v38, v12);
  }

  return v31;
}

void sub_199284A6C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebKit::WebExtensionCallbackHandler *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a15);
  }
  if (a31) {
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a16, a2);
  }

  _Unwind_Resume(a1);
}

__CFString *WebKit::toMenuIdentifierWebAPI(WebKit *this, const WTF::String *a2)
{
  BOOL v6 = 0;
  WTF::String::toDouble(this, &v6);
  if (v6)
  {
    objc_msgSend(NSNumber, "numberWithDouble:");
    id v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*(void *)this) {
      id v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v4 = &stru_1EEA10550;
    }
    id v3 = v4;
  }

  return v3;
}

void WebKit::WebExtensionAPIMenus::update(uint64_t a1, uint64_t a2, WebKit::WebFrame *a3, void *a4, void *a5, uint64_t *a6, void *a7)
{
  id v13 = a4;
  id v14 = a5;
  *(void *)(a1 + 56) = *(void *)(a2 + 2120);
  long long v15 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v16 = objc_opt_class();
  id v17 = objc_msgSend(v15, "orderedSetWithObjects:", v16, objc_opt_class(), 0);
  LOBYTE(v16) = WebKit::validateObject(v13, @"identifier", v17, a7);

  if ((v16 & 1) == 0) {
    goto LABEL_41;
  }
  LOBYTE(v54[0]) = 0;
  char v55 = 0;
  uint64_t v53 = 0;
  WebKit::WebFrame::url(a3, (uint64_t)&v48);
  char updated = WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(a1, 1, v14, (NSString *)&v48, (uint64_t)v54, &v53, a7);
  uint64_t v20 = v48;
  uint64_t v48 = 0;
  if (!v20)
  {
LABEL_5:
    if (updated) {
      goto LABEL_6;
    }
LABEL_20:
    if (v53) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v53);
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v20, v18);
  if ((updated & 1) == 0) {
    goto LABEL_20;
  }
LABEL_6:
  objc_opt_class();
  uint64_t v21 = WTF::dynamic_objc_cast<NSNumber>(v13);
  unint64_t v22 = v21;
  if (v21)
  {
    uint64_t v23 = [v21 stringValue];

    id v13 = (id)v23;
  }

  {
    uint64_t v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  uint64_t v24 = WebKit::WebProcess::singleton(void)::process;
  MEMORY[0x19972EAD0](&v52, v13);
  if (v55)
  {
    ++*(_DWORD *)(a1 + 48);
    uint64_t v48 = (WTF::StringImpl *)a1;
    *(void *)&long long v49 = a1;
    uint64_t v25 = *a6;
    *a6 = 0;
    unsigned int v26 = v53;
    uint64_t v53 = 0;
    *((void *)&v49 + 1) = v25;
    v50[0] = v26;
    unsigned int v27 = (WTF::StringImpl *)v54[0];
    if (v54[0]) {
      *(_DWORD *)v54[0] += 2;
    }
    v50[1] = v27;
    MEMORY[0x19972EAD0](&v51, v13);
    uint64_t v28 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v29 = 1667;
    *((void *)v29 + 1) = v28;
    *((void *)v29 + 66) = (char *)v29 + 16;
    *((void *)v29 + 67) = 512;
    *((void *)v29 + 68) = 0;
    *((void *)v29 + 70) = 0;
    *((void *)v29 + 69) = 0;
    IPC::Encoder::encodeHeader(v29);
    BOOL v57 = v29;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)&v52);
    IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode(v29, (uint64_t)v54);
    int v30 = v48;
    long long v32 = v49;
    uint64_t v31 = v50[0];
    long long v49 = 0u;
    uint64_t v33 = v50[1];
    uint64_t v34 = v51;
    *(_OWORD *)uint64_t v50 = 0u;
    int v51 = 0;
    uint64_t v35 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v35 = &unk_1EE9FBD68;
    *(void *)(v35 + 8) = v30;
    *(_OWORD *)(v35 + 16) = v32;
    *(void *)(v35 + 32) = v31;
    *(void *)(v35 + 40) = v33;
    *(void *)(v35 + 48) = v34;
    uint64_t v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v56[0] = v35;
    v56[1] = v36;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v24 + 24) + 40))(v24 + 24, &v57, v56, 0);
    uint64_t v37 = v56[0];
    v56[0] = 0;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    unsigned int v38 = v57;
    BOOL v57 = 0;
    if (v38)
    {
      IPC::Encoder::~Encoder(v38, v18);
      WTF::fastFree(v45, v46);
    }
    char v39 = v51;
    int v51 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v18);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    uint64_t v40 = v50[1];
    v50[1] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v18);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    uint64_t v41 = v50[0];
    v50[0] = 0;
    if (v41) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v41);
    }
    __int16 v42 = (WebKit::WebExtensionCallbackHandler *)*((void *)&v49 + 1);
    *((void *)&v49 + 1) = 0;
    if (v42) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v42);
    }
    uint64_t v43 = v49;
    *(void *)&long long v49 = 0;
    if (v43)
    {
      if (*(_DWORD *)(v43 + 48) == 1) {
        (*(void (**)(void))(*(void *)(v43 + 40) + 8))();
      }
      else {
        --*(_DWORD *)(v43 + 48);
      }
    }
    uint64_t v44 = v52;
    char v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v18);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
LABEL_39:
    if (v55) {
      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v54, v18);
    }
LABEL_41:

    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_199285144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WebKit::WebExtensionCallbackHandler *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a18) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a18);
  }
  if (a34) {
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a19, v38);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIMenus::remove(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_msgSend(v8, "orderedSetWithObjects:", v9, objc_opt_class(), 0);
  LOBYTE(a4) = WebKit::validateObject(v7, @"identifier", v10, a4);

  if (a4)
  {
    objc_opt_class();
    id v11 = WTF::dynamic_objc_cast<NSNumber>(v7);
    JSValueRef v12 = v11;
    if (v11)
    {
      uint64_t v13 = [v11 stringValue];

      id v7 = (id)v13;
    }

    {
      uint64_t v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v28);
    }
    uint64_t v14 = WebKit::WebProcess::singleton(void)::process;
    MEMORY[0x19972EAD0](&v33, v7);
    ++*(_DWORD *)(a1 + 48);
    uint64_t v29 = a1;
    uint64_t v30 = a1;
    uint64_t v15 = *a3;
    *a3 = 0;
    uint64_t v31 = v15;
    MEMORY[0x19972EAD0](&v32, v7);
    uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 24);
    id v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)id v17 = 1665;
    *((void *)v17 + 1) = v16;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    uint64_t v35 = v17;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v33);
    int v18 = v32;
    long long v32 = 0;
    uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v19 = &unk_1EE9FBD90;
    v19[1] = v29;
    v19[2] = v30;
    v19[3] = v31;
    v19[4] = v18;
    uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v34[0] = v19;
    v34[1] = v20;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v14 + 24) + 40))(v14 + 24, &v35, v34, 0);
    uint64_t v22 = v34[0];
    v34[0] = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v35;
    uint64_t v35 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v26, v27);
    }
    uint64_t v24 = v32;
    long long v32 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = v33;
    uint64_t v33 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
}

void sub_1992856D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIMenus::removeAll(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  BOOL v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v6 = 1666;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9FBDB8;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  id result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_199285A30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199285AF8()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x199285AE4);
}

uint64_t WebKit::WebExtensionAPIMenus::onClicked(WebKit::WebExtensionAPIMenus *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 18;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIMenus &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIMenus &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_199285C68(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
  id v32 = v10;
  JSValueRef v12 = WebKit::toMenuIdentifierWebAPI((WebKit *)a2, v11);
  [v10 setObject:v12 forKeyedSubscript:@"menuItemId"];

  if (a2[16])
  {
    uint64_t v14 = WebKit::toMenuIdentifierWebAPI((WebKit *)(a2 + 8), v13);
    [v10 setObject:v14 forKeyedSubscript:@"parentMenuItemId"];
  }
  if (!a2[25]) {
    goto LABEL_50;
  }
  if (a2[24] - 1 <= 1)
  {
    if (a2[57]) {
      BOOL v15 = a2[56] == 0;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = !v15;
    id v17 = [NSNumber numberWithBool:v16];
    [v10 setObject:v17 forKeyedSubscript:@"checked"];

    int v18 = [NSNumber numberWithBool:a3];
    [v10 setObject:v18 forKeyedSubscript:@"wasChecked"];
  }
  if (*(void *)(a4 + 168)) {
    [v10 setObject:WTF::StringImpl::operator NSString *() forKeyedSubscript:@"selectionText"];
  }
  if (!*(void *)(a4 + 128)) {
    goto LABEL_22;
  }
  [v10 setObject:WTF::StringImpl::operator NSString *() forKeyedSubscript:@"srcUrl"];
  if ((*(_WORD *)a4 & 2) != 0)
  {
    uint64_t v19 = @"audio";
  }
  else if ((*(_WORD *)a4 & 0x10) != 0)
  {
    uint64_t v19 = @"image";
  }
  else
  {
    if ((*(_WORD *)a4 & 0x200) == 0) {
      goto LABEL_22;
    }
    uint64_t v19 = @"video";
  }
  [v10 setObject:v19 forKeyedSubscript:@"mediaType"];
LABEL_22:
  if (*(void *)(a4 + 88)) {
    [v10 setObject:WTF::StringImpl::operator NSString *() forKeyedSubscript:@"linkUrl"];
  }
  if (*(void *)(a4 + 80)) {
    [v10 setObject:WTF::StringImpl::operator NSString *() forKeyedSubscript:@"linkText"];
  }
  if (!*(unsigned char *)(a4 + 32) || !*(void *)(a4 + 40)) {
    goto LABEL_42;
  }
  uint64_t v20 = [NSNumber numberWithBool:*(unsigned __int8 *)(a4 + 176)];
  [v10 setObject:v20 forKeyedSubscript:@"editable"];

  if (!*(unsigned char *)(a4 + 32))
  {
LABEL_50:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return;
  }
  unint64_t v21 = *(void *)(a4 + 24);
  if (v21 == -3)
  {
    double v22 = -1.0;
  }
  else
  {
    double v22 = 0.0;
    if (v21 != -2) {
      double v22 = (double)v21;
    }
  }
  uint64_t v23 = [NSNumber numberWithDouble:v22];
  [v10 setObject:v23 forKeyedSubscript:@"frameId"];

  uint64_t v24 = *(void *)(a4 + 40);
  if (*(unsigned char *)(a4 + 32) && *(void *)(a4 + 24) == -2)
  {
    if (v24) {
      uint64_t v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v25 = &stru_1EEA10550;
    }
    [v10 setObject:v25 forKeyedSubscript:@"pageUrl"];
  }
  else
  {
    if (v24) {
      uint64_t v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v25 = &stru_1EEA10550;
    }
    [v10 setObject:v25 forKeyedSubscript:@"frameUrl"];
  }

LABEL_42:
  if (*(unsigned char *)(a5 + 176))
  {
    unsigned int v26 = WebKit::toWebAPI(a5);
  }
  else
  {
    unsigned int v26 = 0;
  }
  id v31 = v26;
  unsigned int v27 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(void *)unsigned int v27 = &unk_1EE9FBDE0;
  *((void *)v27 + 1) = a2;
  *((void *)v27 + 2) = &v32;
  *((void *)v27 + 3) = &v31;
  uint64_t v30 = v27;
  uint64_t v28 = WebCore::mainThreadNormalWorld(v27);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v30, v28);
  uint64_t v29 = v30;
  uint64_t v30 = 0;
  if (v29) {
    (*(void (**)(WebCore *))(*(void *)v29 + 8))(v29);
  }
}

void sub_199286048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_199286130(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(_WORD *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    int v5 = (_WORD *)(v2 + 24);
    do
    {
      *((void *)v5 - 1) = 0;
      _WORD *v5 = 0;
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (WTF::StringImpl **)(v2 + 16 * i);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unsigned int v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100) {
            unsigned int v14 = v13 >> 8;
          }
          else {
            unsigned int v14 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v15 = 0;
          do
          {
            uint64_t v16 = v14 & v12;
            unsigned int v14 = ++v15 + v16;
          }
          while (*(void *)(v11 + 16 * v16));
          uint64_t v17 = v11 + 16 * v16;
          *(void *)uint64_t v17 = 0;
          int v18 = *v9;
          void *v9 = 0;
          *(void *)uint64_t v17 = v18;
          *(_WORD *)(v17 + 8) = *(_WORD *)(v2 + 16 * i + 8);
          uint64_t v19 = *v9;
          void *v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v7);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          void *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FBD40;
  int v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WebKit::WebExtensionCallbackHandler *)a1[4];
  a1[4] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  }
  unsigned int v5 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBD40;
  int v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  }
  unsigned int v5 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler **)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v6, v7);
      if (v8)
      {
        if (v7)
        {
          int v4 = v6;
          uint64_t v6 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2) {
              WTF::StringImpl::destroy(v4, v3);
            }
            else {
              *(_DWORD *)v4 -= 2;
            }
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    unsigned int v5 = (WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v5, 0, 0);
  }
}

void sub_199286630(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler **a1, uint64_t a2, char a3)
{
  if (a3)
  {
    int v4 = a1[2];
    if (a2) {
      unsigned int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unsigned int v5 = &stru_1EEA10550;
    }
    int v18 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
  }
  else
  {
    uint64_t v6 = a1[3];
    if (v6)
    {
      char v7 = *a1;
      char v8 = (uint64_t *)((char *)*a1 + 72);
      if (!*v8 || !*(_DWORD *)(*v8 - 12))
      {
        {
          uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v17);
        }
        uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
        char v20 = 18;
        char v19 = *((unsigned char *)v7 + 8);
        v21[0] = (char *)v7 + 56;
        v21[1] = &v20;
        void v21[2] = &v19;
        uint64_t v10 = *(void *)(*((void *)v7 + 3) + 24);
        uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v11 = 1642;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        double v22 = v11;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v11, (uint64_t)v21);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v9 + 24) + 32))(v9 + 24, &v22, 0);
        unsigned int v13 = v22;
        double v22 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v15, v16);
        }
        uint64_t v6 = a1[3];
      }
      double v22 = v6;
      a1[3] = 0;
      WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>((uint64_t)v21, v8, a1 + 4, (uint64_t *)&v22);
      if (v22) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
      }
    }
    id v14 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
  }
}

void sub_199286868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    int v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    int v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      int v15 = v12;
    }
    WTF::String::operator=(v15, a3);
    uint64_t v17 = *a4;
    *a4 = 0;
    uint64_t result = (WebKit::WebExtensionCallbackHandler *)v15[1];
    v15[1] = v17;
    if (result) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
    }
    uint64_t v19 = *a2;
    if (*a2) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v23 = *a2;
    if (*a2) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        uint64_t result = (WebKit::WebExtensionCallbackHandler *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
        int v15 = (uint64_t *)result;
        uint64_t v23 = *a2;
        if (*a2) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v23 + 16 * v26;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v21 = *a2;
  if (*a2) {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v21 + 16 * v22;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v27 = v8 + 16 * v14;
  uint64_t v28 = *a4;
  *a4 = 0;
  uint64_t result = *(WebKit::WebExtensionCallbackHandler **)(v27 + 8);
  *(void *)(v27 + 8) = v28;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      unsigned int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          int v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
            uint64_t v25 = *v23;
            *uint64_t v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v23 = 0;
          }
          unint64_t v26 = *v13;
          IPC::Encoder *v13 = 0;
          *uint64_t v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          uint64_t v28 = *(WTF::StringImpl **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v23[1] = v28;
          uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
          }
          uint64_t v30 = *v13;
          IPC::Encoder *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            int v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
            uint64_t v14 = *v13;
          }
          IPC::Encoder *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FBD68;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WebKit::WebExtensionCallbackHandler *)a1[4];
  a1[4] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  }
  uint64_t v6 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v6, (const WTF::StringImpl *)v7);
      if (v8)
      {
        if (v7)
        {
          int v4 = v6;
          uint64_t v6 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2) {
              WTF::StringImpl::destroy(v4, v3);
            }
            else {
              *(_DWORD *)v4 -= 2;
            }
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    unsigned int v5 = (uint64_t *)(a1 + 8);
    WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v5, 0, 0);
  }
}

void sub_199286ED0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,WebKit::WebFrame &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!(_BYTE)a3)
  {
    uint64_t v6 = (WTF::StringImpl *)*a1;
    unsigned __int8 v7 = (const WTF::StringImpl *)a1[4];
    if (!v7 || !*((_DWORD *)v7 + 1))
    {
      WTF::String::operator=(a1 + 4, (WTF::StringImpl **)a1 + 5);
      unsigned __int8 v7 = (const WTF::StringImpl *)a1[4];
    }
    int v8 = WTF::equal((WTF *)a1[5], v7, a3);
    uint64_t v10 = a1[3];
    if (v8)
    {
      if (!v10)
      {
LABEL_47:
        id v27 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
        return;
      }
      goto LABEL_14;
    }
    if (v10)
    {
LABEL_14:
      uint64_t v11 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v6 + 9, (WTF::StringImpl **)a1 + 5, v9);
      uint64_t v12 = *((void *)v6 + 9);
      if (v12)
      {
        unsigned int v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
        if (v13 == v11) {
          goto LABEL_37;
        }
LABEL_19:
        if (v13 != v11) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)v6 + 9, v11);
        }
        goto LABEL_37;
      }
      if (v11)
      {
        unsigned int v13 = 0;
        goto LABEL_19;
      }
LABEL_37:
      uint64_t v17 = (IPC::Encoder *)a1[3];
LABEL_38:
      if (v17)
      {
        int v21 = (uint64_t *)((char *)v6 + 72);
        uint64_t v20 = *((void *)v6 + 9);
        if (!v20 || !*(_DWORD *)(v20 - 12))
        {
          {
            uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v30);
          }
          uint64_t v22 = WebKit::WebProcess::singleton(void)::process;
          char v33 = 18;
          char v32 = *((unsigned char *)v6 + 8);
          v34[0] = (char *)v6 + 56;
          v34[1] = &v33;
          void v34[2] = &v32;
          uint64_t v23 = *(void *)(*((void *)v6 + 3) + 24);
          int v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)int v24 = 1642;
          *((void *)v24 + 1) = v23;
          *((void *)v24 + 66) = (char *)v24 + 16;
          *((void *)v24 + 67) = 512;
          *((void *)v24 + 68) = 0;
          *((void *)v24 + 70) = 0;
          *((void *)v24 + 69) = 0;
          IPC::Encoder::encodeHeader(v24);
          uint64_t v35 = v24;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v24, (uint64_t)v34);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v22 + 24) + 32))(v22 + 24, &v35, 0);
          unint64_t v26 = v35;
          uint64_t v35 = 0;
          if (v26)
          {
            IPC::Encoder::~Encoder(v26, v25);
            WTF::fastFree(v28, v29);
          }
          uint64_t v17 = (IPC::Encoder *)a1[3];
        }
        uint64_t v35 = v17;
        a1[3] = 0;
        WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>((uint64_t)v34, v21, (WTF::StringImpl **)a1 + 4, (uint64_t *)&v35);
        if (v35) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v35);
        }
      }
      goto LABEL_47;
    }
    uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v6 + 9, (WTF::StringImpl **)a1 + 5, v9);
    uint64_t v15 = *((void *)v6 + 9);
    if (v15) {
      uint64_t v16 = v15 + 16 * *(unsigned int *)(v15 - 4);
    }
    else {
      uint64_t v16 = 0;
    }
    if (v16 == v14)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = *(IPC::Encoder **)(v14 + 8);
      if (v17)
      {
        *(void *)(v14 + 8) = 0;
        uint64_t v15 = *((void *)v6 + 9);
      }
      if (v15)
      {
        uint64_t v18 = v15 + 16 * *(unsigned int *)(v15 - 4);
        if (v18 == v14) {
          goto LABEL_35;
        }
LABEL_33:
        if (v18 != v14) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)v6 + 9, (WTF::StringImpl **)v14);
        }
        goto LABEL_35;
      }
      if (v14)
      {
        uint64_t v18 = 0;
        goto LABEL_33;
      }
    }
LABEL_35:
    unsigned int v19 = (WebKit::WebExtensionCallbackHandler *)a1[3];
    a1[3] = (uint64_t)v17;
    if (!v19) {
      goto LABEL_38;
    }
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_37;
  }
  int v4 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  if (a2) {
    unsigned int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v5 = &stru_1EEA10550;
  }
  id v31 = v5;
  WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
}

void sub_199287224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (v14) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  uint64_t result = a2[1];
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return (WebKit::WebExtensionCallbackHandler *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FBD90;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBD90;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (WTF::StringImpl **)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v6, (const WTF::StringImpl *)v7);
      if (v8)
      {
        if (v7)
        {
          int v4 = v6;
          int v6 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2) {
              WTF::StringImpl::destroy(v4, v3);
            }
            else {
              *(_DWORD *)v4 -= 2;
            }
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (WTF::StringImpl **)(a1 + 8);
    WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v5, 0, 0);
  }
}

void sub_199287578(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WTF::StringImpl **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!(_BYTE)a3)
  {
    int v6 = *a1;
    unsigned __int8 v7 = (uint64_t *)((char *)*a1 + 72);
    char v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v7, a1 + 3, a3);
    uint64_t v9 = *((void *)v6 + 9);
    if (v9)
    {
      uint64_t v10 = (WTF::StringImpl **)(v9 + 16 * *(unsigned int *)(v9 - 4));
      if (v10 == v8)
      {
LABEL_15:
        if (*(_DWORD *)(v9 - 12))
        {
LABEL_19:
          id v16 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
          return;
        }
LABEL_16:
        {
          unsigned int v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v19);
        }
        uint64_t v11 = WebKit::WebProcess::singleton(void)::process;
        char v22 = 18;
        char v21 = *((unsigned char *)v6 + 8);
        v23[0] = (char *)v6 + 56;
        v23[1] = &v22;
        _OWORD v23[2] = &v21;
        void v23[3] = 1;
        uint64_t v12 = *(void *)(*((void *)v6 + 3) + 24);
        unsigned int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unsigned int v13 = 1674;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        int v24 = v13;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v13, (uint64_t)v23);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v11 + 24) + 32))(v11 + 24, &v24, 0);
        uint64_t v15 = v24;
        int v24 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v14);
          WTF::fastFree(v17, v18);
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_16;
      }
      uint64_t v10 = 0;
    }
    if (v10 != v8)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v7, v8);
      uint64_t v9 = *v7;
    }
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v4 = a1[2];
  if (a2) {
    uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1EEA10550;
  }
  uint64_t v20 = v5;
  WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
}

void sub_1992877B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(IPC::Encoder **)(v10 - 40);
  *(void *)(v10 - 40) = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FBDB8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FBDB8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (JSObjectRef **)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, v6, v7);
      if (v8)
      {
        if (v7)
        {
          uint64_t v4 = v6;
          int v6 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2) {
              WTF::StringImpl::destroy(v4, v3);
            }
            else {
              *(_DWORD *)v4 -= 2;
            }
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (JSObjectRef **)(a1 + 8);
    WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v5, 0, 0);
  }
}

void sub_1992879EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(JSObjectRef **a1, WTF::StringImpl *a2, char a3)
{
  if (a3)
  {
    uint64_t v4 = (WebKit::WebExtensionCallbackHandler *)a1[2];
    if (a2) {
      uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v17 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
  }
  else
  {
    int v6 = *a1;
    char v7 = (WTF::StringImpl **)(*a1)[9];
    if (v7 && *((_DWORD *)v7 - 3))
    {
      v6[9] = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
      {
        id v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v16);
      }
      uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
      char v19 = 18;
      char v18 = *((unsigned char *)v6 + 8);
      v20[0] = v6 + 7;
      v20[1] = &v19;
      v20[2] = &v18;
      void v20[3] = 1;
      uint64_t v9 = *((void *)v6[3] + 3);
      uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v10 = 1674;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      char v21 = v10;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v10, (uint64_t)v20);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v8 + 24) + 32))(v8 + 24, &v21, 0);
      uint64_t v12 = v21;
      char v21 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v11);
        WTF::fastFree(v14, v15);
      }
    }
    id v13 = WebKit::WebExtensionCallbackHandler::call(a1[2]);
  }
}

void sub_199287BEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(IPC::Encoder **)(v10 - 40);
  *(void *)(v10 - 40) = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        int v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
          uint64_t v5 = *v4;
        }
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent(WebKit::WebExtensionMenuItemParameters const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&,std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && !*(unsigned char *)(v6 + 144))
  {
    char v7 = 0;
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  v22[8] = 0;
  v22[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v9 = *(void *)(WebKit::WebExtensionAPINamespace::menus(a3) + 72);
  if (v9)
  {
    uint64_t v10 = *(WTF::StringImpl ***)(a1 + 8);
    int v11 = *(_DWORD *)(v9 - 8);
    unsigned int v12 = *((_DWORD *)*v10 + 4);
    if (v12 >= 0x100) {
      unsigned int v13 = v12 >> 8;
    }
    else {
      unsigned int v13 = WTF::StringImpl::hashSlowCase(*v10);
    }
    for (i = 0; ; unsigned int v13 = i + v15)
    {
      uint64_t v15 = v13 & v11;
      id v16 = *(WTF **)(v9 + 16 * v15);
      if (v16 != (WTF *)-1)
      {
        if (!v16) {
          goto LABEL_17;
        }
        if (WTF::equal(v16, *v10, v8)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v17 = *(WebKit::WebExtensionCallbackHandler **)(v9 + 16 * v15 + 8);
    if (v17)
    {
      ++*(_DWORD *)v17;
      id v18 = WebKit::WebExtensionCallbackHandler::call(v17, **(objc_object ***)(a1 + 16), **(objc_object ***)(a1 + 24));
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v17);
    }
  }
LABEL_17:
  char v19 = (WebKit::WebExtensionAPIMenus *)WebKit::WebExtensionAPINamespace::menus(a3);
  uint64_t v20 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIMenus::onClicked(v19);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v20, **(objc_object ***)(a1 + 16), **(objc_object ***)(a1 + 24));
  uint64_t result = (unsigned int *)MEMORY[0x1997355E0](v22);
  if ((v7 & 1) == 0) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  return result;
}

void sub_199287E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  MEMORY[0x1997355E0](va);
  if ((v4 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPINamespace::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  uint64_t v5 = *(const char **)a2;
  uint64_t v6 = *((void *)a2 + 1);
  if (!*(void *)a2)
  {
    if ("action")
    {
      if ("commands")
      {
        if ("declarativeNetRequest")
        {
          if ("browserAction")
          {
            if (!"devtools") {
              return 0;
            }
            if ("notifications")
            {
              if ("pageAction")
              {
                if ("storage")
                {
                  if (!"test") {
                    goto LABEL_22;
                  }
                  goto LABEL_44;
                }
LABEL_57:
                unint64_t v26 = this[3];
                if (v6)
                {
                  if (v6 == 1)
                  {
                    id v27 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
                    *MEMORY[0x1E4F30960] += 2;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    id v27 = v30;
                  }
                  uint64_t v29 = v27;
                }
                else
                {
                  uint64_t v29 = 0;
                }
                if ((WebKit::WebExtensionContextProxy::hasPermission(v26, &v29) & 1) == 0) {
                  goto LABEL_38;
                }
                goto LABEL_35;
              }
LABEL_49:
              uint64_t v23 = this[3];
              if (*((double *)v23 + 14) >= 3.0) {
                return 0;
              }
              int v11 = WTF::RetainPtr<NSSet>::get((id *)v23 + 13);
              unsigned int v12 = WebKit::objectForKey<NSDictionary>(v11, @"page_action", 0, 0);
              goto LABEL_29;
            }
            goto LABEL_41;
          }
LABEL_36:
          id v16 = this[3];
          if (*((double *)v16 + 14) >= 3.0) {
            return 0;
          }
          int v11 = WTF::RetainPtr<NSSet>::get((id *)v16 + 13);
          unsigned int v12 = WebKit::objectForKey<NSDictionary>(v11, @"browser_action", 0, 0);
          goto LABEL_29;
        }
        goto LABEL_30;
      }
LABEL_27:
      int v11 = WTF::RetainPtr<NSSet>::get((id *)this[3] + 13);
      unsigned int v12 = WebKit::objectForKey<NSDictionary>(v11, @"commands", 0, 0);
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v10 = this[3];
    if (*((double *)v10 + 14) < 3.0) {
      return 0;
    }
    int v11 = WTF::RetainPtr<NSSet>::get((id *)v10 + 13);
    unsigned int v12 = WebKit::objectForKey<NSDictionary>(v11, @"action", 0, 0);
LABEL_29:
    unint64_t v9 = v12 != 0;

    return v9;
  }
  if (!strcmp(*(const char **)a2, "action")) {
    goto LABEL_25;
  }
  if (!strcmp(v5, "commands")) {
    goto LABEL_27;
  }
  if (strcmp(v5, "declarativeNetRequest"))
  {
    if (strcmp(v5, "browserAction"))
    {
      if (!strcmp(v5, "devtools")) {
        return 0;
      }
      if (strcmp(v5, "notifications"))
      {
        if (strcmp(v5, "pageAction"))
        {
          if (strcmp(v5, "storage"))
          {
            if (!strcmp(v5, "test"))
            {
LABEL_22:
              uint64_t v7 = *((void *)this[3] + 4);
              if (v7)
              {
                uint64_t v8 = *(void *)(v7 + 8);
                if (v8) {
                  return *(unsigned char *)(v8 + 32) != 0;
                }
              }
              return 0;
            }
            goto LABEL_44;
          }
          goto LABEL_57;
        }
        goto LABEL_49;
      }
LABEL_41:
      uint64_t v19 = *((void *)this[3] + 4);
      if (!v19) {
        return 0;
      }
      uint64_t v20 = *(void *)(v19 + 8);
      if (!v20 || !*(unsigned char *)(v20 + 32)) {
        return 0;
      }
LABEL_44:
      char v21 = this[3];
      if (v6)
      {
        if (v6 == 1)
        {
          char v22 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v22 = v30;
        }
        uint64_t v29 = v22;
      }
      else
      {
        uint64_t v29 = 0;
      }
      unint64_t v9 = (unint64_t)WebKit::WebExtensionContextProxy::hasPermission(v21, &v29);
      goto LABEL_52;
    }
    goto LABEL_36;
  }
LABEL_30:
  unsigned int v13 = this[3];
  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v14 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v14 = v30;
    }
    uint64_t v29 = v14;
  }
  else
  {
    uint64_t v29 = 0;
  }
  if ((WebKit::WebExtensionContextProxy::hasPermission(v13, &v29) & 1) == 0)
  {
LABEL_38:
    uint64_t v17 = this[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v28 = v30;
    unint64_t v9 = (unint64_t)WebKit::WebExtensionContextProxy::hasPermission(v17, &v28);
    id v18 = v28;
    uint64_t v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    goto LABEL_52;
  }
LABEL_35:
  unint64_t v9 = 1;
LABEL_52:
  int v24 = v29;
  uint64_t v29 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v15);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v9;
}

void sub_199288340(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPINamespace::action(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    WebKit::WebExtensionAPIAction::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIAction *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIAction *WebKit::WebExtensionAPIAction::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIAction **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIAction *)WTF::fastMalloc((WTF *)0x40);
  uint64_t result = WebKit::WebExtensionAPIAction::WebExtensionAPIAction(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1992884D4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::alarms(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    WebKit::WebExtensionAPIAlarms::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIAlarms *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

WebKit::WebExtensionAPIAlarms *WebKit::WebExtensionAPIAlarms::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIAlarms **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIAlarms *)WTF::fastMalloc((WTF *)0x40);
  uint64_t result = WebKit::WebExtensionAPIAlarms::WebExtensionAPIAlarms(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1992885F4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::commands(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    WebKit::WebExtensionAPICommands::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPICommands *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

WebKit::WebExtensionAPICommands *WebKit::WebExtensionAPICommands::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPICommands **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPICommands *)WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::WebExtensionAPICommands::WebExtensionAPICommands(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288714(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::cookies(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    WebKit::WebExtensionAPICookies::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPICookies *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

WebKit::WebExtensionAPICookies *WebKit::WebExtensionAPICookies::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPICookies **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPICookies *)WTF::fastMalloc((WTF *)0x40);
  uint64_t result = WebKit::WebExtensionAPICookies::WebExtensionAPICookies(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288834(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::declarativeNetRequest(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    WebKit::WebExtensionAPIDeclarativeNetRequest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIDeclarativeNetRequest *)*((void *)this + 11);
    *((void *)this + 11) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 11);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 11);
  }
  return result;
}

WebKit::WebExtensionAPIDeclarativeNetRequest *WebKit::WebExtensionAPIDeclarativeNetRequest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIDeclarativeNetRequest **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIDeclarativeNetRequest *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPIDeclarativeNetRequest::WebExtensionAPIDeclarativeNetRequest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288954(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::extension(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result)
  {
    WebKit::WebExtensionAPIExtension::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIExtension *)*((void *)this + 12);
    *((void *)this + 12) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 12);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 12);
  }
  return result;
}

WebKit::WebExtensionAPIExtension *WebKit::WebExtensionAPIExtension::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIExtension **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIExtension *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPIExtension::WebExtensionAPIExtension(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288A74(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::i18n(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    WebKit::WebExtensionAPILocalization::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPILocalization *)*((void *)this + 13);
    *((void *)this + 13) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 13);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 13);
  }
  return result;
}

WebKit::WebExtensionAPILocalization *WebKit::WebExtensionAPILocalization::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPILocalization **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPILocalization *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPILocalization::WebExtensionAPILocalization(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288B94(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::menus(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    WebKit::WebExtensionAPIMenus::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIMenus *)*((void *)this + 14);
    *((void *)this + 14) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 14);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 14);
  }
  return result;
}

WebKit::WebExtensionAPIMenus *WebKit::WebExtensionAPIMenus::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIMenus **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIMenus *)WTF::fastMalloc((WTF *)0x50);
  uint64_t result = WebKit::WebExtensionAPIMenus::WebExtensionAPIMenus(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288CB4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::notifications(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    WebKit::WebExtensionAPINotifications::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPINotifications *)*((void *)this + 15);
    *((void *)this + 15) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 15);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 15);
  }
  return result;
}

WebKit::WebExtensionAPINotifications *WebKit::WebExtensionAPINotifications::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPINotifications **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPINotifications *)WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::WebExtensionAPINotifications::WebExtensionAPINotifications(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288DD4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::permissions(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 16);
  if (!result)
  {
    WebKit::WebExtensionAPIPermissions::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    char v4 = (WebKit::WebExtensionAPIPermissions *)*((void *)this + 16);
    *((void *)this + 16) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 16);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 16);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 16);
  }
  return result;
}

WebKit::WebExtensionAPIPermissions *WebKit::WebExtensionAPIPermissions::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIPermissions **a2@<X8>)
{
  char v4 = (WebKit::WebExtensionAPIPermissions *)WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::WebExtensionAPIPermissions::WebExtensionAPIPermissions(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199288EF4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::runtime(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 17);
  if (!result)
  {
    char v3 = *((unsigned char *)this + 8);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = WTF::fastMalloc((WTF *)0x70);
    *(unsigned char *)(v5 + 8) = v3;
    *(void *)(v5 + 16) = 0;
    ++*(_DWORD *)(v4 + 16);
    *(void *)(v5 + 24) = v4;
    *(void *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 48) = 1;
    *(unsigned char *)(v5 + 52) = 0;
    *(void *)(v5 + 56) = 0;
    *(void *)uint64_t v5 = &unk_1EE9FC1D8;
    *(void *)(v5 + 40) = &unk_1EE9FC210;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v11 = v12;
    WTF::String::operator=((uint64_t *)(v5 + 32), &v11);
    uint64_t v7 = v11;
    int v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = *((void *)this + 17);
    *((void *)this + 17) = v5;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)(v8 + 40) + 8))(v8 + 40);
        uint64_t v5 = *((void *)this + 17);
      }
      else
      {
        --*(_DWORD *)(v8 + 48);
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebExtensionAPIObject::setPropertyPath((WebKit::WebExtensionAPIObject *)v5, &v12, this);
    uint64_t v10 = v12;
    unsigned int v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    return *((void *)this + 17);
  }
  return result;
}

void sub_1992890D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t covariant return thunk to'WebKit::WebExtensionAPINamespace::runtime(WebKit::WebExtensionAPINamespace *this)
{
  return WebKit::WebExtensionAPINamespace::runtime(this) + 40;
}

uint64_t WebKit::WebExtensionAPINamespace::scripting(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 18);
  if (!result)
  {
    WebKit::WebExtensionAPIScripting::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIScripting *)*((void *)this + 18);
    *((void *)this + 18) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 18);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 18);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 18);
  }
  return result;
}

WebKit::WebExtensionAPIScripting *WebKit::WebExtensionAPIScripting::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIScripting **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPIScripting *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPIScripting::WebExtensionAPIScripting(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289418(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::storage(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 19);
  if (!result)
  {
    WebKit::WebExtensionAPIStorage::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIStorage *)*((void *)this + 19);
    *((void *)this + 19) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 19);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 19);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 19);
  }
  return result;
}

WebKit::WebExtensionAPIStorage *WebKit::WebExtensionAPIStorage::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIStorage **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPIStorage *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIStorage::WebExtensionAPIStorage(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289538(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::tabs(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 20);
  if (!result)
  {
    WebKit::WebExtensionAPITabs::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPITabs *)*((void *)this + 20);
    *((void *)this + 20) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 20);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 20);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 20);
  }
  return result;
}

WebKit::WebExtensionAPITabs *WebKit::WebExtensionAPITabs::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPITabs **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPITabs *)WTF::fastMalloc((WTF *)0x80);
  uint64_t result = WebKit::WebExtensionAPITabs::WebExtensionAPITabs(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289658(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::test(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 21);
  if (!result)
  {
    WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPITest *)*((void *)this + 21);
    *((void *)this + 21) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 21);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 21);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 21);
  }
  return result;
}

WebKit::WebExtensionAPITest *WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPITest **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPITest *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPITest::WebExtensionAPITest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289778(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::windows(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result)
  {
    WebKit::WebExtensionAPIWindows::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIWindows *)*((void *)this + 22);
    *((void *)this + 22) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 22);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 22);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 22);
  }
  return result;
}

WebKit::WebExtensionAPIWindows *WebKit::WebExtensionAPIWindows::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIWindows **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPIWindows *)WTF::fastMalloc((WTF *)0x50);
  uint64_t result = WebKit::WebExtensionAPIWindows::WebExtensionAPIWindows(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289898(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::webNavigation(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 23);
  if (!result)
  {
    WebKit::WebExtensionAPIWebNavigation::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIWebNavigation *)*((void *)this + 23);
    *((void *)this + 23) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 23);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 23);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 23);
  }
  return result;
}

WebKit::WebExtensionAPIWebNavigation *WebKit::WebExtensionAPIWebNavigation::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIWebNavigation **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPIWebNavigation *)WTF::fastMalloc((WTF *)0x60);
  uint64_t result = WebKit::WebExtensionAPIWebNavigation::WebExtensionAPIWebNavigation(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1992899B8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::webRequest(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result = *((void *)this + 24);
  if (!result)
  {
    WebKit::WebExtensionAPIWebRequest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    char v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIWebRequest *)*((void *)this + 24);
    *((void *)this + 24) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        uint64_t v6 = 0;
        if (!v4) {
          return *((void *)this + 24);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 24);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 24);
  }
  return result;
}

WebKit::WebExtensionAPIWebRequest *WebKit::WebExtensionAPIWebRequest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPIWebRequest **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPIWebRequest *)WTF::fastMalloc((WTF *)0x80);
  uint64_t result = WebKit::WebExtensionAPIWebRequest::WebExtensionAPIWebRequest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_199289AD8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(WebKit::WebExtensionAPINamespace *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FBE08;
  *((void *)this + 5) = &unk_1EE9FBE40;
  char v3 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  int v5 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  uint64_t v7 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  uint64_t v8 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v8 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
  }
  unint64_t v9 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v9 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v9 + 48);
    }
  }
  uint64_t v10 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v10 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  int v11 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }
  unsigned int v12 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  unsigned int v13 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  id v16 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v16 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v16 + 48);
    }
  }
  uint64_t v17 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v17 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  id v18 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v18 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v18 + 48);
    }
  }
  uint64_t v19 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v19 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v19 + 48);
    }
  }
  uint64_t v20 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v20 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v20 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void non-virtual thunk to'WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(WebKit::WebExtensionAPINamespace *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace((WebKit::WebExtensionAPINamespace *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIAction *WebKit::WebExtensionAPIAction::WebExtensionAPIAction(WebKit::WebExtensionAPIAction *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FBE68;
  *(void *)(v4 + 40) = &unk_1EE9FBE98;
  *(void *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928A158(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v11 = *((void *)v9 + 7);
  *((void *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::~WebExtensionAPIAction(WebKit::WebExtensionAPIAction *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBE68;
  *((void *)this + 5) = &unk_1EE9FBE98;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FBE68;
  *((void *)this + 5) = &unk_1EE9FBE98;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v4, v5);
}

void non-virtual thunk to'WebKit::WebExtensionAPIAction::~WebExtensionAPIAction(WebKit::WebExtensionAPIAction *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIAction *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBE68;
  *(void *)this = &unk_1EE9FBE98;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIAction *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBE68;
  *(void *)this = &unk_1EE9FBE98;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v5, v6);
}

WebKit::WebExtensionAPIAlarms *WebKit::WebExtensionAPIAlarms::WebExtensionAPIAlarms(WebKit::WebExtensionAPIAlarms *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FBEC0;
  *(void *)(v4 + 40) = &unk_1EE9FBEF0;
  *(void *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928A588(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v11 = *((void *)v9 + 7);
  *((void *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAlarms::~WebExtensionAPIAlarms(WebKit::WebExtensionAPIAlarms *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBEC0;
  *((void *)this + 5) = &unk_1EE9FBEF0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FBEC0;
  *((void *)this + 5) = &unk_1EE9FBEF0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v4, v5);
}

void non-virtual thunk to'WebKit::WebExtensionAPIAlarms::~WebExtensionAPIAlarms(WebKit::WebExtensionAPIAlarms *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIAlarms *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBEC0;
  *(void *)this = &unk_1EE9FBEF0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIAlarms *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBEC0;
  *(void *)this = &unk_1EE9FBEF0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v5, v6);
}

WebKit::WebExtensionAPICommands *WebKit::WebExtensionAPICommands::WebExtensionAPICommands(WebKit::WebExtensionAPICommands *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FBF18;
  *(void *)(v4 + 40) = &unk_1EE9FBF48;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928A9C8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *v10;
  *uint64_t v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICommands::~WebExtensionAPICommands(WebKit::WebExtensionAPICommands *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBF18;
  *((void *)this + 5) = &unk_1EE9FBF48;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FBF18;
  *((void *)this + 5) = &unk_1EE9FBF48;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v5, v6);
}

void non-virtual thunk to'WebKit::WebExtensionAPICommands::~WebExtensionAPICommands(WebKit::WebExtensionAPICommands *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPICommands *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBF18;
  *(void *)this = &unk_1EE9FBF48;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPICommands *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBF18;
  *(void *)this = &unk_1EE9FBF48;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v6, v7);
}

WebKit::WebExtensionAPICookies *WebKit::WebExtensionAPICookies::WebExtensionAPICookies(WebKit::WebExtensionAPICookies *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FBF70;
  *(void *)(v4 + 40) = &unk_1EE9FBFA0;
  *(void *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928AF4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v11 = *((void *)v9 + 7);
  *((void *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::~WebExtensionAPICookies(WebKit::WebExtensionAPICookies *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FBF70;
  *((void *)this + 5) = &unk_1EE9FBFA0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FBF70;
  *((void *)this + 5) = &unk_1EE9FBFA0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v4, v5);
}

void non-virtual thunk to'WebKit::WebExtensionAPICookies::~WebExtensionAPICookies(WebKit::WebExtensionAPICookies *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPICookies *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBF70;
  *(void *)this = &unk_1EE9FBFA0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPICookies *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FBF70;
  *(void *)this = &unk_1EE9FBFA0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v5, v6);
}

WebKit::WebExtensionAPIDeclarativeNetRequest *WebKit::WebExtensionAPIDeclarativeNetRequest::WebExtensionAPIDeclarativeNetRequest(WebKit::WebExtensionAPIDeclarativeNetRequest *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FBFC8;
  *(void *)(v4 + 40) = &unk_1EE9FBFF8;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928B378(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::~WebExtensionAPIDeclarativeNetRequest(WebKit::WebExtensionAPIDeclarativeNetRequest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIDeclarativeNetRequest::~WebExtensionAPIDeclarativeNetRequest(WebKit::WebExtensionAPIDeclarativeNetRequest *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIDeclarativeNetRequest *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIExtension *WebKit::WebExtensionAPIExtension::WebExtensionAPIExtension(WebKit::WebExtensionAPIExtension *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC020;
  *(void *)(v4 + 40) = &unk_1EE9FC050;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928B4E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIExtension::~WebExtensionAPIExtension(WebKit::WebExtensionAPIExtension *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIExtension::~WebExtensionAPIExtension(WebKit::WebExtensionAPIExtension *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIExtension *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPILocalization *WebKit::WebExtensionAPILocalization::WebExtensionAPILocalization(WebKit::WebExtensionAPILocalization *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC078;
  *(void *)(v4 + 40) = &unk_1EE9FC0A8;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928B658(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPILocalization::~WebExtensionAPILocalization(WebKit::WebExtensionAPILocalization *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPILocalization::~WebExtensionAPILocalization(WebKit::WebExtensionAPILocalization *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPILocalization *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIMenus *WebKit::WebExtensionAPIMenus::WebExtensionAPIMenus(WebKit::WebExtensionAPIMenus *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC0D0;
  *(void *)(v4 + 40) = &unk_1EE9FC100;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928B7D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl **)*((void *)v9 + 9);
  if (v11) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, a2);
  }
  uint64_t v12 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIMenus::~WebExtensionAPIMenus(WebKit::WebExtensionAPIMenus *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FC0D0;
  *((void *)this + 5) = &unk_1EE9FC100;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 9);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC0D0;
  *((void *)this + 5) = &unk_1EE9FC100;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 9);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v5, v6);
}

void non-virtual thunk to'WebKit::WebExtensionAPIMenus::~WebExtensionAPIMenus(WebKit::WebExtensionAPIMenus *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIMenus *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC0D0;
  *(void *)this = &unk_1EE9FC100;
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIMenus *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC0D0;
  *(void *)this = &unk_1EE9FC100;
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v6, v7);
}

WebKit::WebExtensionAPINotifications *WebKit::WebExtensionAPINotifications::WebExtensionAPINotifications(WebKit::WebExtensionAPINotifications *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC128;
  *(void *)(v4 + 40) = &unk_1EE9FC158;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928BC4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *v10;
  *uint64_t v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPINotifications::~WebExtensionAPINotifications(WebKit::WebExtensionAPINotifications *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FC128;
  *((void *)this + 5) = &unk_1EE9FC158;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC128;
  *((void *)this + 5) = &unk_1EE9FC158;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v5, v6);
}

void non-virtual thunk to'WebKit::WebExtensionAPINotifications::~WebExtensionAPINotifications(WebKit::WebExtensionAPINotifications *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPINotifications *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC128;
  *(void *)this = &unk_1EE9FC158;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPINotifications *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC128;
  *(void *)this = &unk_1EE9FC158;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v6, v7);
}

WebKit::WebExtensionAPIPermissions *WebKit::WebExtensionAPIPermissions::WebExtensionAPIPermissions(WebKit::WebExtensionAPIPermissions *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC180;
  *(void *)(v4 + 40) = &unk_1EE9FC1B0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928C1E0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *v10;
  *uint64_t v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIPermissions::~WebExtensionAPIPermissions(WebKit::WebExtensionAPIPermissions *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FC180;
  *((void *)this + 5) = &unk_1EE9FC1B0;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC180;
  *((void *)this + 5) = &unk_1EE9FC1B0;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v5, v6);
}

void non-virtual thunk to'WebKit::WebExtensionAPIPermissions::~WebExtensionAPIPermissions(WebKit::WebExtensionAPIPermissions *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIPermissions *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC180;
  *(void *)this = &unk_1EE9FC1B0;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIPermissions *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC180;
  *(void *)this = &unk_1EE9FC1B0;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v6, v7);
}

void WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(WebKit::WebExtensionAPIRuntime *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC1D8;
  *((void *)this + 5) = &unk_1EE9FC210;
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v8 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
  }
  *((void *)this + 5) = &unk_1EE9FC238;
  unint64_t v9 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v9) {
    CFRelease(v9);
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

uint64_t covariant return thunk to'WebKit::WebExtensionAPIRuntime::runtime(WebKit::WebExtensionAPIRuntime *this)
{
  return (uint64_t)this + 40;
}

void non-virtual thunk to'WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(WebKit::WebExtensionAPIRuntime *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime((WebKit::WebExtensionAPIRuntime *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIScripting *WebKit::WebExtensionAPIScripting::WebExtensionAPIScripting(WebKit::WebExtensionAPIScripting *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC260;
  *(void *)(v4 + 40) = &unk_1EE9FC290;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928CA10(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::~WebExtensionAPIScripting(WebKit::WebExtensionAPIScripting *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIScripting::~WebExtensionAPIScripting(WebKit::WebExtensionAPIScripting *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIScripting *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIStorage *WebKit::WebExtensionAPIStorage::WebExtensionAPIStorage(WebKit::WebExtensionAPIStorage *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC2B8;
  *(void *)(v4 + 40) = &unk_1EE9FC2E8;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928CB98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *v10;
  *uint64_t v10 = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage(WebKit::WebExtensionAPIStorage *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC2B8;
  *((void *)this + 5) = &unk_1EE9FC2E8;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void non-virtual thunk to'WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage(WebKit::WebExtensionAPIStorage *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage((WebKit::WebExtensionAPIStorage *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPITabs *WebKit::WebExtensionAPITabs::WebExtensionAPITabs(WebKit::WebExtensionAPITabs *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC310;
  *(void *)(v4 + 40) = &unk_1EE9FC340;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(void *)(v4 + 120) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928CFBC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 15);
  *((void *)v9 + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 14);
  *((void *)v9 + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)v9 + 13);
  *((void *)v9 + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *((void *)v9 + 12);
  *((void *)v9 + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  uint64_t v16 = *((void *)v9 + 11);
  *((void *)v9 + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v16 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v16 + 48);
    }
  }
  uint64_t v17 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v17 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  uint64_t v18 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v18 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v18 + 48);
    }
  }
  uint64_t v19 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v19 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v19 + 48);
    }
  }
  uint64_t v20 = *v10;
  *uint64_t v10 = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v20 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v20 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(WebKit::WebExtensionAPITabs *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC310;
  *((void *)this + 5) = &unk_1EE9FC340;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v8 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
  }
  unint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v9 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v9 + 48);
    }
  }
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v10 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void non-virtual thunk to'WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(WebKit::WebExtensionAPITabs *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPITabs::~WebExtensionAPITabs((WebKit::WebExtensionAPITabs *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPITest *WebKit::WebExtensionAPITest::WebExtensionAPITest(WebKit::WebExtensionAPITest *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC368;
  *(void *)(v4 + 40) = &unk_1EE9FC398;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928D664(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::~WebExtensionAPITest(WebKit::WebExtensionAPITest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPITest::~WebExtensionAPITest(WebKit::WebExtensionAPITest *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPITest *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIWindows *WebKit::WebExtensionAPIWindows::WebExtensionAPIWindows(WebKit::WebExtensionAPIWindows *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC3C0;
  *(void *)(v4 + 40) = &unk_1EE9FC3F0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928D7E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *v10;
  *uint64_t v10 = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::~WebExtensionAPIWindows(WebKit::WebExtensionAPIWindows *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FC3C0;
  *((void *)this + 5) = &unk_1EE9FC3F0;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC3C0;
  *((void *)this + 5) = &unk_1EE9FC3F0;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v6, v7);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWindows::~WebExtensionAPIWindows(WebKit::WebExtensionAPIWindows *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIWindows *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC3C0;
  *(void *)this = &unk_1EE9FC3F0;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIWindows *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FC3C0;
  *(void *)this = &unk_1EE9FC3F0;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v7, v8);
}

WebKit::WebExtensionAPIWebNavigation *WebKit::WebExtensionAPIWebNavigation::WebExtensionAPIWebNavigation(WebKit::WebExtensionAPIWebNavigation *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC418;
  *(void *)(v4 + 40) = &unk_1EE9FC448;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(void *)(v4 + 88) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928DED8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 11);
  *((void *)v9 + 11) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  uint64_t v16 = *v10;
  *uint64_t v10 = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v16 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v16 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(WebKit::WebExtensionAPIWebNavigation *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC418;
  *((void *)this + 5) = &unk_1EE9FC448;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(WebKit::WebExtensionAPIWebNavigation *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation((WebKit::WebExtensionAPIWebNavigation *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

WebKit::WebExtensionAPIWebRequest *WebKit::WebExtensionAPIWebRequest::WebExtensionAPIWebRequest(WebKit::WebExtensionAPIWebRequest *this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(void *)uint64_t v4 = &unk_1EE9FC470;
  *(void *)(v4 + 40) = &unk_1EE9FC4A0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(void *)(v4 + 120) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, v8, a2);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_19928E384(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v12 = *((void *)v9 + 15);
  *((void *)v9 + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v12 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
  }
  uint64_t v13 = *((void *)v9 + 14);
  *((void *)v9 + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v13 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v13 + 48);
    }
  }
  uint64_t v14 = *((void *)v9 + 13);
  *((void *)v9 + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v14 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v14 + 48);
    }
  }
  uint64_t v15 = *((void *)v9 + 12);
  *((void *)v9 + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v15 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  uint64_t v16 = *((void *)v9 + 11);
  *((void *)v9 + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v16 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v16 + 48);
    }
  }
  uint64_t v17 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v17 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  uint64_t v18 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v18 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v18 + 48);
    }
  }
  uint64_t v19 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v19 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v19 + 48);
    }
  }
  uint64_t v20 = *v10;
  *uint64_t v10 = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v20 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v20 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(WebKit::WebExtensionAPIWebRequest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC470;
  *((void *)this + 5) = &unk_1EE9FC4A0;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v6 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v6 + 48);
    }
  }
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v8 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
  }
  unint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v9 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v9 + 48);
    }
  }
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v10 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(WebKit::WebExtensionAPIWebRequest *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest((WebKit::WebExtensionAPIWebRequest *)((char *)this - 40), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebExtensionAPINotifications::onClicked(WebKit::WebExtensionAPINotifications *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 20;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_19928EA84(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINotifications::onButtonClicked(WebKit::WebExtensionAPINotifications *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 19;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

IPC::Encoder *WebKit::WebExtensionAPIPermissions::getAll(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  unsigned __int8 v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v6 = 1669;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FC4C8;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_19928ECF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19928EDC0()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x19928EDACLL);
}

void WebKit::WebExtensionAPIPermissions::contains(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  char v21 = 0;
  char v22 = 0;
  uint64_t v20 = 0;
  if (WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(v7, (uint64_t *)&v22, (uint64_t *)&v21, @"permissions.contains()", a4)&& WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v22, &v21, (uint64_t *)&v20, @"permissions.contains()", a4))
  {
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1668;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    int v24 = v12;
    IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v12, &v22);
    IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v12, &v21);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9FC4F0;
    v13[1] = a1;
    v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v23[0] = v13;
    v23[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v9 + 24) + 40))(v9 + 24, &v24, v23, 0);
    uint64_t v15 = v23[0];
    v23[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v24;
    int v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v8);
      WTF::fastFree(v17, v18);
    }
  }
  if (v20) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v20, v8);
  }
  if (v21) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, (WTF::StringImpl *)v8);
  }
  if (v22) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v22, (WTF::StringImpl *)v8);
  }
}

void sub_19928F030(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::StringImpl **a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  if (a9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a9, a2);
  }
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, (WTF::StringImpl *)a2);
  }
  if (a11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, (WTF::StringImpl *)a2);
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(void *a1, uint64_t *a2, uint64_t *a3, void *a4, void *a5)
{
  void v47[2] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a4;
  uint64_t v11 = &qword_1EB35A000;
  if ((_MergedGlobals_119 & 1) == 0)
  {
    v46[0] = @"permissions";
    uint64_t v45 = objc_opt_class();
    uint64_t v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v45 count:1];
    v46[1] = @"origins";
    v47[0] = v30;
    uint64_t v44 = objc_opt_class();
    id v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v44 count:1];
    v47[1] = v31;
    qword_1EB35A048 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v47 forKeys:v46 count:2];

    _MergedGlobals_119 = 1;
    uint64_t v11 = &qword_1EB35A000;
  }
  BOOL v12 = WebKit::validateDictionary(v9, @"permissions", 0, (void *)v11[9], a5);
  if (v12)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v13 = objc_opt_class();
    uint64_t v14 = WebKit::objectForKey<NSArray>(v9, @"permissions", 1, v13);
    uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v39 != v16) {
            objc_enumerationMutation(v14);
          }
          MEMORY[0x19972EAD0](&v37, *(void *)(*((void *)&v38 + 1) + 8 * i));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v37, v18, (uint64_t)v36);
          uint64_t v20 = v37;
          uint64_t v37 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v19);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v15);
    }

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v21 = objc_opt_class();
    char v22 = WebKit::objectForKey<NSArray>(v9, @"origins", 1, v21);
    uint64_t v23 = [v22 countByEnumeratingWithState:&v32 objects:v42 count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v23; ++j)
        {
          if (*(void *)v33 != v24) {
            objc_enumerationMutation(v22);
          }
          MEMORY[0x19972EAD0](&v37, *(void *)(*((void *)&v32 + 1) + 8 * j));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v37, v26, (uint64_t)v36);
          uint64_t v28 = v37;
          uint64_t v37 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v27);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
        }
        uint64_t v23 = [v22 countByEnumeratingWithState:&v32 objects:v42 count:16];
      }
      while (v23);
    }
  }
  return v12;
}

void sub_19928F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(void **a1, void **a2, uint64_t *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  if (*a1) {
    uint64_t v14 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v14 = 0;
  }
  if ((WTF::StringImpl **)v14 != v10)
  {
    while (1)
    {
      uint64_t v17 = *WebKit::WebExtension::supportedPermissions((WebKit::WebExtension *)v10);
      if (!v17) {
        break;
      }
      int v38 = *(_DWORD *)(v17 - 8);
      unsigned int v18 = *((_DWORD *)*v11 + 4);
      if (v18 >= 0x100) {
        unsigned int v19 = v18 >> 8;
      }
      else {
        unsigned int v19 = WTF::StringImpl::hashSlowCase(*v11);
      }
      for (i = 0; ; unsigned int v19 = i + v21)
      {
        int v21 = v19 & v38;
        char v22 = *(WTF **)(v17 + 8 * (v19 & v38));
        if (v22 != (WTF *)-1)
        {
          if (!v22) {
            goto LABEL_33;
          }
          id v10 = (WTF::StringImpl **)WTF::equal(v22, *v11, v15);
          if (v10) {
            break;
          }
        }
        ++i;
      }
      while (++v11 != v13)
      {
        if ((unint64_t)*v11 + 1 > 1) {
          goto LABEL_17;
        }
      }
      uint64_t v11 = v13;
LABEL_17:
      if (v11 == (WTF::StringImpl **)v14) {
        goto LABEL_18;
      }
    }
LABEL_33:
    if (*v11) {
      long long v34 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v34 = &stru_1EEA10550;
    }
    WebKit::toErrorString(0, &cfstr_Permissions.isa, &cfstr_IsNotAValidPer.isa, v16, v34);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_40;
  }
LABEL_18:
  uint64_t v23 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v25 = v23;
  id v27 = v26;
  if (*a2) {
    uint64_t v28 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v28 = 0;
  }
  if ((WTF::StringImpl **)v28 != v23)
  {
    while (1)
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v25, v24, (uint64_t *)&v41);
      if (!v41 || (WebKit::WebExtensionMatchPattern::isSupported(v41) & 1) == 0) {
        break;
      }
      uint64_t v30 = v41;
      CFRetain(*((CFTypeRef *)v41 + 1));
      long long v40 = v30;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a3, (uint64_t *)&v40, (uint64_t)v39);
      uint64_t v31 = (uint64_t)v40;
      long long v40 = 0;
      if (v31) {
        CFRelease(*(CFTypeRef *)(v31 + 8));
      }
      long long v32 = v41;
      long long v41 = 0;
      if (v32) {
        CFRelease(*((CFTypeRef *)v32 + 1));
      }
      while (++v25 != v27)
      {
        if ((unint64_t)*v25 + 1 > 1) {
          goto LABEL_31;
        }
      }
      uint64_t v25 = v27;
LABEL_31:
      if (v25 == (WTF::StringImpl **)v28) {
        goto LABEL_32;
      }
    }
    if (*v25) {
      long long v35 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v35 = &stru_1EEA10550;
    }
    WebKit::toErrorString(0, &cfstr_Origins_1.isa, &cfstr_IsNotAValidPat.isa, v29, v35);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v36 = v41;
    long long v41 = 0;
    if (v36) {
      CFRelease(*((CFTypeRef *)v36 + 1));
    }
LABEL_40:
    uint64_t v33 = 0;
    goto LABEL_41;
  }
LABEL_32:
  uint64_t v33 = 1;
LABEL_41:

  return v33;
}

void sub_19928F844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIPermissions::request(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, void *a4)
{
  id v7 = a2;
  uint64_t v37 = 0;
  int v38 = 0;
  if (!WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(v7, (uint64_t *)&v38, (uint64_t *)&v37, @"permissions.request()", a4))goto LABEL_16; {
  id v35 = 0;
  }
  uint64_t v36 = 0;
  char v9 = WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v38, &v37, (uint64_t *)&v36, @"permissions.request()", &v35);
  id v12 = v35;
  if (v9)
  {
    if (WebCore::UserGestureIndicator::processingUserGesture(0, v10))
    {
      id v34 = v12;
      char v14 = WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(a1, &v38, &v36, @"permissions.request()", &v34);
      uint64_t v15 = (NSString *)v34;

      if (v14)
      {
        {
          uint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v33);
        }
        uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
        ++*(_DWORD *)(a1 + 48);
        unsigned int v18 = *a3;
        *a3 = 0;
        uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 24);
        uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v20 = 1671;
        *((void *)v20 + 1) = v19;
        *((void *)v20 + 66) = (char *)v20 + 16;
        *((void *)v20 + 67) = 512;
        *((void *)v20 + 68) = 0;
        *((void *)v20 + 70) = 0;
        *((void *)v20 + 69) = 0;
        IPC::Encoder::encodeHeader(v20);
        long long v40 = v20;
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v20, &v38);
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v20, &v37);
        int v21 = (void *)WTF::fastMalloc((WTF *)0x18);
        *int v21 = &unk_1EE9FC518;
        v21[1] = a1;
        void v21[2] = v18;
        uint64_t v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v39[0] = v21;
        v39[1] = v22;
        (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v17 + 24) + 40))(v17 + 24, &v40, v39, 0);
        uint64_t v24 = v39[0];
        v39[0] = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        uint64_t v25 = v40;
        long long v40 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v23);
          WTF::fastFree(v26, v27);
        }
      }
      else
      {
        uint64_t v31 = *a3;
        WebKit::toErrorString((WebKit *)@"permissions.request()", 0, v15, v16);
        long long v32 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtensionCallbackHandler::reportError(v31, v32);
      }
      goto LABEL_13;
    }
    uint64_t v30 = *a3;
    WebKit::toErrorString((WebKit *)@"permissions.request()", 0, &cfstr_MustBeCalledDu.isa, v13);
    uint64_t v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::reportError(v30, v29);
  }
  else
  {
    uint64_t v28 = *a3;
    WebKit::toErrorString((WebKit *)@"permissions.request()", 0, (NSString *)v12, v11);
    uint64_t v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::reportError(v28, v29);
  }

  uint64_t v15 = (NSString *)v12;
LABEL_13:
  if (v36) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v36, v23);
  }

LABEL_16:
  if (v37) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v37, v8);
  }
  if (v38) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, v8);
  }
}

void sub_19928FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, WTF::StringImpl **a12, WTF::StringImpl **a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a11) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a11, v20);
  }

  if (a12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, v21);
  }
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, v21);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(uint64_t a1, void **a2, void **a3, void *a4, void *a5)
{
  uint64_t v58 = a5;
  id v8 = a4;
  WTF::RetainPtr<NSSet>::get((id *)(*(void *)(a1 + 24) + 104));
  char v9 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = API::Object::newObject(0x168uLL, 110);
  WebKit::WebExtension::WebExtension((WebKit::WebExtension *)v10, v9, MEMORY[0x1E4F1CC08]);

  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)v10);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v60, (void **)(v10 + 104));
  WebKit::WebExtension::allRequestedMatchPatterns((WebKit::WebExtension *)v10, (uint64_t *)&v59);
  if ([v8 isEqualToString:@"permissions.remove()"])
  {
    if (*a2)
    {
      if (*((_DWORD *)*a2 - 3))
      {
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)v61, a2, (uint64_t *)&v60);
        if (v61[0])
        {
          int v12 = *((_DWORD *)v61[0] - 3);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61[0], v11);
          if (v12)
          {
            char v14 = WebKit::toErrorString(0, &cfstr_Permissions.isa, &cfstr_RequiredPermis.isa, v13);
            goto LABEL_88;
          }
        }
      }
    }
    uint64_t v15 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a3);
    uint64_t v16 = v15;
    unsigned int v18 = v17;
    if (*a3) {
      uint64_t v19 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    }
    else {
      uint64_t v19 = 0;
    }
    if ((unsigned __int8 **)v19 != v15)
    {
      while (1)
      {
        uint64_t v20 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v59);
        int v21 = v20;
        uint64_t v23 = v22;
        uint64_t v24 = v59 ? (unsigned __int8 **)&v59[*((unsigned int *)v59 - 1)] : 0;
        if (v24 != v20) {
          break;
        }
LABEL_21:
        while (++v16 != v18)
        {
          if ((unint64_t)(*v16 + 1) > 1) {
            goto LABEL_25;
          }
        }
        uint64_t v16 = v18;
LABEL_25:
        if (v16 == (unsigned __int8 **)v19) {
          goto LABEL_26;
        }
      }
      while (!WebKit::WebExtensionMatchPattern::matchesPattern(*v21, *v16, 2))
      {
        while (++v21 != v23)
        {
          if ((unint64_t)(*v21 + 1) > 1) {
            goto LABEL_20;
          }
        }
        int v21 = v23;
LABEL_20:
        if (v21 == v24) {
          goto LABEL_21;
        }
      }
      char v14 = WebKit::toErrorString(0, &cfstr_Origins_1.isa, &cfstr_RequiredPermis.isa, v25);
      goto LABEL_88;
    }
  }
LABEL_26:
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)v10);
  unint64_t v26 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v10 + 112));
  uint64_t v28 = v27;
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)v10);
  uint64_t v30 = *(void *)(v10 + 112);
  if (v30) {
    uint64_t v31 = (WTF::StringImpl **)(v30 + 8 * *(unsigned int *)(v30 - 4));
  }
  else {
    uint64_t v31 = 0;
  }
  while (v26 != v31)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v60, v26, v29, (uint64_t)v61);
    while (++v26 != v28)
    {
      if ((unint64_t)*v26 + 1 > 1) {
        goto LABEL_34;
      }
    }
    unint64_t v26 = v28;
LABEL_34:
    ;
  }
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)v10);
  long long v32 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(v10 + 96));
  id v34 = v33;
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)v10);
  uint64_t v35 = *(void *)(v10 + 96);
  if (v35) {
    uint64_t v36 = (uint64_t *)(v35 + 8 * *(unsigned int *)(v35 - 4));
  }
  else {
    uint64_t v36 = 0;
  }
  while (v32 != v36)
  {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v59, v32, (uint64_t)v61);
    while (++v32 != v34)
    {
      if ((unint64_t)(*v32 + 1) > 1) {
        goto LABEL_44;
      }
    }
    long long v32 = v34;
LABEL_44:
    ;
  }
  if (!*a2 || !*((_DWORD *)*a2 - 3)) {
    goto LABEL_54;
  }
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)v61, a2, (uint64_t *)&v60);
  if (v61[0]) {
    int v38 = *((_DWORD *)v61[0] - 3);
  }
  else {
    int v38 = 0;
  }
  if (*a2)
  {
    int v39 = *((_DWORD *)*a2 - 3);
    if (!v61[0]) {
      goto LABEL_53;
    }
  }
  else
  {
    int v39 = 0;
    if (!v61[0]) {
      goto LABEL_53;
    }
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61[0], v37);
LABEL_53:
  if (v38 != v39) {
    goto LABEL_60;
  }
LABEL_54:
  if (*a3 && *((_DWORD *)*a3 - 3) && (!v59 || !*((_DWORD *)v59 - 3)))
  {
LABEL_60:
    if (objc_msgSend(v8, "isEqualToString:", @"permissions.remove()", v58)) {
      id v46 = @"only permissions specified in the manifest may be removed";
    }
    else {
      id v46 = @"only permissions specified in the manifest may be requested";
    }
    char v14 = WebKit::toErrorString(0, &cfstr_Permissions.isa, &v46->isa, v45);
    goto LABEL_88;
  }
  long long v40 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a3);
  __int16 v42 = v40;
  uint64_t v43 = v41;
  if (*a3) {
    uint64_t v44 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
  }
  else {
    uint64_t v44 = 0;
  }
  if ((unsigned __int8 **)v44 == v40)
  {
LABEL_83:
    uint64_t v54 = 1;
    goto LABEL_89;
  }
  while (1)
  {
    uint64_t v47 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v59);
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    int v51 = v59 ? (unsigned __int8 **)&v59[*((unsigned int *)v59 - 1)] : 0;
    if (v51 == v47) {
      break;
    }
    char v52 = 0;
    do
    {
      char v53 = WebKit::WebExtensionMatchPattern::matchesPattern(*v48, *v42, 2);
      if (v53) {
        goto LABEL_78;
      }
      while (++v48 != v50)
      {
        if ((unint64_t)(*v48 + 1) > 1) {
          goto LABEL_76;
        }
      }
      uint64_t v48 = v50;
LABEL_76:
      v52 |= v53;
    }
    while (v48 != v51);
    if ((v52 & 1) == 0) {
      break;
    }
LABEL_78:
    while (++v42 != v43)
    {
      if ((unint64_t)(*v42 + 1) > 1) {
        goto LABEL_82;
      }
    }
    __int16 v42 = v43;
LABEL_82:
    if (v42 == (unsigned __int8 **)v44) {
      goto LABEL_83;
    }
  }
  if (objc_msgSend(v8, "isEqualToString:", @"permissions.remove()", v58)) {
    unint64_t v56 = @"only permissions specified in the manifest may be removed";
  }
  else {
    unint64_t v56 = @"only permissions specified in the manifest may be requested";
  }
  char v14 = WebKit::toErrorString(0, &cfstr_Origins_1.isa, &v56->isa, v55);
LABEL_88:
  uint64_t v54 = 0;
  *uint64_t v58 = v14;
LABEL_89:
  if (v59) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v59, v41);
  }
  if (v60)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v60, (WTF::StringImpl *)v41);
    if (!v10) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v10) {
LABEL_93:
  }
    CFRelease(*(CFTypeRef *)(v10 + 8));
LABEL_94:

  return v54;
}

void sub_1992902C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, WTF::StringImpl **a11)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  if (a11)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, (WTF::StringImpl *)a2);
    if (!v12)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_6;
  }
  CFRelease(*(CFTypeRef *)(v12 + 8));
  goto LABEL_6;
}

void WebKit::WebExtensionAPIPermissions::remove(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, void *a4)
{
  id v7 = a2;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(v7, (uint64_t *)&v36, (uint64_t *)&v35, @"permissions.remove()", a4))
  {
    id v33 = 0;
    id v34 = 0;
    char v9 = WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v36, &v35, (uint64_t *)&v34, @"permissions.remove()", &v33);
    id v10 = v33;
    uint64_t v12 = v10;
    if (v9)
    {
      id v32 = v10;
      char v13 = WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(a1, &v36, &v34, @"permissions.remove()", &v32);
      char v14 = (NSString *)v32;

      if (v13)
      {
        {
          uint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v31);
        }
        uint64_t v16 = WebKit::WebProcess::singleton(void)::process;
        ++*(_DWORD *)(a1 + 48);
        uint64_t v17 = *a3;
        *a3 = 0;
        uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
        uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v19 = 1670;
        *((void *)v19 + 1) = v18;
        *((void *)v19 + 66) = (char *)v19 + 16;
        *((void *)v19 + 67) = 512;
        *((void *)v19 + 68) = 0;
        *((void *)v19 + 70) = 0;
        *((void *)v19 + 69) = 0;
        IPC::Encoder::encodeHeader(v19);
        int v38 = v19;
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v19, &v36);
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v19, &v35);
        uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v20 = &unk_1EE9FC540;
        v20[1] = a1;
        v20[2] = v17;
        uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v37[0] = v20;
        v37[1] = v21;
        (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v16 + 24) + 40))(v16 + 24, &v38, v37, 0);
        uint64_t v23 = v37[0];
        v37[0] = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
        uint64_t v24 = v38;
        int v38 = 0;
        if (v24)
        {
          IPC::Encoder::~Encoder(v24, v22);
          WTF::fastFree(v25, v26);
        }
      }
      else
      {
        uint64_t v29 = *a3;
        WebKit::toErrorString((WebKit *)@"permissions.remove()", 0, v14, v15);
        uint64_t v30 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtensionCallbackHandler::reportError(v29, v30);
      }
    }
    else
    {
      id v27 = *a3;
      WebKit::toErrorString((WebKit *)@"permissions.remove()", 0, (NSString *)v10, v11);
      uint64_t v28 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::reportError(v27, v28);

      char v14 = (NSString *)v12;
    }
    if (v34) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v34, v22);
    }
  }
  if (v35) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v8);
  }
  if (v36) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v8);
  }
}

void sub_19929065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, WTF::StringImpl **a12, WTF::StringImpl **a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a11) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a11, v20);
  }

  if (a12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, v21);
  }
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, v21);
  }

  _Unwind_Resume(a1);
}

WTF *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t *a1, void **a2, uint64_t *a3)
{
  *a1 = 0;
  uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  id v8 = (WTF::StringImpl **)result;
  id v10 = v9;
  if (*a2) {
    uint64_t v11 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v11 = 0;
  }
  if ((WTF *)v11 != result)
  {
    do
    {
      uint64_t v12 = *a3;
      if (!*a3) {
        goto LABEL_5;
      }
      int v13 = *(_DWORD *)(v12 - 8);
      unsigned int v14 = *((_DWORD *)*v8 + 4);
      if (v14 >= 0x100) {
        unsigned int v15 = v14 >> 8;
      }
      else {
        unsigned int v15 = WTF::StringImpl::hashSlowCase(*v8);
      }
      for (i = 0; ; unsigned int v15 = i + v17)
      {
        int v17 = v15 & v13;
        uint64_t result = *(WTF **)(v12 + 8 * (v15 & v13));
        if (result != (WTF *)-1)
        {
          if (!result) {
            goto LABEL_5;
          }
          if (WTF::equal(result, *v8, v7)) {
            break;
          }
        }
        ++i;
      }
      uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1, v8, v7, (uint64_t)v18);
LABEL_5:
      while (++v8 != v10)
      {
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_9;
        }
      }
      id v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != (WTF::StringImpl **)v11);
  }
  return result;
}

void sub_199290928(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIPermissions::onAdded(WebKit::WebExtensionAPIPermissions *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 21;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_199290A6C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::onRemoved(WebKit::WebExtensionAPIPermissions *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 22;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchPermissionsEvent(uint64_t a1, char a2, void **a3, void **a4)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  char v12 = a2;
  unsigned __int8 v6 = WebKit::toAPIArray(a3);
  id v7 = WebKit::toAPIArray(a4);
  v13[0] = @"permissions";
  v13[1] = @"origins";
  v14[0] = v6;
  v14[1] = v7;
  id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];
  id v8 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)id v8 = &unk_1EE9FC568;
  *((void *)v8 + 1) = &v12;
  *((void *)v8 + 2) = &v11;
  id v10 = v8;
  WebCore::mainThreadNormalWorld(v8);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v10);
  char v9 = v10;
  id v10 = 0;
  if (v9) {
    (*(void (**)(WebCore *))(*(void *)v9 + 8))(v9);
  }
}

void sub_199290C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC4C8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC4C8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, &v13);
    if (v17)
    {
      uint64_t v4 = v13;
      uint64_t v13 = 0;
      v19[0] = v4;
      uint64_t v5 = v14;
      uint64_t v14 = 0;
      v19[1] = v5;
      uint64_t v6 = v15;
      uint64_t v15 = 0;
      v18[0] = v6;
      uint64_t v7 = v16;
      uint64_t v16 = 0;
      v18[1] = v7;
      WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v19, (uint64_t)v18);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v8);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v9);
      return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v10);
    }
    else
    {
      std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v3);
      return IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    char v12 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v12);
  }
}

void sub_199290F18(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 32, v5);
  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v5, (uint64_t)v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
}

void sub_199290F84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a3[32])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_199291010(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, a3);
    if (v7) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void sub_19929108C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Decoder *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, v6, (uint64_t)a3);
    if (v7) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void sub_199291120(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a1 + 16) && *((unsigned char *)a2 + 16))
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    *(void *)a3 = v3;
    uint64_t v4 = a1[1];
    a1[1] = 0;
    *(void *)(a3 + 8) = v4;
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)(a3 + 16) = v5;
    uint64_t v6 = a2[1];
    a2[1] = 0;
    *(void *)(a3 + 24) = v6;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
}

void WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, uint64_t a3)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  v13[0] = @"permissions";
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a2, (uint64_t *)&v12);
  uint64_t v5 = WTF::RetainPtr<NSSet>::get((id *)&v12);
  v13[1] = @"origins";
  v14[0] = v5;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a3, (uint64_t *)&cf);
  uint64_t v6 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  v14[1] = v6;
  char v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];
  id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }

  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
}

void sub_1992912A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  if (cf) {
    CFRelease(cf);
  }

  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC4F0;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC4F0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2 || !*a2)
  {
LABEL_9:
    uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
    return WebKit::WebExtensionCallbackHandler::call(v6, v5);
  }
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
  if (v4 <= 0xFFu)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
    goto LABEL_9;
  }
  if ((_BYTE)v4) {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
  }
  uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  return WebKit::WebExtensionCallbackHandler::call(v6, v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC518;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC518;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2 || !*a2)
  {
LABEL_9:
    uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
    return WebKit::WebExtensionCallbackHandler::call(v6, v5);
  }
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
  if (v4 <= 0xFFu)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
    goto LABEL_9;
  }
  if ((_BYTE)v4) {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
  }
  uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  return WebKit::WebExtensionCallbackHandler::call(v6, v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC540;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC540;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2 || !*a2)
  {
LABEL_9:
    uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
    return WebKit::WebExtensionCallbackHandler::call(v6, v5);
  }
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
  if (v4 <= 0xFFu)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
    goto LABEL_9;
  }
  if ((_BYTE)v4) {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v5 = (objc_object *)MEMORY[0x1E4F1CC28];
  }
  uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  return WebKit::WebExtensionCallbackHandler::call(v6, v5);
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  id v27 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = (v12 >> 31) ^ v12;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v13 & v8;
    uint64_t v16 = (uint64_t *)(v6 + 8 * v15);
    uint64_t v17 = *v16;
    if (*v16 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v15);
LABEL_10:
    unsigned int v13 = i + v15;
  }
  if (!v17)
  {
    if (v9)
    {
      uint64_t *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v16 = v9;
    }
    WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::translate<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&)::{lambda(void)#1}>(v16, (uint64_t)a2, &v27);
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_25:
        uint64_t v16 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v16);
        uint64_t v23 = *a1;
        if (*a1) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_25;
    }
    uint64_t v22 = v23 + 8 * v26;
    char v21 = 1;
    goto LABEL_30;
  }
  if (v17 != *a2) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(unsigned int *)(v6 - 4);
  }
  char v21 = 0;
  uint64_t v22 = v6 + 8 * v20;
LABEL_30:
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v22;
  *(unsigned char *)(a3 + 16) = v21;
}

{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  unint64_t v10 = *a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unsigned int v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  uint64_t v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    uint64_t v16 = v14 & v8;
    uint64_t v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    uint64_t v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      uint64_t *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      unint64_t v10 = *a2;
      uint64_t v17 = v9;
    }
    *a2 = 0;
    int v19 = *v17;
    void *v17 = v10;
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v20 = *a1;
    if (*a1) {
      char v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      char v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v25 = *a1;
    if (*a1) {
      unint64_t v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      unint64_t v26 = 0;
    }
    id v27 = (*(_DWORD *)(v25 - 16) + v26);
    uint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        uint64_t v17 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v17);
        uint64_t v25 = *a1;
        if (*a1) {
          uint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    int v24 = v25 + 8 * v28;
    uint64_t v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  uint64_t v23 = 0;
  int v24 = v6 + 8 * v22;
LABEL_32:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v23;
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

void WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::translate<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4 = **a3;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unsigned int v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v14 = (void *)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          void *v14 = 0;
          if (v15) {
            CFRelease(*(CFTypeRef *)(v15 + 8));
          }
          uint64_t v16 = *v13;
          uint64_t *v13 = 0;
          void *v14 = v16;
          uint64_t v17 = *v13;
          uint64_t *v13 = 0;
          if (v17) {
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
          if (v13 == a3) {
            unint64_t v11 = v14;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchPermissionsEvent(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPIPermissions *)WebKit::WebExtensionAPINamespace::permissions(this);
  int v4 = **(unsigned __int8 **)(a1 + 8);
  if (v4 == 22)
  {
    uint64_t v5 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIPermissions::onRemoved(v3);
  }
  else
  {
    if (v4 != 21) {
      return;
    }
    uint64_t v5 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIPermissions::onAdded(v3);
  }
  uint64_t v6 = **(objc_object ***)(a1 + 16);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v5, v6);
}

uint64_t WebKit::WebExtensionAPIPort::get(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (_MergedGlobals_120)
  {
    uint64_t v3 = qword_1EB35A058;
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v3)
    {
      uint64_t v5 = v3 + 16 * *(unsigned int *)(v3 - 4);
      goto LABEL_6;
    }
  }
  else
  {
    qword_1EB35A058 = 0;
    _MergedGlobals_120 = 1;
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  }
  uint64_t v5 = 0;
LABEL_6:
  if (v5 == result) {
    return result;
  }
  uint64_t v6 = *(void *)(result + 8);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 8 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = *(void *)(result + 8);
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v9 = *(void *)(result + 8);
        while ((unint64_t)(*(void *)v9 + 1) <= 1)
        {
          v9 += 8;
          v10 -= 8;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    uint64_t v9 = v6 + 8 * v7;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = v6 + 8 * v7;
  if (v6)
  {
LABEL_14:
    uint64_t v11 = v6 + 8 * *(unsigned int *)(v6 - 4);
    goto LABEL_19;
  }
  uint64_t v11 = 0;
LABEL_19:
  if (v11 == v9) {
    return result;
  }
  do
  {
    uint64_t v12 = *(void *)(*(void *)v9 + 8);
    ++*(_DWORD *)(v12 + 48);
    uint64_t v13 = *a1;
    if (*a1
      || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(a1),
          (uint64_t v13 = *a1) != 0))
    {
      int v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = 0;
    unint64_t v16 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    unsigned int v19 = (v18 >> 31) ^ v18;
    for (int i = 1; ; ++i)
    {
      unsigned int v21 = v19 & v14;
      uint64_t v22 = (uint64_t *)(v13 + 8 * v21);
      uint64_t result = *v22;
      if (*v22 == -1)
      {
        uint64_t v15 = (uint64_t *)(v13 + 8 * v21);
        goto LABEL_29;
      }
      if (!result)
      {
        if (v15)
        {
          uint64_t *v15 = 0;
          --*(_DWORD *)(*a1 - 16);
          uint64_t *v15 = v12;
        }
        else
        {
          uint64_t *v22 = v12;
        }
        uint64_t v23 = *a1;
        if (*a1) {
          int v24 = *(_DWORD *)(v23 - 12) + 1;
        }
        else {
          int v24 = 1;
        }
        *(_DWORD *)(v23 - 12) = v24;
        uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
        unint64_t v26 = *(unsigned int *)(v23 - 4);
        if (v26 > 0x400)
        {
          if (v26 > 2 * v25) {
            goto LABEL_44;
          }
        }
        else if (3 * v26 > 4 * v25)
        {
          goto LABEL_44;
        }
        uint64_t result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(a1);
        goto LABEL_44;
      }
      if (result == v12) {
        break;
      }
LABEL_29:
      unsigned int v19 = i + v21;
    }
    if (v12)
    {
      if (*(_DWORD *)(v12 + 48) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)(v12 + 40) + 8))(v12 + 40, v15);
      }
      else {
        --*(_DWORD *)(v12 + 48);
      }
    }
LABEL_44:
    uint64_t v27 = v9 + 8;
    uint64_t v9 = v8;
    if (v27 != v8)
    {
      uint64_t v9 = v27;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
  return result;
}

void sub_199292174(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIPort::add(WebKit::WebExtensionAPIPort *this, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (_MergedGlobals_120)
  {
    uint64_t v3 = qword_1EB35A058;
    uint64_t v4 = *((void *)this + 10);
    if (qword_1EB35A058)
    {
LABEL_4:
      int v5 = *(_DWORD *)(v3 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    qword_1EB35A058 = 0;
    _MergedGlobals_120 = 1;
    uint64_t v4 = *((void *)this + 10);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(0);
  uint64_t v3 = qword_1EB35A058;
  if (qword_1EB35A058) {
    goto LABEL_4;
  }
  int v5 = 0;
LABEL_5:
  unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = (uint64_t *)(v3 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != v4)
    {
      if (v11 == -1) {
        uint64_t v12 = v10;
      }
      unsigned int v9 = (v9 + v13) & v5;
      uint64_t v10 = (uint64_t *)(v3 + 16 * v9);
      uint64_t v11 = *v10;
      ++v13;
      if (!*v10)
      {
        if (v12)
        {
          uint64_t *v12 = 0;
          v12[1] = 0;
          --*(_DWORD *)(v3 - 16);
          uint64_t v10 = v12;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_24;
  }
LABEL_13:
  int v14 = (unsigned int **)v10[1];
  *uint64_t v10 = v4;
  v10[1] = 0;
  if (v14) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v14, a2);
  }
  if (qword_1EB35A058) {
    int v15 = *(_DWORD *)(qword_1EB35A058 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(qword_1EB35A058 - 12) = v15;
  if (qword_1EB35A058) {
    int v16 = *(_DWORD *)(qword_1EB35A058 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(qword_1EB35A058 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(qword_1EB35A058 - 4);
  if (v18 <= 0x400)
  {
    if (3 * v18 > 4 * v17) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v18 <= 2 * v17) {
LABEL_23:
  }
    uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v10);
LABEL_24:
  unsigned int v19 = v10 + 1;
  uint64_t v20 = *((void *)this + 7);
  if (!v20)
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = this;
    uint64_t v22 = (unsigned int *)*((void *)this + 7);
    *((void *)this + 7) = v20;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      uint64_t v20 = *((void *)this + 7);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  uint64_t v23 = *v19;
  if (*v19
    || (WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(v19),
        (uint64_t v23 = *v19) != 0))
  {
    int v24 = *(_DWORD *)(v23 - 8);
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v25 = 0;
  uint64_t v26 = *(void *)(v20 + 8);
  unint64_t v27 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
  unint64_t v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  unint64_t v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  unsigned int v30 = (v29 >> 31) ^ v29;
  for (int i = 1; ; ++i)
  {
    unsigned int v32 = v30 & v24;
    id v33 = (uint64_t *)(v23 + 8 * v32);
    uint64_t v34 = *v33;
    if (*v33 == -1)
    {
      uint64_t v25 = (uint64_t *)(v23 + 8 * v32);
      goto LABEL_38;
    }
    if (!v34)
    {
      if (v25)
      {
        *uint64_t v25 = 0;
        --*(_DWORD *)(*v19 - 16);
        *uint64_t v25 = v20;
      }
      else
      {
        *id v33 = v20;
      }
      uint64_t v35 = *v19;
      if (*v19) {
        int v36 = *(_DWORD *)(v35 - 12) + 1;
      }
      else {
        int v36 = 1;
      }
      *(_DWORD *)(v35 - 12) = v36;
      uint64_t v37 = *v19;
      if (*v19) {
        int v38 = *(_DWORD *)(v37 - 12);
      }
      else {
        int v38 = 0;
      }
      uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
      unint64_t v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39) {
          goto LABEL_54;
        }
      }
      else if (3 * v40 > 4 * v39)
      {
        goto LABEL_54;
      }
      WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(v19);
      goto LABEL_54;
    }
    if (*(void *)(v34 + 8) == v26) {
      break;
    }
LABEL_38:
    unsigned int v30 = i + v32;
  }
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v20);
    WTF::fastFree((WTF *)v20, v25);
  }
LABEL_54:
  long long v41 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *((void *)this + 10);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v45) {
      uint64_t v43 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v43 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349314;
    uint64_t v47 = v42;
    __int16 v48 = 2114;
    long long v49 = v43;
    _os_log_debug_impl(&dword_1985F2000, v41, OS_LOG_TYPE_DEBUG, "Added port for channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v44);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
}

void sub_19929267C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int **WebKit::WebExtensionAPIPort::remove(WebKit::WebExtensionAPIPort *this)
{
  uint64_t result = (unsigned int **)WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(this);
  uint64_t v3 = *((void *)this + 10);
  if (!v3) {
    return result;
  }
  if (_MergedGlobals_120)
  {
    uint64_t v4 = qword_1EB35A058;
    uint64_t result = (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 10));
    int v5 = result;
    if (v4)
    {
      unint64_t v6 = (unsigned int **)(v4 + 16 * *(unsigned int *)(v4 - 4));
      goto LABEL_7;
    }
  }
  else
  {
    qword_1EB35A058 = 0;
    _MergedGlobals_120 = 1;
    uint64_t result = (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
    int v5 = result;
  }
  unint64_t v6 = 0;
LABEL_7:
  if (v6 == v5) {
    return result;
  }
  {
    unsigned int v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v32);
  }
  uint64_t v7 = WebKit::WebProcess::singleton(void)::process;
  char v8 = *((unsigned char *)this + 8);
  char v9 = *((unsigned char *)this + 64);
  uint64_t v10 = *((void *)this + 9);
  uint64_t v37 = v3;
  uint64_t v38 = v10;
  uint64_t v11 = *(void *)(*((void *)this + 3) + 24);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1673;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v39 = v12;
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v12, v8);
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v12, v9);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v38);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v37);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v7 + 24) + 32))(v7 + 24, &v39, 0);
  int v14 = v39;
  uint64_t v39 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v26, v27);
  }
  int v15 = (unsigned int ***)(v5 + 1);
  uint64_t result = (unsigned int **)v5[1];
  if (result)
  {
    int v16 = *((_DWORD *)result - 2);
    unint64_t v17 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
    unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
    for (int i = 1; ; ++i)
    {
      uint64_t v22 = v20;
      uint64_t v23 = result[v20];
      if (v23 != (unsigned int *)-1)
      {
        if (!v23) {
          goto LABEL_29;
        }
        if (*((WebKit::WebExtensionAPIPort **)v23 + 1) == this) {
          break;
        }
      }
      unsigned int v20 = (v22 + i) & v16;
    }
    if (v22 != *((_DWORD *)result - 1))
    {
      result[v22] = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        uint64_t v31 = result;
        WTF::fastFree((WTF *)v23, v13);
        uint64_t result = v31;
      }
      result[v22] = (unsigned int *)-1;
      ++*((_DWORD *)*v15 - 4);
      int v24 = *v15;
      int v25 = *v15 ? *((_DWORD *)v24 - 3) - 1 : -1;
      *((_DWORD *)v24 - 3) = v25;
      uint64_t result = *v15;
      if (!*v15) {
        goto LABEL_30;
      }
      unsigned int v28 = *((_DWORD *)result - 1);
      if (6 * *((_DWORD *)result - 3) < v28 && v28 >= 9)
      {
        WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash((uint64_t *)v5 + 1, v28 >> 1);
        uint64_t result = *v15;
        if (!*v15) {
          goto LABEL_30;
        }
      }
    }
LABEL_29:
    if (*((_DWORD *)result - 3)) {
      return result;
    }
  }
LABEL_30:
  if (_MergedGlobals_120)
  {
    if (qword_1EB35A058)
    {
      uint64_t v30 = qword_1EB35A058 + 16 * *(unsigned int *)(qword_1EB35A058 - 4);
      if ((unsigned int **)v30 == v5) {
        return result;
      }
      goto LABEL_40;
    }
  }
  else
  {
    qword_1EB35A058 = 0;
    _MergedGlobals_120 = 1;
  }
  if (!v5) {
    return result;
  }
  uint64_t v30 = 0;
LABEL_40:
  if ((unsigned int **)v30 != v5)
  {
    WebKit::WebExtensionAPIEvent *v5 = (unsigned int *)-1;
    if (result) {
      uint64_t result = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, v13);
    }
    uint64_t v33 = qword_1EB35A058;
    ++*(_DWORD *)(qword_1EB35A058 - 16);
    if (v33) {
      int v34 = *(_DWORD *)(v33 - 12) - 1;
    }
    else {
      int v34 = -1;
    }
    *(_DWORD *)(v33 - 12) = v34;
    if (qword_1EB35A058)
    {
      unsigned int v35 = *(_DWORD *)(qword_1EB35A058 - 4);
      if (6 * *(_DWORD *)(qword_1EB35A058 - 12) < v35 && v35 >= 9) {
        return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v35 >> 1, 0);
      }
    }
  }
  return result;
}

void sub_199292A8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

__CFString *WebKit::WebExtensionAPIPort::name(WebKit::WebExtensionAPIPort *this)
{
  if (*((void *)this + 12)) {
    uint64_t v1 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v1 = &stru_1EEA10550;
  }
  uint64_t v2 = v1;

  return v2;
}

id WebKit::WebExtensionAPIPort::sender(WebKit::WebExtensionAPIPort *this)
{
  if (*((unsigned char *)this + 384))
  {
    uint64_t v1 = WebKit::toWebAPI((uint64_t)this + 112);
  }
  else
  {
    uint64_t v1 = 0;
  }

  return v1;
}

const void **WTF::RetainPtr<JSValue>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  int v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_199292B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIPort::postMessage(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  char v8 = v6;
  if (*(unsigned char *)(a1 + 88))
  {
    WebKit::toErrorString(0, 0, &cfstr_ThePortIsDisco.isa, v7);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_5:
    *a4 = v9;
    goto LABEL_6;
  }
  if ((unint64_t)[v6 length] >= 0x4000001)
  {
    WebKit::toErrorString(0, &cfstr_Message.isa, &cfstr_ItExceededTheM.isa, v10);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a1 + 80);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (v29) {
        int v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        int v24 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 134349314;
      *(void *)&uint8_t buf[4] = v23;
      __int16 v31 = 2114;
      unsigned int v32 = v24;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Sent port message for channel %{public}llu from %{public}@ world", buf, 0x16u);
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v25);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    {
      uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    uint64_t v12 = WebKit::WebProcess::singleton(void)::process;
    char v13 = *(unsigned char *)(a1 + 8);
    char v14 = *(unsigned char *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 80);
    *(void *)buf = *(void *)(a1 + 72);
    buf[8] = 1;
    uint64_t v28 = v15;
    MEMORY[0x19972EAD0](&v27, v8);
    uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 24);
    unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v17 = 1672;
    *((void *)v17 + 1) = v16;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    unint64_t v29 = v17;
    IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v17, v13);
    IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v17, v14);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v17, (uint64_t)buf);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v28);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v27);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v12 + 24) + 32))(v12 + 24, &v29, 0);
    unint64_t v19 = v29;
    unint64_t v29 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v21, v22);
    }
    unsigned int v20 = v27;
    unint64_t v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
LABEL_6:
}

void sub_199292F10(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, IPC::Encoder *a12)
{
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, a2);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(unsigned int *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 88))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(v1 + 80);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (v21) {
        unint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v17 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 134349314;
      uint64_t v23 = v15;
      __int16 v24 = 2114;
      int v25 = v17;
      _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Port channel %{public}llu disconnected in %{public}@ world", buf, 0x16u);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v18);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    *(unsigned char *)(v1 + 88) = 1;
    id v3 = *(unsigned int **)(v1 + 392);
    if (v3) {
      WebKit::WebExtensionAPIEvent::removeAllListeners(v3);
    }
    this = (unsigned int *)WebKit::WebExtensionAPIPort::remove((WebKit::WebExtensionAPIPort *)v1);
    uint64_t v4 = *(void *)(v1 + 400);
    if (v4 && *(_DWORD *)(v4 + 84))
    {
      int v5 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = *(void *)(v1 + 80);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v21) {
          unint64_t v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v19 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 134349314;
        uint64_t v23 = v16;
        __int16 v24 = 2114;
        int v25 = v19;
        _os_log_debug_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEBUG, "Fired port disconnect event for channel %{public}llu in %{public}@ world", buf, 0x16u);
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      uint64_t v6 = *(void *)(v1 + 400);
      uint64_t v7 = *(unsigned int *)(v6 + 84);
      if (v7)
      {
        char v8 = *(WebKit::WebExtensionCallbackHandler ***)(v6 + 72);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = (const OpaqueJSContext *)*((void *)*v8 + 3);
          uint64_t v11 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(v10, (void *)(v1 + 40));
          if (v11)
          {
            uint64_t v12 = (void *)MEMORY[0x1E4F30938];
            char v13 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(v10)];
            uint64_t v11 = [v12 valueWithJSValueRef:v11 inContext:v13];
          }
          id v14 = WebKit::WebExtensionCallbackHandler::call(*v8, v11);

          ++v8;
          v9 -= 8;
        }
        while (v9);
        uint64_t v6 = *(void *)(v1 + 400);
      }
      return WebKit::WebExtensionAPIEvent::removeAllListeners((unsigned int *)v6);
    }
  }
  return this;
}

void sub_199293368(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPort::onMessage(WebKit::WebExtensionAPIPort *this)
{
  uint64_t result = *((void *)this + 49);
  if (!result)
  {
    unsigned __int8 v6 = 24;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    id v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 49);
    *((void *)this + 49) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 49);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 49);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 49);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992934FC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPort::onDisconnect(WebKit::WebExtensionAPIPort *this)
{
  uint64_t result = *((void *)this + 50);
  if (!result)
  {
    unsigned __int8 v6 = 23;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    id v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 50);
    *((void *)this + 50) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 50);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 50);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 50);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::dispatchPortMessageEvent(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::WebExtensionAPIPort::get((uint64_t *)&v38, a4);
  if (v38)
  {
    unsigned int v32 = v38;
    if (*((_DWORD *)v38 - 3))
    {
      if (*a5) {
        uint64_t v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v9 = &stru_1EEA10550;
      }
      int v34 = WebKit::parseJSON(v9, 1, 0);

      uint64_t v10 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::begin(v32);
      int v36 = &v32[*((unsigned int *)v32 - 1)];
      if (v36 != v10)
      {
        uint64_t v12 = v10;
        char v13 = v11;
        uint64_t v35 = a3;
        do
        {
          uint64_t v14 = *v12;
          int v15 = *(_DWORD *)(*v12 + 48) + 1;
          *(_DWORD *)(*v12 + 48) = v15;
          if (!v35 || a2 != *(void *)(v14 + 72))
          {
            uint64_t v37 = v34;
            if (!*(unsigned char *)(v14 + 88))
            {
              if (*(void *)(v14 + 80))
              {
                uint64_t v17 = *(void *)(v14 + 392);
                if (v17)
                {
                  if (*(_DWORD *)(v17 + 84))
                  {
                    unint64_t v18 = (id)qword_1EB357DF8;
                    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v28 = *(void *)(v14 + 80);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      unint64_t v29 = v39;
                      if (v39) {
                        uint64_t v30 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      }
                      else {
                        uint64_t v30 = &stru_1EEA10550;
                      }
                      *(_DWORD *)buf = 134349314;
                      uint64_t v41 = v28;
                      __int16 v42 = 2114;
                      uint64_t v43 = v30;
                      _os_log_debug_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEBUG, "Fired port message event for channel %{public}llu in %{public}@ world", buf, 0x16u);
                      if (v29)
                      {
                        if (*(_DWORD *)v29 == 2) {
                          WTF::StringImpl::destroy(v29, v31);
                        }
                        else {
                          *(_DWORD *)v29 -= 2;
                        }
                      }
                    }
                    uint64_t v19 = *(void *)(v14 + 392);
                    uint64_t v20 = *(unsigned int *)(v19 + 84);
                    if (v20)
                    {
                      unsigned int v21 = *(WebKit::WebExtensionCallbackHandler ***)(v19 + 72);
                      uint64_t v22 = 8 * v20;
                      do
                      {
                        uint64_t v23 = (const OpaqueJSContext *)*((void *)*v21 + 3);
                        __int16 v24 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(v23, (void *)(v14 + 40));
                        if (v24)
                        {
                          int v25 = (void *)MEMORY[0x1E4F30938];
                          uint64_t v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(v23)];
                          __int16 v24 = [v25 valueWithJSValueRef:v24 inContext:v26];
                        }
                        id v27 = WebKit::WebExtensionCallbackHandler::call(*v21, v37, v24);

                        ++v21;
                        v22 -= 8;
                      }
                      while (v22);
                    }
                  }
                }
              }
            }

            int v15 = *(_DWORD *)(v14 + 48);
          }
          int v16 = v15 - 1;
          if (v16) {
            *(_DWORD *)(v14 + 48) = v16;
          }
          else {
            (*(void (**)(uint64_t))(*(void *)(v14 + 40) + 8))(v14 + 40);
          }
          while (++v12 != v13)
          {
            if ((unint64_t)(*v12 + 1) > 1) {
              goto LABEL_18;
            }
          }
          uint64_t v12 = v13;
LABEL_18:
          ;
        }
        while (v12 != v36);
      }
    }
    return WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(v32, v8);
  }
  return result;
}

void sub_1992939A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(a11, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchPortDisconnectEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::WebExtensionAPIPort::get((uint64_t *)&v10, a2);
  uint64_t v4 = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 - 3))
    {
      int v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::begin(v10);
      unsigned __int8 v6 = &v4[*((unsigned int *)v4 - 1)];
      if (v6 != v5)
      {
        uint64_t v7 = v5;
        char v8 = v3;
        do
        {
          uint64_t v9 = *v7;
          *(_DWORD *)(v9 + 48) = *(_DWORD *)(*v7 + 48) + 1;
          WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded((unsigned int *)v9);
          if (*(_DWORD *)(v9 + 48) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
          }
          else {
            --*(_DWORD *)(v9 + 48);
          }
          while (++v7 != v8)
          {
            if ((unint64_t)(*v7 + 1) > 1) {
              goto LABEL_12;
            }
          }
          uint64_t v7 = v8;
LABEL_12:
          ;
        }
        while (v7 != v6);
      }
    }
    return WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(v4, v3);
  }
  return result;
}

void sub_199293B94(_Unwind_Exception *a1, void *a2)
{
  if (*(_DWORD *)(v3 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v3 + 40) + 8))(v3 + 40);
  }
  else {
    --*(_DWORD *)(v3 + 48);
  }
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)(v5 + 48) == 1) {
            (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
          }
          else {
            --*(_DWORD *)(v5 + 48);
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1)
{
  if (!qword_1EB35A058) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(qword_1EB35A058 - 8);
  unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  uint64_t v5 = v1 & ((v4 >> 31) ^ v4);
  uint64_t v6 = *(void *)(qword_1EB35A058 + 16 * v5);
  if (v6 == a1) {
    return qword_1EB35A058 + 16 * v5;
  }
  int v7 = 1;
  while (v6)
  {
    uint64_t v5 = (v5 + v7) & v1;
    uint64_t v6 = *(void *)(qword_1EB35A058 + 16 * v5);
    ++v7;
    if (v6 == a1) {
      return qword_1EB35A058 + 16 * v5;
    }
  }
  return qword_1EB35A058 + 16 * *(unsigned int *)(qword_1EB35A058 - 4);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (uint64_t *)(v2 + 8 * i);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(v11 + 8 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          uint64_t v20 = (void *)(v11 + 8 * v18);
          void *v20 = 0;
          uint64_t v21 = *v9;
          uint64_t *v9 = 0;
          void *v20 = v21;
          uint64_t v22 = *v9;
          uint64_t *v9 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 48) == 1) {
              (*(void (**)(void))(*(void *)(v22 + 40) + 8))();
            }
            else {
              --*(_DWORD *)(v22 + 48);
            }
          }
        }
        else
        {
          uint64_t *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  if (qword_1EB35A058 && (int v2 = *(_DWORD *)(qword_1EB35A058 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB35A058 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, a1);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4 = qword_1EB35A058;
  if (qword_1EB35A058)
  {
    unsigned int v5 = *(_DWORD *)(qword_1EB35A058 - 4);
    int v6 = *(_DWORD *)(qword_1EB35A058 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t v9 = (_DWORD *)v7;
  uint64_t v10 = v7 + 16;
  if (a1) {
    bzero((void *)(v7 + 16), 16 * a1);
  }
  qword_1EB35A058 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  _DWORD *v9 = 0;
  *(_DWORD *)(qword_1EB35A058 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = v5;
    do
    {
      unint64_t v14 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          if (qword_1EB35A058) {
            int v17 = *(_DWORD *)(qword_1EB35A058 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(qword_1EB35A058 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          int v25 = (void *)(qword_1EB35A058 + 16 * v23);
          id v27 = v25 + 1;
          uint64_t v26 = (unsigned int **)v25[1];
          if (v26)
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v26, v8);
            uint64_t v15 = *v14;
          }
          *int v25 = v15;
          uint64_t v28 = v4 + 16 * v11;
          *id v27 = 0;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *id v27 = v29;
          uint64_t v30 = *(unsigned int ***)(v28 + 8);
          if (v30) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v30, v8);
          }
          if (v14 == a2) {
            int v12 = v25;
          }
        }
        else
        {
          unsigned int v16 = *(unsigned int ***)(v4 + 16 * v11 + 8);
          if (v16) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v16, v8);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (unsigned int **)(v4 + 8 * i);
      uint64_t v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ~(*((void *)v11 + 1) << 32) + *((void *)v11 + 1);
          unint64_t v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          unint64_t v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          unsigned int v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~(v16 << 27)));
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          unsigned int v21 = (unsigned int **)(v12 + 8 * v19);
          *unsigned int v21 = 0;
          int v22 = *v10;
          *uint64_t v10 = 0;
          *unsigned int v21 = v22;
          unsigned int v23 = *v10;
          *uint64_t v10 = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v8);
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  int v2 = &result[v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[v1];
  }
  if (v1)
  {
    uint64_t v3 = 8 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v3 -= 8;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

id WebKit::WebExtensionAPIRuntimeBase::reportError(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  char v8 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    id v23 = v7;
    _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Runtime error reported: %{public}@", buf, 0xCu);
  }
  uint64_t v9 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:a3];
  uint64_t v10 = [MEMORY[0x1E4F30938] valueWithNewErrorFromMessage:v7 inContext:v9];
  *(unsigned char *)(a1 + 12) = 0;
  WTF::RetainPtr<JSValue>::operator=((const void **)(a1 + 16), v10);
  if (*(void *)a4)
  {
    uint64_t v11 = [@"Unchecked runtime.lastError: " stringByAppendingString:v7];

    id v7 = (id)v11;
    (*(void (**)(void))(**(void **)a4 + 16))();
  }
  if (!*(unsigned char *)(a1 + 12))
  {
    uint64_t v12 = [v9 globalObject];
    int v13 = [v12 objectForKeyedSubscript:@"console"];
    unint64_t v14 = [v13 objectForKeyedSubscript:@"error"];

    unint64_t v15 = [MEMORY[0x1E4F30938] valueWithNewErrorFromMessage:v7 inContext:v9];
    unsigned int v21 = v15;
    unint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:1];
    id v17 = (id)[v14 callWithArguments:v16];

    if (*(void *)a4)
    {
      int v18 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEBUG, "Unchecked runtime.lastError", buf, 2u);
      }
    }
  }
  *(unsigned char *)(a1 + 12) = 0;
  unsigned int v19 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v19) {
    CFRelease(v19);
  }

  return v10;
}

void sub_19929467C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIRuntimeBase::reportError(WebKit::WebExtensionAPIRuntimeBase *this, NSString *a2, WebKit::WebExtensionCallbackHandler *a3)
{
  int v5 = a2;
  uint64_t v6 = *((void *)a3 + 3);
  id v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9FC590;
  v7[1] = a3;
  uint64_t v10 = v7;
  char v8 = WebKit::WebExtensionAPIRuntimeBase::reportError((uint64_t)this, v5, v6, (uint64_t)&v10);
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }

  return v8;
}

void sub_1992947B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIRuntime::parseConnectOptions(void *a1, uint64_t a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = @"options";
  if (_MergedGlobals_121 == 1)
  {
    id v7 = (void *)qword_1EB35A068;
  }
  else
  {
    uint64_t v11 = @"name";
    v12[0] = objc_opt_class();
    id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
    qword_1EB35A068 = (uint64_t)v7;
    _MergedGlobals_121 = 1;
  }
  BOOL v8 = WebKit::validateDictionary(v5, @"options", 0, v7, a3);
  if (v8)
  {
    id v10 = [v5 objectForKeyedSubscript:@"name"];
    if (v10)
    {
      std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2, &v10);
    }
  }

  return v8;
}

void sub_199294940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionAPIRuntime::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  id v5 = *(const char **)a2;
  if (v5)
  {
    if (!strcmp(v5, "connectNative") || !strcmp(v5, "sendNativeMessage")) {
      goto LABEL_12;
    }
    return 0;
  }
  if ("connectNative") {
    BOOL v6 = "sendNativeMessage" == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return 0;
  }
LABEL_12:
  BOOL v8 = this[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  id v7 = WebKit::WebExtensionContextProxy::hasPermission(v8, &v12);
  id v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v7;
}

void sub_199294A60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAPIRuntime::getURL(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  MEMORY[0x19972EAD0](&v7);
  MEMORY[0x19972E8B0](&v8, v1 + 40, &v7, 0);
  id v3 = (id)WTF::URL::operator NSURL *();
  uint64_t v4 = v8;
  BOOL v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  id v5 = v7;
  id v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return v3;
}

void sub_199294B40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

__CFString *WebKit::WebExtensionAPIRuntime::runtimeIdentifier(WebKit::WebExtensionAPIRuntime *this)
{
  if (*(void *)(*((void *)this + 3) + 80)) {
    uint64_t v1 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v1 = &stru_1EEA10550;
  }
  int v2 = v1;

  return v2;
}

id WebKit::WebExtensionAPIRuntime::getPlatformInfo(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  if (byte_1EB35A061 == 1)
  {
    int v2 = (objc_object *)qword_1EB35A070;
  }
  else
  {
    v6[0] = @"os";
    v6[1] = @"arch";
    v7[0] = @"ios";
    v7[1] = @"arm";
    id v5 = a2;
    uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
    a2 = v5;
    int v2 = (objc_object *)v4;
    qword_1EB35A070 = v4;
    byte_1EB35A061 = 1;
  }
  return WebKit::WebExtensionCallbackHandler::call(*a2, v2);
}

void WebKit::WebExtensionAPIRuntime::getBackgroundPage(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 168);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    BOOL v6 = *a2;
    WebKit::toWindowObject(*((WebKit **)*a2 + 3), *(const OpaqueJSContext **)(v5 + 72), v7);
    BOOL v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = v8;
    if (!v8)
    {
      uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
    }
    id v10 = WebKit::WebExtensionCallbackHandler::call(v6, v9);
    if (!v8) {

    }
    uint64_t v11 = *(const void **)(v5 - 8);
    CFRelease(v11);
  }
  else
  {
    {
      int v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v22);
    }
    uint64_t v12 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    int v13 = *a2;
    *a2 = 0;
    uint64_t v14 = *(void *)(*(void *)(a1 + 24) + 24);
    unint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v15 = 1677;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v24 = v15;
    unint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v16 = &unk_1EE9FC5B8;
    v16[1] = a1;
    v16[2] = v13;
    v23[0] = v16;
    v23[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v12 + 24) + 40))(v12 + 24, &v24, v23, 0);
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    unsigned int v19 = v24;
    uint64_t v24 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v20, v21);
    }
  }
}

void sub_199294EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  CFRelease(*(CFTypeRef *)(v13 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::getFrameId(WebKit::WebExtensionAPIRuntime *this, JSValue *a2)
{
  int v2 = a2;
  id v3 = v2;
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v4 = [(JSValue *)v2 context];
  uint64_t v5 = (WebKit::WebFrame *)[v4 JSGlobalContextRef];
  BOOL v6 = [(JSValue *)v3 JSValueRef];
  WebKit::WebFrame::contentFrameForWindowOrFrameElement(v5, v6, v7, &v19);

  uint64_t v8 = v19;
  if (!v19) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)(v19 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v11 = *(void *)(*(void *)(v10 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
    if (v11 == v10) {
      goto LABEL_16;
    }
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
LABEL_7:
      uint64_t v12 = *(void *)(v9 + 8);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 24);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 8);
          if (v14)
          {
            unint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16);
            if (((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0)
            {
              uint64_t v16 = *(void *)(v15[2] + 8);
              if (v16)
              {
                CFRetain(*(CFTypeRef *)(v16 - 8));
                uint64_t v17 = *(void *)(v16 + 72);
                CFRelease(*(CFTypeRef *)(v16 - 8));
                if (v17 == v8) {
                  goto LABEL_16;
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v18 = *(void *)(v8 + 80);
  if (v18 != -1)
  {
LABEL_16:
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
LABEL_18:

    return;
  }
  __break(0xC471u);
}

void sub_1992951D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIRuntime::openOptionsPage(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  BOOL v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v6 = 1678;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v15 = v6;
  id v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FC600;
  v7[1] = a1;
  v7[2] = v4;
  v14[0] = v7;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v3 + 24) + 40))(v3 + 24, &v15, v14, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  unint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_199295398(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199295460()
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v1);
  }
  if (*(_DWORD *)(v0 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 40) + 8))(v0 + 40);
  }
  else {
    --*(_DWORD *)(v0 + 48);
  }
  JUMPOUT(0x19929544CLL);
}

IPC::Encoder *WebKit::WebExtensionAPIRuntime::reload(WebKit::WebExtensionAPIRuntime *this)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v1 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v2 = *(void *)(*((void *)this + 3) + 24);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1679;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v9 = v3;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v1 + 24) + 32))(v1 + 24, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1992955AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, void *a5, uint64_t *a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if ((unint64_t)[v14 length] >= 0x4000001)
  {
    WebKit::toErrorString(0, &cfstr_Message.isa, &cfstr_ItExceededTheM.isa, v16);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_45;
  }
  uint64_t v17 = *(WTF::StringImpl **)(*(void *)(a1 + 24) + 80);
  if (v17) {
    *(_DWORD *)v17 += 2;
  }
  int v51 = v17;
  char v52 = 1;
  v53[0] = 0;
  v53[176] = 0;
  uint64_t v18 = *((void *)a2 + 3);
  if (!v18) {
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)(v18 + 8);
  if (v19)
  {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    uint64_t v20 = *(void *)(*(void *)(v19 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v19 + 8));
    if (v20 == v19) {
      goto LABEL_19;
    }
    uint64_t v18 = *((void *)a2 + 3);
    if (!v18)
    {
LABEL_15:
      uint64_t v27 = *((void *)a2 + 10);
      if (v27 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x199295A4CLL);
      }
      if ((unint64_t)(v27 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v27 = -3;
      }
      goto LABEL_20;
    }
  }
  uint64_t v21 = *(void *)(v18 + 8);
  if (!v21) {
    goto LABEL_15;
  }
  uint64_t v22 = *(void *)(v21 + 24);
  if (!v22) {
    goto LABEL_15;
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (!v23) {
    goto LABEL_15;
  }
  uint64_t v24 = *(void **)(*(void *)(v23 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v24 + 1368))(v24)) {
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24[2] + 8);
  if (!v25) {
    goto LABEL_15;
  }
  CFRetain(*(CFTypeRef *)(v25 - 8));
  uint64_t v26 = *(WebKit::WebFrame **)(v25 + 72);
  CFRelease(*(CFTypeRef *)(v25 - 8));
  if (v26 != a2) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v27 = -2;
LABEL_20:
  uint64_t v54 = v27;
  char v55 = 1;
  uint64_t v28 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v28 + 1368))(v28);
  uint64_t v29 = *(void *)(v28[2] + 8);
  if (v29) {
    uint64_t v30 = v29 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v56 = *(void *)(v30 + 2120);
  char v57 = *(unsigned char *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v58);
  {
    uint64_t v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  uint64_t v31 = WebKit::WebProcess::singleton(void)::process;
  MEMORY[0x19972EAD0](&v49, v13);
  MEMORY[0x19972EAD0](&v48, v14);
  v50[0] = &v49;
  v50[1] = &v48;
  void v50[2] = &v51;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v32 = *a6;
  *a6 = 0;
  uint64_t v33 = *(void *)(*(void *)(a1 + 24) + 24);
  int v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v34 = 1680;
  *((void *)v34 + 1) = v33;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  uint64_t v60 = v34;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>(v34, (uint64_t)v50);
  uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v35 = &unk_1EE9FC628;
  v35[1] = a1;
  void v35[2] = v32;
  uint64_t v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v59[0] = v35;
  v59[1] = v36;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v31 + 24) + 40))(v31 + 24, &v60, v59, 0);
  uint64_t v38 = v59[0];
  v59[0] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v60;
  uint64_t v60 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v45, v46);
  }
  unint64_t v40 = v48;
  __int16 v48 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v37);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = v49;
  long long v49 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v37);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  __int16 v42 = v58;
  uint64_t v58 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v37);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v53);
  if (v52)
  {
    uint64_t v44 = v51;
    int v51 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v43);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
LABEL_45:
}

void sub_199295A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v46);
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v48);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  id v13 = a4;
  id v14 = a5;
  LOBYTE(v69) = 0;
  char v70 = 0;
  if (!WebKit::WebExtensionAPIRuntime::parseConnectOptions(v14, (uint64_t)&v69, a6))
  {
    *a7 = 0;
    goto LABEL_60;
  }
  if (v70)
  {
    uint64_t v16 = v69;
    if (!v69) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v16 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
  if (*MEMORY[0x1E4F30978]) {
LABEL_4:
  }
    *(_DWORD *)v16 += 2;
LABEL_5:
  uint64_t v68 = v16;
  uint64_t v17 = *(WTF::StringImpl **)(*(void *)(a1 + 24) + 80);
  if (v17) {
    *(_DWORD *)v17 += 2;
  }
  uint64_t v60 = v17;
  char v61 = 1;
  v62[0] = 0;
  v62[176] = 0;
  uint64_t v18 = *((void *)a2 + 3);
  if (!v18) {
    goto LABEL_17;
  }
  uint64_t v19 = *(void *)(v18 + 8);
  if (v19)
  {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    uint64_t v20 = *(void *)(*(void *)(v19 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v19 + 8));
    if (v20 == v19) {
      goto LABEL_22;
    }
    uint64_t v18 = *((void *)a2 + 3);
    if (!v18)
    {
LABEL_17:
      uint64_t v27 = *((void *)a2 + 10);
      if (v27 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1992961ECLL);
      }
      if ((unint64_t)(v27 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v27 = -3;
      }
      goto LABEL_23;
    }
  }
  uint64_t v21 = *(void *)(v18 + 8);
  if (!v21) {
    goto LABEL_17;
  }
  uint64_t v22 = *(void *)(v21 + 24);
  if (!v22) {
    goto LABEL_17;
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (!v23) {
    goto LABEL_17;
  }
  uint64_t v24 = *(void **)(*(void *)(v23 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v24 + 1368))(v24)) {
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24[2] + 8);
  if (!v25) {
    goto LABEL_17;
  }
  CFRetain(*(CFTypeRef *)(v25 - 8));
  uint64_t v26 = *(WebKit::WebFrame **)(v25 + 72);
  CFRelease(*(CFTypeRef *)(v25 - 8));
  if (v26 != a2) {
    goto LABEL_17;
  }
LABEL_22:
  uint64_t v27 = -2;
LABEL_23:
  uint64_t v63 = v27;
  char v64 = 1;
  uint64_t v28 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v28 + 1368))(v28);
  uint64_t v29 = *(void *)(v28[2] + 8);
  if (v29) {
    uint64_t v30 = v29 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v65 = *(void *)(v30 + 2120);
  char v66 = *(unsigned char *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v67);
  uint64_t v31 = *((void *)a2 + 3);
  if (v31
    && (uint64_t v32 = *(void *)(v31 + 8)) != 0
    && (uint64_t v33 = *(void *)(v32 + 24)) != 0
    && (uint64_t v34 = *(void *)(v33 + 8)) != 0
    && (uint64_t v35 = *(void **)(*(void *)(v34 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v35 + 1368))(v35) & 1) == 0))
  {
    uint64_t v36 = *(void *)(v35[2] + 8);
    if (v36) {
      uint64_t v37 = v36 - 16;
    }
    else {
      uint64_t v37 = 0;
    }
  }
  else
  {
    uint64_t v37 = 0;
  }
  uint64_t v38 = WTF::fastMalloc((WTF *)0x198);
  WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v38, a1, v37, 0, (_DWORD **)&v68);
  {
    uint64_t v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v56);
  }
  uint64_t v39 = WebKit::WebProcess::singleton(void)::process;
  MEMORY[0x19972EAD0](&v58, v13);
  uint64_t v57 = *(void *)(v38 + 80);
  v59[0] = &v58;
  v59[1] = &v57;
  void v59[2] = &v68;
  v59[3] = &v60;
  ++*(_DWORD *)(a1 + 48);
  GlobalContext = JSContextGetGlobalContext(a3);
  uint64_t v41 = GlobalContext;
  if (GlobalContext) {
    JSGlobalContextRetain(GlobalContext);
  }
  ++*(_DWORD *)(v38 + 48);
  uint64_t v42 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v43 = 1675;
  *((void *)v43 + 1) = v42;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  uint64_t v72 = v43;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(v43, (uint64_t)v59);
  uint64_t v44 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v44 = &unk_1EE9FC6B8;
  v44[1] = a1;
  void v44[2] = a1;
  v44[3] = v41;
  v44[4] = v38;
  uint64_t v45 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v71[0] = v44;
  v71[1] = v45;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v39 + 24) + 40))(v39 + 24, &v72, v71, 0);
  uint64_t v47 = v71[0];
  v71[0] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  __int16 v48 = v72;
  uint64_t v72 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v46);
    WTF::fastFree(v54, v55);
  }
  long long v49 = v58;
  uint64_t v58 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v46);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  *a7 = v38;
  uint64_t v50 = v67;
  long long v67 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v46);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62);
  if (v61)
  {
    int v51 = v60;
    uint64_t v60 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2) {
        WTF::StringImpl::destroy(v51, v15);
      }
      else {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  char v52 = v68;
  uint64_t v68 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, v15);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
LABEL_60:
  if (v70)
  {
    char v53 = v69;
    uint64_t v69 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, v15);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
}

void sub_19929621C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v47);
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v50);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  int v51 = *(WTF::StringImpl **)(v48 - 136);
  *(void *)(v48 - 136) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v50);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  if (*(unsigned char *)(v48 - 120))
  {
    char v52 = *(WTF::StringImpl **)(v48 - 128);
    *(void *)(v48 - 128) = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v50);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::sendNativeMessage(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5)
{
  id v8 = a3;
  id v9 = a4;
  {
    uint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
  MEMORY[0x19972EAD0](&v25, v8);
  MEMORY[0x19972EAD0](&v24, v9);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v11 = *a5;
  *a5 = 0;
  uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
  id v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)id v13 = 1681;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v27 = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)&v25);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)&v24);
  id v14 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v14 = &unk_1EE9FC6E0;
  v14[1] = a1;
  void v14[2] = v11;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v26[0] = v14;
  v26[1] = v15;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v27, v26, 0);
  uint64_t v17 = v26[0];
  v26[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v27;
  uint64_t v27 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v21, v22);
  }
  uint64_t v19 = v24;
  uint64_t v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
}

void sub_199296748(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebExtensionAPIRuntime *this@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, NSString *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9 = a4;
  uint64_t v10 = *((void *)a2 + 3);
  if (v10
    && (uint64_t v11 = *(void *)(v10 + 8)) != 0
    && (uint64_t v12 = *(void *)(v11 + 24)) != 0
    && (uint64_t v13 = *(void *)(v12 + 8)) != 0
    && (id v14 = *(void **)(*(void *)(v13 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v14 + 1368))(v14) & 1) == 0))
  {
    uint64_t v15 = *(void *)(v14[2] + 8);
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)0x198);
  MEMORY[0x19972EAD0](v40, v9);
  WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v17, (uint64_t)this, v16, 2, (_DWORD **)v40);
  uint64_t v19 = v40[0];
  v40[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  {
    uint64_t v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v36);
  }
  uint64_t v20 = WebKit::WebProcess::singleton(void)::process;
  MEMORY[0x19972EAD0](&v39, v9);
  uint64_t v38 = *(void *)(v17 + 80);
  uint64_t v21 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v21 + 1368))(v21);
  uint64_t v22 = *(void *)(v21[2] + 8);
  if (v22) {
    uint64_t v23 = v22 - 16;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v37 = *(void *)(v23 + 2120);
  ++*((_DWORD *)this + 12);
  GlobalContext = JSContextGetGlobalContext(a3);
  uint64_t v25 = GlobalContext;
  if (GlobalContext) {
    JSGlobalContextRetain(GlobalContext);
  }
  ++*(_DWORD *)(v17 + 48);
  uint64_t v26 = *(void *)(*((void *)this + 3) + 24);
  uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v27 = 1676;
  *((void *)v27 + 1) = v26;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  uint64_t v41 = v27;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)&v39);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, &v38);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, &v37);
  uint64_t v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v28 = &unk_1EE9FC708;
  *((void *)v28 + 1) = this;
  *((void *)v28 + 2) = this;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v17;
  uint64_t v29 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v40[0] = v28;
  v40[1] = v29;
  (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v20 + 24) + 40))(v20 + 24, &v41, v40, 0);
  uint64_t v31 = v40[0];
  v40[0] = 0;
  if (v31) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = v41;
  uint64_t v41 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v30);
    WTF::fastFree(v34, v35);
  }
  uint64_t v33 = v39;
  uint64_t v39 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  *a5 = v17;
}

void sub_199296C2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageRuntime::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, void *a5, uint64_t *a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if ((unint64_t)[v14 length] >= 0x4000001)
  {
    WebKit::toErrorString(0, &cfstr_Message.isa, &cfstr_ItExceededTheM.isa, v16);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_60;
  }
  LOBYTE(v65) = 0;
  char v66 = 0;
  v67[0] = 0;
  v67[176] = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v19 = *(void *)(*(void *)(v18 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
    if (v19 == v18) {
      goto LABEL_17;
    }
    uint64_t v17 = *((void *)a2 + 3);
    if (!v17)
    {
LABEL_13:
      uint64_t v26 = *((void *)a2 + 10);
      if (v26 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x199297448);
      }
      if ((unint64_t)(v26 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v26 = -3;
      }
      goto LABEL_18;
    }
  }
  uint64_t v20 = *(void *)(v17 + 8);
  if (!v20) {
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(v20 + 24);
  if (!v21) {
    goto LABEL_13;
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (!v22) {
    goto LABEL_13;
  }
  uint64_t v23 = *(void **)(*(void *)(v22 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v23 + 1368))(v23)) {
    goto LABEL_13;
  }
  uint64_t v24 = *(void *)(v23[2] + 8);
  if (!v24) {
    goto LABEL_13;
  }
  CFRetain(*(CFTypeRef *)(v24 - 8));
  uint64_t v25 = *(WebKit::WebFrame **)(v24 + 72);
  CFRelease(*(CFTypeRef *)(v24 - 8));
  if (v25 != a2) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v26 = -2;
LABEL_18:
  uint64_t v68 = v26;
  char v69 = 1;
  uint64_t v27 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v27 + 1368))(v27);
  uint64_t v28 = *(void *)(v27[2] + 8);
  if (v28) {
    uint64_t v29 = v28 - 16;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v70 = *(void *)(v29 + 2120);
  char v71 = 3;
  WebKit::WebFrame::url(a2, (uint64_t)&v72);
  uint64_t v30 = *((void *)a2 + 3);
  if (v30
    && (uint64_t v31 = *(void *)(v30 + 8)) != 0
    && (uint64_t v32 = *(void *)(v31 + 24)) != 0
    && (uint64_t v33 = *(void *)(v32 + 8)) != 0
    && (uint64_t v34 = *(void **)(*(void *)(v33 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v34 + 1368))(v34) & 1) == 0))
  {
    uint64_t v35 = *(void *)(v34[2] + 8);
    if (v35) {
      uint64_t v36 = v35 - 16;
    }
    else {
      uint64_t v36 = 0;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  CFRetain(*(CFTypeRef *)(v36 + 8));
  uint64_t v37 = *(WebKit::WebExtensionControllerProxy **)(v36 + 632);
  MEMORY[0x19972EAD0](v63, v13);
  WebKit::WebExtensionControllerProxy::extensionContext(v37, v63, &v64);
  uint64_t v39 = v63[0];
  v63[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v40 = v64;
  if (v64)
  {
    {
      uint64_t v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v60);
    }
    uint64_t v41 = WebKit::WebProcess::singleton(void)::process;
    MEMORY[0x19972EAD0](&v62, v13);
    MEMORY[0x19972EAD0](&v61, v14);
    v63[0] = (WTF::StringImpl *)&v62;
    v63[1] = (WTF::StringImpl *)&v61;
    void v63[2] = (WTF::StringImpl *)&v65;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v42 = *a6;
    *a6 = 0;
    uint64_t v43 = *(void *)(v40 + 24);
    uint64_t v44 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v44 = 1683;
    *((void *)v44 + 1) = v43;
    *((void *)v44 + 66) = (char *)v44 + 16;
    *((void *)v44 + 67) = 512;
    *((void *)v44 + 68) = 0;
    *((void *)v44 + 70) = 0;
    *((void *)v44 + 69) = 0;
    IPC::Encoder::encodeHeader(v44);
    long long v74 = v44;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>(v44, (uint64_t)v63);
    uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v45 = &unk_1EE9FC758;
    v45[1] = a1;
    v45[2] = v42;
    uint64_t v46 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v73[0] = v45;
    v73[1] = v46;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v41 + 24) + 40))(v41 + 24, &v74, v73, 0);
    uint64_t v48 = v73[0];
    v73[0] = 0;
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
    }
    long long v49 = v74;
    long long v74 = 0;
    if (v49)
    {
      IPC::Encoder::~Encoder(v49, v47);
      WTF::fastFree(v58, v59);
    }
    uint64_t v50 = v61;
    char v61 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v47);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    char v53 = v62;
    long long v62 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v47);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    if (v64) {
      WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v64 + 16));
    }
  }
  else
  {
    uint64_t v51 = *a6;
    *a6 = 0;
    char v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)char v52 = &unk_1EE9FC730;
    *((void *)v52 + 1) = v51;
    v63[0] = v52;
    WebKit::callAfterRandomDelay((uint64_t *)v63);
    if (v63[0]) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v63[0] + 8))(v63[0]);
    }
  }
  CFRelease(*(CFTypeRef *)(v36 + 8));
  char v55 = v72;
  uint64_t v72 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, v54);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67);
  if (v66)
  {
    uint64_t v57 = v65;
    uint64_t v65 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v56);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
LABEL_60:
}

void sub_199297478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  CFRelease(*(CFTypeRef *)(v48 + 8));
  if (a44)
  {
    if (*(_DWORD *)a44 == 2) {
      WTF::StringImpl::destroy(a44, v50);
    }
    else {
      *(_DWORD *)a44 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v47);
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v51);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageRuntime::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  id v13 = a4;
  id v14 = a5;
  LOBYTE(v82) = 0;
  char v83 = 0;
  if (!WebKit::WebExtensionAPIRuntime::parseConnectOptions(v14, (uint64_t)&v82, a6))
  {
    *a7 = 0;
    goto LABEL_72;
  }
  if (!v83)
  {
    uint64_t v16 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
    if (!*MEMORY[0x1E4F30978]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v16 = v82;
  if (v82) {
LABEL_4:
  }
    *(_DWORD *)v16 += 2;
LABEL_5:
  uint64_t v81 = v16;
  LOBYTE(v73) = 0;
  char v74 = 0;
  v75[0] = 0;
  v75[176] = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (!v17) {
    goto LABEL_15;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v19 = *(void *)(*(void *)(v18 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
    if (v19 == v18) {
      goto LABEL_20;
    }
    uint64_t v17 = *((void *)a2 + 3);
    if (!v17)
    {
LABEL_15:
      uint64_t v26 = *((void *)a2 + 10);
      if (v26 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x199297E70);
      }
      if ((unint64_t)(v26 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v26 = -3;
      }
      goto LABEL_21;
    }
  }
  uint64_t v20 = *(void *)(v17 + 8);
  if (!v20) {
    goto LABEL_15;
  }
  uint64_t v21 = *(void *)(v20 + 24);
  if (!v21) {
    goto LABEL_15;
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (!v22) {
    goto LABEL_15;
  }
  uint64_t v23 = *(void **)(*(void *)(v22 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v23 + 1368))(v23)) {
    goto LABEL_15;
  }
  uint64_t v24 = *(void *)(v23[2] + 8);
  if (!v24) {
    goto LABEL_15;
  }
  CFRetain(*(CFTypeRef *)(v24 - 8));
  uint64_t v25 = *(WebKit::WebFrame **)(v24 + 72);
  CFRelease(*(CFTypeRef *)(v24 - 8));
  if (v25 != a2) {
    goto LABEL_15;
  }
LABEL_20:
  uint64_t v26 = -2;
LABEL_21:
  uint64_t v76 = v26;
  char v77 = 1;
  uint64_t v27 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v27 + 1368))(v27);
  uint64_t v28 = *(void *)(v27[2] + 8);
  if (v28) {
    uint64_t v29 = v28 - 16;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v78 = *(void *)(v29 + 2120);
  char v79 = 3;
  WebKit::WebFrame::url(a2, (uint64_t)&v80);
  uint64_t v30 = *((void *)a2 + 3);
  if (v30
    && (uint64_t v31 = *(void *)(v30 + 8)) != 0
    && (uint64_t v32 = *(void *)(v31 + 24)) != 0
    && (uint64_t v33 = *(void *)(v32 + 8)) != 0
    && (uint64_t v34 = *(void **)(*(void *)(v33 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v34 + 1368))(v34) & 1) == 0))
  {
    uint64_t v35 = *(void *)(v34[2] + 8);
    if (v35) {
      uint64_t v36 = v35 - 16;
    }
    else {
      uint64_t v36 = 0;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  CFRetain(*(CFTypeRef *)(v36 + 8));
  uint64_t v37 = *(WebKit::WebExtensionControllerProxy **)(v36 + 632);
  MEMORY[0x19972EAD0](v71, v13);
  WebKit::WebExtensionControllerProxy::extensionContext(v37, v71, &v72);
  uint64_t v39 = v71[0];
  v71[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v40 = v72;
  if (v72)
  {
    id v68 = v14;
    char v41 = *(unsigned char *)(a1 + 8);
    uint64_t v42 = WTF::fastMalloc((WTF *)0x198);
    *(unsigned char *)(v42 + 8) = v41;
    ++*(_DWORD *)(a1 + 48);
    *(void *)(v42 + 16) = a1 + 40;
    ++*(_DWORD *)(v40 + 16);
    *(void *)(v42 + 24) = v40;
    *(void *)(v42 + 32) = 0;
    *(_DWORD *)(v42 + 48) = 1;
    *(void *)(v42 + 56) = 0;
    *(void *)uint64_t v42 = &unk_1EE9FC660;
    *(void *)(v42 + 40) = &unk_1EE9FC690;
    *(unsigned char *)(v42 + 64) = 0;
    *(void *)(v42 + 72) = *(void *)(v36 + 2120);
    *(void *)(v42 + 80) = WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(unsigned char *)(v42 + 88) = 0;
    uint64_t v44 = v81;
    if (v81) {
      *(_DWORD *)v81 += 2;
    }
    *(void *)(v42 + 96) = v44;
    *(void *)(v42 + 104) = 0;
    *(unsigned char *)(v42 + 112) = 0;
    *(unsigned char *)(v42 + 384) = 0;
    *(void *)(v42 + 392) = 0;
    *(void *)(v42 + 400) = 0;
    WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)v42, v43);
    {
      long long v67 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v67);
    }
    uint64_t v45 = WebKit::WebProcess::singleton(void)::process;
    MEMORY[0x19972EAD0](&v70, v13);
    uint64_t v69 = *(void *)(v42 + 80);
    v71[0] = (WTF::StringImpl *)&v70;
    v71[1] = (WTF::StringImpl *)&v69;
    void v71[2] = (WTF::StringImpl *)&v81;
    v71[3] = (WTF::StringImpl *)&v73;
    ++*(_DWORD *)(a1 + 48);
    GlobalContext = JSContextGetGlobalContext(a3);
    uint64_t v47 = GlobalContext;
    if (GlobalContext) {
      JSGlobalContextRetain(GlobalContext);
    }
    ++*(_DWORD *)(v42 + 48);
    uint64_t v48 = *(void *)(v40 + 24);
    long long v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v49 = 1682;
    *((void *)v49 + 1) = v48;
    *((void *)v49 + 66) = (char *)v49 + 16;
    *((void *)v49 + 67) = 512;
    *((void *)v49 + 68) = 0;
    *((void *)v49 + 70) = 0;
    *((void *)v49 + 69) = 0;
    IPC::Encoder::encodeHeader(v49);
    int v85 = v49;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(v49, (uint64_t)v71);
    uint64_t v50 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v50 = &unk_1EE9FC7A8;
    v50[1] = a1;
    void v50[2] = a1;
    void v50[3] = v47;
    v50[4] = v42;
    uint64_t v51 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v84[0] = v50;
    v84[1] = v51;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v45 + 24) + 40))(v45 + 24, &v85, v84, 0);
    uint64_t v53 = v84[0];
    v84[0] = 0;
    id v14 = v68;
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    }
    uint64_t v54 = v85;
    int v85 = 0;
    if (v54)
    {
      IPC::Encoder::~Encoder(v54, v52);
      WTF::fastFree(v65, v66);
    }
    char v55 = v70;
    uint64_t v70 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v52);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    uint64_t v59 = v72;
    *a7 = v42;
    if (v59) {
      WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v59 + 16));
    }
  }
  else
  {
    uint64_t v56 = WTF::fastMalloc((WTF *)0x198);
    WebKit::WebExtensionAPIObject::WebExtensionAPIObject(v56, a1);
    *(_DWORD *)(v56 + 48) = 1;
    *(void *)(v56 + 56) = 0;
    *(void *)uint64_t v56 = &unk_1EE9FC660;
    *(void *)(v56 + 40) = &unk_1EE9FC690;
    *(unsigned char *)(v56 + 64) = 0;
    *(void *)(v56 + 72) = 0;
    *(void *)(v56 + 80) = 0;
    *(unsigned char *)(v56 + 88) = 0;
    uint64_t v57 = v81;
    if (v81) {
      *(_DWORD *)v81 += 2;
    }
    *(void *)(v56 + 96) = v57;
    *(void *)(v56 + 104) = 0;
    *(unsigned char *)(v56 + 112) = 0;
    *(unsigned char *)(v56 + 384) = 0;
    *(void *)(v56 + 392) = 0;
    *(void *)(v56 + 400) = 0;
    *(_DWORD *)(v56 + 48) = 2;
    uint64_t v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v58 = &unk_1EE9FC780;
    *((void *)v58 + 1) = v56;
    v71[0] = v58;
    WebKit::callAfterRandomDelay((uint64_t *)v71);
    if (v71[0]) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v71[0] + 8))(v71[0]);
    }
    *a7 = v56;
  }
  CFRelease(*(CFTypeRef *)(v36 + 8));
  char v61 = v80;
  __int16 v80 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v60);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75);
  if (v74)
  {
    long long v62 = v73;
    long long v73 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v15);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  uint64_t v63 = v81;
  uint64_t v81 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v15);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
LABEL_72:
  if (v83)
  {
    uint64_t v64 = v82;
    uint64_t v82 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v15);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
}

void sub_199297EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (*(_DWORD *)(v50 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  else {
    --*(_DWORD *)(v50 + 48);
  }
  if (a19) {
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(a19 + 16));
  }
  CFRelease(*(CFTypeRef *)(v51 + 8));
  if (a49)
  {
    if (*(_DWORD *)a49 == 2) {
      WTF::StringImpl::destroy(a49, v56);
    }
    else {
      *(_DWORD *)a49 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a12);
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v57);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  uint64_t v58 = *(WTF::StringImpl **)(v54 - 136);
  *(void *)(v54 - 136) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, v57);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  if (*(unsigned char *)(v54 - 120))
  {
    uint64_t v59 = *(WTF::StringImpl **)(v54 - 128);
    *(void *)(v54 - 128) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v57);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIRuntime::onMessage(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    unsigned __int8 v6 = 28;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992984D4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIRuntime::onConnect(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 25;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onInstalled(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    unsigned __int8 v6 = 27;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onStartup(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    unsigned __int8 v6 = 30;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 11);
    *((void *)this + 11) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 11);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onConnectExternal(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result)
  {
    unsigned __int8 v6 = 26;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 12);
    *((void *)this + 12) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 12);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onMessageExternal(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    unsigned __int8 v6 = 29;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 13);
    *((void *)this + 13) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 13);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 13);
  }
  return result;
}

void sub_199298B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebCore *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v26[0] = a4;
  v26[1] = a5;
  if (a2 == 1 && !*((void *)a1 + 18))
  {
    WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(a7);
    uint64_t v25 = 0;
  }
  else
  {
    if (a3) {
      uint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v11 = &stru_1EEA10550;
    }
    WebKit::parseJSON(v11, 1, 0);
    uint64_t v25 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();

    WebKit::toWebAPI(a6);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
    char v23 = *(unsigned char *)(a6 + 224);
    uint64_t v12 = *a7;
    *a7 = 0;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)uint64_t v13 = 1;
    id v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v14 = &unk_1EE9FC7D0;
    v14[1] = v12;
    *(void *)(v13 + 8) = v14;
    *(void *)(v13 + 16) = 0;
    *(unsigned char *)(v13 + 24) = 1;
    char v22 = 0;
    id v15 = [[_WKReplyCallbackAggregator alloc] initWithAggregator:v13];
    uint64_t v16 = v15;
    if (v15) {
      CFRetain(v15);
    }

    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x40);
    void *v17 = &unk_1EE9FC7F8;
    uint64_t v18 = v16;

    v17[1] = v18;
    v17[2] = v26;
    v17[3] = a6;
    v17[4] = &v23;
    v17[5] = &v25;
    v17[6] = &v24;
    v17[7] = &v22;
    uint64_t v21 = v17;
    uint64_t v19 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a2);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v21, v19);
    uint64_t v20 = v21;
    uint64_t v21 = 0;
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    if (!v22) {
      WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v13, 0, 1);
    }

    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>>::deref((_DWORD *)v13);
  }
}

void sub_199298DDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  int v5 = (uint64_t *)(a1 + 8);
  if (v6) {
    WTF::CompletionHandler<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v5, v7, a3);
  }
}

void sub_199298F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchRuntimeMessageEvent(WebCore *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (a2 == 1)
  {
    uint64_t v7 = *a3;
  }
  else
  {
    if (a2) {
      return;
    }
    uint64_t v7 = *a3;
    a4 = 0;
    a5 = 0;
  }
  WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(a1, a2, v7, a4, a5, a6, a7);
}

uint64_t WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(WebCore *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  v22[1] = a6;
  uint64_t v23 = a3;
  v22[0] = a5;
  char v21 = a2;
  if (a2 == 1 && !*((void *)a1 + 18))
  {
    uint64_t v20 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>::operator()(a8);
  }
  else
  {
    uint64_t v20 = 0;
    char v19 = *(unsigned char *)(a7 + 224);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x48);
    void *v13 = &unk_1EE9FC880;
    v13[1] = v22;
    void v13[2] = a7;
    void v13[3] = &v19;
    v13[4] = &v20;
    v13[5] = a1;
    v13[6] = &v21;
    v13[7] = &v23;
    v13[8] = a4;
    uint64_t v18 = v13;
    uint64_t v14 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a2);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v18, v14);
    id v15 = v18;
    uint64_t v18 = 0;
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t result = WTF::CompletionHandler<void ()(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>::operator()(a8);
  }
  if (v20) {
    return WTF::fastFree((WTF *)(v20 - 16), v17);
  }
  return result;
}

void sub_1992990BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199299190(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebCore *WebKit::WebExtensionContextProxy::dispatchRuntimeConnectEvent(WebCore *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  if (a2 != 1)
  {
    if (a2) {
      return result;
    }
    a5 = 0;
    a6 = 0;
  }
  return (WebCore *)WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(result, a2, a3, a4, a5, a6, a7, a8);
}

void WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent(uint64_t a1, int a2, void *a3)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  id v10 = 0;
  if (a2 == 2)
  {
    v14[0] = @"update";
    v13[0] = @"reason";
    v13[1] = @"previousVersion";
    if (*a3) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    v14[1] = v4;
    int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];
  }
  else
  {
    uint64_t v11 = @"reason";
    uint64_t v6 = @"install";
    if (a2 != 1) {
      uint64_t v6 = 0;
    }
    if (a2 == 3) {
      uint64_t v6 = @"browser_update";
    }
    uint64_t v4 = v6;
    uint64_t v12 = v4;
    int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  }
  id v10 = v5;

  uint64_t v7 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EE9FC8A8;
  *((void *)v7 + 1) = &v10;
  id v9 = v7;
  WebCore::mainThreadNormalWorld(v7);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v9);
  id v8 = v9;
  id v9 = 0;
  if (v8) {
    (*(void (**)(WebCore *))(*(void *)v8 + 8))(v8);
  }
}

void sub_199299374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(WebKit::WebExtensionContextProxy *this)
{
  uint64_t v2 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v2 = &unk_1EE9FC8D0;
  uint64_t v4 = (uint64_t)v2;
  WebCore::mainThreadNormalWorld(v2);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199299468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>>::deref(_DWORD *result)
{
  uint64_t v1 = (void **)result;
  if (*result == 1)
  {
    uint64_t v2 = (uint64_t *)(result + 2);
    if (v1[1]) {
      WTF::CompletionHandler<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v2, v1[2], *((unsigned __int8 *)v1 + 24));
    }

    uint64_t v4 = v1[1];
    v1[1] = 0;
    if (v4) {
      (*(void (**)(void *))(*(void *)v4 + 8))(v4);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v1, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

void sub_199299544(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  int v5 = *(void (**)(uint64_t, id, uint64_t))(*(void *)v4 + 16);
  id v6 = a2;
  v5(v4, v6, a3);
  id v8 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v8(v4);
}

void sub_19929963C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)v1 + 8);

  v4(v1);
  _Unwind_Resume(a1);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIRuntimeBase::reportError(NSString *,WebKit::WebExtensionCallbackHandler &)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC5B8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC5B8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v14 = *((void *)a2 + 3);
        if (v14)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
            unint64_t v12 = 0;
            uint64_t v22 = *(void *)a2;
            uint64_t v23 = *((void *)a2 + 1);
            uint64_t v24 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v13 = 0;
            if (v24 && v23)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              uint64_t v13 = *(void *)a2;
              unint64_t v12 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v25);
            int v8 = v26;
            if (v26)
            {
              long long v32 = v25;
              int v33 = 0;
              int v8 = 1;
            }
            else
            {
              v31[0] = 0;
            }
            int v11 = 0;
            char v34 = v8;
            if (!v8)
            {
LABEL_27:
              uint64_t v16 = *(void *)a2;
              uint64_t v17 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v18 = *((void *)a2 + 3);
              if (v18 && v17) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
              }
              v27[0] = 0;
              char v30 = 0;
              goto LABEL_29;
            }
          }
          else
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v25);
            int v10 = BYTE8(v25);
            if (BYTE8(v25))
            {
              *(void *)&long long v32 = v25;
              int v10 = 1;
              int v33 = 1;
            }
            else
            {
              v31[0] = 0;
            }
            char v34 = v10;
            int v11 = 1;
            if (!v10) {
              goto LABEL_27;
            }
          }
          v28[0] = 0;
          int v29 = -1;
          ((void (*)(long long *, unsigned char *, long long *))off_1EE9FC5E0[v11])(&v25, v28, &v32);
          int v29 = v11;
          char v30 = 1;
          if (!v34 || v33 == -1 || (((void (*)(long long *, long long *))off_1EE9FC5D0[v33])(&v25, &v32), v30))
          {
LABEL_21:
            WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, (uint64_t)v27);
            if (v30)
            {
              if (v29 != -1) {
                ((void (*)(unsigned char *, unsigned char *))off_1EE9FC5D0[v29])(v31, v28);
              }
            }
            return;
          }
LABEL_29:
          uint64_t v19 = *(void *)a2;
          uint64_t v20 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v21 = *((void *)a2 + 3);
          if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), !v30))
          {
            IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v2);
            return;
          }
          goto LABEL_21;
        }
        unint64_t v12 = v5;
        uint64_t v13 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v15 = *((void *)a2 + 3);
      if (v15 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
      }
      goto LABEL_27;
    }
  }
  uint64_t v9 = a1 + 8;

  IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v9);
}

void sub_199299B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,int a30,char a31)
{
  if (a22)
  {
    if (a20 != -1) {
      ((void (*)(__int16 *, uint64_t *))off_1EE9FC5D0[a20])(&a24, &a18);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[8] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FC5D0[v4])(&v1, v3);
  }
}

void sub_199299C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FC5D0[a16])(&a12, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE0EEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE0EEEEENS9_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE0EEEEENS9_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      if (*(void *)(a2 + 8)) {
        uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v5 = &stru_1EEA10550;
      }
      uint64_t v21 = (objc_object *)v5;
      WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
      goto LABEL_6;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    uint64_t v19 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

    _Unwind_Resume(v19);
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v14 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    uint64_t v21 = [MEMORY[0x1E4F1CA98] null];
    id v15 = WebKit::WebExtensionCallbackHandler::call(v14, v21);
LABEL_6:

    return;
  }
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v22);
  if (!v6)
  {
    uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    uint64_t v21 = [MEMORY[0x1E4F1CA98] null];
    id v17 = WebKit::WebExtensionCallbackHandler::call(v16, v21);
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  int v8 = *(WebKit ***)(a1 + 8);
  WebKit::toWindowObject(v8[3], *(const OpaqueJSContext **)(v7 + 88), v9);
  int v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
  int v11 = v10;
  if (!v10)
  {
    int v11 = [MEMORY[0x1E4F1CA98] null];
  }
  id v12 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)v8, v11);
  if (!v10) {

  }
  uint64_t v13 = *(const void **)(v7 + 8);

  CFRelease(v13);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC600;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC600;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        int v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_19929A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC628;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC628;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FC640[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_19929A3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FC640[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FC640[v2])(&v3, &v1);
}

void sub_19929A460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FC640[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    char v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    char v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);
  }
}

uint64_t WebKit::WebExtensionAPIPort::WebExtensionAPIPort(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD **a5)
{
  uint64_t v9 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject(a1, a2);
  *(_DWORD *)(v9 + 48) = 1;
  *(void *)(v9 + 56) = 0;
  *(void *)uint64_t v9 = &unk_1EE9FC660;
  *(void *)(v9 + 40) = &unk_1EE9FC690;
  *(unsigned char *)(v9 + 64) = a4;
  *(void *)(v9 + 72) = *(void *)(a3 + 2120);
  *(void *)(a1 + 80) = WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(unsigned char *)(a1 + 88) = 0;
  char v11 = *a5;
  if (*a5) {
    *v11 += 2;
  }
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)a1, v10);
  return a1;
}

void sub_19929A660(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v7 = *((void *)v2 + 50);
  *((void *)v2 + 50) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v7 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
  uint64_t v8 = *v5;
  uint64_t *v5 = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v8 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  id v10 = (const void *)*((void *)v2 + 13);
  *((void *)v2 + 13) = 0;
  if (v10) {
    CFRelease(v10);
  }
  char v11 = (WTF::StringImpl *)*((void *)v2 + 12);
  *((void *)v2 + 12) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v9);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

void WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(WebKit::WebExtensionAPIPort *this)
{
  WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(this);

  WTF::fastFree(v1, v2);
}

{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC660;
  *((void *)this + 5) = &unk_1EE9FC690;
  *((unsigned char *)this + 88) = 1;
  WebKit::WebExtensionAPIPort::remove(this);
  char v3 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 112, v2);
  char v6 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v5);

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v8);
}

void non-virtual thunk to'WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(WebKit::WebExtensionAPIPort *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionAPIPort::~WebExtensionAPIPort((WebKit::WebExtensionAPIPort *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 272))
  {
    char v3 = *(WTF::StringImpl **)(a1 + 232);
    *(void *)(a1 + 232) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 16);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1);
  }
  return a1;
}

void sub_19929A988(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(void *)(v2 + 400);
  *(void *)(v2 + 400) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *(void *)(v2 + 392);
  *(void *)(v2 + 392) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](v2 + 112, a2);
  uint64_t v7 = *(const void **)(v2 + 104);
  *(void *)(v2 + 104) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(WTF::StringImpl **)(v2 + 96);
  *(void *)(v2 + 96) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 56), v6);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIObject *)v2, v9);
  _Unwind_Resume(a1);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC6B8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v2 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v2 + 48);
    }
  }
  char v3 = (OpaqueJSContext *)a1[3];
  if (v3) {
    JSGlobalContextRelease(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC6B8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = (OpaqueJSContext *)*((void *)this + 3);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      uint64_t result = WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v6, v7);
      if (v8)
      {
        if (v7)
        {
          uint64_t result = (unsigned int *)v6;
          char v6 = 0;
          if (result)
          {
            if (*result == 2) {
              return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
            }
            else {
              *result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (unsigned int *)(a1 + 8);
    return WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v5, 0, 0);
  }
  return result;
}

void sub_19929AD48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(unsigned int *result, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *((void *)result + 3);
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    uint64_t v7 = *((void *)v3 + 2);
    uint64_t v10 = 0;
    char v8 = WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, (uint64_t)&v10);
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }

    uint64_t v9 = (unsigned int *)*((void *)v3 + 3);
    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(v9);
  }
  return result;
}

void sub_19929AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC6E0;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC6E0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FC640[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v3);
  }
}

void sub_19929B0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FC640[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FC640[v2])(&v3, &v1);
}

void sub_19929B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FC640[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    char v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    char v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC708;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v2 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v2 + 48);
    }
  }
  char v3 = (OpaqueJSContext *)a1[3];
  if (v3) {
    JSGlobalContextRelease(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC708;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = (OpaqueJSContext *)*((void *)this + 3);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      uint64_t result = WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(v2, (uint64_t)v6, v7);
      if (v8)
      {
        if (v7)
        {
          uint64_t result = (unsigned int *)v6;
          char v6 = 0;
          if (result)
          {
            if (*result == 2) {
              return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
            }
            else {
              *result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (unsigned int *)(a1 + 8);
    return WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(v5, 0, 0);
  }
  return result;
}

void sub_19929B4EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(unsigned int *result, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *((void *)result + 3);
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    uint64_t v7 = *((void *)v3 + 2);
    uint64_t v10 = 0;
    char v8 = WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, (uint64_t)&v10);
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }

    uint64_t v9 = (unsigned int *)*((void *)v3 + 3);
    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(v9);
  }
  return result;
}

void sub_19929B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[1];
  *a1 = &unk_1EE9FC730;
  a1[1] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FC730;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC758;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC758;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(*(JSObjectRef **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FC640[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(*(JSObjectRef **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(JSObjectRef **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(v3);
  }
}

void sub_19929B920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FC640[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(JSObjectRef *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FC640[v2])(&v3, &v1);
}

void sub_19929B9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FC640[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(JSObjectRef *this, uint64_t a2, int a3)
{
  if (a3)
  {
    id v4 = WebKit::WebExtensionCallbackHandler::call(this);
  }
  else
  {
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    char v8 = v5;
    WebKit::parseJSON(v5, 1, 0);
    char v6 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v7 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)this, v6);
  }
}

void sub_19929BA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FC780;
  a1[1] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v2 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v2 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FC780;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*(unsigned int **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC7A8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v2 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v2 + 48);
    }
  }
  uint64_t v3 = (OpaqueJSContext *)a1[3];
  if (v3) {
    JSGlobalContextRelease(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC7A8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = (OpaqueJSContext *)*((void *)this + 3);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v6);
    if (v8)
    {
      uint64_t result = WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(v2, (uint64_t)v6, v7);
      if (v8)
      {
        if (v7)
        {
          uint64_t result = (unsigned int *)v6;
          char v6 = 0;
          if (result)
          {
            if (*result == 2) {
              return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
            }
            else {
              *result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(v2, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (unsigned int *)(a1 + 8);
    return WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(v5, 0, 0);
  }
  return result;
}

void sub_19929BE50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(unsigned int *result, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *((void *)result + 3);
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    uint64_t v7 = *((void *)v3 + 2);
    uint64_t v10 = 0;
    char v8 = WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, (uint64_t)&v10);
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }

    uint64_t v9 = (unsigned int *)*((void *)v3 + 3);
    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(v9);
  }
  return result;
}

void sub_19929BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FC7D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FC7D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::call(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  id v5 = a2;
  char v6 = v5;
  if (a3)
  {
    WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(v4);
    uint64_t v10 = 0;
  }
  else
  {
    WebKit::encodeJSONString(v5, 1, 0);
    uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)[(__CFString *)v7 length] < 0x4000001)
    {
      if (!v7) {
        uint64_t v7 = &stru_1EEA10550;
      }
    }
    else
    {

      uint64_t v7 = &stru_1EEA10550;
    }
    MEMORY[0x19972EAD0](&v10, v7);
    WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(v4);
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_19929C1C8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  *a1 = &unk_1EE9FC7F8;
  a1[1] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FC7F8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  char v6 = *(uint64_t **)(a1 + 16);
  if (!*((unsigned char *)v6 + 8)) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8)
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    uint64_t v9 = *(void *)(*(void *)(v8 + 128) + 8);
    uint64_t v10 = *v6;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    if (v9 == v8 && v10 == -2) {
      goto LABEL_19;
    }
    uint64_t v7 = *(void *)(a2 + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  uint64_t v12 = *(void *)(v7 + 8);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14) {
    goto LABEL_18;
  }
  id v15 = *(void **)(*(void *)(v14 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v15 + 1368))(v15)) {
    goto LABEL_18;
  }
  uint64_t v16 = *(void *)(v15[2] + 8);
  if (!v16) {
    goto LABEL_18;
  }
  CFRetain(*(CFTypeRef *)(v16 - 8));
  uint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = *v6;
  CFRelease(*(CFTypeRef *)(v16 - 8));
  if (v17 != a2 || v18 != -2)
  {
LABEL_18:
    if (*(void *)(a2 + 80) != *v6) {
      return;
    }
  }
LABEL_19:
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v21 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 24) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v21 + 1368))(v21);
  uint64_t v22 = *(void *)(v21[2] + 8);
  if (v22) {
    uint64_t v23 = v22 - 16;
  }
  else {
    uint64_t v23 = 0;
  }
  if (*(void *)(v20 + 216) != *(void *)(v23 + 2120))
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    if (**(unsigned char **)(a1 + 32) == 3)
    {
      uint64_t v24 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      uint64_t v25 = WebKit::WebExtensionAPIRuntime::onMessageExternal(v24);
    }
    else
    {
      unsigned __int8 v26 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      uint64_t v25 = WebKit::WebExtensionAPIRuntime::onMessage(v26);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v44, (unsigned int *)(v25 + 72));
    if (HIDWORD(v45))
    {
      uint64_t v28 = v44;
      uint64_t v29 = MEMORY[0x1E4F143A8];
      uint64_t v30 = 8 * HIDWORD(v45);
      do
      {
        uint64_t v31 = *v28;
        long long v32 = **(objc_object ***)(a1 + 40);
        int v33 = **(objc_object ***)(a1 + 48);
        aBlock[0] = v29;
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS2_33SupportsObjectIdentifierNullStateE1EEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke;
        aBlock[3] = &__block_descriptor_40_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE_e17_v16__0__JSValue_8l;
        WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(&v43, *(id *)(a1 + 8));
        char v34 = (objc_object *)_Block_copy(aBlock);
        uint64_t v35 = WebKit::WebExtensionCallbackHandler::call(v31, v32, v33, v34);

        objc_opt_class();
        uint64_t v36 = WTF::dynamic_objc_cast<NSNumber>(v35);
        LODWORD(v32) = [v36 BOOLValue];

        if (v32)
        {
          **(unsigned char **)(a1 + 56) = 1;
        }
        else
        {
          objc_opt_class();
          uint64_t v37 = WTF::dynamic_objc_cast<JSValue>(v35);
          if ([v37 _isThenable])
          {
            **(unsigned char **)(a1 + 56) = 1;
            v40[0] = MEMORY[0x1E4F143A8];
            v40[1] = 3321888768;
            void v40[2] = ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS2_33SupportsObjectIdentifierNullStateE1EEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke_143;
            void v40[3] = &__block_descriptor_40_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE_e20_v24__0__JSValue_8_16l;
            WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(&cf, *(id *)(a1 + 8));
            [v37 _awaitThenableResolutionWithCompletionHandler:v40];
            CFTypeRef v38 = cf;
            CFTypeRef cf = 0;
            if (v38) {
              CFRelease(v38);
            }
          }
        }
        CFTypeRef v39 = v43;
        CFTypeRef v43 = 0;
        if (v39) {
          CFRelease(v39);
        }
        ++v28;
        v30 -= 8;
      }
      while (v30);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v27);
  }
}

void sub_19929C688(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20,char a21)
{
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a2[3];
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
      }
    }
    else
    {
      WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    id v5 = *(WebKit::WebExtensionCallbackHandler ***)a2;
    uint64_t v6 = a1[3];
    if (v6)
    {
      uint64_t v7 = *(WebKit::WebExtensionCallbackHandler ***)a1;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v5;
        if (*v5) {
          ++*(_DWORD *)v9;
        }
        uint64_t v10 = *v7;
        __CFString *v7 = v9;
        if (v10) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v10);
        }
        ++v5;
        ++v7;
        v8 -= 8;
      }
      while (v8);
      id v5 = *(WebKit::WebExtensionCallbackHandler ***)a2;
      unsigned int v11 = a1[3];
    }
    else
    {
      unsigned int v11 = 0;
    }
    uint64_t v12 = a2[3];
    if (v11 != v12)
    {
      uint64_t v13 = (WebKit::WebExtensionCallbackHandler **)(*(void *)a1 + 8 * v11);
      uint64_t v14 = &v5[v11];
      uint64_t v15 = 8 * v12 - 8 * v11;
      do
      {
        uint64_t v16 = *v14;
        if (*v14) {
          ++*(_DWORD *)v16;
        }
        *v13++ = v16;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    a1[3] = v12;
  }
  return a1;
}

void ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS2_33SupportsObjectIdentifierNullStateE1EEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v3);
  uint64_t v4 = [(id)objc_claimAutoreleasedReturnValue() aggregator];
  WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v4, v5, 0);
}

void sub_19929C87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE(uint64_t a1, uint64_t a2)
{
  return WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr((void *)(a1 + 32), *(id *)(a2 + 32));
}

void *WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(void *a1, id a2)
{
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(a2);
  objc_claimAutoreleasedReturnValue();
  id v4 = a2;
  id v5 = v4;
  *a1 = v4;
  if (v4) {
    CFRetain(v4);
  }

  return a1;
}

void sub_19929C8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS2_33SupportsObjectIdentifierNullStateE1EEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke_143(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v6);
    uint64_t v7 = [(id)objc_claimAutoreleasedReturnValue() aggregator];
    WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v7, v8, 0);
  }
}

void sub_19929C9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebFrame *a2, WebKit::WebExtensionAPINamespace *a3)
{
  id v4 = *(WebCore **)(a1 + 40);
  id v5 = *(uint64_t **)(a1 + 8);
  if (!*((unsigned char *)v5 + 8)) {
    goto LABEL_19;
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (!v6) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7)
  {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    uint64_t v8 = *(void *)(*(void *)(v7 + 128) + 8);
    uint64_t v9 = *v5;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
    if (v8 == v7 && v9 == -2) {
      goto LABEL_19;
    }
    uint64_t v6 = *((void *)a2 + 3);
    if (!v6) {
      goto LABEL_18;
    }
  }
  uint64_t v11 = *(void *)(v6 + 8);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void **)(*(void *)(v13 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v14 + 1368))(v14)) {
    goto LABEL_18;
  }
  uint64_t v15 = *(void *)(v14[2] + 8);
  if (!v15) {
    goto LABEL_18;
  }
  CFRetain(*(CFTypeRef *)(v15 - 8));
  uint64_t v16 = *(WebKit::WebFrame **)(v15 + 72);
  uint64_t v17 = *v5;
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v16 != a2 || v17 != -2)
  {
LABEL_18:
    if (*((void *)a2 + 10) != *v5) {
      return;
    }
  }
LABEL_19:
  uint64_t v19 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v19 + 1368))(v19);
  uint64_t v20 = *(void *)(v19[2] + 8);
  if (v20) {
    uint64_t v21 = v20 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v61 = *(void *)(v21 + 2120);
  if (*(void *)(*(void *)(a1 + 16) + 216) != v61)
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    if (**(unsigned char **)(a1 + 24) == 3)
    {
      uint64_t v22 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      uint64_t v23 = WebKit::WebExtensionAPIRuntime::onConnectExternal(v22);
    }
    else
    {
      uint64_t v24 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      uint64_t v23 = WebKit::WebExtensionAPIRuntime::onConnect(v24);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v59, (unsigned int *)(v23 + 72));
    int v26 = HIDWORD(v60);
    if (HIDWORD(v60))
    {
      uint64_t v27 = *(uint64_t **)(a1 + 32);
      int v62 = 0;
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v27, &v61, &v62, (uint64_t)v58);
      *(_DWORD *)(v58[0] + 8) += v26;
      uint64_t v28 = (WebCore::DOMWrapperWorld *)WebKit::WebExtensionContextProxy::toDOMWrapperWorld(v4, **(unsigned __int8 **)(a1 + 48));
      ctx = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a2, v28);
      if (HIDWORD(v60))
      {
        uint64_t v29 = v59;
        uint64_t v30 = 8 * HIDWORD(v60);
        do
        {
          uint64_t v31 = *((void *)a2 + 3);
          if (v31
            && (uint64_t v32 = *(void *)(v31 + 8)) != 0
            && (uint64_t v33 = *(void *)(v32 + 24)) != 0
            && (uint64_t v34 = *(void *)(v33 + 8)) != 0
            && (uint64_t v35 = *(void **)(*(void *)(v34 + 48) + 16),
                ((*(uint64_t (**)(void *))(*v35 + 1368))(v35) & 1) == 0))
          {
            uint64_t v36 = *(void *)(v35[2] + 8);
            if (v36) {
              uint64_t v37 = v36 - 16;
            }
            else {
              uint64_t v37 = 0;
            }
          }
          else
          {
            uint64_t v37 = 0;
          }
          CFTypeRef v38 = *(uint64_t **)(a1 + 56);
          CFTypeRef v39 = *(_DWORD ***)(a1 + 64);
          uint64_t v41 = *(void *)(a1 + 16);
          uint64_t v40 = *(unsigned char **)(a1 + 24);
          uint64_t v42 = WTF::fastMalloc((WTF *)0x198);
          LOBYTE(v40) = *v40;
          uint64_t v43 = *v38;
          WebKit::WebExtensionAPIObject::WebExtensionAPIObject(v42, (uint64_t)a3);
          *(_DWORD *)(v42 + 48) = 1;
          *(void *)(v42 + 56) = 0;
          *(void *)uint64_t v42 = &unk_1EE9FC660;
          *(void *)(v42 + 40) = &unk_1EE9FC690;
          *(unsigned char *)(v42 + 64) = (_BYTE)v40;
          *(void *)(v42 + 72) = *(void *)(v37 + 2120);
          *(void *)(v42 + 80) = v43;
          *(unsigned char *)(v42 + 88) = 0;
          uint64_t v44 = *v39;
          if (*v39) {
            *v44 += 2;
          }
          *(unsigned char *)(v42 + 112) = 0;
          *(void *)(v42 + 96) = v44;
          *(void *)(v42 + 104) = 0;
          *(unsigned char *)(v42 + 120) = 0;
          if (*(unsigned char *)(v41 + 8))
          {
            uint64_t v45 = *(_DWORD **)v41;
            if (*(void *)v41) {
              *v45 += 2;
            }
            *(void *)(v42 + 112) = v45;
            *(unsigned char *)(v42 + 120) = 1;
          }
          std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v42 + 128), v41 + 16);
          long long v47 = *(_OWORD *)(v41 + 200);
          *(_OWORD *)(v42 + 321) = *(_OWORD *)(v41 + 209);
          *(_OWORD *)(v42 + 312) = v47;
          uint64_t v48 = *(_DWORD **)(v41 + 232);
          if (v48) {
            *v48 += 2;
          }
          *(void *)(v42 + 344) = v48;
          long long v49 = *(_OWORD *)(v41 + 256);
          *(_OWORD *)(v42 + 352) = *(_OWORD *)(v41 + 240);
          *(_OWORD *)(v42 + 368) = v49;
          *(unsigned char *)(v42 + 384) = 1;
          *(void *)(v42 + 392) = 0;
          *(void *)(v42 + 400) = 0;
          WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)v42, v46);
          uint64_t v50 = *v29;
          uint64_t v51 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(ctx, (void *)(v42 + 40));
          if (v51)
          {
            char v52 = (void *)MEMORY[0x1E4F30938];
            uint64_t v53 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(ctx)];
            uint64_t v51 = [v52 valueWithJSValueRef:v51 inContext:v53];
          }
          id v54 = WebKit::WebExtensionCallbackHandler::call(v50, v51);

          if (*(_DWORD *)(v42 + 48) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v42 + 40) + 8))(v42 + 40);
          }
          else {
            --*(_DWORD *)(v42 + 48);
          }
          ++v29;
          v30 -= 8;
        }
        while (v30);
      }
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v25);
  }
}

void sub_19929CE84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters*>((uint64_t)a1, a2);
    a1[176] = 1;
  }
  return a1;
}

void sub_19929D048(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(unsigned char *)(result + 16) = 0;
    *(unsigned char *)(result + 56) = 0;
    if (*(unsigned char *)(a2 + 56))
    {
      uint64_t v2 = *(_DWORD **)(a2 + 16);
      if (v2) {
        *v2 += 2;
      }
      *(void *)(result + 16) = v2;
      long long v3 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(result + 24) = v3;
      *(unsigned char *)(result + 56) = 1;
    }
    *(unsigned char *)(result + 64) = 0;
    *(unsigned char *)(result + 72) = 0;
    if (*(unsigned char *)(a2 + 72))
    {
      id v4 = *(_DWORD **)(a2 + 64);
      if (v4) {
        *v4 += 2;
      }
      *(void *)(result + 64) = v4;
      *(unsigned char *)(result + 72) = 1;
    }
    long long v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(result + 96) = v5;
    long long v6 = *(_OWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 128);
    long long v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(result + 154) = *(_OWORD *)(a2 + 154);
    *(_OWORD *)(result + 128) = v7;
    *(_OWORD *)(result + 144) = v8;
    *(_OWORD *)(result + 112) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent(WebKit::WebExtensionContextInstallReason,WTF::String)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  long long v3 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(this);
  id v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIRuntime::onInstalled(v3);
  long long v5 = **(objc_object ***)(a1 + 8);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(void)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(int a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v2 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(this);
  long long v3 = (unsigned int *)WebKit::WebExtensionAPIRuntime::onStartup(v2);

  return WebKit::WebExtensionAPIEvent::invokeListeners(v3);
}

id WebKit::toWebAPI(uint64_t *a1, void *a2)
{
  long long v5 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*((unsigned int *)a1 + 3)];
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned int *)a1 + 3);
  if (a2)
  {
    if (v7)
    {
      uint64_t v8 = 48 * v7;
      uint64_t v9 = (unsigned char *)(v6 + 24);
      do
      {
        if (*v9
          && (!*((void *)v9 - 1)
            ? (uint64_t v10 = &stru_1EEA10550)
            : (uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *()),
              WebKit::parseJSON(v10, 1, 0),
              uint64_t v11 = objc_claimAutoreleasedReturnValue(),
              v10,
              v11))
        {
          int v12 = 0;
          uint64_t v13 = v11;
        }
        else
        {
          a2 = [MEMORY[0x1E4F1CA98] null];
          uint64_t v11 = 0;
          int v12 = 1;
          uint64_t v13 = a2;
        }
        [v5 addObject:v13];
        if (v12) {

        }
        v9 += 48;
        v8 -= 48;
      }
      while (v8);
    }
  }
  else if (v7)
  {
    uint64_t v14 = 48 * v7;
    uint64_t v15 = v6 + 24;
    do
    {
      uint64_t v16 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:3];
      if (*(unsigned char *)v15
        && (!*(void *)(v15 - 8)
          ? (uint64_t v17 = &stru_1EEA10550)
          : (uint64_t v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *()),
            WebKit::parseJSON(v17, 1, 0),
            uint64_t v18 = objc_claimAutoreleasedReturnValue(),
            v17,
            v18))
      {
        int v19 = 0;
        uint64_t v20 = v18;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v2 = [MEMORY[0x1E4F1CA98] null];
        int v19 = 1;
        uint64_t v20 = v2;
      }
      [v16 setObject:v20 forKeyedSubscript:@"result"];
      if (v19) {

      }
      if (*(unsigned char *)(v15 + 16))
      {
        unint64_t v21 = *(void *)(v15 + 8);
        if (v21 == -3)
        {
          double v22 = -1.0;
        }
        else
        {
          double v22 = 0.0;
          if (v21 != -2) {
            double v22 = (double)v21;
          }
        }
        uint64_t v23 = [NSNumber numberWithDouble:v22];
        [v16 setObject:v23 forKeyedSubscript:@"frameId"];
      }
      if (*(unsigned char *)(v15 - 16))
      {
        if (*(void *)(v15 - 24)) {
          uint64_t v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v24 = &stru_1EEA10550;
        }
        [v16 setObject:v24 forKeyedSubscript:@"error"];
      }
      uint64_t v25 = (void *)[v16 copy];
      [v5 addObject:v25];

      v15 += 48;
      v14 -= 48;
    }
    while (v14);
  }
  int v26 = (void *)[v5 copy];

  return v26;
}

void sub_19929D444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19929D7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::executeScript(uint64_t a1, void *a2, char **a3, void *a4)
{
  v110[1] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((_MergedGlobals_122 & 1) == 0)
  {
    v110[0] = @"target";
    qword_1EB35A088 = [MEMORY[0x1E4F1C978] arrayWithObjects:v110 count:1];
    _MergedGlobals_122 = 1;
  }
  if ((byte_1EB35A079 & 1) == 0)
  {
    long long v102 = @"args";
    uint64_t v84 = objc_opt_class();
    long long v103 = @"arguments";
    uint64_t v85 = objc_opt_class();
    long long v104 = @"files";
    uint64_t v109 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v109, 1, v84, v85);
    uint64_t v82 = (__CFString *)objc_claimAutoreleasedReturnValue();
    uint64_t v86 = v82;
    long long v105 = @"func";
    uint64_t v87 = objc_opt_class();
    uint64_t v106 = @"function";
    v88[0] = objc_opt_class();
    char v107 = @"target";
    v88[1] = objc_opt_class();
    v108 = @"world";
    uint64_t v89 = objc_opt_class();
    qword_1EB35A090 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v84 forKeys:&v102 count:7];

    byte_1EB35A079 = 1;
  }
  if (!WebKit::validateDictionary(v7, @"details", (void *)qword_1EB35A088, (void *)qword_1EB35A090, a4)) {
    goto LABEL_54;
  }
  uint64_t v8 = [v7 objectForKeyedSubscript:@"target"];
  char v9 = WebKit::WebExtensionAPIScripting::validateTarget(v8, a4);

  if ((v9 & 1) == 0) {
    goto LABEL_54;
  }
  uint64_t v10 = [v7 objectForKeyedSubscript:@"args"];
  if (v10
    || ([v7 objectForKeyedSubscript:@"arguments"],
        (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v11 = [v7 objectForKeyedSubscript:@"args"];
    int v12 = @"arguments";
    if (v11) {
      int v12 = @"args";
    }
    uint64_t v13 = v12;

    if ((WebKit::isValidJSONObject(v10, 1) & 1) == 0)
    {
      WebKit::toErrorString(0, v13, &cfstr_ItIsNotJsonSer.isa, v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_54:
      goto LABEL_55;
    }
  }
  uint64_t v15 = [v7 objectForKeyedSubscript:@"function"];
  if (v15)
  {
    uint64_t v16 = [v7 objectForKeyedSubscript:@"func"];
    BOOL v17 = v16 == 0;

    if (!v17)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_2.isa, v18);
      id v19 = (id)objc_claimAutoreleasedReturnValue();
LABEL_53:
      *a4 = v19;
      goto LABEL_54;
    }
  }
  uint64_t v20 = [v7 objectForKeyedSubscript:@"arguments"];
  if (v20)
  {
    unint64_t v21 = [v7 objectForKeyedSubscript:@"args"];
    BOOL v22 = v21 == 0;

    if (!v22)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_3.isa, v23);
      id v19 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_53;
    }
  }
  uint64_t v24 = [v7 objectForKeyedSubscript:@"function"];
  if (v24)
  {
    BOOL v25 = 1;
  }
  else
  {
    int v26 = [v7 objectForKeyedSubscript:@"func"];
    BOOL v25 = v26 != 0;
  }
  uint64_t v27 = [v7 objectForKeyedSubscript:@"files"];
  if (v27) {
    BOOL v28 = v25;
  }
  else {
    BOOL v28 = 0;
  }

  if (v28)
  {
    WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_4.isa, v29);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_53;
  }
  if (!v25)
  {
    uint64_t v30 = [v7 objectForKeyedSubscript:@"files"];
    BOOL v31 = v30 == 0;

    if (v31)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItMustSpecifyE_3.isa, v32);
      id v19 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_53;
    }
  }
  uint64_t v33 = [v7 objectForKeyedSubscript:@"args"];
  if (!v33)
  {
    uint64_t v58 = [v7 objectForKeyedSubscript:@"arguments"];
    BOOL v59 = v58 == 0;

    if (v59 || v25) {
      goto LABEL_32;
    }
LABEL_51:
    WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItMustSpecifyB.isa, v34);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_53;
  }

  if (!v25) {
    goto LABEL_51;
  }
LABEL_32:
  uint64_t v35 = [v7 objectForKeyedSubscript:@"files"];
  uint64_t v36 = v35;
  if (v35 && ![v35 count])
  {
    WebKit::toErrorString(0, &cfstr_Files_0.isa, &cfstr_AtLeastOneFile.isa, v37);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_54;
  }

  int hasValidExecutionWorld = WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(v7, a4);
  if (!hasValidExecutionWorld)
  {
LABEL_55:
    id v45 = v7;
    goto LABEL_56;
  }
  CFTypeRef v39 = [v7 objectForKeyedSubscript:@"func"];
  if (v39
    || ([v7 objectForKeyedSubscript:@"function"],
        (CFTypeRef v39 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v100 = @"function";
    uint64_t v40 = [v39 toString];
    int v101 = v40;
    uint64_t v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v101 forKeys:&v100 count:1];
    uint64_t v43 = WebKit::mergeDictionariesAndSetValues((WebKit *)v7, v41, v42);

    id v7 = (id)v43;
  }
  LOBYTE(v84) = 0;
  LOBYTE(v85) = 0;
  LOBYTE(v86) = 0;
  LOBYTE(v87) = 0;
  LOBYTE(v88[0]) = 0;
  LOBYTE(v89) = 0;
  LOBYTE(v90) = 0;
  char v92 = 0;
  LOBYTE(v93) = 0;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  __int16 v99 = 257;
  uint64_t v44 = objc_msgSend(v7, "objectForKeyedSubscript:", @"target", v84, v85);
  WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v44, (uint64_t)&v84, a4);

  id v45 = v7;
  uint64_t v46 = [v45 objectForKeyedSubscript:@"function"];
  BOOL v47 = v46 == 0;

  if (!v47)
  {
    v110[0] = [v45 objectForKeyedSubscript:@"function"];
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v97, v110);
  }
  uint64_t v48 = [v45 objectForKeyedSubscript:@"args"];
  if (!v48)
  {
    uint64_t v48 = [v45 objectForKeyedSubscript:@"arguments"];
    if (!v48) {
      goto LABEL_64;
    }
  }
  long long v49 = [v45 objectForKeyedSubscript:@"args"];
  if (v49) {
    uint64_t v50 = @"args";
  }
  else {
    uint64_t v50 = @"arguments";
  }
  uint64_t v51 = v50;

  uint64_t v53 = WebKit::encodeJSONData(v48, 1, 0);
  if (v53)
  {
    id v54 = (id *)WTF::RetainPtr<NSData>::RetainPtr(&v109, v53);
    API::Data::createWithoutCopying(v54, (WebKit **)&v102);
    char v55 = v102;
    long long v102 = 0;
    if ((_BYTE)v87)
    {
      uint64_t v56 = v86;
      uint64_t v86 = v55;
      if (v56)
      {
        CFRelease((CFTypeRef)v56->info);
        uint64_t v57 = v102;
        long long v102 = 0;
        if (v57) {
          CFRelease((CFTypeRef)v57->info);
        }
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v86 = v55;
      LOBYTE(v87) = 1;
    }
    long long v102 = 0;
LABEL_61:
    uint64_t v60 = (const void *)v109;
    uint64_t v109 = 0;
    if (v60) {
      CFRelease(v60);
    }

LABEL_64:
    uint64_t v61 = [v45 objectForKeyedSubscript:@"files"];
    int v62 = v61;
    if (v61)
    {
      WTF::makeVector<WTF::String>(v61, (uint64_t)&v102);
      std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v88, &v102);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v102, v63);
    }

    uint64_t v64 = [v45 objectForKeyedSubscript:@"world"];
    int v65 = [v64 isEqualToString:@"MAIN"];

    if (v65) {
      LOBYTE(v99) = 0;
    }
    goto LABEL_68;
  }
  WebKit::toErrorString(0, &v51->isa, &cfstr_ItIsNotJsonSer.isa, v52);
  *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_68:
  if (!*a4)
  {
    {
      char v83 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v83);
    }
    uint64_t v67 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    id v68 = *a3;
    *a3 = 0;
    uint64_t v69 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v70 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v70 = 1684;
    *((void *)v70 + 1) = v69;
    *((void *)v70 + 66) = (char *)v70 + 16;
    *((void *)v70 + 67) = 512;
    *((void *)v70 + 68) = 0;
    *((void *)v70 + 70) = 0;
    *((void *)v70 + 69) = 0;
    IPC::Encoder::encodeHeader(v70);
    v110[0] = v70;
    IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(v70, &v84);
    char v71 = (__CFString *)WTF::fastMalloc((WTF *)0x18);
    v71->isa = &unk_1EE9FC8F8;
    v71->info = a1;
    v71->CFDataRef data = v68;
    uint64_t v72 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    long long v102 = v71;
    long long v103 = (__CFString *)v72;
    (*(void (**)(uint64_t, id *, __CFString **, void))(*(void *)(v67 + 24) + 40))(v67 + 24, v110, &v102, 0);
    long long v73 = v102;
    long long v102 = 0;
    if (v73) {
      (*((void (**)(__CFString *))v73->isa + 1))(v73);
    }
    char v74 = (IPC::Encoder *)v110[0];
    v110[0] = 0;
    if (v74)
    {
      IPC::Encoder::~Encoder(v74, v66);
      WTF::fastFree(v80, v81);
    }
  }
  if (v98)
  {
    uint64_t v75 = v97;
    unint64_t v97 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v66);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  if (v96)
  {
    uint64_t v76 = v95;
    v95 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v66);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  if (v94)
  {
    char v77 = v93;
    v93 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v66);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  if (v92)
  {
    uint64_t v78 = v90;
    if (v90)
    {
      uint64_t v90 = 0;
      int v91 = 0;
      WTF::fastFree(v78, v66);
    }
  }
  if ((_BYTE)v89) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v66);
  }
  if ((_BYTE)v87)
  {
    char v79 = v86;
    uint64_t v86 = 0;
    if (v79) {
      CFRelease((CFTypeRef)v79->info);
    }
  }
LABEL_56:
}

void sub_19929E2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(void *a1, uint64_t a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = [v5 objectForKeyedSubscript:@"tabId"];
  [v6 doubleValue];
  double v9 = v8;
  if (v8 == -1.0)
  {
    unint64_t v10 = -2;
  }
  else
  {
    BOOL v17 = (v8 >= 0.0 && ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(void *)&v8 - 1) <= 0xFFFFFFFFFFFFELL)
       && v8 < 1.84467441e19;
    if (!v17 || modf(v8, (long double *)&__y) != 0.0)
    {
      WebKit::toErrorString(0, &cfstr_Tabid.isa, &cfstr_IsNotATabIdent.isa, v7, v6);
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
    unint64_t v10 = (unint64_t)v9;
    if ((unint64_t)v9 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19929EAC8);
    }
    if (v10 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v10 = -2;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v11 = WebKit::objectForKey<NSNumber>(v5, @"allFrames");
  if (([v11 BOOLValue] & 1) == 0)
  {

LABEL_21:
    uint64_t v18 = [v5 objectForKeyedSubscript:@"frameIds"];
    id v19 = v18;
    if (v18)
    {
      long double __y = 0;
      uint64_t v47 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v20 = v18;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v42 objects:v50 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v43;
        do
        {
          uint64_t v23 = 0;
          do
          {
            if (*(void *)v43 != v22) {
              objc_enumerationMutation(v20);
            }
            uint64_t v24 = *(void **)(*((void *)&v42 + 1) + 8 * v23);
            [v24 doubleValue];
            double v27 = v26;
            if (v26 == 0.0)
            {
              unint64_t v28 = -256;
              uint64_t v29 = 1;
              LOBYTE(v30) = -2;
            }
            else if (v26 == -1.0)
            {
              unint64_t v28 = -256;
              uint64_t v29 = 1;
              LOBYTE(v30) = -3;
            }
            else
            {
              BOOL v33 = (v26 >= 0.0 && ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
                  || (unint64_t)(*(void *)&v26 - 1) <= 0xFFFFFFFFFFFFELL)
                 && v26 < 1.84467441e19;
              if (v33 && modf(v26, &v48) == 0.0)
              {
                unint64_t v30 = (unint64_t)v27;
                if ((unint64_t)v27 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19929EAA8);
                }
                unint64_t v28 = v30 & 0xFFFFFFFFFFFFFF00;
                uint64_t v29 = 1;
              }
              else
              {
                uint64_t v29 = 0;
                LOBYTE(v30) = 0;
                unint64_t v28 = 0;
              }
            }
            unint64_t v34 = v28 & 0xFFFFFFFFFFFFFF00 | v30;
            v49[0] = v34;
            v49[1] = v29;
            if (!v29 || v34 == -3)
            {
              WebKit::toErrorString(0, &cfstr_Frameids.isa, &cfstr_IsNotAFrameIde.isa, v25, v24);
              *a3 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_59;
            }
            if (HIDWORD(v47) == v47)
            {
              uint64_t v35 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__y, HIDWORD(v47) + 1, (unint64_t)v49);
              *((void *)__y + HIDWORD(v47)) = *v35;
            }
            else
            {
              *((void *)__y + HIDWORD(v47)) = v34;
            }
            ++HIDWORD(v47);
            ++v23;
          }
          while (v21 != v23);
          uint64_t v36 = [v20 countByEnumeratingWithState:&v42 objects:v50 count:16];
          uint64_t v21 = v36;
        }
        while (v36);
      }

      std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &__y);
    }
    else
    {
      CFTypeRef v38 = [v5 objectForKeyedSubscript:@"allFrames"];
      objc_opt_class();
      CFTypeRef v39 = WTF::dynamic_objc_cast<NSNumber>(v38);

      if (v39)
      {
        char v40 = [v39 BOOLValue];

        if (v40)
        {
LABEL_61:

          goto LABEL_62;
        }
      }
      v49[0] = -2;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&__y, v49, 1uLL);
      std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &__y);
    }
LABEL_59:
    uint64_t v41 = __y;
    if (__y)
    {
      long double __y = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v41, v37);
    }
    goto LABEL_61;
  }
  int v12 = [v5 objectForKeyedSubscript:@"frameIds"];

  if (!v12) {
    goto LABEL_21;
  }
  WebKit::toErrorString(0, &cfstr_Target.isa, &cfstr_ItCannotSpecif_5.isa, v13);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:
  *a3 = v14;
LABEL_62:
}

void sub_19929EAD0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  if (a20) {
    WTF::fastFree(a20, a2);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::insertCSS(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateCSS(v7, a4))
  {
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    char v29 = 0;
    v30[0] = 0;
    char v31 = 0;
    LOBYTE(v32) = 0;
    char v34 = 0;
    LOBYTE(v35) = 0;
    char v36 = 0;
    LOBYTE(v37) = 0;
    char v38 = 0;
    LOBYTE(v39) = 0;
    char v40 = 0;
    __int16 v41 = 257;
    long double v8 = objc_msgSend(v7, "objectForKeyedSubscript:", @"target", v26, v27);
    WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v8, (uint64_t)&v26, a4);

    WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(v7, (uint64_t)&v26);
    if (!*a4)
    {
      {
        BOOL v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v25);
      }
      uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
      ++*(_DWORD *)(a1 + 48);
      uint64_t v11 = *a3;
      *a3 = 0;
      uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v13 = 1686;
      *((void *)v13 + 1) = v12;
      *((void *)v13 + 66) = (char *)v13 + 16;
      *((void *)v13 + 67) = 512;
      *((void *)v13 + 68) = 0;
      *((void *)v13 + 70) = 0;
      *((void *)v13 + 69) = 0;
      IPC::Encoder::encodeHeader(v13);
      long long v43 = v13;
      IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(v13, &v26);
      id v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v14 = &unk_1EE9FC940;
      v14[1] = a1;
      void v14[2] = v11;
      uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v42[0] = v14;
      v42[1] = v15;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v43, v42, 0);
      uint64_t v16 = v42[0];
      v42[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      BOOL v17 = v43;
      long long v43 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v9);
        WTF::fastFree(v23, v24);
      }
    }
    if (v40)
    {
      uint64_t v18 = v39;
      CFTypeRef v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    if (v38)
    {
      id v19 = v37;
      uint64_t v37 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    if (v36)
    {
      id v20 = v35;
      uint64_t v35 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (v34)
    {
      uint64_t v21 = v32;
      if (v32)
      {
        uint64_t v32 = 0;
        int v33 = 0;
        WTF::fastFree(v21, v9);
      }
    }
    if (v31) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v9);
    }
    if (v29)
    {
      uint64_t v22 = v28;
      uint64_t v28 = 0;
      if (v22) {
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
    }
  }
}

void sub_19929EE74(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25)
{
  uint64_t v29 = *(void *)(v27 - 88);
  *(void *)(v27 - 88) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  unint64_t v30 = *(IPC::Encoder **)(v27 - 72);
  *(void *)(v27 - 72) = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, a2);
    WTF::fastFree(v31, v32);
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19 && a16) {
    WTF::fastFree(a16, a2);
  }
  if (a15) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, a2);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(*(CFTypeRef *)(a11 + 8));
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateCSS(void *a1, void *a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((byte_1EB35A07C & 1) == 0)
  {
    v24[0] = @"target";
    qword_1EB35A0A8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:1];
    byte_1EB35A07C = 1;
  }
  if ((byte_1EB35A07D & 1) == 0)
  {
    v22[0] = @"css";
    v23[0] = objc_opt_class();
    v22[1] = @"files";
    uint64_t v21 = objc_opt_class();
    id v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:1];
    v23[1] = v20;
    void v22[2] = @"origin";
    void v23[2] = objc_opt_class();
    v22[3] = @"target";
    void v23[3] = objc_opt_class();
    qword_1EB35A0B0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:4];

    byte_1EB35A07D = 1;
  }
  if (!WebKit::validateDictionary(v3, @"details", (void *)qword_1EB35A0A8, (void *)qword_1EB35A0B0, a2)
    || ([v3 objectForKeyedSubscript:@"target"],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = WebKit::WebExtensionAPIScripting::validateTarget(v4, a2),
        v4,
        (v5 & 1) == 0))
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = [v3 objectForKeyedSubscript:@"css"];
  if (v6)
  {
    id v7 = [v3 objectForKeyedSubscript:@"files"];
    BOOL v8 = v7 == 0;

    if (!v8)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_6.isa, v9);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:
      uint64_t v11 = 0;
      *a2 = v10;
      goto LABEL_12;
    }
  }
  uint64_t v13 = [v3 objectForKeyedSubscript:@"files"];
  if (v13)
  {
  }
  else
  {
    id v14 = [v3 objectForKeyedSubscript:@"css"];
    BOOL v15 = v14 == 0;

    if (v15)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItMustSpecifyE_4.isa, v16);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
  }
  BOOL v17 = WebKit::objectForKey<NSString>(v3, @"origin", 1);
  uint64_t v18 = [v17 lowercaseString];

  if (!v18
    || ([v18 isEqualToString:@"user"] & 1) != 0
    || ([v18 isEqualToString:@"author"] & 1) != 0)
  {
    uint64_t v11 = 1;
  }
  else
  {
    WebKit::toErrorString(0, &cfstr_Origin.isa, &cfstr_ItMustSpecifyE_5.isa, v19);
    uint64_t v11 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_12:
  return v11;
}

void sub_19929F3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(void *a1, uint64_t a2)
{
  id v3 = a1;
  v9[0] = [v3 objectForKeyedSubscript:@"css"];
  if (v9[0])
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2 + 96, v9);
  }
  id v4 = objc_msgSend(v3, "objectForKeyedSubscript:", @"files", v9[0]);
  char v5 = v4;
  if (v4)
  {
    WTF::makeVector<WTF::String>(v4, (uint64_t)v9);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 32, v9);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }

  id v7 = WebKit::objectForKey<NSString>(v3, @"origin", 1);
  BOOL v8 = [v7 lowercaseString];

  if (v8) {
    *(unsigned char *)(a2 + 129) = [v8 isEqualToString:@"user"] ^ 1;
  }
}

void sub_19929F540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::removeCSS(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateCSS(v7, a4))
  {
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    char v29 = 0;
    v30[0] = 0;
    char v31 = 0;
    LOBYTE(v32) = 0;
    char v34 = 0;
    LOBYTE(v35) = 0;
    char v36 = 0;
    LOBYTE(v37) = 0;
    char v38 = 0;
    LOBYTE(v39) = 0;
    char v40 = 0;
    __int16 v41 = 257;
    BOOL v8 = objc_msgSend(v7, "objectForKeyedSubscript:", @"target", v26, v27);
    WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v8, (uint64_t)&v26, a4);

    WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(v7, (uint64_t)&v26);
    if (!*a4)
    {
      {
        BOOL v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v25);
      }
      uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
      ++*(_DWORD *)(a1 + 48);
      uint64_t v11 = *a3;
      *a3 = 0;
      uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v13 = 1688;
      *((void *)v13 + 1) = v12;
      *((void *)v13 + 66) = (char *)v13 + 16;
      *((void *)v13 + 67) = 512;
      *((void *)v13 + 68) = 0;
      *((void *)v13 + 70) = 0;
      *((void *)v13 + 69) = 0;
      IPC::Encoder::encodeHeader(v13);
      long long v43 = v13;
      IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(v13, &v26);
      id v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v14 = &unk_1EE9FC968;
      v14[1] = a1;
      void v14[2] = v11;
      uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v42[0] = v14;
      v42[1] = v15;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v43, v42, 0);
      uint64_t v16 = v42[0];
      v42[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      BOOL v17 = v43;
      long long v43 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v9);
        WTF::fastFree(v23, v24);
      }
    }
    if (v40)
    {
      uint64_t v18 = v39;
      CFTypeRef v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    if (v38)
    {
      id v19 = v37;
      uint64_t v37 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    if (v36)
    {
      id v20 = v35;
      uint64_t v35 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (v34)
    {
      uint64_t v21 = v32;
      if (v32)
      {
        uint64_t v32 = 0;
        int v33 = 0;
        WTF::fastFree(v21, v9);
      }
    }
    if (v31) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v9);
    }
    if (v29)
    {
      uint64_t v22 = v28;
      uint64_t v28 = 0;
      if (v22) {
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
    }
  }
}

void sub_19929F8A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25)
{
  uint64_t v29 = *(void *)(v27 - 88);
  *(void *)(v27 - 88) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  unint64_t v30 = *(IPC::Encoder **)(v27 - 72);
  *(void *)(v27 - 72) = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, a2);
    WTF::fastFree(v31, v32);
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19 && a16) {
    WTF::fastFree(a16, a2);
  }
  if (a15) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, a2);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(*(CFTypeRef *)(a11 + 8));
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::registerContentScripts(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  objc_opt_class();
  BOOL v8 = WTF::dynamic_objc_cast<NSArray>(v7);
  if (WebKit::WebExtensionAPIScripting::validateRegisteredScripts(v8, 1, a4))
  {
    v21[0] = 0;
    v21[1] = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v8, 1, (uint64_t)v21);
    {
      id v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v20);
    }
    uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1687;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v23 = v12;
    IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v12, (uint64_t)v21);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9FC990;
    v13[1] = a1;
    void v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v13;
    v22[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v9 + 24) + 40))(v9 + 24, &v23, v22, 0);
    uint64_t v16 = v22[0];
    v22[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    BOOL v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v15);
  }
}

void sub_19929FCD4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v17 = a12;
  a12 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = a14;
  a14 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateRegisteredScripts(void *a1, int a2, void *a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  id v33 = a1;
  if ((byte_1EB35A07E & 1) == 0)
  {
    v46[0] = @"id";
    qword_1EB35A0B8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:1];
    byte_1EB35A07E = 1;
  }
  if ((byte_1EB35A07F & 1) == 0)
  {
    v44[0] = @"allFrames";
    v45[0] = objc_opt_class();
    v44[1] = @"css";
    uint64_t v43 = objc_opt_class();
    uint64_t v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v43 count:1];
    v45[1] = v27;
    void v44[2] = @"excludeMatches";
    uint64_t v42 = objc_opt_class();
    uint64_t v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
    v45[2] = v28;
    v44[3] = @"id";
    v45[3] = objc_opt_class();
    v44[4] = @"js";
    uint64_t v41 = objc_opt_class();
    uint64_t v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v41 count:1];
    v45[4] = v29;
    v44[5] = @"matches";
    uint64_t v40 = objc_opt_class();
    unint64_t v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v40 count:1];
    v45[5] = v30;
    v44[6] = @"persistAcrossSessions";
    v45[6] = objc_opt_class();
    v44[7] = @"runAt";
    v45[7] = objc_opt_class();
    v44[8] = @"world";
    v45[8] = objc_opt_class();
    v44[9] = @"cssOrigin";
    v45[9] = objc_opt_class();
    qword_1EB35A0C0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v45 forKeys:v44 count:10];

    byte_1EB35A07F = 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_AnArrayIsExpec.isa, v4);
    uint64_t hasValidExecutionWorld = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_47;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v33;
  uint64_t v5 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (!v5)
  {
    uint64_t hasValidExecutionWorld = 1;
    goto LABEL_46;
  }
  uint64_t v32 = *(void *)v36;
  while (2)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v36 != v32) {
        objc_enumerationMutation(obj);
      }
      id v7 = *(void **)(*((void *)&v35 + 1) + 8 * i);
      if (!WebKit::validateDictionary(v7, @"scripts", (void *)qword_1EB35A0B8, (void *)qword_1EB35A0C0, a3)) {
        goto LABEL_45;
      }
      BOOL v8 = [v7 objectForKeyedSubscript:@"id"];
      if (![v8 length])
      {
        uint64_t v23 = @"it must not be empty";
LABEL_36:
        WebKit::toErrorString(0, &cfstr_Id.isa, &v23->isa, v9);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:

LABEL_45:
        uint64_t hasValidExecutionWorld = 0;
        goto LABEL_46;
      }
      if ([v8 characterAtIndex:0] == 95)
      {
        uint64_t v23 = @"it must not start with '_'";
        goto LABEL_36;
      }
      uint64_t v10 = [v7 objectForKeyedSubscript:@"matches"];
      uint64_t v11 = v10;
      if (a2 == 1 && ![v10 count])
      {
        uint64_t v24 = [v7 objectForKeyedSubscript:@"id"];
        WebKit::toErrorString(0, &cfstr_Matches.isa, &cfstr_ItMustSpecifyA.isa, v25, v24);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_39;
      }
      if (v11 && ![v11 count])
      {
        WebKit::toErrorString(0, &cfstr_Matches.isa, &cfstr_ItMustNotBeEmp.isa, v12);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

        goto LABEL_44;
      }
      uint64_t v13 = [v7 objectForKeyedSubscript:@"js"];
      uint64_t v14 = [v7 objectForKeyedSubscript:@"css"];
      if (a2 == 1 && ![v13 count] && !objc_msgSend(v14, "count"))
      {
        WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItMustSpecifyA_0.isa, v15);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_43;
      }
      uint64_t v16 = [v7 objectForKeyedSubscript:@"runAt"];
      uint64_t v17 = v16;
      if (v16
        && ([v16 isEqualToString:@"document_idle"] & 1) == 0
        && ([v17 isEqualToString:@"document_start"] & 1) == 0
        && ([v17 isEqualToString:@"document_end"] & 1) == 0)
      {
        WebKit::toErrorString(0, &cfstr_Runat.isa, &cfstr_ItMustSpecifyE_6.isa, v18);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_43;
      }

      id v19 = WebKit::objectForKey<NSString>(v7, @"cssOrigin", 1);
      id v20 = [v19 lowercaseString];

      if (v20
        && ([v20 isEqualToString:@"user"] & 1) == 0
        && ([v20 isEqualToString:@"author"] & 1) == 0)
      {
        WebKit::toErrorString(0, &cfstr_Cssorigin.isa, &cfstr_ItMustSpecifyE_7.isa, v21);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_43:
        goto LABEL_44;
      }

      uint64_t hasValidExecutionWorld = WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(v7, a3);
      if (!hasValidExecutionWorld) {
        goto LABEL_46;
      }
    }
    uint64_t v5 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    uint64_t hasValidExecutionWorld = 1;
    if (v5) {
      continue;
    }
    break;
  }
LABEL_46:

LABEL_47:
  return hasValidExecutionWorld;
}

void sub_1992A04CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(void *a1, int a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = a1;
  uint64_t v5 = [obj countByEnumeratingWithState:&v59 objects:v63 count:16];
  if (v5)
  {
    uint64_t v46 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v60 != v46) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        v48[0] = 0;
        char v49 = 0;
        v50[0] = 0;
        char v51 = 0;
        char v52 = 0;
        __int16 v53 = 0;
        v54[0] = 0;
        char v55 = 0;
        v56[0] = 0;
        char v57 = 0;
        uint64_t v58 = 0;
        BOOL v8 = [v7 objectForKeyedSubscript:@"id"];
        MEMORY[0x19972EAD0](v47, v8);
        uint64_t v10 = v47[0];
        v47[0] = 0;
        uint64_t v11 = v52;
        char v52 = v10;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v9);
            uint64_t v13 = v47[0];
            v47[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v12);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v11 -= 2;
            v47[0] = 0;
          }
        }

        uint64_t v14 = [v7 objectForKeyedSubscript:@"css"];
        uint64_t v15 = v14;
        if (v14)
        {
          WTF::makeVector<WTF::String>(v14, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v48, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v16);
        }

        uint64_t v17 = [v7 objectForKeyedSubscript:@"js"];
        uint64_t v18 = v17;
        if (v17)
        {
          WTF::makeVector<WTF::String>(v17, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v50, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v19);
        }

        id v20 = [v7 objectForKeyedSubscript:@"matches"];
        uint64_t v21 = v20;
        if (v20)
        {
          WTF::makeVector<WTF::String>(v20, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v56, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v22);
        }

        uint64_t v23 = [v7 objectForKeyedSubscript:@"excludeMatches"];
        uint64_t v24 = v23;
        if (v23)
        {
          WTF::makeVector<WTF::String>(v23, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v54, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v25);
        }

        if (a2 == 1
          || ([v7 objectForKeyedSubscript:@"allFrames"],
              uint64_t v26 = objc_claimAutoreleasedReturnValue(),
              BOOL v27 = v26 == 0,
              v26,
              !v27))
        {
          uint64_t v28 = [v7 objectForKeyedSubscript:@"allFrames"];
          objc_opt_class();
          uint64_t v29 = WTF::dynamic_objc_cast<NSNumber>(v28);

          __int16 v30 = v29 ? [v29 BOOLValue] : 0;
          LOWORD(v58) = v30 | 0x100;
          if (a2 == 1) {
            goto LABEL_28;
          }
        }
        char v31 = [v7 objectForKeyedSubscript:@"persistAcrossSessions"];
        BOOL v32 = v31 == 0;

        if (!v32)
        {
LABEL_28:
          id v33 = [v7 objectForKeyedSubscript:@"persistAcrossSessions"];
          objc_opt_class();
          char v34 = WTF::dynamic_objc_cast<NSNumber>(v33);

          if (v34) {
            __int16 v35 = [v34 BOOLValue];
          }
          else {
            __int16 v35 = 1;
          }

          WORD1(v58) = v35 | 0x100;
        }
        long long v36 = [v7 objectForKeyedSubscript:@"world"];
        long long v37 = v36;
        if (v36)
        {
          __int16 v38 = [v36 isEqualToString:@"MAIN"] ^ 1 | 0x100;
        }
        else
        {
          if (a2 != 1) {
            goto LABEL_37;
          }
          __int16 v38 = 257;
        }
        WORD2(v58) = v38;
LABEL_37:

        CFTypeRef v39 = [v7 objectForKeyedSubscript:@"runAt"];
        uint64_t v40 = v39;
        if (v39)
        {
          if ([v39 isEqualToString:@"document_end"])
          {
            __int16 v41 = 258;
          }
          else if ([v40 isEqualToString:@"document_idle"])
          {
            __int16 v41 = 256;
          }
          else
          {
            __int16 v41 = 257;
          }
        }
        else
        {
          if (a2 != 1) {
            goto LABEL_46;
          }
          __int16 v41 = 256;
        }
        __int16 v53 = v41;
LABEL_46:

        unsigned int v42 = *(_DWORD *)(a3 + 12);
        if (v42 == *(_DWORD *)(a3 + 8))
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>(a3, (unint64_t)v48);
        }
        else
        {
          WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(*(void *)a3 + 120 * v42, (uint64_t)v48);
          ++*(_DWORD *)(a3 + 12);
        }
        if (v57) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v43);
        }
        if (v55) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v43);
        }
        long long v44 = v52;
        char v52 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v43);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        if (v51) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v43);
        }
        if (v49) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v43);
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v59 objects:v63 count:16];
    }
    while (v5);
  }
}

void sub_1992A0B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateFilter(v7, a4))
  {
    BOOL v8 = [v7 objectForKeyedSubscript:@"ids"];
    WTF::makeVector<WTF::String>(v8, (uint64_t)v21);

    {
      id v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v20);
    }
    uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1685;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v23 = v12;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, (uint64_t)v21);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9FC9B8;
    v13[1] = a1;
    void v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v13;
    v22[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v9 + 24) + 40))(v9 + 24, &v23, v22, 0);
    uint64_t v16 = v22[0];
    v22[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v15);
  }
}

void sub_1992A0E5C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v16 = a12;
  a12 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = a14;
  a14 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIScripting::validateFilter(void *a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = &qword_1EB35A000;
  if ((byte_1EB35A080 & 1) == 0)
  {
    uint64_t v9 = @"ids";
    uint64_t v8 = objc_opt_class();
    id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v8 count:1];
    v10[0] = v7;
    qword_1EB35A0C8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

    byte_1EB35A080 = 1;
    id v4 = &qword_1EB35A000;
  }
  BOOL v5 = WebKit::validateDictionary(v3, @"filter", 0, (void *)v4[25], a2);

  return v5;
}

void sub_1992A10D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::updateContentScripts(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  objc_opt_class();
  uint64_t v8 = WTF::dynamic_objc_cast<NSArray>(v7);
  if (WebKit::WebExtensionAPIScripting::validateRegisteredScripts(v8, 0, a4))
  {
    v21[0] = 0;
    v21[1] = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v8, 0, (uint64_t)v21);
    {
      id v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v20);
    }
    uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1690;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v23 = v12;
    IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v12, (uint64_t)v21);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9FCA00;
    v13[1] = a1;
    void v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v13;
    v22[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v9 + 24) + 40))(v9 + 24, &v23, v22, 0);
    uint64_t v16 = v22[0];
    v22[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v15);
  }
}

void sub_1992A12F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v17 = a12;
  a12 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = a14;
  a14 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::unregisterContentScripts(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateFilter(v7, a4))
  {
    uint64_t v8 = [v7 objectForKeyedSubscript:@"ids"];
    WTF::makeVector<WTF::String>(v8, (uint64_t)v21);

    {
      id v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v20);
    }
    uint64_t v9 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1689;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v23 = v12;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, (uint64_t)v21);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9FCA28;
    v13[1] = a1;
    void v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v22[0] = v13;
    v22[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v9 + 24) + 40))(v9 + 24, &v23, v22, 0);
    uint64_t v16 = v22[0];
    v22[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v15);
  }
}

void sub_1992A1640(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v16 = a12;
  a12 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = a14;
  a14 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateTarget(void *a1, void *a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((byte_1EB35A07A & 1) == 0)
  {
    v33[0] = @"tabId";
    qword_1EB35A098 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
    byte_1EB35A07A = 1;
  }
  if ((byte_1EB35A07B & 1) == 0)
  {
    v31[0] = @"frameIds";
    uint64_t v30 = objc_opt_class();
    uint64_t v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v30 count:1];
    v32[0] = v23;
    v31[1] = @"tabId";
    v32[1] = objc_opt_class();
    _OWORD v31[2] = @"allFrames";
    void v32[2] = objc_opt_class();
    qword_1EB35A0A0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:3];

    byte_1EB35A07B = 1;
  }
  if (!WebKit::validateDictionary(v3, @"target", (void *)qword_1EB35A098, (void *)qword_1EB35A0A0, a2))
  {
    uint64_t v8 = 0;
    goto LABEL_40;
  }
  id v4 = WebKit::objectForKey<NSNumber>(v3, @"allFrames");
  if ([v4 BOOLValue])
  {
    BOOL v5 = [v3 objectForKeyedSubscript:@"frameIds"];
    BOOL v6 = v5 == 0;

    if (!v6)
    {
      WebKit::toErrorString(0, &cfstr_Target.isa, &cfstr_ItCannotSpecif_5.isa, v7);
      uint64_t v8 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_40;
    }
  }
  else
  {
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v9 = [v3 objectForKeyedSubscript:@"frameIds"];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(v9);
        }
        uint64_t v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        [v13 doubleValue];
        double v16 = v15;
        if (v15 == 0.0)
        {
          unint64_t v17 = -256;
          LOBYTE(v18) = -2;
        }
        else if (v15 == -1.0)
        {
          unint64_t v17 = -256;
          LOBYTE(v18) = -3;
        }
        else
        {
          BOOL v21 = (v15 >= 0.0 && ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
              || (unint64_t)(*(void *)&v15 - 1) <= 0xFFFFFFFFFFFFELL)
             && v15 < 1.84467441e19;
          if (!v21 || modf(v15, &__y) != 0.0)
          {
LABEL_38:
            WebKit::toErrorString(0, &cfstr_Frameids.isa, &cfstr_IsNotAFrameIde.isa, v14, v13);
            uint64_t v8 = 0;
            *a2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_39;
          }
          unint64_t v18 = (unint64_t)v16;
          if ((unint64_t)v16 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1992A1AA0);
          }
          unint64_t v17 = v18 & 0xFFFFFFFFFFFFFF00;
        }
        if ((v17 & 0xFFFFFFFFFFFFFF00 | v18) == 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_38;
        }
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 1;
LABEL_39:

LABEL_40:
  return v8;
}

void sub_1992A1B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(void *a1, void *a2)
{
  id v3 = [a1 objectForKeyedSubscript:@"world"];
  id v4 = v3;
  if (!v3
    || ([v3 isEqualToString:@"ISOLATED"] & 1) != 0
    || ([v4 isEqualToString:@"MAIN"] & 1) != 0)
  {
    uint64_t v6 = 1;
  }
  else
  {
    WebKit::toErrorString(0, &cfstr_World.isa, &cfstr_ItMustSpecifyE_8.isa, v5);
    uint64_t v6 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void sub_1992A1C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v3;
    LODWORD(v3) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v3;
    LODWORD(v3) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v3;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC8F8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC8F8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(a2, v4);
    if (v6)
    {
      WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9FC910[v5])(&v7, v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992A1ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9FC910[a12])(v14 - 17, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FC910[v2])(&v3, v1);
  }
}

void sub_1992A1F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FC910[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992A2010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FC910[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>(a1, (uint64_t)v4);
  if (v6)
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v4);
    a2[24] = 1;
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9FC910[v5])(&v7, v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void sub_1992A20D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9FC910[a12])(v14 - 17, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::decode<IPC::Decoder>((char **)a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    int v5 = *(char **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992A2184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FC910[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (unint64_t)a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v17 = a1;
      if (v3)
      {
        (*(void (**)(char *))(*(void *)v14 + 16))(v14);
        a1 = v17;
        uint64_t v13 = *v17;
        unint64_t v12 = (unint64_t)v17[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = &v4[v5];
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v12 = v3;
    uint64_t v13 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      double v16 = a1;
      if (v12)
      {
        (*(void (**)(char *, char *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        a1 = v16;
        uint64_t v4 = *v16;
        unint64_t v3 = (unint64_t)v16[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v4, (uint64_t)&v18);
      char v10 = v20;
      if (v20)
      {
        *(void *)a2 = v18;
        uint64_t v11 = v19;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = 0;
        uint64_t result = WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
        char v10 = 1;
LABEL_10:
        *(unsigned char *)(a2 + 24) = v10;
        return result;
      }
    }
    else
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v18);
      char v10 = v19;
      if ((_BYTE)v19)
      {
        *(void *)a2 = v18;
        char v10 = 1;
        *(_DWORD *)(a2 + 16) = 1;
        goto LABEL_10;
      }
    }
    *(unsigned char *)a2 = 0;
    goto LABEL_10;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v4);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1992A240C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_24;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v38 = 0;
    CFTypeRef v39 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>(a1, (uint64_t)&v32);
        if (!v37) {
          break;
        }
        unsigned int v24 = HIDWORD(v39);
        if (HIDWORD(v39) == v39)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)&v38, (unint64_t)&v32);
        }
        else
        {
          uint64_t v25 = v38;
          long long v26 = (unsigned char *)(v38 + 48 * HIDWORD(v39));
          unsigned char *v26 = 0;
          v26[8] = 0;
          if (v33)
          {
            uint64_t v27 = v32;
            uint64_t v32 = 0;
            *(void *)long long v26 = v27;
            v26[8] = 1;
          }
          uint64_t v28 = v25 + 48 * v24;
          *(unsigned char *)(v28 + 16) = 0;
          uint64_t v29 = v28 + 16;
          *(unsigned char *)(v29 + 8) = 0;
          if (v35)
          {
            uint64_t v30 = v34;
            uint64_t v34 = 0;
            *(void *)uint64_t v29 = v30;
            *(unsigned char *)(v29 + 8) = 1;
          }
          *(_OWORD *)(v25 + 48 * v24 + 32) = v36;
          ++HIDWORD(v39);
        }
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v38, HIDWORD(v39));
          *(void *)a3 = v38;
          char v31 = v39;
          uint64_t v38 = 0;
          CFTypeRef v39 = 0;
          *(void *)(a3 + 8) = v31;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
LABEL_21:
        uint64_t v38 = 0;
        CFTypeRef v39 = 0;
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v19;
LABEL_22:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, a2);
      }
      LODWORD(v39) = 48 * (int)v10 / 0x30u;
      uint64_t v38 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>(a1, (uint64_t)&v32);
        if (!v37) {
          break;
        }
        unsigned int v11 = HIDWORD(v39);
        if (HIDWORD(v39) == v39)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)&v38, (unint64_t)&v32);
        }
        else
        {
          uint64_t v12 = v38;
          uint64_t v13 = (unsigned char *)(v38 + 48 * HIDWORD(v39));
          unsigned char *v13 = 0;
          v13[8] = 0;
          if (v33)
          {
            uint64_t v14 = v32;
            uint64_t v32 = 0;
            *(void *)uint64_t v13 = v14;
            v13[8] = 1;
          }
          uint64_t v15 = v12 + 48 * v11;
          *(unsigned char *)(v15 + 16) = 0;
          uint64_t v16 = v15 + 16;
          *(unsigned char *)(v16 + 8) = 0;
          if (v35)
          {
            uint64_t v17 = v34;
            uint64_t v34 = 0;
            *(void *)uint64_t v16 = v17;
            *(unsigned char *)(v16 + 8) = 1;
          }
          *(_OWORD *)(v12 + 48 * v11 + 32) = v36;
          ++HIDWORD(v39);
        }
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
        if (!--v10)
        {
          uint64_t v18 = v38;
          uint64_t v19 = v39;
          goto LABEL_21;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
    return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, a2);
  }
  unint64_t v20 = v5;
  uint64_t v21 = 0;
LABEL_24:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v20) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void sub_1992A2758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v3);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992A27F8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (unsigned char *)(*(void *)a1 + 48 * v4);
  unsigned char *v6 = 0;
  v6[8] = 0;
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v7 = *(void *)v3;
    *(void *)unint64_t v3 = 0;
    *(void *)uint64_t v6 = v7;
    v6[8] = 1;
  }
  uint64_t v8 = v5 + 48 * v4;
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = v8 + 16;
  *(unsigned char *)(v9 + 8) = 0;
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t v10 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    *(void *)uint64_t v9 = v10;
    *(unsigned char *)(v9 + 8) = 1;
  }
  *(_OWORD *)(v5 + 48 * v4 + 32) = *(_OWORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1992A2A18);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (unsigned char *)(a3 + v6);
      unint64_t v8 = (uint64_t *)(v5 + v6);
      unsigned char *v7 = 0;
      v7[8] = 0;
      if (*(unsigned char *)(v5 + v6 + 8))
      {
        uint64_t v9 = *v8;
        uint64_t *v8 = 0;
        *(void *)unint64_t v7 = v9;
        v7[8] = 1;
      }
      v7[16] = 0;
      v7[24] = 0;
      if (*((unsigned char *)v8 + 24))
      {
        uint64_t v10 = *(void *)(v5 + v6 + 16);
        *(void *)(v5 + v6 + 16) = 0;
        *((void *)v7 + 2) = v10;
        v7[24] = 1;
      }
      *(_OWORD *)(a3 + v6 + 32) = *(_OWORD *)(v5 + v6 + 32);
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 16);
      uint64_t result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5 + v6);
      v6 += 48;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(*(void *)result + 48 * this, *(void *)result + 48 * v4);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1992A2C20);
      }
      uint64_t v6 = (WTF *)(48 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebKit::WebExtensionScriptInjectionResultParameters>::move((uint64_t)v5, (uint64_t)v5 + 48 * v4, (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3 + 16);
      uint64_t result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
      v3 += 48;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebExtensionScriptInjectionResultParameters>::destruct(*(void *)a1, *(void *)a1 + 48 * v3);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1992A2CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FC910[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9FC910[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9FC920[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit43WebExtensionScriptInjectionResultParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      char v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    unint64_t v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI((uint64_t *)a2, 0);
    unint64_t v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC940;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC940;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingInsertCSS,WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::insertCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A3104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC968;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC968;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRemoveCSS,WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::removeCSS(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A3368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 120 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result + 64;
    do
    {
      if (*(unsigned char *)(v3 + 40)) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 24, a2);
      }
      if (*(unsigned char *)(v3 + 16)) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      }
      uint64_t result = *(WTF::StringImpl **)(v3 - 16);
      *(void *)(v3 - 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (*(unsigned char *)(v3 - 24)) {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 40, a2);
      }
      if (*(unsigned char *)(v3 - 48)) {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 64, a2);
      }
      uint64_t v4 = (WTF::StringImpl *)(v3 + 56);
      v3 += 120;
    }
    while (v4 != a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 120 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode(a1, v6);
      v6 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC990;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC990;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingRegisterContentScripts,WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::registerContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A3720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FC9B8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FC9B8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v16 = *((void *)a2 + 3);
        if (v16)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v4, v5);
            unint64_t v14 = 0;
            uint64_t v24 = *(void *)a2;
            uint64_t v25 = *((void *)a2 + 1);
            uint64_t v26 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v15 = 0;
            if (v26 && v25)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v25);
              uint64_t v15 = *(void *)a2;
              unint64_t v14 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v14 = 0;
            uint64_t v15 = 0;
          }
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v33);
            int v9 = v35;
            if (v35)
            {
              v30[0] = v33;
              uint64_t v10 = v34;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              v30[1] = v10;
              int v31 = 0;
              WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v8);
              int v9 = 1;
            }
            else
            {
              LOBYTE(v30[0]) = 0;
            }
            int v13 = 0;
            char v32 = v9;
            if (!v9)
            {
LABEL_27:
              uint64_t v18 = *(void *)a2;
              uint64_t v19 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v20 = *((void *)a2 + 3);
              if (v20 && v19) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
              }
              v27[0] = 0;
              char v29 = 0;
              goto LABEL_29;
            }
          }
          else
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v33);
            int v12 = v34;
            if ((_BYTE)v34)
            {
              v30[0] = v33;
              int v12 = 1;
              int v31 = 1;
            }
            else
            {
              LOBYTE(v30[0]) = 0;
            }
            char v32 = v12;
            int v13 = 1;
            if (!v12) {
              goto LABEL_27;
            }
          }
          v27[0] = 0;
          int v28 = -1;
          ((void (*)(uint64_t *, unsigned char *, void *))off_1EE9FC9E0[v13])(&v33, v27, v30);
          int v28 = v13;
          char v29 = 1;
          if (!v32 || v31 == -1 || (((void (*)(uint64_t *, void *))off_1EE9FC9D0[v31])(&v33, v30), v29))
          {
LABEL_21:
            WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v27);
            if (v29)
            {
              if (v28 != -1) {
                ((void (*)(void *, unsigned char *))off_1EE9FC9D0[v28])(v30, v27);
              }
            }
            return;
          }
LABEL_29:
          uint64_t v21 = *(void *)a2;
          uint64_t v22 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v23 = *((void *)a2 + 3);
          if (!v23 || !v22 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21), !v29))
          {
            IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
            return;
          }
          goto LABEL_21;
        }
        unint64_t v14 = v5;
        uint64_t v15 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v17 = *((void *)a2 + 3);
      if (v17 && v14) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
      }
      goto LABEL_27;
    }
  }
  char v11 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v11);
}

void sub_1992A3BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, int a20,char a21)
{
  if (a13)
  {
    if (a11 != -1) {
      ((void (*)(__int16 *, uint64_t *))off_1EE9FC9D0[a11])(&a15, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingGetRegisteredScripts,WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FC9D0[v2])(&v3, v1);
  }
}

void sub_1992A3CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FC9D0[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1992A3D60(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 16))(v42, v6, v5);
        uint64_t v41 = *(void *)a1;
        unint64_t v40 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v40 = 0;
        uint64_t v41 = 0;
      }
    }
    goto LABEL_28;
  }
  int v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    if (v10 >= 0x2222)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>(a1, (uint64_t)&v71);
        if (!v90) {
          break;
        }
        unsigned int v44 = HIDWORD(v92);
        if (HIDWORD(v92) == v92)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v91, (unint64_t)&v71);
        }
        else
        {
          uint64_t v45 = v91;
          uint64_t v46 = v91 + 120 * HIDWORD(v92);
          *(unsigned char *)uint64_t v46 = 0;
          *(unsigned char *)(v46 + 16) = 0;
          if (v74)
          {
            *(void *)uint64_t v46 = 0;
            *(void *)(v46 + 8) = 0;
            uint64_t v47 = v71;
            uint64_t v71 = 0;
            *(void *)uint64_t v46 = v47;
            LODWORD(v47) = v72;
            int v72 = 0;
            *(_DWORD *)(v46 + 8) = v47;
            LODWORD(v47) = v73;
            int v73 = 0;
            *(_DWORD *)(v46 + 12) = v47;
            *(unsigned char *)(v46 + 16) = 1;
          }
          uint64_t v48 = v45 + 120 * v44;
          *(unsigned char *)(v48 + 24) = 0;
          uint64_t v49 = v48 + 24;
          *(unsigned char *)(v49 + 16) = 0;
          uint64_t v50 = (unsigned char *)(v49 + 16);
          if (v78)
          {
            *(void *)uint64_t v49 = 0;
            *(void *)(v49 + 8) = 0;
            uint64_t v51 = v75;
            uint64_t v75 = 0;
            *(void *)uint64_t v49 = v51;
            int v52 = v76;
            int v76 = 0;
            uint64_t v53 = v45 + 120 * v44;
            *(_DWORD *)(v53 + 32) = v52;
            int v54 = v77;
            int v77 = 0;
            *(_DWORD *)(v53 + 36) = v54;
            *uint64_t v50 = 1;
          }
          uint64_t v55 = v45 + 120 * v44;
          uint64_t v56 = v79;
          uint64_t v79 = 0;
          *(void *)(v55 + 48) = v56;
          LOWORD(v56) = v80;
          *(unsigned char *)(v55 + 80) = 0;
          char v57 = (unsigned char *)(v55 + 80);
          *((_WORD *)v57 - 12) = v56;
          *(v57 - 16) = 0;
          uint64_t v58 = v57 - 16;
          if (v84)
          {
            *uint64_t v58 = 0;
            *((void *)v57 - 1) = 0;
            uint64_t v59 = v81;
            uint64_t v81 = 0;
            *uint64_t v58 = v59;
            int v60 = v82;
            int v82 = 0;
            uint64_t v61 = v45 + 120 * v44;
            *(_DWORD *)(v61 + 72) = v60;
            int v62 = v83;
            int v83 = 0;
            *(_DWORD *)(v61 + 76) = v62;
            unsigned char *v57 = 1;
          }
          uint64_t v63 = v45 + 120 * v44;
          *(unsigned char *)(v63 + 88) = 0;
          uint64_t v64 = v63 + 88;
          *(unsigned char *)(v64 + 16) = 0;
          int v65 = (unsigned char *)(v64 + 16);
          if (v88)
          {
            *(void *)uint64_t v64 = 0;
            *(void *)(v64 + 8) = 0;
            uint64_t v66 = v85;
            uint64_t v85 = 0;
            *(void *)uint64_t v64 = v66;
            int v67 = v86;
            int v86 = 0;
            uint64_t v68 = v45 + 120 * v44;
            *(_DWORD *)(v68 + 96) = v67;
            int v69 = v87;
            int v87 = 0;
            *(_DWORD *)(v68 + 100) = v69;
            unsigned char *v65 = 1;
          }
          *(void *)(v45 + 120 * v44 + 112) = v89;
          ++HIDWORD(v92);
        }
        std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v91, HIDWORD(v92));
          *(void *)a3 = v91;
          uint64_t v70 = v92;
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          *(void *)(a3 + 8) = v70;
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
LABEL_25:
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        *(void *)a3 = v38;
        *(void *)(a3 + 8) = v39;
LABEL_26:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, a2);
      }
      LODWORD(v92) = 120 * (int)v10 / 0x78u;
      uint64_t v91 = WTF::fastMalloc((WTF *)(120 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>(a1, (uint64_t)&v71);
        if (!v90) {
          break;
        }
        unsigned int v12 = HIDWORD(v92);
        if (HIDWORD(v92) == v92)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v91, (unint64_t)&v71);
        }
        else
        {
          uint64_t v13 = v91;
          uint64_t v14 = v91 + 120 * HIDWORD(v92);
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 16) = 0;
          if (v74)
          {
            *(void *)uint64_t v14 = 0;
            *(void *)(v14 + 8) = 0;
            uint64_t v15 = v71;
            uint64_t v71 = 0;
            *(void *)uint64_t v14 = v15;
            LODWORD(v15) = v72;
            int v72 = 0;
            *(_DWORD *)(v14 + 8) = v15;
            LODWORD(v15) = v73;
            int v73 = 0;
            *(_DWORD *)(v14 + 12) = v15;
            *(unsigned char *)(v14 + 16) = 1;
          }
          uint64_t v16 = v13 + 120 * v12;
          *(unsigned char *)(v16 + 24) = 0;
          uint64_t v17 = v16 + 24;
          *(unsigned char *)(v17 + 16) = 0;
          uint64_t v18 = (unsigned char *)(v17 + 16);
          if (v78)
          {
            *(void *)uint64_t v17 = 0;
            *(void *)(v17 + 8) = 0;
            uint64_t v19 = v75;
            uint64_t v75 = 0;
            *(void *)uint64_t v17 = v19;
            int v20 = v76;
            int v76 = 0;
            uint64_t v21 = v13 + 120 * v12;
            *(_DWORD *)(v21 + 32) = v20;
            int v22 = v77;
            int v77 = 0;
            *(_DWORD *)(v21 + 36) = v22;
            unsigned char *v18 = 1;
          }
          uint64_t v23 = v13 + 120 * v12;
          uint64_t v24 = v79;
          uint64_t v79 = 0;
          *(void *)(v23 + 48) = v24;
          LOWORD(v24) = v80;
          *(unsigned char *)(v23 + 80) = 0;
          uint64_t v25 = (unsigned char *)(v23 + 80);
          *((_WORD *)v25 - 12) = v24;
          *(v25 - 16) = 0;
          uint64_t v26 = v25 - 16;
          if (v84)
          {
            void *v26 = 0;
            *((void *)v25 - 1) = 0;
            uint64_t v27 = v81;
            uint64_t v81 = 0;
            void *v26 = v27;
            int v28 = v82;
            int v82 = 0;
            uint64_t v29 = v13 + 120 * v12;
            *(_DWORD *)(v29 + 72) = v28;
            int v30 = v83;
            int v83 = 0;
            *(_DWORD *)(v29 + 76) = v30;
            *uint64_t v25 = 1;
          }
          uint64_t v31 = v13 + 120 * v12;
          *(unsigned char *)(v31 + 88) = 0;
          uint64_t v32 = v31 + 88;
          *(unsigned char *)(v32 + 16) = 0;
          uint64_t v33 = (unsigned char *)(v32 + 16);
          if (v88)
          {
            *(void *)uint64_t v32 = 0;
            *(void *)(v32 + 8) = 0;
            uint64_t v34 = v85;
            uint64_t v85 = 0;
            *(void *)uint64_t v32 = v34;
            int v35 = v86;
            int v86 = 0;
            uint64_t v36 = v13 + 120 * v12;
            *(_DWORD *)(v36 + 96) = v35;
            int v37 = v87;
            int v87 = 0;
            *(_DWORD *)(v36 + 100) = v37;
            *uint64_t v33 = 1;
          }
          *(void *)(v13 + 120 * v12 + 112) = v89;
          ++HIDWORD(v92);
        }
        std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
        if (!--v10)
        {
          uint64_t v38 = v91;
          uint64_t v39 = v92;
          goto LABEL_25;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v11);
    return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, a2);
  }
  unint64_t v40 = v5;
  uint64_t v41 = 0;
LABEL_28:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v40) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v41);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void sub_1992A425C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionRegisteredScriptParameters>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 120))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992A42FC(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 120 * v4;
  *(unsigned char *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 16) = 0;
  if (*(unsigned char *)(v3 + 16))
  {
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    uint64_t v7 = *(void *)v3;
    *(void *)unint64_t v3 = 0;
    *(void *)uint64_t v6 = v7;
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v6 + 8) = v7;
    LODWORD(v7) = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 12) = 0;
    *(_DWORD *)(v6 + 12) = v7;
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v8 = v5 + 120 * v4;
  *(unsigned char *)(v8 + 24) = 0;
  uint64_t v9 = v8 + 24;
  *(unsigned char *)(v9 + 16) = 0;
  unint64_t v10 = (unsigned char *)(v9 + 16);
  if (*(unsigned char *)(v3 + 40))
  {
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    uint64_t v11 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    *(void *)uint64_t v9 = v11;
    int v12 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 32) = 0;
    uint64_t v13 = v5 + 120 * v4;
    *(_DWORD *)(v13 + 32) = v12;
    int v14 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 36) = 0;
    *(_DWORD *)(v13 + 36) = v14;
    *unint64_t v10 = 1;
  }
  uint64_t v15 = v5 + 120 * v4;
  uint64_t v16 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v15 + 48) = v16;
  LOWORD(v16) = *(_WORD *)(v3 + 56);
  *(unsigned char *)(v15 + 80) = 0;
  uint64_t v17 = (unsigned char *)(v15 + 80);
  *((_WORD *)v17 - 12) = v16;
  *(v17 - 16) = 0;
  uint64_t v18 = v17 - 16;
  if (*(unsigned char *)(v3 + 80))
  {
    void *v18 = 0;
    *((void *)v17 - 1) = 0;
    uint64_t v19 = *(void *)(v3 + 64);
    *(void *)(v3 + 64) = 0;
    void *v18 = v19;
    int v20 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = 0;
    uint64_t v21 = v5 + 120 * v4;
    *(_DWORD *)(v21 + 72) = v20;
    int v22 = *(_DWORD *)(v3 + 76);
    *(_DWORD *)(v3 + 76) = 0;
    *(_DWORD *)(v21 + 76) = v22;
    unsigned char *v17 = 1;
  }
  uint64_t v23 = v5 + 120 * v4;
  *(unsigned char *)(v23 + 88) = 0;
  uint64_t v24 = v23 + 88;
  *(unsigned char *)(v24 + 16) = 0;
  uint64_t v25 = (unsigned char *)(v24 + 16);
  if (*(unsigned char *)(v3 + 104))
  {
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0;
    uint64_t v26 = *(void *)(v3 + 88);
    *(void *)(v3 + 88) = 0;
    *(void *)uint64_t v24 = v26;
    int v27 = *(_DWORD *)(v3 + 96);
    *(_DWORD *)(v3 + 96) = 0;
    uint64_t v28 = v5 + 120 * v4;
    *(_DWORD *)(v28 + 96) = v27;
    int v29 = *(_DWORD *)(v3 + 100);
    *(_DWORD *)(v3 + 100) = 0;
    *(_DWORD *)(v28 + 100) = v29;
    *uint64_t v25 = 1;
  }
  *(void *)(v5 + 120 * v4 + 112) = *(void *)(v3 + 112);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x1992A4618);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 120 * *(unsigned int *)(a1 + 12));
    int v5 = 120 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)v5 + v6;
      uint64_t v8 = a3 + v6;
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 16) = 0;
      if (*((unsigned char *)v5 + v6 + 16))
      {
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        uint64_t v9 = *(void *)v7;
        *(void *)unint64_t v7 = 0;
        *(void *)uint64_t v8 = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 2);
        *((_DWORD *)v7 + 2) = 0;
        *(_DWORD *)(v8 + 8) = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 3);
        *((_DWORD *)v7 + 3) = 0;
        *(_DWORD *)(v8 + 12) = v9;
        *(unsigned char *)(v8 + 16) = 1;
      }
      *(unsigned char *)(v8 + 24) = 0;
      unint64_t v10 = (void *)(v8 + 24);
      *(unsigned char *)(v8 + 40) = 0;
      if (v7[40])
      {
        uint64_t v11 = (char *)v5 + v6;
        *unint64_t v10 = 0;
        *(void *)(v8 + 32) = 0;
        uint64_t v12 = *(void *)((char *)v5 + v6 + 24);
        *((void *)v11 + 3) = 0;
        *unint64_t v10 = v12;
        int v13 = *(_DWORD *)((char *)v5 + v6 + 32);
        *((_DWORD *)v11 + 8) = 0;
        uint64_t v14 = a3 + v6;
        *(_DWORD *)(v14 + 32) = v13;
        int v15 = *(_DWORD *)((char *)v5 + v6 + 36);
        *((_DWORD *)v11 + 9) = 0;
        *(_DWORD *)(v14 + 36) = v15;
        *(unsigned char *)(v8 + 40) = 1;
      }
      uint64_t v16 = a3 + v6;
      uint64_t v17 = (char *)v5 + v6;
      uint64_t v18 = *(void *)((char *)v5 + v6 + 48);
      *(void *)((char *)v5 + v6 + 48) = 0;
      *(void *)(v16 + 48) = v18;
      *(_WORD *)(v16 + 56) = *(_WORD *)((char *)v5 + v6 + 56);
      *(unsigned char *)(a3 + v6 + 64) = 0;
      uint64_t v19 = (void *)(a3 + v6 + 64);
      *(unsigned char *)(v16 + 80) = 0;
      if (*((unsigned char *)v5 + v6 + 80))
      {
        *uint64_t v19 = 0;
        *(void *)(a3 + v6 + 72) = 0;
        uint64_t v20 = *((void *)v17 + 8);
        *((void *)v17 + 8) = 0;
        *uint64_t v19 = v20;
        int v21 = *((_DWORD *)v17 + 18);
        *((_DWORD *)v17 + 18) = 0;
        *(_DWORD *)(v16 + 72) = v21;
        int v22 = *((_DWORD *)v17 + 19);
        *((_DWORD *)v17 + 19) = 0;
        *(_DWORD *)(v16 + 76) = v22;
        *(unsigned char *)(v16 + 80) = 1;
      }
      *(unsigned char *)(v16 + 88) = 0;
      uint64_t v23 = (void *)(v16 + 88);
      *(unsigned char *)(v16 + 104) = 0;
      if (v17[104])
      {
        uint64_t v24 = (char *)v5 + v6;
        *uint64_t v23 = 0;
        *(void *)(v16 + 96) = 0;
        uint64_t v25 = *(void *)((char *)v5 + v6 + 88);
        *((void *)v24 + 11) = 0;
        *uint64_t v23 = v25;
        int v26 = *(_DWORD *)((char *)v5 + v6 + 96);
        *((_DWORD *)v24 + 24) = 0;
        uint64_t v27 = a3 + v6;
        *(_DWORD *)(v27 + 96) = v26;
        int v28 = *(_DWORD *)((char *)v5 + v6 + 100);
        *((_DWORD *)v24 + 25) = 0;
        *(_DWORD *)(v27 + 100) = v28;
        *(unsigned char *)(v16 + 104) = 1;
      }
      *(void *)(a3 + v6 + 112) = *(void *)((char *)v5 + v6 + 112);
      if (v17[104]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 88, a2);
      }
      if (v17[80]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 64, a2);
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v17 + 6);
      *((void *)v17 + 6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v7[40]) {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 24, a2);
      }
      if (v7[16]) {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6, a2);
      }
      v6 += 120;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionRegisteredScriptParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(unsigned char *)(a1 + 104)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 88, a2);
    }
    if (*(unsigned char *)(a1 + 80)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    }
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 40)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    }
    if (*(unsigned char *)(a1 + 16)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebExtensionRegisteredScriptParameters>::destruct((WTF::StringImpl *)(*(void *)result + 120 * a2), (WTF::StringImpl *)(*(void *)result + 120 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x2222223)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(120 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x78;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebKit::WebExtensionRegisteredScriptParameters>::move(v5, (WTF::StringImpl *)((char *)v5 + 120 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit38WebExtensionRegisteredScriptParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      unint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v4 = &stru_1EEA10550;
    }
    uint64_t v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(a2);
    uint64_t v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

id WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(uint64_t a1)
{
  WTF::createNSArray<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSArray * WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebKit::WebExtensionRegisteredScriptParameters const&)#1}>(a1, (id *)&cf);
  uint64_t v1 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }

  return v1;
}

void sub_1992A4B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSArray * WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebKit::WebExtensionRegisteredScriptParameters const&)#1}>(uint64_t a1@<X0>, id *a2@<X8>)
{
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  id v5 = v4;
  *a2 = v4;
  if (v4) {
    CFRetain(v4);
  }

  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = 120 * v6;
    do
    {
      WTF::RetainPtr<NSSet>::get(a2);
      uint64_t v9 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::toWebAPI(v7);
      unint64_t v10 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v9, v10, v11);

      v7 += 120;
      v8 -= 120;
    }
    while (v8);
  }
}

void sub_1992A4C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCA00;
  CFTypeRef v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCA00;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUpdateRegisteredScripts,WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::updateContentScripts(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A4E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCA28;
  CFTypeRef v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCA28;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingUnregisterContentScripts,WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::unregisterContentScripts(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A50FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = result;
  WTF::StringImpl *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2++;
      *(void *)(*v3 + 8 * v8) = v9;
      unsigned int v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1992A51CC(_Unwind_Exception *exception_object, void *a2)
{
  int v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::RetainPtr<NSData>::RetainPtr(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  *a1 = v3;
  if (v3) {
    CFRetain(v3);
  }

  return a1;
}

void sub_1992A522C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(*(void *)a1 + 120 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(uint64_t a1, uint64_t a2)
{
  int v4 = std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)a1, a2);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](v4 + 24, a2 + 24);
  id v5 = *(_DWORD **)(a2 + 48);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 64), a2 + 64);
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 88), a2 + 88);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

void sub_1992A531C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 80)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  uint64_t v6 = *(WTF::StringImpl **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 40)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  }
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIStorageArea::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  v19[4] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  if ((_MergedGlobals_123 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    v19[0] = v18;
    WTF::AtomStringImpl::add();
    v19[1] = v18;
    WTF::AtomStringImpl::add();
    void v19[2] = v18;
    WTF::AtomStringImpl::add();
    v19[3] = v18;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v17, v19, 4);
    uint64_t v14 = v17;
    uint64_t v17 = 0;
    qword_1EB35A0D8 = v14;
    for (uint64_t i = 3; i != -1; --i)
    {
      uint64_t v16 = v19[i];
      v19[i] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v5);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    _MergedGlobals_123 = 1;
  }
  if (*((void *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    uint64_t v6 = v19[0];
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)*MEMORY[0x1E4F30970];
    *(_DWORD *)*MEMORY[0x1E4F30970] += 2;
  }
  if (qword_1EB35A0D8)
  {
    int v7 = 0;
    for (int j = *((_DWORD *)v6 + 4) >> 8; ; int j = v7 + v9)
    {
      unsigned int v9 = j & *(_DWORD *)(qword_1EB35A0D8 - 8);
      char v10 = *(WTF::StringImpl **)(qword_1EB35A0D8 + 8 * v9);
      if (v10 != (WTF::StringImpl *)-1)
      {
        if (!v10) {
          goto LABEL_11;
        }
        if (v10 == v6) {
          break;
        }
      }
      ++v7;
    }
    char v11 = 1;
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_11:
    char v11 = 0;
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v5);
    if (v11) {
      goto LABEL_17;
    }
LABEL_19:
    if (*(void *)a2)
    {
      if (strcmp(*(const char **)a2, "setAccessLevel")) {
        return 0;
      }
    }
    else if ("setAccessLevel")
    {
      return 0;
    }
    int v12 = 2;
    return *((unsigned __int8 *)this + 52) == v12;
  }
  *(_DWORD *)v6 -= 2;
LABEL_16:
  if ((v11 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_17:
  int v12 = 4;
  return *((unsigned __int8 *)this + 52) == v12;
}

void sub_1992A55F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = 24;
  while (1)
  {
    id v5 = *(WTF::StringImpl **)(v2 + v4);
    *(void *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    v4 -= 8;
    if (v4 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void WebKit::WebExtensionAPIStorageArea::get(uint64_t a1, uint64_t a2, void *a3, WebKit::WebExtensionCallbackHandler **a4, void *a5)
{
  void v57[2] = *(_DWORD **)MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (!v6)
  {
    id v6 = [MEMORY[0x1E4F1CA98] null];
  }
  int v7 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v56 = objc_opt_class();
  char v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v56 count:1];
  char v11 = objc_msgSend(v7, "orderedSetWithObjects:", v8, v9, v10, objc_opt_class(), 0);
  BOOL v12 = WebKit::validateObject(v6, @"items", v11, a5);

  if (v12)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    objc_opt_class();
    int v13 = WTF::dynamic_objc_cast<NSDictionary>(v6);
    uint64_t v14 = v13;
    if (v13)
    {
      if (![v13 count])
      {
        id v30 = WebKit::WebExtensionCallbackHandler::call(*a4, MEMORY[0x1E4F1CC08]);
        goto LABEL_34;
      }
      int v15 = [v14 allKeys];
      WTF::makeVector<WTF::String>(v15, (uint64_t)&v50);
      if (HIDWORD(v54)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v53, (WTF *)((char *)v53 + 8 * HIDWORD(v54)));
      }
      uint64_t v17 = v53;
      if (v53)
      {
        uint64_t v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree(v17, v16);
      }
      uint64_t v53 = v50;
      uint64_t v18 = v51;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v54 = v18;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v16);
    }
    objc_opt_class();
    uint64_t v19 = WTF::dynamic_objc_cast<NSArray>(v6);
    uint64_t v20 = v19;
    if (!v19)
    {
LABEL_18:

      objc_opt_class();
      uint64_t v24 = WTF::dynamic_objc_cast<NSString>(v6);
      if (v24)
      {
        MEMORY[0x19972EAD0](v57, v24);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v50, v57, 1uLL);
        if (HIDWORD(v54)) {
          WTF::VectorDestructor<true,WTF::String>::destruct(v53, (WTF *)((char *)v53 + 8 * HIDWORD(v54)));
        }
        int v26 = v53;
        if (v53)
        {
          uint64_t v53 = 0;
          LODWORD(v54) = 0;
          WTF::fastFree(v26, v25);
        }
        uint64_t v53 = v50;
        uint64_t v27 = v51;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v54 = v27;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v25);
        int v29 = (WTF::StringImpl *)v57[0];
        v57[0] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v28);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }

      {
        uint64_t v45 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v45);
      }
      uint64_t v32 = WebKit::WebProcess::singleton(void)::process;
      uint64_t v49 = *(void *)(a2 + 2120);
      uint64_t v50 = (WTF *)&v49;
      uint64_t v51 = a1 + 52;
      int v52 = &v53;
      id v33 = v14;
      ++*(_DWORD *)(a1 + 48);
      uint64_t v34 = *a4;
      *a4 = 0;
      uint64_t v35 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v36 = 1692;
      *((void *)v36 + 1) = v35;
      *((void *)v36 + 66) = (char *)v36 + 16;
      *((void *)v36 + 67) = 512;
      *((void *)v36 + 68) = 0;
      *((void *)v36 + 70) = 0;
      *((void *)v36 + 69) = 0;
      IPC::Encoder::encodeHeader(v36);
      uint64_t v55 = v36;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v36, (uint64_t)&v50);
      uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v37 = &unk_1EE9FCA50;
      *(void *)(v37 + 8) = v33;
      *(void *)(v37 + 16) = a1;
      *(void *)(v37 + 24) = v34;
      uint64_t v38 = (_DWORD *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v57[0] = (_DWORD *)v37;
      v57[1] = v38;
      (*(void (**)(uint64_t, IPC::Encoder **, _DWORD **, void))(*(void *)(v32 + 24) + 40))(v32 + 24, &v55, v57, 0);
      unint64_t v40 = v57[0];
      v57[0] = 0;
      if (v40) {
        (*(void (**)(_DWORD *))(*(void *)v40 + 8))(v40);
      }
      uint64_t v41 = v55;
      uint64_t v55 = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v39);
        WTF::fastFree(v43, v44);
      }
      goto LABEL_34;
    }
    if ([v19 count])
    {
      WTF::makeVector<WTF::String>(v20, (uint64_t)&v50);
      if (HIDWORD(v54)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v53, (WTF *)((char *)v53 + 8 * HIDWORD(v54)));
      }
      int v22 = v53;
      if (v53)
      {
        uint64_t v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree(v22, v21);
      }
      uint64_t v53 = v50;
      uint64_t v23 = v51;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v54 = v23;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v21);
      goto LABEL_18;
    }
    id v31 = WebKit::WebExtensionCallbackHandler::call(*a4, MEMORY[0x1E4F1CC08]);

LABEL_34:
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v42);
  }
}

void sub_1992A5B34(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,IPC::Encoder *a22)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, v26);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::getBytesInUse(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  void v46[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  id v8 = a3;
  if (!v8)
  {
    id v8 = [MEMORY[0x1E4F1CA98] null];
    if (!v8) {
      goto LABEL_4;
    }
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v10 = objc_opt_class();
  uint64_t v45 = objc_opt_class();
  char v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v45 count:1];
  BOOL v12 = objc_msgSend(v9, "orderedSetWithObjects:", v10, v11, objc_opt_class(), 0);
  BOOL v13 = WebKit::validateObject(v8, @"keys", v12, a5);

  if (v13)
  {
LABEL_4:
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    objc_opt_class();
    uint64_t v14 = WTF::dynamic_objc_cast<NSArray>(v8);
    int v15 = v14;
    if (v14)
    {
      WTF::makeVector<WTF::String>(v14, (uint64_t)&v39);
      if (HIDWORD(v43)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v42, (WTF *)((char *)v42 + 8 * HIDWORD(v43)));
      }
      uint64_t v17 = v42;
      if (v42)
      {
        uint64_t v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree(v17, v16);
      }
      uint64_t v42 = v39;
      uint64_t v18 = v40;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v43 = v18;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v16);
    }
    else
    {
      objc_opt_class();
      uint64_t v19 = WTF::dynamic_objc_cast<NSString>(v8);
      if (v19)
      {
        MEMORY[0x19972EAD0](v46, v19);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v39, (_DWORD **)v46, 1uLL);
        if (HIDWORD(v43)) {
          WTF::VectorDestructor<true,WTF::String>::destruct(v42, (WTF *)((char *)v42 + 8 * HIDWORD(v43)));
        }
        int v21 = v42;
        if (v42)
        {
          uint64_t v42 = 0;
          LODWORD(v43) = 0;
          WTF::fastFree(v21, v20);
        }
        uint64_t v42 = v39;
        uint64_t v22 = v40;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v43 = v22;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v20);
        uint64_t v24 = v46[0];
        v46[0] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v23);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
    }
    {
      uint64_t v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v36);
    }
    uint64_t v25 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v38 = *(void *)(a2 + 2120);
    uint64_t v39 = (WTF *)&v38;
    uint64_t v40 = a1 + 52;
    uint64_t v41 = &v42;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v26 = *a4;
    *a4 = 0;
    uint64_t v27 = *(void *)(*(void *)(a1 + 24) + 24);
    int v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v28 = 1693;
    *((void *)v28 + 1) = v27;
    *((void *)v28 + 66) = (char *)v28 + 16;
    *((void *)v28 + 67) = 512;
    *((void *)v28 + 68) = 0;
    *((void *)v28 + 70) = 0;
    *((void *)v28 + 69) = 0;
    IPC::Encoder::encodeHeader(v28);
    unsigned int v44 = v28;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v28, (uint64_t)&v39);
    int v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)int v29 = &unk_1EE9FCAA8;
    *((void *)v29 + 1) = a1;
    *((void *)v29 + 2) = v26;
    id v30 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v46[0] = v29;
    v46[1] = v30;
    (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)(v25 + 24) + 40))(v25 + 24, &v44, v46, 0);
    uint64_t v32 = v46[0];
    v46[0] = 0;
    if (v32) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
    }
    id v33 = v44;
    unsigned int v44 = 0;
    if (v33)
    {
      IPC::Encoder::~Encoder(v33, v31);
      WTF::fastFree(v34, v35);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v31);
  }
}

void sub_1992A6128(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, IPC::Encoder *a20,uint64_t a21,WTF::StringImpl *a22)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  uint64_t v27 = a22;
  a22 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, v28);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::set(uint64_t a1, uint64_t a2, void *a3, JSObjectRef **a4, void *a5)
{
  id v9 = a3;
  if ([v9 count])
  {
    uint64_t v37 = 0;
    uint64_t v38 = &v37;
    uint64_t v39 = 0x3032000000;
    uint64_t v40 = __Block_byref_object_copy__12;
    uint64_t v41 = __Block_byref_object_dispose__12;
    id v42 = 0;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = ___ZN6WebKit26WebExtensionAPIStorageArea3setERNS_7WebPageEP12NSDictionaryON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSString_block_invoke;
    v36[3] = &unk_1E5813B60;
    v36[4] = &v37;
    uint64_t v10 = WebKit::mapObjects<NSDictionary>(v9, v36);
    char v11 = v10;
    BOOL v12 = (id *)(v38 + 5);
    if (v38[5])
    {
      BOOL v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      int v15 = WebKit::toErrorString(0, v13, &cfstr_ItIsNotJsonSer.isa, v14);
    }
    else
    {
      if (*(unsigned char *)(a1 + 52) != 4
        || (obj = 0, int v17 = WebKit::anyItemsExceedQuota(v10, 0x2000, &obj), objc_storeStrong(v12, obj), !v17))
      {
        {
          uint64_t v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v32);
        }
        uint64_t v19 = WebKit::WebProcess::singleton(void)::process;
        uint64_t v34 = *(void *)(a2 + 2120);
        uint64_t v20 = WebKit::encodeJSONString(v11, 0, 0);
        MEMORY[0x19972EAD0](&v33, v20);
        ++*(_DWORD *)(a1 + 48);
        int v21 = *a4;
        *a4 = 0;
        uint64_t v22 = *(void *)(*(void *)(a1 + 24) + 24);
        uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v23 = 1695;
        *((void *)v23 + 1) = v22;
        *((void *)v23 + 66) = (char *)v23 + 16;
        *((void *)v23 + 67) = 512;
        *((void *)v23 + 68) = 0;
        *((void *)v23 + 70) = 0;
        *((void *)v23 + 69) = 0;
        IPC::Encoder::encodeHeader(v23);
        unsigned int v44 = v23;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v34);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v23, *(unsigned char *)(a1 + 52));
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, (uint64_t *)&v33);
        uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v24 = &unk_1EE9FCAF0;
        v24[1] = a1;
        void v24[2] = v21;
        uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v43[0] = v24;
        v43[1] = v25;
        (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v19 + 24) + 40))(v19 + 24, &v44, v43, 0);
        uint64_t v27 = v43[0];
        v43[0] = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        int v28 = v44;
        unsigned int v44 = 0;
        if (v28)
        {
          IPC::Encoder::~Encoder(v28, v26);
          WTF::fastFree(v30, v31);
        }
        int v29 = v33;
        id v33 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }

        goto LABEL_19;
      }
      BOOL v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      int v15 = WebKit::toErrorString(0, v13, &cfstr_ItExceededMaxi.isa, v18);
    }
    *a5 = v15;

LABEL_19:
    _Block_object_dispose(&v37, 8);

    goto LABEL_20;
  }
  id v16 = WebKit::WebExtensionCallbackHandler::call(*a4);
LABEL_20:
}

void sub_1992A66B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

id ___ZN6WebKit26WebExtensionAPIStorageArea3setERNS_7WebPageEP12NSDictionaryON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSString_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (([v7 isUndefined] & 1) != 0 || *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    id v8 = 0;
  }
  else
  {
    id v8 = WebKit::encodeJSONString(v7, 1, 0);
    if (!v8) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    }
  }

  return v8;
}

void sub_1992A6948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::remove(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  uint64_t v10 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v11 = objc_opt_class();
  v33[0] = objc_opt_class();
  BOOL v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
  BOOL v13 = objc_msgSend(v10, "orderedSetWithObjects:", v11, v12, 0);
  LOBYTE(a5) = WebKit::validateObject(v9, @"keys", v13, a5);

  if (a5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      WTF::makeVector<WTF::String>(v9, (uint64_t)v29);
    }
    else
    {
      MEMORY[0x19972EAD0](v32, v9);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v29, (_DWORD **)v32, 1uLL);
      int v15 = v32[0];
      v32[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    {
      uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v16 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v28 = *(void *)(a2 + 2120);
    v32[0] = (WTF::StringImpl *)&v28;
    v32[1] = (WTF::StringImpl *)(a1 + 52);
    void v32[2] = (WTF::StringImpl *)v29;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v17 = *a4;
    *a4 = 0;
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v19 = 1694;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    id v31 = v19;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v19, (uint64_t)v32);
    uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v20 = &unk_1EE9FCB18;
    v20[1] = a1;
    v20[2] = v17;
    uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v30[0] = v20;
    v30[1] = v21;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v16 + 24) + 40))(v16 + 24, &v31, v30, 0);
    uint64_t v23 = v30[0];
    v30[0] = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = v31;
    id v31 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v22);
      WTF::fastFree(v25, v26);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v22);
  }
}

void sub_1992A6C4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, IPC::Encoder *a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIStorageArea::clear(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v4 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v16 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 24);
  id v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)id v7 = 1691;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v16);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, *(unsigned char *)(a1 + 52));
  id v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9FCB40;
  v8[1] = a1;
  v8[2] = v5;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v8;
  v17[1] = v9;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v4 + 24) + 40))(v4 + 24, &v18, v17, 0);
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void sub_1992A6FA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::setAccessLevel(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  if ((byte_1EB35A0D1 & 1) == 0)
  {
    v33[0] = @"accessLevel";
    qword_1EB35A0E0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
    byte_1EB35A0D1 = 1;
  }
  id v31 = @"accessLevel";
  uint64_t v32 = objc_opt_class();
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
  if (WebKit::validateDictionary(v9, @"accessOptions", (void *)qword_1EB35A0E0, v10, a5))
  {
    uint64_t v11 = [v9 objectForKeyedSubscript:@"accessLevel"];
    if (([v11 isEqualToString:@"TRUSTED_CONTEXTS"] & 1) != 0
      || ([v11 isEqualToString:@"TRUSTED_AND_UNTRUSTED_CONTEXTS"] & 1) != 0)
    {
      char v13 = [v11 isEqualToString:@"TRUSTED_CONTEXTS"];
      {
        uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v27);
      }
      uint64_t v14 = WebKit::WebProcess::singleton(void)::process;
      uint64_t v28 = *(void *)(a2 + 2120);
      ++*(_DWORD *)(a1 + 48);
      uint64_t v15 = *a4;
      *a4 = 0;
      uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 1696;
      *((void *)v17 + 1) = v16;
      *((void *)v17 + 66) = (char *)v17 + 16;
      *((void *)v17 + 67) = 512;
      *((void *)v17 + 68) = 0;
      *((void *)v17 + 70) = 0;
      *((void *)v17 + 69) = 0;
      IPC::Encoder::encodeHeader(v17);
      id v30 = v17;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v28);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v17, *(unsigned char *)(a1 + 52));
      uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1992A73CCLL);
      }
      unsigned char *v18 = v13 ^ 1;
      uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v20 = &unk_1EE9FCB68;
      v20[1] = a1;
      v20[2] = v15;
      uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v29[0] = v20;
      v29[1] = v21;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v14 + 24) + 40))(v14 + 24, &v30, v29, 0);
      uint64_t v23 = v29[0];
      v29[0] = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      uint64_t v24 = v30;
      id v30 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v22);
        WTF::fastFree(v25, v26);
      }
    }
    else
    {
      WebKit::toErrorString(0, &cfstr_Accesslevel.isa, &cfstr_ItMustSpecifyE_9.isa, v12);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
}

void sub_1992A7430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIStorageArea::onChanged(WebKit::WebExtensionAPIStorageArea *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 31;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorageArea &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorageArea &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992A76C4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1992A77B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v24 = a2;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  id v9 = 0;
  unsigned int v10 = *((_DWORD *)*a2 + 4) >> 8;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v10 & v8;
    char v13 = (WTF::StringImpl **)(v6 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 != (WTF::StringImpl *)-1) {
      break;
    }
    id v9 = (WTF::StringImpl **)(v6 + 8 * v12);
LABEL_10:
    unsigned int v10 = i + v12;
  }
  if (!v14)
  {
    if (v9)
    {
      void *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      char v13 = v9;
    }
    uint64_t result = (uint64_t *)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v13, (WTF::StringImpl *)a2, &v24);
    uint64_t v15 = *v4;
    if (*v4) {
      int v16 = *(_DWORD *)(v15 - 12) + 1;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(v15 - 12) = v16;
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(v4, v13);
        char v13 = (WTF::StringImpl **)result;
        uint64_t v20 = *v4;
        if (*v4) {
          unint64_t v23 = *(unsigned int *)(v20 - 4);
        }
        else {
          unint64_t v23 = 0;
        }
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    uint64_t v19 = v20 + 8 * v23;
    char v18 = 1;
    goto LABEL_30;
  }
  if (v14 != *a2) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(unsigned int *)(v6 - 4);
  }
  char v18 = 0;
  uint64_t v19 = v6 + 8 * v17;
LABEL_30:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v19;
  *(unsigned char *)(a3 + 16) = v18;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    do
    {
      char v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = 0;
          int v18 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            uint64_t v19 = v18 & v16;
            int v18 = ++v17 + v19;
          }
          while (*(void *)(v15 + 8 * v19));
          uint64_t v20 = (WTF::StringImpl **)(v15 + 8 * v19);
          void *v20 = 0;
          int v21 = *v13;
          WTF *v13 = 0;
          void *v20 = v21;
          uint64_t v22 = *v13;
          WTF *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            unsigned int v12 = v20;
          }
        }
        else
        {
          WTF *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionDataType const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, **(unsigned char **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FCA50;
  uint64_t v2 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  return a1;
}

{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9FCA50;
  uint64_t v2 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCA68[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v3 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992A7D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FCA68[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGet,WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FCA68[v2])(&v3, &v1);
}

void sub_1992A7DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCA68[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIStorageArea::get(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v12 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v12);
    }
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    id v14 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    WebKit::parseJSON(v6, 0, 0);
    id v14 = (id)objc_claimAutoreleasedReturnValue();

    WebKit::mapObjects<NSDictionary>(v14, &__block_literal_global_34);
    char v7 = (WebKit *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = (objc_object *)v7;
    if (*(void *)a1)
    {
      uint64_t v10 = WebKit::mergeDictionaries(v7, *(NSDictionary **)a1, v8);

      uint64_t v9 = (objc_object *)v10;
    }
    id v11 = WebKit::WebExtensionCallbackHandler::call(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v9);
  }
}

id ___ZZN6WebKit26WebExtensionAPIStorageArea3getERNS_7WebPageEP11objc_objectON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSStringENK3__0clEONSt12experimental15fundamentals_v38expectedINS5_6StringESM_EE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  char v3 = WebKit::parseJSON(a3, 1, 0);

  return v3;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCAA8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCAA8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v17 = *((void *)a2 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
            unint64_t v15 = 0;
            uint64_t v26 = *(void *)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
              uint64_t v16 = *(void *)a2;
              unint64_t v15 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        char v6 = (unsigned __int8 *)*((void *)a2 + 2);
        char v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (v8)
          {
            unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
            if (v5 < v9 || v5 - v9 <= 7)
            {
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v19 = *((void *)a2 + 3);
              if (v19)
              {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
                uint64_t v29 = *(void *)a2;
                uint64_t v30 = *((void *)a2 + 1);
                uint64_t v31 = *((void *)a2 + 3);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                if (v31)
                {
                  if (v30) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
                  }
                }
              }
              goto LABEL_28;
            }
            int v11 = 0;
            uint64_t v12 = (uint64_t *)(v4 + v9);
            uint64_t v13 = *v12;
            *((void *)a2 + 2) = v12 + 1;
            uint64_t v35 = v13;
            int v36 = 0;
            char v37 = 1;
          }
          else
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v38);
            if (!v39)
            {
LABEL_28:
              uint64_t v20 = *(void *)a2;
              uint64_t v21 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v22 = *((void *)a2 + 3);
              if (v22 && v21) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
              }
              v32[0] = 0;
              char v34 = 0;
              goto LABEL_30;
            }
            uint64_t v35 = v38;
            int v11 = 1;
            int v36 = 1;
            char v37 = 1;
          }
          v32[0] = 0;
          int v33 = -1;
          ((void (*)(uint64_t *, unsigned char *, uint64_t *))off_1EE9FCAD0[v11])(&v38, v32, &v35);
          int v33 = v11;
          char v34 = 1;
          if (!v37 || v36 == -1 || (((void (*)(uint64_t *, uint64_t *))off_1EE9FCAC0[v36])(&v38, &v35), v34))
          {
LABEL_20:
            WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v32);
            if (v34)
            {
              if (v33 != -1) {
                ((void (*)(uint64_t *, unsigned char *))off_1EE9FCAC0[v33])(&v35, v32);
              }
            }
            return;
          }
LABEL_30:
          uint64_t v23 = *(void *)a2;
          uint64_t v24 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v25 = *((void *)a2 + 3);
          if (!v25 || !v24 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23), !v34))
          {
            IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
            return;
          }
          goto LABEL_20;
        }
        unint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
      }
      goto LABEL_28;
    }
  }
  id v14 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v14);
}

void sub_1992A8430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FCAC0[a12])(&a16, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::StorageGetBytesInUse,WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)&v1);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FCAC0[v2])(&v3, &v1);
  }
}

void sub_1992A8520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCAC0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJmN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJmS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJmN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJmS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJmN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJmS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIStorageArea::getBytesInUse(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      char v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    unsigned int v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    unsigned int v8 = [NSNumber numberWithUnsignedLong:*(void *)a2];
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCAF0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCAF0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSet,WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::set(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unsigned int v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A8874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCB18;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCB18;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageRemove,WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::remove(WebKit::WebPage &,objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unsigned int v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A8AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCB40;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCB40;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageClear,WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIStorageArea::clear(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unsigned int v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A8D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCB68;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCB68;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::StorageSetAccessLevel,WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIStorageArea::setAccessLevel(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unsigned int v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992A8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIStorage::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  if (!*(void *)a2)
  {
    if (!"session") {
      return *((unsigned char *)this[3] + 120) || *((unsigned char *)this + 8) == 0;
    }
    return 0;
  }
  if (strcmp(*(const char **)a2, "session")) {
    return 0;
  }
  return *((unsigned char *)this[3] + 120) || *((unsigned char *)this + 8) == 0;
}

uint64_t WebKit::WebExtensionAPIStorage::local(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    char v6 = 1;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, char *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  char v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x40);
  uint64_t result = WebKit::WebExtensionAPIStorageArea::WebExtensionAPIStorageArea(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992A9194(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIStorage::session(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    char v6 = 2;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIStorage::sync(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    char v6 = 4;
    WebKit::WebExtensionAPIStorageArea::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionDataType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIStorage::onChanged(WebKit::WebExtensionAPIStorage *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    unsigned __int8 v6 = 31;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIStorage &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992A9470(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(WebCore *a1, void *a2, char a3, int a4)
{
  char v14 = a3;
  if (a4 != 1 || *((void *)a1 + 18))
  {
    if (*a2) {
      unsigned __int8 v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unsigned __int8 v6 = &stru_1EEA10550;
    }
    WebKit::parseJSON(v6, 0, 0);
    id v13 = (id)objc_claimAutoreleasedReturnValue();

    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v12 = v15;
    id v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)id v7 = &unk_1EE9FCBE8;
    *((void *)v7 + 1) = &v13;
    *((void *)v7 + 2) = &v12;
    *((void *)v7 + 3) = &v14;
    unint64_t v15 = v7;
    uint64_t v8 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a4);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v15, v8);
    char v10 = v15;
    unint64_t v15 = 0;
    if (v10) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v10 + 8))(v10);
    }
    char v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_1992A9620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, void *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v12);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIStorageArea::WebExtensionAPIStorageArea(WebKit::WebExtensionAPIObject *a1, const WebKit::WebExtensionAPIObject *a2, char a3)
{
  uint64_t v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(void *)uint64_t v6 = &unk_1EE9FCB90;
  *(void *)(v6 + 40) = &unk_1EE9FCBC0;
  *(unsigned char *)(v6 + 52) = a3;
  *(void *)(v6 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10[0] = v10[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, v10, a2);
  uint64_t v8 = v10[0];
  v10[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void sub_1992A97B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v11 = *((void *)v9 + 7);
  *((void *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v11 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v11 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorageArea::~WebExtensionAPIStorageArea(WebKit::WebExtensionAPIStorageArea *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FCB90;
  *((void *)this + 5) = &unk_1EE9FCBC0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FCB90;
  *((void *)this + 5) = &unk_1EE9FCBC0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v4, v5);
}

void non-virtual thunk to'WebKit::WebExtensionAPIStorageArea::~WebExtensionAPIStorageArea(WebKit::WebExtensionAPIStorageArea *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIStorageArea *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FCB90;
  *(void *)this = &unk_1EE9FCBC0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIStorageArea *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FCB90;
  *(void *)this = &unk_1EE9FCBC0;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v5, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(WTF::String const&,WebKit::WebExtensionDataType,WebKit::WebExtensionContentWorldType)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, int a2, WebKit::WebExtensionAPINamespace *this)
{
  int v5 = (WebKit::WebExtensionAPIStorage *)WebKit::WebExtensionAPINamespace::storage(this);
  uint64_t v6 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIStorage::onChanged(v5);
  id v7 = **(objc_object ***)(a1 + 8);
  if (**(void **)(a1 + 16)) {
    uint64_t v8 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = (objc_object *)&stru_1EEA10550;
  }
  uint64_t v16 = v8;
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v6, v7, v8);

  unint64_t v9 = (WebKit::WebExtensionAPIStorage *)WebKit::WebExtensionAPINamespace::storage(this);
  int v10 = **(unsigned __int8 **)(a1 + 24);
  if (v10 == 4)
  {
    uint64_t v11 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::sync(v9);
  }
  else if (v10 == 2)
  {
    uint64_t v11 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::session(v9);
  }
  else
  {
    uint64_t v11 = (WebKit::WebExtensionAPIStorageArea *)WebKit::WebExtensionAPIStorage::local(v9);
  }
  uint64_t v12 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIStorageArea::onChanged(v11);
  id v13 = *(void **)(a1 + 16);
  char v14 = **(objc_object ***)(a1 + 8);
  if (*v13) {
    unint64_t v15 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v15 = (objc_object *)&stru_1EEA10550;
  }
  uint64_t v17 = v15;
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v12, v14, v15);
}

void sub_1992A9C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1992AA148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::parseTabUpdateOptions(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v42[7] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = @"properties";
  if (byte_1EB35A0E9 == 1)
  {
    unint64_t v9 = (void *)qword_1EB35A100;
  }
  else
  {
    v41[0] = @"active";
    v42[0] = objc_opt_class();
    v41[1] = @"highlighted";
    v42[1] = objc_opt_class();
    void v41[2] = @"muted";
    void v42[2] = objc_opt_class();
    void v41[3] = @"openerTabId";
    v42[3] = objc_opt_class();
    void v41[4] = @"pinned";
    v42[4] = objc_opt_class();
    v41[5] = @"selected";
    v42[5] = objc_opt_class();
    v41[6] = @"url";
    v42[6] = objc_opt_class();
    unint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:v41 count:7];
    qword_1EB35A100 = (uint64_t)v9;
    byte_1EB35A0E9 = 1;
  }
  if (WebKit::validateDictionary(v7, @"properties", 0, v9, a4))
  {
    int v10 = WebKit::objectForKey<NSString>(v7, @"url", 1);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 24);
      MEMORY[0x19972EAD0](&v39, v10);
      MEMORY[0x19972E8B0](__y, v11 + 40, &v39, 0);
      std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(a3 + 16, __y);
      char v14 = (WTF::StringImpl *)__y[0];
      __y[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v16 = v39;
      char v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v12);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      if (!*(unsigned char *)(a3 + 56))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        goto LABEL_56;
      }
      if ((*(unsigned char *)(a3 + 24) & 1) == 0)
      {
        WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_IsNotAValidUrl_0.isa, v13, v10, v39, __y[0]);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:
        uint64_t v15 = 0;
        *a4 = v17;
LABEL_35:

        goto LABEL_36;
      }
    }

    uint64_t v18 = WebKit::objectForKey<NSNumber>(v7, @"openerTabId");
    int v10 = v18;
    if (!v18) {
      goto LABEL_22;
    }
    [v18 doubleValue];
    double v21 = v20;
    if (v20 == -1.0)
    {
      unint64_t v22 = -256;
      int v23 = 1;
      LOBYTE(v24) = -2;
      goto LABEL_20;
    }
    LOBYTE(v24) = 0;
    int v23 = 0;
    if ((v20 < 0.0 || ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*(void *)&v20 - 1) > 0xFFFFFFFFFFFFELL)
    {
      unint64_t v22 = 0;
      goto LABEL_20;
    }
    unint64_t v22 = 0;
    if (v20 >= 1.84467441e19)
    {
LABEL_20:
      unint64_t v25 = v22 & 0xFFFFFFFFFFFFFF00 | v24;
      *(void *)(a3 + 136) = v25;
      *(unsigned char *)(a3 + 144) = v23;
      if (!v23 || v25 == -2)
      {
        WebKit::toErrorString(0, &cfstr_Openertabid.isa, &cfstr_IsNotATabIdent.isa, v19, v10, v39, __y[0]);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_34;
      }
LABEL_22:

      uint64_t v26 = WebKit::objectForKey<NSNumber>(v7, @"active");
      uint64_t v27 = v26;
      if (v26) {
        *(_WORD *)(a3 + 152) = [v26 BOOLValue] | 0x100;
      }

      uint64_t v28 = WebKit::objectForKey<NSNumber>(v7, @"pinned");
      uint64_t v29 = v28;
      if (v28) {
        *(_WORD *)(a3 + 156) = [v28 BOOLValue] | 0x100;
      }

      uint64_t v30 = WebKit::objectForKey<NSNumber>(v7, @"muted");
      uint64_t v31 = v30;
      if (v30) {
        *(_WORD *)(a3 + 160) = [v30 BOOLValue] | 0x100;
      }

      uint64_t v32 = WebKit::objectForKey<NSNumber>(v7, @"selected");
      int v33 = v32;
      if (v32) {
        *(_WORD *)(a3 + 154) = [v32 BOOLValue] | 0x100;
      }

      char v34 = WebKit::objectForKey<NSNumber>(v7, @"highlighted");
      int v10 = v34;
      if (v34) {
        *(_WORD *)(a3 + 154) = [v34 BOOLValue] | 0x100;
      }
      uint64_t v15 = 1;
      goto LABEL_35;
    }
    if (modf(v20, (long double *)__y) != 0.0)
    {
      int v23 = 0;
      LOBYTE(v24) = 0;
      unint64_t v22 = 0;
      goto LABEL_20;
    }
    unint64_t v38 = (unint64_t)v21;
    if ((unint64_t)v21 != -1)
    {
      unint64_t v22 = v38 & 0xFFFFFFFFFFFFFF00;
      LOBYTE(v24) = -2;
      if (v38 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v22 = -256;
      }
      else {
        unint64_t v24 = (unint64_t)v21;
      }
      int v23 = 1;
      goto LABEL_20;
    }
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x1992AA608);
  }
  uint64_t v15 = 0;
LABEL_36:

  return v15;
}

void sub_1992AA714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::parseSendMessageOptions(void *a1, uint64_t a2, void *a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = @"options";
  if (byte_1EB35A0ED == 1)
  {
    id v7 = (void *)qword_1EB35A120;
  }
  else
  {
    double v21 = @"frameId";
    v22[0] = objc_opt_class();
    id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v21 count:1];
    qword_1EB35A120 = (uint64_t)v7;
    byte_1EB35A0ED = 1;
  }
  if (WebKit::validateDictionary(v5, @"options", 0, v7, a3))
  {
    uint64_t v8 = WebKit::objectForKey<NSNumber>(v5, @"frameId");
    unint64_t v9 = v8;
    if (!v8)
    {
LABEL_14:
      uint64_t v15 = 1;
LABEL_25:

      goto LABEL_26;
    }
    [v8 doubleValue];
    double v12 = v11;
    if (v11 == 0.0)
    {
      unint64_t v13 = -256;
      LOBYTE(v14) = -2;
    }
    else if (v11 == -1.0)
    {
      unint64_t v13 = -256;
      LOBYTE(v14) = -3;
    }
    else
    {
      BOOL v18 = (v11 < 0.0 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v11 - 1) > 0xFFFFFFFFFFFFELL;
      if (v18 || v11 >= 1.84467441e19 || modf(v11, &v20) != 0.0) {
        goto LABEL_24;
      }
      unint64_t v14 = (unint64_t)v12;
      if ((unint64_t)v12 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1992AAA18);
      }
      unint64_t v13 = v14 & 0xFFFFFFFFFFFFFF00;
    }
    unint64_t v16 = v13 & 0xFFFFFFFFFFFFFF00 | v14;
    if (v16 != -3)
    {
      if (!*(unsigned char *)(a2 + 8)) {
        *(unsigned char *)(a2 + 8) = 1;
      }
      *(void *)a2 = v16;
      goto LABEL_14;
    }
LABEL_24:
    WebKit::toErrorString(0, &cfstr_Frameid_0.isa, &cfstr_ItIsNotAFrameI.isa, v10);
    uint64_t v15 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_25;
  }
  uint64_t v15 = 0;
LABEL_26:

  return v15;
}

void sub_1992AAA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::parseScriptOptions(void *a1, uint64_t a2, void *a3)
{
  v48[5] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (byte_1EB35A0EF == 1)
  {
    uint64_t v6 = (void *)qword_1EB35A130;
  }
  else
  {
    v47[0] = @"allFrames";
    v48[0] = objc_opt_class();
    v47[1] = @"code";
    v48[1] = objc_opt_class();
    void v47[2] = @"tabId";
    v48[2] = objc_opt_class();
    v47[3] = @"file";
    v48[3] = objc_opt_class();
    void v47[4] = @"frameId";
    v48[4] = objc_opt_class();
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v48 forKeys:v47 count:5];
    qword_1EB35A130 = (uint64_t)v6;
    byte_1EB35A0EF = 1;
  }
  if (!WebKit::validateDictionary(v5, @"details", 0, v6, a3)) {
    goto LABEL_53;
  }
  id v7 = [v5 objectForKeyedSubscript:@"file"];
  if (v7)
  {
    uint64_t v8 = [v5 objectForKeyedSubscript:@"code"];
    BOOL v9 = v8 == 0;

    if (!v9)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_7.isa, v10);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:
      uint64_t v24 = 0;
      *a3 = v11;
LABEL_54:

      return v24;
    }
  }
  double v12 = [v5 objectForKeyedSubscript:@"file"];
  if (v12)
  {
  }
  else
  {
    unint64_t v13 = [v5 objectForKeyedSubscript:@"code"];
    BOOL v14 = v13 == 0;

    if (v14)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItMustSpecifyE_12.isa, v15);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
  }
  unint64_t v16 = WebKit::objectForKey<NSNumber>(v5, @"allFrames");
  if ([v16 BOOLValue])
  {
    id v17 = [v5 objectForKeyedSubscript:@"frameId"];
    BOOL v18 = v17 == 0;

    if (!v18)
    {
      WebKit::toErrorString(0, &cfstr_Details.isa, &cfstr_ItCannotSpecif_8.isa, v19);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
  }
  else
  {
  }
  long double v20 = [v5 objectForKeyedSubscript:@"file"];
  if (v20)
  {
    MEMORY[0x19972EAD0](&v46, v20);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v44, (_DWORD **)&v46, 1uLL);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 32, &v44);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v21);
    int v23 = v46;
    uint64_t v46 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }

  unsigned int v44 = [v5 objectForKeyedSubscript:@"code"];
  if (v44)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2 + 80, &v44);
  }
  unint64_t v25 = objc_msgSend(v5, "objectForKeyedSubscript:", @"frameId", v44);
  uint64_t v26 = v25;
  if (!v25)
  {
    uint64_t v32 = [v5 objectForKeyedSubscript:@"allFrames"];
    objc_opt_class();
    int v33 = WTF::dynamic_objc_cast<NSNumber>(v32);

    if (v33)
    {
      char v34 = [v33 BOOLValue];

      if (v34) {
        goto LABEL_35;
      }
    }
    uint64_t v46 = (WTF::StringImpl *)-2;
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v44, (uint64_t *)&v46, 1uLL);
    std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &v44);
LABEL_33:
    char v37 = v44;
    if (v44)
    {
      unsigned int v44 = 0;
      int v45 = 0;
      WTF::fastFree(v37, v35);
    }
LABEL_35:

    unint64_t v38 = [v5 objectForKeyedSubscript:@"cssOrigin"];
    char v39 = v38;
    if (v38)
    {
      if (![v38 isEqualToString:@"user"])
      {
        if ([v39 isEqualToString:@"author"])
        {
          uint64_t v24 = 1;
          *(unsigned char *)(a2 + 129) = 1;
        }
        else
        {
          WebKit::toErrorString(0, &cfstr_Cssorigin.isa, &cfstr_ItMustSpecifyE_7.isa, v40);
          uint64_t v24 = 0;
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_39;
      }
      *(unsigned char *)(a2 + 129) = 0;
    }
    uint64_t v24 = 1;
LABEL_39:

    goto LABEL_54;
  }
  [v25 doubleValue];
  double v29 = v28;
  if (v28 == 0.0)
  {
    unint64_t v30 = -256;
    LOBYTE(v31) = -2;
    goto LABEL_31;
  }
  if (v28 == -1.0)
  {
    unint64_t v30 = -256;
    LOBYTE(v31) = -3;
    goto LABEL_31;
  }
  BOOL v42 = (v28 < 0.0 || ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
     && (unint64_t)(*(void *)&v28 - 1) > 0xFFFFFFFFFFFFELL;
  if (v42 || v28 >= 1.84467441e19 || modf(v28, (long double *)&v44) != 0.0)
  {
LABEL_52:
    WebKit::toErrorString(0, &cfstr_Frameid_0.isa, &cfstr_ItIsNotAFrameI.isa, v27);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_53:
    uint64_t v24 = 0;
    goto LABEL_54;
  }
  unint64_t v31 = (unint64_t)v29;
  if ((unint64_t)v29 != -1)
  {
    unint64_t v30 = v31 & 0xFFFFFFFFFFFFFF00;
LABEL_31:
    int v36 = (WTF::StringImpl *)(v30 & 0xFFFFFFFFFFFFFF00 | v31);
    if (v36 != (WTF::StringImpl *)-3)
    {
      uint64_t v46 = v36;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v44, (uint64_t *)&v46, 1uLL);
      std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &v44);
      goto LABEL_33;
    }
    goto LABEL_52;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

void sub_1992AB074(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF::StringImpl *a11)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::isValid(uint64_t a1, char a2, void *a3, NSString *a4)
{
  BOOL v4 = a1 != -2 && a2 != 0;
  if (!v4)
  {
    if (a2 && a1 == -2)
    {
      id v7 = @"'tabs.TAB_ID_NONE' is not allowed";
    }
    else
    {
      if (a2)
      {
        WebKit::toErrorString(0, &cfstr_Tabid.isa, &cfstr_LluIsNotATabId.isa, a4, a1);
LABEL_13:
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v4;
      }
      id v7 = @"it is not a tab identifier";
    }
    WebKit::toErrorString(0, &cfstr_Tabid.isa, &v7->isa, a4);
    goto LABEL_13;
  }
  return v4;
}

{
  BOOL v4;
  __CFString *v7;

  BOOL v4 = a1 != -2 && a2 != 0;
  if (!v4)
  {
    if (a2 && a1 == -2)
    {
      id v7 = @"'windows.WINDOW_ID_NONE' is not allowed";
    }
    else
    {
      if (a2)
      {
        WebKit::toErrorString(0, &cfstr_Windowid.isa, &cfstr_LluIsNotAWindo.isa, a4, a1);
LABEL_13:
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v4;
      }
      id v7 = @"it is not a window identifier";
    }
    WebKit::toErrorString(0, &cfstr_Windowid.isa, &v7->isa, a4);
    goto LABEL_13;
  }
  return v4;
}

BOOL WebKit::WebExtensionAPITabs::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  v18[4] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  if ((byte_1EB35A0F0 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WTF::AtomStringImpl::add();
    v18[1] = v17;
    WTF::AtomStringImpl::add();
    void v18[2] = v17;
    WTF::AtomStringImpl::add();
    v18[3] = v17;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v16, v18, 4);
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    qword_1EB35A138 = v13;
    for (uint64_t i = 3; i != -1; --i)
    {
      uint64_t v15 = v18[i];
      v18[i] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v5);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    byte_1EB35A0F0 = 1;
  }
  if (*((void *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    uint64_t v6 = v18[0];
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)*MEMORY[0x1E4F30970];
    *(_DWORD *)*MEMORY[0x1E4F30970] += 2;
  }
  if (qword_1EB35A138)
  {
    int v7 = 0;
    for (int j = *((_DWORD *)v6 + 4) >> 8; ; int j = v7 + v9)
    {
      unsigned int v9 = j & *(_DWORD *)(qword_1EB35A138 - 8);
      int v10 = *(WTF::StringImpl **)(qword_1EB35A138 + 8 * v9);
      if (v10 != (WTF::StringImpl *)-1)
      {
        if (!v10) {
          goto LABEL_11;
        }
        if (v10 == v6) {
          break;
        }
      }
      ++v7;
    }
    int v11 = 1;
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_11:
    int v11 = 0;
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v5);
    if (v11) {
      return *((double *)this[3] + 14) < 3.0;
    }
    return 0;
  }
  *(_DWORD *)v6 -= 2;
LABEL_16:
  if (v11) {
    return *((double *)this[3] + 14) < 3.0;
  }
  return 0;
}

void sub_1992AB438(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = 24;
  while (1)
  {
    uint64_t v15 = *(WTF::StringImpl **)(v12 + v14);
    *(void *)(v12 + v14) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, a2);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    v14 -= 8;
    if (v14 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void WebKit::WebExtensionAPITabs::createTab(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  v42[0] = 0;
  void v42[8] = 0;
  LOBYTE(v43) = 0;
  char v44 = 0;
  LOBYTE(v45) = 0;
  char v46 = 0;
  LOBYTE(v47) = 0;
  char v48 = 0;
  LOBYTE(v49) = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  __int16 v57 = 0;
  id v9 = a3;
  int v10 = @"properties";
  if ((WebKit::WebExtensionAPITabs::parseTabUpdateOptions(a1, v9, (uint64_t)v42, a5) & 1) == 0) {
    goto LABEL_24;
  }
  if (_MergedGlobals_124 == 1)
  {
    int v11 = (void *)qword_1EB35A0F8;
  }
  else
  {
    uint64_t v59 = @"index";
    uint64_t v63 = objc_opt_class();
    int v60 = @"openInReaderMode";
    uint64_t v64 = objc_opt_class();
    uint64_t v61 = @"title";
    uint64_t v65 = objc_opt_class();
    int v62 = @"windowId";
    uint64_t v66 = objc_opt_class();
    int v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v63 forKeys:&v59 count:4];
    qword_1EB35A0F8 = (uint64_t)v11;
    _MergedGlobals_124 = 1;
  }
  if (!WebKit::validateDictionary(v9, @"properties", 0, v11, a5)) {
    goto LABEL_24;
  }
  uint64_t v12 = WebKit::objectForKey<NSNumber>(v9, @"windowId");
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 doubleValue];
    double v16 = v15;
    if (v15 == -1.0)
    {
      unint64_t v17 = -256;
      int v18 = 1;
      LOBYTE(v19) = -2;
    }
    else if (v15 == -2.0)
    {
      unint64_t v17 = -256;
      int v18 = 1;
      LOBYTE(v19) = -3;
    }
    else
    {
      LOBYTE(v19) = 0;
      int v18 = 0;
      BOOL v38 = v15 < 0.0 || ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      if (v38 && (unint64_t)(*(void *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v17 = 0;
        if (v15 < 1.84467441e19)
        {
          if (modf(v15, (long double *)&__y) == 0.0)
          {
            unint64_t v40 = (unint64_t)v16;
            if ((unint64_t)v16 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1992AB9C4);
            }
            unint64_t v17 = v40 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v19) = -2;
            if (v40 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v17 = -256;
            }
            else {
              unint64_t v19 = (unint64_t)v16;
            }
            int v18 = 1;
          }
          else
          {
            int v18 = 0;
            LOBYTE(v19) = 0;
            unint64_t v17 = 0;
          }
        }
      }
    }
    unint64_t v20 = v17 & 0xFFFFFFFFFFFFFF00 | v19;
    unint64_t v47 = v20;
    char v48 = v18;
    if (!v18 || v20 == -2)
    {
      WebKit::toErrorString(0, &cfstr_Windowid.isa, &cfstr_IsNotAWindowId.isa, v14, v13);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_24:
      goto LABEL_25;
    }
  }

  double v21 = WebKit::objectForKey<NSNumber>(v9, @"index");
  unint64_t v22 = v21;
  if (v21)
  {
    uint64_t v49 = [v21 unsignedIntegerValue];
    char v50 = 1;
  }

  int v23 = WebKit::objectForKey<NSNumber>(v9, @"openInReaderMode");
  uint64_t v24 = v23;
  if (v23) {
    __int16 v57 = [v23 BOOLValue] | 0x100;
  }

  WebKit::objectForKey<NSString>(v9, @"title", 1);
  id __y = (id)objc_claimAutoreleasedReturnValue();
  if (__y)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v45, &__y);
  }
  {
    uint64_t v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v41);
  }
  uint64_t v25 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v59 = *(__CFString **)(a2 + 2120);
  LOBYTE(v60) = 1;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v26 = *a4;
  *a4 = 0;
  uint64_t v27 = *(void *)(*(void *)(a1 + 24) + 24);
  long double v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long double v28 = 1699;
  *((void *)v28 + 1) = v27;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  id __y = v28;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v28, (uint64_t)&v59);
  IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v28, v42);
  double v29 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v29 = &unk_1EE9FCC10;
  v29[1] = a1;
  void v29[2] = v26;
  uint64_t v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v63 = (uint64_t)v29;
  uint64_t v64 = v30;
  (*(void (**)(uint64_t, id *, uint64_t *, void))(*(void *)(v25 + 24) + 40))(v25 + 24, &__y, &v63, 0);
  uint64_t v32 = v63;
  uint64_t v63 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  int v33 = (IPC::Encoder *)__y;
  id __y = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
LABEL_25:
  if (v46)
  {
    int v36 = v45;
    int v45 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (v44)
  {
    char v37 = v43;
    uint64_t v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v31);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
}

void sub_1992ABA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, v23);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a18 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v23);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::query(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  LOBYTE(v81) = 0;
  char v83 = 0;
  LOBYTE(v84) = 0;
  char v85 = 0;
  LOBYTE(v86) = 0;
  char v87 = 0;
  LOBYTE(v90) = 0;
  char v91 = 0;
  int v88 = 0;
  __int16 v89 = 0;
  memset(v92, 0, 14);
  id v9 = a3;
  int v10 = @"info";
  int v11 = &qword_1EB35A000;
  if ((byte_1EB35A0EB & 1) == 0)
  {
    v96[0] = (IPC::Encoder *)@"active";
    uint64_t v97 = objc_opt_class();
    v96[1] = (IPC::Encoder *)@"audible";
    uint64_t v98 = objc_opt_class();
    v96[2] = (IPC::Encoder *)@"currentWindow";
    uint64_t v99 = objc_opt_class();
    v96[3] = (IPC::Encoder *)@"hidden";
    uint64_t v100 = objc_opt_class();
    v96[4] = (IPC::Encoder *)@"highlighted";
    uint64_t v101 = objc_opt_class();
    v96[5] = (IPC::Encoder *)@"index";
    uint64_t v102 = objc_opt_class();
    v96[6] = (IPC::Encoder *)@"lastFocusedWindow";
    uint64_t v103 = objc_opt_class();
    v96[7] = (IPC::Encoder *)@"muted";
    uint64_t v104 = objc_opt_class();
    v96[8] = (IPC::Encoder *)@"pinned";
    uint64_t v105 = objc_opt_class();
    v96[9] = (IPC::Encoder *)@"selected";
    uint64_t v106 = objc_opt_class();
    v96[10] = (IPC::Encoder *)@"status";
    uint64_t v107 = objc_opt_class();
    v96[11] = (IPC::Encoder *)@"title";
    uint64_t v108 = objc_opt_class();
    v96[12] = (IPC::Encoder *)@"url";
    int v76 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v77 = objc_opt_class();
    uint64_t v95 = objc_opt_class();
    char v78 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v95 count:1];
    uint64_t v79 = objc_msgSend(v76, "orderedSetWithObjects:", v77, v78, 0);
    uint64_t v109 = v79;
    v96[13] = (IPC::Encoder *)@"windowId";
    uint64_t v110 = objc_opt_class();
    v96[14] = (IPC::Encoder *)@"windowType";
    uint64_t v111 = objc_opt_class();
    qword_1EB35A110 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v97 forKeys:v96 count:15];

    byte_1EB35A0EB = 1;
    int v11 = &qword_1EB35A000;
  }
  if (!WebKit::validateDictionary(v9, @"info", 0, (void *)v11[34], a5)) {
    goto LABEL_83;
  }
  uint64_t v12 = WebKit::objectForKey<NSNumber>(v9, @"windowId");
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 doubleValue];
    double v16 = v15;
    if (v15 == -1.0)
    {
      unint64_t v17 = -256;
      int v18 = 1;
      LOBYTE(v19) = -2;
    }
    else if (v15 == -2.0)
    {
      unint64_t v17 = -256;
      int v18 = 1;
      LOBYTE(v19) = -3;
    }
    else
    {
      LOBYTE(v19) = 0;
      int v18 = 0;
      if ((v15 < 0.0 || ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(void *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v17 = 0;
        if (v15 < 1.84467441e19)
        {
          if (modf(v15, (long double *)__y) == 0.0)
          {
            unint64_t v75 = (unint64_t)v16;
            if ((unint64_t)v16 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1992AC598);
            }
            unint64_t v17 = v75 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v19) = -2;
            if (v75 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v17 = -256;
            }
            else {
              unint64_t v19 = (unint64_t)v16;
            }
            int v18 = 1;
          }
          else
          {
            int v18 = 0;
            LOBYTE(v19) = 0;
            unint64_t v17 = 0;
          }
        }
      }
    }
    unint64_t v20 = v17 & 0xFFFFFFFFFFFFFF00 | v19;
    unint64_t v86 = v20;
    char v87 = v18;
    if (!v18 || v20 == -2)
    {
      WebKit::toErrorString(0, &cfstr_Windowid.isa, &cfstr_IsNotAWindowId.isa, v14, v13);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_83;
    }
    if (v87 && v20 == -3)
    {
      char v87 = 0;
      HIWORD(v88) = 257;
    }
  }

  double v21 = WebKit::objectForKey<NSString>(v9, @"windowType", 1);
  unint64_t v22 = v21;
  if (v21)
  {
    LOBYTE(__y[0]) = 0;
    if ((WebKit::WebExtensionAPIWindows::parseWindowTypeFilter(v21, __y, @"windowType", a5) & 1) == 0)
    {

      goto LABEL_83;
    }
    BYTE1(v88) = 1;
    LOBYTE(v88) = __y[0];
  }

  int v23 = WebKit::objectForKey<NSString>(v9, @"status", 1);
  uint64_t v24 = v23;
  if (!v23) {
    goto LABEL_25;
  }
  if (([v23 isEqualToString:@"loading"] & 1) == 0)
  {
    if ([v24 isEqualToString:@"complete"])
    {
      __int16 v25 = 256;
      goto LABEL_24;
    }
    WebKit::toErrorString(0, &cfstr_Status.isa, &cfstr_ItMustSpecifyE_10.isa, v26);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_83:
    goto LABEL_84;
  }
  __int16 v25 = 257;
LABEL_24:
  HIWORD(v92[0]) = v25;
LABEL_25:

  uint64_t v27 = WebKit::objectForKey<NSString>(v9, @"url", 1);
  if (v27)
  {
    MEMORY[0x19972EAD0](&v94, v27);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)__y, (_DWORD **)&v94, 1uLL);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v81, __y);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v28);
    uint64_t v30 = v94;
    char v94 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  else
  {
    unint64_t v31 = WebKit::objectForKey<NSArray>(v9, @"url", 1, 0);
    uint64_t v32 = v31;
    if (v31)
    {
      WTF::makeVector<WTF::String>(v31, (uint64_t)__y);
      std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v81, __y);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v33);
    }
  }
  if (v83 && v82)
  {
    char v37 = (WTF::StringImpl **)v81;
    uint64_t v38 = 8 * v82;
    while (1)
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v37, v36, (uint64_t *)__y);
      if (!__y[0] || (WebKit::WebExtensionMatchPattern::isSupported(__y[0]) & 1) == 0) {
        break;
      }
      unint64_t v40 = __y[0];
      __y[0] = 0;
      if (v40) {
        CFRelease(*((CFTypeRef *)v40 + 1));
      }
      ++v37;
      v38 -= 8;
      if (!v38) {
        goto LABEL_52;
      }
    }
    if (*v37) {
      int v72 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v72 = &stru_1EEA10550;
    }
    WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_IsNotAValidPat.isa, v39, v72);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    int v73 = __y[0];
    __y[0] = 0;
    if (v73) {
      CFRelease(*((CFTypeRef *)v73 + 1));
    }
    goto LABEL_83;
  }
LABEL_52:
  WebKit::objectForKey<NSString>(v9, @"title", 1);
  __y[0] = (WebKit::WebExtensionMatchPattern *)objc_claimAutoreleasedReturnValue();
  if (__y[0])
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v84, __y);
  }
  uint64_t v41 = WebKit::objectForKey<NSNumber>(v9, @"currentWindow");
  BOOL v42 = v41;
  if (v41) {
    HIWORD(v88) = [v41 BOOLValue] | 0x100;
  }

  uint64_t v43 = WebKit::objectForKey<NSNumber>(v9, @"lastFocusedWindow");
  char v44 = v43;
  if (v43) {
    __int16 v89 = [v43 BOOLValue] | 0x100;
  }

  int v45 = WebKit::objectForKey<NSNumber>(v9, @"audible");
  char v46 = v45;
  if (v45) {
    WORD1(v92[0]) = [v45 BOOLValue] | 0x100;
  }

  unint64_t v47 = WebKit::objectForKey<NSNumber>(v9, @"hidden");
  char v48 = v47;
  if (v47) {
    WORD2(v92[0]) = [v47 BOOLValue] | 0x100;
  }

  uint64_t v49 = WebKit::objectForKey<NSNumber>(v9, @"index");
  char v50 = v49;
  if (v49)
  {
    uint64_t v90 = [v49 unsignedIntegerValue];
    char v91 = 1;
  }

  char v51 = WebKit::objectForKey<NSNumber>(v9, @"active");
  char v52 = v51;
  if (v51) {
    LOWORD(v92[0]) = [v51 BOOLValue] | 0x100;
  }

  char v53 = WebKit::objectForKey<NSNumber>(v9, @"pinned");
  char v54 = v53;
  if (v53) {
    WORD1(v92[1]) = [v53 BOOLValue] | 0x100;
  }

  uint64_t v55 = WebKit::objectForKey<NSNumber>(v9, @"selected");
  uint64_t v56 = v55;
  if (v55) {
    WORD2(v92[1]) = [v55 BOOLValue] | 0x100;
  }

  __int16 v57 = WebKit::objectForKey<NSNumber>(v9, @"highlighted");
  uint64_t v58 = v57;
  if (v57) {
    WORD2(v92[1]) = [v57 BOOLValue] | 0x100;
  }

  uint64_t v59 = WebKit::objectForKey<NSNumber>(v9, @"muted");
  int v60 = v59;
  if (v59) {
    LOWORD(v92[1]) = [v59 BOOLValue] | 0x100;
  }

  {
    __int16 v80 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v80);
  }
  uint64_t v61 = WebKit::WebProcess::singleton(void)::process;
  __y[0] = *(WebKit::WebExtensionMatchPattern **)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v62 = *a4;
  *a4 = 0;
  uint64_t v63 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v64 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v64 = 1709;
  *((void *)v64 + 1) = v63;
  *((void *)v64 + 66) = (char *)v64 + 16;
  *((void *)v64 + 67) = 512;
  *((void *)v64 + 68) = 0;
  *((void *)v64 + 70) = 0;
  *((void *)v64 + 69) = 0;
  IPC::Encoder::encodeHeader(v64);
  v96[0] = v64;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v64, (uint64_t *)__y);
  IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode(v64, (char *)&v81);
  uint64_t v65 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v65 = &unk_1EE9FCC58;
  v65[1] = a1;
  void v65[2] = v62;
  uint64_t v66 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v97 = (uint64_t)v65;
  uint64_t v98 = v66;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v61 + 24) + 40))(v61 + 24, v96, &v97, 0);
  uint64_t v68 = v97;
  uint64_t v97 = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  int v69 = v96[0];
  v96[0] = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v67);
    WTF::fastFree(v70, v71);
  }
LABEL_84:
  if (v85)
  {
    char v74 = v84;
    char v84 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v67);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  if (v83) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v67);
  }
}

void sub_1992AC7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,IPC::Encoder *a27)
{
  if (a15)
  {
    unint64_t v31 = a14;
    a14 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v30);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (a13) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v30);
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::get(uint64_t a1, uint64_t *a2, void *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v9 = -256;
    LOBYTE(v10) = -2;
LABEL_3:
    uint64_t v11 = 1;
    goto LABEL_17;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    unint64_t v10 = (unint64_t)a5;
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992ACD84);
    }
    unint64_t v24 = v10 & 0xFFFFFFFFFFFFFF00;
    BOOL v25 = __CFADD__(v10 - 1, 2);
    if (v10 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      LOBYTE(v10) = -2;
    }
    if (v25) {
      uint64_t v9 = -256;
    }
    else {
      uint64_t v9 = v24;
    }
    goto LABEL_3;
  }
  uint64_t v11 = 0;
  LOBYTE(v10) = 0;
  uint64_t v9 = 0;
LABEL_17:
  v35[0] = v9 & 0xFFFFFFFFFFFFFF00 | v10;
  v35[1] = v11;
  uint64_t result = (IPC::Encoder *)WebKit::isValid(v35[0], v11, a3, a4);
  if (result)
  {
    {
      long double v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v28);
    }
    uint64_t v16 = WebKit::WebProcess::singleton(void)::process;
    if (!v11)
    {
      uint64_t v30 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      long double v31 = __y[0];
      __y[0] = 0.0;
      if (v31 != 0.0) {
        (*(void (**)(long double))(**(void **)&v31 + 8))(COERCE_LONG_DOUBLE(*(void *)&v31));
      }
      uint64_t v32 = v37;
      char v37 = 0;
      if (v32)
      {
        IPC::Encoder::~Encoder(v32, v29);
        WTF::fastFree(v33, v34);
      }
      _Unwind_Resume(v30);
    }
    ++*(_DWORD *)(a1 + 48);
    uint64_t v17 = *a2;
    *a2 = 0;
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
    unint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v19 = 1703;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    char v37 = v19;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, v35);
    unint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v20 = &unk_1EE9FCCA0;
    v20[1] = a1;
    v20[2] = v17;
    uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)&__y[0] = v20;
    *(void *)&__y[1] = v21;
    (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v16 + 24) + 40))(v16 + 24, &v37, __y, 0);
    long double v23 = __y[0];
    __y[0] = 0.0;
    if (v23 != 0.0) {
      (*(void (**)(long double))(**(void **)&v23 + 8))(COERCE_LONG_DOUBLE(*(void *)&v23));
    }
    uint64_t result = v37;
    char v37 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v22);
      return (IPC::Encoder *)WTF::fastFree(v26, v27);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebExtensionAPITabs::getCurrent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    long double v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v4 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v16 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 24);
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 1704;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v16);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9FCCC8;
  v8[1] = a1;
  v8[2] = v5;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v8;
  v17[1] = v9;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v4 + 24) + 40))(v4 + 24, &v18, v17, 0);
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void sub_1992AD090(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPITabs::getSelected(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_5;
  }
  if (a5 == -2.0)
  {
    uint64_t v10 = -3;
    goto LABEL_5;
  }
  BOOL v21 = (a5 < 0.0 || ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
     && (unint64_t)(*(void *)&a5 - 1) > 0xFFFFFFFFFFFFELL;
  uint64_t v10 = -3;
  if (!v21 && a5 < 1.84467441e19 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AD4B0);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_5:
    uint64_t result = WebKit::isValid(v10, 1, a4, a4);
    if (!result) {
      return result;
    }
  }
  LOBYTE(__y[0]) = 0;
  char v27 = 0;
  LOBYTE(v28) = 0;
  char v29 = 0;
  char v34 = 0;
  char v35 = 0;
  int v32 = 0;
  __int16 v33 = 0;
  *(void *)((char *)v36 + 6) = 0;
  char v31 = 1;
  uint64_t v30 = v10;
  v36[0] = 257;
  {
    unint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v12 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v25 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = *(void *)(*(void *)(a1 + 24) + 24);
  long double v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long double v15 = 1709;
  *((void *)v15 + 1) = v14;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v38 = v15;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v25);
  IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode(v15, (char *)__y);
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9FCCF0;
  v16[1] = a1;
  v16[2] = v13;
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v37[0] = v16;
  v37[1] = v17;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v12 + 24) + 40))(v12 + 24, &v38, v37, 0);
  uint64_t v19 = v37[0];
  v37[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t result = (uint64_t)v38;
  uint64_t v38 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    uint64_t result = WTF::fastFree(v22, v23);
  }
  if (v29)
  {
    uint64_t result = (uint64_t)v28;
    long double v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v27) {
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__y, v18);
  }
  return result;
}

void sub_1992AD4D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v24 = a22;
  a22 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(IPC::Encoder **)(v22 - 88);
  *(void *)(v22 - 88) = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, a2);
    WTF::fastFree(v27, v28);
  }
  if (a14)
  {
    uint64_t v26 = a13;
    a13 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (a12) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::duplicate(uint64_t a1, void *a2, uint64_t *a3, void *a4, long double a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  if (a5 == -1.0)
  {
    uint64_t v11 = -256;
    LOBYTE(v12) = -2;
LABEL_3:
    uint64_t v13 = 1;
    goto LABEL_4;
  }
  uint64_t v13 = 0;
  if ((a5 < 0.0 || ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v12) = 0;
    uint64_t v11 = 0;
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v11 = 0;
    if (a5 < 1.84467441e19)
    {
      if (modf(a5, &__y) == 0.0)
      {
        unint64_t v12 = (unint64_t)a5;
        if ((unint64_t)a5 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1992ADA88);
        }
        unint64_t v35 = v12 & 0xFFFFFFFFFFFFFF00;
        BOOL v36 = __CFADD__(v12 - 1, 2);
        if (v12 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v12) = -2;
        }
        if (v36) {
          uint64_t v11 = -256;
        }
        else {
          uint64_t v11 = v35;
        }
        goto LABEL_3;
      }
      uint64_t v13 = 0;
      LOBYTE(v12) = 0;
      uint64_t v11 = 0;
    }
  }
LABEL_4:
  unint64_t v56 = v11 & 0xFFFFFFFFFFFFFF00 | v12;
  uint64_t v57 = v13;
  if (WebKit::isValid(v56, v13, a4, v9))
  {
    LOBYTE(__y) = 0;
    char v40 = 0;
    LOBYTE(v41) = 0;
    char v42 = 0;
    LOBYTE(v43) = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    LOBYTE(v47) = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    char v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    __int16 v55 = 0;
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v14 = (uint64_t *)v10;
    long double v15 = @"properties";
    if (byte_1EB35A0EA != 1) {
      goto LABEL_52;
    }
    uint64_t v16 = (void *)qword_1EB35A108;
    while (1)
    {
      if (!WebKit::validateDictionary(v14, @"properties", 0, v16, a4))
      {

        goto LABEL_31;
      }
      uint64_t v17 = WebKit::objectForKey<NSNumber>(v14, @"active");
      uint64_t v18 = v17;
      if (v17) {
        LOWORD(v53) = [v17 BOOLValue] | 0x100;
      }

      uint64_t v19 = WebKit::objectForKey<NSNumber>(v14, @"index");
      unint64_t v20 = v19;
      if (v19)
      {
        uint64_t v47 = [v19 unsignedIntegerValue];
        char v48 = 1;
      }

LABEL_14:
      uint64_t v14 = &qword_1EB35A000;
      {
        char v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v37);
      }
      a4 = (void *)WebKit::WebProcess::singleton(void)::process;
      if ((_BYTE)v57) {
        break;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
LABEL_52:
      v58[0] = @"active";
      uint64_t v38 = objc_opt_class();
      v58[1] = @"index";
      uint64_t v59 = (void *)v38;
      uint64_t v60 = objc_opt_class();
      uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v59 forKeys:v58 count:2];
      qword_1EB35A108 = (uint64_t)v16;
      byte_1EB35A0EA = 1;
    }
    ++*(_DWORD *)(a1 + 48);
    uint64_t v21 = *a3;
    *a3 = 0;
    uint64_t v22 = *(void *)(*(void *)(a1 + 24) + 24);
    long double v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long double v23 = 1701;
    *((void *)v23 + 1) = v22;
    *((void *)v23 + 66) = (char *)v23 + 16;
    *((void *)v23 + 67) = 512;
    *((void *)v23 + 68) = 0;
    *((void *)v23 + 70) = 0;
    *((void *)v23 + 69) = 0;
    IPC::Encoder::encodeHeader(v23);
    v58[0] = v23;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, (uint64_t *)&v56);
    IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v23, (char *)&__y);
    uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v24 = &unk_1EE9FCD18;
    v24[1] = a1;
    void v24[2] = v21;
    uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v59 = v24;
    uint64_t v60 = v25;
    (*(void (**)(void *, void *, void **, void))(a4[3] + 40))(a4 + 3, v58, &v59, 0);
    char v27 = v59;
    uint64_t v59 = 0;
    if (v27) {
      (*(void (**)(void *))(*v27 + 8))(v27);
    }
    long double v28 = (IPC::Encoder *)v58[0];
    v58[0] = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v26);
      WTF::fastFree(v29, v30);
    }
LABEL_31:
    if (v44)
    {
      __int16 v33 = v43;
      uint64_t v43 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    if (v42)
    {
      char v34 = v41;
      uint64_t v41 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
  }
}

void sub_1992ADB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19)
{
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v23);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v23);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::update(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
    goto LABEL_3;
  }
  BOOL v16 = (a6 >= 0.0 && ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AE044);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
LABEL_3:
    uint64_t v49 = v13;
    uint64_t v50 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11)) {
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  char v33 = 0;
  LOBYTE(v34) = 0;
  char v35 = 0;
  LOBYTE(v36) = 0;
  char v37 = 0;
  char v38 = 0;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  __int16 v48 = 0;
  if (WebKit::WebExtensionAPITabs::parseTabUpdateOptions(a1, v12, (uint64_t)&__y, a5))
  {
    {
      uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v30);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v31 = *(void *)(a2 + 2120);
    ++*(_DWORD *)(a1 + 48);
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v21 = 1716;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    char v52 = v21;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v21, &v31);
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v21, (uint64_t)&v49);
    IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v21, (char *)&__y);
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9FCD40;
    v22[1] = a1;
    void v22[2] = v19;
    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v51[0] = v22;
    v51[1] = v23;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v18 + 24) + 40))(v18 + 24, &v52, v51, 0);
    uint64_t v24 = v51[0];
    v51[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v52;
    char v52 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v28, v29);
    }
  }
  if (v37)
  {
    uint64_t v26 = v36;
    BOOL v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (v35)
  {
    char v27 = v34;
    char v34 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
LABEL_34:
}

void sub_1992AE070(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19)
{
  uint64_t v22 = *(void *)(v20 - 104);
  *(void *)(v20 - 104) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(IPC::Encoder **)(v20 - 88);
  *(void *)(v20 - 88) = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, a2);
    WTF::fastFree(v24, v25);
  }
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::remove(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v72[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v9 = objc_opt_class();
  v72[0] = objc_opt_class();
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v72 count:1];
  uint64_t v11 = objc_msgSend(v8, "orderedSetWithObjects:", v9, v10, 0);
  LOBYTE(v9) = WebKit::validateObject(v7, @"tabIDs", v11, a4);

  if ((v9 & 1) == 0) {
    goto LABEL_70;
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  objc_opt_class();
  id v12 = WTF::dynamic_objc_cast<NSNumber>(v7);
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 doubleValue];
    double v16 = v15;
    if (v15 == -1.0)
    {
      unint64_t v17 = -256;
      LOBYTE(v18) = -2;
LABEL_5:
      uint64_t v19 = 1;
      goto LABEL_6;
    }
    uint64_t v19 = 0;
    if ((v15 < 0.0 || ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*(void *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
    {
      LOBYTE(v18) = 0;
      unint64_t v17 = 0;
    }
    else
    {
      LOBYTE(v18) = 0;
      unint64_t v17 = 0;
      if (v15 < 1.84467441e19)
      {
        if (modf(v15, &__y) == 0.0)
        {
          unint64_t v59 = (unint64_t)v16;
          if ((unint64_t)v16 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1992AE850);
          }
          if (v59 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
            LOBYTE(v18) = -2;
          }
          else {
            unint64_t v18 = (unint64_t)v16;
          }
          if (v59 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v17 = -256;
          }
          else {
            unint64_t v17 = v59 & 0xFFFFFFFFFFFFFF00;
          }
          goto LABEL_5;
        }
        uint64_t v19 = 0;
        LOBYTE(v18) = 0;
        unint64_t v17 = 0;
      }
    }
LABEL_6:
    unint64_t v20 = v17 & 0xFFFFFFFFFFFFFF00 | v18;
    uint64_t v68 = (void *)v20;
    uint64_t v69 = v19;
    if (v19 && v20 != -2)
    {
      uint64_t v21 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, (unint64_t)&v68);
      *((void *)v66 + HIDWORD(v67)) = *v21;
      ++HIDWORD(v67);
      goto LABEL_61;
    }
    WebKit::toErrorString(0, &cfstr_Tabids.isa, &cfstr_IsNotATabIdent.isa, v14, v13);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_67;
  }
  objc_opt_class();
  uint64_t v22 = WTF::dynamic_objc_cast<NSArray>(v7);
  uint64_t v23 = v22;
  if (!v22) {
    goto LABEL_49;
  }
  uint64_t v61 = v22;
  unint64_t v24 = [v22 count];
  if (v24)
  {
    if (v24 >> 29)
    {
      __break(0xC471u);
LABEL_83:
      JUMPOUT(0x1992AE830);
    }
    LODWORD(v67) = v24;
    uint64_t v66 = (WTF *)WTF::fastMalloc((WTF *)(8 * v24));
  }
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v25 = v23;
  uint64_t v26 = [v25 countByEnumeratingWithState:&v62 objects:v71 count:16];
  if (!v26) {
    goto LABEL_48;
  }
  uint64_t v27 = *(void *)v63;
  do
  {
    uint64_t v28 = 0;
    do
    {
      if (*(void *)v63 != v27) {
        objc_enumerationMutation(v25);
      }
      char v29 = *(void **)(*((void *)&v62 + 1) + 8 * v28);
      [v29 doubleValue];
      double v32 = v31;
      if (v31 == -1.0)
      {
        uint64_t v33 = -256;
        uint64_t v34 = 1;
        LOBYTE(v35) = -2;
      }
      else
      {
        BOOL v38 = (v31 >= 0.0 && ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
            || (unint64_t)(*(void *)&v31 - 1) <= 0xFFFFFFFFFFFFELL)
           && v31 < 1.84467441e19;
        if (!v38 || modf(v31, &__y) != 0.0)
        {
          uint64_t v34 = 0;
          LOBYTE(v35) = 0;
          uint64_t v33 = 0;
          goto LABEL_33;
        }
        unint64_t v41 = (unint64_t)v32;
        if ((unint64_t)v32 == -1)
        {
          __break(0xC471u);
          goto LABEL_83;
        }
        unint64_t v42 = v41 & 0xFFFFFFFFFFFFFF00;
        BOOL v43 = __CFADD__(v41 - 1, 2);
        if (v41 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v35) = -2;
        }
        else {
          unint64_t v35 = (unint64_t)v32;
        }
        uint64_t v33 = -256;
        if (!v43) {
          uint64_t v33 = v42;
        }
        uint64_t v34 = 1;
      }
LABEL_33:
      unint64_t v39 = v33 & 0xFFFFFFFFFFFFFF00 | v35;
      uint64_t v68 = (void *)v39;
      uint64_t v69 = v34;
      if (!v34 || v39 == -2)
      {
        WebKit::toErrorString(0, &cfstr_Tabids.isa, &cfstr_IsNotATabIdent.isa, v30, v29);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_67:
        goto LABEL_68;
      }
      if (HIDWORD(v67) == v67)
      {
        char v40 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, (unint64_t)&v68);
        *((void *)v66 + HIDWORD(v67)) = *v40;
      }
      else
      {
        *((void *)v66 + HIDWORD(v67)) = v39;
      }
      ++HIDWORD(v67);
      ++v28;
    }
    while (v26 != v28);
    uint64_t v44 = [v25 countByEnumeratingWithState:&v62 objects:v71 count:16];
    uint64_t v26 = v44;
  }
  while (v44);
LABEL_48:

  uint64_t v23 = v61;
LABEL_49:

LABEL_61:
  {
    uint64_t v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v60);
  }
  uint64_t v47 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v48 = *a3;
  *a3 = 0;
  uint64_t v49 = *(void *)(*(void *)(a1 + 24) + 24);
  *(double *)&uint64_t v50 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x238));
  *(_WORD *)uint64_t v50 = 1711;
  *((void *)v50 + 1) = v49;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  double __y = *(double *)&v50;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v50, (uint64_t)&v66);
  char v51 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v51 = &unk_1EE9FCD68;
  v51[1] = a1;
  void v51[2] = v48;
  uint64_t v52 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v68 = v51;
  uint64_t v69 = v52;
  (*(void (**)(uint64_t, double *, void **, void))(*(void *)(v47 + 24) + 40))(v47 + 24, &__y, &v68, 0);
  uint64_t v54 = v68;
  uint64_t v68 = 0;
  if (v54) {
    (*(void (**)(void *))(*v54 + 8))(v54);
  }
  double v55 = __y;
  double __y = 0.0;
  if (v55 != 0.0)
  {
    IPC::Encoder::~Encoder(*(IPC::Encoder **)&v55, v53);
    WTF::fastFree(v56, v57);
  }
LABEL_68:
  uint64_t v58 = v66;
  if (v66)
  {
    uint64_t v66 = 0;
    LODWORD(v67) = 0;
    WTF::fastFree(v58, v53);
  }
LABEL_70:
}

void sub_1992AE880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,uint64_t a23,uint64_t a24,IPC::Encoder *a25)
{
  if (a21) {
    WTF::fastFree(a21, v29);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::reload(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
  }
  else
  {
    BOOL v16 = (a6 >= 0.0 && ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(void *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
       && a6 < 1.84467441e19;
    if (!v16 || modf(a6, __y) != 0.0)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      goto LABEL_18;
    }
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AED70);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
  }
  uint64_t v34 = v13;
  uint64_t v35 = 1;
  if (!WebKit::isValid(v13, 1, a5, v11)) {
    goto LABEL_28;
  }
LABEL_18:
  if (byte_1EB35A0F1)
  {
    if (v12) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v38 = @"bypassCache";
    v39[0] = objc_opt_class();
    qword_1EB35A140 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:&v38 count:1];
    byte_1EB35A0F1 = 1;
    if (v12)
    {
LABEL_20:
      if (!WebKit::validateDictionary(v12, @"properties", 0, (void *)qword_1EB35A140, a5)) {
        goto LABEL_28;
      }
    }
  }
  unint64_t v17 = WebKit::objectForKey<NSNumber>(v12, @"bypassCache");
  char v18 = [v17 BOOLValue];
  {
    double v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v32);
  }
  uint64_t v19 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v33 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v20 = *a4;
  *a4 = 0;
  uint64_t v21 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 1710;
  *((void *)v22 + 1) = v21;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  char v37 = v22;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v33);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v22, (uint64_t)&v34);
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1992AED50);
  }
  *uint64_t v23 = v18;
  id v25 = (void *)WTF::fastMalloc((WTF *)0x18);
  *id v25 = &unk_1EE9FCD90;
  v25[1] = a1;
  void v25[2] = v20;
  uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v25;
  *(void *)&__y[1] = v26;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v19 + 24) + 40))(v19 + 24, &v37, __y, 0);
  long double v28 = __y[0];
  __y[0] = 0.0;
  if (v28 != 0.0) {
    (*(void (**)(long double))(**(void **)&v28 + 8))(COERCE_LONG_DOUBLE(*(void *)&v28));
  }
  char v29 = v37;
  char v37 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v27);
    WTF::fastFree(v30, v31);
  }

LABEL_28:
}

void sub_1992AEDF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a15)
  {
    IPC::Encoder::~Encoder(a15, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::goBack(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_3;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AF1A8);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v10;
    uint64_t v28 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    id v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v26 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
  char v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v18 = 1706;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v30 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v26);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v18, (uint64_t)&v27);
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9FCDB8;
  v19[1] = a1;
  void v19[2] = v16;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v19;
  *(void *)&__y[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v30, __y, 0);
  long double v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0) {
    (*(void (**)(long double))(**(void **)&v22 + 8))(COERCE_LONG_DOUBLE(*(void *)&v22));
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1992AF1D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::goForward(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_3;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AF574);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v10;
    uint64_t v28 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    id v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v26 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
  char v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v18 = 1707;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v30 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v26);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v18, (uint64_t)&v27);
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9FCDE0;
  v19[1] = a1;
  void v19[2] = v16;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v19;
  *(void *)&__y[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v30, __y, 0);
  long double v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0) {
    (*(void (**)(long double))(**(void **)&v22 + 8))(COERCE_LONG_DOUBLE(*(void *)&v22));
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1992AF5A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::getZoom(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_3;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AF940);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v10;
    uint64_t v28 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    id v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v26 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
  char v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v18 = 1705;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v30 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v26);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v18, (uint64_t)&v27);
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9FCE08;
  v19[1] = a1;
  void v19[2] = v16;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v19;
  *(void *)&__y[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v30, __y, 0);
  long double v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0) {
    (*(void (**)(long double))(**(void **)&v22 + 8))(COERCE_LONG_DOUBLE(*(void *)&v22));
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1992AF96C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::setZoom(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5, double a6)
{
  if (a5 == -1.0)
  {
    uint64_t v12 = -2;
    goto LABEL_3;
  }
  BOOL v16 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v16 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992AFD1CLL);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v12 = -2;
    }
    else {
      uint64_t v12 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v29 = v12;
    uint64_t v30 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v12, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
LABEL_18:
  {
    uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v28 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 1714;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  double v32 = v20;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v20, &v28);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v20, (uint64_t)&v29);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v20, a6);
  uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v21 = &unk_1EE9FCE50;
  v21[1] = a1;
  void v21[2] = v18;
  uint64_t v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v21;
  *(void *)&__y[1] = v22;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v17 + 24) + 40))(v17 + 24, &v32, __y, 0);
  long double v24 = __y[0];
  __y[0] = 0.0;
  if (v24 != 0.0) {
    (*(void (**)(long double))(**(void **)&v24 + 8))(COERCE_LONG_DOUBLE(*(void *)&v24));
  }
  uint64_t result = v32;
  double v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

void sub_1992AFD48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::detectLanguage(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_3;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B00E8);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v10;
    uint64_t v28 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    id v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v26 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 1700;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v30 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v26);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v18, (uint64_t)&v27);
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9FCE78;
  v19[1] = a1;
  void v19[2] = v16;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v19;
  *(void *)&__y[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v30, __y, 0);
  long double v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0) {
    (*(void (**)(long double))(**(void **)&v22 + 8))(COERCE_LONG_DOUBLE(*(void *)&v22));
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1992B0114(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPITabs::toggleReaderMode(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v10 = -2;
    goto LABEL_3;
  }
  BOOL v14 = (a5 >= 0.0 && ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v14 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B04B4);
    }
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v10 = -2;
    }
    else {
      uint64_t v10 = (unint64_t)a5;
    }
LABEL_3:
    uint64_t v27 = v10;
    uint64_t v28 = 1;
    uint64_t result = (IPC::Encoder *)WebKit::isValid(v10, 1, a4, a4);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
LABEL_18:
  {
    id v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v26 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 1715;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v30 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v26);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v18, (uint64_t)&v27);
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9FCEB0;
  v19[1] = a1;
  void v19[2] = v16;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&__y[0] = v19;
  *(void *)&__y[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v30, __y, 0);
  long double v22 = __y[0];
  __y[0] = 0.0;
  if (v22 != 0.0) {
    (*(void (**)(long double))(**(void **)&v22 + 8))(COERCE_LONG_DOUBLE(*(void *)&v22));
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1992B04E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::captureVisibleTab(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
  }
  else if (a6 == -2.0)
  {
    uint64_t v13 = -3;
  }
  else
  {
    BOOL v15 = (a6 < 0.0 || ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
       && (unint64_t)(*(void *)&a6 - 1) > 0xFFFFFFFFFFFFELL;
    if (v15 || a6 >= 1.84467441e19 || modf(a6, (long double *)&__y) != 0.0)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      goto LABEL_17;
    }
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B0ACCLL);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
  }
  uint64_t v44 = v13;
  uint64_t v45 = 1;
  if (!WebKit::isValid(v13, 1, a5, v11)) {
    goto LABEL_40;
  }
LABEL_17:
  id v16 = v12;
  uint64_t v17 = @"options";
  if (byte_1EB35A0EC == 1)
  {
    uint64_t v18 = (void *)qword_1EB35A118;
  }
  else
  {
    v46[0] = (IPC::Encoder *)@"format";
    v46[1] = (IPC::Encoder *)@"quality";
    uint64_t __y = objc_opt_class();
    uint64_t v48 = objc_opt_class();
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__y forKeys:v46 count:2];
    qword_1EB35A118 = (uint64_t)v18;
    byte_1EB35A0EC = 1;
  }
  if (!WebKit::validateDictionary(v16, @"options", 0, v18, a5)) {
    goto LABEL_39;
  }
  uint64_t v19 = WebKit::objectForKey<NSString>(v16, @"format", 1);
  uint64_t v20 = v19;
  if (!v19 || ([v19 isEqualToString:@"png"] & 1) != 0)
  {
    char v21 = 0;
    goto LABEL_23;
  }
  if (([v20 isEqualToString:@"jpeg"] & 1) == 0)
  {
    WebKit::toErrorString(0, &cfstr_Format.isa, &cfstr_ItMustSpecifyE_11.isa, v26);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_39:
    goto LABEL_40;
  }
  char v21 = 1;
LABEL_23:

  long double v22 = WebKit::objectForKey<NSNumber>(v16, @"quality");
  uint64_t v23 = v22;
  if (v22)
  {
    if ([v22 integerValue] < 0 || objc_msgSend(v23, "integerValue") >= 101)
    {
      WebKit::toErrorString(0, &cfstr_Quality.isa, &cfstr_ItMustSpecifyA_1.isa, v24);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_40;
    }
    char v25 = [v23 unsignedCharValue];
  }
  else
  {
    char v25 = 92;
  }

  {
    unint64_t v42 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v42);
  }
  uint64_t v27 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v43 = *(void *)(a2 + 2120);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v28 = *a4;
  *a4 = 0;
  uint64_t v29 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v30 = 1697;
  *((void *)v30 + 1) = v29;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  v46[0] = v30;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v30, &v43);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v30, (uint64_t)&v44);
  long double v31 = (unsigned char *)IPC::Encoder::grow(v30, 1uLL, 1);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x1992B0A8CLL);
  }
  *long double v31 = v21;
  uint64_t v33 = (unsigned char *)IPC::Encoder::grow(v30, 1uLL, 1);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x1992B0AACLL);
  }
  *uint64_t v33 = v25;
  uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v35 = &unk_1EE9FCED8;
  v35[1] = a1;
  uint64_t v35[2] = v28;
  uint64_t v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t __y = (uint64_t)v35;
  uint64_t v48 = v36;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v27 + 24) + 40))(v27 + 24, v46, &__y, 0);
  long double v38 = *(double *)&__y;
  uint64_t __y = 0;
  if (v38 != 0.0) {
    (*(void (**)(long double))(**(void **)&v38 + 8))(COERCE_LONG_DOUBLE(*(void *)&v38));
  }
  unint64_t v39 = v46[0];
  v46[0] = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v40, v41);
  }
LABEL_40:
}

void sub_1992B0B64(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v16, v17);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, uint64_t *a5, void *a6, long double a7)
{
  id v13 = a3;
  id v15 = a4;
  if (a7 == -1.0)
  {
    uint64_t v16 = -256;
    LOBYTE(v17) = -2;
LABEL_3:
    uint64_t v18 = 1;
    goto LABEL_4;
  }
  uint64_t v18 = 0;
  if ((a7 < 0.0 || ((*(void *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a7 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v17) = 0;
    uint64_t v16 = 0;
    goto LABEL_4;
  }
  LOBYTE(v17) = 0;
  uint64_t v16 = 0;
  if (a7 < 1.84467441e19)
  {
    if (modf(a7, &__y) != 0.0)
    {
      uint64_t v18 = 0;
      LOBYTE(v17) = 0;
      uint64_t v16 = 0;
      goto LABEL_4;
    }
    unint64_t v17 = (unint64_t)a7;
    if ((unint64_t)a7 == -1)
    {
      __break(0xC471u);
      goto LABEL_69;
    }
    unint64_t v33 = v17 & 0xFFFFFFFFFFFFFF00;
    BOOL v34 = __CFADD__(v17 - 1, 2);
    if (v17 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      LOBYTE(v17) = -2;
    }
    if (v34) {
      uint64_t v16 = -256;
    }
    else {
      uint64_t v16 = v33;
    }
    goto LABEL_3;
  }
LABEL_4:
  unint64_t v64 = v16 & 0xFFFFFFFFFFFFFF00 | v17;
  uint64_t v65 = v18;
  if (!WebKit::isValid(v64, v18, a6, v14)) {
    goto LABEL_64;
  }
  if ((unint64_t)[v13 length] >= 0x4000001)
  {
    WebKit::toErrorString(0, &cfstr_Message.isa, &cfstr_ItExceededTheM.isa, v19);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_64;
  }
  v63[0] = 0;
  v63[8] = 0;
  if ((WebKit::WebExtensionAPITabs::parseSendMessageOptions(v15, (uint64_t)v63, a6) & 1) == 0) {
    goto LABEL_64;
  }
  long double v22 = *(_DWORD **)(*(void *)(a1 + 24) + 80);
  if (*(double *)&v22 != 0.0) {
    *v22 += 2;
  }
  double __y = *(double *)&v22;
  char v56 = 1;
  v57[0] = 0;
  v57[176] = 0;
  uint64_t v23 = *((void *)a2 + 3);
  if (!v23) {
    goto LABEL_30;
  }
  uint64_t v24 = *(void *)(v23 + 8);
  if (!v24) {
    goto LABEL_24;
  }
  atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
  uint64_t v25 = *(void *)(*(void *)(v24 + 128) + 8);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
  if (v25 == v24) {
    goto LABEL_41;
  }
  uint64_t v23 = *((void *)a2 + 3);
  if (v23)
  {
LABEL_24:
    uint64_t v26 = *(void *)(v23 + 8);
    if (!v26) {
      goto LABEL_30;
    }
    uint64_t v27 = *(void *)(v26 + 24);
    if (!v27) {
      goto LABEL_30;
    }
    uint64_t v28 = *(void *)(v27 + 8);
    if (!v28) {
      goto LABEL_30;
    }
    uint64_t v29 = *(void **)(*(void *)(v28 + 48) + 16);
    if ((*(uint64_t (**)(void *))(*v29 + 1368))(v29)) {
      goto LABEL_30;
    }
    uint64_t v30 = *(void *)(v29[2] + 8);
    if (!v30) {
      goto LABEL_30;
    }
    CFRetain(*(CFTypeRef *)(v30 - 8));
    long double v31 = *(WebKit::WebFrame **)(v30 + 72);
    CFRelease(*(CFTypeRef *)(v30 - 8));
    if (v31 != a2) {
      goto LABEL_30;
    }
LABEL_41:
    uint64_t v32 = -2;
    goto LABEL_42;
  }
LABEL_30:
  uint64_t v32 = *((void *)a2 + 10);
  if (v32 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1992B125CLL);
  }
  if ((unint64_t)(v32 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
    uint64_t v32 = -3;
  }
LABEL_42:
  uint64_t v58 = v32;
  char v59 = 1;
  uint64_t v35 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v35 + 1368))(v35);
  uint64_t v36 = *(void *)(v35[2] + 8);
  if (v36) {
    uint64_t v37 = v36 - 16;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v60 = *(void *)(v37 + 2120);
  char v61 = *(unsigned char *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v62);
  {
    uint64_t v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v53);
  }
  uint64_t v38 = WebKit::WebProcess::singleton(void)::process;
  if (!(_BYTE)v65)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_69:
    JUMPOUT(0x1992B123CLL);
  }
  MEMORY[0x19972EAD0](&v54, v13);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v39 = *a5;
  *a5 = 0;
  uint64_t v40 = *(void *)(*(void *)(a1 + 24) + 24);
  unint64_t v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v41 = 1713;
  *((void *)v41 + 1) = v40;
  *((void *)v41 + 66) = (char *)v41 + 16;
  *((void *)v41 + 67) = 512;
  *((void *)v41 + 68) = 0;
  *((void *)v41 + 70) = 0;
  *((void *)v41 + 69) = 0;
  IPC::Encoder::encodeHeader(v41);
  uint64_t v67 = v41;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v41, (uint64_t *)&v64);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)&v54);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v41, (uint64_t)v63);
  IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(v41, (uint64_t)&__y);
  unint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v42 = &unk_1EE9FCF20;
  v42[1] = a1;
  void v42[2] = v39;
  uint64_t v43 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v66[0] = v42;
  v66[1] = v43;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v38 + 24) + 40))(v38 + 24, &v67, v66, 0);
  uint64_t v45 = v66[0];
  v66[0] = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = v67;
  uint64_t v67 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v44);
    WTF::fastFree(v51, v52);
  }
  uint64_t v47 = v54;
  uint64_t v54 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v44);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  uint64_t v48 = v62;
  long long v62 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v44);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57);
  if (v56)
  {
    double v50 = __y;
    double __y = 0.0;
    if (v50 != 0.0)
    {
      if (**(_DWORD **)&v50 == 2) {
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v50, v49);
      }
      else {
        **(_DWORD **)&v50 -= 2;
      }
    }
  }
LABEL_64:
}

void sub_1992B1288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v41);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v43);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>, long double a7@<D0>)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  id v14 = a4;
  if (a7 == -1.0)
  {
    uint64_t v15 = -256;
    LOBYTE(v16) = -2;
LABEL_3:
    uint64_t v17 = 1;
    goto LABEL_4;
  }
  uint64_t v17 = 0;
  if ((a7 < 0.0 || ((*(void *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a7 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v16) = 0;
    uint64_t v15 = 0;
  }
  else
  {
    LOBYTE(v16) = 0;
    uint64_t v15 = 0;
    if (a7 < 1.84467441e19)
    {
      if (modf(a7, (long double *)&__y) == 0.0)
      {
        unint64_t v16 = (unint64_t)a7;
        if ((unint64_t)a7 == -1)
        {
          __break(0xC471u);
          goto LABEL_96;
        }
        unint64_t v37 = v16 & 0xFFFFFFFFFFFFFF00;
        BOOL v38 = __CFADD__(v16 - 1, 2);
        if (v16 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v16) = -2;
        }
        if (v38) {
          uint64_t v15 = -256;
        }
        else {
          uint64_t v15 = v37;
        }
        goto LABEL_3;
      }
      uint64_t v17 = 0;
      LOBYTE(v16) = 0;
      uint64_t v15 = 0;
    }
  }
LABEL_4:
  unint64_t v71 = v15 & 0xFFFFFFFFFFFFFF00 | v16;
  uint64_t v72 = v17;
  if (!WebKit::isValid(v71, v17, a5, v13))
  {
    *a6 = 0;
    goto LABEL_47;
  }
  LOBYTE(v69) = 0;
  char v70 = 0;
  v68[0] = 0;
  v68[8] = 0;
  id v18 = v14;
  uint64_t v19 = @"options";
  if (WebKit::WebExtensionAPITabs::parseSendMessageOptions(v18, (uint64_t)v68, a5))
  {
    if (byte_1EB35A0EE == 1)
    {
      uint64_t v20 = (void *)qword_1EB35A128;
    }
    else
    {
      v82[0] = @"name";
      uint64_t __y = objc_opt_class();
      uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__y forKeys:v82 count:1];
      qword_1EB35A128 = (uint64_t)v20;
      byte_1EB35A0EE = 1;
    }
    if (WebKit::validateDictionary(v18, @"options", 0, v20, a5))
    {
      int v73 = [v18 objectForKeyedSubscript:@"name"];
      if (v73)
      {
        std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v69, &v73);
      }
      if (v70)
      {
        char v21 = v69;
        if (!v69) {
          goto LABEL_14;
        }
      }
      else
      {
        char v21 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
        if (!*MEMORY[0x1E4F30978])
        {
LABEL_14:
          uint64_t v67 = v21;
          long double v22 = *(_DWORD **)(*(void *)(a1 + 24) + 80);
          if (v22) {
            *v22 += 2;
          }
          uint64_t __y = (uint64_t)v22;
          char v75 = 1;
          v76[0] = 0;
          v76[176] = 0;
          uint64_t v23 = *((void *)a2 + 3);
          if (!v23) {
            goto LABEL_26;
          }
          uint64_t v24 = *(void *)(v23 + 8);
          if (v24)
          {
            atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
            uint64_t v25 = *(void *)(*(void *)(v24 + 128) + 8);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
            if (v25 == v24) {
              goto LABEL_55;
            }
            uint64_t v23 = *((void *)a2 + 3);
            if (!v23)
            {
LABEL_26:
              uint64_t v32 = *((void *)a2 + 10);
              if (v32 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x1992B1B90);
              }
              if ((unint64_t)(v32 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
                uint64_t v32 = -3;
              }
              goto LABEL_56;
            }
          }
          uint64_t v26 = *(void *)(v23 + 8);
          if (!v26) {
            goto LABEL_26;
          }
          uint64_t v27 = *(void *)(v26 + 24);
          if (!v27) {
            goto LABEL_26;
          }
          uint64_t v28 = *(void *)(v27 + 8);
          if (!v28) {
            goto LABEL_26;
          }
          uint64_t v29 = *(void **)(*(void *)(v28 + 48) + 16);
          if ((*(uint64_t (**)(void *))(*v29 + 1368))(v29)) {
            goto LABEL_26;
          }
          uint64_t v30 = *(void *)(v29[2] + 8);
          if (!v30) {
            goto LABEL_26;
          }
          CFRetain(*(CFTypeRef *)(v30 - 8));
          long double v31 = *(WebKit::WebFrame **)(v30 + 72);
          CFRelease(*(CFTypeRef *)(v30 - 8));
          if (v31 != a2) {
            goto LABEL_26;
          }
LABEL_55:
          uint64_t v32 = -2;
LABEL_56:
          uint64_t v77 = v32;
          char v78 = 1;
          uint64_t v39 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8)
                                       + 48)
                           + 16);
          (*(void (**)(void *))(*v39 + 1368))(v39);
          uint64_t v40 = *(void *)(v39[2] + 8);
          if (v40) {
            uint64_t v41 = v40 - 16;
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v79 = *(void *)(v41 + 2120);
          char v80 = *(unsigned char *)(a1 + 8);
          WebKit::WebFrame::url(a2, (uint64_t)&v81);
          uint64_t v42 = *((void *)a2 + 3);
          if (v42
            && (uint64_t v43 = *(void *)(v42 + 8)) != 0
            && (uint64_t v44 = *(void *)(v43 + 24)) != 0
            && (uint64_t v45 = *(void *)(v44 + 8)) != 0
            && (uint64_t v46 = *(void **)(*(void *)(v45 + 48) + 16),
                ((*(uint64_t (**)(void *))(*v46 + 1368))(v46) & 1) == 0))
          {
            uint64_t v47 = *(void *)(v46[2] + 8);
            if (v47) {
              uint64_t v48 = v47 - 16;
            }
            else {
              uint64_t v48 = 0;
            }
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = WTF::fastMalloc((WTF *)0x198);
          WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v49, a1, v48, 1, (_DWORD **)&v67);
          {
            uint64_t v65 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v65);
          }
          uint64_t v50 = WebKit::WebProcess::singleton(void)::process;
          if ((_BYTE)v72)
          {
            uint64_t v66 = *(void *)(v49 + 80);
            ++*(_DWORD *)(a1 + 48);
            GlobalContext = JSContextGetGlobalContext(a3);
            uint64_t v52 = GlobalContext;
            if (GlobalContext) {
              JSGlobalContextRetain(GlobalContext);
            }
            ++*(_DWORD *)(v49 + 48);
            uint64_t v53 = *(void *)(*(void *)(a1 + 24) + 24);
            uint64_t v54 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v54 = 1698;
            *((void *)v54 + 1) = v53;
            *((void *)v54 + 66) = (char *)v54 + 16;
            *((void *)v54 + 67) = 512;
            *((void *)v54 + 68) = 0;
            *((void *)v54 + 70) = 0;
            *((void *)v54 + 69) = 0;
            IPC::Encoder::encodeHeader(v54);
            int v73 = v54;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, (uint64_t *)&v71);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, &v66);
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v54, (uint64_t *)&v67);
            IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v54, (uint64_t)v68);
            IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(v54, (uint64_t)&__y);
            double v55 = (void *)WTF::fastMalloc((WTF *)0x28);
            void *v55 = &unk_1EE9FCF48;
            v55[1] = a1;
            void v55[2] = a1;
            v55[3] = v52;
            v55[4] = v49;
            uint64_t v56 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
            v82[0] = v55;
            v82[1] = v56;
            (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v50 + 24) + 40))(v50 + 24, &v73, v82, 0);
            uint64_t v58 = v82[0];
            v82[0] = 0;
            if (v58) {
              (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
            }
            char v59 = v73;
            int v73 = 0;
            if (v59)
            {
              IPC::Encoder::~Encoder(v59, v57);
              WTF::fastFree(v63, v64);
            }
            *a6 = v49;
            uint64_t v60 = v81;
            uint64_t v81 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2) {
                WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v57);
              }
              else {
                *(_DWORD *)v60 -= 2;
              }
            }
            std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76);
            if (v75)
            {
              char v61 = (WTF::StringImpl *)__y;
              uint64_t __y = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2) {
                  WTF::StringImpl::destroy(v61, v35);
                }
                else {
                  *(_DWORD *)v61 -= 2;
                }
              }
            }
            long long v62 = v67;
            uint64_t v67 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2) {
                WTF::StringImpl::destroy(v62, v35);
              }
              else {
                *(_DWORD *)v62 -= 2;
              }
            }
            goto LABEL_42;
          }
          std::__throw_bad_optional_access[abi:sn180100]();
          __break(1u);
LABEL_96:
          JUMPOUT(0x1992B1B70);
        }
      }
      *(_DWORD *)v21 += 2;
      goto LABEL_14;
    }
  }

  *a6 = 0;
LABEL_42:
  if (v70)
  {
    uint64_t v36 = v69;
    uint64_t v69 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_47:
}

void sub_1992B1C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, IPC::Encoder *a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF::StringImpl *a47)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v48);
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v50);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v50);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v50);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::executeScript(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
    goto LABEL_3;
  }
  BOOL v16 = (a6 >= 0.0 && ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B22DCLL);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
LABEL_3:
    uint64_t v52 = v13;
    uint64_t v53 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11)) {
      goto LABEL_48;
    }
    goto LABEL_18;
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  char v37 = 0;
  LOBYTE(v38) = 0;
  char v39 = 0;
  v40[0] = 0;
  char v41 = 0;
  LOBYTE(v42) = 0;
  char v44 = 0;
  LOBYTE(v45) = 0;
  char v46 = 0;
  LOBYTE(v47) = 0;
  char v48 = 0;
  LOBYTE(v49) = 0;
  char v50 = 0;
  __int16 v51 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      unint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v33);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v34 = *(void *)(a2 + 2120);
    v35[0] = &v34;
    v35[1] = &v52;
    uint64_t v35[2] = &__y;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 24);
    char v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v21 = 1702;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    double v55 = v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>(v21, (uint64_t)v35);
    long double v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9FCF70;
    v22[1] = a1;
    void v22[2] = v19;
    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v54[0] = v22;
    v54[1] = v23;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v18 + 24) + 40))(v18 + 24, &v55, v54, 0);
    uint64_t v24 = v54[0];
    v54[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v55;
    double v55 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v31, v32);
    }
  }
  if (v50)
  {
    uint64_t v26 = v49;
    uint64_t v49 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (v48)
  {
    uint64_t v27 = v47;
    uint64_t v47 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t v28 = v45;
    uint64_t v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t v29 = v42;
    if (v42)
    {
      uint64_t v42 = 0;
      int v43 = 0;
      WTF::fastFree(v29, v17);
    }
  }
  if (v41) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v17);
  }
  if (v39)
  {
    uint64_t v30 = v38;
    uint64_t v38 = 0;
    if (v30) {
      CFRelease(*(CFTypeRef *)(v30 + 8));
    }
  }
LABEL_48:
}

void sub_1992B2308(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a20) {
    WTF::fastFree(a20, a2);
  }
  if (a19) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  if (a16)
  {
    if (a15) {
      CFRelease(*(CFTypeRef *)(a15 + 8));
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::insertCSS(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
    goto LABEL_3;
  }
  BOOL v16 = (a6 >= 0.0 && ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B28D8);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
LABEL_3:
    uint64_t v52 = v13;
    uint64_t v53 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11)) {
      goto LABEL_48;
    }
    goto LABEL_18;
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  char v37 = 0;
  LOBYTE(v38) = 0;
  char v39 = 0;
  v40[0] = 0;
  char v41 = 0;
  LOBYTE(v42) = 0;
  char v44 = 0;
  LOBYTE(v45) = 0;
  char v46 = 0;
  LOBYTE(v47) = 0;
  char v48 = 0;
  LOBYTE(v49) = 0;
  char v50 = 0;
  __int16 v51 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      unint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v33);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v34 = *(void *)(a2 + 2120);
    v35[0] = &v34;
    v35[1] = &v52;
    uint64_t v35[2] = &__y;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 24);
    char v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v21 = 1708;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    double v55 = v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>(v21, (uint64_t)v35);
    long double v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9FCFA8;
    v22[1] = a1;
    void v22[2] = v19;
    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v54[0] = v22;
    v54[1] = v23;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v18 + 24) + 40))(v18 + 24, &v55, v54, 0);
    uint64_t v24 = v54[0];
    v54[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v55;
    double v55 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v31, v32);
    }
  }
  if (v50)
  {
    uint64_t v26 = v49;
    uint64_t v49 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (v48)
  {
    uint64_t v27 = v47;
    uint64_t v47 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t v28 = v45;
    uint64_t v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t v29 = v42;
    if (v42)
    {
      uint64_t v42 = 0;
      int v43 = 0;
      WTF::fastFree(v29, v17);
    }
  }
  if (v41) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v17);
  }
  if (v39)
  {
    uint64_t v30 = v38;
    uint64_t v38 = 0;
    if (v30) {
      CFRelease(*(CFTypeRef *)(v30 + 8));
    }
  }
LABEL_48:
}

void sub_1992B2904(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a20) {
    WTF::fastFree(a20, a2);
  }
  if (a19) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  if (a16)
  {
    if (a15) {
      CFRelease(*(CFTypeRef *)(a15 + 8));
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::removeCSS(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -2;
    goto LABEL_3;
  }
  BOOL v16 = (a6 >= 0.0 && ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(void *)&a6 - 1) <= 0xFFFFFFFFFFFFELL)
     && a6 < 1.84467441e19;
  if (v16 && modf(a6, &__y) == 0.0)
  {
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992B2ED4);
    }
    if ((unint64_t)a6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v13 = -2;
    }
    else {
      uint64_t v13 = (unint64_t)a6;
    }
LABEL_3:
    uint64_t v52 = v13;
    uint64_t v53 = 1;
    if (!WebKit::isValid(v13, 1, a5, v11)) {
      goto LABEL_48;
    }
    goto LABEL_18;
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
LABEL_18:
  LOBYTE(__y) = 0;
  char v37 = 0;
  LOBYTE(v38) = 0;
  char v39 = 0;
  v40[0] = 0;
  char v41 = 0;
  LOBYTE(v42) = 0;
  char v44 = 0;
  LOBYTE(v45) = 0;
  char v46 = 0;
  LOBYTE(v47) = 0;
  char v48 = 0;
  LOBYTE(v49) = 0;
  char v50 = 0;
  __int16 v51 = 257;
  if (!v12 || (WebKit::WebExtensionAPITabs::parseScriptOptions(v12, (uint64_t)&__y, a5) & 1) != 0)
  {
    {
      unint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v33);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v34 = *(void *)(a2 + 2120);
    v35[0] = &v34;
    v35[1] = &v52;
    uint64_t v35[2] = &__y;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 24);
    char v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v21 = 1712;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    double v55 = v21;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>(v21, (uint64_t)v35);
    long double v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9FCFD0;
    v22[1] = a1;
    void v22[2] = v19;
    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v54[0] = v22;
    v54[1] = v23;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v18 + 24) + 40))(v18 + 24, &v55, v54, 0);
    uint64_t v24 = v54[0];
    v54[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v55;
    double v55 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v17);
      WTF::fastFree(v31, v32);
    }
  }
  if (v50)
  {
    uint64_t v26 = v49;
    uint64_t v49 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (v48)
  {
    uint64_t v27 = v47;
    uint64_t v47 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t v28 = v45;
    uint64_t v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t v29 = v42;
    if (v42)
    {
      uint64_t v42 = 0;
      int v43 = 0;
      WTF::fastFree(v29, v17);
    }
  }
  if (v41) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v17);
  }
  if (v39)
  {
    uint64_t v30 = v38;
    uint64_t v38 = 0;
    if (v30) {
      CFRelease(*(CFTypeRef *)(v30 + 8));
    }
  }
LABEL_48:
}

void sub_1992B2F00(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29)
{
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a20) {
    WTF::fastFree(a20, a2);
  }
  if (a19) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  if (a16)
  {
    if (a15) {
      CFRelease(*(CFTypeRef *)(a15 + 8));
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::onActivated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 32;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992B324C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPITabs::onAttached(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 33;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onCreated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    unsigned __int8 v6 = 34;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onDetached(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    unsigned __int8 v6 = 35;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onHighlighted(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    unsigned __int8 v6 = 36;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 11);
    *((void *)this + 11) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 11);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onMoved(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result)
  {
    unsigned __int8 v6 = 37;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 12);
    *((void *)this + 12) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 12);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onRemoved(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    unsigned __int8 v6 = 38;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 13);
    *((void *)this + 13) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 13);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 13);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onReplaced(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    unsigned __int8 v6 = 39;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 14);
    *((void *)this + 14) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 14);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 14);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPITabs::onUpdated(WebKit::WebExtensionAPITabs *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    unsigned __int8 v6 = 40;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPITabs &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 15);
    *((void *)this + 15) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 15);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 15);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9FCFF8;
  *((void *)v4 + 1) = a2;
  unsigned __int8 v6 = v4;
  WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v6);
  uint64_t result = (uint64_t)v6;
  unsigned __int8 v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1992B3998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)unsigned __int8 v6 = &unk_1EE9FD020;
  *((void *)v6 + 1) = a2;
  *((void *)v6 + 2) = a3;
  uint64_t v8 = v6;
  WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1992B3A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v4 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9FD048;
  *((void *)v4 + 1) = &v7;
  *((void *)v4 + 2) = &v8;
  unsigned __int8 v6 = v4;
  WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v6);
  uint64_t result = (uint64_t)v6;
  unsigned __int8 v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1992B3B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  uint64_t v8 = (uint64_t *)(a1 + 192);
  uint64_t v9 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(*(void **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v20, v8, (uint64_t)v9, v10);
  uint64_t v11 = *v8;
  if (*v8)
  {
    unsigned int v12 = *(_DWORD *)(v11 - 4);
    uint64_t v13 = v11 + 40 * v12;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v12 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v19, v8, v13, v11 + 40 * v12);
  while (v21 != v19[1])
  {
    if (*(unsigned char *)(v21 + 16) && *(void *)(v21 + 8) == a2)
    {
      if (*(unsigned char *)(v21 + 32)) {
        *(unsigned char *)(v21 + 32) = 0;
      }
      break;
    }
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v20);
  }
  v23[0] = @"oldWindowId";
  double v14 = (double)a3;
  if (a3 + 3 < 2) {
    double v14 = -1.0;
  }
  uint64_t v15 = [NSNumber numberWithDouble:v14];
  v23[1] = @"oldPosition";
  v24[0] = v15;
  if (a4 == -1)
  {
    BOOL v16 = &unk_1EEA53328;
  }
  else
  {
    BOOL v16 = [NSNumber numberWithUnsignedLong:a4];
  }
  v24[1] = v16;
  id v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];

  uint64_t v17 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v17 = &unk_1EE9FD070;
  *((void *)v17 + 1) = &v22;
  *((void *)v17 + 2) = &v20;
  v19[0] = v17;
  WebCore::mainThreadNormalWorld(v17);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v19);
  uint64_t v18 = v19[0];
  v19[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
}

void sub_1992B3DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  v17[0] = @"windowId";
  double v8 = (double)a3;
  if (a3 + 3 < 2) {
    double v8 = -1.0;
  }
  uint64_t v9 = [NSNumber numberWithDouble:v8];
  v18[0] = v9;
  v17[1] = @"fromIndex";
  if (a4 == -1)
  {
    uint64_t v10 = &unk_1EEA53328;
  }
  else
  {
    uint64_t v10 = [NSNumber numberWithUnsignedLong:a4];
  }
  v18[1] = v10;
  void v17[2] = @"toIndex";
  if (a5 == -1)
  {
    uint64_t v11 = &unk_1EEA53328;
  }
  else
  {
    uint64_t v11 = [NSNumber numberWithUnsignedLong:a5];
  }
  void v18[2] = v11;
  id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:3];

  unsigned int v12 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)unsigned int v12 = &unk_1EE9FD098;
  *((void *)v12 + 1) = &v16;
  *((void *)v12 + 2) = &v15;
  double v14 = v12;
  WebCore::mainThreadNormalWorld(v12);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  uint64_t v13 = v14;
  double v14 = 0;
  if (v13) {
    (*(void (**)(WebCore *))(*(void *)v13 + 8))(v13);
  }
}

void sub_1992B3FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a2;
  double v8 = (uint64_t *)(a1 + 192);
  uint64_t v9 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(*(void **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v21, v8, (uint64_t)v9, v10);
  uint64_t v11 = *v8;
  if (*v8)
  {
    unsigned int v12 = *(_DWORD *)(v11 - 4);
    uint64_t v13 = v11 + 40 * v12;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v12 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v20, v8, v13, v11 + 40 * v12);
  while (1)
  {
    uint64_t v14 = v22;
    if (v22 == v20[1]) {
      break;
    }
    if (*(unsigned char *)(v22 + 16) && *(void *)(v22 + 8) == a2)
    {
      if (!*(unsigned char *)(v22 + 32)) {
        *(unsigned char *)(v22 + 32) = 1;
      }
      *(void *)(v14 + 24) = a3;
      break;
    }
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v21);
  }
  v24[0] = @"newWindowId";
  double v15 = (double)a3;
  if (a3 + 3 < 2) {
    double v15 = -1.0;
  }
  uint64_t v16 = [NSNumber numberWithDouble:v15];
  v24[1] = @"newPosition";
  v25[0] = v16;
  if (a4 == -1)
  {
    uint64_t v17 = &unk_1EEA53328;
  }
  else
  {
    uint64_t v17 = [NSNumber numberWithUnsignedLong:a4];
  }
  v25[1] = v17;
  id v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:2];

  uint64_t v18 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v18 = &unk_1EE9FD0C0;
  *((void *)v18 + 1) = &v23;
  *((void *)v18 + 2) = &v21;
  v20[0] = v18;
  WebCore::mainThreadNormalWorld(v18);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v20);
  uint64_t v19 = v20[0];
  v20[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
}

void sub_1992B426C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  v17[0] = @"previousTabId";
  double v7 = (double)a2;
  if (a2 == -2) {
    double v7 = -1.0;
  }
  double v8 = [NSNumber numberWithDouble:v7];
  v18[0] = v8;
  v17[1] = @"tabId";
  double v9 = (double)a3;
  if (a3 == -2) {
    double v9 = -1.0;
  }
  uint64_t v10 = [NSNumber numberWithDouble:v9];
  v18[1] = v10;
  void v17[2] = @"windowId";
  double v11 = (double)a4;
  if (a4 + 3 < 2) {
    double v11 = -1.0;
  }
  unsigned int v12 = [NSNumber numberWithDouble:v11];
  void v18[2] = v12;
  id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:3];

  uint64_t v13 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v13 = &unk_1EE9FD0E8;
  *((void *)v13 + 1) = &v16;
  double v15 = v13;
  WebCore::mainThreadNormalWorld(v13);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v15);
  uint64_t v14 = v15;
  double v15 = 0;
  if (v14) {
    (*(void (**)(WebCore *))(*(void *)v14 + 8))(v14);
  }
}

void sub_1992B4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  id v6 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
  double v7 = v6;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }

  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    double v9 = *(unint64_t **)a2;
    uint64_t v10 = 8 * v8;
    do
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      double v11 = (WTF *)objc_claimAutoreleasedReturnValue();
      double v12 = (double)*v9;
      if (*v9 == -2) {
        double v12 = -1.0;
      }
      uint64_t v13 = [NSNumber numberWithDouble:v12];
      WTF::addUnlessNil(v11, v13, v14);

      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  double v15 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  v23[0] = @"windowId";
  double v17 = (double)a3;
  if (a3 + 3 < 2) {
    double v17 = -1.0;
  }
  uint64_t v18 = [NSNumber numberWithDouble:v17];
  v23[1] = @"tabIds";
  v24[0] = v18;
  v24[1] = v15;
  CFTypeRef cf = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];

  uint64_t v19 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v19 = &unk_1EE9FD110;
  *((void *)v19 + 1) = &cf;
  id v21 = v19;
  WebCore::mainThreadNormalWorld(v19);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v21);
  id v20 = v21;
  id v21 = 0;
  if (v20) {
    (*(void (**)(WebCore *))(*(void *)v20 + 8))(v20);
  }
}

void sub_1992B471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  v14[0] = @"windowId";
  double v6 = (double)a3;
  if (a3 + 3 < 2) {
    double v6 = -1.0;
  }
  double v7 = [NSNumber numberWithDouble:v6];
  v14[1] = @"isWindowClosing";
  v15[0] = v7;
  uint64_t v8 = [NSNumber numberWithBool:a4];
  v15[1] = v8;
  id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:2];

  double v9 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(void *)double v9 = &unk_1EE9FD138;
  *((void *)v9 + 1) = &v13;
  *((void *)v9 + 2) = &v12;
  double v11 = v9;
  WebCore::mainThreadNormalWorld(v9);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v11);
  uint64_t v10 = v11;
  double v11 = 0;
  if (v10) {
    (*(void (**)(WebCore *))(*(void *)v10 + 8))(v10);
  }
}

void sub_1992B4934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCC10;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCC10;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCC28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B4BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 192);
    if (v40 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FCC28[v40])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCreate,WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[176] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FCC28[v4])(&v1, v3);
  }
}

void sub_1992B4CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FCC28[a38])(&a13, v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *a2;
        uint64_t v14 = a2[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_22;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_22:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_23;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      uint64_t result = IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(a2, &v24);
      int v11 = v26;
      if (v26)
      {
        uint64_t result = (uint64_t)std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v28, (uint64_t)&v24);
        int v29 = 0;
        int v11 = 1;
        unsigned __int8 v30 = 1;
        if (v26)
        {
          uint64_t result = std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
          int v11 = v30;
        }
      }
      else
      {
        char v27 = 0;
        unsigned __int8 v30 = 0;
      }
    }
    else
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v24);
      int v11 = v25;
      if (v25)
      {
        v28[0] = v24;
        int v11 = 1;
        int v29 = 1;
      }
      else
      {
        char v27 = 0;
      }
      unsigned __int8 v30 = v11;
    }
    if (v11) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v18 = a2[3];
  if (v18 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v5);
  }
  char v27 = 0;
  unsigned __int8 v30 = 0;
LABEL_25:
  uint64_t v19 = *a2;
  uint64_t v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v21 = a2[3];
  if (!v21 || !v20 || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), !v30))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 200) = 0;
LABEL_27:
    uint64_t v22 = *a2;
    uint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v23) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v22);
      }
    }
    return result;
  }
LABEL_14:
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 192) = -1;
  int v12 = v29;
  if (v29 == -1)
  {
    *(unsigned char *)(a1 + 200) = 1;
    return result;
  }
  uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, void *))off_1EE9FCC38[v29])(&v24, a1 + 8, v28);
  *(_DWORD *)(a1 + 192) = v12;
  int v13 = v30;
  *(unsigned char *)(a1 + 200) = 1;
  if (v13)
  {
    if (v29 != -1)
    {
      uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1EE9FCC28[v29])(&v24, v28);
      if (!*(unsigned char *)(a1 + 200)) {
        goto LABEL_27;
      }
    }
  }
  return result;
}

void sub_1992B5018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(unsigned char *)(v34 + 200))
  {
    uint64_t v36 = *(unsigned int *)(v34 + 192);
    if (v36 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FCC28[v36])(&a34, v34 + 8);
    }
    *(_DWORD *)(v34 + 192) = -1;
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit25WebExtensionTabParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::createTab(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      unint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

id WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176)) {
    WebKit::toWebAPI(a1);
  }
  else {
  char v1 = [MEMORY[0x1E4F1CA98] null];
  }

  return v1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCC58;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCC58;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>((uint64_t)v4, a2);
    if (v6)
    {
      WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9FCC70[v5])(&v7, v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B5440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9FCC70[a12])(v14 - 17, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FCC70[v2])(&v3, v1);
  }
}

void sub_1992B54D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FCC70[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void *)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_19;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v17 = v6;
    uint64_t v18 = 0;
LABEL_19:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_20:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v5);
    }
    goto LABEL_21;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v30);
    int v13 = v31;
    if ((_BYTE)v31)
    {
      v27[0] = v30;
      int v13 = 1;
      int v28 = 1;
    }
    else
    {
      LOBYTE(v27[0]) = 0;
    }
    unsigned __int8 v29 = v13;
    int v14 = 1;
    if (!v13) {
      goto LABEL_21;
    }
LABEL_14:
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, void *))off_1EE9FCC80[v14])(&v30, a1, v27);
    *(_DWORD *)(a1 + 16) = v14;
    int v16 = v29;
    *(unsigned char *)(a1 + 24) = 1;
    if (!v16) {
      return result;
    }
    if (v28 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1EE9FCC70[v28])(&v30, v27);
    if (*(unsigned char *)(a1 + 24)) {
      return result;
    }
    goto LABEL_23;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, (uint64_t)&v30);
  int v11 = v32;
  if (v32)
  {
    v27[0] = v30;
    uint64_t v12 = v31;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    v27[1] = v12;
    int v28 = 0;
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v10);
    int v11 = 1;
  }
  else
  {
    LOBYTE(v27[0]) = 0;
  }
  int v14 = 0;
  unsigned __int8 v29 = v11;
  if (v11) {
    goto LABEL_14;
  }
LABEL_21:
  uint64_t v22 = *(void *)a2;
  uint64_t v23 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v24 = *((void *)a2 + 3);
  if (v24 && v23) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_23:
  uint64_t v25 = *(void *)a2;
  uint64_t v26 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v26) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v25);
    }
  }
  return result;
}

void sub_1992B57C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1EE9FCC70[v15])(&a9, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit25WebExtensionTabParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::query(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      uint64_t v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(void *)a2) {
      unint64_t v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v6 = &stru_1EEA10550;
    }
    uint64_t v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    id v7 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
    char v8 = v7;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }

    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = 176 * v9;
      do
      {
        WTF::RetainPtr<NSSet>::get((id *)&cf);
        uint64_t v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        uint64_t v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 176;
        v11 -= 176;
      }
      while (v11);
    }
    WTF::RetainPtr<NSSet>::get((id *)&cf);
    uint64_t v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    CFTypeRef v16 = cf;
    uint64_t v19 = v15;
    CFTypeRef cf = 0;
    if (v16)
    {
      CFRelease(v16);
      uint64_t v15 = v19;
    }
    id v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCCA0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCCA0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCC28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B5CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 192);
    if (v40 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FCC28[v40])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGet,WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[176] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FCC28[v4])(&v1, v3);
  }
}

void sub_1992B5DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FCC28[a38])(&a13, v38);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::get(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCCC8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCCC8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCC28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v3);
  }
}

void sub_1992B60E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 192);
    if (v40 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FCC28[v40])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetCurrent,WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[176] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FCC28[v4])(&v1, v3);
  }
}

void sub_1992B61BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FCC28[a38])(&a13, v38);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::getCurrent(WebKit::WebPage &,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCCF0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCCF0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>((uint64_t)v4, a2);
    if (v6)
    {
      WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v4);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9FCC70[v5])(&v7, v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v3 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B6494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9FCC70[a12])(v14 - 17, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsQuery,WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FCC70[v2])(&v3, v1);
  }
}

void sub_1992B6524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FCC70[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::getSelected(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    if (v2 != 1)
    {
      char v8 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v8);
    }
    char v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    uint64_t v10 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
  }
  else
  {
    int v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (!*(_DWORD *)(a2 + 12))
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
      return;
    }
    WebKit::toWebAPI(*(void *)a2);
    uint64_t v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v6 = WebKit::WebExtensionCallbackHandler::call(v5, v10);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCD18;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCD18;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCC28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B687C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 192);
    if (v40 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FCC28[v40])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDuplicate,WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[176] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FCC28[v4])(&v1, v3);
  }
}

void sub_1992B6958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FCC28[a38])(&a13, v38);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::duplicate(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCD40;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCD40;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCC28[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B6C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 192);
    if (v40 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FCC28[v40])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsUpdate,WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[176] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FCC28[v4])(&v1, v3);
  }
}

void sub_1992B6D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FCC28[a38])(&a13, v38);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::update(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 192);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionTabParameters>(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCD68;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCD68;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemove,WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::remove(NSObject *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        char v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B7070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCD90;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCD90;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsReload,WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::reload(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        char v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B72D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCDB8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCDB8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoBack,WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goBack(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        char v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B7538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCDE0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCDE0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGoForward,WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::goForward(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        char v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B779C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCE08;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCE08;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v17 = *((void *)a2 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
            unint64_t v15 = 0;
            uint64_t v26 = *(void *)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
              uint64_t v16 = *(void *)a2;
              unint64_t v15 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        id v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (v8)
          {
            unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
            if (v5 < v9 || v5 - v9 <= 7)
            {
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v19 = *((void *)a2 + 3);
              if (v19)
              {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
                uint64_t v29 = *(void *)a2;
                uint64_t v30 = *((void *)a2 + 1);
                uint64_t v31 = *((void *)a2 + 3);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                if (v31)
                {
                  if (v30) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
                  }
                }
              }
              goto LABEL_28;
            }
            int v11 = 0;
            uint64_t v12 = (uint64_t *)(v4 + v9);
            uint64_t v13 = *v12;
            *((void *)a2 + 2) = v12 + 1;
            uint64_t v35 = v13;
            int v36 = 0;
            char v37 = 1;
          }
          else
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v38);
            if (!v39)
            {
LABEL_28:
              uint64_t v20 = *(void *)a2;
              uint64_t v21 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v22 = *((void *)a2 + 3);
              if (v22 && v21) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
              }
              v32[0] = 0;
              char v34 = 0;
              goto LABEL_30;
            }
            uint64_t v35 = v38;
            int v11 = 1;
            int v36 = 1;
            char v37 = 1;
          }
          v32[0] = 0;
          int v33 = -1;
          ((void (*)(uint64_t *, unsigned char *, uint64_t *))off_1EE9FCE30[v11])(&v38, v32, &v35);
          int v33 = v11;
          char v34 = 1;
          if (!v37 || v36 == -1 || (((void (*)(uint64_t *, uint64_t *))off_1EE9FCE20[v36])(&v38, &v35), v34))
          {
LABEL_20:
            WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v32);
            if (v34)
            {
              if (v33 != -1) {
                ((void (*)(uint64_t *, unsigned char *))off_1EE9FCE20[v33])(&v35, v32);
              }
            }
            return;
          }
LABEL_30:
          uint64_t v23 = *(void *)a2;
          uint64_t v24 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v25 = *((void *)a2 + 3);
          if (!v25 || !v24 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23), !v34))
          {
            IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
            return;
          }
          goto LABEL_20;
        }
        unint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
      }
      goto LABEL_28;
    }
  }
  uint64_t v14 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v14);
}

void sub_1992B7C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FCE20[a12])(&a16, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsGetZoom,WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)&v1);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FCE20[v2])(&v3, &v1);
  }
}

void sub_1992B7D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCE20[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::getZoom(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      id v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    unsigned int v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    unsigned int v8 = [NSNumber numberWithDouble:*(double *)a2];
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCE50;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCE50;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSetZoom,WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::setZoom(WebKit::WebPage &,double,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        unsigned int v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B80D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCE78;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCE78;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCE90[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v3 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B8310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FCE90[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsDetectLanguage,WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FCE90[v2])(&v3, &v1);
}

void sub_1992B83A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCE90[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::detectLanguage(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      unint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    char v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    char v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
  }
  else
  {
    if (a2 && *(_DWORD *)(a2 + 4))
    {
      int v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      char v6 = (objc_object *)WTF::StringImpl::operator NSString *();
      char v7 = v5;
    }
    else
    {
      char v7 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      char v6 = (objc_object *)@"und";
    }
    id v8 = WebKit::WebExtensionCallbackHandler::call(v7, v6);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCEB0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCEB0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsToggleReaderMode,WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::toggleReaderMode(WebKit::WebPage &,double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        id v8 = v9;
        unint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B86C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCED8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCED8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v14 = *((void *)a2 + 3);
        if (v14)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
            unint64_t v12 = 0;
            uint64_t v22 = *(void *)a2;
            uint64_t v23 = *((void *)a2 + 1);
            uint64_t v24 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v13 = 0;
            if (v24 && v23)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              uint64_t v13 = *(void *)a2;
              unint64_t v12 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        id v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WTF::URL>(a2, &v33);
            int v8 = v36;
            if (v36)
            {
              uint64_t v9 = v33;
              uint64_t v33 = 0;
              uint64_t v28 = v9;
              long long v29 = v34;
              long long v30 = v35;
              int v31 = 0;
              int v8 = 1;
              goto LABEL_14;
            }
          }
          else
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v33);
            int v8 = v34;
            if ((_BYTE)v34)
            {
              uint64_t v28 = v33;
              int v8 = 1;
              int v31 = 1;
              goto LABEL_14;
            }
          }
          LOBYTE(v28) = 0;
LABEL_14:
          char v32 = v8;
          if (v8) {
            goto LABEL_15;
          }
          goto LABEL_28;
        }
        unint64_t v12 = v5;
        uint64_t v13 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v15 = *((void *)a2 + 3);
      if (v15 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
      }
      LOBYTE(v28) = 0;
      char v32 = 0;
LABEL_28:
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (!v18 || !v17 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16), !v32))
      {
        LOBYTE(v25[0]) = 0;
        char v27 = 0;
        goto LABEL_30;
      }
LABEL_15:
      LOBYTE(v25[0]) = 0;
      int v26 = -1;
      int v11 = v31;
      if (v31 == -1)
      {
        char v27 = 1;
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t *, uint64_t *))off_1EE9FCF00[v31])(&v33, v25, &v28);
        int v26 = v11;
        char v27 = 1;
        if (v32)
        {
          if (v31 != -1)
          {
            ((void (*)(uint64_t *, uint64_t *))off_1EE9FCEF0[v31])(&v33, &v28);
            if (!v27)
            {
LABEL_30:
              uint64_t v19 = *(void *)a2;
              uint64_t v20 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v21 = *((void *)a2 + 3);
              if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), !v27))
              {
                IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v2);
                return;
              }
            }
          }
        }
      }
      WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, v25[0], v26);
      if (v27)
      {
        if (v26 != -1) {
          ((void (*)(uint64_t *, uint64_t *))off_1EE9FCEF0[v26])(&v28, v25);
        }
      }
      return;
    }
  }
  uint64_t v10 = a1 + 8;

  IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v10);
}

void sub_1992B8B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  if (a17)
  {
    if (a15 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FCEF0[a15])(&a19, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsCaptureVisibleTab,WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(uint64_t a1)
{
  WTF::URL::URL((WTF::URL *)v2);
  int v3 = 0;
  WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, v2[0], 0);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FCEF0[v3])(&v4, v2);
  }
}

void sub_1992B8CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCEF0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  double result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  double result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPITabs::captureVisibleTab(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    if (a2) {
      char v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v4 = &stru_1EEA10550;
    }
    int v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
  }
  else
  {
    if (a2 && *(_DWORD *)(a2 + 4))
    {
      unint64_t v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      id v6 = (objc_object *)WTF::StringImpl::operator NSString *();
      unsigned int v7 = v5;
    }
    else
    {
      unsigned int v7 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      id v6 = (objc_object *)@"data:,";
    }
    id v8 = WebKit::WebExtensionCallbackHandler::call(v7, v6);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCF20;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCF20;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v4);
    if (v6)
    {
      WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v4, v5);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FCE90[v5])(&v7, &v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B9014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a10 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FCE90[a10])(v12 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsSendMessage,WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1EE9FCE90[v2])(&v3, &v1);
}

void sub_1992B90A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FCE90[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::sendMessage(WebKit::WebFrame &,double,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2) {
      int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v5 = &stru_1EEA10550;
    }
    int v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2) {
      char v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      char v6 = &stru_1EEA10550;
    }
    int v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    char v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCF48;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v2 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v2 + 48);
    }
  }
  char v3 = (OpaqueJSContext *)a1[3];
  if (v3) {
    JSGlobalContextRelease(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCF48;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = (OpaqueJSContext *)*((void *)this + 3);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsConnect,WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5), v7))
  {
    double result = WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)&v5);
    if (v7)
    {
      if (v6)
      {
        double result = (unsigned int *)v5;
        uint64_t v5 = 0;
        if (result)
        {
          if (*result == 2) {
            return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          }
          else {
            *result -= 2;
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    char v6 = 0;
    return WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)&v5);
  }
  return result;
}

void sub_1992B9424(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPITabs::connect(WebKit::WebFrame &,OpaqueJSContext const*,double,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(unsigned int *result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 8)) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *((void *)result + 3);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)result + 16))(*(void *)result);
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v2 = v6;
  if (!*(void *)a2)
  {
LABEL_10:
    char v7 = &stru_1EEA10550;
    goto LABEL_5;
  }
  char v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
LABEL_5:
  uint64_t v8 = *((void *)v4 + 2);
  uint64_t v11 = 0;
  uint64_t v9 = WebKit::WebExtensionAPIRuntimeBase::reportError(v2, v7, v8, (uint64_t)&v11);
  WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v9);

  uint64_t v10 = v11;
  uint64_t v11 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }

  return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*((unsigned int **)v4 + 3));
}

void sub_1992B9570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionScriptInjectionParameters const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(unsigned char **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCF70;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCF70;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(a2, v4);
    if (v6)
    {
      WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v6)
      {
        if (v5 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9FCF88[v5])(&v7, v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992B97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9FCF88[a12])(v14 - 17, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::TabsExecuteScript,WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FCF88[v2])(&v3, v1);
  }
}

void sub_1992B9888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FCF88[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITabs::executeScript(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      char v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)a2) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    uint64_t v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI((uint64_t *)a2, (void *)1);
    uint64_t v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCFA8;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCFA8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsInsertCSS,WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::insertCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B9B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FCFD0;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FCFD0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::TabsRemoveCSS,WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPITabs::removeCSS(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992B9DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent(WebKit::WebExtensionTabParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onCreated(v3);
  WebKit::toWebAPI(*(void *)(a1 + 8));
  id v5 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

void sub_1992B9EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t *a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v4 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v5 = WebKit::WebExtensionAPITabs::onUpdated(v4);
  uint64_t v6 = a1[1];
  if (!*(unsigned char *)(v6 + 8))
  {
    uint64_t v12 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

    _Unwind_Resume(v12);
  }
  id v7 = (WebKit::WebExtensionAPIEvent *)v5;
  unint64_t v8 = *(void *)v6;
  double v9 = (double)v8;
  if (v8 == -2) {
    double v9 = -1.0;
  }
  uint64_t v14 = [NSNumber numberWithDouble:v9];
  WebKit::toWebAPI(a1[2]);
  char v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::toWebAPI(a1[1]);
  char v11 = (objc_object *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v7, v14, v10, v11);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onReplaced(v3);
  unint64_t v5 = **(void **)(a1 + 8);
  double v6 = (double)v5;
  if (v5 == -2) {
    double v6 = -1.0;
  }
  char v10 = [NSNumber numberWithDouble:v6];
  unint64_t v7 = **(void **)(a1 + 16);
  double v8 = (double)v7;
  if (v7 == -2) {
    double v8 = -1.0;
  }
  double v9 = [NSNumber numberWithDouble:v8];
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v10, v9);
}

void sub_1992BA08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  int v2 = &result[5 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[5 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 40 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 5;
      v3 -= 40;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onDetached(v3);
  unint64_t v5 = **(void **)(a1 + 8);
  double v6 = (double)v5;
  if (v5 == -2) {
    double v6 = -1.0;
  }
  unint64_t v7 = [NSNumber numberWithDouble:v6];
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));
}

void sub_1992BA1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onMoved(v3);
  unint64_t v5 = **(void **)(a1 + 8);
  double v6 = (double)v5;
  if (v5 == -2) {
    double v6 = -1.0;
  }
  unint64_t v7 = [NSNumber numberWithDouble:v6];
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));
}

void sub_1992BA250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onAttached(v3);
  unint64_t v5 = **(void **)(a1 + 8);
  double v6 = (double)v5;
  if (v5 == -2) {
    double v6 = -1.0;
  }
  unint64_t v7 = [NSNumber numberWithDouble:v6];
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));
}

void sub_1992BA2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onActivated(v3);
  unint64_t v5 = **(objc_object ***)(a1 + 8);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onHighlighted(v3);
  unint64_t v5 = **(objc_object ***)(a1 + 8);

  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPITabs *)WebKit::WebExtensionAPINamespace::tabs(this);
  uint64_t v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPITabs::onRemoved(v3);
  unint64_t v5 = **(void **)(a1 + 8);
  double v6 = (double)v5;
  if (v5 == -2) {
    double v6 = -1.0;
  }
  unint64_t v7 = [NSNumber numberWithDouble:v6];
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, v7, **(objc_object ***)(a1 + 16));
}

void sub_1992BA438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::notifyFail(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  uint64_t v4 = a3;
  WebKit::scriptLocation((WebKit *)&v30, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v29);
  uint64_t v8 = v29[0];
  if (v29[0])
  {
    uint64_t v9 = *(void *)(v29[0] + 24);
    if (v9
      && (uint64_t v10 = *(void *)(v9 + 8)) != 0
      && (uint64_t v11 = *(void *)(v10 + 24)) != 0
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (id v13 = *(void **)(*(void *)(v12 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
      && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v15 = *(void *)(v14 + 616);
      if (v15)
      {
        uint64_t v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          char v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v27);
        }
        uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v28, v4);
        LOBYTE(v29[0]) = 0;
        v29[1] = &v28;
        void v29[2] = &v30;
        v29[3] = &v31;
        uint64_t v18 = *(void *)(v15 + 24);
        uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v19 = 1732;
        *((void *)v19 + 1) = v18;
        *((void *)v19 + 66) = (char *)v19 + 16;
        *((void *)v19 + 67) = 512;
        *((void *)v19 + 68) = 0;
        *((void *)v19 + 70) = 0;
        *((void *)v19 + 69) = 0;
        IPC::Encoder::encodeHeader(v19);
        char v32 = v19;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v19, (char *)v29);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v17 + 24) + 32))(v17 + 24, &v32, 0);
        uint64_t v21 = v32;
        char v32 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v25, v26);
        }
        uint64_t v22 = v28;
        uint64_t v28 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      uint64_t v23 = *(const void **)(v14 - 8);
    }
    else
    {
      uint64_t v23 = *(const void **)(v8 + 8);
    }
    CFRelease(v23);
  }
  uint64_t v24 = v30;
  long long v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v7);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void sub_1992BA6A4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v20);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

Inspector::ScriptCallStack *WebKit::scriptLocation(WebKit *this, const OpaqueJSContext *a2)
{
  Inspector::createScriptCallStack();
  uint64_t v3 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v13);
  uint64_t v5 = v3;
  if (v3)
  {
    double v6 = *(WTF::StringImpl **)(v3 + 8);
    if (v6)
    {
      int v8 = *(_DWORD *)v6;
      int v7 = *((_DWORD *)v6 + 1);
      int v9 = *(_DWORD *)v6 + 2;
      *(_DWORD *)double v6 = v9;
      if (v7)
      {
        int v10 = *(_DWORD *)(v3 + 28);
        *(_DWORD *)double v6 = v8 + 4;
        uint64_t v11 = v6;
        goto LABEL_12;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v11 = v14;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v10 = *(_DWORD *)(v5 + 28);
    if (v14)
    {
      int v9 = *(_DWORD *)v14;
      *(_DWORD *)v14 += 2;
LABEL_12:
      *(void *)this = v11;
      *((_DWORD *)this + 2) = v10;
      if (v9) {
        *(_DWORD *)uint64_t v11 = v9;
      }
      else {
        WTF::StringImpl::destroy(v11, v4);
      }
      goto LABEL_15;
    }
    *(void *)this = 0;
    *((_DWORD *)this + 2) = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)this = v14;
    *((_DWORD *)this + 2) = 0;
  }
LABEL_15:
  double result = v13;
  if (v13) {
    return (Inspector::ScriptCallStack *)WTF::RefCounted<Inspector::ScriptCallStack>::deref(v13);
  }
  return result;
}

void sub_1992BA874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (a9) {
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPITest::notifyPass(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  uint64_t v4 = a3;
  WebKit::scriptLocation((WebKit *)&v30, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v29);
  uint64_t v8 = v29[0];
  if (v29[0])
  {
    uint64_t v9 = *(void *)(v29[0] + 24);
    if (v9
      && (uint64_t v10 = *(void *)(v9 + 8)) != 0
      && (uint64_t v11 = *(void *)(v10 + 24)) != 0
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (id v13 = *(void **)(*(void *)(v12 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
      && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v15 = *(void *)(v14 + 616);
      if (v15)
      {
        uint64_t v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          char v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v27);
        }
        uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v28, v4);
        LOBYTE(v29[0]) = 1;
        v29[1] = &v28;
        void v29[2] = &v30;
        v29[3] = &v31;
        uint64_t v18 = *(void *)(v15 + 24);
        uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v19 = 1732;
        *((void *)v19 + 1) = v18;
        *((void *)v19 + 66) = (char *)v19 + 16;
        *((void *)v19 + 67) = 512;
        *((void *)v19 + 68) = 0;
        *((void *)v19 + 70) = 0;
        *((void *)v19 + 69) = 0;
        IPC::Encoder::encodeHeader(v19);
        char v32 = v19;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v19, (char *)v29);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v17 + 24) + 32))(v17 + 24, &v32, 0);
        uint64_t v21 = v32;
        char v32 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v25, v26);
        }
        uint64_t v22 = v28;
        uint64_t v28 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      uint64_t v23 = *(const void **)(v14 - 8);
    }
    else
    {
      uint64_t v23 = *(const void **)(v8 + 8);
    }
    CFRelease(v23);
  }
  uint64_t v24 = v30;
  long long v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v7);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void sub_1992BAB18(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v20);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::yield(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, NSString *a3)
{
  uint64_t v4 = a3;
  WebKit::scriptLocation((WebKit *)&v30, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v29);
  uint64_t v8 = v29[0];
  if (v29[0])
  {
    uint64_t v9 = *(void *)(v29[0] + 24);
    if (v9
      && (uint64_t v10 = *(void *)(v9 + 8)) != 0
      && (uint64_t v11 = *(void *)(v10 + 24)) != 0
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (id v13 = *(void **)(*(void *)(v12 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
      && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v15 = *(void *)(v14 + 616);
      if (v15)
      {
        uint64_t v16 = (unsigned int **)(v15 + 16);
        ++*(_DWORD *)(v15 + 16);
        {
          char v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v27);
        }
        uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v28, v4);
        v29[0] = &v28;
        v29[1] = &v30;
        void v29[2] = &v31;
        uint64_t v18 = *(void *)(v15 + 24);
        uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v19 = 1735;
        *((void *)v19 + 1) = v18;
        *((void *)v19 + 66) = (char *)v19 + 16;
        *((void *)v19 + 67) = 512;
        *((void *)v19 + 68) = 0;
        *((void *)v19 + 70) = 0;
        *((void *)v19 + 69) = 0;
        IPC::Encoder::encodeHeader(v19);
        char v32 = v19;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(v19, (uint64_t)v29);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v17 + 24) + 32))(v17 + 24, &v32, 0);
        uint64_t v21 = v32;
        char v32 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v20);
          WTF::fastFree(v25, v26);
        }
        uint64_t v22 = v28;
        uint64_t v28 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
      }
      uint64_t v23 = *(const void **)(v14 - 8);
    }
    else
    {
      uint64_t v23 = *(const void **)(v8 + 8);
    }
    CFRelease(v23);
  }
  uint64_t v24 = v30;
  long long v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v7);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void sub_1992BAE18(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v20);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::log(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3)
{
  uint64_t v4 = a3;
  WebKit::scriptLocation((WebKit *)&v32, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v6, v31);
  uint64_t v8 = v31[0];
  if (v31[0])
  {
    uint64_t v9 = *(void *)(v31[0] + 24);
    if (v9
      && (uint64_t v10 = *(void *)(v9 + 8)) != 0
      && (uint64_t v11 = *(void *)(v10 + 24)) != 0
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (id v13 = *(void **)(*(void *)(v12 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
      && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v14 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v16 = *(void *)(v14 + 616);
      if (v16)
      {
        uint64_t v17 = (unsigned int **)(v16 + 16);
        ++*(_DWORD *)(v16 + 16);
        {
          long long v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v29);
        }
        uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
        uint64_t v19 = WebKit::debugString((WebKit *)v4, v15);
        MEMORY[0x19972EAD0](&v30, v19);
        v31[0] = &v30;
        v31[1] = &v32;
        _OWORD v31[2] = &v33;
        uint64_t v20 = *(void *)(v16 + 24);
        uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v21 = 1733;
        *((void *)v21 + 1) = v20;
        *((void *)v21 + 66) = (char *)v21 + 16;
        *((void *)v21 + 67) = 512;
        *((void *)v21 + 68) = 0;
        *((void *)v21 + 70) = 0;
        *((void *)v21 + 69) = 0;
        IPC::Encoder::encodeHeader(v21);
        long long v34 = v21;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(v21, (uint64_t)v31);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v18 + 24) + 32))(v18 + 24, &v34, 0);
        uint64_t v23 = v34;
        long long v34 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v27, v28);
        }
        uint64_t v24 = v30;
        long long v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }

        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
      }
      uint64_t v25 = *(const void **)(v14 - 8);
    }
    else
    {
      uint64_t v25 = *(const void **)(v8 + 8);
    }
    CFRelease(v25);
  }
  int v26 = v32;
  char v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v7);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
}

void sub_1992BB128(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v19 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v21);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

__CFString *WebKit::debugString(WebKit *this, JSValue *a2)
{
  int v2 = this;
  if (([(WebKit *)v2 _isRegularExpression] & 1) != 0
    || [(WebKit *)v2 _isFunction])
  {
    uint64_t v3 = [(WebKit *)v2 toString];
  }
  else
  {
    uint64_t v4 = [(WebKit *)v2 _toSortedJSONString];
    uint64_t v5 = (void *)v4;
    double v6 = @"undefined";
    if (v4) {
      double v6 = (__CFString *)v4;
    }
    uint64_t v3 = v6;
  }

  return v3;
}

void sub_1992BB278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertTrue(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, char a3, NSString *a4)
{
  double v6 = a4;
  WebKit::scriptLocation((WebKit *)&v32, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v8, v31);
  uint64_t v10 = v31[0];
  if (v31[0])
  {
    uint64_t v11 = *(void *)(v31[0] + 24);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0)
      && (uint64_t v16 = *(void *)(v15[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v16 - 8));
      CFRelease(*(CFTypeRef *)(v10 + 8));
      uint64_t v17 = *(void *)(v16 + 616);
      if (v17)
      {
        uint64_t v18 = (unsigned int **)(v17 + 16);
        ++*(_DWORD *)(v17 + 16);
        {
          long long v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v29);
        }
        uint64_t v19 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v30, v6);
        LOBYTE(v31[0]) = a3;
        v31[1] = &v30;
        _OWORD v31[2] = &v32;
        void v31[3] = &v33;
        uint64_t v20 = *(void *)(v17 + 24);
        uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v21 = 1734;
        *((void *)v21 + 1) = v20;
        *((void *)v21 + 66) = (char *)v21 + 16;
        *((void *)v21 + 67) = 512;
        *((void *)v21 + 68) = 0;
        *((void *)v21 + 70) = 0;
        *((void *)v21 + 69) = 0;
        IPC::Encoder::encodeHeader(v21);
        long long v34 = v21;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(v21, (char *)v31);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v19 + 24) + 32))(v19 + 24, &v34, 0);
        uint64_t v23 = v34;
        long long v34 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v27, v28);
        }
        uint64_t v24 = v30;
        long long v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v18);
      }
      uint64_t v25 = *(const void **)(v16 - 8);
    }
    else
    {
      uint64_t v25 = *(const void **)(v10 + 8);
    }
    CFRelease(v25);
  }
  int v26 = v32;
  char v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v9);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
}

void sub_1992BB4E4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v17);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v20);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertDeepEq(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  uint64_t v12 = WebKit::debugString((WebKit *)v9, v11);
  uint64_t v14 = WebKit::debugString((WebKit *)v8, v13);
  if ([(JSValue *)v9 isEqualToObject:v8]) {
    char v15 = 1;
  }
  else {
    char v15 = [v12 isEqualToString:v14];
  }
  WebKit::scriptLocation((WebKit *)&v44, a2);
  GlobalContext = JSContextGetGlobalContext(a2);
  WebKit::WebFrame::frameForContext(GlobalContext, v17, v43);
  uint64_t v19 = v43[0];
  if (v43[0])
  {
    uint64_t v20 = *(void *)(v43[0] + 24);
    if (v20
      && (uint64_t v21 = *(void *)(v20 + 8)) != 0
      && (uint64_t v22 = *(void *)(v21 + 24)) != 0
      && (uint64_t v23 = *(void *)(v22 + 8)) != 0
      && (uint64_t v24 = *(void **)(*(void *)(v23 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v24 + 1368))(v24) & 1) == 0)
      && (uint64_t v25 = *(void *)(v24[2] + 8)) != 0)
    {
      char v39 = v12;
      CFRetain(*(CFTypeRef *)(v25 - 8));
      CFRelease(*(CFTypeRef *)(v19 + 8));
      uint64_t v26 = *(void *)(v25 + 616);
      if (v26)
      {
        ++*(_DWORD *)(v26 + 16);
        {
          uint64_t v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v38);
        }
        uint64_t v27 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v42, v12);
        MEMORY[0x19972EAD0](&v41, v14);
        MEMORY[0x19972EAD0](&v40, v10);
        LOBYTE(v43[0]) = v15;
        v43[1] = &v42;
        void v43[2] = &v41;
        v43[3] = &v40;
        v43[4] = &v44;
        v43[5] = &v45;
        uint64_t v28 = *(void *)(v26 + 24);
        long long v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)long long v29 = 1731;
        *((void *)v29 + 1) = v28;
        *((void *)v29 + 66) = (char *)v29 + 16;
        *((void *)v29 + 67) = 512;
        *((void *)v29 + 68) = 0;
        *((void *)v29 + 70) = 0;
        *((void *)v29 + 69) = 0;
        IPC::Encoder::encodeHeader(v29);
        char v46 = v29;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v29, (char *)v43);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v27 + 24) + 32))(v27 + 24, &v46, 0);
        uint64_t v31 = v46;
        char v46 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v30);
          WTF::fastFree(v36, v37);
        }
        char v32 = v40;
        uint64_t v40 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v30);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        uint64_t v33 = v41;
        char v41 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        long long v34 = v42;
        uint64_t v42 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v30);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v26 + 16));
      }
      CFRelease(*(CFTypeRef *)(v25 - 8));
      uint64_t v12 = v39;
    }
    else
    {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
  }
  long long v35 = v44;
  char v44 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v18);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
}

void sub_1992BB8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertEq(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  uint64_t v17 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = a5;
  uint64_t v11 = WebKit::debugString((WebKit *)v8, v10);
  uint64_t v13 = WebKit::debugString((WebKit *)v17, v12);
  BOOL v15 = [(JSValue *)v8 isEqualToObject:v17];
  if (!v15 && [v11 isEqualToString:v13])
  {
    uint64_t v16 = [v13 stringByAppendingString:@" (different)"];

    uint64_t v13 = (void *)v16;
  }
  WebKit::assertEquals(a2, (const OpaqueJSContext *)v15, v11, (NSString *)v13, v9, v14);
}

void sub_1992BBB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::assertEquals(WebKit *this, const OpaqueJSContext *a2, void *a3, NSString *a4, NSString *a5, NSString *a6)
{
  char v8 = (char)a2;
  id v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  WebKit::scriptLocation((WebKit *)&v42, this);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v14, v41);
  uint64_t v16 = v41[0];
  if (v41[0])
  {
    uint64_t v17 = *(void *)(v41[0] + 24);
    if (v17
      && (uint64_t v18 = *(void *)(v17 + 8)) != 0
      && (uint64_t v19 = *(void *)(v18 + 24)) != 0
      && (uint64_t v20 = *(void *)(v19 + 8)) != 0
      && (uint64_t v21 = *(void **)(*(void *)(v20 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v21 + 1368))(v21) & 1) == 0)
      && (uint64_t v22 = *(void *)(v21[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v22 - 8));
      CFRelease(*(CFTypeRef *)(v16 + 8));
      uint64_t v23 = *(void *)(v22 + 616);
      if (v23)
      {
        uint64_t v24 = (unsigned int **)(v23 + 16);
        ++*(_DWORD *)(v23 + 16);
        {
          char v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v37);
        }
        uint64_t v25 = WebKit::WebProcess::singleton(void)::process;
        MEMORY[0x19972EAD0](&v40, v10);
        MEMORY[0x19972EAD0](&v39, v11);
        MEMORY[0x19972EAD0](&v38, v12);
        LOBYTE(v41[0]) = v8;
        v41[1] = &v40;
        void v41[2] = &v39;
        void v41[3] = &v38;
        void v41[4] = &v42;
        v41[5] = &v43;
        uint64_t v26 = *(void *)(v23 + 24);
        uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v27 = 1731;
        *((void *)v27 + 1) = v26;
        *((void *)v27 + 66) = (char *)v27 + 16;
        *((void *)v27 + 67) = 512;
        *((void *)v27 + 68) = 0;
        *((void *)v27 + 70) = 0;
        *((void *)v27 + 69) = 0;
        IPC::Encoder::encodeHeader(v27);
        char v44 = v27;
        IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v27, (char *)v41);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v25 + 24) + 32))(v25 + 24, &v44, 0);
        long long v29 = v44;
        char v44 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v28);
          WTF::fastFree(v35, v36);
        }
        long long v30 = v38;
        uint64_t v38 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
        char v32 = v39;
        char v39 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        uint64_t v33 = v40;
        uint64_t v40 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v24);
      }
      uint64_t v31 = *(const void **)(v22 - 8);
    }
    else
    {
      uint64_t v31 = *(const void **)(v16 + 8);
    }
    CFRelease(v31);
  }
  long long v34 = v42;
  uint64_t v42 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v15);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
}

void sub_1992BBE38(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, IPC::Encoder *a20)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v23);
  CFRelease(*(CFTypeRef *)(v24 - 8));
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v26);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertRejects(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  char v8 = a3;
  uint64_t v9 = a4;
  id v10 = a5;
  v26[0] = 0;
  v26[1] = v26;
  void v26[2] = 0x3032000000;
  v26[3] = __Block_byref_object_copy__13;
  v26[4] = __Block_byref_object_dispose__13;
  id v27 = 0;
  uint64_t v11 = (void *)MEMORY[0x1E4F30938];
  uint64_t v12 = [(JSValue *)v8 context];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke;
  void v25[3] = &unk_1E5813BA8;
  float v25[4] = v26;
  uint64_t v13 = [v11 valueWithNewPromiseInContext:v12 fromExecutor:v25];

  uint64_t v14 = (void *)MEMORY[0x1E4F30938];
  BOOL v15 = [(JSValue *)v8 context];
  uint64_t v16 = [v14 valueWithNewPromiseResolvedWithResult:v8 inContext:v15];

  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke_2;
  void v20[3] = &unk_1E5813BD0;
  uint64_t v24 = a2;
  uint64_t v17 = v9;
  uint64_t v21 = v17;
  uint64_t v18 = v10;
  uint64_t v22 = v18;
  uint64_t v23 = v26;
  [v16 _awaitThenableResolutionWithCompletionHandler:v20];

  _Block_object_dispose(v26, 8);

  return v13;
}

void sub_1992BC14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN6WebKit19WebExtensionAPITest13assertRejectsEPK15OpaqueJSContextP7JSValueS5_P8NSString_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  uint64_t v9 = v6;
  if (!v5 && v6)
  {
    if ([v6 isObject] && objc_msgSend(v9, "hasProperty:", @"message"))
    {
      id v10 = [v9 objectForKeyedSubscript:@"message"];
    }
    else
    {
      id v10 = v9;
    }
    uint64_t v16 = v10;
    uint64_t v17 = *(void **)(a1 + 32);
    if (v17)
    {
      if ([v17 _isRegularExpression])
      {
        uint64_t v18 = *(void **)(a1 + 32);
        v47[0] = v16;
        uint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:1];
        uint64_t v20 = [v18 invokeMethod:@"test" withArguments:v19];

        uint64_t v21 = *(WebKit **)(a1 + 56);
        uint64_t v22 = (const OpaqueJSContext *)[v20 toBool];
        uint64_t v24 = WebKit::debugString(*(WebKit **)(a1 + 32), v23);
        WebKit::debugString(v16, v25);
        uint64_t v26 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::combineMessages(*(WebKit **)(a1 + 40), &cfstr_PromiseRejecte_0.isa, v27);
        uint64_t v28 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::assertEquals(v21, v22, v24, v26, v28, v29);

        id v30 = (id)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) callWithArguments:0];
LABEL_23:

        goto LABEL_24;
      }
      char v39 = *(WebKit **)(a1 + 56);
      uint64_t v40 = (const OpaqueJSContext *)[*(id *)(a1 + 32) isEqualWithTypeCoercionToObject:v16];
      long long v35 = WebKit::debugString(*(WebKit **)(a1 + 32), v41);
      WebKit::debugString(v16, v42);
      char v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages(*(WebKit **)(a1 + 40), &cfstr_PromiseRejecte_1.isa, v43);
      char v44 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(v39, v40, v35, v37, v44, v45);
    }
    else
    {
      long long v34 = *(WebKit **)(a1 + 56);
      long long v35 = WebKit::debugString(v16, v11);
      WebKit::combineMessages(*(WebKit **)(a1 + 40), &cfstr_PromiseRejecte.isa, v36);
      char v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(v34, (const OpaqueJSContext *)1, @"(any error)", (NSString *)v35, v37, v38);
    }

    id v46 = (id)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) callWithArguments:0];
    goto LABEL_23;
  }
  uint64_t v12 = *(WebKit **)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13)
  {
    uint64_t v14 = @"(any error)";
    if (v5) {
      goto LABEL_8;
    }
LABEL_14:
    BOOL v15 = @"(no error)";
    goto LABEL_15;
  }
  WebKit::debugString(*(WebKit **)(a1 + 32), v7);
  uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_8:
  WebKit::debugString(v5, v7);
  BOOL v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_15:
  WebKit::combineMessages(*(WebKit **)(a1 + 40), &cfstr_PromiseDidNotR.isa, v8);
  uint64_t v31 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::assertEquals(v12, 0, v14, &v15->isa, v31, v32);

  if (v5) {
  if (v13)
  }

  id v33 = (id)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) callWithArguments:0];
LABEL_24:
}

void sub_1992BC524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::combineMessages(WebKit *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(WebKit *)v4 length] && [(NSString *)v5 length])
  {
    id v6 = [(WebKit *)v4 stringByAppendingString:@"\n"];
    uint64_t v7 = [v6 stringByAppendingString:v5];

LABEL_7:
    uint64_t v4 = (WebKit *)v7;
    goto LABEL_8;
  }
  if (![(WebKit *)v4 length] || [(NSString *)v5 length])
  {
    uint64_t v7 = (uint64_t)v5;
    uint64_t v5 = 0;
    goto LABEL_7;
  }
LABEL_8:

  return v4;
}

void sub_1992BC6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertResolves(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  uint64_t v7 = a3;
  char v8 = a4;
  v23[0] = 0;
  v23[1] = v23;
  void v23[2] = 0x3032000000;
  void v23[3] = __Block_byref_object_copy__13;
  void v23[4] = __Block_byref_object_dispose__13;
  id v24 = 0;
  uint64_t v9 = (void *)MEMORY[0x1E4F30938];
  id v10 = [(JSValue *)v7 context];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke;
  v22[3] = &unk_1E5813BA8;
  void v22[4] = v23;
  uint64_t v11 = [v9 valueWithNewPromiseInContext:v10 fromExecutor:v22];

  uint64_t v12 = (void *)MEMORY[0x1E4F30938];
  uint64_t v13 = [(JSValue *)v7 context];
  uint64_t v14 = [v12 valueWithNewPromiseResolvedWithResult:v7 inContext:v13];

  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke_2;
  void v17[3] = &unk_1E5813BF8;
  uint64_t v20 = this;
  uint64_t v21 = a2;
  uint64_t v19 = v23;
  BOOL v15 = v8;
  uint64_t v18 = v15;
  [v14 _awaitThenableResolutionWithCompletionHandler:v17];

  _Block_object_dispose(v23, 8);

  return v11;
}

void sub_1992BC8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN6WebKit19WebExtensionAPITest14assertResolvesEPK15OpaqueJSContextP7JSValueP8NSString_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if ([v6 isObject] && objc_msgSend(v7, "hasProperty:", @"message"))
    {
      char v8 = [v7 objectForKeyedSubscript:@"message"];
    }
    else
    {
      char v8 = v7;
    }
    id v10 = v8;
    uint64_t v11 = *(const OpaqueJSContext **)(a1 + 56);
    uint64_t v12 = *(WebKit **)(a1 + 32);
    uint64_t v13 = NSString;
    uint64_t v14 = WebKit::debugString(v8, v9);
    BOOL v15 = [v13 stringWithFormat:@"Promise rejected with an error: %@", v14];
    WebKit::combineMessages(v12, v15, v16);
    uint64_t v17 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPITest::notifyFail(v17, v11, (NSString *)v17);

    id v18 = (id)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) callWithArguments:0];
  }
  else
  {
    WebKit::WebExtensionAPITest::assertTrue(0, *(const OpaqueJSContext **)(a1 + 56), 1, &cfstr_PromiseResolve.isa);
    uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    v22[0] = v5;
    uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:1];
    id v21 = (id)[v19 callWithArguments:v20];
  }
}

void sub_1992BCAD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::assertThrows(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, JSValue *a4, NSString *a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  char v8 = a3;
  uint64_t v9 = a4;
  id v10 = a5;
  id v11 = [(JSValue *)v8 callWithArguments:MEMORY[0x1E4F1CBF0]];
  uint64_t v12 = [(JSValue *)v8 context];
  uint64_t v13 = [v12 exception];

  if (v13)
  {
    if ([v13 isObject]
      && [v13 hasProperty:@"message"])
    {
      uint64_t v16 = [v13 objectForKeyedSubscript:@"message"];
    }
    else
    {
      uint64_t v16 = v13;
    }
    uint64_t v17 = v16;
    id v18 = [(JSValue *)v8 context];
    [v18 setException:0];

    if (v9)
    {
      if ([(JSValue *)v9 _isRegularExpression])
      {
        v43[0] = v17;
        uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:1];
        uint64_t v42 = [(JSValue *)v9 invokeMethod:@"test" withArguments:v20];

        id v21 = (const OpaqueJSContext *)[v42 toBool];
        uint64_t v23 = WebKit::debugString((WebKit *)v9, v22);
        WebKit::debugString(v17, v24);
        uint64_t v25 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::combineMessages((WebKit *)v10, &cfstr_FunctionThrewA_0.isa, v26);
        id v27 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::assertEquals(a2, v21, v23, v25, v27, v28);

LABEL_14:
        goto LABEL_18;
      }
      long long v34 = (const OpaqueJSContext *)[(JSValue *)v9 isEqualWithTypeCoercionToObject:v17];
      id v30 = WebKit::debugString((WebKit *)v9, v35);
      WebKit::debugString(v17, v36);
      char v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::combineMessages((WebKit *)v10, &cfstr_FunctionThrewA_1.isa, v37);
      uint64_t v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(a2, v34, v30, v32, v38, v39);
    }
    else
    {
      id v30 = WebKit::debugString(v17, v19);
      WebKit::combineMessages((WebKit *)v10, &cfstr_FunctionThrewA.isa, v31);
      char v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::assertEquals(a2, (const OpaqueJSContext *)1, @"(any exception)", (NSString *)v30, v32, v33);
    }

    goto LABEL_14;
  }
  if (v9)
  {
    WebKit::debugString((WebKit *)v9, v14);
    long long v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    long long v29 = @"(any exception)";
  }
  WebKit::combineMessages((WebKit *)v10, &cfstr_FunctionDidNot.isa, v15);
  uint64_t v40 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::assertEquals(a2, 0, v29, &cfstr_NoException.isa, v40, v41);

  if (v9) {
LABEL_18:
  }
}

void sub_1992BCE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPITest::assertSafe(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  char v8 = [(JSValue *)v6 callWithArguments:MEMORY[0x1E4F1CBF0]];
  uint64_t v9 = [(JSValue *)v6 context];
  id v10 = [v9 exception];

  if (v10)
  {
    uint64_t v12 = [(JSValue *)v6 context];
    [v12 setException:0];

    if ([v10 isObject]
      && [v10 hasProperty:@"message"])
    {
      uint64_t v13 = [v10 objectForKeyedSubscript:@"message"];
    }
    else
    {
      uint64_t v13 = v10;
    }
    BOOL v15 = v13;
    uint64_t v16 = NSString;
    uint64_t v17 = WebKit::debugString(v13, v14);
    id v18 = [v16 stringWithFormat:@"Function threw an exception: %@", v17];
    WebKit::combineMessages((WebKit *)v7, v18, v19);
    uint64_t v20 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPITest::notifyFail(v20, a2, (NSString *)v20);

    id v21 = (void *)MEMORY[0x1E4F30938];
    uint64_t v22 = [(JSValue *)v6 context];
    uint64_t v23 = [v21 valueWithUndefinedInContext:v22];

    char v8 = (void *)v23;
  }
  else
  {
    WebKit::WebExtensionAPITest::assertTrue(v11, a2, 1, &cfstr_FunctionDidNot.isa);
  }

  return v8;
}

void sub_1992BD0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValue *WebKit::WebExtensionAPITest::assertSafeResolve(WebKit::WebExtensionAPITest *this, const OpaqueJSContext *a2, JSValue *a3, NSString *a4)
{
  uint64_t v7 = a4;
  WebKit::WebExtensionAPITest::assertSafe((WebKit::WebExtensionAPITest *)v7, a2, a3, v7);
  char v8 = (JSValue *)objc_claimAutoreleasedReturnValue();
  if ([(JSValue *)v8 _isThenable])
  {
    uint64_t v9 = WebKit::WebExtensionAPITest::assertResolves(this, a2, v8, v7);

    char v8 = (JSValue *)v9;
  }

  return v8;
}

void sub_1992BD1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *WTF::RefCounted<Inspector::ScriptCallStack>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x19973C420]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  id v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = v4;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 1));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 2));
    uint64_t v7 = (int *)*((void *)a2 + 3);
    return IPC::Encoder::operator<<<int>(a1, v7);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(int **)(a2 + 16);

  return IPC::Encoder::operator<<<int>(a1, v4);
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  id v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = v4;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 1));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 2));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 3));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *((uint64_t **)a2 + 4));
    uint64_t v7 = (int *)*((void *)a2 + 5);
    return IPC::Encoder::operator<<<int>(a1, v7);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebExtensionAPIWebNavigation::getAllFrames(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((_MergedGlobals_125 & 1) == 0)
  {
    v37[0] = @"tabId";
    qword_1EB35A150 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:1];
    _MergedGlobals_125 = 1;
  }
  if (byte_1EB35A149 == 1)
  {
    char v8 = (void *)qword_1EB35A158;
  }
  else
  {
    long long v35 = @"tabId";
    uint64_t v36 = objc_opt_class();
    char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    qword_1EB35A158 = (uint64_t)v8;
    byte_1EB35A149 = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", (void *)qword_1EB35A150, v8, a4))
  {
    uint64_t v9 = [v7 objectForKeyedSubscript:@"tabId"];
    [v9 doubleValue];
    double v12 = v11;
    if (v11 == -1.0)
    {
      uint64_t v13 = -256;
      LOBYTE(v14) = -2;
    }
    else
    {
      uint64_t v15 = 0;
      if ((v11 < 0.0 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(void *)&v11 - 1) > 0xFFFFFFFFFFFFELL)
      {
        LOBYTE(v14) = 0;
        uint64_t v13 = 0;
        goto LABEL_9;
      }
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
      if (v11 >= 1.84467441e19)
      {
LABEL_9:
        v32[0] = v13 & 0xFFFFFFFFFFFFFF00 | v14;
        v32[1] = v15;
        if (!WebKit::isValid(v32[0], v15, a4, v10))
        {
LABEL_16:

          goto LABEL_17;
        }
        {
          uint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v31);
        }
        uint64_t v16 = WebKit::WebProcess::singleton(void)::process;
        if (v15)
        {
          ++*(_DWORD *)(a1 + 48);
          uint64_t v17 = *a3;
          *a3 = 0;
          uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
          uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v19 = 1717;
          *((void *)v19 + 1) = v18;
          *((void *)v19 + 66) = (char *)v19 + 16;
          *((void *)v19 + 67) = 512;
          *((void *)v19 + 68) = 0;
          *((void *)v19 + 70) = 0;
          *((void *)v19 + 69) = 0;
          IPC::Encoder::encodeHeader(v19);
          long long v34 = v19;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, v32);
          uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v20 = &unk_1EE9FD160;
          v20[1] = a1;
          v20[2] = v17;
          uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          *(void *)&__y[0] = v20;
          *(void *)&__y[1] = v21;
          (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v16 + 24) + 40))(v16 + 24, &v34, __y, 0);
          long double v23 = __y[0];
          __y[0] = 0.0;
          if (v23 != 0.0) {
            (*(void (**)(long double))(**(void **)&v23 + 8))(COERCE_LONG_DOUBLE(*(void *)&v23));
          }
          id v24 = v34;
          long long v34 = 0;
          if (v24)
          {
            IPC::Encoder::~Encoder(v24, v22);
            WTF::fastFree(v29, v30);
          }
          goto LABEL_16;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
LABEL_39:
        JUMPOUT(0x1992BD6F4);
      }
      if (modf(v11, __y) != 0.0)
      {
        uint64_t v15 = 0;
        LOBYTE(v14) = 0;
        uint64_t v13 = 0;
        goto LABEL_9;
      }
      unint64_t v14 = (unint64_t)v12;
      if ((unint64_t)v12 == -1)
      {
        __break(0xC471u);
        goto LABEL_39;
      }
      unint64_t v27 = v14 & 0xFFFFFFFFFFFFFF00;
      BOOL v28 = __CFADD__(v14 - 1, 2);
      if (v14 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        LOBYTE(v14) = -2;
      }
      if (v28) {
        uint64_t v13 = -256;
      }
      else {
        uint64_t v13 = v27;
      }
    }
    uint64_t v15 = 1;
    goto LABEL_9;
  }
LABEL_17:
}

void sub_1992BD7B8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigation::getFrame(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  void v50[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if ((byte_1EB35A14A & 1) == 0)
  {
    v50[0] = @"tabId";
    v50[1] = @"frameId";
    qword_1EB35A160 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:2];
    byte_1EB35A14A = 1;
  }
  if (byte_1EB35A14B == 1)
  {
    char v8 = (void *)qword_1EB35A168;
  }
  else
  {
    v48[0] = @"tabId";
    v48[1] = @"frameId";
    v49[0] = objc_opt_class();
    v49[1] = objc_opt_class();
    char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:v48 count:2];
    qword_1EB35A168 = (uint64_t)v8;
    byte_1EB35A14B = 1;
  }
  if (WebKit::validateDictionary(v7, @"details", (void *)qword_1EB35A160, v8, a4))
  {
    uint64_t v9 = [v7 objectForKeyedSubscript:@"tabId"];
    [v9 doubleValue];
    double v12 = v11;
    if (v11 == -1.0)
    {
      uint64_t v13 = -256;
      LOBYTE(v14) = -2;
LABEL_8:
      uint64_t v15 = 1;
      goto LABEL_9;
    }
    uint64_t v15 = 0;
    if ((v11 < 0.0 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*(void *)&v11 - 1) > 0xFFFFFFFFFFFFELL)
    {
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
      if (v11 < 1.84467441e19)
      {
        if (modf(v11, __y) == 0.0)
        {
          unint64_t v14 = (unint64_t)v12;
          if ((unint64_t)v12 == -1)
          {
            __break(0xC471u);
            goto LABEL_62;
          }
          unint64_t v37 = v14 & 0xFFFFFFFFFFFFFF00;
          BOOL v38 = __CFADD__(v14 - 1, 2);
          if (v14 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
            LOBYTE(v14) = -2;
          }
          if (v38) {
            uint64_t v13 = -256;
          }
          else {
            uint64_t v13 = v37;
          }
          goto LABEL_8;
        }
        uint64_t v15 = 0;
        LOBYTE(v14) = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_9:
    unint64_t v44 = v13 & 0xFFFFFFFFFFFFFF00 | v14;
    uint64_t v45 = v15;
    if (!WebKit::isValid(v44, v15, a4, v10))
    {
LABEL_35:

      goto LABEL_36;
    }
    uint64_t v16 = [v7 objectForKeyedSubscript:@"frameId"];
    [v16 doubleValue];
    double v19 = v18;
    if (v18 == 0.0)
    {
      unint64_t v20 = -256;
      LOBYTE(v21) = -2;
    }
    else
    {
      if (v18 != -1.0)
      {
        uint64_t v24 = 0;
        if ((v18 < 0.0 || ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
          && (unint64_t)(*(void *)&v18 - 1) > 0xFFFFFFFFFFFFELL)
        {
          LOBYTE(v21) = 0;
          unint64_t v20 = 0;
        }
        else
        {
          LOBYTE(v21) = 0;
          unint64_t v20 = 0;
          if (v18 < 1.84467441e19)
          {
            if (modf(v18, __y) == 0.0)
            {
              unint64_t v21 = (unint64_t)v19;
              if ((unint64_t)v19 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x1992BDD7CLL);
              }
              unint64_t v20 = v21 & 0xFFFFFFFFFFFFFF00;
              goto LABEL_24;
            }
            uint64_t v24 = 0;
            LOBYTE(v21) = 0;
            unint64_t v20 = 0;
          }
        }
LABEL_25:
        unint64_t v25 = v20 & 0xFFFFFFFFFFFFFF00 | v21;
        unint64_t v42 = v25;
        uint64_t v43 = v24;
        if (!v24 || v25 == -3)
        {
          WebKit::toErrorString(0, &cfstr_Frameid_0.isa, &cfstr_ItIsNotAFrameI.isa, v17, v42, v43);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:

          goto LABEL_35;
        }
        {
          char v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v41);
        }
        uint64_t v26 = WebKit::WebProcess::singleton(void)::process;
        if ((_BYTE)v45)
        {
          ++*(_DWORD *)(a1 + 48);
          uint64_t v27 = *a3;
          *a3 = 0;
          uint64_t v28 = *(void *)(*(void *)(a1 + 24) + 24);
          long long v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)long long v29 = 1718;
          *((void *)v29 + 1) = v28;
          *((void *)v29 + 66) = (char *)v29 + 16;
          *((void *)v29 + 67) = 512;
          *((void *)v29 + 68) = 0;
          *((void *)v29 + 70) = 0;
          *((void *)v29 + 69) = 0;
          IPC::Encoder::encodeHeader(v29);
          uint64_t v47 = v29;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v29, (uint64_t *)&v44);
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v29, (uint64_t *)&v42);
          id v30 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v30 = &unk_1EE9FD1A8;
          v30[1] = a1;
          void v30[2] = v27;
          uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          *(void *)&__y[0] = v30;
          *(void *)&__y[1] = v31;
          (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v26 + 24) + 40))(v26 + 24, &v47, __y, 0);
          long double v33 = __y[0];
          __y[0] = 0.0;
          if (v33 != 0.0) {
            (*(void (**)(long double))(**(void **)&v33 + 8))(COERCE_LONG_DOUBLE(*(void *)&v33));
          }
          long long v34 = v47;
          uint64_t v47 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v32);
            WTF::fastFree(v35, v36);
          }
          goto LABEL_34;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
LABEL_62:
        JUMPOUT(0x1992BDD5CLL);
      }
      unint64_t v20 = -256;
      LOBYTE(v21) = -3;
    }
LABEL_24:
    uint64_t v24 = 1;
    goto LABEL_25;
  }
LABEL_36:
}

void sub_1992BDE60(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a15)
  {
    IPC::Encoder::~Encoder(a15, a2);
    WTF::fastFree(v19, v20);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 41;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    char v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIWebNavigationEvent::WebExtensionAPIWebNavigationEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992BE104(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onCommitted(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 42;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    char v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    unsigned __int8 v6 = 44;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    char v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onCompleted(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    unsigned __int8 v6 = 43;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    char v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(WebKit::WebExtensionAPIWebNavigation *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    unsigned __int8 v6 = 45;
    WebKit::WebExtensionAPIWebNavigationEvent::create<WebKit::WebExtensionAPIWebNavigation &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    char v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 11);
    *((void *)this + 11) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        char v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 11);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 11);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent(uint64_t a1, char a2, unint64_t a3, unint64_t a4, unint64_t a5, void *a6, double a7)
{
  v27[5] = *MEMORY[0x1E4F143B8];
  char v25 = a2;
  v26[0] = @"url";
  if (*a6) {
    uint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v13 = &stru_1EEA10550;
  }
  v27[0] = v13;
  v26[1] = @"tabId";
  double v14 = (double)a3;
  if (a3 == -2) {
    double v14 = -1.0;
  }
  uint64_t v15 = [NSNumber numberWithDouble:v14];
  v27[1] = v15;
  void v26[2] = @"frameId";
  if (a4 == -3)
  {
    double v16 = -1.0;
  }
  else
  {
    double v16 = 0.0;
    if (a4 != -2) {
      double v16 = (double)a4;
    }
  }
  uint64_t v17 = [NSNumber numberWithDouble:v16];
  void v27[2] = v17;
  v26[3] = @"parentFrameId";
  if (a5 == -3)
  {
    double v18 = -1.0;
  }
  else
  {
    double v18 = 0.0;
    if (a5 != -2) {
      double v18 = (double)a5;
    }
  }
  double v19 = [NSNumber numberWithDouble:v18];
  void v27[3] = v19;
  v26[4] = @"timeStamp";
  unint64_t v20 = [NSNumber numberWithDouble:floor(a7 * 1000.0)];
  void v27[4] = v20;
  id v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:v26 count:5];

  unint64_t v21 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(void *)unint64_t v21 = &unk_1EE9FD248;
  *((void *)v21 + 1) = &v25;
  *((void *)v21 + 2) = &v24;
  *((void *)v21 + 3) = a6;
  long double v23 = v21;
  WebCore::mainThreadNormalWorld(v21);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v23);
  uint64_t v22 = v23;
  long double v23 = 0;
  if (v22) {
    (*(void (**)(WebCore *))(*(void *)v22 + 8))(v22);
  }
}

void sub_1992BE6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD160;
  int v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD160;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, WTF::StringImpl **a2, __n128 a3)
{
  if (a2)
  {
    int v5 = *a2;
    if (v5)
    {
      unsigned __int8 v6 = a2[1];
      if ((unint64_t)v6 <= a2[2] - v5)
      {
        id v30 = 0;
        uint64_t v31 = 0;
        *a2 = 0;
        a2[1] = 0;
        char v32 = a2[3];
        if (v32)
        {
          if (v6)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 16))(v32);
            id v30 = 0;
            double v55 = *a2;
            uint64_t v56 = a2[1];
            uint64_t v57 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v31 = 0;
            if (v57 && v56)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v55);
              uint64_t v31 = *a2;
              id v30 = a2[1];
            }
          }
          else
          {
            id v30 = 0;
            uint64_t v31 = 0;
          }
        }
      }
      else
      {
        id v7 = a2[2];
        char v8 = (unsigned __int8 *)v7 + 1;
        a2[2] = (WTF::StringImpl *)((char *)v7 + 1);
        unsigned int v9 = *(unsigned __int8 *)v7;
        if (v9 < 2)
        {
          if (!v9)
          {
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v68);
            if ((_BYTE)v69)
            {
              v65[0] = v68;
              int v26 = 1;
              int v66 = 1;
            }
            else
            {
              int v26 = 0;
              LOBYTE(v65[0]) = 0;
            }
            char v67 = v26;
            int v29 = 1;
            if (!v26) {
              goto LABEL_52;
            }
            goto LABEL_43;
          }
          unint64_t v10 = ((unint64_t)(v8 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
          if ((unint64_t)v6 < v10 || (unint64_t)v6 - v10 <= 7)
          {
            *a2 = 0;
            a2[1] = 0;
            uint64_t v40 = a2[3];
            if (v40)
            {
              (*(void (**)(WTF::StringImpl *))(*(void *)v40 + 16))(v40);
              uint64_t v58 = *a2;
              char v59 = a2[1];
              uint64_t v60 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              if (v60)
              {
                if (v59) {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v60 + 16))(v60, v58);
                }
              }
            }
LABEL_57:
            char v41 = *a2;
            unint64_t v42 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v43 = a2[3];
            if (v43 && v42) {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v43 + 16))(v43, v41);
            }
            int v27 = 0;
            LOBYTE(v65[0]) = 0;
LABEL_39:
            int v29 = 0;
            char v67 = v27;
            if (!v27)
            {
LABEL_52:
              long long v34 = *a2;
              long long v35 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v36 = a2[3];
              if (v36 && v35) {
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v34);
              }
              v62[0] = 0;
              char v64 = 0;
              goto LABEL_54;
            }
LABEL_43:
            v62[0] = 0;
            int v63 = -1;
            ((void (*)(uint64_t *, unsigned char *, void *))off_1EE9FD188[v29])(&v68, v62, v65);
            int v63 = v29;
            char v64 = 1;
            if (!v67 || v66 == -1 || (((void (*)(uint64_t *, void *))off_1EE9FD178[v66])(&v68, v65), v64))
            {
LABEL_46:
              WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v62);
              if (v64)
              {
                if (v63 != -1) {
                  ((void (*)(uint64_t *, unsigned char *))off_1EE9FD178[v63])(&v68, v62);
                }
              }
              return;
            }
LABEL_54:
            unint64_t v37 = *a2;
            BOOL v38 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            char v39 = a2[3];
            if (!v39
              || !v38
              || ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v37), !v64))
            {
              IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
              return;
            }
            goto LABEL_46;
          }
          double v12 = (unint64_t *)((char *)v5 + v10);
          unint64_t v13 = *v12;
          a2[2] = (WTF::StringImpl *)(v12 + 1);
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          if (v13 >= 0x3333)
          {
            do
            {
              IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)&v68, (uint64_t)a2, a3);
              int v44 = v74;
              if (v74)
              {
                unsigned int v45 = HIDWORD(v76);
                if (HIDWORD(v76) == v76)
                {
                  WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>((uint64_t)&v75, (unint64_t)&v68);
                }
                else
                {
                  uint64_t v46 = v75;
                  uint64_t v47 = (unsigned char *)(v75 + 80 * HIDWORD(v76));
                  unsigned char *v47 = v68;
                  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v47 + 8, (uint64_t)&v69);
                  uint64_t v48 = v46 + 80 * v45;
                  char v49 = v73;
                  a3 = v72;
                  *(__n128 *)(v48 + 56) = v72;
                  *(unsigned char *)(v48 + 72) = v49;
                  ++HIDWORD(v76);
                }
              }
              if (v74) {
                BOOL v50 = v71 == 0;
              }
              else {
                BOOL v50 = 1;
              }
              if (!v50)
              {
                __int16 v51 = v69;
                uint64_t v69 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2) {
                    WTF::StringImpl::destroy(v51, v5);
                  }
                  else {
                    *(_DWORD *)v51 -= 2;
                  }
                }
              }
              if (!v44)
              {
LABEL_29:
                char v70 = 0;
                WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v5);
                goto LABEL_57;
              }
              --v13;
            }
            while (v13);
            char v70 = 0;
            unsigned int v52 = HIDWORD(v76);
            id v24 = (WTF *)v75;
            if (v76 > HIDWORD(v76))
            {
              uint64_t v53 = (WTF *)v75;
              if (HIDWORD(v76))
              {
                if (HIDWORD(v76) >= 0x3333334)
                {
                  __break(0xC471u);
                  return;
                }
                uint64_t v54 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v76)));
                LODWORD(v76) = 80 * v52 / 0x50;
                uint64_t v75 = v54;
                uint64_t v53 = v24;
                if ((WTF *)v54 != v24)
                {
                  WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move((uint64_t)v24, (uint64_t)v24 + 80 * v52, v54);
                  uint64_t v53 = (WTF *)v75;
                }
              }
              if (v24)
              {
                if (v53 == v24)
                {
                  uint64_t v75 = 0;
                  LODWORD(v76) = 0;
                }
                WTF::fastFree(v24, v5);
LABEL_33:
                id v24 = (WTF *)v75;
              }
              else
              {
                id v24 = v53;
              }
            }
            uint64_t v25 = v76;
          }
          else
          {
            if (v13)
            {
              LODWORD(v76) = 80 * (int)v13 / 0x50u;
              uint64_t v75 = WTF::fastMalloc((WTF *)(80 * v13));
              while (1)
              {
                IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)&v68, (uint64_t)a2, v14);
                int v15 = v74;
                if (v74)
                {
                  unsigned int v16 = HIDWORD(v76);
                  if (HIDWORD(v76) == v76)
                  {
                    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>((uint64_t)&v75, (unint64_t)&v68);
                  }
                  else
                  {
                    uint64_t v17 = v75;
                    double v18 = (unsigned char *)(v75 + 80 * HIDWORD(v76));
                    unsigned char *v18 = v68;
                    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v18 + 8, (uint64_t)&v69);
                    uint64_t v19 = v17 + 80 * v16;
                    char v20 = v73;
                    __n128 v14 = v72;
                    *(__n128 *)(v19 + 56) = v72;
                    *(unsigned char *)(v19 + 72) = v20;
                    ++HIDWORD(v76);
                  }
                }
                if (v74) {
                  BOOL v21 = v71 == 0;
                }
                else {
                  BOOL v21 = 1;
                }
                if (!v21)
                {
                  uint64_t v22 = v69;
                  uint64_t v69 = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                    {
                      WTF::StringImpl::destroy(v22, v5);
                      if (!v15) {
                        goto LABEL_29;
                      }
                      goto LABEL_26;
                    }
                    *(_DWORD *)v22 -= 2;
                  }
                }
                if (!v15) {
                  goto LABEL_29;
                }
LABEL_26:
                if (!--v13)
                {
                  char v70 = 0;
                  goto LABEL_33;
                }
              }
            }
            id v24 = 0;
            uint64_t v25 = 0;
          }
          uint64_t v61 = v25;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          int v27 = 1;
          char v70 = 1;
          WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v5);
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          v65[0] = v24;
          v65[1] = v61;
          int v66 = 0;
          WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v28);
          goto LABEL_39;
        }
        id v30 = v6;
        uint64_t v31 = v5;
      }
      *a2 = 0;
      a2[1] = 0;
      long double v33 = a2[3];
      if (v33 && v30) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v31, v30);
      }
      goto LABEL_52;
    }
  }
  long double v23 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v23);
}

void sub_1992BEF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a16)
  {
    if (a14 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FD178[a14])(&a26, &a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetAllFrames,WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FD178[v2])(&v3, v1);
  }
}

void sub_1992BF07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FD178[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::decode((WTF::StringImpl **)a2, a1, a3);
  if (!*(unsigned char *)(a1 + 80))
  {
    unsigned __int8 v6 = *(WTF::StringImpl **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t result = *(WTF::StringImpl **)(a2 + 24);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                + 16))(result, v6);
  }
  return result;
}

void sub_1992BF124(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 80)) {
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2 + 8, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 80 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)v3;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v4 + 8), v3 + 8);
  long long v5 = *(_OWORD *)(v3 + 56);
  *(unsigned char *)(v4 + 72) = *(unsigned char *)(v3 + 72);
  *(_OWORD *)(v4 + 56) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1992BF318);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 80 * *(unsigned int *)(a1 + 12);
    int v5 = 80 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionFrameParameters>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 8;
    uint64_t v5 = result + 8;
    do
    {
      *(unsigned char *)(v4 - 8) = *(unsigned char *)(v5 - 8);
      std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)v4, v5);
      long long v6 = *(_OWORD *)(v5 + 48);
      *(unsigned char *)(v4 + 64) = *(unsigned char *)(v5 + 64);
      *(_OWORD *)(v4 + 48) = v6;
      uint64_t result = std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v5, v7);
      v4 += 80;
      uint64_t v8 = v5 + 72;
      v5 += 80;
    }
    while (v8 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = *(void *)a1 + 8;
    do
    {
      uint64_t v5 = std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v5, a2) + 80;
      v4 -= 80;
    }
    while (v4);
  }
  long long v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit27WebExtensionFrameParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWebNavigation::getAllFrames(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(void *)a2) {
        uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v5 = &stru_1EEA10550;
      }
      long double v33 = v5;
      WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);

      return;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
    __break(0xC471u);
    return;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  uint64_t v34 = 0;
  unsigned int v35 = 0;
  unsigned int v36 = v6;
  if (v6)
  {
    if (v6 >= 0x3333334) {
      goto LABEL_36;
    }
    int v7 = 80 * v6;
    uint64_t v8 = WTF::fastMalloc((WTF *)(80 * v6));
    unsigned int v35 = (v7 & 0xFFFFFFF0) / 0x50;
    uint64_t v34 = v8;
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = *(void *)a2 + 80 * v9;
      uint64_t v11 = v8 + 48;
      uint64_t v12 = *(void *)a2 + 16;
      do
      {
        uint64_t v13 = v12 - 16;
        *(unsigned char *)(v11 - 48) = *(unsigned char *)(v12 - 16);
        *(unsigned char *)(v11 - 40) = 0;
        *(unsigned char *)uint64_t v11 = 0;
        if (*(unsigned char *)(v12 + 32))
        {
          __n128 v14 = *(_DWORD **)(v12 - 8);
          if (v14) {
            *v14 += 2;
          }
          *(void *)(v11 - 40) = v14;
          long long v15 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(v11 - 32) = *(_OWORD *)v12;
          *(_OWORD *)(v11 - 16) = v15;
          *(unsigned char *)uint64_t v11 = 1;
        }
        long long v16 = *(_OWORD *)(v12 + 40);
        *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 56);
        *(_OWORD *)(v11 + 8) = v16;
        v11 += 80;
        v12 += 80;
      }
      while (v13 + 80 != v10);
    }
  }
  id v17 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v36];
  double v18 = v17;
  CFTypeRef cf = v17;
  if (v17) {
    CFRetain(v17);
  }

  if (v36)
  {
    uint64_t v19 = v34 + 80 * v36;
    uint64_t v20 = v34 + 16;
    do
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      BOOL v21 = (WTF *)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = v20 - 16;
      v38[0] = *(unsigned char *)(v20 - 16);
      LOBYTE(v39) = 0;
      char v42 = 0;
      if (*(unsigned char *)(v20 + 32))
      {
        long double v23 = *(WTF::StringImpl **)(v20 - 8);
        if (v23) {
          *(_DWORD *)v23 += 2;
        }
        char v39 = v23;
        long long v24 = *(_OWORD *)(v20 + 16);
        long long v40 = *(_OWORD *)v20;
        long long v41 = v24;
        char v42 = 1;
      }
      long long v43 = *(_OWORD *)(v20 + 40);
      char v44 = *(unsigned char *)(v20 + 56);
      int v26 = WebKit::toWebAPI(v38);
      if (v42 && v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v25);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
      int v27 = v26;
      WTF::addUnlessNil(v21, v27, v28);

      v20 += 80;
    }
    while (v22 + 80 != v19);
  }
  WTF::RetainPtr<NSSet>::get((id *)&cf);
  int v29 = (objc_object *)objc_claimAutoreleasedReturnValue();
  CFTypeRef v30 = cf;
  CFTypeRef cf = 0;
  if (v30) {
    CFRelease(v30);
  }
  id v31 = WebKit::WebExtensionCallbackHandler::call(a1, v29);

  WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v32);
}

void sub_1992BF768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, CFTypeRef cf, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(unsigned __int8 *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v3 = [NSNumber numberWithBool:*a1];
  [v2 setObject:v3 forKeyedSubscript:@"errorOccurred"];

  unint64_t v4 = *((void *)a1 + 7);
  if (v4 == -3)
  {
    double v5 = -1.0;
  }
  else
  {
    double v5 = 0.0;
    if (v4 != -2) {
      double v5 = (double)v4;
    }
  }
  uint64_t v6 = [NSNumber numberWithDouble:v5];
  [v2 setObject:v6 forKeyedSubscript:@"parentFrameId"];

  if (a1[48] && *((void *)a1 + 1))
  {
    int v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    int v7 = &stru_1EEA10550;
  }
  [v2 setObject:v7 forKeyedSubscript:@"url"];
  if (v8) {

  }
  if (a1[72])
  {
    unint64_t v9 = *((void *)a1 + 8);
    if (v9 == -3)
    {
      double v10 = -1.0;
    }
    else
    {
      double v10 = 0.0;
      if (v9 != -2) {
        double v10 = (double)v9;
      }
    }
    uint64_t v11 = [NSNumber numberWithDouble:v10];
    [v2 setObject:v11 forKeyedSubscript:@"frameId"];
  }
  uint64_t v12 = (void *)[v2 copy];

  return v12;
}

void sub_1992BF98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD1A8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD1A8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2, __n128 a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v5 = *(void *)a2;
    if (v5)
    {
      unint64_t v6 = *((void *)a2 + 1);
      if (v6 <= *((void *)a2 + 2) - v5)
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v15 = *((void *)a2 + 3);
        if (v15)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
            unint64_t v13 = 0;
            uint64_t v34 = *(void *)a2;
            uint64_t v35 = *((void *)a2 + 1);
            uint64_t v36 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v14 = 0;
            if (v36 && v35)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
              uint64_t v14 = *(void *)a2;
              unint64_t v13 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v13 = 0;
            uint64_t v14 = 0;
          }
        }
      }
      else
      {
        int v7 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v7 + 1;
        if (*v7 < 2u)
        {
          if (!*v7)
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v40);
            int v11 = v41;
            if ((_BYTE)v41)
            {
              v58[0] = v40;
              int v11 = 1;
              int v59 = 1;
            }
            else
            {
              v57[0] = 0;
            }
            unsigned __int8 v60 = v11;
            if (v11) {
              goto LABEL_45;
            }
            goto LABEL_29;
          }
          if (v6 <= (unint64_t)&v7[-v5 + 1])
          {
            unint64_t v23 = 0;
            uint64_t v24 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v25 = *((void *)a2 + 3);
            if (v25)
            {
              (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
              unint64_t v23 = 0;
              uint64_t v37 = *(void *)a2;
              uint64_t v38 = *((void *)a2 + 1);
              uint64_t v39 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v24 = 0;
              if (v39)
              {
                if (v38)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37);
                  uint64_t v24 = *(void *)a2;
                  unint64_t v23 = *((void *)a2 + 1);
                }
              }
            }
          }
          else
          {
            *((void *)a2 + 2) = v7 + 2;
            unsigned int v8 = v7[1];
            if (v8 < 2)
            {
              if (!v8)
              {
                v47[0] = 0;
                char v52 = 0;
                std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)&v40, (uint64_t)v47);
                goto LABEL_17;
              }
              IPC::Decoder::decode<WebKit::WebExtensionFrameParameters>((uint64_t)v47, (uint64_t)a2, a3);
              if (v52)
              {
                LOBYTE(v40) = v47[0];
                std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v41, (uint64_t)&v48);
                long long v43 = v50;
                char v44 = v51;
                char v45 = 1;
LABEL_17:
                char v46 = 1;
                if (v52)
                {
                  if (v49)
                  {
                    uint64_t v12 = v48;
                    uint64_t v48 = 0;
                    if (v12)
                    {
                      if (*(_DWORD *)v12 == 2) {
                        WTF::StringImpl::destroy(v12, v9);
                      }
                      else {
                        *(_DWORD *)v12 -= 2;
                      }
                    }
                  }
                }
LABEL_36:
                if (v46
                  || (uint64_t v31 = *(void *)a2,
                      uint64_t v32 = *((void *)a2 + 1),
                      *(void *)a2 = 0,
                      *((void *)a2 + 1) = 0,
                      (uint64_t v33 = *((void *)a2 + 3)) != 0)
                  && v32
                  && ((*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31), v46))
                {
                  std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)v58, (uint64_t)&v40);
                  int v59 = 0;
                  int v28 = 1;
                  unsigned __int8 v60 = 1;
                  if (v46)
                  {
                    if (v45)
                    {
                      if (v42)
                      {
                        int v29 = v41;
                        long long v41 = 0;
                        if (v29)
                        {
                          if (*(_DWORD *)v29 != 2)
                          {
                            *(_DWORD *)v29 -= 2;
                            goto LABEL_45;
                          }
                          WTF::StringImpl::destroy(v29, v27);
                          int v28 = v60;
                        }
                      }
                    }
                  }
                  if (v28)
                  {
LABEL_45:
                    v54[0] = 0;
                    int v55 = -1;
                    int v30 = v59;
                    if (v59 == -1)
                    {
                      char v56 = 1;
                    }
                    else
                    {
                      ((void (*)(uint64_t *, unsigned char *, void *))off_1EE9FD1D0[v59])(&v40, v54, v58);
                      int v55 = v30;
                      char v56 = 1;
                      if (v60)
                      {
                        if (v59 != -1)
                        {
                          ((void (*)(uint64_t *, void *))off_1EE9FD1C0[v59])(&v40, v58);
                          if (!v56)
                          {
LABEL_31:
                            uint64_t v20 = *(void *)a2;
                            uint64_t v21 = *((void *)a2 + 1);
                            *(void *)a2 = 0;
                            *((void *)a2 + 1) = 0;
                            uint64_t v22 = *((void *)a2 + 3);
                            if (!v22
                              || !v21
                              || ((*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20), !v56))
                            {
                              IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
                              return;
                            }
                          }
                        }
                      }
                    }
                    WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v53);
                    if (v56)
                    {
                      if (v55 != -1) {
                        ((void (*)(unsigned char *, unsigned char *))off_1EE9FD1C0[v55])(v57, v54);
                      }
                    }
                    return;
                  }
                }
                else
                {
                  v57[0] = 0;
                  unsigned __int8 v60 = 0;
                }
LABEL_29:
                uint64_t v17 = *(void *)a2;
                uint64_t v18 = *((void *)a2 + 1);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v19 = *((void *)a2 + 3);
                if (!v19
                  || !v18
                  || ((*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17), !v60))
                {
                  v53[0] = 0;
                  char v56 = 0;
                  goto LABEL_31;
                }
                goto LABEL_45;
              }
LABEL_35:
              LOBYTE(v40) = 0;
              char v46 = 0;
              goto LABEL_36;
            }
            unint64_t v23 = v6;
            uint64_t v24 = v5;
          }
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v26 = *((void *)a2 + 3);
          if (v26 && v23) {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
          }
          goto LABEL_35;
        }
        unint64_t v13 = v6;
        uint64_t v14 = v5;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v16 = *((void *)a2 + 3);
      if (v16 && v13) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
      }
      v57[0] = 0;
      unsigned __int8 v60 = 0;
      goto LABEL_29;
    }
  }
  double v10 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v10);
}

void sub_1992C00BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54,char a55)
{
  if ((_BYTE)a21 && a19 && a15 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WebNavigationGetFrame,WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[80] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FD1C0[v4])(&v1, v3);
  }
}

void sub_1992C0294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD1C0[a26])(&a13, v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 8), a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v4;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_1992C0330(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 80)) {
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  if (*((unsigned char *)a2 + 80)) {
    return std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit27WebExtensionFrameParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWebNavigation::getFrame(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 != 1)
    {
      double v10 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v17 && v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v9);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      _Unwind_Resume(v10);
    }
    if (*(void *)(a2 + 8)) {
      long long v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v4 = &stru_1EEA10550;
    }
    id v11 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (*(unsigned char *)(a2 + 88))
    {
      v13[0] = *(unsigned char *)(a2 + 8);
      LOBYTE(v14) = 0;
      char v17 = 0;
      if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v5 = *(WTF::StringImpl **)(a2 + 16);
        if (v5) {
          *(_DWORD *)v5 += 2;
        }
        uint64_t v14 = v5;
        long long v6 = *(_OWORD *)(a2 + 40);
        long long v15 = *(_OWORD *)(a2 + 24);
        long long v16 = v6;
        char v17 = 1;
      }
      long long v18 = *(_OWORD *)(a2 + 64);
      char v19 = *(unsigned char *)(a2 + 80);
      WebKit::toWebAPI(v13);
      int v7 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();
      if (v17 && v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          uint64_t v12 = v7;
          WTF::StringImpl::destroy(v14, v7);
          int v7 = v12;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      int v7 = [MEMORY[0x1E4F1CA98] null];
    }
    id v11 = v7;
    id v8 = WebKit::WebExtensionCallbackHandler::call(a1, (objc_object *)v7);
  }
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWebNavigationEvent::WebExtensionAPIWebNavigationEvent(WebKit::WebExtensionAPIObject *a1, const WebKit::WebExtensionAPIObject *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(void *)uint64_t v6 = &unk_1EE9FD1F0;
  *(void *)(v6 + 40) = &unk_1EE9FD220;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  WebKit::toAPIString(a3, &v10);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, &v10, a2);
  id v8 = v10;
  double v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void sub_1992C060C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(WebKit::WebExtensionAPIWebNavigationEvent *this)
{
  WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FD1F0;
  *((void *)this + 5) = &unk_1EE9FD220;
  WebKit::WebExtensionAPIWebNavigationEvent::removeAllListeners((uint64_t)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent(WebKit::WebExtensionAPIWebNavigationEvent *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionAPIWebNavigationEvent::~WebExtensionAPIWebNavigationEvent((WebKit::WebExtensionAPIWebNavigationEvent *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct(*(WebKit::WebExtensionCallbackHandler **)a1, (WebKit::WebExtensionCallbackHandler *)(*(void *)a1 + 16 * v3));
  }
  long long v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      long long v4 = (const void *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v4) {
        CFRelease(v4);
      }
      uint64_t result = *(WebKit::WebExtensionCallbackHandler **)v3;
      *(void *)uint64_t v3 = 0;
      if (result) {
        uint64_t result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      }
      uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

void sub_1992C07E0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent(WebKit::WebExtensionEventListenerType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPIWebNavigation *)WebKit::WebExtensionAPINamespace::webNavigation(this);
  switch(**(unsigned char **)(a1 + 8))
  {
    case ')':
      long long v4 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(v3);
      uint64_t v5 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      uint64_t v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v4, v5, v14);
      goto LABEL_7;
    case '*':
      uint64_t v12 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onCommitted(v3);
      unint64_t v13 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      uint64_t v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v12, v13, v14);
      goto LABEL_7;
    case '+':
      uint64_t v6 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onCompleted(v3);
      int v7 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      uint64_t v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v6, v7, v14);
      goto LABEL_7;
    case ',':
      id v8 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(v3);
      unint64_t v9 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      uint64_t v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v8, v9, v14);
      goto LABEL_7;
    case '-':
      double v10 = (WebKit::WebExtensionAPIWebNavigationEvent *)WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(v3);
      uint64_t v11 = **(objc_object ***)(a1 + 16);
      WTF::URL::operator NSURL *();
      uint64_t v14 = (NSURL *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(v10, v11, v14);
LABEL_7:

      break;
    default:
      return;
  }
}

void sub_1992C0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIWebNavigationEvent *this, objc_object *a2, NSURL *a3)
{
  uint64_t v12 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = *((unsigned int *)this + 21);
  if (v6)
  {
    uint64_t v7 = 16 * v6;
    id v8 = (id *)(*((void *)this + 9) + 8);
    do
    {
      unint64_t v9 = WTF::RetainPtr<NSSet>::get(v8);
      double v10 = v9;
      if (!v9 || ([v9 matchesURL:v5] & 1) != 0) {
        id v11 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)*(v8 - 1), v12);
      }

      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
}

void sub_1992C0A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, uint64_t a5)
{
  unint64_t v9 = a4;
  double v10 = v9;
  if (!v9
    || (unint64_t v9 = [[_WKWebExtensionWebNavigationURLFilter alloc] initWithDictionary:v9 outErrorMessage:a5]) != 0)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 2120);
    id v11 = *a3;
    if (*a3) {
      ++*(_DWORD *)v11;
    }
    int v29 = v11;
    uint64_t v12 = v9;
    unint64_t v13 = v12;
    CFTypeRef cf = v12;
    if (v12) {
      CFRetain(v12);
    }

    uint64_t v14 = (unsigned int *)(a1 + 72);
    uint64_t v15 = *(unsigned int *)(a1 + 84);
    if (v15 == *(_DWORD *)(a1 + 80))
    {
      long long v16 = (uint64_t *)WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v29);
      char v17 = (void *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84));
    }
    else
    {
      char v17 = (void *)(*(void *)v14 + 16 * v15);
      long long v16 = (uint64_t *)&v29;
    }
    std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v17, v16);
    ++*(_DWORD *)(a1 + 84);
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    char v19 = v29;
    int v29 = 0;
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    {
      int v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v20 = WebKit::WebProcess::singleton(void)::process;
    char v28 = *(unsigned char *)(a1 + 8);
    int v29 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
    CFTypeRef cf = (CFTypeRef)(a1 + 64);
    uint64_t v31 = &v28;
    uint64_t v21 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v22 = 1642;
    *((void *)v22 + 1) = v21;
    *((void *)v22 + 66) = (char *)v22 + 16;
    *((void *)v22 + 67) = 512;
    *((void *)v22 + 68) = 0;
    *((void *)v22 + 70) = 0;
    *((void *)v22 + 69) = 0;
    IPC::Encoder::encodeHeader(v22);
    uint64_t v32 = v22;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v22, (uint64_t)&v29);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v20 + 24) + 32))(v20 + 24, &v32, 0);
    uint64_t v24 = v32;
    uint64_t v32 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v23);
      WTF::fastFree(v25, v26);
    }
  }
}

void sub_1992C0CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebKit::WebExtensionCallbackHandler *a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a11);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigationEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  unint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(unsigned int *)(a1 + 84);
  uint64_t v6 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    double v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
    id v11 = v10;
    do
    {
      uint64_t v12 = WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)v4);
      unint64_t v13 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);

      if (v12 == v13)
      {
        uint64_t v14 = (WebKit::WebExtensionCallbackHandler *)v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84)))
        {
          if ((WebKit::WebExtensionCallbackHandler *)v4 == v10)
          {
            uint64_t v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, (uint64_t *)v4, v11);
            uint64_t v14 = (WebKit::WebExtensionCallbackHandler *)((char *)v11 + v9 - (void)v10);
          }
        }
        uint64_t v15 = *(const void **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v15) {
          CFRelease(v15);
        }
        long long v16 = *(WebKit::WebExtensionCallbackHandler **)v4;
        *(void *)unint64_t v4 = 0;
        if (v16) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
        }
        double v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16);
        ++v8;
        id v11 = v14;
      }
      v4 += 16;
      v9 += 16;
    }
    while (v4 < (unint64_t)v6);
    unint64_t v4 = *(void *)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    uint64_t v6 = v11;
  }
  else
  {
    unsigned int v8 = 0;
    double v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  }
  char v17 = (uint64_t *)(v4 + 16 * v5);
  if (v10 != (WebKit::WebExtensionCallbackHandler *)v17)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, v17, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v25);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    char v26 = *(unsigned char *)(a1 + 8);
    v27[0] = a1 + 56;
    v27[1] = a1 + 64;
    void v27[2] = &v26;
    void v27[3] = v8;
    uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v20 = 1674;
    *((void *)v20 + 1) = v19;
    *((void *)v20 + 66) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 68) = 0;
    *((void *)v20 + 70) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    char v28 = v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v27);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v18 + 24) + 32))(v18 + 24, &v28, 0);
    uint64_t v22 = v28;
    char v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
}

void sub_1992C0F70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWebNavigationEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  if (!*(_DWORD *)(a1 + 84)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(void *)(a1 + 72)
    uint64_t v6 = + v4));
    uint64_t v7 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);

    BOOL result = v6 == v7;
    if (v6 == v7) {
      break;
    }
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1992C1034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebNavigationEvent::removeAllListeners(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 84);
  if (v1)
  {
    uint64_t v2 = this;
    {
      id v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
    char v12 = *(unsigned char *)(this + 8);
    v13[0] = this + 56;
    v13[1] = this + 64;
    void v13[2] = &v12;
    void v13[3] = v1;
    uint64_t v4 = *(void *)(*(void *)(this + 24) + 24);
    unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v5 = 1674;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v14 = v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v13);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 24) + 32))(v3 + 24, &v14, 0);
    uint64_t v7 = v2 + 72;
    unsigned int v8 = v14;
    uint64_t v14 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1992C1184(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  uint64_t v4 = (void *)a2[1];
  a2[1] = 0;
  id v5 = v4;

  a1[1] = v5;
  return a1;
}

unint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WebKit::WebExtensionCallbackHandler *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WebKit::WebExtensionCallbackHandler *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1992C1338);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler **)result;
    uint64_t v5 = (uint64_t *)(*(void *)result + 16 * *((unsigned int *)result + 3));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    BOOL result = WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(WebKit::WebExtensionCallbackHandler *result, uint64_t *a2, void *a3)
{
  if (result != (WebKit::WebExtensionCallbackHandler *)a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](a3, v5);
      uint64_t v6 = (const void *)v5[1];
      v5[1] = 0;
      if (v6) {
        CFRelease(v6);
      }
      BOOL result = (WebKit::WebExtensionCallbackHandler *)*v5;
      uint64_t *v5 = 0;
      if (result) {
        BOOL result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(WebKit::WebExtensionCallbackHandler *result, uint64_t *a2, WebKit::WebExtensionCallbackHandler *a3)
{
  unint64_t v3 = (uint64_t *)result;
  if (result <= a3)
  {
    if (a2 != (uint64_t *)result)
    {
      uint64_t v4 = (void *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF0) - 16);
      uint64_t v5 = a2 - 2;
      do
      {
        std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v4, v5);
        uint64_t v6 = (const void *)v5[1];
        v5[1] = 0;
        if (v6) {
          CFRelease(v6);
        }
        BOOL result = (WebKit::WebExtensionCallbackHandler *)*v5;
        uint64_t *v5 = 0;
        if (result) {
          BOOL result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
        }
        v4 -= 2;
        BOOL v7 = v5 == v3;
        v5 -= 2;
      }
      while (!v7);
    }
  }
  else
  {
    return WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(result, a2, a3);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      BOOL result = (uint64_t)WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::destruct((WebKit::WebExtensionCallbackHandler *)(*(void *)result + 16 * a2), (WebKit::WebExtensionCallbackHandler *)(*(void *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WebKit::WebExtensionCallbackHandler **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      BOOL result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WebKit::WebExtensionCallbackHandler *)result != v5) {
        BOOL result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::move(v5, (uint64_t *)v5 + 2 * v4, (void *)result);
      }
    }
    if (v5)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

BOOL WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed(WebKit::WebExtensionAPIWebPageNamespace *this, const char **a2, WebKit::WebPage *a3)
{
  if (*a2) {
    BOOL v4 = strcmp(*a2, "test") == 0;
  }
  else {
    BOOL v4 = "test" == 0;
  }
  int v5 = v4;
  BOOL v6 = 0;
  if (a3 && v5)
  {
    uint64_t v7 = *((void *)a3 + 79);
    if (v7)
    {
      int v9 = *(_DWORD *)(v7 + 16);
      uint64_t v8 = v7 + 16;
      *(_DWORD *)uint64_t v8 = v9 + 1;
      BOOL v6 = *(unsigned char *)(v8 + 16) != 0;
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)v8);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t WebKit::WebExtensionAPIWebPageNamespace::runtime(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    char v3 = *((unsigned char *)this + 8);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x40);
    *(unsigned char *)(v4 + 8) = v3;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 48) = 1;
    *(unsigned char *)(v4 + 52) = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)uint64_t v4 = &unk_1EE9FD2D0;
    *(void *)(v4 + 40) = &unk_1EE9FD308;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v10 = v11;
    WTF::String::operator=((uint64_t *)(v4 + 32), &v10);
    BOOL v6 = v10;
    unint64_t v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *((void *)this + 7);
    *((void *)this + 7) = v4;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
        uint64_t v4 = *((void *)this + 7);
      }
      else
      {
        --*(_DWORD *)(v7 + 48);
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebExtensionAPIObject::setPropertyPath((WebKit::WebExtensionAPIObject *)v4, &v11, this);
    int v9 = v11;
    id v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return *((void *)this + 7);
  }
  return result;
}

void sub_1992C175C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t covariant return thunk to'WebKit::WebExtensionAPIWebPageNamespace::runtime(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  return WebKit::WebExtensionAPIWebPageNamespace::runtime(this) + 40;
}

uint64_t WebKit::WebExtensionAPIWebPageNamespace::test(WebKit::WebExtensionAPIWebPageNamespace *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPIWebPageNamespace &>(this, &v6);
    char v3 = v6;
    BOOL v6 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPITest *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v6;
        BOOL v6 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

WebKit::WebExtensionAPITest *WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPIWebPageNamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WebKit::WebExtensionAPITest **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAPITest *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebExtensionAPITest::WebExtensionAPITest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1992C1908(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageNamespace::~WebExtensionAPIWebPageNamespace(WebKit::WebExtensionAPIWebPageNamespace *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FD270;
  *((void *)this + 5) = &unk_1EE9FD2A8;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FD270;
  *((void *)this + 5) = &unk_1EE9FD2A8;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v5, v6);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebPageNamespace::~WebExtensionAPIWebPageNamespace(WebKit::WebExtensionAPIWebPageNamespace *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::WebExtensionAPIWebPageNamespace *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FD270;
  *(void *)this = &unk_1EE9FD2A8;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::WebExtensionAPIWebPageNamespace *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EE9FD270;
  *(void *)this = &unk_1EE9FD2A8;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v5 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v5 + 48);
    }
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);

  WTF::fastFree(v6, v7);
}

void WebKit::WebExtensionAPIWebPageRuntime::~WebExtensionAPIWebPageRuntime(WebKit::WebExtensionAPIWebPageRuntime *this, WTF::StringImpl *a2)
{
  *((void *)this + 5) = &unk_1EE9FC238;
  uint64_t v3 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *((void *)this + 5) = &unk_1EE9FC238;
  uint64_t v3 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);

  WTF::fastFree(v4, v5);
}

uint64_t covariant return thunk to'WebKit::WebExtensionAPIWebPageRuntime::runtime(WebKit::WebExtensionAPIWebPageRuntime *this)
{
  return (uint64_t)this + 40;
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebPageRuntime::~WebExtensionAPIWebPageRuntime(WebKit::WebExtensionAPIWebPageRuntime *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FC238;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIWebPageRuntime *)((char *)this - 40), a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FC238;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIWebPageRuntime *)((char *)this - 40), a2);

  WTF::fastFree(v4, v5);
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeRequest(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 48;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIWebRequestEvent::WebExtensionAPIWebRequestEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992C1FD0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 49;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onSendHeaders(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    unsigned __int8 v6 = 54;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onHeadersReceived(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    unsigned __int8 v6 = 52;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 10);
    *((void *)this + 10) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 10);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 10);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onAuthRequired(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    unsigned __int8 v6 = 46;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 11);
    *((void *)this + 11) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 11);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result)
  {
    unsigned __int8 v6 = 47;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 12);
    *((void *)this + 12) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 12);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onResponseStarted(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    unsigned __int8 v6 = 53;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 13);
    *((void *)this + 13) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 13);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 13);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onCompleted(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    unsigned __int8 v6 = 50;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 14);
    *((void *)this + 14) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 14);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 14);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWebRequest::onErrorOccurred(WebKit::WebExtensionAPIWebRequest *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    unsigned __int8 v6 = 51;
    WebKit::WebExtensionAPIWebRequestEvent::create<WebKit::WebExtensionAPIWebRequest &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 15);
    *((void *)this + 15) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *((void *)this + 15);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 15);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceRequestBase *a4, WebKit *this)
{
  v47[16] = *MEMORY[0x1E4F143B8];
  uint64_t v41 = a3;
  char v42 = a2;
  uint64_t v36 = WebKit::webRequestDetailsForResourceLoad(this, a2);
  id v40 = v36;
  double v6 = (double)(unint64_t)a2;
  if (a2 == (const WebKit::ResourceLoadInfo *)-2) {
    double v6 = -1.0;
  }
  uint64_t v7 = [NSNumber numberWithDouble:v6];
  [v36 setObject:v7 forKeyedSubscript:@"tabId"];

  uint64_t v8 = WebCore::ResourceRequest::nsURLRequest();
  int v9 = [v8 HTTPBody];

  if (v9)
  {
    uint64_t v33 = v9;
    id v35 = v9;
    unint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
    id v11 = (void *)MEMORY[0x1E4F29088];
    char v12 = NSString;
    unint64_t v13 = (void *)[[NSString alloc] initWithData:v35 encoding:4];
    uint64_t v14 = [v12 stringWithFormat:@"https://example.org/?%@", v13];
    uint64_t v15 = [v11 componentsWithString:v14];

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v34 = v15;
    long long v16 = [v15 queryItems];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v17)
    {
      uint64_t v18 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v44 != v18) {
            objc_enumerationMutation(v16);
          }
          uint64_t v20 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          uint64_t v21 = [v20 name];
          uint64_t v22 = [v10 objectForKeyedSubscript:v21];

          if (!v22)
          {
            uint64_t v23 = [MEMORY[0x1E4F1CA48] array];
            uint64_t v24 = [v20 name];
            [v10 setObject:v23 forKeyedSubscript:v24];

            uint64_t v22 = (void *)v23;
          }
          uint64_t v25 = [v20 value];
          [v22 addObject:v25];
        }
        uint64_t v17 = [v16 countByEnumeratingWithState:&v43 objects:v47 count:16];
      }
      while (v17);
    }

    [v36 setObject:v10 forKeyedSubscript:@"requestBody"];
    int v9 = v33;
  }

  char v26 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(void *)char v26 = &unk_1EE9FD388;
  *((void *)v26 + 1) = &v40;
  *((void *)v26 + 2) = &v42;
  *((void *)v26 + 3) = &v41;
  *((void *)v26 + 4) = this;
  v47[0] = v26;
  WebCore::mainThreadNormalWorld(v26);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v47);
  uint64_t v27 = v47[0];
  v47[0] = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  [v40 removeObjectForKey:@"requestBody"];
  char v28 = (WebKit *)WebCore::ResourceRequestBase::httpHeaderFields(a4);
  int v30 = WebKit::convertHeaderFieldsToWebExtensionFormat(v28, v29);
  [v40 setObject:v30 forKeyedSubscript:@"requestHeaders"];

  uint64_t v31 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v31 = &unk_1EE9FD3B0;
  *((void *)v31 + 1) = &v40;
  *((void *)v31 + 2) = &v42;
  *((void *)v31 + 3) = &v41;
  *((void *)v31 + 4) = this;
  v47[0] = v31;
  WebCore::mainThreadNormalWorld(v31);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)v47);
  uint64_t v32 = v47[0];
  v47[0] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
}

void sub_1992C2AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id WebKit::webRequestDetailsForResourceLoad(WebKit *this, const WebKit::ResourceLoadInfo *a2)
{
  v22[6] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = @"frameId";
  double v3 = 0.0;
  if (*((unsigned char *)this + 48))
  {
    if (!*((unsigned char *)this + 24)) {
      std::__throw_bad_optional_access[abi:sn180100]();
    }
    unint64_t v4 = *((void *)this + 1);
    if (v4 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992C2E48);
    }
    if (v4 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v4 = -3;
    }
    if (v4 == -3)
    {
      double v3 = -1.0;
    }
    else if (v4 != -2)
    {
      double v3 = (double)v4;
    }
  }
  int v5 = [NSNumber numberWithDouble:v3];
  v22[0] = v5;
  uint64_t v18 = @"parentFrameId";
  if (*((unsigned char *)this + 48))
  {
    unint64_t v6 = *((void *)this + 4);
    if (v6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1992C2E68);
    }
    if (v6 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v6 = -3;
    }
    if (v6 == -3)
    {
      double v7 = -1.0;
    }
    else
    {
      double v7 = 0.0;
      if (v6 != -2) {
        double v7 = (double)v6;
      }
    }
    uint64_t v8 = [NSNumber numberWithDouble:v7];
  }
  else
  {
    uint64_t v8 = [NSNumber numberWithDouble:-1.0];
  }
  int v9 = (void *)v8;
  v22[1] = v8;
  unint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", *(void *)this, v17, v18, @"requestId");
  void v22[2] = v10;
  uint64_t v19 = @"timeStamp";
  id v11 = [NSNumber numberWithDouble:floor(*((double *)this + 13) * 1000.0)];
  v22[3] = v11;
  uint64_t v20 = @"url";
  if (*((void *)this + 7)) {
    char v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    char v12 = &stru_1EEA10550;
  }
  void v22[4] = v12;
  uint64_t v21 = @"method";
  if (*((void *)this + 12)) {
    unint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v13 = &stru_1EEA10550;
  }
  void v22[5] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v17 count:6];
  uint64_t v15 = (void *)[v14 mutableCopy];

  return v15;
}

void sub_1992C2E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::convertHeaderFieldsToWebExtensionFormat(WebKit *this, const WebCore::HTTPHeaderMap *a2)
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  double v3 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*((_DWORD *)this + 7) + *((_DWORD *)this + 3)];
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v22, this, *(WTF::StringImpl ***)this, *((const WebCore::HTTPHeaderMap::UncommonHeader **)this + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v17, this, (WTF::StringImpl **)(*(void *)this + 16 * *((unsigned int *)this + 3)), (const WebCore::HTTPHeaderMap::UncommonHeader *)(*((void *)this + 2) + 16 * *((unsigned int *)this + 7)));
  while (v23 != v18 || v24 != v19)
  {
    int v5 = v25;
    if (v25) {
      *(_DWORD *)v25 += 2;
    }
    unint64_t v6 = v26;
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    v27[0] = @"name";
    if (v5) {
      double v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      double v7 = &stru_1EEA10550;
    }
    v28[0] = v7;
    v27[1] = @"value";
    if (v6) {
      uint64_t v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = &stru_1EEA10550;
    }
    v28[1] = v8;
    int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:2];
    [v3 addObject:v9];

    if (!v6) {
      goto LABEL_15;
    }
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
LABEL_15:
      if (!v5) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
    WTF::StringImpl::destroy(v6, v10);
    if (!v5) {
      goto LABEL_21;
    }
LABEL_18:
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v10);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
LABEL_21:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v22);
  }
  id v11 = v21;
  uint64_t v21 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v4);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  char v12 = v20;
  uint64_t v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v4);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  unint64_t v13 = v26;
  char v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v4);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v25;
  uint64_t v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v4);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (void *)[v3 copy];

  return v15;
}

void sub_1992C31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, unsigned __int8 *a5, WebCore::ResourceRequestBase *a6)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  WebKit::headersReceivedDetails(a5, a2, a4);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  int v9 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(void *)int v9 = &unk_1EE9FD3D8;
  *((void *)v9 + 1) = &v15;
  *((void *)v9 + 2) = &v17;
  *((void *)v9 + 3) = &v16;
  *((void *)v9 + 4) = a5;
  uint64_t v14 = v9;
  WebCore::mainThreadNormalWorld(v9);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  unint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    (*(void (**)(WebCore *))(*(void *)v10 + 8))(v10);
  }
  if (*(void *)WebCore::ResourceRequestBase::url(a6)) {
    id v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v11 = &stru_1EEA10550;
  }
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v11, @"redirectUrl", v14);

  char v12 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(void *)char v12 = &unk_1EE9FD400;
  *((void *)v12 + 1) = &v15;
  *((void *)v12 + 2) = &v17;
  *((void *)v12 + 3) = &v16;
  *((void *)v12 + 4) = a5;
  uint64_t v14 = v12;
  WebCore::mainThreadNormalWorld(v12);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v14);
  unint64_t v13 = v14;
  uint64_t v14 = 0;
  if (v13) {
    (*(void (**)(WebCore *))(*(void *)v13 + 8))(v13);
  }
}

void sub_1992C34A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id WebKit::headersReceivedDetails(unsigned __int8 *a1, const WebKit::ResourceLoadInfo *a2, WebCore::ResourceResponse *a3)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = WebKit::webRequestDetailsForResourceLoad((WebKit *)a1, a2);
  double v7 = (double)(unint64_t)a2;
  if (a2 == (const WebKit::ResourceLoadInfo *)-2) {
    double v7 = -1.0;
  }
  uint64_t v8 = [NSNumber numberWithDouble:v7];
  [v6 setObject:v8 forKeyedSubscript:@"tabId"];

  int v9 = WebCore::ResourceResponse::nsURLResponse(a3);
  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = v9;
      v20[0] = @"statusLine";
      [v10 _CFURLResponse];
      HTTPResponse = (__CFHTTPMessage *)CFURLResponseGetHTTPResponse();
      char v12 = (__CFString *)CFHTTPMessageCopyResponseStatusLine(HTTPResponse);
      v21[0] = v12;
      v20[1] = @"responseHeaders";
      unint64_t v13 = (WebKit *)WebCore::ResourceResponseBase::httpHeaderFields(a3);
      id v15 = WebKit::convertHeaderFieldsToWebExtensionFormat(v13, v14);
      v21[1] = v15;
      v20[2] = @"statusCode";
      uint64_t v16 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v10, "statusCode"));
      void v21[2] = v16;
      void v20[3] = @"fromCache";
      uint64_t v17 = [NSNumber numberWithBool:a1[112]];
      void v21[3] = v17;
      uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:4];
      [v6 addEntriesFromDictionary:v18];
    }
  }

  return v6;
}

void sub_1992C36F4(_Unwind_Exception *a1)
{
  int v9 = v5;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, id *a4, WebKit *a5)
{
  void v41[3] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = a3;
  uint64_t v37 = a2;
  int v9 = WTF::RetainPtr<NSSet>::get(a4 + 53);
  id v10 = [v9 failureResponse];
  if (v10)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v32 = v10;
      if ([v32 statusCode] == 401 || objc_msgSend(v32, "statusCode") == 407)
      {
        uint64_t v33 = WebKit::webRequestDetailsForResourceLoad(a5, v11);
        id v35 = v33;
        char v12 = (WebCore::ResourceResponse *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)a4);
        unint64_t v13 = WebKit::headersReceivedDetails((unsigned __int8 *)a5, a2, v12);
        [v33 addEntriesFromDictionary:v13];

        v40[0] = @"scheme";
        int v30 = [v9 protectionSpace];
        uint64_t v31 = [v30 authenticationMethod];
        int v14 = [v31 isEqualToString:*MEMORY[0x1E4F18C98]];
        id v15 = @"basic";
        if (v14) {
          id v15 = @"digest";
        }
        v41[0] = v15;
        v40[1] = @"challenger";
        v38[0] = @"host";
        char v28 = [v9 protectionSpace];
        int v29 = [v28 host];
        v38[1] = @"port";
        v39[0] = v29;
        uint64_t v16 = NSNumber;
        uint64_t v17 = [v9 protectionSpace];
        uint64_t v18 = objc_msgSend(v16, "numberWithInteger:", objc_msgSend(v17, "port"));
        v39[1] = v18;
        uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];
        v41[1] = v19;
        void v40[2] = @"isProxy";
        uint64_t v20 = NSNumber;
        uint64_t v21 = [v9 protectionSpace];
        uint64_t v22 = objc_msgSend(v20, "numberWithBool:", objc_msgSend(v21, "isProxy"));
        void v41[2] = v22;
        uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:3];
        [v33 addEntriesFromDictionary:v23];

        uint64_t v24 = [v9 protectionSpace];
        uint64_t v25 = [v24 realm];

        if (v25) {
          [v33 setObject:v25 forKeyedSubscript:@"realm"];
        }

        char v26 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
        *(void *)char v26 = &unk_1EE9FD428;
        *((void *)v26 + 1) = &v35;
        *((void *)v26 + 2) = &v37;
        *((void *)v26 + 3) = &v36;
        *((void *)v26 + 4) = a5;
        uint64_t v34 = v26;
        WebCore::mainThreadNormalWorld(v26);
        WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v34);
        uint64_t v27 = v34;
        uint64_t v34 = 0;
        if (v27) {
          (*(void (**)(WebCore *))(*(void *)v27 + 8))(v27);
        }
      }
    }
  }
}

void sub_1992C3AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, unsigned __int8 *a5)
{
  uint64_t v11 = a3;
  char v12 = a2;
  WebKit::headersReceivedDetails(a5, a2, a4);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  double v7 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
  *(void *)double v7 = &unk_1EE9FD450;
  *((void *)v7 + 1) = &v10;
  *((void *)v7 + 2) = &v12;
  *((void *)v7 + 3) = &v11;
  *((void *)v7 + 4) = a5;
  int v9 = v7;
  WebCore::mainThreadNormalWorld(v7);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v9);
  uint64_t v8 = v9;
  int v9 = 0;
  if (v8) {
    (*(void (**)(WebCore *))(*(void *)v8 + 8))(v8);
  }
}

void sub_1992C3D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(uint64_t a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, WebCore::ResourceResponse *a4, uint64_t a5, WebKit *this)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a3;
  uint64_t v22 = a2;
  uint64_t v11 = WebKit::webRequestDetailsForResourceLoad(this, a2);
  id v20 = v11;
  if (*(unsigned char *)(a5 + 60))
  {
    v23[0] = @"tabId";
    double v12 = (double)(unint64_t)a2;
    if (a2 == (const WebKit::ResourceLoadInfo *)-2) {
      double v12 = -1.0;
    }
    unint64_t v13 = [NSNumber numberWithDouble:v12];
    v23[1] = @"error";
    v24[0] = v13;
    v24[1] = @"net::ERR_ABORTED";
    int v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];
    [v11 addEntriesFromDictionary:v14];

    id v15 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
    *(void *)id v15 = &unk_1EE9FD478;
    *((void *)v15 + 1) = &v20;
    *((void *)v15 + 2) = &v22;
    *((void *)v15 + 3) = &v21;
    *((void *)v15 + 4) = this;
    uint64_t v19 = v15;
    WebCore::mainThreadNormalWorld(v15);
    WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v19);
  }
  else
  {
    uint64_t v16 = WebKit::headersReceivedDetails((unsigned __int8 *)this, a2, a4);
    [v11 addEntriesFromDictionary:v16];

    uint64_t v17 = (WebCore *)WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v17 = &unk_1EE9FD4A0;
    *((void *)v17 + 1) = &v20;
    *((void *)v17 + 2) = &v22;
    *((void *)v17 + 3) = &v21;
    *((void *)v17 + 4) = this;
    uint64_t v19 = v17;
    WebCore::mainThreadNormalWorld(v17);
    WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v19);
  }
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    (*(void (**)(WebCore *))(*(void *)v18 + 8))(v18);
  }
}

void sub_1992C3F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWebRequestEvent::WebExtensionAPIWebRequestEvent(WebKit::WebExtensionAPIObject *a1, const WebKit::WebExtensionAPIObject *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(void *)uint64_t v6 = &unk_1EE9FD330;
  *(void *)(v6 + 40) = &unk_1EE9FD360;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  WebKit::toAPIString(a3, &v10);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, &v10, a2);
  uint64_t v8 = v10;
  id v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void sub_1992C40C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(WebKit::WebExtensionAPIWebRequestEvent *this)
{
  WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FD330;
  *((void *)this + 5) = &unk_1EE9FD360;
  WebKit::WebExtensionAPIWebRequestEvent::removeAllListeners((uint64_t)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent(WebKit::WebExtensionAPIWebRequestEvent *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionAPIWebRequestEvent::~WebExtensionAPIWebRequestEvent((WebKit::WebExtensionAPIWebRequestEvent *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

void sub_1992C41EC(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceRequest const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onBeforeRequest(v3);
  int v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceRequest const&,WebKit::ResourceLoadInfo const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(void **)(a1 + 16), **(void **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v5 = WebKit::WebExtensionAPIWebRequest::onSendHeaders(v3);
  unint64_t v6 = **(void ***)(a1 + 8);
  unint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v5, v6, v7, v9, v8);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v3);
  uint64_t v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(v3);
  uint64_t v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::AuthenticationChallenge const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onAuthRequired(v3);
  uint64_t v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v3);
  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, **(void ***)(a1 + 8), **(void **)(a1 + 16), **(void **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v5 = WebKit::WebExtensionAPIWebRequest::onResponseStarted(v3);
  unint64_t v6 = **(void ***)(a1 + 8);
  unint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v5, v6, v7, v9, v8);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse const&,WebCore::ResourceError const&,WebKit::ResourceLoadInfo const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onErrorOccurred(v3);
  uint64_t v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceResponse const&,WebCore::ResourceError const&,WebKit::ResourceLoadInfo const&)::$_1,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  double v3 = (WebKit::WebExtensionAPIWebRequest *)WebKit::WebExtensionAPINamespace::webRequest(this);
  uint64_t v4 = WebKit::WebExtensionAPIWebRequest::onCompleted(v3);
  uint64_t v5 = **(void ***)(a1 + 8);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = **(void **)(a1 + 24);

  WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(v4, v5, v6, v8, v7);
}

void WebKit::WebExtensionAPIWebRequestEvent::invokeListenersWithArgument(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = a2;
  uint64_t v10 = *(unsigned int *)(a1 + 84);
  if (v10)
  {
    uint64_t Info = _WKWebExtensionWebRequestResourceTypeFromResourceLoadInfo(a5);
    double v12 = *(WTF::StringImpl **)(a5 + 56);
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v23 = v12;
    uint64_t v13 = *(void *)(a1 + 72);
    if (a3 == -2) {
      double v14 = -1.0;
    }
    else {
      double v14 = (double)a3;
    }
    if (a4 + 3 >= 2) {
      double v15 = (double)a4;
    }
    else {
      double v15 = -1.0;
    }
    uint64_t v16 = 16 * v10;
    uint64_t v17 = (id *)(v13 + 8);
    do
    {
      id v18 = *v17;
      if (!v18
        || (WTF::URL::operator NSURL *(),
            uint64_t v19 = objc_claimAutoreleasedReturnValue(),
            char v20 = [v18 matchesRequestForResourceOfType:Info URL:v19 tabID:v14 windowID:v15],
            v19,
            (v20 & 1) != 0))
      {
        id v21 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)*(v17 - 1), v9);
      }

      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
}

void sub_1992C465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = a4;
  id v12 = a5;
  if (v11)
  {
    uint64_t v13 = [[_WKWebExtensionWebRequestFilter alloc] initWithDictionary:v11 outErrorMessage:a6];
    if (!v13) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 2120);
  double v14 = *a3;
  if (*a3) {
    ++*(_DWORD *)v14;
  }
  id v32 = v14;
  double v15 = v13;
  uint64_t v16 = v15;
  CFTypeRef cf = v15;
  if (v15) {
    CFRetain(v15);
  }

  uint64_t v17 = (unsigned int *)(a1 + 72);
  uint64_t v18 = *(unsigned int *)(a1 + 84);
  if (v18 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v19 = (uint64_t *)WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v32);
    char v20 = (void *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84));
  }
  else
  {
    char v20 = (void *)(*(void *)v17 + 16 * v18);
    uint64_t v19 = (uint64_t *)&v32;
  }
  std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>::pair[abi:sn180100](v20, v19);
  ++*(_DWORD *)(a1 + 84);
  CFTypeRef v21 = cf;
  CFTypeRef cf = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = v32;
  id v32 = 0;
  if (v22) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
  }
  {
    int v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v30);
  }
  uint64_t v23 = WebKit::WebProcess::singleton(void)::process;
  char v31 = *(unsigned char *)(a1 + 8);
  id v32 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
  CFTypeRef cf = (CFTypeRef)(a1 + 64);
  uint64_t v34 = &v31;
  uint64_t v24 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v25 = 1642;
  *((void *)v25 + 1) = v24;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  id v35 = v25;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v25, (uint64_t)&v32);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v23 + 24) + 32))(v23 + 24, &v35, 0);
  uint64_t v27 = v35;
  id v35 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }

LABEL_20:
}

void sub_1992C48D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebKit::WebExtensionCallbackHandler *a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a11);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequestEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  unint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(unsigned int *)(a1 + 84);
  unint64_t v6 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
    id v11 = v10;
    do
    {
      id v12 = WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)v4);
      uint64_t v13 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);

      if (v12 == v13)
      {
        double v14 = (WebKit::WebExtensionCallbackHandler *)v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84)))
        {
          if ((WebKit::WebExtensionCallbackHandler *)v4 == v10)
          {
            double v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, (uint64_t *)v4, v11);
            double v14 = (WebKit::WebExtensionCallbackHandler *)((char *)v11 + v9 - (void)v10);
          }
        }
        double v15 = *(const void **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)v4;
        *(void *)unint64_t v4 = 0;
        if (v16) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
        }
        uint64_t v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16);
        ++v8;
        id v11 = v14;
      }
      v4 += 16;
      v9 += 16;
    }
    while (v4 < (unint64_t)v6);
    unint64_t v4 = *(void *)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    unint64_t v6 = v11;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 16 * v5);
  }
  uint64_t v17 = (uint64_t *)(v4 + 16 * v5);
  if (v10 != (WebKit::WebExtensionCallbackHandler *)v17)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>>::moveOverlapping(v10, v17, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v25);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    char v26 = *(unsigned char *)(a1 + 8);
    v27[0] = a1 + 56;
    v27[1] = a1 + 64;
    void v27[2] = &v26;
    void v27[3] = v8;
    uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 24);
    char v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v20 = 1674;
    *((void *)v20 + 1) = v19;
    *((void *)v20 + 66) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 68) = 0;
    *((void *)v20 + 70) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    char v28 = v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v27);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v18 + 24) + 32))(v18 + 24, &v28, 0);
    uint64_t v22 = v28;
    char v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
}

void sub_1992C4BA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWebRequestEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  if (!*(_DWORD *)(a1 + 84)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(void *)(a1 + 72)
    unint64_t v6 = + v4));
    uint64_t v7 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);

    BOOL result = v6 == v7;
    if (v6 == v7) {
      break;
    }
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1992C4C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWebRequestEvent::removeAllListeners(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 84);
  if (v1)
  {
    uint64_t v2 = this;
    {
      id v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
    char v12 = *(unsigned char *)(this + 8);
    v13[0] = this + 56;
    v13[1] = this + 64;
    void v13[2] = &v12;
    void v13[3] = v1;
    uint64_t v4 = *(void *)(*(void *)(this + 24) + 24);
    unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v5 = 1674;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    double v14 = v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v13);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 24) + 32))(v3 + 24, &v14, 0);
    uint64_t v7 = v2 + 72;
    unsigned int v8 = v14;
    double v14 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::RetainPtr<_WKWebExtensionWebNavigationURLFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1992C4DBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(void *a1, unsigned char *a2, void *a3, void *a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  *a2 = 3;
  uint64_t v9 = &qword_1EB35A000;
  if ((byte_1EB35A171 & 1) == 0)
  {
    char v20 = @"windowTypes";
    uint64_t v19 = objc_opt_class();
    uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v19 count:1];
    v21[0] = v18;
    qword_1EB35A180 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];

    byte_1EB35A171 = 1;
    uint64_t v9 = &qword_1EB35A000;
  }
  if (WebKit::validateDictionary(v7, v8, 0, (void *)v9[48], a4))
  {
    uint64_t v10 = objc_opt_class();
    id v11 = WebKit::objectForKey<NSArray>(v7, @"windowTypes", 0, v10);
    char v12 = v11;
    if (!v11) {
      goto LABEL_10;
    }
    if (([v11 containsObject:@"normal"] & 1) == 0) {
      *a2 &= ~1u;
    }
    char v13 = [v12 containsObject:@"popup"];
    int v15 = *a2;
    if ((v13 & 1) == 0)
    {
      v15 &= ~2u;
      *a2 = v15;
    }
    if (!v15)
    {
      WebKit::toErrorString(0, &cfstr_Windowtypes.isa, &cfstr_ItMustSpecifyE_13.isa, v14);
      uint64_t v16 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
LABEL_10:
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1992C4FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowTypeFilter(void *a1, unsigned char *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if ([v7 isEqualToString:@"normal"])
  {
    char v9 = *a2 | 1;
LABEL_5:
    *a2 = v9;
    goto LABEL_6;
  }
  if ([v7 isEqualToString:@"popup"])
  {
    char v9 = *a2 | 2;
    goto LABEL_5;
  }
  if (!*a2)
  {
    WebKit::toErrorString(0, v8, &cfstr_ItMustSpecifyE_14.isa, v10);
    uint64_t v11 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v11 = 1;
LABEL_7:

  return v11;
}

void sub_1992C50B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowGetOptions(void *a1, unsigned char *a2, unsigned char *a3, void *a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = @"info";
  id v9 = v7;
  uint64_t v10 = @"info";
  if (_MergedGlobals_126 == 1)
  {
    uint64_t v11 = (void *)qword_1EB35A178;
  }
  else
  {
    int v15 = @"populate";
    v16[0] = objc_opt_class();
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    qword_1EB35A178 = (uint64_t)v11;
    _MergedGlobals_126 = 1;
  }
  if (WebKit::validateDictionary(v9, @"info", 0, v11, a4))
  {
    char v12 = WebKit::objectForKey<NSNumber>(v9, @"populate");
    *a2 = [v12 BOOLValue];

    uint64_t v13 = WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(v9, a3, @"info", a4);
  }
  else
  {

    uint64_t v13 = 0;
  }

  return v13;
}

void sub_1992C5264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  if (byte_1EB35A173 == 1)
  {
    id v9 = (void *)qword_1EB35A190;
  }
  else
  {
    uint64_t v33 = @"state";
    uint64_t v39 = objc_opt_class();
    uint64_t v34 = @"focused";
    uint64_t v40 = objc_opt_class();
    id v35 = @"top";
    uint64_t v41 = objc_opt_class();
    uint64_t v36 = @"left";
    uint64_t v42 = objc_opt_class();
    uint64_t v37 = @"width";
    uint64_t v43 = objc_opt_class();
    uint64_t v38 = @"height";
    uint64_t v44 = objc_opt_class();
    id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v39 forKeys:&v33 count:6];
    qword_1EB35A190 = (uint64_t)v9;
    byte_1EB35A173 = 1;
  }
  if (WebKit::validateDictionary(v7, v8, 0, v9, a4))
  {
    uint64_t v10 = WebKit::objectForKey<NSString>(v7, @"state", 1);
    uint64_t v11 = v10;
    if (v10)
    {
      id v12 = v10;
      if ([v12 isEqualToString:@"normal"])
      {
        __int16 v13 = 0;
      }
      else if ([v12 isEqualToString:@"minimized"])
      {
        __int16 v13 = 1;
      }
      else if ([v12 isEqualToString:@"maximized"])
      {
        __int16 v13 = 2;
      }
      else
      {
        if (([v12 isEqualToString:@"fullscreen"] & 1) == 0)
        {
          char v31 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138477827;
            id v46 = v12;
            _os_log_debug_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEBUG, "Unknown window state: %{private}@", buf, 0xCu);
          }

          *(_WORD *)(a2 + 16) = 0;
          WebKit::toErrorString(0, &cfstr_State.isa, &cfstr_ItMustSpecifyN.isa, v32);
          uint64_t v14 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_37;
        }
        __int16 v13 = 3;
      }

      *(_WORD *)(a2 + 16) = v13 | 0x100;
    }

    int v15 = WebKit::objectForKey<NSNumber>(v7, @"focused");
    uint64_t v16 = v15;
    if (v15) {
      *(_WORD *)(a2 + 88) = [v15 BOOLValue] | 0x100;
    }

    WebKit::objectForKey<NSNumber>(v7, @"left");
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = WebKit::objectForKey<NSNumber>(v7, @"top");
    uint64_t v18 = WebKit::objectForKey<NSNumber>(v7, @"width");
    uint64_t v19 = WebKit::objectForKey<NSNumber>(v7, @"height");
    CFTypeRef v21 = (void *)v19;
    if (!v12 && !v17 && !v18 && !v19)
    {
      uint64_t v14 = 1;
LABEL_36:

LABEL_37:
      goto LABEL_38;
    }
    if (*(unsigned char *)(a2 + 17) && *(unsigned char *)(a2 + 16))
    {
      WebKit::toErrorString(0, v8, &cfstr_WhenTopLeftWid.isa, v20);
      uint64_t v14 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    if (v12)
    {
      [v12 doubleValue];
      uint64_t v23 = v22;
      if (v17) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v23 = 0x7FF8000000000000;
      if (v17)
      {
LABEL_27:
        objc_msgSend(v17, "doubleValue", v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
        uint64_t v25 = v24;
        if (v18) {
          goto LABEL_28;
        }
        goto LABEL_32;
      }
    }
    uint64_t v25 = 0x7FF8000000000000;
    if (v18)
    {
LABEL_28:
      objc_msgSend(v18, "doubleValue", v33);
      uint64_t v27 = v26;
      if (v21)
      {
LABEL_29:
        objc_msgSend(v21, "doubleValue", v33);
        goto LABEL_34;
      }
LABEL_33:
      uint64_t v28 = 0x7FF8000000000000;
LABEL_34:
      int v29 = *(unsigned __int8 *)(a2 + 80);
      *(void *)(a2 + 48) = v23;
      *(void *)(a2 + 56) = v25;
      uint64_t v14 = 1;
      *(void *)(a2 + 64) = v27;
      *(void *)(a2 + 72) = v28;
      if (!v29) {
        *(unsigned char *)(a2 + 80) = 1;
      }
      goto LABEL_36;
    }
LABEL_32:
    uint64_t v27 = 0x7FF8000000000000;
    if (v21) {
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  uint64_t v14 = 0;
LABEL_38:

  return v14;
}

void sub_1992C5724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  void v17[3] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2)) {
    return 0;
  }
  if ((byte_1EB35A174 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WTF::AtomStringImpl::add();
    v17[1] = v16;
    WTF::AtomStringImpl::add();
    void v17[2] = v16;
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::HashSet(&v15, v17, 3);
    uint64_t v12 = v15;
    uint64_t v15 = 0;
    qword_1EB35A198 = v12;
    for (uint64_t i = 2; i != -1; --i)
    {
      uint64_t v14 = v17[i];
      v17[i] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v4);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    byte_1EB35A174 = 1;
  }
  if (*((void *)a2 + 1) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    unint64_t v5 = v17[0];
  }
  else
  {
    unint64_t v5 = (WTF::StringImpl *)*MEMORY[0x1E4F30970];
    *(_DWORD *)*MEMORY[0x1E4F30970] += 2;
  }
  if (!qword_1EB35A198)
  {
LABEL_11:
    uint64_t v10 = 1;
    if (!v5) {
      return v10;
    }
    goto LABEL_14;
  }
  int v6 = 0;
  for (int j = *((_DWORD *)v5 + 4) >> 8; ; int j = v6 + v8)
  {
    unsigned int v8 = j & *(_DWORD *)(qword_1EB35A198 - 8);
    id v9 = *(WTF::StringImpl **)(qword_1EB35A198 + 8 * v8);
    if (v9 != (WTF::StringImpl *)-1)
    {
      if (!v9) {
        goto LABEL_11;
      }
      if (v9 == v5) {
        break;
      }
    }
    ++v6;
  }
  uint64_t v10 = 0;
  if (v5)
  {
LABEL_14:
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v10;
}

void sub_1992C5A3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = 16;
  while (1)
  {
    uint64_t v14 = *(WTF::StringImpl **)(v11 + v13);
    *(void *)(v11 + v13) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, a2);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    v13 -= 8;
    if (v13 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void WebKit::WebExtensionAPIWindows::createWindow(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  v148[4] = *MEMORY[0x1E4F143B8];
  v108[0] = 0;
  v108[8] = 0;
  LOBYTE(v110) = 0;
  unsigned __int8 v113 = 0;
  char v114 = 0;
  char v115 = 0;
  int v109 = 0;
  int v116 = 0;
  id v5 = a2;
  int v6 = @"info";
  uint64_t v107 = v5;
  if ((WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(v5, (uint64_t)v108, @"info", a4) & 1) == 0) {
    goto LABEL_94;
  }
  if ((byte_1EB35A172 & 1) == 0)
  {
    v147[0] = @"type";
    v148[0] = objc_opt_class();
    v147[1] = @"incognito";
    v148[1] = objc_opt_class();
    v147[2] = @"url";
    uint64_t v97 = (void *)MEMORY[0x1E4F1CAA0];
    uint64_t v98 = objc_opt_class();
    uint64_t v146 = objc_opt_class();
    uint64_t v99 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v146 count:1];
    uint64_t v100 = objc_msgSend(v97, "orderedSetWithObjects:", v98, v99, 0);
    v148[2] = v100;
    v147[3] = @"tabId";
    v148[3] = objc_opt_class();
    qword_1EB35A188 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v148 forKeys:v147 count:4];

    byte_1EB35A172 = 1;
  }
  if (!WebKit::validateDictionary(v5, @"info", 0, (void *)qword_1EB35A188, a4)) {
    goto LABEL_94;
  }
  id v7 = WebKit::objectForKey<NSString>(v5, @"type", 1);
  unsigned int v8 = v7;
  if (!v7) {
    goto LABEL_15;
  }
  id v9 = v7;
  if ([v9 isEqualToString:@"normal"])
  {
    __int16 v10 = 0;
  }
  else
  {
    if (([v9 isEqualToString:@"popup"] & 1) == 0)
    {
      uint64_t v12 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__y) = 138477827;
        *(void *)((char *)&__y + 4) = v9;
        _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "Unknown window type: %{private}@", (uint8_t *)&__y, 0xCu);
      }
      __int16 v10 = 0;
      __int16 v11 = 0;
      goto LABEL_14;
    }
    __int16 v10 = 1;
  }
  __int16 v11 = 1;
LABEL_14:

  HIWORD(v109) = v10 | (v11 << 8);
LABEL_15:

  uint64_t v13 = WebKit::objectForKey<NSNumber>(v107, @"incognito");
  uint64_t v14 = v13;
  if (v13) {
    HIWORD(v116) = [v13 BOOLValue] | 0x100;
  }

  uint64_t v15 = WebKit::objectForKey<NSString>(v107, @"url", 1);
  uint64_t v103 = (void *)v15;
  if (v15)
  {
    LOBYTE(__y) = 0;
    BYTE8(__y) = 0;
    LOBYTE(v136) = 0;
    char v138 = 0;
    LOBYTE(v139) = 0;
    char v140 = 0;
    LOBYTE(v141) = 0;
    BYTE8(v141) = 0;
    LOBYTE(v142) = 0;
    BYTE8(v142) = 0;
    LOBYTE(v143) = 0;
    LOBYTE(v144) = 0;
    BYTE8(v144) = 0;
    LOBYTE(v145[0]) = 0;
    memset((char *)v145 + 8, 0, 18);
    uint64_t v16 = *(void *)(a1 + 24);
    MEMORY[0x19972EAD0](&v122, v15);
    MEMORY[0x19972E8B0](&v125, v16 + 40, &v122, 0);
    uint64_t v17 = v103;
    std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>((uint64_t)&v136, (uint64_t *)&v125);
    char v20 = (WTF::StringImpl *)v125;
    *(void *)&long long v125 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    long long v50 = v122;
    uint64_t v122 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, v18);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    if (!v138) {
      goto LABEL_149;
    }
    char v51 = v137;
    if (v137)
    {
      long long v125 = __y;
      std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v126, (uint64_t)&v136);
      LOBYTE(v128) = 0;
      char v129 = 0;
      if (v140)
      {
        uint64_t v53 = v139;
        uint64_t v139 = 0;
        uint64_t v128 = v53;
        char v129 = 1;
      }
      long long v132 = v143;
      long long v133 = v144;
      v134[0] = v145[0];
      *(_OWORD *)((char *)v134 + 10) = *(_OWORD *)((char *)v145 + 10);
      long long v130 = v141;
      long long v131 = v142;
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v122, (uint64_t)&v125, 1uLL);
      std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v110, &v122);
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v54);
      if (v129)
      {
        int v55 = v128;
        uint64_t v128 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v52);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      if (v127)
      {
        uint64_t v57 = v126;
        BOOL v126 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2) {
            WTF::StringImpl::destroy(v57, v52);
          }
          else {
            *(_DWORD *)v57 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_IsNotAValidUrl_0.isa, v19, v103);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = v103;
    }
    if (v140)
    {
      uint64_t v58 = v139;
      uint64_t v139 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v52);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    if (v138)
    {
      int v59 = v136;
      v136 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::destroy(v59, v52);
          if (v51) {
            goto LABEL_99;
          }
          goto LABEL_93;
        }
        *(_DWORD *)v59 -= 2;
      }
    }
    if (v51) {
      goto LABEL_99;
    }
LABEL_93:

LABEL_94:
    goto LABEL_95;
  }
  CFTypeRef v21 = WebKit::objectForKey<NSArray>(v107, @"url", 1, 0);
  if (!v21) {
    goto LABEL_61;
  }
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  id v102 = v21;
  unint64_t v22 = [v21 count];
  if (v22)
  {
    if (v22 >= 0x1745D18) {
      goto LABEL_150;
    }
    unsigned int v23 = 176 * v22;
    uint64_t v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(176 * v22));
    LODWORD(v123) = v23 / 0xB0;
    uint64_t v122 = v24;
  }
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  id obj = v102;
  uint64_t v25 = [obj countByEnumeratingWithState:&v118 objects:v124 count:16];
  if (!v25) {
    goto LABEL_60;
  }
  uint64_t v26 = *(void *)v119;
  while (2)
  {
    for (uint64_t i = 0; i != v25; ++i)
    {
      if (*(void *)v119 != v26) {
        objc_enumerationMutation(obj);
      }
      uint64_t v28 = *(void *)(*((void *)&v118 + 1) + 8 * i);
      LOBYTE(__y) = 0;
      BYTE8(__y) = 0;
      LOBYTE(v136) = 0;
      char v138 = 0;
      LOBYTE(v139) = 0;
      char v140 = 0;
      LOBYTE(v141) = 0;
      BYTE8(v141) = 0;
      LOBYTE(v142) = 0;
      BYTE8(v142) = 0;
      LOBYTE(v143) = 0;
      LOBYTE(v144) = 0;
      BYTE8(v144) = 0;
      LOBYTE(v145[0]) = 0;
      memset((char *)v145 + 8, 0, 18);
      uint64_t v29 = *(void *)(a1 + 24);
      MEMORY[0x19972EAD0](&v117, v28);
      MEMORY[0x19972E8B0](&v125, v29 + 40, &v117, 0);
      std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>((uint64_t)&v136, (uint64_t *)&v125);
      id v32 = (WTF::StringImpl *)v125;
      *(void *)&long long v125 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v30);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      uint64_t v33 = v117;
      uint64_t v117 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v30);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (!v138) {
        goto LABEL_149;
      }
      char v34 = v137;
      if (v137)
      {
        unsigned int v36 = HIDWORD(v123);
        if (HIDWORD(v123) == v123)
        {
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionTabParameters>((uint64_t)&v122, (unint64_t)&__y);
        }
        else
        {
          uint64_t v37 = v122;
          uint64_t v38 = (char *)v122 + 176 * HIDWORD(v123);
          *(_OWORD *)uint64_t v38 = __y;
          std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v38 + 16, (uint64_t)&v136);
          uint64_t v39 = (char *)v37 + 176 * v36;
          unsigned char v39[64] = 0;
          uint64_t v40 = v39 + 64;
          v40[8] = 0;
          if (v140)
          {
            uint64_t v41 = v139;
            uint64_t v139 = 0;
            *(void *)uint64_t v40 = v41;
            v40[8] = 1;
          }
          uint64_t v42 = (_OWORD *)((char *)v37 + 176 * v36);
          long long v43 = v142;
          v42[5] = v141;
          v42[6] = v43;
          long long v44 = v143;
          long long v45 = v144;
          long long v46 = v145[0];
          *(_OWORD *)((char *)v42 + 154) = *(_OWORD *)((char *)v145 + 10);
          void v42[8] = v45;
          v42[9] = v46;
          v42[7] = v44;
          ++HIDWORD(v123);
        }
      }
      else
      {
        WebKit::toErrorString(0, &cfstr_Url.isa, &cfstr_IsNotAValidUrl_0.isa, v31, v28);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (v140)
      {
        uint64_t v47 = v139;
        uint64_t v139 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v35);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
      }
      if (!v138) {
        goto LABEL_55;
      }
      uint64_t v48 = v136;
      v136 = 0;
      if (!v48) {
        goto LABEL_55;
      }
      if (*(_DWORD *)v48 != 2)
      {
        *(_DWORD *)v48 -= 2;
LABEL_55:
        if ((v34 & 1) == 0) {
          goto LABEL_76;
        }
        continue;
      }
      WTF::StringImpl::destroy(v48, v35);
      if ((v34 & 1) == 0)
      {
LABEL_76:

        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v56);
        uint64_t v17 = 0;
        goto LABEL_93;
      }
    }
    uint64_t v25 = [obj countByEnumeratingWithState:&v118 objects:v124 count:16];
    if (v25) {
      continue;
    }
    break;
  }
LABEL_60:

  std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v110, &v122);
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v49);
  CFTypeRef v21 = v102;
LABEL_61:

  uint64_t v17 = 0;
LABEL_99:

  uint64_t v61 = WebKit::objectForKey<NSNumber>(v107, @"tabId");
  [v61 doubleValue];
  double v63 = v62;
  if (v62 == -1.0)
  {
    unint64_t v64 = -256;
    int v65 = 1;
    LOBYTE(v66) = -2;
    goto LABEL_101;
  }
  LOBYTE(v66) = 0;
  int v65 = 0;
  if ((v62 < 0.0 || ((*(void *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&v62 - 1) > 0xFFFFFFFFFFFFELL)
  {
    unint64_t v64 = 0;
    goto LABEL_101;
  }
  unint64_t v64 = 0;
  if (v62 < 1.84467441e19)
  {
    if (modf(v62, (long double *)&__y) != 0.0)
    {
      int v65 = 0;
      LOBYTE(v66) = 0;
      unint64_t v64 = 0;
      goto LABEL_101;
    }
    unint64_t v96 = (unint64_t)v63;
    if ((unint64_t)v63 != -1)
    {
      if (v96 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        LOBYTE(v66) = -2;
      }
      else {
        unint64_t v66 = (unint64_t)v63;
      }
      if (v96 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v64 = -256;
      }
      else {
        unint64_t v64 = v96 & 0xFFFFFFFFFFFFFF00;
      }
      int v65 = 1;
      goto LABEL_101;
    }
LABEL_150:
    __break(0xC471u);
    JUMPOUT(0x1992C66ACLL);
  }
LABEL_101:

  if (v65)
  {
    unint64_t v67 = v64 & 0xFFFFFFFFFFFFFF00 | v66;
    if (v67 != -2)
    {
      int v68 = 1;
      if (!v113)
      {
        long long __y = 0uLL;
        std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v110, &__y);
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&__y, v69);
        int v68 = v113;
      }
      LOBYTE(v136) = 0;
      char v138 = 0;
      LOBYTE(v139) = 0;
      char v140 = 0;
      LOBYTE(v141) = 0;
      BYTE8(v141) = 0;
      LOBYTE(v142) = 0;
      BYTE8(v142) = 0;
      LOBYTE(v143) = 0;
      LOBYTE(v144) = 0;
      BYTE8(v144) = 0;
      LOBYTE(v145[0]) = 0;
      memset((char *)v145 + 8, 0, 18);
      *(void *)&long long __y = v67;
      BYTE8(__y) = 1;
      if (v68)
      {
        unsigned int v70 = v112;
        if (v112 == v111)
        {
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionTabParameters>((uint64_t)&v110, (unint64_t)&__y);
        }
        else
        {
          uint64_t v74 = v110;
          uint64_t v75 = v110 + 176 * v112;
          *(_OWORD *)uint64_t v75 = __y;
          std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v75 + 16), (uint64_t)&v136);
          uint64_t v76 = v74 + 176 * v70;
          *(unsigned char *)(v76 + 64) = 0;
          uint64_t v77 = v76 + 64;
          *(unsigned char *)(v77 + 8) = 0;
          if (v140)
          {
            char v78 = v139;
            uint64_t v139 = 0;
            *(void *)uint64_t v77 = v78;
            *(unsigned char *)(v77 + 8) = 1;
          }
          uint64_t v79 = (_OWORD *)(v74 + 176 * v70);
          long long v80 = v142;
          v79[5] = v141;
          v79[6] = v80;
          long long v81 = v143;
          long long v82 = v144;
          long long v83 = v145[0];
          *(_OWORD *)((char *)v79 + 154) = *(_OWORD *)((char *)v145 + 10);
          v79[8] = v82;
          v79[9] = v83;
          v79[7] = v81;
          ++v112;
        }
        if (v140)
        {
          char v84 = v139;
          uint64_t v139 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2) {
              WTF::StringImpl::destroy(v84, v71);
            }
            else {
              *(_DWORD *)v84 -= 2;
            }
          }
        }
        if (v138)
        {
          char v85 = v136;
          v136 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2) {
              WTF::StringImpl::destroy(v85, v71);
            }
            else {
              *(_DWORD *)v85 -= 2;
            }
          }
        }
        goto LABEL_131;
      }
LABEL_149:
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      goto LABEL_150;
    }
  }
LABEL_131:

  {
    uint64_t v101 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v101);
  }
  uint64_t v86 = WebKit::WebProcess::singleton(void)::process;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v87 = *a3;
  *a3 = 0;
  uint64_t v88 = *(void *)(*(void *)(a1 + 24) + 24);
  __int16 v89 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v89 = 1719;
  *((void *)v89 + 1) = v88;
  *((void *)v89 + 66) = (char *)v89 + 16;
  *((void *)v89 + 67) = 512;
  *((void *)v89 + 68) = 0;
  *((void *)v89 + 70) = 0;
  *((void *)v89 + 69) = 0;
  IPC::Encoder::encodeHeader(v89);
  *(void *)&long long v125 = v89;
  IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(v89, (uint64_t)v108);
  uint64_t v90 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v90 = &unk_1EE9FD4C8;
  v90[1] = a1;
  v90[2] = v87;
  uint64_t v91 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&long long __y = v90;
  *((void *)&__y + 1) = v91;
  (*(void (**)(uint64_t, long long *, long long *, void))(*(void *)(v86 + 24) + 40))(v86 + 24, &v125, &__y, 0);
  uint64_t v92 = __y;
  *(void *)&long long __y = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
  }
  v93 = (IPC::Encoder *)v125;
  *(void *)&long long v125 = 0;
  if (v93)
  {
    IPC::Encoder::~Encoder(v93, v60);
    WTF::fastFree(v94, v95);
  }
LABEL_95:
  if (v113) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v60);
  }
}

void sub_1992C67E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v25);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::get(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, long double a6)
{
  id v12 = a3;
  if (a6 == -1.0)
  {
    uint64_t v13 = -256;
    LOBYTE(v14) = -2;
LABEL_5:
    uint64_t v15 = 1;
    goto LABEL_6;
  }
  if (a6 == -2.0)
  {
    uint64_t v13 = -256;
    LOBYTE(v14) = -3;
    goto LABEL_5;
  }
  uint64_t v15 = 0;
  if ((a6 < 0.0 || ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a6 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v14) = 0;
    uint64_t v13 = 0;
    goto LABEL_6;
  }
  LOBYTE(v14) = 0;
  uint64_t v13 = 0;
  if (a6 < 1.84467441e19)
  {
    if (modf(a6, __y) != 0.0)
    {
      uint64_t v15 = 0;
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
      goto LABEL_6;
    }
    unint64_t v14 = (unint64_t)a6;
    if ((unint64_t)a6 == -1)
    {
      __break(0xC471u);
      goto LABEL_35;
    }
    unint64_t v29 = v14 & 0xFFFFFFFFFFFFFF00;
    BOOL v30 = __CFADD__(v14 - 1, 2);
    if (v14 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
      LOBYTE(v14) = -2;
    }
    if (v30) {
      uint64_t v13 = -256;
    }
    else {
      uint64_t v13 = v29;
    }
    goto LABEL_5;
  }
LABEL_6:
  unint64_t v35 = v13 & 0xFFFFFFFFFFFFFF00 | v14;
  uint64_t v36 = v15;
  if (!WebKit::isValid(v35, v15, a5, v11)) {
    goto LABEL_14;
  }
  __int16 v34 = 0;
  if ((WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v12, (unsigned char *)&v34 + 1, &v34, a5) & 1) == 0) {
    goto LABEL_14;
  }
  {
    char v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v31);
  }
  uint64_t v16 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v32 = *(void *)(a2 + 2120);
  if (!(_BYTE)v36)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_35:
    JUMPOUT(0x1992C6F10);
  }
  *(void *)&__y[0] = &v32;
  *(void *)&__y[1] = &v35;
  *(void *)&long double __y[2] = &v34;
  *(void *)&__y[3] = (char *)&v34 + 1;
  ++*(_DWORD *)(a1 + 48);
  uint64_t v17 = *a4;
  *a4 = 0;
  uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 1720;
  *((void *)v19 + 1) = v18;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v38 = v19;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(v19, (uint64_t)__y);
  char v20 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v20 = &unk_1EE9FD510;
  v20[1] = a1;
  v20[2] = v17;
  uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v37[0] = v20;
  v37[1] = v21;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v16 + 24) + 40))(v16 + 24, &v38, v37, 0);
  uint64_t v23 = v37[0];
  v37[0] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v38;
  uint64_t v38 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v27, v28);
  }
LABEL_14:
}

void sub_1992C6F44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  uint64_t v21 = *(IPC::Encoder **)(v19 - 72);
  *(void *)(v19 - 72) = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, a2);
    WTF::fastFree(v22, v23);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getCurrent(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  id v9 = a3;
  __int16 v24 = 0;
  if (WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v9, (unsigned char *)&v24 + 1, &v24, a5))
  {
    {
      uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v21);
    }
    uint64_t v10 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v22 = *(void *)(a2 + 2120);
    v23[0] = &v22;
    v23[1] = &WebKit::WebExtensionWindowConstants::CurrentIdentifier;
    void v23[2] = &v24;
    void v23[3] = (char *)&v24 + 1;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v11 = *a4;
    *a4 = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1720;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v26 = v13;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(v13, (uint64_t)v23);
    unint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9FD558;
    v14[1] = a1;
    void v14[2] = v11;
    uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v25[0] = v14;
    v25[1] = v15;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v10 + 24) + 40))(v10 + 24, &v26, v25, 0);
    uint64_t v17 = v25[0];
    v25[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v26;
    uint64_t v26 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
  }
}

void sub_1992C7294(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a18)
  {
    IPC::Encoder::~Encoder(a18, a2);
    WTF::fastFree(v20, v21);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getLastFocused(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  __int16 v20 = 0;
  if (WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v7, (unsigned char *)&v20 + 1, &v20, a4))
  {
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1722;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v22 = v11;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, v20);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, SHIBYTE(v20));
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FD580;
    v12[1] = a1;
    void v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v21[0] = v12;
    v21[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v22, v21, 0);
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v22;
    uint64_t v22 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_1992C75A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::getAll(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a2;
  __int16 v20 = 0;
  if (WebKit::WebExtensionAPIWindows::parseWindowGetOptions(v7, (unsigned char *)&v20 + 1, &v20, a4))
  {
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
    ++*(_DWORD *)(a1 + 48);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1721;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v22 = v11;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, v20);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, SHIBYTE(v20));
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9FD5A8;
    v12[1] = a1;
    void v12[2] = v9;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v21[0] = v12;
    v21[1] = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v8 + 24) + 40))(v8 + 24, &v22, v21, 0);
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v22;
    uint64_t v22 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
}

void sub_1992C78B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::update(uint64_t a1, void *a2, uint64_t *a3, void *a4, long double a5)
{
  id v10 = a2;
  if (a5 == -1.0)
  {
    uint64_t v11 = -256;
    LOBYTE(v12) = -2;
LABEL_5:
    uint64_t v13 = 1;
    goto LABEL_6;
  }
  if (a5 == -2.0)
  {
    uint64_t v11 = -256;
    LOBYTE(v12) = -3;
    goto LABEL_5;
  }
  uint64_t v13 = 0;
  if ((a5 < 0.0 || ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v12) = 0;
    uint64_t v11 = 0;
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v11 = 0;
    if (a5 < 1.84467441e19)
    {
      if (modf(a5, &__y) == 0.0)
      {
        unint64_t v12 = (unint64_t)a5;
        if ((unint64_t)a5 == -1)
        {
          __break(0xC471u);
          goto LABEL_37;
        }
        unint64_t v27 = v12 & 0xFFFFFFFFFFFFFF00;
        BOOL v28 = __CFADD__(v12 - 1, 2);
        if (v12 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v12) = -2;
        }
        if (v28) {
          uint64_t v11 = -256;
        }
        else {
          uint64_t v11 = v27;
        }
        goto LABEL_5;
      }
      uint64_t v13 = 0;
      LOBYTE(v12) = 0;
      uint64_t v11 = 0;
    }
  }
LABEL_6:
  unint64_t v38 = v11 & 0xFFFFFFFFFFFFFF00 | v12;
  uint64_t v39 = v13;
  if (!WebKit::isValid(v38, v13, a4, v9)) {
    goto LABEL_16;
  }
  LOBYTE(__y) = 0;
  char v31 = 0;
  v33[0] = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  int v32 = 0;
  int v37 = 0;
  if (WebKit::WebExtensionAPIWindows::parseWindowUpdateOptions(v10, (uint64_t)&__y, @"properties", a4))
  {
    {
      unint64_t v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v29);
    }
    uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
    if ((_BYTE)v39)
    {
      ++*(_DWORD *)(a1 + 48);
      uint64_t v16 = *a3;
      *a3 = 0;
      uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
      uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v18 = 1724;
      *((void *)v18 + 1) = v17;
      *((void *)v18 + 66) = (char *)v18 + 16;
      *((void *)v18 + 67) = 512;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 70) = 0;
      *((void *)v18 + 69) = 0;
      IPC::Encoder::encodeHeader(v18);
      uint64_t v41 = v18;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)&v38);
      IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(v18, (uint64_t)&__y);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v19 = &unk_1EE9FD5F0;
      v19[1] = a1;
      void v19[2] = v16;
      uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v40[0] = v19;
      v40[1] = v20;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v15 + 24) + 40))(v15 + 24, &v41, v40, 0);
      uint64_t v21 = v40[0];
      v40[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      uint64_t v22 = v41;
      uint64_t v41 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v14);
        WTF::fastFree(v25, v26);
      }
      goto LABEL_14;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_37:
    JUMPOUT(0x1992C7D00);
  }
LABEL_14:
  if (v34) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v14);
  }
LABEL_16:
}

void sub_1992C7D30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v19 = *(void *)(v17 - 104);
  *(void *)(v17 - 104) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(IPC::Encoder **)(v17 - 88);
  *(void *)(v17 - 88) = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, a2);
    WTF::fastFree(v21, v22);
  }
  if (a15) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIWindows::remove(uint64_t a1, uint64_t *a2, void *a3, NSString *a4, long double a5)
{
  if (a5 == -1.0)
  {
    uint64_t v9 = -256;
    LOBYTE(v10) = -2;
LABEL_5:
    uint64_t v11 = 1;
    goto LABEL_6;
  }
  if (a5 == -2.0)
  {
    uint64_t v9 = -256;
    LOBYTE(v10) = -3;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  if ((a5 < 0.0 || ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(void *)&a5 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v10) = 0;
    uint64_t v9 = 0;
  }
  else
  {
    LOBYTE(v10) = 0;
    uint64_t v9 = 0;
    if (a5 < 1.84467441e19)
    {
      if (modf(a5, __y) == 0.0)
      {
        unint64_t v10 = (unint64_t)a5;
        if ((unint64_t)a5 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1992C8134);
        }
        unint64_t v25 = v10 & 0xFFFFFFFFFFFFFF00;
        BOOL v26 = __CFADD__(v10 - 1, 2);
        if (v10 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          LOBYTE(v10) = -2;
        }
        if (v26) {
          uint64_t v9 = -256;
        }
        else {
          uint64_t v9 = v25;
        }
        goto LABEL_5;
      }
      uint64_t v11 = 0;
      LOBYTE(v10) = 0;
      uint64_t v9 = 0;
    }
  }
LABEL_6:
  v34[0] = v9 & 0xFFFFFFFFFFFFFF00 | v10;
  v34[1] = v11;
  BOOL result = (IPC::Encoder *)WebKit::isValid(v34[0], v11, a3, a4);
  if (result)
  {
    {
      unint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v13 = WebKit::WebProcess::singleton(void)::process;
    if (!v11)
    {
      unint64_t v29 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      long double v30 = __y[0];
      __y[0] = 0.0;
      if (v30 != 0.0) {
        (*(void (**)(long double))(**(void **)&v30 + 8))(COERCE_LONG_DOUBLE(*(void *)&v30));
      }
      char v31 = v36;
      char v36 = 0;
      if (v31)
      {
        IPC::Encoder::~Encoder(v31, v28);
        WTF::fastFree(v32, v33);
      }
      _Unwind_Resume(v29);
    }
    ++*(_DWORD *)(a1 + 48);
    uint64_t v14 = *a2;
    *a2 = 0;
    uint64_t v15 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 1723;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    char v36 = v16;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, v34);
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9FD618;
    v17[1] = a1;
    void v17[2] = v14;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)&__y[0] = v17;
    *(void *)&__y[1] = v18;
    (*(void (**)(uint64_t, IPC::Encoder **, long double *, void))(*(void *)(v13 + 24) + 40))(v13 + 24, &v36, __y, 0);
    long double v20 = __y[0];
    __y[0] = 0.0;
    if (v20 != 0.0) {
      (*(void (**)(long double))(**(void **)&v20 + 8))(COERCE_LONG_DOUBLE(*(void *)&v20));
    }
    BOOL result = v36;
    char v36 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v19);
      return (IPC::Encoder *)WTF::fastFree(v23, v24);
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWindows::onCreated(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result = *((void *)this + 7);
  if (!result)
  {
    unsigned __int8 v6 = 55;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 7);
    *((void *)this + 7) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 7);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 7);
  }
  return result;
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WebKit::WebExtensionAPIObject **a3@<X8>)
{
  unsigned __int8 v6 = (WebKit::WebExtensionAPIObject *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::WebExtensionAPIWindowsEvent::WebExtensionAPIWindowsEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1992C83BC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIWindows::onRemoved(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    unsigned __int8 v6 = 57;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 8);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIWindows::onFocusChanged(WebKit::WebExtensionAPIWindows *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    unsigned __int8 v6 = 56;
    WebKit::WebExtensionAPIWindowsEvent::create<WebKit::WebExtensionAPIWindows &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    uint64_t v3 = v7;
    id v7 = 0;
    uint64_t v4 = (WebKit::WebExtensionAPIObject *)*((void *)this + 9);
    *((void *)this + 9) = v3;
    if (v4)
    {
      int v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(void))(*((void *)v4 + 5) + 8))();
        uint64_t v4 = v7;
        id v7 = 0;
        if (!v4) {
          return *((void *)this + 9);
        }
        int v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*(void (**)(void))(*((void *)v4 + 5) + 8))();
          return *((void *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::dispatchWindowsEvent(uint64_t a1, char a2, unsigned char *a3)
{
  char v12 = a2;
  if (a3[96])
  {
    if (!a3[19])
    {
      uint64_t v8 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      uint64_t v9 = v10;
      unint64_t v10 = 0;
      if (v9) {
        (*(void (**)(WebCore *))(*(void *)v9 + 8))(v9);
      }
      _Unwind_Resume(v8);
    }
    if (a3[18] == 1) {
      char v5 = 2;
    }
    else {
      char v5 = 1;
    }
  }
  else
  {
    char v5 = 3;
  }
  char v11 = v5;
  unsigned __int8 v6 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(void *)unsigned __int8 v6 = &unk_1EE9FD698;
  *((void *)v6 + 1) = &v12;
  *((void *)v6 + 2) = a3;
  *((void *)v6 + 3) = &v11;
  unint64_t v10 = v6;
  WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v10);
  uint64_t result = (uint64_t)v10;
  unint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD4C8;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD4C8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      unint64_t v5 = a2[1];
      if (v5 <= a2[2] - v4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v14 = a2[3];
        if (v14)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
            uint64_t v12 = 0;
            uint64_t v22 = *a2;
            uint64_t v23 = a2[1];
            uint64_t v24 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v13 = 0;
            if (v24 && v23)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              uint64_t v13 = *a2;
              uint64_t v12 = a2[1];
            }
          }
          else
          {
            uint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        unsigned __int8 v6 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v6 + 1);
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>(a2, (uint64_t)&v25);
            int v8 = v28;
            if (v28)
            {
              std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)&v25);
              int v35 = 0;
              int v8 = 1;
              unsigned __int8 v36 = 1;
              if (v28 && v27[72] && v27[16])
              {
                WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v9);
                int v8 = v36;
              }
            }
            else
            {
              v33[0] = 0;
              unsigned __int8 v36 = 0;
            }
          }
          else
          {
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v25);
            int v8 = v26;
            if (v26)
            {
              v34[0] = v25;
              int v8 = 1;
              int v35 = 1;
            }
            else
            {
              v33[0] = 0;
            }
            unsigned __int8 v36 = v8;
          }
          if (v8) {
            goto LABEL_20;
          }
          goto LABEL_33;
        }
        uint64_t v12 = v5;
        uint64_t v13 = v4;
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v15 = a2[3];
      if (v15 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
      }
      v33[0] = 0;
      unsigned __int8 v36 = 0;
LABEL_33:
      uint64_t v16 = *a2;
      uint64_t v17 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v18 = a2[3];
      if (!v18 || !v17 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16), !v36))
      {
        v29[0] = 0;
        char v32 = 0;
        goto LABEL_35;
      }
LABEL_20:
      v30[0] = 0;
      int v31 = -1;
      int v11 = v35;
      if (v35 == -1)
      {
        char v32 = 1;
      }
      else
      {
        ((void (*)(uint64_t *, unsigned char *, void *))off_1EE9FD4F0[v35])(&v25, v30, v34);
        int v31 = v11;
        char v32 = 1;
        if (v36)
        {
          if (v35 != -1)
          {
            ((void (*)(uint64_t *, void *))off_1EE9FD4E0[v35])(&v25, v34);
            if (!v32)
            {
LABEL_35:
              uint64_t v19 = *a2;
              uint64_t v20 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v21 = a2[3];
              if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), !v32))
              {
                IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
                return;
              }
            }
          }
        }
      }
      WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v29);
      if (v32)
      {
        if (v31 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9FD4E0[v31])(v33, v30);
        }
      }
      return;
    }
  }
  unint64_t v10 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v10);
}

void sub_1992C8B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46,char a47)
{
  if (a47)
  {
    if (a45 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9FD4E0[a45])(v47 - 184, &a32);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsCreate,WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[96] = 0;
  int v4 = 0;
  WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FD4E0[v4])(&v1, v3);
  }
}

void sub_1992C8D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a28 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD4E0[a28])(&a13, v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionWindowParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 104))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992C8DCC(_Unwind_Exception *exception_object, void *a2)
{
  if (v2[104] && v2[96])
  {
    if (v2[40]) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v2 + 24), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebExtensionWindowParameters>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      uint64_t v18 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        a1 = v18;
        uint64_t v14 = *v18;
        unint64_t v13 = v18[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v13 = v3;
    uint64_t v14 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v17 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        a1 = v17;
        uint64_t v4 = *v17;
        unint64_t v3 = v17[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_15;
  }
  if (!v7)
  {
    LOBYTE(v19) = 0;
    char v26 = 0;
    uint64_t result = (uint64_t)std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)a2, (uint64_t)&v19);
    *(unsigned char *)(a2 + 104) = 1;
    if (v26 && v23) {
      return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v9);
    }
    return result;
  }
  uint64_t result = IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>(a1, (uint64_t)&v19);
  if (!v26)
  {
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 104) = 0;
    return result;
  }
  *(_OWORD *)a2 = v19;
  *(_DWORD *)(a2 + 16) = v20;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v23)
  {
    *(void *)(a2 + 24) = v21;
    uint64_t v10 = v22;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)(a2 + 32) = v10;
    *(unsigned char *)(a2 + 40) = 1;
    long long v11 = v25[0];
    *(_OWORD *)(a2 + 48) = v24;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)((char *)v25 + 12);
    *(unsigned char *)(a2 + 96) = 1;
    *(unsigned char *)(a2 + 104) = 1;
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v9);
  }
  long long v12 = v25[0];
  *(_OWORD *)(a2 + 48) = v24;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)((char *)v25 + 12);
  *(unsigned char *)(a2 + 96) = 1;
  *(unsigned char *)(a2 + 104) = 1;
  return result;
}

void sub_1992C903C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
  {
    if (a15) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992C90D4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 96))
  {
    if (*(unsigned char *)(v2 + 40)) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters*>((uint64_t)a1, (long long *)a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_1992C913C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 96))
  {
    if (*(unsigned char *)(v2 + 40)) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters,WebKit::WebExtensionWindowParameters*>(uint64_t result, long long *a2)
{
  if (result)
  {
    long long v2 = *a2;
    *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)uint64_t result = v2;
    *(unsigned char *)(result + 24) = 0;
    *(unsigned char *)(result + 40) = 0;
    if (*((unsigned char *)a2 + 40))
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      uint64_t v3 = *((void *)a2 + 3);
      *((void *)a2 + 3) = 0;
      *(void *)(result + 24) = v3;
      LODWORD(v3) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = 0;
      *(_DWORD *)(result + 32) = v3;
      LODWORD(v3) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = 0;
      *(_DWORD *)(result + 36) = v3;
      *(unsigned char *)(result + 40) = 1;
    }
    long long v4 = a2[3];
    long long v5 = a2[4];
    *(_OWORD *)(result + 76) = *(long long *)((char *)a2 + 76);
    *(_OWORD *)(result + 48) = v4;
    *(_OWORD *)(result + 64) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, unsigned char *a2)
{
  if (a2[96]) {
    BOOL v2 = a2[40] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 24), a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionWindowParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::createWindow(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 112);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      long long v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v4 = &stru_1EEA10550;
    }
    int v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(a2 + 8);
    int v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

id WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96)) {
    WebKit::toWebAPI(a1);
  }
  else {
  char v1 = [MEMORY[0x1E4F1CA98] null];
  }

  return v1;
}

void sub_1992C96E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter> const&,WebKit::WebExtensionWindow::PopulateTabs const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, **(unsigned char **)(a2 + 16));
  char v4 = **(unsigned char **)(a2 + 24);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD510;
  BOOL v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD510;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FD528[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992C9A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FD528[a27])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9FD528[v4])(&v1, v3);
  }
}

void sub_1992C9B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD528[a26])(&a12, v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void *)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_21;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v17 = v6;
    uint64_t v18 = 0;
LABEL_21:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_22;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_22:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v5);
    }
    goto LABEL_23;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v27);
    if (BYTE8(v27))
    {
      *(void *)&long long v36 = v27;
      int v13 = 1;
      int v43 = 1;
    }
    else
    {
      int v13 = 0;
      char v35 = 0;
    }
    unsigned __int8 v44 = v13;
    int v14 = 1;
    if (!v13) {
      goto LABEL_23;
    }
LABEL_16:
    *(unsigned char *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 104) = -1;
    uint64_t result = ((uint64_t (*)(long long *, uint64_t, long long *))off_1EE9FD538[v14])(&v27, a1 + 8, &v36);
    *(_DWORD *)(a1 + 104) = v14;
    int v16 = v44;
    *(unsigned char *)(a1 + 112) = 1;
    if (!v16) {
      return result;
    }
    if (v43 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(long long *, long long *))off_1EE9FD528[v43])(&v27, &v36);
    if (*(unsigned char *)(a1 + 112)) {
      return result;
    }
    goto LABEL_25;
  }
  IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a2, (uint64_t)&v27);
  if (v34)
  {
    long long v36 = v27;
    int v37 = v28;
    LOBYTE(v38) = 0;
    char v40 = 0;
    if (v31)
    {
      uint64_t v39 = v30;
      long long v41 = v32;
      uint64_t v11 = v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v38 = v11;
      int v12 = 1;
      char v40 = 1;
      v42[0] = v33[0];
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v33 + 12);
      int v43 = 0;
      unsigned __int8 v44 = 1;
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v10);
    }
    else
    {
      long long v41 = v32;
      v42[0] = v33[0];
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v33 + 12);
      int v43 = 0;
      int v12 = 1;
      unsigned __int8 v44 = 1;
    }
  }
  else
  {
    int v12 = 0;
    char v35 = 0;
    unsigned __int8 v44 = 0;
  }
  int v14 = 0;
  if (v12) {
    goto LABEL_16;
  }
LABEL_23:
  uint64_t v22 = *(void *)a2;
  uint64_t v23 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v24 = *((void *)a2 + 3);
  if (v24 && v23) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 112) = 0;
LABEL_25:
  uint64_t v25 = *(void *)a2;
  uint64_t v26 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v26) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v25);
    }
  }
  return result;
}

void sub_1992C9EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,char a41)
{
  if (*(unsigned char *)(v41 + 112))
  {
    uint64_t v43 = *(unsigned int *)(v41 + 104);
    if (v43 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9FD528[v43])(&a26, v41 + 8);
    }
    *(_DWORD *)(v41 + 104) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned char *a2)
{
  if (a2[40]) {
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 24), a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (*((unsigned char *)a3 + 40))
  {
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    uint64_t v4 = *((void *)a3 + 3);
    *((void *)a3 + 3) = 0;
    *(void *)(a2 + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 8);
    *((_DWORD *)a3 + 8) = 0;
    *(_DWORD *)(a2 + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 9);
    *((_DWORD *)a3 + 9) = 0;
    *(_DWORD *)(a2 + 36) = v4;
    *(unsigned char *)(a2 + 40) = 1;
  }
  __n128 result = (__n128)a3[3];
  long long v6 = a3[4];
  *(_OWORD *)(a2 + 76) = *(long long *)((char *)a3 + 76);
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit28WebExtensionWindowParametersEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::get(WebKit::WebPage &,double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      long long v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD558;
  BOOL v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD558;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FD528[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992CA308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FD528[a27])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGet,WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9FD528[v4])(&v1, v3);
  }
}

void sub_1992CA3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD528[a26])(&a12, v26);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::getCurrent(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD580;
  BOOL v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD580;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FD528[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992CA700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FD528[a27])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetLastFocused,WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9FD528[v4])(&v1, v3);
  }
}

void sub_1992CA7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD528[a26])(&a12, v26);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::getLastFocused(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD5A8;
  BOOL v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD5A8;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    uint64_t v4 = *(char **)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v35 = 0;
        long long v36 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v37 = *((void *)a2 + 3);
        if (v37)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
            unint64_t v35 = 0;
            unint64_t v67 = *(char **)a2;
            uint64_t v68 = *((void *)a2 + 1);
            uint64_t v69 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            long long v36 = 0;
            if (v69 && v68)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v69 + 16))(v69, v67);
              long long v36 = *(char **)a2;
              unint64_t v35 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v35 = 0;
            long long v36 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        id v7 = v6 + 1;
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v8 = *v6;
        if (v8 < 2)
        {
          if (!v8)
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v80);
            if (BYTE8(v80))
            {
              v77[0] = v80;
              int v31 = 1;
              int v78 = 1;
            }
            else
            {
              int v31 = 0;
              LOBYTE(v77[0]) = 0;
            }
            char v79 = v31;
            int v34 = 1;
            if (!v31) {
              goto LABEL_50;
            }
            goto LABEL_41;
          }
          unint64_t v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
          if (v5 >= v9 && v5 - v9 > 7)
          {
            uint64_t v11 = (unint64_t *)&v4[v9];
            unint64_t v12 = *v11;
            *((void *)a2 + 2) = v11 + 1;
            uint64_t v89 = 0;
            uint64_t v90 = 0;
            if (v12 >= 0x2AAA)
            {
              do
              {
                IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a2, (uint64_t)&v80);
                int v49 = v88;
                if (v88)
                {
                  unsigned int v50 = HIDWORD(v90);
                  if (HIDWORD(v90) == v90)
                  {
                    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>((uint64_t)&v89, (unint64_t)&v80);
                  }
                  else
                  {
                    uint64_t v51 = v89;
                    uint64_t v52 = v89 + 96 * HIDWORD(v90);
                    long long v53 = v80;
                    *(_DWORD *)(v52 + 16) = v81;
                    *(_OWORD *)uint64_t v52 = v53;
                    *(unsigned char *)(v52 + 24) = 0;
                    uint64_t v54 = (void *)(v52 + 24);
                    *(unsigned char *)(v52 + 40) = 0;
                    int v55 = (unsigned char *)(v52 + 40);
                    if (v85)
                    {
                      *uint64_t v54 = 0;
                      v54[1] = 0;
                      uint64_t v56 = v82;
                      uint64_t v82 = 0;
                      *uint64_t v54 = v56;
                      int v57 = v83;
                      int v83 = 0;
                      uint64_t v58 = v51 + 96 * v50;
                      *(_DWORD *)(v58 + 32) = v57;
                      int v59 = v84;
                      int v84 = 0;
                      *(_DWORD *)(v58 + 36) = v59;
                      unsigned char *v55 = 1;
                    }
                    unsigned __int8 v60 = (_OWORD *)(v51 + 96 * v50);
                    long long v62 = v86;
                    long long v61 = v87[0];
                    *(_OWORD *)((char *)v60 + 76) = *(_OWORD *)((char *)v87 + 12);
                    v60[3] = v62;
                    v60[4] = v61;
                    ++HIDWORD(v90);
                  }
                }
                if (v88) {
                  BOOL v63 = v85 == 0;
                }
                else {
                  BOOL v63 = 1;
                }
                if (!v63) {
                  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v4);
                }
                if (!v49) {
                  goto LABEL_96;
                }
                --v12;
              }
              while (v12);
              LOBYTE(v81) = 0;
              unsigned int v64 = HIDWORD(v90);
              int v28 = (WTF *)v89;
              if (v90 > HIDWORD(v90))
              {
                int v65 = (WTF *)v89;
                if (HIDWORD(v90))
                {
                  if (HIDWORD(v90) >= 0x2AAAAAB)
                  {
                    __break(0xC471u);
                    return;
                  }
                  uint64_t v66 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v90)));
                  LODWORD(v90) = 96 * v64 / 0x60;
                  uint64_t v89 = v66;
                  int v65 = v28;
                  if ((WTF *)v66 != v28)
                  {
                    WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move((uint64_t)v28, (char *)v28 + 96 * v64, v66);
                    int v65 = (WTF *)v89;
                  }
                }
                if (v28)
                {
                  if (v65 == v28)
                  {
                    uint64_t v89 = 0;
                    LODWORD(v90) = 0;
                  }
                  WTF::fastFree(v28, v4);
LABEL_28:
                  int v28 = (WTF *)v89;
                }
                else
                {
                  int v28 = v65;
                }
              }
              uint64_t v29 = v90;
              goto LABEL_36;
            }
            if (!v12)
            {
              int v28 = 0;
              uint64_t v29 = 0;
LABEL_36:
              uint64_t v73 = v29;
              uint64_t v89 = 0;
              uint64_t v90 = 0;
              int v32 = 1;
              LOBYTE(v81) = 1;
              WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v4);
              long long v80 = 0uLL;
              v77[0] = v28;
              v77[1] = v73;
              int v78 = 0;
              WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v33);
LABEL_37:
              int v34 = 0;
              char v79 = v32;
              if (!v32)
              {
LABEL_50:
                uint64_t v39 = *(char **)a2;
                uint64_t v40 = *((void *)a2 + 1);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v41 = *((void *)a2 + 3);
                if (v41 && v40) {
                  (*(void (**)(uint64_t, char *))(*(void *)v41 + 16))(v41, v39);
                }
                v74[0] = 0;
                char v76 = 0;
                goto LABEL_52;
              }
LABEL_41:
              v74[0] = 0;
              int v75 = -1;
              ((void (*)(long long *, unsigned char *, void *))off_1EE9FD5D0[v34])(&v80, v74, v77);
              int v75 = v34;
              char v76 = 1;
              if (!v79
                || v78 == -1
                || (((void (*)(long long *, void *))off_1EE9FD5C0[v78])(&v80, v77), v76))
              {
LABEL_44:
                WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v74);
                if (v76)
                {
                  if (v75 != -1) {
                    ((void (*)(long long *, unsigned char *))off_1EE9FD5C0[v75])(&v80, v74);
                  }
                }
                return;
              }
LABEL_52:
              uint64_t v42 = *(char **)a2;
              uint64_t v43 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v44 = *((void *)a2 + 3);
              if (!v44 || !v43 || ((*(void (**)(uint64_t, char *))(*(void *)v44 + 16))(v44, v42), !v76))
              {
                IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
                return;
              }
              goto LABEL_44;
            }
            LODWORD(v90) = 96 * (int)v12 / 0x60u;
            uint64_t v89 = WTF::fastMalloc((WTF *)(96 * v12));
            while (1)
            {
              IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a2, (uint64_t)&v80);
              int v13 = v88;
              if (v88)
              {
                unsigned int v14 = HIDWORD(v90);
                if (HIDWORD(v90) == v90)
                {
                  WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>((uint64_t)&v89, (unint64_t)&v80);
                }
                else
                {
                  uint64_t v15 = v89;
                  uint64_t v16 = v89 + 96 * HIDWORD(v90);
                  long long v17 = v80;
                  *(_DWORD *)(v16 + 16) = v81;
                  *(_OWORD *)uint64_t v16 = v17;
                  *(unsigned char *)(v16 + 24) = 0;
                  uint64_t v18 = (void *)(v16 + 24);
                  *(unsigned char *)(v16 + 40) = 0;
                  uint64_t v19 = (unsigned char *)(v16 + 40);
                  if (v85)
                  {
                    void *v18 = 0;
                    v18[1] = 0;
                    uint64_t v20 = v82;
                    uint64_t v82 = 0;
                    void *v18 = v20;
                    int v21 = v83;
                    int v83 = 0;
                    uint64_t v22 = v15 + 96 * v14;
                    *(_DWORD *)(v22 + 32) = v21;
                    int v23 = v84;
                    int v84 = 0;
                    *(_DWORD *)(v22 + 36) = v23;
                    *uint64_t v19 = 1;
                  }
                  uint64_t v24 = (_OWORD *)(v15 + 96 * v14);
                  long long v26 = v86;
                  long long v25 = v87[0];
                  *(_OWORD *)((char *)v24 + 76) = *(_OWORD *)((char *)v87 + 12);
                  void v24[3] = v26;
                  v24[4] = v25;
                  ++HIDWORD(v90);
                }
              }
              if (v88) {
                BOOL v27 = v85 == 0;
              }
              else {
                BOOL v27 = 1;
              }
              if (!v27) {
                WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v4);
              }
              if (!v13) {
                break;
              }
              if (!--v12)
              {
                LOBYTE(v81) = 0;
                goto LABEL_28;
              }
            }
LABEL_96:
            LOBYTE(v81) = 0;
            WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v4);
          }
          else
          {
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v45 = *((void *)a2 + 3);
            if (v45)
            {
              (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
              unsigned int v70 = *(char **)a2;
              uint64_t v71 = *((void *)a2 + 1);
              uint64_t v72 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              if (v72)
              {
                if (v71) {
                  (*(void (**)(uint64_t, char *))(*(void *)v72 + 16))(v72, v70);
                }
              }
            }
          }
          long long v46 = *(char **)a2;
          uint64_t v47 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v48 = *((void *)a2 + 3);
          if (v48 && v47) {
            (*(void (**)(uint64_t, char *))(*(void *)v48 + 16))(v48, v46);
          }
          int v32 = 0;
          LOBYTE(v77[0]) = 0;
          goto LABEL_37;
        }
        unint64_t v35 = v5;
        long long v36 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v38 = *((void *)a2 + 3);
      if (v38 && v35) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
      }
      goto LABEL_50;
    }
  }
  uint64_t v30 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v30);
}

void sub_1992CB108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a16)
  {
    if (a14 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9FD5C0[a14])(&a26, &a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsGetAll,WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1) {
    ((void (*)(char *, void *))off_1EE9FD5C0[v2])(&v3, v1);
  }
}

void sub_1992CB234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FD5C0[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionWindowParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 96 * v4;
  long long v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(v6 + 24) = 0;
  unsigned int v8 = (void *)(v6 + 24);
  *(unsigned char *)(v6 + 40) = 0;
  unint64_t v9 = (unsigned char *)(v6 + 40);
  if (*(unsigned char *)(v3 + 40))
  {
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    void *v8 = v10;
    int v11 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 32) = 0;
    uint64_t v12 = v5 + 96 * v4;
    *(_DWORD *)(v12 + 32) = v11;
    int v13 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 36) = 0;
    *(_DWORD *)(v12 + 36) = v13;
    unsigned char *v9 = 1;
  }
  uint64_t v14 = v5 + 96 * v4;
  __n128 result = *(__n128 *)(v3 + 48);
  long long v16 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v14 + 76) = *(_OWORD *)(v3 + 76);
  *(__n128 *)(v14 + 48) = result;
  *(_OWORD *)(v14 + 64) = v16;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1992CB494);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    unsigned int v4 = (void *)(*(void *)result + 96 * *(unsigned int *)(result + 12));
    int v5 = 96 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebKit::WebExtensionWindowParameters>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v5 + v6;
      uint64_t v8 = a3 + v6;
      long long v9 = *(_OWORD *)(v5 + v6);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v5 + v6 + 16);
      *(_OWORD *)uint64_t v8 = v9;
      *(unsigned char *)(a3 + v6 + 24) = 0;
      unint64_t v10 = (void *)(a3 + v6 + 24);
      *(unsigned char *)(v8 + 40) = 0;
      if (*(unsigned char *)(v5 + v6 + 40))
      {
        *unint64_t v10 = 0;
        *(void *)(a3 + v6 + 32) = 0;
        uint64_t v11 = *(void *)(v7 + 24);
        *(void *)(v7 + 24) = 0;
        *unint64_t v10 = v11;
        int v12 = *(_DWORD *)(v7 + 32);
        *(_DWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v8 + 32) = v12;
        int v13 = *(_DWORD *)(v7 + 36);
        *(_DWORD *)(v7 + 36) = 0;
        *(_DWORD *)(v8 + 36) = v13;
        *(unsigned char *)(v8 + 40) = 1;
      }
      long long v14 = *(_OWORD *)(v7 + 48);
      long long v15 = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v8 + 76) = *(_OWORD *)(v7 + 76);
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v15;
      if (*(unsigned char *)(v7 + 40)) {
        __n128 result = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 24, a2);
      }
      v6 += 96;
    }
    while ((void *)(v7 + 96) != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unsigned int v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 96 * v3;
    uint64_t v6 = (uint64_t)v4 + 24;
    do
    {
      if (*(unsigned char *)(v6 + 16)) {
        uint64_t v6 = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      }
      v6 += 96;
      v5 -= 96;
    }
    while (v5);
    unsigned int v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  __n128 result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionWindowParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIWindows::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      uint64_t v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(void *)a2) {
      uint64_t v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v6 = &stru_1EEA10550;
    }
    uint64_t v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    id v7 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
    uint64_t v8 = v7;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }

    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = 96 * v9;
      do
      {
        WTF::RetainPtr<NSSet>::get((id *)&cf);
        int v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        int v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
    WTF::RetainPtr<NSSet>::get((id *)&cf);
    long long v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    CFTypeRef v16 = cf;
    uint64_t v19 = v15;
    CFTypeRef cf = 0;
    if (v16)
    {
      CFRelease(v16);
      long long v15 = v19;
    }
    id v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD5F0;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD5F0;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>>>((uint64_t)v5, a2);
    if (v8)
    {
      WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v5);
      if (v8)
      {
        if (v7 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9FD528[v7])(&v4, &v6);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(v3);
  }
}

void sub_1992CBA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  if (a29)
  {
    if (a27 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FD528[a27])(&a13, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::WindowsUpdate,WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9FD528[v4])(&v1, v3);
  }
}

void sub_1992CBB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FD528[a26])(&a12, v26);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWindows::update(double,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 104);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(void *)(a2 + 8)) {
      int v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v4 = &stru_1EEA10550;
    }
    char v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI(a2 + 8);
    char v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    id v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD618;
  uint64_t v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v3 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD618;
  uint64_t v3 = (WebKit::WebExtensionCallbackHandler *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1) {
      (*(void (**)(void))(*(void *)(v4 + 40) + 8))();
    }
    else {
      --*(_DWORD *)(v4 + 48);
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::WindowsRemove,WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIWindows::remove(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    uint64_t v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9) {
        uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v4 = &stru_1EEA10550;
      }
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);
    }
    else
    {
      id v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        char v8 = v9;
        uint64_t v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  else
  {
    id v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1992CBE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAPIObject *WebKit::WebExtensionAPIWindowsEvent::WebExtensionAPIWindowsEvent(WebKit::WebExtensionAPIObject *a1, const WebKit::WebExtensionAPIObject *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(void *)uint64_t v6 = &unk_1EE9FD640;
  *(void *)(v6 + 40) = &unk_1EE9FD670;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  WebKit::toAPIString(a3, &v10);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, &v10, a2);
  char v8 = v10;
  char v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void sub_1992CBF3C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(WebKit::WebExtensionAPIWindowsEvent *this)
{
  WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9FD640;
  *((void *)this + 5) = &unk_1EE9FD670;
  WebKit::WebExtensionAPIWindowsEvent::removeAllListeners((unsigned int *)this);
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

void non-virtual thunk to'WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent(WebKit::WebExtensionAPIWindowsEvent *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionAPIWindowsEvent::~WebExtensionAPIWindowsEvent((WebKit::WebExtensionAPIWindowsEvent *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler ***)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  id v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1992CC0D4(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchWindowsEvent(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters> const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  uint64_t v3 = (WebKit::WebExtensionAPIWindows *)WebKit::WebExtensionAPINamespace::windows(this);
  int v4 = **(unsigned __int8 **)(a1 + 8);
  switch(v4)
  {
    case '9':
      uint64_t v6 = WebKit::WebExtensionAPIWindows::onRemoved(v3);
      uint64_t v7 = *(void *)(a1 + 16);
      if (!*(unsigned char *)(v7 + 96) || !*(unsigned char *)(v7 + 8)) {
        goto LABEL_12;
      }
      uint64_t v8 = v6;
      uint64_t v9 = NSNumber;
      unint64_t v10 = *(void *)v7;
      double v11 = (double)v10;
      if (v10 + 3 < 2) {
        double v11 = -1.0;
      }
      break;
    case '8':
      uint64_t v8 = WebKit::WebExtensionAPIWindows::onFocusChanged(v3);
      uint64_t v9 = NSNumber;
      int v12 = *(uint64_t **)(a1 + 16);
      if (*((unsigned char *)v12 + 96))
      {
        if (!*((unsigned char *)v12 + 8))
        {
LABEL_12:
          std::__throw_bad_optional_access[abi:sn180100]();
          return;
        }
      }
      else
      {
        int v12 = &WebKit::WebExtensionWindowConstants::NoneIdentifier;
      }
      unint64_t v13 = *v12;
      double v11 = (double)v13;
      if (v13 + 3 < 2) {
        double v11 = -1.0;
      }
      break;
    case '7':
      uint64_t v5 = WebKit::WebExtensionAPIWindows::onCreated(v3);
      WebKit::toWebAPI<WebKit::WebExtensionWindowParameters>(*(void *)(a1 + 16));
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(v5, v14, **(unsigned char **)(a1 + 24));
      goto LABEL_18;
    default:
      return;
  }
  id v14 = [v9 numberWithDouble:v11];
  WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(v8, v14, **(unsigned char **)(a1 + 24));
LABEL_18:
}

void sub_1992CC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::invokeListenersWithArgument(uint64_t a1, void *a2, unsigned __int8 a3)
{
  unint64_t v10 = a2;
  uint64_t v5 = *(unsigned int *)(a1 + 84);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 16 * v5;
    uint64_t v8 = (unsigned char *)(v6 + 8);
    do
    {
      if ((*v8 & a3) != 0) {
        id v9 = objc_unsafeClaimAutoreleasedReturnValue(WebKit::WebExtensionCallbackHandler::call(*((WebKit::WebExtensionCallbackHandler **)v8
      }
                                                                                               - 1), v10));
      v8 += 16;
      v7 -= 16;
    }
    while (v7);
  }
}

void sub_1992CC314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::addListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3, void *a4, void *a5)
{
  id v9 = a4;
  char v30 = 0;
  if (WebKit::WebExtensionAPIWindows::parseWindowTypesFilter(v9, &v30, @"filters", a5))
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 2120);
    unint64_t v10 = *a3;
    if (*a3) {
      ++*(_DWORD *)v10;
    }
    BOOL v27 = v10;
    char v11 = v30;
    LOBYTE(v28) = v30;
    uint64_t v12 = *(unsigned int *)(a1 + 84);
    if (v12 == *(_DWORD *)(a1 + 80))
    {
      unint64_t v13 = WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 72), v12 + 1, (unint64_t)&v27);
      uint64_t v14 = *(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84);
      uint64_t v15 = *(void *)v13;
      *(void *)unint64_t v13 = 0;
      *(void *)uint64_t v14 = v15;
      *(unsigned char *)(v14 + 8) = *(unsigned char *)(v13 + 8);
      ++*(_DWORD *)(a1 + 84);
      CFTypeRef v16 = v27;
      BOOL v27 = 0;
      if (v16) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 72) + 16 * v12;
      *(void *)uint64_t v17 = v10;
      *(unsigned char *)(v17 + 8) = v11;
      ++*(_DWORD *)(a1 + 84);
    }
    {
      long long v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v25);
    }
    uint64_t v18 = WebKit::WebProcess::singleton(void)::process;
    char v26 = *(unsigned char *)(a1 + 8);
    BOOL v27 = (WebKit::WebExtensionCallbackHandler *)(a1 + 56);
    uint64_t v28 = a1 + 64;
    uint64_t v29 = &v26;
    uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v20 = 1642;
    *((void *)v20 + 1) = v19;
    *((void *)v20 + 66) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 68) = 0;
    *((void *)v20 + 70) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    int v31 = v20;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v20, (uint64_t)&v27);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v18 + 24) + 32))(v18 + 24, &v31, 0);
    uint64_t v22 = v31;
    int v31 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
}

void sub_1992CC524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::WebExtensionCallbackHandler *a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a10);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindowsEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  int v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
  uint64_t v5 = *(unsigned int *)(a1 + 84);
  unint64_t v6 = (unint64_t)&v4[2 * v5];
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    unint64_t v10 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
    unint64_t v11 = (unint64_t)v10;
    do
    {
      uint64_t v12 = WebKit::WebExtensionCallbackHandler::callbackFunction(*v4);
      unint64_t v13 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);

      if (v12 == v13)
      {
        unint64_t v14 = (unint64_t)v4;
        if (v11 != *(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 84))
        {
          if (v4 == (WebKit::WebExtensionCallbackHandler **)v10)
          {
            unint64_t v14 = v11;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(v10, (WebKit::WebExtensionCallbackHandler *)v4, v11);
            unint64_t v14 = v11 + v9 - (void)v10;
          }
        }
        uint64_t v15 = *v4;
        *int v4 = 0;
        unint64_t v10 = (WebKit::WebExtensionCallbackHandler *)(v4 + 2);
        if (v15) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        }
        ++v8;
        unint64_t v11 = v14;
      }
      v4 += 2;
      v9 += 16;
    }
    while ((unint64_t)v4 < v6);
    int v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    unint64_t v6 = v11;
  }
  else
  {
    unsigned int v8 = 0;
    unint64_t v10 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
  }
  CFTypeRef v16 = (WebKit::WebExtensionCallbackHandler *)&v4[2 * v5];
  if (v10 != v16)
  {
    WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(v10, v16, v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    {
      uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v24);
    }
    uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
    char v25 = *(unsigned char *)(a1 + 8);
    v26[0] = a1 + 56;
    v26[1] = a1 + 64;
    void v26[2] = &v25;
    v26[3] = v8;
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v19 = 1674;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    BOOL v27 = v19;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v19, (uint64_t)v26);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v17 + 24) + 32))(v17 + 24, &v27, 0);
    int v21 = v27;
    BOOL v27 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
  }
}

void sub_1992CC7A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIWindowsEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  if (!*(_DWORD *)(a1 + 84)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(void *)(a1 + 72)
    unint64_t v6 = + v4));
    uint64_t v7 = WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);

    BOOL result = v6 == v7;
    if (v6 == v7) {
      break;
    }
    ++v5;
    v4 += 16;
  }
  while (v5 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1992CC86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIWindowsEvent::removeAllListeners(unsigned int *this)
{
  unsigned int v1 = this[21];
  if (v1)
  {
    uint64_t v2 = this;
    {
      unint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
    char v12 = *((unsigned char *)this + 8);
    v13[0] = this + 14;
    v13[1] = this + 16;
    void v13[2] = &v12;
    void v13[3] = v1;
    uint64_t v4 = *(void *)(*((void *)this + 3) + 24);
    unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v5 = 1674;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    unint64_t v14 = v5;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v5, (uint64_t)v13);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 24) + 32))(v3 + 24, &v14, 0);
    uint64_t v7 = v2 + 18;
    unsigned int v8 = v14;
    unint64_t v14 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    return WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
  }
  return this;
}

void sub_1992CC9BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::WebExtensionCallbackHandler *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WebKit::WebExtensionCallbackHandler *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WebKit::WebExtensionCallbackHandler *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1992CCB28);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler **)result;
    uint64_t v5 = (WebKit::WebExtensionCallbackHandler *)(*(void *)result + 16 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    BOOL result = WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(WebKit::WebExtensionCallbackHandler **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 + 8);
      BOOL result = *(WebKit::WebExtensionCallbackHandler **)v5;
      *(void *)uint64_t v5 = 0;
      if (result) {
        BOOL result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
      }
      uint64_t v5 = (WebKit::WebExtensionCallbackHandler *)((char *)v5 + 16);
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::WebExtensionCallbackHandler *WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::moveOverlapping(WebKit::WebExtensionCallbackHandler *result, WebKit::WebExtensionCallbackHandler *a2, unint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v5 = (unsigned char *)(((a2 - result) & 0xFFFFFFFFFFFFFFF0) + a3 - 8);
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        unint64_t v3 = (WebKit::WebExtensionCallbackHandler *)((char *)v3 - 16);
        *(void *)unint64_t v3 = 0;
        *((void *)v5 - 1) = v6;
        unsigned char *v5 = *((unsigned char *)v3 + 8);
        BOOL result = *(WebKit::WebExtensionCallbackHandler **)v3;
        *(void *)unint64_t v3 = 0;
        if (result) {
          BOOL result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
        }
        v5 -= 16;
      }
      while (v3 != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(result, a2, a3);
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    if (result[3] > a2) {
      BOOL result = WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    }
    uint64_t v4 = *(WebKit::WebExtensionCallbackHandler **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      BOOL result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      void v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        BOOL result = (unsigned int *)WTF::VectorMover<false,std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>>::move(v4, (WebKit::WebExtensionCallbackHandler *)((char *)v4 + 16 * v5), (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WebKit::WebExtensionCallbackHandler **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        void v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  if (v4 != a2)
  {
    uint64_t v5 = (unsigned int **)(*(void *)result + 16 * a2);
    uint64_t v6 = 16 * v4 - 16 * a2;
    do
    {
      BOOL result = *v5;
      unsigned char *v5 = 0;
      if (result) {
        BOOL result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref((WebKit::WebExtensionCallbackHandler *)result);
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WebKit::WebExtension::WebExtension(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9FD6C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v6 = v5;
  unint64_t v7 = v6;
  *(void *)(a1 + 128) = v6;
  if (v6) {
    CFRetain(v6);
  }

  *(void *)(a1 + 136) = 0;
  unint64_t v8 = [(WebKit *)v7 resourceURL];
  unint64_t v9 = [v8 URLByStandardizingPath];
  id v10 = [v9 absoluteURL];
  unint64_t v11 = v10;
  *(void *)(a1 + 144) = v10;
  if (v10) {
    CFRetain(v10);
  }

  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 305) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 352) &= 0x8000u;
  if (a3) {
    *a3 = 0;
  }
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)a1))
  {
    char v12 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 184));
    *a3 = [v12 lastObject];
  }
  return a1;
}

{
  WebKit *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  uint64_t v5 = a2;
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9FD6C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  uint64_t v6 = [(WebKit *)v5 URLByStandardizingPath];
  unint64_t v7 = [v6 absoluteURL];
  unint64_t v8 = v7;
  *(void *)(a1 + 144) = v7;
  if (v7) {
    CFRetain(v7);
  }

  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 305) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 352) &= 0x8000u;
  if (a3) {
    *a3 = 0;
  }
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)a1))
  {
    unint64_t v9 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 184));
    *a3 = [v9 lastObject];
  }
  return a1;
}

void sub_1992CCF28(_Unwind_Exception *a1)
{
  unint64_t v11 = *(const void **)(v1 + 344);
  *(void *)(v1 + 344) = 0;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = *(const void **)(v1 + 336);
  *(void *)(v1 + 336) = 0;
  if (v12) {
    CFRelease(v12);
  }
  unint64_t v13 = *v8;
  void *v8 = 0;
  if (v13) {
    CFRelease(v13);
  }
  unint64_t v14 = *(const void **)(v1 + 312);
  *(void *)(v1 + 312) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(v1 + 304);
  *(void *)(v1 + 304) = 0;
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v16 = *(const void **)(v1 + 296);
  *(void *)(v1 + 296) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(v1 + 288);
  *(void *)(v1 + 288) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(v1 + 280);
  *(void *)(v1 + 280) = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(v1 + 272);
  *(void *)(v1 + 272) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(v1 + 264);
  *(void *)(v1 + 264) = 0;
  if (v20) {
    CFRelease(v20);
  }
  int v21 = *(const void **)(v1 + 256);
  *(void *)(v1 + 256) = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(v1 + 248);
  *(void *)(v1 + 248) = 0;
  if (v22) {
    CFRelease(v22);
  }
  int v23 = *(const void **)(v1 + 240);
  *(void *)(v1 + 240) = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(const void **)(v1 + 232);
  *(void *)(v1 + 232) = 0;
  if (v24) {
    CFRelease(v24);
  }
  char v25 = *(const void **)(v1 + 224);
  *(void *)(v1 + 224) = 0;
  if (v25) {
    CFRelease(v25);
  }
  char v26 = *(const void **)(v1 + 216);
  *(void *)(v1 + 216) = 0;
  if (v26) {
    CFRelease(v26);
  }
  BOOL v27 = *(const void **)(v1 + 208);
  *(void *)(v1 + 208) = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *(const void **)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = *(const void **)(v1 + 192);
  *(void *)(v1 + 192) = 0;
  if (v29) {
    CFRelease(v29);
  }
  char v30 = *v5;
  WebKit *v5 = 0;
  if (v30) {
    CFRelease(v30);
  }
  int v31 = *(const void **)(v1 + 176);
  *(void *)(v1 + 176) = 0;
  if (v31) {
    CFRelease(v31);
  }
  int v32 = *(const void **)(v1 + 168);
  *(void *)(v1 + 168) = 0;
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = *(const void **)(v1 + 160);
  *(void *)(v1 + 160) = 0;
  if (v33) {
    CFRelease(v33);
  }
  int v34 = *v7;
  WebKit *v7 = 0;
  if (v34) {
    CFRelease(v34);
  }
  unint64_t v35 = *(const void **)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  if (v35) {
    CFRelease(v35);
  }
  long long v36 = *(const void **)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v36) {
    CFRelease(v36);
  }
  uint64_t v37 = *(const void **)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = *(uint64_t **)(v1 + 120);
  if (v38) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v38, v10);
  }
  uint64_t v39 = *(WTF::StringImpl ***)(v1 + 112);
  if (v39) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v39, (WTF::StringImpl *)v10);
  }
  uint64_t v40 = *(WTF::StringImpl ***)(v1 + 104);
  if (v40) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v40, (WTF::StringImpl *)v10);
  }
  uint64_t v41 = *(uint64_t **)(v1 + 96);
  if (v41) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v41, v10);
  }
  uint64_t v42 = *(uint64_t **)(v1 + 88);
  if (v42) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v42, v10);
  }
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1 + 72, v10);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v1 + 56), v43);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1 + 40, v44);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v45);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v46);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::manifestParsedSuccessfully(WebKit::WebExtension *this)
{
  if ((*((_WORD *)this + 176) & 4) != 0)
  {
    uint64_t v1 = (void *)*((void *)this + 19);
  }
  else
  {
    uint64_t v1 = WebKit::WebExtension::manifest(this);
  }
  return v1 != 0;
}

void sub_1992CD374(_Unwind_Exception *a1)
{
  unint64_t v11 = *(const void **)(v2 + 344);
  *(void *)(v2 + 344) = 0;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = *(const void **)(v2 + 336);
  *(void *)(v2 + 336) = 0;
  if (v12) {
    CFRelease(v12);
  }
  unint64_t v13 = *v8;
  void *v8 = 0;
  if (v13) {
    CFRelease(v13);
  }
  unint64_t v14 = *(const void **)(v2 + 312);
  *(void *)(v2 + 312) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(v2 + 304);
  *(void *)(v2 + 304) = 0;
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v16 = *(const void **)(v2 + 296);
  *(void *)(v2 + 296) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(v2 + 288);
  *(void *)(v2 + 288) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(v2 + 280);
  *(void *)(v2 + 280) = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(v2 + 272);
  *(void *)(v2 + 272) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(v2 + 264);
  *(void *)(v2 + 264) = 0;
  if (v20) {
    CFRelease(v20);
  }
  int v21 = *(const void **)(v2 + 256);
  *(void *)(v2 + 256) = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(v2 + 248);
  *(void *)(v2 + 248) = 0;
  if (v22) {
    CFRelease(v22);
  }
  int v23 = *(const void **)(v2 + 240);
  *(void *)(v2 + 240) = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(const void **)(v2 + 232);
  *(void *)(v2 + 232) = 0;
  if (v24) {
    CFRelease(v24);
  }
  char v25 = *(const void **)(v2 + 224);
  *(void *)(v2 + 224) = 0;
  if (v25) {
    CFRelease(v25);
  }
  char v26 = *(const void **)(v2 + 216);
  *(void *)(v2 + 216) = 0;
  if (v26) {
    CFRelease(v26);
  }
  BOOL v27 = *(const void **)(v2 + 208);
  *(void *)(v2 + 208) = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *(const void **)(v2 + 200);
  *(void *)(v2 + 200) = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = *(const void **)(v2 + 192);
  *(void *)(v2 + 192) = 0;
  if (v29) {
    CFRelease(v29);
  }
  char v30 = *v5;
  WebKit *v5 = 0;
  if (v30) {
    CFRelease(v30);
  }
  int v31 = *(const void **)(v2 + 176);
  *(void *)(v2 + 176) = 0;
  if (v31) {
    CFRelease(v31);
  }
  int v32 = *(const void **)(v2 + 168);
  *(void *)(v2 + 168) = 0;
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = *(const void **)(v2 + 160);
  *(void *)(v2 + 160) = 0;
  if (v33) {
    CFRelease(v33);
  }
  int v34 = *v7;
  WebKit *v7 = 0;
  if (v34) {
    CFRelease(v34);
  }
  unint64_t v35 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  if (v35) {
    CFRelease(v35);
  }
  long long v36 = *(const void **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  if (v36) {
    CFRelease(v36);
  }
  uint64_t v37 = *(const void **)(v2 + 128);
  *(void *)(v2 + 128) = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = *(uint64_t **)(v2 + 120);
  if (v38) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v38, v10);
  }
  uint64_t v39 = *(WTF::StringImpl ***)(v2 + 112);
  if (v39) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v39, (WTF::StringImpl *)v10);
  }
  uint64_t v40 = *(WTF::StringImpl ***)(v2 + 104);
  if (v40) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v40, (WTF::StringImpl *)v10);
  }
  uint64_t v41 = *(uint64_t **)(v2 + 96);
  if (v41) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v41, v10);
  }
  uint64_t v42 = *(uint64_t **)(v2 + 88);
  if (v42) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v42, v10);
  }
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72, v10);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 56), v43);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, v44);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v45);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v46);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::WebExtension(WebKit::WebExtension *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v6);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9FD6C0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  unint64_t v7 = (void *)[(NSDictionary *)v6 mutableCopy];
  unint64_t v8 = v7;
  unint64_t v9 = (void *)((char *)this + 160);
  if (v7)
  {
    id v10 = v7;
    void *v9 = v10;
    goto LABEL_4;
  }
  id v10 = [MEMORY[0x1E4F1CA60] dictionary];
  void *v9 = v10;
  if (v10)
  {
LABEL_4:
    CFRetain(v10);

    if (v8) {
      goto LABEL_6;
    }
  }

LABEL_6:
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 41) = 0;
  *(_OWORD *)((char *)this + 305) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((_WORD *)this + 176) &= 0x8000u;
  unint64_t v11 = WebKit::encodeJSONData(v5, 0, 0);
  if (v11)
  {
    char v12 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v12 setObject:v11 forKey:@"manifest.json"];

    return (uint64_t)this;
  }
  else
  {
    uint64_t result = 213;
    __break(0xC471u);
  }
  return result;
}

void sub_1992CD7B4(_Unwind_Exception *a1)
{
  unint64_t v9 = *(const void **)(v3 + 152);
  *(void *)(v3 + 152) = 0;
  if (v9) {
    CFRelease(v9);
  }
  id v10 = *(const void **)(v3 + 144);
  *(void *)(v3 + 144) = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = *(const void **)(v3 + 136);
  *(void *)(v3 + 136) = 0;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = *(const void **)(v3 + 128);
  *(void *)(v3 + 128) = 0;
  if (v12) {
    CFRelease(v12);
  }
  unint64_t v13 = *(uint64_t **)(v3 + 120);
  if (v13) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v13, v8);
  }
  unint64_t v14 = *(WTF::StringImpl ***)(v3 + 112);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, (WTF::StringImpl *)v8);
  }
  uint64_t v15 = *(WTF::StringImpl ***)(v3 + 104);
  if (v15) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, (WTF::StringImpl *)v8);
  }
  CFTypeRef v16 = *(uint64_t **)(v3 + 96);
  if (v16) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v16, v8);
  }
  uint64_t v17 = *(uint64_t **)(v3 + 88);
  if (v17) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v17, v8);
  }
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 72, v8);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v3 + 56), v18);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 40, v19);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v20);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, v21);

  _Unwind_Resume(a1);
}

WebKit::WebExtension *WebKit::WebExtension::WebExtension(WebKit::WebExtension *this, NSDictionary *a2)
{
  uint64_t v3 = a2;
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v3);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9FD6C0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  uint64_t v4 = (void *)[(NSDictionary *)v3 mutableCopy];
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    *((void *)this + 20) = v6;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F1CA60] dictionary];
    *((void *)this + 20) = v6;
    if (!v6)
    {
LABEL_5:

      goto LABEL_6;
    }
  }
  CFRetain(v6);

  if (!v5) {
    goto LABEL_5;
  }
LABEL_6:

  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 305) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 41) = 0;
  *((_WORD *)this + 176) &= 0x8000u;

  return this;
}

void sub_1992CDB9C(_Unwind_Exception *a1)
{
  unint64_t v8 = *(const void **)(v2 + 152);
  *(void *)(v2 + 152) = 0;
  if (v8) {
    CFRelease(v8);
  }
  unint64_t v9 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  if (v9) {
    CFRelease(v9);
  }
  id v10 = *(const void **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = *(const void **)(v2 + 128);
  *(void *)(v2 + 128) = 0;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = *(uint64_t **)(v2 + 120);
  if (v12) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v12, v7);
  }
  unint64_t v13 = *(WTF::StringImpl ***)(v2 + 112);
  if (v13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, (WTF::StringImpl *)v7);
  }
  unint64_t v14 = *(WTF::StringImpl ***)(v2 + 104);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, (WTF::StringImpl *)v7);
  }
  uint64_t v15 = *(uint64_t **)(v2 + 96);
  if (v15) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v15, v7);
  }
  CFTypeRef v16 = *(uint64_t **)(v2 + 88);
  if (v16) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v16, v7);
  }
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72, v7);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 56), v17);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, v18);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v19);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v20);

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::manifest(WebKit::WebExtension *this)
{
  __int16 v2 = *((_WORD *)this + 176);
  if ((v2 & 4) != 0)
  {
    int v21 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
    goto LABEL_18;
  }
  *((_WORD *)this + 176) = v2 | 4;
  id v24 = 0;
  uint64_t v3 = WebKit::WebExtension::resourceDataForPath((uint64_t)this, @"manifest.json", &v24, 0, 0);
  uint64_t v4 = (NSError *)v24;
  if (v3)
  {
    id v5 = v3;
    id v25 = 0;
    id v6 = WebKit::parseJSON(v5, 0, (uint64_t)&v25);
    id v7 = v25;
    WTF::RetainPtr<NSDictionary>::RetainPtr(&v26, v6);
    unint64_t v8 = (id *)((char *)this + 152);
    unint64_t v9 = (const void *)*((void *)this + 19);
    *((void *)this + 19) = v26;
    char v26 = 0;
    if (v9) {
      CFRelease(v9);
    }

    if (*v8)
    {

      id v10 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
      unint64_t v11 = [v10 objectForKey:@"default_locale"];

      id v12 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v11];
      unint64_t v13 = v12;
      if (v12) {
        CFRetain(v12);
      }

      unint64_t v14 = (const void *)*((void *)this + 21);
      *((void *)this + 21) = v13;
      if (v14) {
        CFRelease(v14);
      }

      uint64_t v15 = [[_WKWebExtensionLocalization alloc] initWithWebExtension:this];
      CFTypeRef v16 = (const void **)((char *)this + 176);
      WTF::RetainPtr<_WKWebExtensionLocalization>::operator=(v16, v15);

      uint64_t v17 = WTF::RetainPtr<NSSet>::get((id *)v16);
      uint64_t v18 = WTF::RetainPtr<NSSet>::get(v8);
      uint64_t v19 = [v17 localizedDictionaryForDictionary:v18];
      WTF::RetainPtr<NSDictionary>::RetainPtr(&v26, v19);
      id v20 = *v8;
      id *v8 = v26;
      char v26 = 0;
      if (v20) {
        CFRelease(v20);
      }

      int v21 = WTF::RetainPtr<NSSet>::get(v8);

      goto LABEL_17;
    }
    WebKit::WebExtension::createError((id *)this, 4, 0, v7);
    uint64_t v22 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)this, v22);
  }
  else
  {
    WebKit::WebExtension::recordError((const void **)this, v4);
  }
  int v21 = 0;
LABEL_17:

LABEL_18:

  return v21;
}

void sub_1992CDF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::recordError(const void **this, NSError *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (!this[23])
  {
    uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
    WTF::RetainPtr<NSMutableArray>::operator=(this + 23, v4);
  }
  id v5 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id v12 = WebKit::privacyPreservingDescription((WebKit *)v3, v6);
    int v13 = 138543362;
    unint64_t v14 = v12;
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Error recorded: %{public}@", (uint8_t *)&v13, 0xCu);
  }
  id v7 = WTF::RetainPtr<NSSet>::get((id *)this + 23);
  char v8 = [v7 containsObject:v3];

  if ((v8 & 1) == 0)
  {
    unint64_t v9 = WebKit::WebExtensionAction::wrapper((id *)this);
    [v9 willChangeValueForKey:@"errors"];

    id v10 = WTF::RetainPtr<NSSet>::get((id *)this + 23);
    [v10 addObject:v3];

    unint64_t v11 = WebKit::WebExtensionAction::wrapper((id *)this);
    [v11 didChangeValueForKey:@"errors"];
  }
}

void sub_1992CE124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::createError(id *a1, int a2, void *a3, void *a4)
{
  LODWORD(v11) = a2;
  v60[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v9 = v7;
  id v10 = 0;
  uint64_t v11 = v11;
  switch((int)v11)
  {
    case 1:
      WebCore::localizedString((uint64_t *)&v56, (WebCore *)@"An unknown error has occurred.", v8);
      if (v56)
      {
        id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        int v13 = v56;
        uint64_t v56 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      else
      {
        id v10 = &stru_1EEA10550;
      }
      goto LABEL_82;
    case 2:
      goto LABEL_97;
    case 3:
      id v10 = 0;
      uint64_t v11 = 3;
      goto LABEL_97;
    case 4:
      unint64_t v14 = [v7 userInfo];
      uint64_t v15 = [v14 objectForKeyedSubscript:*MEMORY[0x1E4F28228]];

      if (v15)
      {
        uint64_t v17 = NSString;
        WebCore::localizedString((uint64_t *)&v56, (WebCore *)@"Unable to parse manifest: %@", v16);
        if (v56) {
          uint64_t v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v18 = &stru_1EEA10550;
        }
        objc_msgSend(v17, "stringWithFormat:", v18, v15);
        id v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        WebCore::localizedString((uint64_t *)&v56, (WebCore *)@"Unable to parse manifest because of an unexpected format.", v16);
        if (!v56)
        {
          id v10 = &stru_1EEA10550;
          goto LABEL_88;
        }
        id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      uint64_t v43 = v56;
      uint64_t v56 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v19);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
LABEL_88:

      uint64_t v11 = 4;
      goto LABEL_97;
    case 5:
      if (v56)
      {
        id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        int v21 = v56;
        uint64_t v56 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        id v10 = &stru_1EEA10550;
      }
      uint64_t v11 = 5;
      goto LABEL_97;
    case 6:
      if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)a1) >= 3.0)
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      else
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      goto LABEL_92;
    case 7:
      int v23 = WTF::RetainPtr<NSSet>::get(a1 + 30);
      id v24 = [v23 objectForKeyedSubscript:@"icon_variants"];

      if (v24)
      {
        if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)a1) >= 3.0)
        {
          if (!v56) {
            goto LABEL_105;
          }
        }
        else
        {
          if (!v56) {
            goto LABEL_105;
          }
        }
      }
      else if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)a1) >= 3.0)
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      else
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      goto LABEL_92;
    case 8:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 9:
      if (v56)
      {
        id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        BOOL v27 = v56;
        uint64_t v56 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      else
      {
        id v10 = &stru_1EEA10550;
      }
      uint64_t v11 = 8;
      goto LABEL_97;
    case 10:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 11:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 12:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 13:
      uint64_t v28 = [v7 userInfo];
      uint64_t v29 = [v28 objectForKeyedSubscript:*MEMORY[0x1E4F28228]];

      if (v29)
      {
        int v31 = NSString;
        if (v56) {
          int v32 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          int v32 = &stru_1EEA10550;
        }
        objc_msgSend(v31, "stringWithFormat:", v32, v29);
        id v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (!v56)
        {
          id v10 = &stru_1EEA10550;
          goto LABEL_90;
        }
        id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      uint64_t v45 = v56;
      uint64_t v56 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v33);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
LABEL_90:

      uint64_t v11 = 7;
      goto LABEL_97;
    case 14:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 15:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 16:
      int v34 = WebKit::WebExtension::manifest((WebKit::WebExtension *)a1);
      unint64_t v35 = [v34 objectForKey:@"icon_variants"];

      if (v35)
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      else
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      goto LABEL_92;
    case 17:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 18:
      uint64_t v37 = WebKit::WebExtension::manifest((WebKit::WebExtension *)a1);
      uint64_t v38 = [v37 objectForKey:@"options_ui"];

      if (v38)
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      else
      {
        if (!v56) {
          goto LABEL_105;
        }
      }
      goto LABEL_92;
    case 19:
      uint64_t v40 = WebKit::WebExtension::manifest((WebKit::WebExtension *)a1);
      uint64_t v41 = [v40 objectForKey:@"browser_url_overrides"];

      if (v41)
      {
        if (v56) {
          goto LABEL_92;
        }
LABEL_105:
        id v10 = &stru_1EEA10550;
        goto LABEL_96;
      }
      if (!v56) {
        goto LABEL_105;
      }
LABEL_92:
      id v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v47 = v56;
      uint64_t v56 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v46);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
LABEL_96:
      uint64_t v11 = 6;
LABEL_97:
      if ([v6 length])
      {
        uint64_t v48 = (__CFString *)v6;

        id v10 = v48;
      }
      if (v9)
      {
        uint64_t v49 = *MEMORY[0x1E4F28A50];
        v59[0] = *MEMORY[0x1E4F28568];
        v59[1] = v49;
        v60[0] = v10;
        v60[1] = v9;
        unsigned int v50 = v59;
        uint64_t v51 = (__CFString **)v60;
        uint64_t v52 = 2;
      }
      else
      {
        uint64_t v57 = *MEMORY[0x1E4F28568];
        uint64_t v58 = v10;
        unsigned int v50 = &v57;
        uint64_t v51 = &v58;
        uint64_t v52 = 1;
      }
      long long v53 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:v52];
      uint64_t v54 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"WKWebExtensionErrorDomain" code:v11 userInfo:v53];

      return v54;
    case 20:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    case 21:
      if (v56) {
        goto LABEL_92;
      }
      goto LABEL_105;
    default:
      id v10 = 0;
LABEL_82:
      uint64_t v11 = 1;
      goto LABEL_97;
  }
}

void sub_1992CE9DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::resourceDataForPath(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = v9;
  if (a3) {
    *a3 = 0;
  }
  if ([v9 hasPrefix:@"data:"])
  {
    uint64_t v11 = [v10 rangeOfString:@";base64,"];
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v13 = [v10 rangeOfString:@","];
      if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v15 = [MEMORY[0x1E4F1C9B8] data];
        goto LABEL_22;
      }
      uint64_t v19 = [v10 substringFromIndex:v13 + v14];
      int v21 = [v19 stringByRemovingPercentEncoding];
      uint64_t v22 = [v21 dataUsingEncoding:4];
      goto LABEL_19;
    }
    uint64_t v19 = [v10 substringFromIndex:v11 + v12];
    uint64_t v23 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v19 options:0];
    goto LABEL_14;
  }
  if ([v10 hasPrefix:@"/"])
  {
    uint64_t v16 = [v10 substringFromIndex:1];

    id v10 = (void *)v16;
  }
  uint64_t v17 = (const void **)(a1 + 160);
  uint64_t v18 = WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v19 = [v18 objectForKey:v10];

  if (!v19)
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)a1);
    if (*(unsigned char *)(a1 + 320))
    {
      if ([v10 isEqualToString:@"_generated_service_worker.js"])
      {
LABEL_17:
        uint64_t v19 = WebKit::WebExtension::generatedBackgroundContent((WebKit::WebExtension *)a1);
        uint64_t v23 = [v19 dataUsingEncoding:4];
LABEL_14:
        uint64_t v15 = (void *)v23;
        goto LABEL_21;
      }
    }
    else if ([v10 isEqualToString:@"_generated_background_page.html"])
    {
      goto LABEL_17;
    }
    uint64_t v19 = WebKit::WebExtension::resourceFileURLForPath((WebKit::WebExtension *)a1, (NSString *)v10);
    if (v19)
    {
      id v36 = 0;
      uint64_t v15 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v19 options:1 error:&v36];
      id v27 = v36;
      if (v15)
      {
        if (a4)
        {
          if (!*v17)
          {
            uint64_t v28 = [MEMORY[0x1E4F1CA60] dictionary];
            WTF::RetainPtr<NSMutableDictionary>::operator=(v17, v28);
          }
          uint64_t v29 = WTF::RetainPtr<__IOHIDDevice *>::get();
          [v29 setObject:v15 forKey:v10];
        }
      }
      else if (a3 && !a5)
      {
        WebCore::formatLocalizedString((uint64_t *)&v37, (WebCore *)@"Unable to find \"%@\" in the extension’s resources.", v26, v10);
        id v33 = v37 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
        WebKit::WebExtension::createError((id *)a1, 2, v33, v27);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        unint64_t v35 = v37;
        uint64_t v37 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v34);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (a3 && !a5)
      {
        WebCore::formatLocalizedString((uint64_t *)&v37, (WebCore *)@"Unable to find \"%@\" in the extension’s resources. It is an invalid path.", v25, v10);
        if (v37) {
          CFStringRef v30 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          CFStringRef v30 = &stru_1EEA10550;
        }
        WebKit::WebExtension::createError((id *)a1, 2, v30, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        int v32 = v37;
        uint64_t v37 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v31);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        uint64_t v15 = 0;
      }
    }
    goto LABEL_21;
  }
  objc_opt_class();
  uint64_t v15 = WTF::dynamic_objc_cast<NSData>(v19);
  if (!v15)
  {
    objc_opt_class();
    id v20 = WTF::dynamic_objc_cast<NSString>(v19);
    int v21 = v20;
    if (!v20)
    {
      uint64_t v15 = WebKit::encodeJSONData(v19, 1, 0);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1992CF0A0);
      }
      int v21 = WTF::RetainPtr<__IOHIDDevice *>::get();
      [v21 setObject:v15 forKey:v10];
      goto LABEL_20;
    }
    uint64_t v22 = [v20 dataUsingEncoding:4];
LABEL_19:
    uint64_t v15 = (void *)v22;
LABEL_20:
  }
LABEL_21:

LABEL_22:

  return v15;
}

void sub_1992CF0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionLocalization>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  id v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_1992CF238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::serializeManifest(WebKit::WebExtension *this@<X0>, WebKit **a2@<X8>)
{
  id v3 = WebKit::WebExtension::manifest(this);
  uint64_t v4 = WebKit::encodeJSONData(v3, 0, 0);
  WTF::RetainPtr<NSData>::RetainPtr(&cf, v4);
  API::Data::createWithoutCopying((id *)&cf, a2);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1992CF2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

double WebKit::WebExtension::manifestVersion(WebKit::WebExtension *this)
{
  uint64_t v1 = WebKit::WebExtension::manifest(this);
  __int16 v2 = WebKit::objectForKey<NSNumber>(v1, @"manifest_version");
  [v2 doubleValue];
  double v4 = v3;

  return v4;
}

void sub_1992CF36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::serializeLocalization(id *this@<X0>, WebKit **a2@<X8>)
{
  double v3 = WTF::RetainPtr<NSSet>::get(this + 22);
  double v4 = [v3 localizationDictionary];
  CFTypeRef v5 = WebKit::encodeJSONData(v4, 0, 0);
  WTF::RetainPtr<NSData>::RetainPtr(&cf, v5);
  API::Data::createWithoutCopying((id *)&cf, a2);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1992CF41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

SecStaticCodeRef WebKit::WebExtension::bundleStaticCode(WebKit::WebExtension *this)
{
  uint64_t v1 = (id *)((char *)this + 128);
  if (!*((void *)this + 16)) {
    return 0;
  }
  SecStaticCodeRef result = (SecStaticCodeRef)*((void *)this + 17);
  if (result) {
    return result;
  }
  SecStaticCodeRef staticCode = 0;
  double v4 = WTF::RetainPtr<NSSet>::get(v1);
  CFURLRef v5 = [v4 bundleURL];
  OSStatus v6 = SecStaticCodeCreateWithPath(v5, 0, &staticCode);

  SecStaticCodeRef result = staticCode;
  if (v6 || !staticCode)
  {
    if (!staticCode) {
      return result;
    }
    CFRelease(staticCode);
    return 0;
  }
  id v7 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = staticCode;
  if (v7)
  {
    CFRelease(v7);
    return (SecStaticCodeRef)*((void *)this + 17);
  }
  return result;
}

void sub_1992CF50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bundleHash(WebKit::WebExtension *this)
{
  uint64_t v1 = WebKit::WebExtension::bundleStaticCode(this);
  if (v1)
  {
    informatioint n = 0;
    if (!SecCodeCopySigningInformation(v1, 0, &information) && information)
    {
      Value = CFDictionaryGetValue(information, (const void *)*MEMORY[0x1E4F3B9D0]);
      id v3 = (id)WTF::checked_cf_cast<__CFData const*>(Value);
      CFRelease(information);
      goto LABEL_8;
    }
    if (information) {
      CFRelease(information);
    }
  }
  id v3 = 0;
LABEL_8:

  return v3;
}

void sub_1992CF5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::isWebAccessibleResource(WebKit::WebExtension *this, const WTF::URL *a2, const WTF::URL *a3)
{
  WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded(this);
  WTF::URL::path(a2);
  if ((v6 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  if (v25[0])
  {
    WTF::StringImpl::substring(v25[0]);
    CFStringRef v8 = v25[0];
    v25[0] = v25[1];
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    v25[0] = 0;
  }
  unsigned int v9 = *((_DWORD *)this + 13);
  if (!v9)
  {
LABEL_29:
    uint64_t v22 = 0;
    goto LABEL_31;
  }
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = v10 + 24 * v9;
  while (1)
  {
    char v12 = !*(void *)v10 || *(_DWORD *)(*(void *)v10 - 12) == 0;
    uint64_t v13 = (WTF::StringImpl *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)v10);
    uint64_t v15 = v13;
    uint64_t v16 = v7;
    uint64_t v17 = *(void *)v10 ? *(void *)v10 + 8 * *(unsigned int *)(*(void *)v10 - 4) : 0;
    if ((WTF::StringImpl *)v17 != v13) {
      break;
    }
LABEL_23:
    if (v12) {
      goto LABEL_24;
    }
LABEL_28:
    v10 += 24;
    if (v10 == v11) {
      goto LABEL_29;
    }
  }
  while (1)
  {
    char v18 = WebKit::WebExtensionMatchPattern::matchesURL(*(unsigned char **)v15, a3, 0);
    if (v18) {
      break;
    }
    while (1)
    {
      uint64_t v15 = (WTF::StringImpl *)((char *)v15 + 8);
      if (v15 == v16) {
        break;
      }
      if ((unint64_t)(*(void *)v15 + 1) > 1) {
        goto LABEL_22;
      }
    }
    uint64_t v15 = v16;
LABEL_22:
    v12 |= v18;
    if (v15 == (WTF::StringImpl *)v17) {
      goto LABEL_23;
    }
  }
LABEL_24:
  uint64_t v19 = *(unsigned int *)(v10 + 20);
  if (!v19) {
    goto LABEL_28;
  }
  id v20 = *(WebCore **)(v10 + 8);
  uint64_t v21 = 8 * v19;
  while ((WebCore::matchesWildcardPattern(v20, (const WTF::String *)v25, v14) & 1) == 0)
  {
    id v20 = (WebCore *)((char *)v20 + 8);
    v21 -= 8;
    if (!v21) {
      goto LABEL_28;
    }
  }
  uint64_t v22 = 1;
LABEL_31:
  uint64_t v23 = v25[0];
  v25[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v7);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

void sub_1992CF7A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this) || (*((_WORD *)this + 176) & 0x800) != 0) {
    return;
  }
  *((_WORD *)this + 176) |= 0x800u;
  double v2 = WebKit::WebExtension::manifestVersion(this);
  uint64_t v51 = this;
  id v3 = (id *)((char *)this + 152);
  if (v2 < 3.0)
  {
    uint64_t v4 = objc_opt_class();
    CFURLRef v5 = WebKit::objectForKey<NSArray>(v3, @"web_accessible_resources", 0, v4);
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = WebKit::filterObjects<NSArray>(v5, &__block_literal_global_226);

      if ([v7 count])
      {
        long long v53 = 0;
        WTF::makeVector<WTF::String>(v7, (uint64_t)&v54);
        unsigned int v9 = *((_DWORD *)v51 + 13);
        if (v9 == *((_DWORD *)v51 + 12))
        {
          WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>((uint64_t)v51 + 40, (unint64_t)&v53);
        }
        else
        {
          uint64_t v46 = *((void *)v51 + 5) + 24 * v9;
          *(void *)uint64_t v46 = 0;
          uint64_t v47 = v53;
          long long v53 = 0;
          *(void *)(v46 + 8) = 0;
          *(void *)(v46 + 16) = 0;
          *(void *)uint64_t v46 = v47;
          uint64_t v48 = v54;
          uint64_t v54 = 0;
          *(void *)(v46 + 8) = v48;
          LODWORD(v48) = v55;
          int v55 = 0;
          *(_DWORD *)(v46 + 16) = v48;
          LODWORD(v48) = v56;
          int v56 = 0;
          *(_DWORD *)(v46 + 20) = v48;
          ++*((_DWORD *)v51 + 13);
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v8);
        if (v53) {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v53, v49);
        }
      }
      goto LABEL_62;
    }
    uint64_t v41 = WTF::RetainPtr<NSSet>::get(v3);
    CFStringRef v42 = [v41 objectForKey:@"web_accessible_resources"];

    if (v42) {
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = WebKit::objectForKey<NSArray>(v3, @"web_accessible_resources", 0, v10);
  unsigned int v50 = v11;
  if (!v11)
  {
    uint64_t v43 = WTF::RetainPtr<NSSet>::get(v3);
    CFStringRef v44 = objc_msgSend(v43, "objectForKey:", @"web_accessible_resources", 0);

    if (v44)
    {
LABEL_55:
      WebKit::WebExtension::createError((id *)v51, 21, 0, 0);
      uint64_t v45 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)v51, v45);
    }
LABEL_56:
    id v7 = 0;
    goto LABEL_62;
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  id obj = v11;
  uint64_t v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16, v50);
  if (!v12)
  {

    goto LABEL_58;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)v65;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = v13;
    do
    {
      if (*(void *)v65 != v14) {
        objc_enumerationMutation(obj);
      }
      uint64_t v17 = *(void **)(*((void *)&v64 + 1) + 8 * v15);
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = WebKit::objectForKey<NSArray>(v17, @"resources", 0, v18);
      uint64_t v20 = objc_opt_class();
      uint64_t v21 = WebKit::objectForKey<NSArray>(v17, @"matches", 0, v20);
      uint64_t v22 = WebKit::filterObjects<NSArray>(v19, &__block_literal_global_35);

      uint64_t v23 = WebKit::filterObjects<NSArray>(v21, &__block_literal_global_224);

      uint64_t v13 = 1;
      if (v22 && v23)
      {
        if ([v22 count] && objc_msgSend(v23, "count"))
        {
          BOOL v63 = 0;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          id v24 = v23;
          uint64_t v25 = [v24 countByEnumeratingWithState:&v59 objects:v68 count:16];
          if (v25)
          {
            uint64_t v26 = *(void *)v60;
            do
            {
              for (uint64_t i = 0; i != v25; ++i)
              {
                if (*(void *)v60 != v26) {
                  objc_enumerationMutation(v24);
                }
                MEMORY[0x19972EAD0](&v53, *(void *)(*((void *)&v59 + 1) + 8 * i));
                WebKit::WebExtensionMatchPattern::getOrCreate(&v53, v28, (uint64_t *)&v58);
                CFStringRef v30 = v53;
                long long v53 = 0;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2) {
                    WTF::StringImpl::destroy(v30, v29);
                  }
                  else {
                    *(_DWORD *)v30 -= 2;
                  }
                }
                if (v58)
                {
                  if (WebKit::WebExtensionMatchPattern::isSupported(v58))
                  {
                    uint64_t v57 = v58;
                    uint64_t v58 = 0;
                    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v63, (uint64_t *)&v57, (uint64_t)&v53);
                    uint64_t v31 = (uint64_t)v57;
                    uint64_t v57 = 0;
                    if (v31) {
                      CFRelease(*(CFTypeRef *)(v31 + 8));
                    }
                  }
                  else
                  {
                    uint64_t v16 = 1;
                  }
                  int v32 = v58;
                  uint64_t v58 = 0;
                  if (v32) {
                    CFRelease(*((CFTypeRef *)v32 + 1));
                  }
                }
              }
              uint64_t v25 = [v24 countByEnumeratingWithState:&v59 objects:v68 count:16];
            }
            while (v25);
          }

          int v34 = v63;
          if (v63)
          {
            if (!*((_DWORD *)v63 - 3))
            {
              uint64_t v16 = 1;
              goto LABEL_46;
            }
            BOOL v63 = 0;
            long long v53 = v34;
            WTF::makeVector<WTF::String>(v22, (uint64_t)&v54);
            unsigned int v36 = *((_DWORD *)v51 + 13);
            if (v36 == *((_DWORD *)v51 + 12))
            {
              WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>((uint64_t)v51 + 40, (unint64_t)&v53);
            }
            else
            {
              uint64_t v37 = *((void *)v51 + 5) + 24 * v36;
              *(void *)uint64_t v37 = 0;
              uint64_t v38 = v53;
              long long v53 = 0;
              *(void *)(v37 + 8) = 0;
              *(void *)(v37 + 16) = 0;
              *(void *)uint64_t v37 = v38;
              uint64_t v39 = v54;
              uint64_t v54 = 0;
              *(void *)(v37 + 8) = v39;
              LODWORD(v39) = v55;
              int v55 = 0;
              *(_DWORD *)(v37 + 16) = v39;
              LODWORD(v39) = v56;
              int v56 = 0;
              *(_DWORD *)(v37 + 20) = v39;
              ++*((_DWORD *)v51 + 13);
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v35);
            if (v53) {
              WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v53, v33);
            }
            int v34 = v63;
            if (v63) {
LABEL_46:
            }
              WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v34, v33);
          }
          else
          {
            uint64_t v16 = 1;
          }
        }
        uint64_t v13 = v16;
      }

      ++v15;
      uint64_t v16 = v13;
    }
    while (v15 != v12);
    uint64_t v12 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
  }
  while (v12);

  if (v13)
  {
    WebKit::WebExtension::createError((id *)v51, 21, 0, 0);
    uint64_t v40 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)v51, v40);
  }
LABEL_58:
  id v7 = obj;
LABEL_62:
}

void sub_1992CFE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSArray>(id *a1, void *a2, int a3, uint64_t a4)
{
  id v7 = a2;
  CFStringRef v8 = WTF::RetainPtr<NSSet>::get(a1);
  unsigned int v9 = WebKit::objectForKey<NSArray>(v8, (uint64_t)v7, a3, a4);

  return v9;
}

void sub_1992D0008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit12WebExtension38populateWebAccessibleResourcesIfNeededEv_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

id WebKit::WebExtension::resourceFileURLForPath(WebKit::WebExtension *this, NSString *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([(NSString *)v3 hasPrefix:@"/"])
  {
    uint64_t v4 = [(NSString *)v3 substringFromIndex:1];

    id v3 = (NSString *)v4;
  }
  if ([(NSString *)v3 length] && *((void *)this + 18))
  {
    CFURLRef v5 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v6 = [(NSString *)v3 stringByRemovingPercentEncoding];
    id v7 = (void *)*((void *)this + 18);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v7);
    objc_claimAutoreleasedReturnValue();
    uint64_t v8 = [v5 fileURLWithPath:v6 isDirectory:0 relativeToURL:v7];
    unsigned int v9 = [(id)v8 URLByStandardizingPath];

    uint64_t v10 = [v9 absoluteString];
    uint64_t v11 = (void *)*((void *)this + 18);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v11);
    uint64_t v12 = [(id)objc_claimAutoreleasedReturnValue() absoluteString];
    LOBYTE(v8) = [v10 hasPrefix:v12];

    if (v8) {
      goto LABEL_10;
    }
    uint64_t v13 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138477827;
      uint64_t v16 = v9;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Resource URL path escape attempt: %{private}@", (uint8_t *)&v15, 0xCu);
    }
  }
  unsigned int v9 = 0;
LABEL_10:

  return v9;
}

void sub_1992D0254(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtension::resourceStringForPath(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  id v9 = a2;
  if ([v9 hasPrefix:@"/"])
  {
    uint64_t v10 = [v9 substringFromIndex:1];

    id v9 = (id)v10;
  }
  uint64_t v11 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v11);

  WebKit::objectForKey<NSString>((id *)&cf, v9, 1);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  if (!v12)
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)a1);
    if (*(unsigned char *)(a1 + 320))
    {
      if ([v9 isEqualToString:@"_generated_service_worker.js"])
      {
LABEL_8:
        WebKit::WebExtension::generatedBackgroundContent((WebKit::WebExtension *)a1);
        id v12 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_18;
      }
    }
    else if ([v9 isEqualToString:@"_generated_background_page.html"])
    {
      goto LABEL_8;
    }
    uint64_t v14 = WebKit::WebExtension::resourceDataForPath(a1, v9, a3, 0, a5);
    if (v14)
    {
      id v18 = 0;
      [NSString stringEncodingForData:v14 encodingOptions:0 convertedString:&v18 usedLossyConversion:0];
      id v12 = v18;
      if (v12 && (a4 & 1) != 0)
      {
        if (!*(void *)(a1 + 160))
        {
          int v15 = [MEMORY[0x1E4F1CA60] dictionary];
          WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 160), v15);
        }
        uint64_t v16 = WTF::RetainPtr<__IOHIDDevice *>::get();
        [v16 setObject:v12 forKey:v9];
      }
    }
    else
    {
      id v12 = 0;
    }
  }
LABEL_18:

  return v12;
}

void sub_1992D04A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSString>(id *a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = WTF::RetainPtr<NSSet>::get(a1);
  id v7 = WebKit::objectForKey<NSString>(v6, (uint64_t)v5, a3);

  return v7;
}

void sub_1992D0588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::generatedBackgroundContent(WebKit::WebExtension *this)
{
  uint64_t v1 = (const void **)((char *)this + 312);
  if (*((void *)this + 39))
  {
    double v2 = WTF::RetainPtr<__IOHIDDevice *>::get();
  }
  else
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
    if (*(_OWORD *)((char *)this + 296) == 0
      && (std::to_address[abi:sn180100]<char const>(),
          id v5 = objc_claimAutoreleasedReturnValue(),
          uint64_t v6 = [v5 count],
          v5,
          v6))
    {
      WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)this);
      int v7 = *((unsigned __int8 *)this + 320);
      BOOL v8 = WebKit::WebExtension::backgroundContentUsesModules((id *)this);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = ___ZN6WebKit12WebExtension26generatedBackgroundContentEv_block_invoke;
      void v15[3] = &__block_descriptor_34_e41___NSString_24__0__NSNumber_8__NSString_16l;
      char v16 = v7;
      BOOL v17 = v8;
      id v9 = v15;
      uint64_t v10 = std::to_address[abi:sn180100]<char const>();
      uint64_t v11 = WebKit::mapObjects<NSArray>(v10, v9);

      if (v7)
      {
        id v12 = [v11 componentsJoinedByString:@"\n"];
        WTF::RetainPtr<NSString>::operator=(v1, v12);
      }
      else
      {
        CFTypeRef v13 = NSString;
        id v12 = [v11 componentsJoinedByString:@"\n"];
        uint64_t v14 = [v13 stringWithFormat:@"<!DOCTYPE html>\n<body>\n%@\n</body>", v12];
        WTF::RetainPtr<NSString>::operator=(v1, v14);
      }
      double v2 = WTF::RetainPtr<__IOHIDDevice *>::get();
    }
    else
    {
      double v2 = 0;
    }
  }

  return v2;
}

void sub_1992D076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSMutableDictionary>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  id v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_1992D0810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSData>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1992D0884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtension::hasRequestedPermission(WebKit::WebExtension *this, NSString *a2)
{
  id v3 = a2;
  MEMORY[0x19972EAD0](&v15, v3);
  uint64_t v6 = *((void *)this + 13);
  int v7 = v15;
  if (v6)
  {
    int v9 = *(_DWORD *)(v6 - 8);
    unsigned int v10 = *((_DWORD *)v15 + 4);
    if (v10 >= 0x100) {
      unsigned int v11 = v10 >> 8;
    }
    else {
      unsigned int v11 = WTF::StringImpl::hashSlowCase(v15);
    }
    for (i = 0; ; unsigned int v11 = i + v13)
    {
      int v13 = v11 & v9;
      uint64_t v14 = *(WTF **)(v6 + 8 * (v11 & v9));
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          uint64_t v6 = 0;
          goto LABEL_17;
        }
        if (WTF::equal(v14, v15, v5)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v6 = 1;
LABEL_17:
    int v7 = v15;
  }
  int v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  return v6;
}

void sub_1992D0974(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<NSMutableArray>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  id v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_1992D0A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::errors(id *this)
{
  WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateActionPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populatePagePropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateWebAccessibleResourcesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateCommandsIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)this);
  WebKit::WebExtension::populateExternallyConnectableIfNeeded((WebKit::WebExtension *)this);
  id v2 = WTF::RetainPtr<NSSet>::get(this + 23);
  id v3 = (void *)[v2 copy];
  uint64_t v4 = v3;
  if (!v3) {
    id v3 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v5 = v3;

  return v5;
}

void sub_1992D0AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateDisplayStringsIfNeeded(WebKit::WebExtension *this)
{
  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    __int16 v2 = *((_WORD *)this + 176);
    if ((v2 & 8) == 0)
    {
      *((_WORD *)this + 176) = v2 | 8;
      id v3 = WebKit::objectForKey<NSString>((id *)this + 19, @"name", 1);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 24, v3);

      uint64_t v4 = WebKit::objectForKey<NSString>((id *)this + 19, @"short_name", 1);
      id v5 = (const void **)((char *)this + 200);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 25, v4);

      if (!*((void *)this + 25))
      {
        WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v15);
        uint64_t v6 = *v5;
        const void *v5 = v15;
        CFTypeRef v15 = 0;
        if (v6) {
          CFRelease(v6);
        }
      }
      if (!*((void *)this + 24))
      {
        WebKit::WebExtension::createError((id *)this, 17, 0, 0);
        int v7 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v7);
      }
      BOOL v8 = WebKit::objectForKey<NSString>((id *)this + 19, @"version", 1);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 28, v8);

      int v9 = WebKit::objectForKey<NSString>((id *)this + 19, @"version_name", 1);
      unsigned int v10 = (const void **)((char *)this + 208);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 26, v9);

      if (!*((void *)this + 26))
      {
        WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v15);
        unsigned int v11 = *v10;
        *unsigned int v10 = v15;
        CFTypeRef v15 = 0;
        if (v11) {
          CFRelease(v11);
        }
      }
      if (!*((void *)this + 28))
      {
        WebKit::WebExtension::createError((id *)this, 20, 0, 0);
        id v12 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v12);
      }
      int v13 = WebKit::objectForKey<NSString>((id *)this + 19, @"description", 1);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 27, v13);

      if (!*((void *)this + 27))
      {
        WebKit::WebExtension::createError((id *)this, 14, 0, 0);
        uint64_t v14 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v14);
      }
    }
  }
}

void sub_1992D0D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateActionPropertiesIfNeeded(WebKit::WebExtension *this)
{
  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    __int16 v2 = *((_WORD *)this + 176);
    if ((v2 & 0x20) == 0)
    {
      *((_WORD *)this + 176) = v2 | 0x20;
      if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
      {
        id v5 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"action", 0, 0);
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v18, v5);
      }
      else
      {
        id v3 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"browser_action", 0, 0);
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v18, v3);
        uint64_t v4 = (const void *)*((void *)this + 30);
        *((void *)this + 30) = v18;
        id v18 = 0;
        if (v4) {
          CFRelease(v4);
        }

        if (*((void *)this + 30))
        {
LABEL_12:
          int v7 = WebKit::objectForKey<NSString>((id *)this + 30, @"default_icon", 1);
          if (!v7)
          {
LABEL_24:

            CFTypeRef v15 = WebKit::objectForKey<NSString>((id *)this + 30, @"default_title", 1);
            WTF::RetainPtr<NSString>::operator=((const void **)this + 33, v15);

            char v16 = WebKit::objectForKey<NSString>((id *)this + 30, @"default_popup", 1);
            WTF::RetainPtr<NSString>::operator=((const void **)this + 34, v16);

            return;
          }
          id v17 = 0;
          BOOL v8 = WebKit::WebExtension::imageForPath(this, v7, &v17, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
          int v9 = (NSError *)v17;
          WTF::RetainPtr<UIImage>::operator=((const void **)this + 32, v8);

          if (*((void *)this + 32))
          {
LABEL_23:

            goto LABEL_24;
          }
          WebKit::WebExtension::recordError((const void **)this, v9);
          if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
          {
            if (v18) {
              goto LABEL_18;
            }
          }
          else
          {
            if (v18)
            {
LABEL_18:
              id v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
              int v13 = v18;
              id v18 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2) {
                  WTF::StringImpl::destroy(v13, v11);
                }
                else {
                  *(_DWORD *)v13 -= 2;
                }
              }
              goto LABEL_22;
            }
          }
          id v12 = &stru_1EEA10550;
LABEL_22:
          WebKit::WebExtension::createError((id *)this, 7, v12, 0);
          uint64_t v14 = (NSError *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((const void **)this, v14);

          goto LABEL_23;
        }
        id v5 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"page_action", 0, 0);
        WTF::RetainPtr<NSDictionary>::RetainPtr(&v18, v5);
      }
      uint64_t v6 = (const void *)*((void *)this + 30);
      *((void *)this + 30) = v18;
      id v18 = 0;
      if (v6) {
        CFRelease(v6);
      }

      if (*((void *)this + 30)) {
        goto LABEL_12;
      }
    }
  }
}

void sub_1992D1064(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(id *this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this)) {
    return;
  }
  __int16 v2 = *((_WORD *)this + 176);
  if ((v2 & 0x40) != 0) {
    return;
  }
  *((_WORD *)this + 176) = v2 | 0x40;
  id v3 = WebKit::objectForKey<NSDictionary>(this + 19, @"background", 1, 0);
  if (![v3 count])
  {
    char v16 = WTF::RetainPtr<NSSet>::get(this + 19);
    id v17 = [v16 objectForKey:@"background"];

    if (v17)
    {
      WebKit::WebExtension::createError(this, 8, 0, 0);
      id v18 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v18);
    }
    goto LABEL_110;
  }
  uint64_t v4 = objc_opt_class();
  id v5 = WebKit::objectForKey<NSArray>(v3, @"scripts", 1, v4);
  uint64_t v6 = (const void **)(this + 36);
  WTF::RetainPtr<NSArray>::operator=((const void **)this + 36, v5);

  int v7 = WebKit::objectForKey<NSString>(v3, @"page", 1);
  uint64_t v77 = (const void **)(this + 37);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 37, v7);

  BOOL v8 = WebKit::objectForKey<NSString>(v3, @"service_worker", 1);
  int v78 = (const void **)(this + 38);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 38, v8);

  int v9 = WebKit::objectForKey<NSString>(v3, @"type", 1);
  if ([v9 isEqualToString:@"module"]) {
    __int16 v10 = 2;
  }
  else {
    __int16 v10 = 0;
  }
  *((_WORD *)this + 176) = (_WORD)this[44] & 0xFFFD | v10;

  id v11 = &__block_literal_global_412;
  id v12 = std::to_address[abi:sn180100]<char const>();
  int v13 = WebKit::filterObjects<NSArray>(v12, &__block_literal_global_412);

  WTF::RetainPtr<NSArray>::operator=((const void **)this + 36, v13);
  if ((_MergedGlobals_26 & 1) == 0)
  {
    qword_1E93CF990 = objc_msgSend(MEMORY[0x1E4F1CAA0], "orderedSetWithObjects:", @"document", @"service_worker", 0);
    _MergedGlobals_26 = 1;
  }
  uint64_t v14 = WebKit::objectForKey<NSString>(v3, @"preferred_environment", 1);
  if (v14)
  {
    if ([(id)qword_1E93CF990 containsObject:v14])
    {
      CFTypeRef v15 = [MEMORY[0x1E4F1CAA0] orderedSetWithObject:v14];
    }
    else
    {
      CFTypeRef v15 = 0;
    }
  }
  else
  {
    uint64_t v19 = objc_opt_class();
    uint64_t v20 = WebKit::objectForKey<NSArray>(v3, @"preferred_environment", 1, v19);
    uint64_t v21 = v20;
    if (v20)
    {
      uint64_t v22 = WebKit::filterObjects<NSArray>(v20, &__block_literal_global_415);
      CFTypeRef v15 = [MEMORY[0x1E4F1CAA0] orderedSetWithArray:v22];
    }
    else
    {
      CFTypeRef v15 = [v3 objectForKeyedSubscript:@"preferred_environment"];

      if (v15)
      {
        if (v83) {
          id v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          id v24 = &stru_1EEA10550;
        }
        WebKit::WebExtension::createError(this, 8, v24, 0);
        uint64_t v25 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v25);

        id v27 = v83;
        int v83 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        CFTypeRef v15 = 0;
      }
    }
  }
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v28 = v15;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v79 objects:v84 count:16];
  if (!v29) {
    goto LABEL_47;
  }
  uint64_t v30 = *(void *)v80;
  while (2)
  {
    for (uint64_t i = 0; i != v29; ++i)
    {
      if (*(void *)v80 != v30) {
        objc_enumerationMutation(v28);
      }
      int v32 = *(void **)(*((void *)&v79 + 1) + 8 * i);
      if ([v32 isEqualToString:@"document"])
      {
        *((unsigned char *)this + 320) = 0;
        id v33 = this[38];
        this[38] = 0;
        if (v33) {
          CFRelease(v33);
        }
        int v34 = *v6;
        if (*v77) {
          goto LABEL_45;
        }
        unint64_t v35 = std::to_address[abi:sn180100]<char const>();
        BOOL v36 = [v35 count] == 0;

        if (!v36) {
          goto LABEL_47;
        }
        if (v83)
        {
LABEL_73:
          uint64_t v57 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          goto LABEL_74;
        }
        uint64_t v57 = &stru_1EEA10550;
LABEL_74:
        WebKit::WebExtension::createError(this, 8, v57, 0);
        uint64_t v58 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v58);

        long long v60 = v83;
        int v83 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2) {
            WTF::StringImpl::destroy(v60, v59);
          }
          else {
            *(_DWORD *)v60 -= 2;
          }
        }
        goto LABEL_47;
      }
      if ([v32 isEqualToString:@"service_worker"])
      {
        *((unsigned char *)this + 320) = 1;
        id v38 = this[37];
        this[37] = 0;
        if (v38) {
          CFRelease(v38);
        }
        int v34 = *v6;
        if (*v78)
        {
LABEL_45:
          const void *v6 = 0;
          if (v34) {
            CFRelease(v34);
          }
          goto LABEL_47;
        }
        uint64_t v54 = std::to_address[abi:sn180100]<char const>();
        BOOL v55 = [v54 count] == 0;

        if (!v55) {
          goto LABEL_47;
        }
        if (v83) {
          goto LABEL_73;
        }
        uint64_t v57 = &stru_1EEA10550;
        goto LABEL_74;
      }
    }
    uint64_t v29 = [v28 countByEnumeratingWithState:&v79 objects:v84 count:16];
    if (v29) {
      continue;
    }
    break;
  }
LABEL_47:

  if (![v28 count])
  {
    if (*v77)
    {
      uint64_t v39 = *v78;
      WTF::StringImpl *v78 = 0;
      if (v39) {
        CFRelease(v39);
      }
    }
    uint64_t v40 = std::to_address[abi:sn180100]<char const>();
    BOOL v41 = [v40 count] == 0;

    if (!v41)
    {
      CFStringRef v42 = *v78;
      WTF::StringImpl *v78 = 0;
      if (v42) {
        CFRelease(v42);
      }
      uint64_t v43 = *v77;
      *uint64_t v77 = 0;
      if (v43) {
        CFRelease(v43);
      }
    }
    *((unsigned char *)this + 320) = this[38] != 0;
    CFStringRef v44 = std::to_address[abi:sn180100]<char const>();
    if ([v44 count] || *v77)
    {
    }
    else
    {
      BOOL v61 = *v78 == 0;

      if (v61)
      {
        id v63 = v83 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
        WebKit::WebExtension::createError(this, 8, v63, 0);
        long long v64 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v64);

        long long v66 = v83;
        int v83 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2) {
            WTF::StringImpl::destroy(v66, v65);
          }
          else {
            *(_DWORD *)v66 -= 2;
          }
        }
      }
    }
  }
  uint64_t v45 = WebKit::objectForKey<NSNumber>(v3, @"persistent");
  uint64_t v46 = v45;
  if (!v45)
  {
    if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0)
    {
      id v50 = this[38];
      __int16 v49 = (_WORD)this[44] & 0xFFFE | (v50 == 0);
      *((_WORD *)this + 176) = v49;
      if (v50) {
        goto LABEL_85;
      }
LABEL_61:
      if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0)
      {
        __int16 v49 = *((_WORD *)this + 176);
        goto LABEL_85;
      }
      if (v83) {
        uint64_t v51 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v51 = &stru_1EEA10550;
      }
      WebKit::WebExtension::createError(this, 9, v51, 0);
      uint64_t v52 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v52);

      long long v53 = v83;
      int v83 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2) {
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v48);
        }
        else {
          *(_DWORD *)v53 -= 2;
        }
      }
    }
    __int16 v49 = (_WORD)this[44] & 0xFFFE;
    *((_WORD *)this + 176) = v49;
    goto LABEL_85;
  }
  int v47 = [v45 BOOLValue];
  __int16 v49 = (_WORD)this[44] & 0xFFFE | v47;
  *((_WORD *)this + 176) = v49;
  if (v47) {
    goto LABEL_61;
  }
LABEL_85:
  if ((v49 & 1) != 0 && *v78)
  {
    if (v83) {
      long long v67 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v67 = &stru_1EEA10550;
    }
    WebKit::WebExtension::createError(this, 9, v67, 0);
    uint64_t v68 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)this, v68);

    uint64_t v69 = v83;
    int v83 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2) {
        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v69 -= 2;
      }
    }
    __int16 v49 = (_WORD)this[44] & 0xFFFE;
    *((_WORD *)this + 176) = v49;
  }
  if ((v49 & 1) == 0
    && WebKit::WebExtension::hasRequestedPermission((WebKit::WebExtension *)this, &cfstr_Webrequest.isa))
  {
    id v70 = v83 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    WebKit::WebExtension::createError(this, 9, v70, 0);
    uint64_t v71 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)this, v71);

    uint64_t v72 = v83;
    int v83 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2) {
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v72 -= 2;
      }
    }
  }
  if ((_WORD)this[44])
  {
    if (v83) {
      uint64_t v73 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v73 = &stru_1EEA10550;
    }
    WebKit::WebExtension::createError(this, 9, v73, 0);
    uint64_t v74 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)this, v74);

    char v76 = v83;
    int v83 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, v75);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
  }

LABEL_110:
}

void sub_1992D1B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, v27);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateContentScriptPropertiesIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)this + 176) & 0x100) == 0)
  {
    *((_WORD *)this + 176) |= 0x100u;
    uint64_t v2 = objc_opt_class();
    id v3 = WebKit::objectForKey<NSArray>((id *)this + 19, @"content_scripts", 1, v2);
    if ([v3 count])
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e22_v16__0__NSDictionary_8l;
      void aBlock[4] = this;
      uint64_t v4 = (void (**)(void *, void))_Block_copy(aBlock);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      id v5 = v3;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v13;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v13 != v7) {
              objc_enumerationMutation(v5);
            }
            v4[2](v4, *(void *)(*((void *)&v12 + 1) + 8 * i));
          }
          uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
        }
        while (v6);
      }
    }
    else
    {
      int v9 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
      __int16 v10 = [v9 objectForKey:@"content_scripts"];

      if (v10)
      {
        WebKit::WebExtension::createError((id *)this, 11, 0, 0);
        id v11 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v11);
      }
    }
  }
}

void sub_1992D2040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this) || (*((_WORD *)this + 176) & 0x200) != 0) {
    return;
  }
  *((_WORD *)this + 176) |= 0x200u;
  double v2 = WebKit::WebExtension::manifestVersion(this);
  uint64_t v3 = objc_opt_class();
  long long v80 = (id *)((char *)this + 152);
  WebKit::objectForKey<NSArray>((id *)this + 19, @"permissions", 1, v3);
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  isSupported = (WTF::StringImpl *)[v4 countByEnumeratingWithState:&v101 objects:v108 count:16];
  uint64_t v6 = isSupported;
  id v81 = v4;
  if (!isSupported) {
    goto LABEL_44;
  }
  uint64_t v7 = *(void *)v102;
  BOOL v8 = (uint64_t *)((char *)this + 88);
  do
  {
    int v9 = 0;
    do
    {
      if (*(void *)v102 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v10 = *(void *)(*((void *)&v101 + 1) + 8 * (void)v9);
      if (v2 < 3.0)
      {
        MEMORY[0x19972EAD0](v98, *(void *)(*((void *)&v101 + 1) + 8 * (void)v9));
        WebKit::WebExtensionMatchPattern::getOrCreate(v98, v11, (uint64_t *)&v100);
        long long v13 = v98[0];
        v98[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        isSupported = v100;
        if (v100)
        {
          isSupported = (WTF::StringImpl *)WebKit::WebExtensionMatchPattern::isSupported(v100);
          if (isSupported)
          {
            uint64_t v99 = v100;
            uint64_t v100 = 0;
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v8, (uint64_t *)&v99, (uint64_t)v98);
            uint64_t v14 = (uint64_t)v99;
            uint64_t v99 = 0;
            if (v14) {
              CFRelease(*(CFTypeRef *)(v14 + 8));
            }
          }
          long long v15 = v100;
          uint64_t v100 = 0;
          if (v15) {
            CFRelease(*((CFTypeRef *)v15 + 1));
          }
          goto LABEL_30;
        }
      }
      WebKit::WebExtension::supportedPermissions(isSupported);
      MEMORY[0x19972EAD0](v98, v10);
      uint64_t v18 = qword_1E93CF998;
      isSupported = v98[0];
      if (qword_1E93CF998)
      {
        int obj = *(_DWORD *)(qword_1E93CF998 - 8);
        unsigned int v21 = *((_DWORD *)v98[0] + 4);
        if (v21 >= 0x100) {
          unsigned int v22 = v21 >> 8;
        }
        else {
          unsigned int v22 = WTF::StringImpl::hashSlowCase(v98[0]);
        }
        for (i = 0; ; unsigned int v22 = i + v24)
        {
          int v24 = v22 & obj;
          uint64_t v25 = *(WTF **)(v18 + 8 * (v22 & obj));
          if (v25 != (WTF *)-1)
          {
            if (!v25)
            {
              LODWORD(v18) = 0;
              goto LABEL_42;
            }
            if (WTF::equal(v25, v98[0], v17)) {
              break;
            }
          }
          ++i;
        }
        LODWORD(v18) = 1;
LABEL_42:
        isSupported = v98[0];
        id v4 = v81;
        BOOL v8 = (uint64_t *)((char *)this + 88);
      }
      v98[0] = 0;
      if (!isSupported) {
        goto LABEL_23;
      }
      if (*(_DWORD *)isSupported != 2)
      {
        *(_DWORD *)isSupported -= 2;
LABEL_23:
        if (!v18) {
          goto LABEL_30;
        }
        goto LABEL_26;
      }
      isSupported = (WTF::StringImpl *)WTF::StringImpl::destroy(isSupported, v16);
      if (!v18) {
        goto LABEL_30;
      }
LABEL_26:
      MEMORY[0x19972EAD0](&v100, v10);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 13, &v100, v19, (uint64_t)v98);
      isSupported = v100;
      uint64_t v100 = 0;
      if (isSupported)
      {
        if (*(_DWORD *)isSupported == 2) {
          isSupported = (WTF::StringImpl *)WTF::StringImpl::destroy(isSupported, v20);
        }
        else {
          *(_DWORD *)isSupported -= 2;
        }
      }
LABEL_30:
      int v9 = (WTF::StringImpl *)((char *)v9 + 1);
    }
    while (v9 != v6);
    isSupported = (WTF::StringImpl *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v101, v108, 16, v80);
    uint64_t v6 = isSupported;
  }
  while (isSupported);
LABEL_44:

  if (v2 >= 3.0)
  {
    uint64_t v26 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v80, @"host_permissions", 1, v26);
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v28 = [v27 countByEnumeratingWithState:&v94 objects:v107 count:16];
    if (v28)
    {
      uint64_t v29 = *(void *)v95;
      do
      {
        for (uint64_t j = 0; j != v28; ++j)
        {
          if (*(void *)v95 != v29) {
            objc_enumerationMutation(v27);
          }
          MEMORY[0x19972EAD0](v98, *(void *)(*((void *)&v94 + 1) + 8 * j));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v31, (uint64_t *)&v100);
          id v33 = v98[0];
          v98[0] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v32);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              uint64_t v99 = v100;
              uint64_t v100 = 0;
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 11, (uint64_t *)&v99, (uint64_t)v98);
              uint64_t v34 = (uint64_t)v99;
              uint64_t v99 = 0;
              if (v34) {
                CFRelease(*(CFTypeRef *)(v34 + 8));
              }
            }
            unint64_t v35 = v100;
            uint64_t v100 = 0;
            if (v35) {
              CFRelease(*((CFTypeRef *)v35 + 1));
            }
          }
        }
        uint64_t v28 = [v27 countByEnumeratingWithState:&v94 objects:v107 count:16];
      }
      while (v28);
    }
  }
  uint64_t v36 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v80, @"optional_permissions", 1, v36);
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id obja = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v37 = [obja countByEnumeratingWithState:&v90 objects:v106 count:16];
  if (v37)
  {
    uint64_t v38 = *(void *)v91;
    do
    {
      uint64_t v39 = 0;
      do
      {
        if (*(void *)v91 != v38) {
          objc_enumerationMutation(obja);
        }
        uint64_t v40 = *(void *)(*((void *)&v90 + 1) + 8 * v39);
        if (v2 < 3.0)
        {
          MEMORY[0x19972EAD0](v98, *(void *)(*((void *)&v90 + 1) + 8 * v39));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v41, (uint64_t *)&v100);
          uint64_t v43 = v98[0];
          v98[0] = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v42);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              v98[0] = v100;
              if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>((uint64_t *)this + 11, v98) & 1) == 0)
              {
                uint64_t v99 = v100;
                uint64_t v100 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 12, (uint64_t *)&v99, (uint64_t)v98);
                uint64_t v44 = (uint64_t)v99;
                uint64_t v99 = 0;
                if (v44) {
                  CFRelease(*(CFTypeRef *)(v44 + 8));
                }
              }
            }
            uint64_t v45 = v100;
            uint64_t v100 = 0;
            if (v45) {
              CFRelease(*((CFTypeRef *)v45 + 1));
            }
            goto LABEL_96;
          }
        }
        uint64_t v46 = (WTF *)MEMORY[0x19972EAD0](v98, v40);
        uint64_t v48 = *((void *)this + 13);
        if (v48)
        {
          int v82 = *(_DWORD *)(v48 - 8);
          unsigned int v57 = *((_DWORD *)v98[0] + 4);
          if (v57 >= 0x100) {
            unsigned int v58 = v57 >> 8;
          }
          else {
            unsigned int v58 = WTF::StringImpl::hashSlowCase(v98[0]);
          }
          for (k = 0; ; unsigned int v58 = k + v62)
          {
            int v62 = v58 & v82;
            uint64_t v46 = *(WTF **)(v48 + 8 * (v58 & v82));
            if (v46 != (WTF *)-1)
            {
              if (!v46) {
                goto LABEL_81;
              }
              if (WTF::equal(v46, v98[0], v47)) {
                break;
              }
            }
            ++k;
          }
          LODWORD(v51) = 0;
        }
        else
        {
LABEL_81:
          WebKit::WebExtension::supportedPermissions(v46);
          MEMORY[0x19972EAD0](&v100, v40);
          uint64_t v51 = qword_1E93CF998;
          uint64_t v52 = v100;
          if (qword_1E93CF998)
          {
            int v83 = *(_DWORD *)(qword_1E93CF998 - 8);
            unsigned int v59 = *((_DWORD *)v100 + 4);
            if (v59 >= 0x100) {
              unsigned int v60 = v59 >> 8;
            }
            else {
              unsigned int v60 = WTF::StringImpl::hashSlowCase(v100);
            }
            for (m = 0; ; unsigned int v60 = m + v64)
            {
              int v64 = v60 & v83;
              long long v65 = *(WTF **)(v51 + 8 * (v60 & v83));
              if (v65 != (WTF *)-1)
              {
                if (!v65)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_117;
                }
                if (WTF::equal(v65, v100, v50)) {
                  break;
                }
              }
              ++m;
            }
            LODWORD(v51) = 1;
LABEL_117:
            uint64_t v52 = v100;
          }
          uint64_t v100 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2) {
              WTF::StringImpl::destroy(v52, v49);
            }
            else {
              *(_DWORD *)v52 -= 2;
            }
          }
        }
        long long v53 = v98[0];
        v98[0] = 0;
        if (!v53) {
          goto LABEL_89;
        }
        if (*(_DWORD *)v53 != 2)
        {
          *(_DWORD *)v53 -= 2;
LABEL_89:
          if (!v51) {
            goto LABEL_96;
          }
          goto LABEL_92;
        }
        WTF::StringImpl::destroy(v53, v49);
        if (!v51) {
          goto LABEL_96;
        }
LABEL_92:
        MEMORY[0x19972EAD0](&v100, v40);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 14, &v100, v54, (uint64_t)v98);
        CFStringRef v56 = v100;
        uint64_t v100 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy(v56, v55);
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
LABEL_96:
        ++v39;
      }
      while (v39 != v37);
      uint64_t v66 = [obja countByEnumeratingWithState:&v90 objects:v106 count:16];
      uint64_t v37 = v66;
    }
    while (v66);
  }

  long long v67 = v81;
  if (v2 >= 3.0)
  {
    uint64_t v68 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v80, @"optional_host_permissions", 1, v68);
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    id v69 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v70 = [v69 countByEnumeratingWithState:&v86 objects:v105 count:16];
    if (v70)
    {
      uint64_t v71 = *(void *)v87;
      uint64_t v72 = (uint64_t *)((char *)this + 88);
      uint64_t v73 = (uint64_t *)((char *)this + 96);
      do
      {
        for (uint64_t n = 0; n != v70; ++n)
        {
          if (*(void *)v87 != v71) {
            objc_enumerationMutation(v69);
          }
          MEMORY[0x19972EAD0](v98, *(void *)(*((void *)&v86 + 1) + 8 * n));
          WebKit::WebExtensionMatchPattern::getOrCreate(v98, v75, (uint64_t *)&v100);
          uint64_t v77 = v98[0];
          v98[0] = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2) {
              WTF::StringImpl::destroy(v77, v76);
            }
            else {
              *(_DWORD *)v77 -= 2;
            }
          }
          if (v100)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v100))
            {
              v98[0] = v100;
              if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>(v72, v98) & 1) == 0)
              {
                uint64_t v99 = v100;
                uint64_t v100 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v73, (uint64_t *)&v99, (uint64_t)v98);
                uint64_t v78 = (uint64_t)v99;
                uint64_t v99 = 0;
                if (v78) {
                  CFRelease(*(CFTypeRef *)(v78 + 8));
                }
              }
            }
            long long v79 = v100;
            uint64_t v100 = 0;
            if (v79) {
              CFRelease(*((CFTypeRef *)v79 + 1));
            }
          }
        }
        uint64_t v70 = [v69 countByEnumeratingWithState:&v86 objects:v105 count:16];
      }
      while (v70);
    }

    long long v67 = v81;
  }
}

void sub_1992D293C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44)
{
  if (a44)
  {
    if (*(_DWORD *)a44 == 2) {
      WTF::StringImpl::destroy(a44, a2);
    }
    else {
      *(_DWORD *)a44 -= 2;
    }
  }
  if (a40)
  {
    if (*(_DWORD *)a40 == 2) {
      WTF::StringImpl::destroy(a40, a2);
    }
    else {
      *(_DWORD *)a40 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populatePagePropertiesIfNeeded(WebKit::WebExtension *this)
{
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this) || (*((_WORD *)this + 176) & 0x400) != 0) {
    return;
  }
  *((_WORD *)this + 176) |= 0x400u;
  double v2 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"options_ui", 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = WebKit::objectForKey<NSString>(v2, @"page", 1);
    WTF::RetainPtr<NSString>::operator=((const void **)this + 42, v4);

    if (!*((void *)this + 42))
    {
LABEL_8:
      WebKit::WebExtension::createError((id *)this, 18, 0, 0);
      BOOL v8 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v8);
    }
  }
  else
  {
    id v5 = WebKit::objectForKey<NSString>((id *)this + 19, @"options_page", 1);
    WTF::RetainPtr<NSString>::operator=((const void **)this + 42, v5);

    if (!*((void *)this + 42))
    {
      uint64_t v6 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
      uint64_t v7 = [v6 objectForKey:@"options_page"];

      if (v7) {
        goto LABEL_8;
      }
    }
  }

  int v9 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"browser_url_overrides", 0, 0);
  if (v9
    || (WebKit::objectForKey<NSDictionary>((id *)this + 19, @"chrome_url_overrides", 0, 0),
        (int v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    if (![v9 count])
    {
      WebKit::WebExtension::createError((id *)this, 19, 0, 0);
      uint64_t v10 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v10);
    }
  }
  id v11 = WebKit::objectForKey<NSString>(v9, @"newtab", 1);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 43, v11);

  if (!*((void *)this + 43))
  {
    long long v12 = [v9 objectForKeyedSubscript:@"newtab"];

    if (v12)
    {
      if (v18) {
        uint64_t v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v14 = &stru_1EEA10550;
      }
      WebKit::WebExtension::createError((id *)this, 19, v14, 0);
      long long v15 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v15);

      id v17 = v18;
      uint64_t v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
  }
}

void sub_1992D2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded(WebKit::WebExtension *this)
{
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this)) {
    return;
  }
  __int16 v2 = *((_WORD *)this + 176);
  if ((v2 & 0x10) != 0) {
    return;
  }
  *((_WORD *)this + 176) = v2 | 0x10;
  if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
  {
    WebKit::objectForKey<NSDictionary>((id *)this + 19, @"content_security_policy", 0, 0);
    uint64_t v7 = (NSError *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = v7;
    if (v7)
    {
      BOOL v8 = WebKit::objectForKey<NSString>(v7, @"extension_pages", 1);
      WTF::RetainPtr<NSString>::operator=((const void **)this + 35, v8);

      if (!*((void *)this + 35))
      {
        if (![(NSError *)v6 count]
          || ([(NSError *)v6 objectForKeyedSubscript:@"extension_pages"],
              int v9 = objc_claimAutoreleasedReturnValue(),
              v9,
              v9))
        {
          WebKit::WebExtension::createError((id *)this, 12, 0, 0);
          uint64_t v10 = (NSError *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((const void **)this, v10);
        }
      }
    }
    goto LABEL_12;
  }
  uint64_t v3 = WebKit::objectForKey<NSString>((id *)this + 19, @"content_security_policy", 1);
  WTF::RetainPtr<NSString>::operator=((const void **)this + 35, v3);

  if (!*((void *)this + 35))
  {
    id v4 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
    id v5 = [v4 objectForKey:@"content_security_policy"];

    if (v5)
    {
      WebKit::WebExtension::createError((id *)this, 12, 0, 0);
      uint64_t v6 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)this, v6);
LABEL_12:
    }
  }
  if (!*((void *)this + 35))
  {
    WTF::RetainPtr<NSString>::operator=((const void **)this + 35, @"script-src 'self'");
  }
}

void sub_1992D3164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtension::populateCommandsIfNeeded(WebKit::WebExtension *this)
{
  id v1 = this;
  v230[2] = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)v1 + 176) & 0x1000) == 0)
  {
    *((_WORD *)v1 + 176) |= 0x1000u;
    uint64_t v2 = objc_opt_class();
    uint64_t v152 = WebKit::objectForKey<NSDictionary>((id *)v1 + 19, @"commands", 0, v2);
    if (!v152)
    {
      uint64_t v3 = WTF::RetainPtr<NSSet>::get((id *)v1 + 19);
      id v4 = [v3 objectForKey:@"commands"];

      if (v4)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_233;
        }
      }
    }
    id v5 = WTF::RetainPtr<NSSet>::get((id *)v1 + 19);
    id v4 = [v5 objectForKey:@"commands"];

    uint64_t v6 = [v152 count];
    objc_opt_class();
    uint64_t v7 = WTF::dynamic_objc_cast<NSDictionary>(v4);
    uint64_t v8 = [v7 count];

    if (v6 == v8)
    {

      long long v172 = 0u;
      long long v173 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      id v9 = v152;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v170 objects:v203 count:16];
      if (!v10)
      {

        id v11 = 0;
        int v12 = 0;
        goto LABEL_230;
      }
      id v11 = 0;
      int v12 = 0;
      int v160 = 0;
      unint64_t v158 = 0;
      uint64_t v163 = *(void *)v171;
      unint64_t v156 = (unsigned int *)((char *)v1 + 56);
      uint64_t v157 = v1;
      id v153 = v9;
      while (1)
      {
        uint64_t v164 = v10;
        for (uint64_t i = 0; i != v164; ++i)
        {
          if (*(void *)v171 != v163) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v170 + 1) + 8 * i);
          if (![v14 length])
          {
            uint64_t v26 = v204;
            if (v12)
            {
              long long v204 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                {
                  WTF::StringImpl::destroy(v11, v25);
                  uint64_t v36 = v204;
                  long long v204 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2) {
                      WTF::StringImpl::destroy(v36, v35);
                    }
                    else {
                      *(_DWORD *)v36 -= 2;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
            int v12 = 1;
            id v11 = v26;
            continue;
          }
          char v16 = WebKit::objectForKey<NSDictionary>(v9, (uint64_t)v14, 1, 0);
          if (![v16 count])
          {
            uint64_t v28 = v204;
            if (v12)
            {
              long long v204 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                {
                  WTF::StringImpl::destroy(v11, v27);
                  uint64_t v38 = v204;
                  long long v204 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2) {
                      WTF::StringImpl::destroy(v38, v37);
                    }
                    else {
                      *(_DWORD *)v38 -= 2;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
            int v12 = 1;
            id v11 = v28;
            goto LABEL_176;
          }
          uint64_t v166 = 0;
          unsigned int v167 = 0;
          int v169 = 0;
          unsigned int v168 = 0;
          MEMORY[0x19972EAD0](&v204, v14);
          uint64_t v19 = v204;
          long long v204 = 0;
          uint64_t v20 = v166;
          uint64_t v166 = v19;
          if (v20)
          {
            int v21 = *(_DWORD *)v20 - 2;
            if (*(_DWORD *)v20 != 2) {
              goto LABEL_19;
            }
            WTF::StringImpl::destroy(v20, v18);
            uint64_t v20 = v204;
            long long v204 = 0;
            if (!v20) {
              goto LABEL_20;
            }
            int v21 = *(_DWORD *)v20 - 2;
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v22);
            }
            else {
LABEL_19:
            }
              *(_DWORD *)uint64_t v20 = v21;
          }
LABEL_20:
          WTF::String::operator=((uint64_t *)&v168, MEMORY[0x1E4F30980]);
          int v169 = 0;
          if (WebKit::WebExtension::manifestVersion(v1) >= 3.0
            && (MEMORY[0x19972E990](v166, "_execute_action", 15) & 1) != 0
            || WebKit::WebExtension::manifestVersion(v1) < 3.0
            && ((MEMORY[0x19972E990](v166, "_execute_browser_action", 23) & 1) != 0
             || MEMORY[0x19972E990](v166, "_execute_page_action", 20)))
          {
            int v23 = v160;
            if ((v160 & 1) == 0) {
              int v23 = 1;
            }
            int v160 = v23;
            int v24 = 1;
          }
          else
          {
            int v24 = 0;
          }
          uint64_t v29 = WebKit::objectForKey<NSString>(v16, @"description", 1);
          if ([v29 length]) {
            char v31 = 1;
          }
          else {
            char v31 = v24;
          }
          if ((v31 & 1) == 0)
          {
            uint64_t v34 = v204;
            if (v12)
            {
              long long v204 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                {
                  WTF::StringImpl::destroy(v11, v33);
                  uint64_t v40 = v204;
                  long long v204 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2) {
                      WTF::StringImpl::destroy(v40, v39);
                    }
                    else {
                      *(_DWORD *)v40 -= 2;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
LABEL_157:
            int v12 = 1;
            id v11 = v34;
            goto LABEL_164;
          }
          if (v24 && ![v29 length])
          {
            WebKit::WebExtension::populateActionPropertiesIfNeeded(v1);
            int v32 = WTF::RetainPtr<__IOHIDDevice *>::get();

            if ([v32 length])
            {
              uint64_t v29 = v32;
            }
            else
            {
              WebKit::WebExtension::populateDisplayStringsIfNeeded(v1);
              uint64_t v41 = WTF::RetainPtr<__IOHIDDevice *>::get();

              uint64_t v29 = (void *)v41;
            }
          }
          MEMORY[0x19972EAD0](&v204, v29);
          uint64_t v43 = v204;
          long long v204 = 0;
          uint64_t v44 = v167;
          unsigned int v167 = v43;
          if (!v44) {
            goto LABEL_67;
          }
          int v45 = *(_DWORD *)v44 - 2;
          if (*(_DWORD *)v44 != 2) {
            goto LABEL_66;
          }
          WTF::StringImpl::destroy(v44, v42);
          uint64_t v44 = v204;
          long long v204 = 0;
          if (v44)
          {
            int v45 = *(_DWORD *)v44 - 2;
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::destroy(v44, v46);
              goto LABEL_67;
            }
LABEL_66:
            *(_DWORD *)uint64_t v44 = v45;
          }
LABEL_67:
          int v47 = WebKit::objectForKey<NSDictionary>(v16, @"suggested_key", 1, 0);
          uint64_t v48 = v47;
          if (!v47) {
            goto LABEL_161;
          }
          uint64_t v159 = v47;
          __int16 v49 = WebKit::objectForKey<NSString>(v47, @"ios", 1);
          id v50 = v49;
          if (v49)
          {
            unint64_t v161 = v49;
          }
          else
          {
            WebKit::objectForKey<NSString>(v48, @"mac", 1);
            unint64_t v161 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
          }
          if ([(__CFString *)v161 length])
          {
            uint64_t v51 = v161;
          }
          else
          {
            uint64_t v52 = WebKit::objectForKey<NSString>(v159, @"default", 1);
            long long v53 = (void *)v52;
            uint64_t v54 = &stru_1EEA10550;
            if (v52) {
              uint64_t v54 = (__CFString *)v52;
            }
            BOOL v55 = v54;

            uint64_t v51 = v55;
          }
          v162 = v51;
          MEMORY[0x19972EAD0](&v165);
          int v169 = 0;
          WTF::String::operator=((uint64_t *)&v168, MEMORY[0x1E4F30980]);
          unsigned int v57 = v165;
          if (!v165) {
            goto LABEL_98;
          }
          if (!*((_DWORD *)v165 + 1))
          {
            int v165 = 0;
            if (*(_DWORD *)v57 == 2) {
              WTF::StringImpl::destroy(v57, v56);
            }
            else {
              *(_DWORD *)v57 -= 2;
            }
            goto LABEL_98;
          }
          if (byte_1E93CF98B) {
            goto LABEL_79;
          }
          int v155 = v12;
          LODWORD(v200[0]) = 0x100000;
          WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)&v204, (uint64_t)"Ctrl", 5, v200);
          LODWORD(v199[0]) = 0x100000;
          WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)&v206, (uint64_t)"Command", 8, v199);
          LODWORD(v198[0]) = 0x80000;
          WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v208, (uint64_t)"Alt", 4, v198);
          LODWORD(v197[0]) = 0x40000;
          WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v209, (uint64_t)"MacCtrl", 8, v197);
          LODWORD(v196[0]) = 0x20000;
          WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>((uint64_t)v210, (uint64_t)"Shift", 6, v196);
          Table = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(0x10u);
          uint64_t v108 = 0;
          v201[0] = Table;
          *((_OWORD *)Table - 1) = xmmword_1994F7180;
          do
          {
            uint64_t v109 = v201[0];
            if (v201[0]
              || (uint64_t v110 = v108,
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)v201),
                  uint64_t v109 = v201[0],
                  uint64_t v108 = v110,
                  v201[0]))
            {
              int v111 = *((_DWORD *)v109 - 2);
            }
            else
            {
              int v111 = 0;
            }
            uint64_t v150 = v108;
            uint64_t v151 = &v204 + 2 * v108;
            unsigned int v112 = *((_DWORD *)*v151 + 4);
            if (v112 >= 0x100) {
              unsigned int v113 = v112 >> 8;
            }
            else {
              unsigned int v113 = WTF::StringImpl::hashSlowCase(*v151);
            }
            char v114 = 0;
            for (int j = 1; ; ++j)
            {
              int v116 = v113 & v111;
              uint64_t v117 = v109;
              long long v118 = (uint64_t *)((char *)v109 + 16 * (v113 & v111));
              long long v119 = (WTF *)*v118;
              if (*v118 == -1)
              {
                char v114 = v118;
                uint64_t v109 = v117;
                goto LABEL_193;
              }
              if (!v119) {
                break;
              }
              uint64_t v109 = v117;
              if (WTF::equal(v119, *v151, v107)) {
                goto LABEL_202;
              }
LABEL_193:
              unsigned int v113 = j + v116;
            }
            if (v114)
            {
              uint64_t *v114 = 0;
              *((_DWORD *)v114 + 2) = 0;
              --*((_DWORD *)v201[0] - 4);
              long long v118 = v114;
            }
            WTF::String::operator=(v118, v151);
            *((_DWORD *)v118 + 2) = *((_DWORD *)v151 + 2);
            long long v121 = v201[0];
            if (v201[0]) {
              int v122 = *((_DWORD *)v201[0] - 3) + 1;
            }
            else {
              int v122 = 1;
            }
            *((_DWORD *)v201[0] - 3) = v122;
            uint64_t v123 = (*((_DWORD *)v121 - 4) + v122);
            unint64_t v124 = *((unsigned int *)v121 - 1);
            if (v124 > 0x400)
            {
              if (v124 <= 2 * v123) {
LABEL_201:
              }
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)v201);
            }
            else if (3 * v124 <= 4 * v123)
            {
              goto LABEL_201;
            }
LABEL_202:
            uint64_t v108 = v150 + 1;
          }
          while (v150 != 4);
          qword_1E93CF9A8 = (uint64_t)v201[0];
          for (uint64_t k = 64; k != -16; k -= 16)
          {
            long long v132 = *(WTF::StringImpl **)((char *)&v204 + k);
            *(WTF::StringImpl **)((char *)&v204 + k) = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2) {
                WTF::StringImpl::destroy(v132, v120);
              }
              else {
                *(_DWORD *)v132 -= 2;
              }
            }
          }
          byte_1E93CF98B = 1;
          int v12 = v155;
          id v9 = v153;
          id v1 = v157;
LABEL_79:
          if ((byte_1E93CF98C & 1) == 0)
          {
            v201[0] = (WTF::StringImpl *)"Comma";
            v201[1] = (WTF::StringImpl *)6;
            v200[0] = ",";
            v200[1] = 2;
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v204, (uint64_t)v201, (uint64_t)v200);
            v199[0] = "Period";
            v199[1] = 7;
            v198[0] = ".";
            v198[1] = 2;
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v206, (uint64_t)v199, (uint64_t)v198);
            v197[0] = "Space";
            v197[1] = 6;
            v196[0] = " ";
            v196[1] = 2;
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(v208, (uint64_t)v197, (uint64_t)v196);
            long long v195 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v209, (uint64_t)"F1", 3, &v195);
            long long v194 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v210, (uint64_t)"F2", 3, &v194);
            long long v193 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v211, (uint64_t)"F3", 3, &v193);
            id v192 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v212, (uint64_t)"F4", 3, &v192);
            id v191 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v213, (uint64_t)"F5", 3, &v191);
            uint64_t v190 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v214, (uint64_t)"F6", 3, &v190);
            uint64_t v189 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v215, (uint64_t)"F7", 3, &v189);
            uint64_t v188 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v216, (uint64_t)"F8", 3, &v188);
            uint64_t v187 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v217, (uint64_t)"F9", 3, &v187);
            uint64_t v186 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v218, (uint64_t)"F10", 4, &v186);
            id v185 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v219, (uint64_t)"F11", 4, &v185);
            id v184 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v220, (uint64_t)"F12", 4, &v184);
            uint64_t v183 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v221, (uint64_t)"Insert", 7, &v183);
            uint64_t v182 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v222, (uint64_t)"Delete", 7, &v182);
            v181 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v223, (uint64_t)"Home", 5, &v181);
            v180 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v224, (uint64_t)"End", 4, &v180);
            uint64_t v179 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v225, (uint64_t)"PageUp", 7, &v179);
            unint64_t v178 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v226, (uint64_t)"PageDown", 9, &v178);
            uint64_t v177 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v227, (uint64_t)"Up", 3, &v177);
            int v176 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v228, (uint64_t)"Down", 5, &v176);
            uint64_t v175 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(&v229, (uint64_t)"Left", 5, &v175);
            uint64_t v174 = @"";
            WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(v230, (uint64_t)"Right", 6, &v174);
            WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(&v202, (uint64_t)&v204, 25);
            uint64_t v126 = v202;
            uint64_t v202 = 0;
            qword_1E93CF9B0 = v126;
            uint64_t v127 = 400;
            do
            {
              uint64_t v128 = (char *)&v204 + v127;
              char v129 = *(WTF::StringImpl **)&v203[v127 + 120];
              *(void *)&v203[v127 + 120] = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2) {
                  WTF::StringImpl::destroy(v129, v125);
                }
                else {
                  *(_DWORD *)v129 -= 2;
                }
              }
              long long v130 = (WTF::StringImpl *)*((void *)v128 - 2);
              *((void *)v128 - 2) = 0;
              if (v130)
              {
                if (*(_DWORD *)v130 == 2) {
                  WTF::StringImpl::destroy(v130, v125);
                }
                else {
                  *(_DWORD *)v130 -= 2;
                }
              }
              v127 -= 16;
            }
            while (v127);

            id v9 = v153;
            id v1 = v157;

            byte_1E93CF98C = 1;
          }
          WTF::String::split();
          uint64_t v59 = HIDWORD(v205);
          if ((HIDWORD(v205) & 0xFFFFFFFE) != 2) {
            goto LABEL_93;
          }
          int v60 = HIDWORD(v205) - 1;
          BOOL v61 = (WTF::StringImpl *)*((void *)v204 + HIDWORD(v205) - 1);
          *((void *)v204 + HIDWORD(v205) - 1) = 0;
          WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)((char *)v204 + 8 * v59 - 8), (WTF::StringImpl *)((char *)v204 + 8 * v59));
          HIDWORD(v205) = v60;
          int v64 = v168;
          unsigned int v168 = v61;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2) {
              WTF::StringImpl::destroy(v64, v62);
            }
            else {
              *(_DWORD *)v64 -= 2;
            }
          }
          if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v168, (uint64_t)v62, v63))
          {
LABEL_93:
            BOOL v66 = 0;
            goto LABEL_94;
          }
          if (v168 && *((_DWORD *)v168 + 1) == 1)
          {
            uint64_t v71 = (unsigned __int8 *)*((void *)v168 + 1);
            if ((*((unsigned char *)v168 + 16) & 4) != 0) {
              int v72 = *v71;
            }
            else {
              int v72 = *(unsigned __int16 *)v71;
            }
            unsigned int v73 = v72 - 48;
            unsigned int v74 = (v72 | 0x20) - 97;
            if (v73 >= 0xA && v74 > 0x19) {
              goto LABEL_93;
            }
            WTF::String::convertToASCIILowercase((uint64_t *)v201, (WTF::String *)&v168);
            uint64_t v77 = v201[0];
            v201[0] = 0;
            uint64_t v78 = v168;
            unsigned int v168 = v77;
            if (v78)
            {
              int v79 = *(_DWORD *)v78 - 2;
              if (*(_DWORD *)v78 != 2) {
                goto LABEL_123;
              }
              WTF::StringImpl::destroy(v78, v58);
              uint64_t v78 = v201[0];
              v201[0] = 0;
              if (v78)
              {
                int v79 = *(_DWORD *)v78 - 2;
                if (*(_DWORD *)v78 == 2) {
                  WTF::StringImpl::destroy(v78, v58);
                }
                else {
LABEL_123:
                }
                  *(_DWORD *)uint64_t v78 = v79;
              }
            }
          }
          else
          {
            uint64_t v80 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&qword_1E93CF9B0, &v168, v65);
            uint64_t v81 = qword_1E93CF9B0;
            if (qword_1E93CF9B0) {
              uint64_t v81 = qword_1E93CF9B0 + 16 * *(unsigned int *)(qword_1E93CF9B0 - 4);
            }
            if (v81 == v80) {
              goto LABEL_93;
            }
            WTF::String::operator=((uint64_t *)&v168, (WTF::StringImpl **)(v80 + 8));
          }
          if (HIDWORD(v205))
          {
            int v82 = (WTF::StringImpl **)v204;
            int v83 = (WTF::StringImpl **)((char *)v204 + 8 * HIDWORD(v205));
            int v154 = v12;
            while ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v82, (uint64_t)v58, v76) & 1) != 0)
            {
              uint64_t v84 = qword_1E93CF9A8;
              if (qword_1E93CF9A8)
              {
                int v85 = *(_DWORD *)(qword_1E93CF9A8 - 8);
                unsigned int v86 = *((_DWORD *)*v82 + 4);
                if (v86 >= 0x100) {
                  unsigned int v87 = v86 >> 8;
                }
                else {
                  unsigned int v87 = WTF::StringImpl::hashSlowCase(*v82);
                }
                for (m = 0; ; unsigned int v87 = m + v90)
                {
                  uint64_t v90 = v87 & v85;
                  long long v91 = *(WTF **)(v84 + 16 * v90);
                  if (v91 != (WTF *)-1)
                  {
                    if (!v91)
                    {
                      int v88 = 0;
                      goto LABEL_143;
                    }
                    if (WTF::equal(v91, *v82, v76)) {
                      break;
                    }
                  }
                  ++m;
                }
                int v88 = *(_DWORD *)(v84 + 16 * v90 + 8);
LABEL_143:
                int v12 = v154;
                id v9 = v153;
              }
              else
              {
                int v88 = 0;
              }
              int v92 = v169 | v88;
              int v169 = v92;
              ++v82;
              id v1 = v157;
              if (v82 == v83) {
                goto LABEL_153;
              }
            }
            BOOL v66 = 0;
            id v1 = v157;
          }
          else
          {
            int v92 = v169;
LABEL_153:
            BOOL v66 = v92 != 0;
          }
LABEL_94:
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v204, v58);
          long long v67 = v165;
          int v165 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 != 2)
            {
              *(_DWORD *)v67 -= 2;
              goto LABEL_97;
            }
            WTF::StringImpl::destroy(v67, v56);
            if (!v66)
            {
LABEL_107:
              uint64_t v34 = v204;
              if (v12)
              {
                long long v204 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                  {
                    WTF::StringImpl::destroy(v11, v70);
                    long long v94 = v204;
                    long long v204 = 0;
                    if (v94)
                    {
                      if (*(_DWORD *)v94 == 2) {
                        WTF::StringImpl::destroy(v94, v93);
                      }
                      else {
                        *(_DWORD *)v94 -= 2;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)v11 -= 2;
                  }
                }
              }

              goto LABEL_157;
            }
          }
          else
          {
LABEL_97:
            if (!v66) {
              goto LABEL_107;
            }
          }
LABEL_98:
          if (v168 && *((_DWORD *)v168 + 1) && (++v158, v158 >= 5))
          {
            id v69 = v204;
            if (v12)
            {
              long long v204 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                {
                  WTF::StringImpl::destroy(v11, v68);
                  long long v96 = v204;
                  long long v204 = 0;
                  if (v96)
                  {
                    if (*(_DWORD *)v96 == 2) {
                      WTF::StringImpl::destroy(v96, v95);
                    }
                    else {
                      *(_DWORD *)v96 -= 2;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
            int v12 = 1;
            WTF::String::operator=((uint64_t *)&v168, MEMORY[0x1E4F30980]);
            int v169 = 0;
          }
          else
          {
            id v69 = v11;
          }

          id v11 = v69;
          uint64_t v48 = v159;
LABEL_161:

          uint64_t v97 = *((unsigned int *)v1 + 17);
          if (v97 == *((_DWORD *)v1 + 16))
          {
            WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>(v156, (unint64_t)&v166);
          }
          else
          {
            uint64_t v98 = *((void *)v1 + 7) + 32 * v97;
            uint64_t v99 = v166;
            uint64_t v166 = 0;
            *(void *)uint64_t v98 = v99;
            uint64_t v100 = v167;
            unsigned int v167 = 0;
            *(void *)(v98 + 8) = v100;
            long long v101 = v168;
            unsigned int v168 = 0;
            *(void *)(v98 + 16) = v101;
            *(_DWORD *)(v98 + 24) = v169;
            ++*((_DWORD *)v1 + 17);
          }
LABEL_164:

          long long v103 = v168;
          unsigned int v168 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2) {
              WTF::StringImpl::destroy(v103, v102);
            }
            else {
              *(_DWORD *)v103 -= 2;
            }
          }
          long long v104 = v167;
          unsigned int v167 = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2) {
              WTF::StringImpl::destroy(v104, v102);
            }
            else {
              *(_DWORD *)v104 -= 2;
            }
          }
          uint64_t v105 = v166;
          uint64_t v166 = 0;
          if (v105)
          {
            if (*(_DWORD *)v105 == 2) {
              WTF::StringImpl::destroy(v105, v102);
            }
            else {
              *(_DWORD *)v105 -= 2;
            }
          }
LABEL_176:
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v170 objects:v203 count:16];
        if (!v10)
        {

          if (v160) {
            goto LABEL_257;
          }
LABEL_230:
          if ((WebKit::WebExtension::hasAction((id *)v1)
             || WebKit::WebExtension::hasBrowserAction((id *)v1)
             || WebKit::WebExtension::hasPageAction((id *)v1))
            && (WTF::StringImpl::createWithoutCopyingNonEmpty(), (v135 = v204) != 0))
          {
            if (*((_DWORD *)v204 + 1))
            {
              *(_DWORD *)v204 += 2;
              long long v204 = v135;
              WebKit::WebExtension::populateActionPropertiesIfNeeded(v1);
              v136 = WTF::RetainPtr<__IOHIDDevice *>::get();
              MEMORY[0x19972EAD0](&v205, v136);
              char v138 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
              if (*MEMORY[0x1E4F30980]) {
                *(_DWORD *)v138 += 2;
              }
              __int16 v206 = v138;
              int v207 = 0;
              uint64_t v139 = *((unsigned int *)v1 + 17);
              if (v139 == *((_DWORD *)v1 + 16))
              {
                WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>((unsigned int *)v1 + 14, (unint64_t)&v204);
              }
              else
              {
                uint64_t v140 = *((void *)v1 + 7) + 32 * v139;
                long long v141 = v204;
                long long v204 = 0;
                *(void *)uint64_t v140 = v141;
                long long v142 = v205;
                __int16 v205 = 0;
                *(void *)(v140 + 8) = v142;
                long long v143 = v206;
                __int16 v206 = 0;
                *(void *)(v140 + 16) = v143;
                *(_DWORD *)(v140 + 24) = 0;
                ++*((_DWORD *)v1 + 17);
              }
              long long v144 = v206;
              __int16 v206 = 0;
              if (v144)
              {
                if (*(_DWORD *)v144 == 2) {
                  WTF::StringImpl::destroy(v144, v137);
                }
                else {
                  *(_DWORD *)v144 -= 2;
                }
              }
              v145 = v205;
              __int16 v205 = 0;
              if (v145)
              {
                if (*(_DWORD *)v145 == 2) {
                  WTF::StringImpl::destroy(v145, v137);
                }
                else {
                  *(_DWORD *)v145 -= 2;
                }
              }
              uint64_t v146 = v204;
              long long v204 = 0;
              if (v146)
              {
                if (*(_DWORD *)v146 == 2) {
                  WTF::StringImpl::destroy(v146, v137);
                }
                else {
                  *(_DWORD *)v146 -= 2;
                }
              }
            }
            if (*(_DWORD *)v135 != 2)
            {
              *(_DWORD *)v135 -= 2;
              goto LABEL_257;
            }
            WTF::StringImpl::destroy(v135, v134);
            if (!v12)
            {
LABEL_265:

              return;
            }
          }
          else
          {
LABEL_257:
            if (!v12) {
              goto LABEL_265;
            }
          }
          if (v11) {
            uint64_t v147 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v147 = &stru_1EEA10550;
          }
          WebKit::WebExtension::createError((id *)v1, 10, v147, 0);
          unint64_t v148 = (NSError *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((const void **)v1, v148);

          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v149);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          goto LABEL_265;
        }
      }
    }
LABEL_233:
    WebKit::WebExtension::createError((id *)v1, 10, 0, 0);
    long long v133 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)v1, v133);

    goto LABEL_265;
  }
}