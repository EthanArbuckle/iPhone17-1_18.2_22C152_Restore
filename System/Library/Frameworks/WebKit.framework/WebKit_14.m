void _ZNSt3__114__partial_sortB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_S12_EET1_S13_S13_T2_SZ_(long long *a1, long long *a2, long long *a3)
{
  uint64_t v3;
  uint64_t v4;
  long long *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  long long *v12;
  long long *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  long long *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  long long v35;
  uint64_t v36;
  CFTypeRef cf;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  long long v43;
  uint64_t v44;
  CFTypeRef v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned char v51[97];
  uint64_t v52;

  if (a1 != a2)
  {
    *(void *)&v51[89] = v3;
    v52 = v4;
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 592;
    if ((char *)a2 - (char *)a1 >= 593)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[37 * v10];
      do
      {
        _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_((uint64_t)a1, v9, v12);
        v12 -= 37;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        if (*(void *)v13 < *(void *)a1)
        {
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v13, a1);
          _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_((uint64_t)a1, v9, a1);
        }
        v13 += 37;
      }
      while (v13 != a3);
    }
    if (v8 >= 593)
    {
      v14 = v8 / 0x250uLL;
      do
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v35, a1);
        v15 = 0;
        v16 = (uint64_t)a1;
        do
        {
          v17 = v16 + 592 * v15 + 592;
          v18 = (2 * v15) | 1;
          v19 = 2 * v15 + 2;
          if (v19 < v14 && *(void *)v17 < *(void *)(v17 + 592))
          {
            v17 += 592;
            v18 = v19;
          }
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v16, (long long *)v17);
          v16 = v17;
          v15 = v18;
        }
        while (v18 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
        v6 -= 37;
        if ((long long *)v17 == v6)
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, &v35);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, v6);
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v6, &v35);
          v21 = v17 - (void)a1 + 592;
          if (v21 >= 593)
          {
            v22 = (v21 / 0x250uLL - 2) >> 1;
            v23 = &a1[37 * v22];
            if (*(void *)v23 < *(void *)v17)
            {
              WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v43, (long long *)v17);
              do
              {
                v24 = (uint64_t)v23;
                WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, v23);
                if (!v22) {
                  break;
                }
                v22 = (v22 - 1) >> 1;
                v23 = &a1[37 * v22];
                v17 = v24;
              }
              while (*(void *)v23 < (unint64_t)v43);
              WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v24, &v43);
              if (v50 != -1) {
                ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v50])(v51, &v49);
              }
              v50 = -1;
              WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v48, v25);
              v27 = v47;
              v47 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, v26);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
              v28 = v46;
              v46 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2) {
                  WTF::StringImpl::destroy(v28, v26);
                }
                else {
                  *(_DWORD *)v28 -= 2;
                }
              }
              v29 = v45;
              v45 = 0;
              if (v29) {
                CFRelease(v29);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v44);
            }
          }
        }
        if (v42 != -1) {
          ((void (*)(long long *, uint64_t *))off_1EE9CBD60[v42])(&v43, &v41);
        }
        v42 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v40, v20);
        v31 = v39;
        v39 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v30);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        v32 = v38;
        v38 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v30);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        v33 = cf;
        cf = 0;
        if (v33) {
          CFRelease(v33);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v36);
      }
      while (v14-- > 2);
    }
  }
}

void _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(long long *a1, long long *a2, long long *a3)
{
  v5 = a1;
  unint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)a3;
  if (*(void *)a2 >= *(void *)a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a2, a3);
    if (*(void *)a2 >= *(void *)v5) {
      return;
    }
    a1 = v5;
    v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, a2);
      if (*(void *)a3 >= *(void *)a2) {
        return;
      }
      a1 = a2;
    }
    v8 = a3;
  }

  std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v8);
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(long long *a1, long long *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x14C1BACF914C1BADLL * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 37;
      if (*((void *)a2 - 74) < *(void *)a1)
      {
        unint64_t v7 = a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a1 + 37, a2 - 37);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a2 - 37);
      return 1;
    case 5:
      v20 = a1 + 74;
      v21 = a2 - 37;
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a1 + 111);
      if (*(void *)v21 < *((void *)a1 + 222))
      {
        std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 111, v21);
        if (*((void *)a1 + 222) < *v20)
        {
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 74, a1 + 111);
          if (*v20 < *((void *)a1 + 74))
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 37, a1 + 74);
            if (*((void *)a1 + 74) < *(void *)a1)
            {
              unint64_t v7 = a1;
              unint64_t v6 = a1 + 37;
LABEL_4:
              std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 74;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a1 + 37, a1 + 74);
      v9 = a1 + 111;
      if (a1 + 111 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v9 < *(void *)v8)
    {
      WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v22, v9);
      uint64_t v12 = v10;
      while (1)
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1 + v12 + 1776, (long long *)((char *)a1 + v12 + 1184));
        if (v12 == -1184) {
          break;
        }
        unint64_t v13 = *(void *)((char *)a1 + v12 + 592);
        v12 -= 592;
        if ((unint64_t)v22 >= v13)
        {
          uint64_t v14 = (uint64_t)a1 + v12 + 1776;
          goto LABEL_14;
        }
      }
      uint64_t v14 = (uint64_t)a1;
LABEL_14:
      WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v14, &v22);
      if (v29 != -1) {
        ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v29])(v30, &v28);
      }
      int v29 = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v15);
      v17 = v26;
      v26 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      CFTypeRef v19 = cf;
      CFTypeRef cf = 0;
      if (v19) {
        CFRelease(v19);
      }
      ++v11;
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
      if (v11 == 8) {
        return v9 + 37 == a2;
      }
    }
    v8 = v9;
    v10 += 592;
    v9 += 37;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(long long *a1, long long *a2)
{
  WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v9, a1);
  WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, a2);
  WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a2, &v9);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CBD60[v16])(&v17, &v15);
  }
  int v16 = -1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v14, v4);
  unint64_t v6 = v13;
  unint64_t v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  CFTypeRef v8 = cf;
  CFTypeRef cf = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
}

uint64_t WebCore::DOMCacheEngine::CrossThreadRecord::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 24, (uint64_t)a2 + 24);
  WTF::String::operator=((uint64_t *)(a1 + 176), (uint64_t *)a2 + 22);
  WTF::String::operator=((uint64_t *)(a1 + 184), (uint64_t *)a2 + 23);
  uint64_t v5 = *((void *)a2 + 24);
  *((void *)a2 + 24) = 0;
  unint64_t v6 = *(WTF::RefCountedBase **)(a1 + 192);
  *(void *)(a1 + 192) = v5;
  if (v6) {
    WTF::RefCounted<WebCore::FormData>::deref(v6);
  }
  uint64_t v7 = *((void *)a2 + 25);
  *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
  *(void *)(a1 + 200) = v7;
  uint64_t v8 = *((void *)a2 + 27);
  *((void *)a2 + 27) = 0;
  long long v9 = *(const void **)(a1 + 216);
  *(void *)(a1 + 216) = v8;
  if (v9) {
    CFRelease(v9);
  }
  int v10 = *((_DWORD *)a2 + 56);
  *(_DWORD *)(a1 + 227) = *(_DWORD *)((char *)a2 + 227);
  *(_DWORD *)(a1 + 224) = v10;
  WTF::String::operator=((uint64_t *)(a1 + 232), (uint64_t *)a2 + 29);
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  WTF::String::operator=((uint64_t *)(a1 + 272), (uint64_t *)a2 + 34);
  *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
  WebCore::ResourceResponseData::operator=(a1 + 288, (uint64_t)(a2 + 18));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 568, (uint64_t)a2 + 568);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  return a1;
}

void _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(long long *a1, long long *a2, long long *a3, long long *a4)
{
  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a2, a3);
  if (*(void *)a4 < *(void *)a3)
  {
    std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a3, a4);
    if (*(void *)a3 < *(void *)a2)
    {
      std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a2, a3);
      if (*(void *)a2 < *(void *)a1)
      {
        std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, a2);
      }
    }
  }
}

void _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v5 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)&v30[81] = v3;
    uint64_t v31 = v4;
    uint64_t v6 = (uint64_t)a3;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= 0x14C1BACF914C1BADLL * (((uint64_t)a3 - a1) >> 4))
    {
      uint64_t v10 = (0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4)) | 1;
      uint64_t v11 = a1 + 592 * v10;
      if (0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4) + 2 >= a2)
      {
        unint64_t v12 = *(void *)v11;
      }
      else
      {
        unint64_t v12 = *(void *)v11;
        unint64_t v13 = *(void *)(v11 + 592);
        if (*(void *)v11 <= v13) {
          unint64_t v12 = *(void *)(v11 + 592);
        }
        if (*(void *)v11 < v13)
        {
          v11 += 592;
          uint64_t v10 = 0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4) + 2;
        }
      }
      if (v12 >= *(void *)a3)
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v22, a3);
        do
        {
          uint64_t v14 = v11;
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v6, (long long *)v11);
          if (v8 < v10) {
            break;
          }
          uint64_t v11 = a1 + 592 * ((2 * v10) | 1);
          if (2 * v10 + 2 >= a2)
          {
            unint64_t v15 = *(void *)v11;
            uint64_t v10 = (2 * v10) | 1;
          }
          else
          {
            unint64_t v15 = *(void *)v11;
            unint64_t v16 = *(void *)(v11 + 592);
            if (*(void *)v11 <= v16) {
              unint64_t v15 = *(void *)(v11 + 592);
            }
            if (*(void *)v11 >= v16)
            {
              uint64_t v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 592;
              uint64_t v10 = 2 * v10 + 2;
            }
          }
          uint64_t v6 = v14;
        }
        while (v15 >= (unint64_t)v22);
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v14, &v22);
        if (v29 != -1) {
          ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v29])(v30, &v28);
        }
        int v29 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v17);
        CFTypeRef v19 = v26;
        v26 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        v20 = v25;
        v25 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v18);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        CFTypeRef v21 = cf;
        CFTypeRef cf = 0;
        if (v21) {
          CFRelease(v21);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
      }
    }
  }
}

void WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = a3 + (char *)a2 - (char *)a1;
      do
      {
        uint64_t v8 = (WebKit::CacheStorageRecordInformation *)&a2[v5 - 20];
        uint64_t v7 = *(void *)v8;
        unint64_t v9 = v6 + v5 * 8;
        *(void *)uint64_t v8 = 0;
        *(void *)(v9 - 160) = v7;
        uint64_t v10 = a2[v5 - 19];
        *((void *)v8 + 1) = 0;
        *(void *)(v9 - 152) = v10;
        uint64_t v11 = a2[v5 - 18];
        *((void *)v8 + 2) = 0;
        *(void *)(v9 - 144) = v11;
        uint64_t v12 = a2[v5 - 17];
        *((void *)v8 + 3) = 0;
        *(void *)(v9 - 136) = v12;
        long long v13 = *(_OWORD *)&a2[v5 - 16];
        long long v14 = *(_OWORD *)&a2[v5 - 14];
        *(void *)(v9 - 96) = a2[v5 - 12];
        *(_OWORD *)(v9 - 128) = v13;
        *(_OWORD *)(v9 - 112) = v14;
        long long v15 = *(_OWORD *)&a2[v5 - 11];
        *(_OWORD *)(v9 - 72) = *(_OWORD *)&a2[v5 - 9];
        *(_OWORD *)(v9 - 88) = v15;
        WTF::URL::URL(v6 + v5 * 8 - 56, &a2[v5 - 7]);
        *(unsigned char *)(v9 - 16) = a2[v5 - 2];
        *(void *)(v9 - 8) = 0;
        uint64_t v16 = a2[v5 - 1];
        a2[v5 - 1] = 0;
        *(void *)(v9 - 8) = v16;
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v8, v17);
        v5 -= 20;
      }
      while (&a2[v5] != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(a1, a2, a3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC050;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC050;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::call(void *a1, char a2)
{
  if (a2)
  {
    v5[0] = a1[1];
    uint64_t v2 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    v5[1] = v2;
    int v6 = 0;
  }
  else
  {
    LOBYTE(v5[0]) = 2;
    int v6 = 1;
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9CBD88[v6])(&v7, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::CacheStorageRecord **)a1;
    uint64_t v5 = 736 * v3;
    do
    {
      WebKit::CacheStorageRecord::~CacheStorageRecord(v4, a2);
      uint64_t v4 = (WebKit::CacheStorageRecord *)(v6 + 736);
      v5 -= 736;
    }
    while (v5);
  }
  char v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC078;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC078;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = (unsigned int *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !*(void *)(v3 + 8))
  {
LABEL_25:
    uint8_t v30 = 4;
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    int v29 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v29, OS_LOG_TYPE_ERROR, "CacheStorageCache::putRecords failed because the amount of space requested is invalid", buf, 2u);
    }
    goto LABEL_25;
  }
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unsigned int v5 = *(_DWORD *)(a1 + 36);
    if (v5)
    {
      uint64_t v6 = 736 * v5;
      char v7 = (WebCore::ResourceRequestBase *)(*(void *)(a1 + 24) + 168);
      do
      {
        if ((*(unsigned char *)(*((void *)v7 - 8) + 16) & 0x10) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C851B0);
        }
        uint64_t ExistingRecord = WebKit::CacheStorageCache::findExistingRecord(v4, v7, 0, 0);
        if (ExistingRecord)
        {
          uint64_t v9 = ExistingRecord;
          *((void *)v7 - 11) = *(void *)(ExistingRecord + 80);
          unsigned int v10 = HIDWORD(v37);
          if (HIDWORD(v37) == v37)
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v36, ExistingRecord);
          }
          else
          {
            uint64_t v11 = v36;
            uint64_t v12 = WebKit::NetworkCache::Key::Key(v36 + 160 * HIDWORD(v37), ExistingRecord);
            long long v13 = *(_OWORD *)(v9 + 72);
            *(_OWORD *)(v12 + 88) = *(_OWORD *)(v9 + 88);
            *(_OWORD *)(v12 + 72) = v13;
            long long v14 = *(_DWORD **)(v9 + 104);
            if (v14) {
              *v14 += 2;
            }
            uint64_t v15 = v11 + 160 * v10;
            *(void *)(v15 + 104) = v14;
            long long v16 = *(_OWORD *)(v9 + 128);
            *(_OWORD *)(v15 + 112) = *(_OWORD *)(v9 + 112);
            *(_OWORD *)(v15 + 128) = v16;
            *(unsigned char *)(v15 + 144) = *(unsigned char *)(v9 + 144);
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v15 + 152), (void **)(v9 + 152));
            HIDWORD(v37) = v10 + 1;
          }
        }
        char v7 = (WebCore::ResourceRequestBase *)((char *)v7 + 736);
        v6 -= 736;
      }
      while (v6);
    }
    *(void *)buf = v4;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v4, v4);
    char v17 = *(atomic_uint **)v4;
    uint64_t v18 = v4;
    if (*(void *)v4)
    {
      atomic_fetch_add(v17, 1u);
      uint64_t v18 = *(void *)buf;
    }
    uint64_t v19 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    uint64_t v20 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    uint64_t v21 = *(void *)(v4 + 80);
    uint64_t v22 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x30);
    *uint64_t v23 = &unk_1EE9CC0A0;
    v23[1] = v18;
    v23[2] = v17;
    v23[3] = v19;
    v34 = 0;
    v35[0] = 0;
    v35[1] = 0;
    v23[4] = v22;
    v23[5] = v20;
    v32 = v23;
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v21 + 24))(v21, &v36, &v32);
    v25 = v32;
    v32 = 0;
    if (v25) {
      (*(void (**)(void *))(*v25 + 8))(v25);
    }
    v35[2] = 0;
    WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v24);
    uint64_t v27 = (unsigned int *)v34;
    v34 = 0;
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v26);
      }
    }
    return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, (WTF::StringImpl *)v26);
  }
  uint8_t v30 = 3;
LABEL_26:
  buf[0] = v30;
  LODWORD(v35[0]) = 1;
  uint64_t v31 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v31 + 16))(v31, buf);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
  if (LODWORD(v35[0]) != -1) {
    return ((uint64_t (*)(uint64_t *, uint8_t *))off_1EE9CBD88[LODWORD(v35[0])])(&v36, buf);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC0A0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  unsigned int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC0A0;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  unsigned int v5 = (unsigned int *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2 = a1;
  uint64_t v92 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v93 = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || !*(void *)(v4 + 8))
  {
    LOBYTE(v94[0]) = 4;
    int v95 = 1;
    uint64_t v64 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v64 + 16))(v64, v94);
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
    if (v95 != -1) {
      ((void (*)(WTF **, WTF::StringImpl **))off_1EE9CBD88[v95])(&v97, v94);
    }
    goto LABEL_98;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = a1 + 24;
  unint64_t v6 = *(void *)(a1 + 24);
  v97 = 0;
  uint64_t v98 = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v85 = v5;
  if (!v8)
  {
    unint64_t v90 = 0;
    unint64_t v86 = 0;
    int v67 = 0;
    unint64_t v66 = v6;
    v69 = (uint64_t *)v6;
    goto LABEL_86;
  }
  uint64_t v83 = a1 + 24;
  unint64_t v9 = 0;
  unint64_t v10 = v6 + 736 * v8;
  v91 = (uint64_t *)(v5 + 72);
  unint64_t v86 = 0;
  unint64_t v87 = v10;
  do
  {
    uint64_t v12 = (uint64_t *)(v6 + 80);
    uint64_t v11 = *(void *)(v6 + 80);
    if (v11)
    {
      if (HIDWORD(v93))
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v92;
        while (!*(unsigned char *)(v92 + v13 + 736) || *(void *)(v92 + v13 + 80) != v11)
        {
          ++v14;
          v13 += 752;
          if (752 * HIDWORD(v93) == v13) {
            goto LABEL_11;
          }
        }
        if (v14 >= HIDWORD(v93))
        {
          __break(0xC471u);
LABEL_100:
          __break(1u);
          return;
        }
        uint64_t ExistingRecord = WebKit::CacheStorageCache::findExistingRecord(v85, (WebCore::ResourceRequestBase *)(v6 + 168), v11, 1);
        if (ExistingRecord)
        {
          uint64_t v31 = ExistingRecord;
          WebKit::NetworkCache::Key::operator=(v6, ExistingRecord);
          *(void *)(v6 + 72) = *(void *)(v31 + 72);
          WTF::URL::isolatedCopy();
          WTF::URL::operator=(v6 + 104, (uint64_t)v94);
          v33 = v94[0];
          v94[0] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v32);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v50 = v15 + v13;
          if (*(unsigned char *)(v15 + v13 + 736))
          {
            uint64_t v51 = v15 + v13;
            *(unsigned char *)(v6 + 160) = *(unsigned char *)(v15 + v13 + 160);
            WebCore::ResourceRequestBase::RequestData::operator=(v6 + 168, v15 + v13 + 168);
            WTF::String::operator=((uint64_t *)(v6 + 320), (uint64_t *)(v15 + v13 + 320));
            WTF::String::operator=((uint64_t *)(v6 + 328), (uint64_t *)(v15 + v13 + 328));
            uint64_t v52 = *(void *)(v15 + v13 + 336);
            *(void *)(v15 + v13 + 336) = 0;
            v53 = *(WTF::RefCountedBase **)(v6 + 336);
            *(void *)(v6 + 336) = v52;
            if (v53) {
              WTF::RefCounted<WebCore::FormData>::deref(v53);
            }
            uint64_t v54 = *(void *)(v51 + 344);
            *(unsigned char *)(v6 + 352) = *(unsigned char *)(v51 + 352);
            *(void *)(v6 + 344) = v54;
            uint64_t v55 = *(void *)(v51 + 360);
            *(void *)(v51 + 360) = 0;
            v56 = *(const void **)(v6 + 360);
            *(void *)(v6 + 360) = v55;
            if (v56) {
              CFRelease(v56);
            }
            if (*(unsigned char *)(v50 + 736))
            {
              int v57 = *(_DWORD *)(v15 + v13 + 368);
              *(_DWORD *)(v6 + 371) = *(_DWORD *)(v15 + v13 + 371);
              *(_DWORD *)(v6 + 368) = v57;
              WTF::String::operator=((uint64_t *)(v6 + 376), (uint64_t *)(v15 + v13 + 376));
              long long v58 = *(_OWORD *)(v15 + v13 + 400);
              *(_OWORD *)(v6 + 384) = *(_OWORD *)(v15 + v13 + 384);
              *(_OWORD *)(v6 + 400) = v58;
              if (*(unsigned char *)(v50 + 736))
              {
                WTF::String::operator=((uint64_t *)(v6 + 416), (uint64_t *)(v15 + v13 + 416));
                WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v6, (const WebCore::ResourceRequest *)(v6 + 168), (const WebCore::ResourceResponseData *)(v6 + 432));
                uint64_t v49 = *(void *)(v6 + 96);
                unint64_t v10 = v87;
                v86 += *(void *)(v31 + 96);
                *(void *)(v31 + 96) = v49;
                goto LABEL_64;
              }
            }
          }
          goto LABEL_100;
        }
      }
LABEL_11:
      *uint64_t v12 = 0;
      goto LABEL_68;
    }
    *(void *)(v6 + 80) = atomic_fetch_add(&WebKit::nextRecordIdentifier(void)::currentRecordIdentifier, 1uLL) + 1;
    uint64_t v16 = *(void *)(v6 + 96);
    WebKit::computeKeyURL((WebKit *)&v96, (const WTF::URL *)(v6 + 104));
    uint64_t v19 = *v91;
    if (*v91
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v91, 0), (uint64_t v19 = *v91) != 0))
    {
      int v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      int v20 = 0;
    }
    uint64_t v21 = v96;
    unsigned int v22 = *((_DWORD *)v96 + 4);
    uint64_t v88 = v16;
    unint64_t v89 = v9;
    if (v22 >= 0x100) {
      unsigned int v23 = v22 >> 8;
    }
    else {
      unsigned int v23 = WTF::StringImpl::hashSlowCase(v96);
    }
    v24 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v26 = v23 & v20;
      uint64_t v27 = v19 + 24 * (v23 & v20);
      uint64_t v28 = *(WTF **)v27;
      if (*(void *)v27 == -1)
      {
        v24 = (void *)(v19 + 24 * v26);
        goto LABEL_24;
      }
      if (!v28) {
        break;
      }
      if (WTF::equal(v28, v21, v18)) {
        goto LABEL_46;
      }
LABEL_24:
      unsigned int v23 = i + v26;
    }
    if (v24)
    {
      void *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*v91 - 16);
      uint64_t v27 = (uint64_t)v24;
    }
    v96 = 0;
    int v29 = *(WTF::StringImpl **)v27;
    *(void *)uint64_t v27 = v21;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v17);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    v94[0] = 0;
    v94[1] = 0;
    WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v27 + 8, (WTF::StringImpl *)v94);
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v94, v34);
    uint64_t v35 = *v91;
    if (*v91) {
      int v36 = *(_DWORD *)(v35 - 12) + 1;
    }
    else {
      int v36 = 1;
    }
    *(_DWORD *)(v35 - 12) = v36;
    uint64_t v37 = *v91;
    if (*v91) {
      int v38 = *(_DWORD *)(v37 - 12);
    }
    else {
      int v38 = 0;
    }
    uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
    unint64_t v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 <= 2 * v39) {
LABEL_45:
      }
        uint64_t v27 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v91, (WTF::StringImpl **)v27);
    }
    else if (3 * v40 <= 4 * v39)
    {
      goto LABEL_45;
    }
LABEL_46:
    v41 = (uint64_t *)(v27 + 8);
    unsigned int v42 = *(_DWORD *)(v27 + 20);
    if (v42 == *(_DWORD *)(v27 + 16))
    {
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)v41, v6);
      unint64_t v9 = v89;
    }
    else
    {
      uint64_t v43 = *v41;
      uint64_t v44 = WebKit::NetworkCache::Key::Key(*v41 + 160 * v42, v6);
      long long v45 = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v44 + 88) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v44 + 72) = v45;
      v46 = *(_DWORD **)(v6 + 104);
      unint64_t v9 = v89;
      if (v46) {
        *v46 += 2;
      }
      uint64_t v47 = v43 + 160 * v42;
      *(void *)(v47 + 104) = v46;
      long long v48 = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v47 + 112) = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(v47 + 128) = v48;
      *(unsigned char *)(v47 + 144) = *(unsigned char *)(v6 + 144);
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v47 + 152), (void **)(v6 + 152));
      ++*(_DWORD *)(v27 + 20);
    }
    unint64_t v10 = v87;
    uint64_t v49 = v88;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2) {
        WTF::StringImpl::destroy(v96, a2);
      }
      else {
        *(_DWORD *)v96 -= 2;
      }
    }
LABEL_64:
    v9 += v49;
    uint64_t v59 = HIDWORD(v98);
    if (HIDWORD(v98) == v98)
    {
      v60 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, HIDWORD(v98) + 1, v6 + 80);
      uint64_t v59 = HIDWORD(v98);
      int v61 = HIDWORD(v98) + 1;
      v62 = v97;
      uint64_t v63 = *v60;
    }
    else
    {
      int v61 = HIDWORD(v98) + 1;
      v62 = v97;
      uint64_t v63 = *v12;
    }
    *((void *)v62 + v59) = v63;
    HIDWORD(v98) = v61;
LABEL_68:
    v6 += 736;
  }
  while (v6 != v10);
  unint64_t v90 = v9;
  uint64_t v2 = a1;
  unint64_t v6 = *(void *)(a1 + 24);
  unsigned int v8 = *(_DWORD *)(a1 + 36);
  unint64_t v66 = v6 + 736 * v8;
  int v67 = 0;
  if (v8)
  {
    uint64_t v68 = *(void *)(a1 + 24);
    v69 = (uint64_t *)(v6 + 736 * v8);
    unint64_t v70 = (unint64_t)v69;
    uint64_t v7 = v83;
    do
    {
      if (!*(void *)(v6 + 80))
      {
        unint64_t v71 = v6;
        if (v70 != *(void *)(a1 + 24) + 736 * *(unsigned int *)(a1 + 36))
        {
          if ((uint64_t *)v6 == v69)
          {
            unint64_t v71 = v70;
          }
          else
          {
            WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(v69, (uint64_t *)v6, v70);
            unint64_t v71 = v70 + v68 - (void)v69;
          }
        }
        v69 = (uint64_t *)(v6 + 736);
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v6, a2);
        ++v67;
        unint64_t v70 = v71;
      }
      v6 += 736;
      v68 += 736;
    }
    while (v6 < v66);
    unint64_t v6 = *(void *)(a1 + 24);
    unsigned int v8 = *(_DWORD *)(a1 + 36);
    unint64_t v66 = v70;
  }
  else
  {
    v69 = *(uint64_t **)(a1 + 24);
    uint64_t v7 = v83;
  }
LABEL_86:
  v72 = (uint64_t *)(v6 + 736 * v8);
  if (v69 != v72)
  {
    WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(v69, v72, v66);
    unsigned int v8 = *(_DWORD *)(v2 + 36);
  }
  *(_DWORD *)(v2 + 36) = v8 - v67;
  uint64_t v73 = *(void *)(v85 + 24);
  if (v73)
  {
    uint64_t v74 = *(void *)(v73 + 8);
    if (v74)
    {
      if (v90 > v86 || v90 < v86)
      {
        if (*(unsigned char *)(v74 + 32))
        {
          v75 = (const WTF::String *)(*(void *)(v74 + 24) + v90 - v86);
          *(void *)(v74 + 24) = v75;
          *(unsigned char *)(v74 + 32) = 1;
          WebKit::writeSizeFile(*(WTF::StringImpl **)(v74 + 56), v75);
        }
      }
    }
  }
  uint64_t v76 = *(void *)(v85 + 80);
  v77 = v97;
  uint64_t v78 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  uint64_t v79 = v98;
  v97 = 0;
  uint64_t v98 = 0;
  v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)v80 = &unk_1EE9CC0C8;
  *((void *)v80 + 1) = v77;
  *((void *)v80 + 2) = v79;
  *((void *)v80 + 3) = v78;
  v94[0] = v80;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v76 + 40))(v76, v7, v94);
  v81 = v94[0];
  v94[0] = 0;
  if (v81) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v81 + 8))(v81);
  }
  v82 = v97;
  if (v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree(v82, v65);
  }
LABEL_98:
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, (WTF::StringImpl *)v65);
}

void WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      uint64_t v7 = a3 + 736 * (((char *)a2 - (char *)a1) / 736) - 736;
      do
      {
        v4 -= 92;
        WebKit::CacheStorageRecord::CacheStorageRecord(v7, v4);
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v4, v8);
        v7 -= 736;
      }
      while (v4 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      WebKit::CacheStorageRecord::CacheStorageRecord(v3, v5);
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v5, v6);
      v3 += 736;
      v5 += 92;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC0C8;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC0C8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::call(void *a1, char a2)
{
  if (a2)
  {
    v5[0] = a1[1];
    uint64_t v2 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    v5[1] = v2;
    int v6 = 0;
  }
  else
  {
    LOBYTE(v5[0]) = 2;
    int v6 = 1;
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9CBD88[v6])(&v7, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC118;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CC118;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t *a1, const WTF::String *a2)
{
  uint64_t v2 = a1;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  WTF::FileSystemImpl::listDirectory(&v57, (WTF::FileSystemImpl *)(a1 + 3), a2);
  if (v58)
  {
    uint64_t v4 = v57;
    long long v45 = v2;
    uint64_t v46 = v57 + 8 * v58;
    uint64_t v5 = v2 + 5;
    uint64_t v47 = v3;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::listDirectory((uint64_t *)&v53, (WTF::FileSystemImpl *)&v55, v6);
      if (v54)
      {
        unsigned int v8 = v53;
        uint64_t v9 = 8 * v54;
        do
        {
          if (!*v8 || (WTF::StringImpl::endsWith() & 1) == 0)
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            LOBYTE(v48) = 0;
            LOBYTE(v50) = 0;
            char v61 = 0;
            MEMORY[0x19972E000](&v62, &v52, 1, &v61);
            if (v61)
            {
              uint64_t v10 = v62;
              uint64_t v62 = 0;
              long long v48 = (_DWORD *)v10;
              LODWORD(v10) = v63;
              LODWORD(v63) = 0;
              LOBYTE(v50) = 1;
              LODWORD(v49) = v10;
            }
            WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v62);
            if ((_BYTE)v50)
            {
              WebKit::readRecordInfoFromFileData((uint64_t)&v62, v5, (uint64_t)v48, v49);
              if (v74)
              {
                int v11 = HIDWORD(v60);
                if (HIDWORD(v60) == v60)
                {
                  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>((uint64_t)&v59, (unint64_t)&v62);
                }
                else
                {
                  uint64_t v12 = v59 + 160 * HIDWORD(v60);
                  uint64_t v13 = v62;
                  uint64_t v62 = 0;
                  *(void *)uint64_t v12 = v13;
                  uint64_t v14 = v63;
                  uint64_t v63 = 0;
                  *(void *)(v12 + 8) = v14;
                  uint64_t v15 = v64;
                  uint64_t v64 = 0;
                  *(void *)(v12 + 16) = v15;
                  uint64_t v16 = v65;
                  uint64_t v65 = 0;
                  *(void *)(v12 + 24) = v16;
                  long long v17 = v66;
                  long long v18 = v67;
                  *(void *)(v12 + 64) = v68;
                  *(_OWORD *)(v12 + 32) = v17;
                  *(_OWORD *)(v12 + 48) = v18;
                  long long v19 = v69;
                  *(_OWORD *)(v12 + 88) = v70;
                  *(_OWORD *)(v12 + 72) = v19;
                  WTF::URL::URL(v12 + 104, v71);
                  *(unsigned char *)(v12 + 144) = v72;
                  *(void *)(v12 + 152) = 0;
                  uint64_t v20 = v73;
                  uint64_t v73 = 0;
                  *(void *)(v12 + 152) = v20;
                  HIDWORD(v60) = v11 + 1;
                }
                if (v74) {
                  WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)&v62, v7);
                }
              }
              if ((_BYTE)v50) {
                WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v48);
              }
            }
            uint64_t v21 = v52;
            uint64_t v52 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v7);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
      unsigned int v23 = v55;
      uint64_t v55 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      v24 = v56;
      v56 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      v4 += 8;
    }
    while (v4 != v46);
    uint64_t v25 = v59;
    unsigned int v26 = HIDWORD(v60);
    uint64_t v27 = *(void *)(v47 + 40);
    uint64_t v2 = v45;
    uint64_t v28 = v45[2];
    v45[2] = 0;
    long long v48 = (_DWORD *)v28;
    if (v26)
    {
      unint64_t v29 = v25 + 160 * v26;
      do
      {
        WebKit::CacheStorageRecordInformation::isolatedCopy((uint64_t)&v62, v25);
        WebKit::NetworkCache::Key::operator=(v25, (uint64_t)&v62);
        long long v30 = v70;
        *(_OWORD *)(v25 + 72) = v69;
        *(_OWORD *)(v25 + 88) = v30;
        uint64_t v31 = v25 + 104;
        WTF::URL::operator=(v25 + 104, (uint64_t)v71);
        *(unsigned char *)(v25 + 144) = v72;
        uint64_t v33 = v73;
        uint64_t v73 = 0;
        v34 = *(WTF::StringImpl ***)(v25 + 152);
        *(void *)(v25 + 152) = v33;
        if (v34) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v32);
        }
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)&v62, v32);
        v25 += 160;
      }
      while (v31 + 56 < v29);
      uint64_t v25 = v59;
      int v35 = HIDWORD(v60);
      uint64_t v28 = (uint64_t)v48;
    }
    else
    {
      int v35 = 0;
    }
  }
  else
  {
    int v35 = 0;
    uint64_t v25 = 0;
    uint64_t v27 = *(void *)(v3 + 40);
    uint64_t v28 = v2[2];
    v2[2] = 0;
  }
  int v36 = v60;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v37 = v2[6];
  v2[6] = 0;
  uint64_t v49 = v25;
  uint64_t v51 = v37;
  uint64_t v38 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v38 = &unk_1EE9CC140;
  *(void *)(v38 + 8) = v28;
  long long v48 = 0;
  uint64_t v49 = 0;
  *(void *)(v38 + 16) = v25;
  uint64_t v50 = 0;
  *(_DWORD *)(v38 + 24) = v36;
  *(_DWORD *)(v38 + 28) = v35;
  *(void *)(v38 + 32) = v37;
  v53 = (void *)v38;
  (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, &v53);
  uint64_t v40 = (uint64_t)v53;
  v53 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v51 = 0;
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v39);
  unsigned int v42 = v48;
  long long v48 = 0;
  if (v42)
  {
    if (v42[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v42 + 8))(v42);
    }
    else {
      --v42[2];
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v41);
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v43);
}

WTF::StringImpl *WebKit::CacheStorageRecordInformation::isolatedCopy(uint64_t a1, uint64_t a2)
{
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  WTF::URL::isolatedCopy();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v5 = (uint64_t *)(a2 + 152);
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a2 + 152));
  char v7 = (WTF::StringImpl **)result;
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a2 + 152);
  if (v10) {
    int v11 = (WTF::StringImpl *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
  else {
    int v11 = 0;
  }
  if (v11 != result)
  {
    do
    {
      WTF::String::isolatedCopy();
      uint64_t v13 = *v7;
      *char v7 = v18;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      WTF::String::isolatedCopy();
      long long v18 = 0;
      uint64_t result = v7[1];
      v7[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          WTF::StringImpl::destroy(result, v14);
          uint64_t result = 0;
          long long v18 = 0;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)*v7 + 1 > 1) {
          goto LABEL_17;
        }
      }
      char v7 = v9;
LABEL_17:
      ;
    }
    while (v7 != (WTF::StringImpl **)v11);
    uint64_t v10 = *v5;
  }
  uint64_t *v5 = 0;
  *(void *)(a1 + 152) = v10;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC140;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  long long v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC140;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = (_DWORD *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  long long v4 = *(WebKit::CacheStorageRecord **)a1;
  if (v3)
  {
    uint64_t v5 = 752 * v3;
    do
    {
      if (*((unsigned char *)v4 + 736)) {
        WebKit::CacheStorageRecord::~CacheStorageRecord(v4, a2);
      }
      long long v4 = (WebKit::CacheStorageRecord *)((char *)v4 + 752);
      v5 -= 752;
    }
    while (v5);
    long long v4 = *(WebKit::CacheStorageRecord **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC168;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC168;
  uint64_t v3 = *((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 44);
  if (!v3)
  {
    int v82 = 0;
    unint64_t v44 = 0;
    uint64_t v46 = *(void *)(v2 + 40);
    uint64_t v47 = a1;
    long long v48 = *(_DWORD **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    goto LABEL_163;
  }
  long long v4 = (uint64_t *)(v2 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = 160 * v3;
  do
  {
    WebKit::recordFilePathWithDirectory((uint64_t)&v100, *(void *)(v1 + 24), v5);
    buf[0] = 0;
    char v126 = 0;
    LOBYTE(v124[0]) = 0;
    MEMORY[0x19972E000](&v113, &v100, 1, v124);
    if (LOBYTE(v124[0]))
    {
      char v7 = v113;
      v113 = 0;
      *(void *)buf = v7;
      LODWORD(v7) = v114;
      LODWORD(v114) = 0;
      char v126 = 1;
      *(_DWORD *)&uint8_t buf[8] = v7;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v113);
    if (!v126)
    {
      uint64_t v103 = 0;
      LODWORD(v104) = 0;
LABEL_12:
      unint64_t v12 = 0;
      v94 = 0;
      LODWORD(v95[0]) = 0;
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)buf;
    memset(buf, 0, 12);
    uint64_t v103 = v8;
    LODWORD(v104) = *(_DWORD *)&buf[8];
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)buf);
    if (!v104) {
      goto LABEL_12;
    }
    WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)v124, v100);
    buf[0] = 0;
    char v126 = 0;
    LOBYTE(v107.m_impl.m_ptr) = 0;
    MEMORY[0x19972E000](&v113, v124, 1, &v107);
    if (LOBYTE(v107.m_impl.m_ptr))
    {
      uint64_t v9 = v113;
      v113 = 0;
      *(void *)buf = v9;
      LODWORD(v9) = v114;
      LODWORD(v114) = 0;
      char v126 = 1;
      *(_DWORD *)&uint8_t buf[8] = v9;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v113);
    if (v126)
    {
      int v11 = *(_DWORD **)buf;
      memset(buf, 0, 12);
      v94 = v11;
      LODWORD(v95[0]) = *(_DWORD *)&buf[8];
      WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)buf);
    }
    else
    {
      v94 = 0;
      LODWORD(v95[0]) = 0;
    }
    uint64_t v13 = v124[0];
    v124[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    unint64_t v12 = v104;
LABEL_19:
    uint64_t v14 = v103;
    WebKit::readRecordInfoFromFileData((uint64_t)buf, (uint64_t *)(v2 + 32), v103, v12);
    if (!v162)
    {
      LOBYTE(v113) = 0;
      char v120 = 0;
LABEL_63:
      long long v30 = qword_1EB357CB8;
      if (os_log_type_enabled((os_log_t)qword_1EB357CB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = v2;
        _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "%p - CacheStorageDiskStore::readRecordsInternal fails to decode record from file", buf, 0xCu);
      }
      goto LABEL_65;
    }
    LOBYTE(v121) = 0;
    char v123 = 0;
    if (!v138)
    {
      if (!v94) {
        goto LABEL_49;
      }
      WebCore::FragmentedSharedBuffer::create();
      uint64_t v21 = (uint64_t *)WTF::fastMalloc((WTF *)0x38);
      MEMORY[0x199730FA0](v21, &v113);
      unsigned int v23 = v113;
      v113 = 0;
      if (v23) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v22);
      }
      if (!v162) {
LABEL_170:
      }
        __break(1u);
      uint64_t v24 = WebCore::SharedBuffer::data((WebCore::SharedBuffer *)v21);
      WebKit::computeSHA1((uint64_t)&v113, v24, v21[6], *v4);
      if (v134 != v113 || v135 != v114 || v136 != (unint64_t)v115)
      {
        LOBYTE(v113) = 0;
        char v120 = 0;
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v21, v15);
        goto LABEL_50;
      }
      if (v123)
      {
        if (v122 != -1)
        {
          if (v122 == 2)
          {
            atomic_fetch_add((atomic_uint *volatile)v21, 1u);
            int v35 = v121;
            v121 = (unsigned int *)v21;
            if (v35) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v15);
            }
            goto LABEL_85;
          }
          ((void (*)(unsigned int **, unsigned int **))off_1EE9CBD60[v122])(&v113, &v121);
        }
        int v122 = -1;
        atomic_fetch_add((atomic_uint *volatile)v21, 1u);
        v121 = (unsigned int *)v21;
        int v122 = 2;
      }
      else
      {
        atomic_fetch_add((atomic_uint *volatile)v21, 1u);
        v121 = (unsigned int *)v21;
        int v122 = 2;
        char v123 = 1;
      }
LABEL_85:
      uint64_t v20 = (unsigned int *)v21;
LABEL_86:
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v15);
      goto LABEL_87;
    }
    uint64_t v16 = v137;
    unint64_t v17 = v133 + v139;
    if ((WTF::StringImpl *)((char *)v137 + v133 + v139) != (WTF::StringImpl *)v12) {
      goto LABEL_49;
    }
    if (v12 < v17) {
      goto LABEL_170;
    }
    if (v137 == (WTF::StringImpl *)-1)
    {
      uint64_t v16 = (WTF::StringImpl *)(v12 - v17);
    }
    else if (v12 - v17 < (unint64_t)v137)
    {
      goto LABEL_170;
    }
    v124[0] = (WTF::StringImpl *)(v14 + v17);
    v124[1] = v16;
    WebKit::computeSHA1((uint64_t)&v113, v14 + v17, (uint64_t)v16, *v4);
    BOOL v18 = v134 == v113 && v135 == v114;
    if (!v18 || v136 != (unint64_t)v115)
    {
LABEL_49:
      LOBYTE(v113) = 0;
      char v120 = 0;
      goto LABEL_50;
    }
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v113);
    if (v123)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((unsigned int *)&v121, &v121, &v113);
      uint64_t v20 = v113;
      v113 = 0;
      if (v20) {
        goto LABEL_86;
      }
    }
    else
    {
      v121 = v113;
      int v122 = 2;
      char v123 = 1;
    }
LABEL_87:
    if (!v123)
    {
      LOBYTE(v113) = 0;
      char v120 = 0;
      goto LABEL_53;
    }
    if (!v162) {
      goto LABEL_170;
    }
    char v36 = v143;
    LODWORD(v107.m_impl.m_ptr) = v152[0];
    *(_DWORD *)((char *)&v107.m_impl.m_ptr + 3) = *(_DWORD *)((char *)v152 + 3);
    uint64_t v37 = v153;
    if (v153)
    {
      *(_DWORD *)v153 += 2;
      v108 = v37;
      long long v109 = v154;
      long long v110 = v155;
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v124, (uint64_t)buf, v36, &v144, (int *)&v107, &v156, v157, (uint64_t)v158, v161, (uint64_t)&v121);
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v113, (uint64_t *)v124);
      char v120 = 1;
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v124, v38);
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    else
    {
      v108 = 0;
      long long v109 = v154;
      long long v110 = v155;
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v124, (uint64_t)buf, v143, &v144, (int *)&v107, &v156, v157, (uint64_t)v158, v161, (uint64_t)&v121);
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v113, (uint64_t *)v124);
      char v120 = 1;
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v124, v43);
    }
LABEL_50:
    if (v123 && v122 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned int **))off_1EE9CBD60[v122])(v124, &v121);
    }
LABEL_53:
    if (v162) {
      WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)buf, (WTF::StringImpl *)v15);
    }
    if (!v120) {
      goto LABEL_63;
    }
    if (*(double *)(v5 + 72) == v116
      && *(void *)(v5 + 96) == v118
      && (WTF::equal(*(WTF **)(v5 + 104), v119, v16) & 1) != 0)
    {
      WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)buf, *(const WebKit::NetworkCache::Key **)(v2 + 24), v5);
      if (!v120) {
        goto LABEL_170;
      }
      WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)v124, *(const WebKit::NetworkCache::Key **)(v2 + 24), (uint64_t)&v113);
      char v28 = WTF::equal(*(WTF **)buf, v124[0], v27);
      unint64_t v29 = v124[0];
      v124[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      uint64_t v39 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (!v39)
      {
LABEL_98:
        if (v28) {
          goto LABEL_101;
        }
        goto LABEL_65;
      }
      if (*(_DWORD *)v39 != 2)
      {
        *(_DWORD *)v39 -= 2;
        goto LABEL_98;
      }
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
      if ((v28 & 1) == 0) {
        goto LABEL_65;
      }
LABEL_101:
      if (!v120) {
        goto LABEL_170;
      }
      uint64_t v40 = v1;
      long long v117 = *(_OWORD *)(v5 + 80);
      int v41 = HIDWORD(v99);
      if (HIDWORD(v99) == v99)
      {
        uint64_t v15 = (unsigned int **)WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v98, HIDWORD(v99) + 1, (unint64_t)&v113);
        int v41 = HIDWORD(v99);
        unsigned int v42 = (unsigned char *)(v98 + 752 * HIDWORD(v99));
        *unsigned int v42 = 0;
        v42[736] = 0;
        if (!*((unsigned char *)v15 + 736)) {
          goto LABEL_108;
        }
LABEL_107:
        *(unsigned char *)(WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v42, (uint64_t *)v15) + 736) = 1;
      }
      else
      {
        unsigned int v42 = (unsigned char *)(v98 + 752 * HIDWORD(v99));
        *unsigned int v42 = 0;
        v42[736] = 0;
        if (v120)
        {
          uint64_t v15 = &v113;
          goto LABEL_107;
        }
      }
LABEL_108:
      HIDWORD(v99) = v41 + 1;
      uint64_t v1 = v40;
      goto LABEL_68;
    }
LABEL_65:
    int v31 = HIDWORD(v99);
    if (HIDWORD(v99) == v99)
    {
      WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::nullopt_t const&>((uint64_t)&v98);
    }
    else
    {
      v32 = (unsigned char *)(v98 + 752 * HIDWORD(v99));
      unsigned char *v32 = 0;
      v32[736] = 0;
      HIDWORD(v99) = v31 + 1;
    }
LABEL_68:
    if (v120) {
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v113, (WTF::StringImpl *)v15);
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v94);
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v103);
    v34 = v100;
    v100 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    v5 += 160;
    v6 -= 160;
  }
  while (v6);
  unint64_t v44 = v98;
  unsigned int v45 = HIDWORD(v99);
  uint64_t v46 = *(void *)(v2 + 40);
  uint64_t v47 = v1;
  long long v48 = *(_DWORD **)(v1 + 16);
  uint64_t v92 = v47;
  *(void *)(v47 + 16) = 0;
  v94 = v48;
  if (v45)
  {
    uint64_t v91 = v46;
    unint64_t v93 = v44 + 752 * v45;
    while (2)
    {
      if (!*(unsigned char *)(v44 + 736)) {
        goto LABEL_159;
      }
      WebKit::CacheStorageRecordInformation::isolatedCopy((uint64_t)&v121, v44);
      char v49 = *(unsigned char *)(v44 + 160);
      WebCore::ResourceRequestBase::isolatedCopy((uint64_t *)&v107, (WebCore::ResourceRequestBase *)(v44 + 168));
      LODWORD(v103) = *(_DWORD *)(v44 + 368);
      *(_DWORD *)((char *)&v103 + 3) = *(_DWORD *)(v44 + 371);
      uint64_t v50 = *(WTF::StringImpl **)(v44 + 376);
      if (v50) {
        *(_DWORD *)v50 += 2;
      }
      v104 = v50;
      long long v105 = *(_OWORD *)(v44 + 384);
      long long v106 = *(_OWORD *)(v44 + 400);
      uint64_t v51 = (WTF::StringImpl **)(v44 + 416);
      WTF::String::isolatedCopy();
      char v52 = *(unsigned char *)(v44 + 424);
      WebCore::ResourceResponseData::isolatedCopy((uint64_t *)v124, (WebCore::ResourceResponseData *)(v44 + 432));
      uint64_t v53 = *(void *)(v44 + 712);
      WebCore::DOMCacheEngine::isolatedResponseBody();
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v113, (uint64_t)&v121, v49, &v107, (int *)&v103, (_DWORD **)&v102, v52, (uint64_t)v124, v53, (uint64_t)&v100);
      if (v101 != -1) {
        ((void (*)(char *, WTF::StringImpl **))off_1EE9CBD60[v101])(&v112, &v100);
      }
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v124, v54);
      v56 = v102;
      v102 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 != 2)
        {
          *(_DWORD *)v56 -= 2;
          goto LABEL_121;
        }
        WTF::StringImpl::destroy(v56, v55);
        if (v50)
        {
LABEL_124:
          if (*(_DWORD *)v50 == 2) {
            WTF::StringImpl::destroy(v50, v55);
          }
          else {
            *(_DWORD *)v50 -= 2;
          }
        }
      }
      else
      {
LABEL_121:
        if (v50) {
          goto LABEL_124;
        }
      }
      CFTypeRef v57 = cf;
      CFTypeRef cf = 0;
      if (v57) {
        CFRelease(v57);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v107);
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)&v121, v58);
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)buf, (uint64_t *)&v113);
      unsigned __int8 v160 = 1;
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v113, v59);
      if (*(unsigned __int8 *)(v44 + 736) != v160)
      {
        if (*(unsigned char *)(v44 + 736))
        {
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v44, v60);
          *(unsigned char *)(v44 + 736) = 0;
        }
        else
        {
          WebKit::CacheStorageRecord::CacheStorageRecord(v44, (uint64_t *)buf);
          *(unsigned char *)(v44 + 736) = 1;
        }
LABEL_157:
        if (v160) {
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)buf, v68);
        }
        goto LABEL_159;
      }
      if (*(unsigned char *)(v44 + 736))
      {
        WebKit::NetworkCache::Key::operator=(v44, (uint64_t)buf);
        long long v61 = v128;
        *(_OWORD *)(v44 + 72) = v127;
        *(_OWORD *)(v44 + 88) = v61;
        WTF::URL::operator=(v44 + 104, (uint64_t)v129);
        *(unsigned char *)(v44 + 144) = v129[40];
        uint64_t v63 = v130;
        uint64_t v130 = 0;
        uint64_t v64 = *(WTF::StringImpl ***)(v44 + 152);
        *(void *)(v44 + 152) = v63;
        if (v64) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v64, v62);
        }
        *(unsigned char *)(v44 + 160) = v131;
        WebCore::ResourceRequestBase::RequestData::operator=(v44 + 168, (uint64_t)&v132);
        uint64_t v66 = v139;
        uint64_t v139 = 0;
        long long v67 = *(WTF::StringImpl **)(v44 + 320);
        *(void *)(v44 + 320) = v66;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2) {
            WTF::StringImpl::destroy(v67, v65);
          }
          else {
            *(_DWORD *)v67 -= 2;
          }
        }
        uint64_t v69 = v140;
        uint64_t v140 = 0;
        long long v70 = *(WTF::StringImpl **)(v44 + 328);
        *(void *)(v44 + 328) = v69;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2) {
            WTF::StringImpl::destroy(v70, v65);
          }
          else {
            *(_DWORD *)v70 -= 2;
          }
        }
        uint64_t v71 = v141;
        uint64_t v141 = 0;
        char v72 = *(WTF::RefCountedBase **)(v44 + 336);
        *(void *)(v44 + 336) = v71;
        if (v72) {
          WTF::RefCounted<WebCore::FormData>::deref(v72);
        }
        uint64_t v73 = v142;
        *(unsigned char *)(v44 + 352) = v143;
        *(void *)(v44 + 344) = v73;
        m_ptr = v144.m_impl.m_ptr;
        v144.m_impl.m_ptr = 0;
        uint64_t v75 = *(const void **)(v44 + 360);
        *(void *)(v44 + 360) = m_ptr;
        if (v75) {
          CFRelease(v75);
        }
        int v76 = v145[0];
        *(_DWORD *)(v44 + 371) = *(_DWORD *)((char *)v145 + 3);
        *(_DWORD *)(v44 + 368) = v76;
        uint64_t v77 = v146;
        uint64_t v146 = 0;
        uint64_t v78 = *(WTF::StringImpl **)(v44 + 376);
        *(void *)(v44 + 376) = v77;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2) {
            WTF::StringImpl::destroy(v78, v65);
          }
          else {
            *(_DWORD *)v78 -= 2;
          }
        }
        long long v79 = v148;
        *(_OWORD *)(v44 + 384) = v147;
        *(_OWORD *)(v44 + 400) = v79;
        v80 = v149;
        v149 = 0;
        v81 = *v51;
        *uint64_t v51 = v80;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2) {
            WTF::StringImpl::destroy(v81, v65);
          }
          else {
            *(_DWORD *)v81 -= 2;
          }
        }
        *(unsigned char *)(v44 + 424) = v150;
        WebCore::ResourceResponseData::operator=(v44 + 432, (uint64_t)&v151);
        *(void *)(v44 + 712) = v158[11];
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(v44 + 720, (uint64_t)&v159);
        goto LABEL_157;
      }
LABEL_159:
      v44 += 752;
      if (v44 >= v93)
      {
        unint64_t v44 = v98;
        int v82 = HIDWORD(v99);
        long long v48 = v94;
        uint64_t v47 = v92;
        uint64_t v46 = v91;
        goto LABEL_163;
      }
      continue;
    }
  }
  int v82 = 0;
LABEL_163:
  int v83 = v99;
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v84 = *(void *)(v47 + 48);
  *(void *)(v47 + 48) = 0;
  v95[0] = v44;
  uint64_t v96 = v84;
  uint64_t v85 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v85 = &unk_1EE9CC190;
  *(void *)(v85 + 8) = v48;
  v94 = 0;
  v95[0] = 0;
  *(void *)(v85 + 16) = v44;
  v95[1] = 0;
  *(_DWORD *)(v85 + 24) = v83;
  *(_DWORD *)(v85 + 28) = v82;
  *(void *)(v85 + 32) = v84;
  uint64_t v97 = v85;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 32))(v46, &v97);
  uint64_t v87 = v97;
  uint64_t v97 = 0;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  uint64_t v96 = 0;
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v95, v86);
  unint64_t v89 = v94;
  v94 = 0;
  if (v89)
  {
    if (v89[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v89 + 8))(v89);
    }
    else {
      --v89[2];
    }
  }
  return WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v98, v88);
}

void WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::nullopt_t const&>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  unint64_t v3 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v3 >= 0x10) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 16;
  }
  if (v4 <= v2 + 1) {
    unint64_t v5 = v2 + 1;
  }
  else {
    unint64_t v5 = v4;
  }
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v5);
  uint64_t v6 = (unsigned char *)(*(void *)a1 + 752 * *(unsigned int *)(a1 + 12));
  *uint64_t v6 = 0;
  v6[736] = 0;
  ++*(_DWORD *)(a1 + 12);
}

void WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x572621)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = *(WTF **)a1;
      unsigned int v4 = *(_DWORD *)(a1 + 12);
      int v5 = 752 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(752 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x2F0;
      *(void *)a1 = v6;
      if (v4)
      {
        uint64_t v8 = (unsigned char *)v6;
        uint64_t v9 = 752 * v4;
        uint64_t v10 = v3;
        do
        {
          unsigned char *v8 = 0;
          v8[736] = 0;
          if (*((unsigned char *)v10 + 736))
          {
            WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v8, (uint64_t *)v10);
            v8[736] = 1;
            if (*((unsigned char *)v10 + 736)) {
              WebKit::CacheStorageRecord::~CacheStorageRecord(v10, v7);
            }
          }
          v8 += 752;
          uint64_t v10 = (WTF *)((char *)v10 + 752);
          v9 -= 752;
        }
        while (v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

unint64_t WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 752 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC190;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  unsigned int v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC190;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = (_DWORD *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC1B8;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  unsigned int v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC1B8;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  if (v3)
  {
    unsigned int v4 = *(WTF::StringImpl ***)(a1 + 24);
    uint64_t v5 = 8 * v3;
    char v6 = 1;
    do
    {
      unint64_t v7 = *v4;
      if (*v4) {
        *(_DWORD *)v7 += 2;
      }
      uint64_t v21 = v7;
      WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)&v20, v7);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v20, v8);
      unint64_t v10 = v20;
      uint64_t v20 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v21, v9);
      char v13 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v21, v11);
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      v6 &= v13 ^ 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    char v6 = 1;
  }
  uint64_t v15 = *(void *)(v2 + 40);
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v18 = &unk_1EE9CC1E0;
  *(void *)(v18 + 8) = v16;
  *(unsigned char *)(v18 + 16) = v6;
  *(void *)(v18 + 24) = v17;
  uint64_t v21 = (WTF::StringImpl *)v18;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v15 + 32))(v15, &v21);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CC1E0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC1E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

unint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF::ASCIILiteral **)result;
    uint64_t v5 = (uint64_t *)(*(void *)result + 16 * *(unsigned int *)(result + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::ASCIILiteral **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC208;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v5);
  uint64_t v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC208;
  uint64_t v3 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 56, a2);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v5);
  unint64_t v7 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }

  return WTF::fastFree(a1, v6);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 36))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    char v6 = 1;
    while (1)
    {
      unint64_t v7 = *(WTF::StringImpl **)(*(void *)(a1 + 24) + 8 * v5);
      if (v7) {
        *(_DWORD *)v7 += 2;
      }
      uint64_t v27 = v7;
      if (v5 >= *(unsigned int *)(a1 + 52)) {
        goto LABEL_40;
      }
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = v8 + v4;
      if (*(_DWORD *)(v8 + v4 + 12))
      {
        unint64_t v10 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v8 + v4 + 12));
        memcpy(v10, *(const void **)v9, *(unsigned int *)(v9 + 12));
      }
      else
      {
        unint64_t v10 = 0;
      }
      if (v5 >= *(unsigned int *)(a1 + 68))
      {
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x198C887C8);
      }
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = v11 + v4;
      int v13 = *(_DWORD *)(v11 + v4 + 12);
      if (v13)
      {
        uint64_t v14 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v11 + v4 + 12));
        memcpy(v14, *(const void **)v12, *(unsigned int *)(v12 + 12));
      }
      else
      {
        uint64_t v14 = 0;
      }
      WTF::FileSystemImpl::parentPath((uint64_t *)&v26, (WTF::FileSystemImpl *)&v27, a2);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v26, v15);
      uint64_t v17 = v26;
      unsigned int v26 = 0;
      if (!v17) {
        goto LABEL_14;
      }
      if (*(_DWORD *)v17 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v17, v16);
      if (!v13) {
        goto LABEL_22;
      }
LABEL_17:
      WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)&v26, v27);
      int v18 = WTF::FileSystemImpl::overwriteEntireFile();
      long long v19 = v26;
      unsigned int v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, a2);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      if (v18 == -1)
      {
        char v6 = 0;
        if (!v14) {
          goto LABEL_24;
        }
LABEL_23:
        WTF::fastFree((WTF *)v14, a2);
        goto LABEL_24;
      }
LABEL_22:
      v6 &= WTF::FileSystemImpl::overwriteEntireFile() != -1;
      if (v14) {
        goto LABEL_23;
      }
LABEL_24:
      if (v10) {
        WTF::fastFree((WTF *)v10, a2);
      }
      uint64_t v20 = v27;
      uint64_t v27 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, a2);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      ++v5;
      v4 += 16;
      if (v5 >= *(unsigned int *)(a1 + 36)) {
        goto LABEL_37;
      }
    }
    *(_DWORD *)v17 -= 2;
LABEL_14:
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  char v6 = 1;
LABEL_37:
  uint64_t v21 = *(void *)(v3 + 40);
  uint64_t v22 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v24 = &unk_1EE9CC230;
  *(void *)(v24 + 8) = v22;
  *(unsigned char *)(v24 + 16) = v6;
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = (WTF::StringImpl *)v24;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v21 + 32))(v21, &v27);
  unint64_t result = v27;
  uint64_t v27 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CC230;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC230;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v7;
  uint64_t v9 = v6 + (v8 << 6);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    goto LABEL_18;
  }
  unint64_t v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 24);
    if (v12) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    unint64_t v10 = (_OWORD *)v9;
LABEL_12:
    uint64_t v8 = (v8 + v11) & v7;
    uint64_t v9 = v6 + (v8 << 6);
    ++v11;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_16;
    }
  }
  if (v12 == 1)
  {
LABEL_8:
    if (WebCore::operator==())
    {
      uint64_t result = WebCore::operator==();
      if (result)
      {
        uint64_t v22 = *a1;
        if (*a1) {
          uint64_t v23 = *(unsigned int *)(v22 - 4);
        }
        else {
          uint64_t v23 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v22 + (v23 << 6);
        goto LABEL_27;
      }
    }
    goto LABEL_12;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_16:
  if (v10)
  {
    v10[2] = 0u;
    v10[3] = 0u;
    *unint64_t v10 = 0u;
    v10[1] = 0u;
    --*(_DWORD *)(*a1 - 16);
    uint64_t v9 = (uint64_t)v10;
  }
LABEL_18:
  uint64_t result = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ClientOrigin>,WTF::DefaultHash<WebCore::ClientOrigin>>::translate<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(WebCore::ClientOrigin const&)::{lambda(void)#1}>(v9, a2, &v24);
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 <= 2 * v18) {
      goto LABEL_24;
    }
  }
  else if (3 * v19 <= 4 * v18)
  {
LABEL_24:
    uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a1, (void *)v9);
    uint64_t v9 = result;
    uint64_t v16 = *a1;
    if (*a1) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
  }
  uint64_t v20 = v16 + (v19 << 6);
  char v21 = 1;
LABEL_27:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = v21;
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v4, a2);
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ClientOrigin>,WTF::DefaultHash<WebCore::ClientOrigin>>::translate<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(WebCore::ClientOrigin const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  v7[0] = 0;
  int v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v7, v4);
  v9[0] = 0;
  int v10 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, v4 + 32);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v7);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, (uint64_t)v9);
  if (v10 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9CBD78[v10])(&v6, v9);
  }
  int v10 = -1;
  if (v8 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9CBD78[v8])(&v6, v7);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), (unint64_t)a2 << 6);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v14 = v6 + 32;
    while (1)
    {
      int v15 = (void *)(v14 - 32);
      int v16 = *(_DWORD *)(v14 - 8);
      if (v16) {
        break;
      }
      if (*v15 != -1) {
        goto LABEL_9;
      }
LABEL_25:
      v14 += 64;
      if (!--v7) {
        goto LABEL_30;
      }
    }
    if (v16 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_29;
    }
LABEL_9:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v17 = *(unsigned int *)(v14 + 24);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v17])(&v26, v14);
      }
      *(_DWORD *)(v14 + 24) = -1;
      uint64_t v18 = *(unsigned int *)(v14 - 8);
      if (v18 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v18])(&v27, v14 - 32);
      }
      *(_DWORD *)(v14 - 8) = -1;
    }
    else
    {
      uint64_t v19 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::lookupForReinsert(a1, v14 - 32);
      uint64_t v20 = v19;
      uint64_t v21 = *(unsigned int *)(v19 + 56);
      if (v21 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v21])(&v28, v19 + 32);
      }
      *(_DWORD *)(v20 + 56) = -1;
      uint64_t v22 = *(unsigned int *)(v20 + 24);
      if (v22 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v22])(&v29, v20);
      }
      *(unsigned char *)uint64_t v20 = 0;
      *(_DWORD *)(v20 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v20, v14 - 32);
      *(unsigned char *)(v20 + 32) = 0;
      *(_DWORD *)(v20 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v20 + 32, v14);
      uint64_t v23 = *(unsigned int *)(v14 + 24);
      if (v23 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v23])(&v30, v14);
      }
      *(_DWORD *)(v14 + 24) = -1;
      uint64_t v24 = *(unsigned int *)(v14 - 8);
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CBD78[v24])(&v31, v14 - 32);
      }
      *(_DWORD *)(v14 - 8) = -1;
      if (v15 == a3) {
        uint64_t v13 = v20;
      }
    }
    goto LABEL_25;
  }
LABEL_29:
  uint64_t result = 0;
  if (v6)
  {
LABEL_30:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::lookupForReinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = WTF::computeHash<WebCore::ClientOrigin>(a2);
  int v5 = 0;
  do
  {
    uint64_t v6 = v4 & v3;
    int v7 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    int v4 = ++v5 + v6;
  }
  while (!v7);
  return v2 + (v6 << 6);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 24 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v5 + 24 * v10 + 16), 0);
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v25 = -1640531527;
          __int16 v26 = 0;
          char v27 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v25, (void *)(v5 + 24 * v10));
          int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v15;
            uint64_t v19 = (_OWORD *)(v14 + 24 * (v16 & v15));
            int v16 = ++v17 + (v16 & v15);
          }
          while (*v19 != 0);
          uint64_t v20 = v14 + 24 * v18;
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v20 + 16), 0);
          *uint64_t v19 = *(_OWORD *)v13;
          uint64_t v21 = v5 + 24 * v10;
          uint64_t v22 = *(void *)(v21 + 16);
          v21 += 16;
          *(void *)uint64_t v21 = 0;
          *(void *)(v20 + 16) = v22;
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)v21, 0);
          if (v13 == a3) {
            uint64_t v11 = v19;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC258;
  WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC258;
  WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::call(void *a1)
{
  uint64_t v1 = a1[4];
  v7[0] = 0;
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  v7[2] = v1;
  v8[0] = v2;
  v7[1] = 0;
  uint64_t v4 = a1[3];
  a1[3] = 0;
  v8[1] = v4;
  v8[2] = v1;
  int v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v8);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v9 != -1) {
    ((void (*)(char *, void *))off_1EE9CBDC0[v9])(&v10, v8);
  }
  int v9 = -1;
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_2,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CC280;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_2,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CC280;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC2A8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC2A8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::call(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (!v2) {
    return result;
  }
  if (!*(void *)(v2 + 8)) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  uint64_t v5 = (uint64_t *)(v4 + 48);
  uint64_t v6 = *(void *)(v4 + 48);
  if (!v6) {
    return result;
  }
  unsigned int v8 = *(_DWORD *)(v6 - 8);
  LODWORD(v33) = -1640531527;
  WORD2(v33) = 0;
  BYTE6(v33) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v33, result + 3);
  uint64_t result = (void *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v33);
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v11 = result & v8;
  uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == v9 && v14 == v10)
  {
LABEL_15:
    uint64_t v19 = (void *)(v6 + 16 * v11);
    uint64_t v20 = *v5;
    if (!*v5)
    {
      uint64_t v21 = 0;
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v21 = (void *)(v20 + 16 * *(unsigned int *)(v20 - 4));
    if (v21 == v19) {
      return result;
    }
LABEL_20:
    if (v21 != v19)
    {
      *uint64_t v19 = -1;
      v19[1] = -1;
      ++*(_DWORD *)(*v5 - 16);
      uint64_t v22 = *v5;
      if (*v5) {
        int v23 = *(_DWORD *)(v22 - 12) - 1;
      }
      else {
        int v23 = -1;
      }
      *(_DWORD *)(v22 - 12) = v23;
      uint64_t v20 = *v5;
      if (!*v5)
      {
        __int16 v26 = (const WTF::String *)(*(void *)(v4 + 40) + a2);
        *(void *)(v4 + 40) = v26;
        goto LABEL_34;
      }
      unsigned int v24 = *(_DWORD *)(v20 - 4);
      if (6 * *(_DWORD *)(v20 - 12) >= v24 || v24 <= 8)
      {
        __int16 v26 = (const WTF::String *)(*(void *)(v4 + 40) + a2);
        *(void *)(v4 + 40) = v26;
        goto LABEL_33;
      }
      uint64_t result = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v5, v24 >> 1, 0);
      uint64_t v20 = *v5;
    }
    __int16 v26 = (const WTF::String *)(*(void *)(v4 + 40) + a2);
    *(void *)(v4 + 40) = v26;
    if (v20)
    {
LABEL_33:
      if (*(_DWORD *)(v20 - 12)) {
        return result;
      }
    }
LABEL_34:
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 24) = v26;
    *(unsigned char *)(v4 + 32) = 1;
    uint64_t result = WebKit::writeSizeFile(*(WTF::StringImpl **)(v4 + 56), v26);
    for (uint64_t i = *(void *)(v4 + 136); i != *(void *)(v4 + 144); uint64_t i = *(void *)(v4 + 136))
    {
      char v28 = (uint64_t *)(*(void *)(v4 + 152) + 16 * i);
      uint64_t v33 = *v28;
      char v29 = (void *)v28[1];
      v28[1] = 0;
      v34 = v29;
      uint64_t v30 = *(void *)(v4 + 152) + 16 * i;
      uint64_t v31 = *(void *)(v30 + 8);
      *(void *)(v30 + 8) = 0;
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        uint64_t i = *(void *)(v4 + 136);
      }
      if (i == *(unsigned int *)(v4 + 160) - 1) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = i + 1;
      }
      *(void *)(v4 + 136) = v32;
      (*(void (**)(void))(**(void **)(v4 + 80) + 16))(*(void *)(v4 + 80));
      uint64_t result = v34;
      v34 = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
    return result;
  }
  int v16 = 1;
  while (v13 | v14)
  {
    uint64_t v11 = (v11 + v16) & v8;
    int v17 = (uint64_t *)(v6 + 16 * v11);
    uint64_t v13 = *v17;
    uint64_t v14 = v17[1];
    ++v16;
    if (v13 == v9 && v14 == v10) {
      goto LABEL_15;
    }
  }
  uint64_t v20 = *v5;
  if (*v5)
  {
    uint64_t v19 = (void *)(v20 + 16 * *(unsigned int *)(v20 - 4));
    goto LABEL_19;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v6 + 16 * v11;
      if (*(void *)(v13 + 8) != -1 && *(_OWORD *)v13 != 0)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v20 = -1640531527;
        __int16 v21 = 0;
        char v22 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v20, (void *)(v6 + 16 * v11));
        int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        int v17 = 0;
        do
        {
          uint64_t v18 = v16 & v15;
          int v16 = ++v17 + v18;
        }
        while (*(_OWORD *)(v14 + 16 * v18) != 0);
        *(_OWORD *)(v14 + 16 * v18) = *(_OWORD *)v13;
        if (v13 == a3) {
          uint64_t v12 = v14 + 16 * v18;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::VectorMover<false,std::pair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>::move(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      v5[1] = 0;
      *a3 = v6;
      a3[1] = v7;
      uint64_t result = v5[1];
      v5[1] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v9 = result & v7;
  uint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *a3;
  if (*(_OWORD *)v10 != 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (v12 == v13 && v11 == a3[1])
      {
        uint64_t v23 = *a2;
        if (*a2) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v26 = 0;
        uint64_t v25 = v23 + 16 * v24;
        goto LABEL_30;
      }
      if (v11 == -1) {
        uint64_t v14 = v10;
      }
      unsigned int v9 = (v9 + v15) & v7;
      uint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      ++v15;
    }
    while (*(_OWORD *)v10 != 0);
    if (v14)
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = *a3;
      uint64_t v10 = v14;
    }
  }
  uint64_t v16 = a3[1];
  *uint64_t v10 = v13;
  v10[1] = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, (uint64_t)v10);
      uint64_t v10 = (void *)result;
      uint64_t v19 = *a2;
      if (*a2) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  uint64_t v25 = v19 + 16 * v22;
  char v26 = 1;
LABEL_30:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 32 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v16 = v5 + 32 * v10;
          uint64_t v19 = *(WTF **)(v16 + 16);
          int v18 = (void *)(v16 + 16);
          uint64_t v17 = v19;
          if (v19)
          {
            void *v18 = 0;
            *(_DWORD *)(v5 + 32 * v10 + 24) = 0;
            WTF::fastFree(v17, v9);
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v35 = -1640531527;
          __int16 v36 = 0;
          char v37 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v35, (void *)(v5 + 32 * v10));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v15;
            uint64_t v23 = v14 + 32 * v22;
            int v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          uint64_t v25 = (void *)(v23 + 16);
          uint64_t v24 = *(WTF **)(v23 + 16);
          if (v24)
          {
            void *v25 = 0;
            *(_DWORD *)(v14 + 32 * v22 + 24) = 0;
            WTF::fastFree(v24, v9);
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v13;
          uint64_t v26 = v5 + 32 * v10;
          void *v25 = 0;
          *(void *)(v23 + 24) = 0;
          uint64_t v28 = *(void *)(v26 + 16);
          uint64_t v27 = v26 + 16;
          *(void *)uint64_t v27 = 0;
          void *v25 = v28;
          int v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          uint64_t v30 = v14 + 32 * v22;
          *(_DWORD *)(v30 + 24) = v29;
          int v31 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *(_DWORD *)(v30 + 28) = v31;
          uint64_t v32 = *(WTF **)v27;
          if (*(void *)v27)
          {
            *(void *)uint64_t v27 = 0;
            *(_DWORD *)(v27 + 8) = 0;
            WTF::fastFree(v32, v9);
          }
          if (v13 == a3) {
            uint64_t v11 = v14 + 32 * v22;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  uint64_t v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 32 * v8);
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      uint64_t v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 32 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1) {
    v3 += 24 * *(unsigned int *)(v3 - 4);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(a1, a2);
  }
  return a1;
}

WebKit::CacheStorageCache *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  *(void *)(a2 + 8) = -1;
  uint64_t result = std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(a2 + 16), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::CacheStorageCache *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  unsigned int v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 24 * (v6 & v5));
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 24 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unsigned char *a2, uint64_t *a3, char *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *((void *)a1 + 1);
  if ((v8 || (uint64_t v8 = *(void *)a1) != 0) && (*(unsigned char *)(v8 + 16) & 4) == 0 || v7 && (*(unsigned char *)(v7 + 16) & 4) == 0)
  {
    uint64_t result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      uint64_t v10 = *a3;
      __int16 v11 = *a4;
      *(_WORD *)uint64_t result = (char)*a2;
      uint64_t v12 = result + 2;
      uint64_t v18 = v10;
      uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v18, (char *)(result + 2));
      uint64_t v13 = v18;
      if (v18) {
        uint64_t v13 = *(unsigned int *)(v18 + 4);
      }
      *(_WORD *)(v12 + 2 * v13) = v11;
    }
  }
  else
  {
    uint64_t result = MEMORY[0x19972DE60]();
    if (result)
    {
      uint64_t v14 = *a3;
      char v15 = *a4;
      *(unsigned char *)uint64_t result = *a2;
      uint64_t v16 = result + 1;
      uint64_t v18 = v14;
      uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v18, (char *)(result + 1));
      uint64_t v17 = v18;
      if (v18) {
        uint64_t v17 = *(unsigned int *)(v18 + 4);
      }
      *(unsigned char *)(v16 + v17) = v15;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v21 + 8), 0);
          uint64_t v22 = *v10;
          uint64_t v23 = v4 + 16 * i;
          uint64_t v24 = *(void *)(v23 + 8);
          v23 += 8;
          *(void *)uint64_t v23 = 0;
          *(void *)uint64_t v21 = v22;
          *(void *)(v21 + 8) = v24;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)v23, 0);
        }
        else
        {
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 24 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      uint64_t v14 = v5 + 24 * v12;
      if (*(void *)(v14 + 8) != -1)
      {
        if (*(_OWORD *)v14 == 0)
        {
          uint64_t v17 = v5 + 24 * v12;
          int v18 = *(unsigned int **)(v17 + 16);
          *(void *)(v17 + 16) = 0;
          if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v9);
          }
        }
        else
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v32 = -1640531527;
          __int16 v33 = 0;
          char v34 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v32, (void *)(v5 + 24 * v12));
          int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v16;
            uint64_t v22 = (_OWORD *)(v15 + 24 * (v19 & v16));
            int v19 = ++v20 + (v19 & v16);
          }
          while (*v22 != 0);
          uint64_t v23 = v15 + 24 * v21;
          uint64_t v26 = *(unsigned int **)(v23 + 16);
          uint64_t v25 = (void *)(v23 + 16);
          uint64_t v24 = v26;
          void *v25 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v24);
            WTF::fastFree((WTF *)v24, v9);
          }
          *uint64_t v22 = *(_OWORD *)v14;
          uint64_t v27 = v5 + 24 * v12;
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          void *v25 = v28;
          int v29 = *(unsigned int **)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, v9);
          }
          if (v14 == a3) {
            int v13 = v22;
          }
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    int v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  uint64_t result = (unsigned int *)a2[2];
  a2[2] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t result@<X0>, void *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (!*(void *)result)
  {
LABEL_15:
    unsigned int v16 = 0;
    goto LABEL_16;
  }
  int v6 = *(_DWORD *)(v4 - 8);
  unsigned int v17 = -1640531527;
  __int16 v18 = 0;
  char v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v17, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  uint64_t v7 = a2[1];
  unsigned int v8 = result & v6;
  unsigned int v9 = (uint64_t *)(v4 + 24 * (result & v6));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v13) & v6;
      uint64_t v14 = (uint64_t *)(v4 + 24 * v8);
      uint64_t v10 = *v14;
      uint64_t v11 = v14[1];
      ++v13;
      if (v10 == *a2 && v11 == v7) {
        goto LABEL_13;
      }
    }
    goto LABEL_15;
  }
LABEL_13:
  unsigned int v16 = *(atomic_uint **)(v4 + 24 * v8 + 16);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
LABEL_16:
  *a3 = v16;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC2D0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC2D0;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::call(void *a1, char a2)
{
  uint64_t v2 = a1[2];
  if (v2 && *(void *)(v2 + 8) && (uint64_t v3 = a1[1], *(unsigned char *)(v3 + 64)) && *(void *)(v3 + 48) == a1[3])
  {
    if (a2)
    {
      uint64_t v4 = a1[4];
      *(void *)(v3 + 56) = v4;
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 56);
    }
    uint64_t v5 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4, 1);
  }
  else
  {
    uint64_t v5 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, 0, 0);
  }
  int v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a3;
    do
    {
      unsigned int v16 = (uint64_t *)(v5 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v21 = *a1;
          if (*a1) {
            int v22 = *(_DWORD *)(v21 - 8);
          }
          else {
            int v22 = 0;
          }
          unint64_t v23 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          unsigned int v26 = v22 & ((v25 >> 31) ^ v25);
          int v27 = 1;
          do
          {
            unsigned int v28 = v26;
            uint64_t v29 = *(void *)(v21 + 16 * v26);
            unsigned int v26 = (v26 + v27++) & v22;
          }
          while (v29);
          uint64_t v30 = (uint64_t *)(v21 + 16 * v28);
          int v31 = (unsigned int *)v30[1];
          v30[1] = 0;
          if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31);
            char v37 = v15;
            WTF::fastFree((WTF *)v31, v10);
            uint64_t v15 = v37;
          }
          *uint64_t v30 = *v16;
          uint64_t v32 = v5 + 16 * v13;
          uint64_t v33 = *(void *)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          v30[1] = v33;
          char v34 = *(unsigned int **)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            unsigned int v35 = v15;
            WTF::fastFree((WTF *)v34, v10);
            uint64_t v15 = v35;
          }
          if (v16 == v15) {
            uint64_t v14 = v30;
          }
        }
        else
        {
          uint64_t v18 = v5 + 16 * v13;
          char v19 = *(unsigned int **)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v19);
              int v20 = v15;
              WTF::fastFree((WTF *)v19, v10);
              uint64_t v15 = v20;
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void sub_198C8AF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<WebKit::WebAuthenticationPanelClient>::reset[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_198C8AFEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8B0E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8B174(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void getAllLocalAuthenticatorCredentialsImpl(NSString *a1, NSString *a2, NSData *a3, uint64_t a4)
{
  unsigned int v7 = a1;
  v80[7] = *MEMORY[0x1E4F143B8];
  int shouldUseAlternateKeychainAttribute = WebKit::shouldUseAlternateKeychainAttribute((WebKit *)a1);
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v10 = *MEMORY[0x1E4F3B9A0];
  uint64_t v11 = *MEMORY[0x1E4F3B6D8];
  v79[0] = *MEMORY[0x1E4F3B978];
  v79[1] = v11;
  uint64_t v12 = *MEMORY[0x1E4F3B6E8];
  v80[0] = v10;
  v80[1] = v12;
  uint64_t v13 = *MEMORY[0x1E4F3BC68];
  v79[2] = *MEMORY[0x1E4F3B550];
  v79[3] = v13;
  v80[2] = a2;
  v80[3] = MEMORY[0x1E4F1CC38];
  uint64_t v14 = *MEMORY[0x1E4F3BB80];
  uint64_t v15 = *MEMORY[0x1E4F3B878];
  uint64_t v16 = *MEMORY[0x1E4F3B880];
  v80[4] = *MEMORY[0x1E4F3BB88];
  v80[5] = v16;
  v79[4] = v14;
  v79[5] = v15;
  uint64_t v65 = v15;
  v79[6] = *MEMORY[0x1E4F3BD08];
  v80[6] = MEMORY[0x1E4F1CC38];
  objc_msgSend(v9, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v80, v79, 7));
  uint64_t v17 = (uint64_t *)MEMORY[0x1E4F3B788];
  if (a3) {
    [v9 setObject:a3 forKey:*MEMORY[0x1E4F3B788]];
  }
  uint64_t v18 = (uint64_t *)MEMORY[0x1E4F3B5C8];
  char v19 = (uint64_t *)MEMORY[0x1E4F3B5D0];
  if (a4)
  {
    if (shouldUseAlternateKeychainAttribute) {
      int v20 = (void *)MEMORY[0x1E4F3B5C8];
    }
    else {
      int v20 = (void *)MEMORY[0x1E4F3B5D0];
    }
    [v9 setObject:a4 forKey:*v20];
  }
  CFTypeRef result = 0;
  OSStatus v21 = SecItemCopyMatching((CFDictionaryRef)v9, &result);
  if (a4) {
    int v22 = shouldUseAlternateKeychainAttribute;
  }
  else {
    int v22 = 0;
  }
  if (v22 == 1 && v21 == -25300)
  {
    [v9 removeObjectForKey:*v18];
    [v9 setObject:a4 forKey:*v19];
    OSStatus v21 = SecItemCopyMatching((CFDictionaryRef)v9, &result);
  }
  if (v21 != -25300 && v21)
  {
    *unsigned int v7 = 0;
    if (v9) {
LABEL_70:
    }
      CFRelease(v9);
  }
  else
  {
    CFTypeRef v57 = result;
    id v58 = v9;
    id cf = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id obj = (id)result;
    uint64_t v23 = [(id)result countByEnumeratingWithState:&v73 objects:v78 count:16];
    if (v23)
    {
      uint64_t v68 = *MEMORY[0x1E4F3B5E0];
      uint64_t v69 = *(void *)v74;
      uint64_t v62 = *v18;
      uint64_t v56 = *v19;
      uint64_t v61 = *v17;
      uint64_t v60 = *MEMORY[0x1E4F3B790];
      uint64_t v59 = *MEMORY[0x1E4F3B668];
      uint64_t v64 = *MEMORY[0x1E4F3B858];
LABEL_18:
      uint64_t v24 = 0;
      uint64_t v67 = v23;
      while (1)
      {
        if (*(void *)v74 != v69) {
          objc_enumerationMutation(obj);
        }
        unint64_t v25 = *(void **)(*((void *)&v73 + 1) + 8 * v24);
        unsigned int v26 = (void *)[v25 objectForKeyedSubscript:v68];
        int v27 = v26;
        if (v26)
        {
          uint64_t v28 = [v26 bytes];
          unint64_t v29 = [v27 length];
          unint64_t v30 = v29;
          if (v29)
          {
            if (HIDWORD(v29))
            {
              __break(0xC471u);
              return;
            }
            uint64_t v31 = WTF::fastMalloc((WTF *)v29);
            uint64_t v32 = (WTF *)v31;
            uint64_t v33 = 0;
            do
            {
              *(unsigned char *)(v31 + v33) = *(unsigned char *)(v28 + v33);
              ++v33;
            }
            while (v30 != v33);
            goto LABEL_26;
          }
        }
        else
        {
          LODWORD(v30) = 0;
        }
        uint64_t v32 = 0;
LABEL_26:
        v70[0] = v32;
        v70[1] = v30;
        cbor::CBORReader::read();
        if (v32) {
          WTF::fastFree(v32, v34);
        }
        if (v72
          && v71[0] == 5
          && (uint64_t Map = cbor::CBORValue::getMap((cbor::CBORValue *)v71),
              cbor::CBORValue::CBORValue(),
              __int16 v36 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v70), cbor::CBORValue::~CBORValue((cbor::CBORValue *)v70), v37 = (void *)(Map + 8), (void *)(Map + 8) != v36)&& (v39 = *((_DWORD *)v36 + 16), v38 = (cbor::CBORValue *)(v36 + 8), v39 == 3))
        {
          String = (void *)cbor::CBORValue::getString(v38);
          uint64_t v41 = [v25 objectForKeyedSubscript:v62];
          if (!v41) {
            uint64_t v41 = [v25 objectForKeyedSubscript:v56];
          }
          unsigned int v42 = v7;
          id v43 = objc_alloc(MEMORY[0x1E4F1CA60]);
          if (*String) {
            unint64_t v44 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            unint64_t v44 = &stru_1EEA10550;
          }
          unsigned int v45 = objc_msgSend(v43, "initWithObjectsAndKeys:", v44, @"_WKLocalAuthenticatorCredentialNameKey", v41, @"_WKLocalAuthenticatorCredentialIDKey", objc_msgSend(v25, "objectForKeyedSubscript:", v61), @"_WKLocalAuthenticatorCredentialRelyingPartyIDKey", objc_msgSend(v25, "objectForKeyedSubscript:", v60), @"_WKLocalAuthenticatorCredentialLastModificationDateKey", objc_msgSend(v25, "objectForKeyedSubscript:", v59), @"_WKLocalAuthenticatorCredentialCreationDateKey", 0);
          cbor::CBORValue::CBORValue();
          uint64_t v46 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v70);
          unsigned int v7 = v42;
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v70);
          if (v37 == v46 || (v48 = *((_DWORD *)v46 + 16), uint64_t v47 = (cbor::CBORValue *)(v46 + 8), v48 != 2))
          {
            objc_msgSend(v45, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"), @"_WKLocalAuthenticatorCredentialUserHandleKey");
          }
          else
          {
            uint64_t ByteString = cbor::CBORValue::getByteString(v47);
            uint64_t v50 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*(void *)ByteString length:*(unsigned int *)(ByteString + 12)];
            [v45 setObject:v50 forKey:@"_WKLocalAuthenticatorCredentialUserHandleKey"];
            if (v50) {
              CFRelease(v50);
            }
          }
          if (objc_msgSend((id)objc_msgSend(v25, "allKeys"), "containsObject:", v65)) {
            objc_msgSend(v45, "setObject:forKey:", objc_msgSend(v25, "objectForKeyedSubscript:", v65), @"_WKLocalAuthenticatorCredentialSynchronizableKey");
          }
          if (objc_msgSend((id)objc_msgSend(v25, "allKeys"), "containsObject:", v64)) {
            objc_msgSend(v45, "setObject:forKey:", objc_msgSend(v25, "objectForKeyedSubscript:", v64), @"_WKLocalAuthenticatorCredentialGroupKey");
          }
          cbor::CBORValue::CBORValue();
          char v52 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v70);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v70);
          if (v37 != v52)
          {
            int v54 = *((_DWORD *)v52 + 16);
            uint64_t v53 = (cbor::CBORValue *)(v52 + 8);
            if (v54 == 3)
            {
              if (*(void *)cbor::CBORValue::getString(v53)) {
                uint64_t v55 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else {
                uint64_t v55 = &stru_1EEA10550;
              }
              [v45 setObject:v55 forKey:@"_WKLocalAuthenticatorCredentialDisplayNameKey"];
            }
          }
          [cf addObject:v45];
          if (v45) {
            CFRelease(v45);
          }
          int v51 = 1;
        }
        else
        {
          int v51 = 0;
          *unsigned int v7 = 0;
        }
        if (v72) {
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v71);
        }
        if (!v51)
        {
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_67;
        }
        if (++v24 == v67)
        {
          uint64_t v23 = [obj countByEnumeratingWithState:&v73 objects:v78 count:16];
          if (v23) {
            goto LABEL_18;
          }
          break;
        }
      }
    }
    *unsigned int v7 = cf;
LABEL_67:
    id v9 = v58;
    if (v57) {
      CFRelease(v57);
    }
    if (v58) {
      goto LABEL_70;
    }
  }
}

void sub_198C8B8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a21) {
    CFRelease(a21);
  }
  if (a22) {
    CFRelease(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8BD04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8C348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,WTF *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a21);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v34);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a25, a26);
  if (a32) {
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a28);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  _Unwind_Resume(a1);
}

void sub_198C8CAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,WTF *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a21);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v34);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a25, a26);
  if (a32) {
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a28);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  _Unwind_Resume(a1);
}

void sub_198C8D5F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef a24,CFTypeRef a25,uint64_t a26,CFTypeRef cf,CFTypeRef a28,PAL::CryptoDigest *a29,uint64_t a30,WTF *a31,int a32,int a33,char a34,WTF *a35,int a36)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a35) {
    WTF::fastFree(a35, a2);
  }
  if (a29)
  {
    PAL::CryptoDigest::~CryptoDigest(a29);
    WTF::fastFree(v41, v42);
  }
  if (a25) {
    CFRelease(a25);
  }
  if (a24) {
    CFRelease(a24);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (a34 && a31) {
    WTF::fastFree(a31, a2);
  }
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  if (v36) {
    CFRelease(v36);
  }
  if (*(unsigned char *)(v39 - 152)) {
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v39 - 184));
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8DF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29) {
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a25);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(v38 - 160, *(WTF **)(v38 - 152));
  if (v37) {
    CFRelease(v37);
  }
  if (v36)
  {
    CFRelease(v36);
    if (!v35)
    {
LABEL_7:
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_7;
  }
  CFRelease(v35);
  if (!v34)
  {
LABEL_11:
    if (v33) {
      CFRelease(v33);
    }
    _Unwind_Resume(a1);
  }
LABEL_8:
  CFRelease(v34);
  goto LABEL_11;
}

uint64_t WebCore::toBufferSource(WebCore *this, NSData *a2)
{
  if (a2)
  {
    [(NSData *)a2 bytes];
    [(NSData *)a2 length];
  }
  JSC::ArrayBuffer::tryCreate();
  uint64_t v6 = v5;
  int v7 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this, (uint64_t)&v6);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CC2E8[v7])(&v8, &v6);
  }
  int v7 = -1;
  return 0;
}

void sub_198C8E1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::DeferrableRefCountedBase *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9CC2E8[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8E9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, int a13, WTF::StringImpl *a14)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(v15 + 64));
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(v15 + 16));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(v14);
  _Unwind_Resume(a1);
}

unint64_t publicKeyCredentialDescriptors(uint64_t a1, void *a2)
{
  unint64_t result = [a2 count];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    unint64_t v4 = result;
    if (result < 0x6666667)
    {
      int v5 = 40 * result;
      uint64_t v6 = WTF::fastMalloc((WTF *)(40 * result));
      uint64_t v7 = 0;
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)a1 = v6;
      while (1)
      {
        char v8 = (void *)[a2 objectAtIndexedSubscript:v7];
        WebCore::toBufferSource((WebCore *)&v21, (NSData *)[v8 identifier]);
        id v9 = (void *)[v8 transports];
        unint64_t v10 = [v9 count];
        unint64_t v11 = v10;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        if (v10)
        {
          if (HIDWORD(v10))
          {
            __break(0xC471u);
            goto LABEL_19;
          }
          uint64_t v12 = (WTF *)WTF::fastMalloc((WTF *)v10);
          uint64_t v13 = 0;
          LODWORD(v24) = v11;
          uint64_t v23 = v12;
          do
          {
            unsigned int v14 = objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", v13), "intValue");
            if (v14 >= 7) {
              char v15 = 0;
            }
            else {
              char v15 = v14;
            }
            *((unsigned char *)v12 + v13) = v15;
            HIDWORD(v24) = ++v13;
          }
          while (v11 != v13);
        }
        uint64_t v16 = (unsigned char *)(v6 + 40 * v7);
        unsigned char *v16 = 0;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v16 + 8), (uint64_t)&v21);
        uint64_t v18 = v6 + 40 * v7;
        *(void *)(v18 + 32) = 0;
        char v19 = v23;
        uint64_t v23 = 0;
        *(void *)(v18 + 24) = v19;
        LODWORD(v19) = v24;
        LODWORD(v24) = 0;
        *(_DWORD *)(v18 + 32) = v19;
        LODWORD(v19) = HIDWORD(v24);
        HIDWORD(v24) = 0;
        *(_DWORD *)(v18 + 36) = v19;
        *(_DWORD *)(a1 + 12) = ++v7;
        unint64_t result = (unint64_t)v23;
        if (v23)
        {
          LODWORD(v24) = 0;
          unint64_t result = WTF::fastFree(v23, v17);
        }
        if (v22 != -1) {
          unint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9CC2E8[v22])(&v25, &v21);
        }
        if (v7 == v4) {
          return result;
        }
      }
    }
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x198C8EDB4);
  }
  return result;
}

void sub_198C8EDC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, WTF *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a14) {
    WTF::fastFree(a14, a2);
  }
  if (a13 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CC2E8[a13])(&a19, v20);
  }
  *(void *)a10 = 0;
  *(_DWORD *)(a10 + 8) = 0;
  WTF::fastFree(v19, a2);
  _Unwind_Resume(a1);
}

uint64_t authenticationExtensionsClientInputs(_WKAuthenticationExtensionsClientInputs *a1, void *a2)
{
  LOBYTE(a1[1].super.isa) = 0;
  a1->super.isa = 0;
  LOBYTE(a1[3]._appid) = 0;
  LOBYTE(a1[4].super.isa) = 0;
  LOBYTE(a1[8]._appid) = 0;
  uint64_t result = MEMORY[0x19972EAD0](&v4, [a2 appid]);
  a1->super.isa = v4;
  return result;
}

void sub_198C8EEA4(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](v4);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v2);
  uint64_t v7 = *v1;
  *uint64_t v1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(a1 + 16), a2 + 16);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(a1 + 64), a2 + 64);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
    *(unsigned char *)(a1 + 144) = 1;
  }
  return a1;
}

void sub_198C8F130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF *a48,int a49,CFTypeRef cf,WTF *a51)
{
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a51);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a11);
  if (v51) {
    CFRelease(v51);
  }
  _Block_release(v52);
  uint64_t v55 = a48;
  if (a48)
  {
    a48 = 0;
    a49 = 0;
    WTF::fastFree(v55, v54);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_198C8F22C()
{
  if (!v0) {
    JUMPOUT(0x198C8F224);
  }
  JUMPOUT(0x198C8F21CLL);
}

void sub_198C8F238()
{
}

WTF::DeferrableRefCountedBase *produceClientDataJson(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    [a3 bytes];
    [a3 length];
  }
  JSC::ArrayBuffer::tryCreate();
  MEMORY[0x19972EAD0](&v26, a4);
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v29, (WebCore::SecurityOrigin *)&v26, v9);
  unint64_t v11 = v26;
  unsigned int v26 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v30;
  if (v30) {
    *(_DWORD *)v30 += 2;
  }
  uint64_t v24 = v12;
  int v25 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v26, (uint64_t)&v24);
  MEMORY[0x19972EAD0](&v23, a5);
  WebCore::buildClientDataJson();
  unsigned int v14 = v23;
  uint64_t v23 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (v27 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9CC2E8[v27])(&v23, &v26);
  }
  int v27 = -1;
  if (v25 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::DeferrableRefCountedBase **))off_1EE9CC2E8[v25])(&v23, &v24);
  }
  uint64_t v15 = JSC::ArrayBuffer::span(v28);
  uint64_t v17 = v16;
  id v18 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  *a1 = objc_msgSend(v18, "initWithBytes:length:", v15, v17, v23);
  uint64_t v20 = v28;
  uint64_t v28 = 0;
  if (v20) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
  }
  uint64_t v21 = v29;
  unint64_t v29 = 0;
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v19);
  }
  uint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  return result;
}

void sub_198C8F434(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, WTF::StringImpl *a13, int a14, uint64_t a15, WTF *a16, WTF::DeferrableRefCountedBase *a17)
{
  id v18 = a9;
  a9 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (a14 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9CC2E8[a14])(&a9, &a13);
  }
  a14 = -1;
  if (a12 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9CC2E8[a12])(&a9, &a10);
  }
  char v19 = a16;
  a16 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, a2);
  }
  uint64_t v20 = a17;
  a17 = 0;
  if (v20) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
  }
  _Unwind_Resume(exception_object);
}

PAL::CryptoDigest *produceClientDataJsonHash(NSData *a1, void *a2)
{
  PAL::CryptoDigest::create();
  if (a2)
  {
    [a2 bytes];
    [a2 length];
  }
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash((uint64_t *)a1, v7);
  uint64_t result = v7;
  if (v7)
  {
    PAL::CryptoDigest::~CryptoDigest(v7);
    return (PAL::CryptoDigest *)WTF::fastFree(v5, v6);
  }
  return result;
}

void sub_198C8F5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PAL::CryptoDigest *a10)
{
  if (a10)
  {
    PAL::CryptoDigest::~CryptoDigest(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C8F7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF *a47)
{
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a47);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a10);
  _Block_release(v47);
  _Unwind_Resume(a1);
}

void sub_198C8FB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(v12 + 64));
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(v12 + 16));
  uint64_t v15 = a10;
  a10 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v11);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v10 + 32));
  uint64_t v17 = *(WTF::StringImpl **)(v10 + 24);
  *(void *)(v10 + 24) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = *(unsigned int *)(v10 + 8);
  if (v18 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9CC2E8[v18])(&a10, v10);
  }
  *(_DWORD *)(v10 + 8) = -1;
  _Unwind_Resume(a1);
}

void sub_198C8FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, __int16 a12, int a13, int a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF *a40,int a41,CFTypeRef cf,WTF *a43)
{
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a43);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a20);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a17);
  uint64_t v47 = a16;
  a16 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v46);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  if (a14 != -1) {
    ((void (*)(char *, __int16 *))off_1EE9CC2E8[a14])(&a10, &a12);
  }
  if (v43) {
    CFRelease(v43);
  }
  _Block_release(v44);
  char v49 = a40;
  if (a40)
  {
    a40 = 0;
    a41 = 0;
    WTF::fastFree(v49, v48);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_198C8FFA8()
{
  if (!v0) {
    JUMPOUT(0x198C8FFA0);
  }
  JUMPOUT(0x198C8FF98);
}

void sub_198C8FFB4()
{
}

void sub_198C9020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF *a38)
{
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a38);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a18);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a15);
  uint64_t v41 = a14;
  a14 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t *, char *))off_1EE9CC2E8[a12])(&a9, &a10);
  }
  _Block_release(v38);
  _Unwind_Resume(a1);
}

void sub_198C90508(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a20);
  uint64_t v23 = *(WTF **)(v20 - 48);
  if (v23)
  {
    *(void *)(v20 - 48) = 0;
    *(_DWORD *)(v20 - 40) = 0;
    WTF::fastFree(v23, v22);
  }
  _Unwind_Resume(a1);
}

void sub_198C906F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a28);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a25);
  uint64_t v31 = a24;
  a24 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (a22 != -1) {
    ((void (*)(__int16 *, char *))off_1EE9CC2E8[a22])(&a16, &a20);
  }
  uint64_t v32 = *(WTF **)(v28 - 48);
  if (v32)
  {
    *(void *)(v28 - 48) = 0;
    *(_DWORD *)(v28 - 40) = 0;
    WTF::fastFree(v32, v30);
  }
  _Unwind_Resume(a1);
}

void sub_198C90960(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a20);
  uint64_t v23 = *(WTF **)(v20 - 96);
  if (v23)
  {
    *(void *)(v20 - 96) = 0;
    *(_DWORD *)(v20 - 88) = 0;
    WTF::fastFree(v23, v22);
  }
  _Unwind_Resume(a1);
}

void sub_198C90BB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a28);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a25);
  uint64_t v31 = a24;
  a24 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (a22 != -1) {
    ((void (*)(__int16 *, char *))off_1EE9CC2E8[a22])(&a16, &a20);
  }
  uint64_t v32 = *(WTF **)(v28 - 80);
  if (v32)
  {
    *(void *)(v28 - 80) = 0;
    *(_DWORD *)(v28 - 72) = 0;
    WTF::fastFree(v32, v30);
  }
  _Unwind_Resume(a1);
}

void sub_198C910C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (LOBYTE(STACK[0x220])) {
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a45, a2);
  }
  _Unwind_Resume(a1);
}

void sub_198C91380(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 256)) {
    WebCore::NotificationData::~NotificationData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C9167C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C917B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C918D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C91B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    WTF::fastFree(v10, v13);
  }
  _Unwind_Resume(a1);
}

void sub_198C91C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C91D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Block_release(v11);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C91E70(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198C91F48(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198C92080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C9219C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void API::WebPushMessage::~WebPushMessage(API::WebPushMessage *this, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88, a2);
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v6 = (WTF *)*((void *)this + 2);
    if (v6)
    {
      *((void *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v6, v3);
    }
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t vars8;

  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88, a2);
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v6 = (WTF *)*((void *)this + 2);
    if (v6)
    {
      *((void *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v6, v3);
    }
  }

  JUMPOUT(0x199740C10);
}

void sub_198C923CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C92470(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C92508(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void API::WebPushSubscriptionData::~WebPushSubscriptionData(API::WebPushSubscriptionData *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  int v5 = (WTF *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  int v5 = (WTF *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

void sub_198C926E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C927A0(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C92840(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C928E0(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C9300C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C93178(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C9391C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C939B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C95008(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<WebKit::WebAuthenticationPanelClient>::reset[abi:sn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    objc_destroyWeak((id *)(v1 + 24));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v2);
    return (uint64_t *)WTF::fastFree((WTF *)v1, v3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(uint64_t **a1, cbor::CBORValue *this)
{
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)a1, &v8, this);
  unint64_t v4 = *v3;
  if (!*v3)
  {
    int v5 = v3;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a1, (uint64_t)v7);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, v8, v5, v7[0]);
    unint64_t v4 = v7[0];
    v7[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100]((uint64_t)v7, 0);
  }
  return v4;
}

void *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>(uint64_t a1, void *a2, cbor::CBORValue *this)
{
  int v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        id v9 = (cbor::CBORValue *)(v4 + 4);
        if (!cbor::CBORValue::CTAPLess::operator()(v7, this, (cbor::CBORValue *)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!cbor::CBORValue::CTAPLess::operator()(v7, v9, this)) {
        break;
      }
      int v5 = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t result = std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(v4 + 32);
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void sub_198C95478(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL cbor::CBORValue::CTAPLess::operator()(int a1, cbor::CBORValue *this, cbor::CBORValue *a3)
{
  int v3 = *(_DWORD *)this;
  BOOL v4 = *(_DWORD *)this < *(_DWORD *)a3;
  if (*(_DWORD *)this != *(_DWORD *)a3) {
    return v4;
  }
  if (v3 != 3)
  {
    if (v3 == 1)
    {
      uint64_t v13 = *(void *)cbor::CBORValue::getInteger(this);
      return v13 > *(void *)cbor::CBORValue::getInteger(a3);
    }
    if (v3) {
      return 0;
    }
    uint64_t v6 = *(void *)cbor::CBORValue::getInteger(this);
    return v6 < *(void *)cbor::CBORValue::getInteger(a3);
  }
  String = (WTF **)cbor::CBORValue::getString(this);
  if (*String) {
    unsigned int v9 = *((_DWORD *)*String + 1);
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(const WTF::StringImpl **)cbor::CBORValue::getString(a3);
  if (v10) {
    unsigned int v12 = *((_DWORD *)v10 + 1);
  }
  else {
    unsigned int v12 = 0;
  }
  if (v9 == v12) {
    return WTF::codePointCompare(*String, v10, v11) >> 31;
  }
  else {
    return v9 < v12;
  }
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(uint64_t a1)
{
  uint64_t v2 = cbor::CBORValue::CBORValue();
  cbor::CBORValue::CBORValue((cbor::CBORValue *)(v2 + 32));
  return a1;
}

void sub_198C9560C(_Unwind_Exception *a1)
{
  cbor::CBORValue::~CBORValue(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  *(void *)uint64_t result = a2;
  if (v2)
  {
    if (*(unsigned char *)(result + 16))
    {
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v2 + 64));
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v2 + 32));
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

void *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(uint64_t a1, cbor::CBORValue *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = cbor::CBORValue::CTAPLess::operator()(v5, (cbor::CBORValue *)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || cbor::CBORValue::CTAPLess::operator()(v5, a2, (cbor::CBORValue *)(v6 + 4))) {
    return v2;
  }
  return v6;
}

void wkAuthenticatorAttestationResponse(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = [_WKAuthenticatorAttestationResponse alloc];
  uint64_t v9 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 8));
  uint64_t v21 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v9 length:v10];
  if (*(unsigned char *)(a2 + 96))
  {
    WebCore::AuthenticationExtensionsClientOutputs::toCBOR((uint64_t *)&v22, (WebCore::AuthenticationExtensionsClientOutputs *)(a2 + 16));
    CFTypeRef v11 = (id)CFMakeCollectable((CFTypeRef)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v22 length:v24]);
    uint64_t v12 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 112));
    unsigned int v14 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v12 length:v13];
    if (a4) {
      uint64_t v15 = 2;
    }
    else {
      uint64_t v15 = 1;
    }
    uint64_t v16 = objc_opt_new();
    uint64_t v17 = *(unsigned int *)(a2 + 156);
    if (v17)
    {
      uint64_t v18 = *(unsigned __int8 **)(a2 + 144);
      do
      {
        objc_msgSend(v16, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", *v18++));
        --v17;
      }
      while (v17);
    }
    *a1 = [(_WKAuthenticatorAttestationResponse *)v8 initWithClientDataJSON:a3 rawId:v21 extensionOutputsCBOR:v11 attestationObject:v14 attachment:v15 transports:(id)CFMakeCollectable(v16)];
    if (v14) {
      CFRelease(v14);
    }
    uint64_t v20 = v22;
    if (v22)
    {
      int v22 = 0;
      int v23 = 0;
      WTF::fastFree(v20, v19);
    }
    if (v21) {
      CFRelease(v21);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_198C95B30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  if (v12) {
    CFRelease(v12);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void wkAuthenticatorAssertionResponse(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(JSC::ArrayBuffer **)(a2 + 136);
  if (v8)
  {
    uint64_t v9 = JSC::ArrayBuffer::span(v8);
    unsigned int v26 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v9 length:v10];
  }
  else
  {
    unsigned int v26 = 0;
  }
  CFTypeRef v11 = [_WKAuthenticatorAssertionResponse alloc];
  uint64_t v12 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 8));
  uint64_t v14 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v12 length:v13];
  if (*(unsigned char *)(a2 + 96))
  {
    uint64_t v15 = (const void *)v14;
    WebCore::AuthenticationExtensionsClientOutputs::toCBOR((uint64_t *)&v27, (WebCore::AuthenticationExtensionsClientOutputs *)(a2 + 16));
    CFTypeRef v16 = (id)CFMakeCollectable((CFTypeRef)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v27 length:v29]);
    uint64_t v17 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 120));
    char v19 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v17 length:v18];
    uint64_t v20 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 128));
    int v22 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v20 length:v21];
    uint64_t v23 = 1;
    if (a4) {
      uint64_t v23 = 2;
    }
    *a1 = [(_WKAuthenticatorAssertionResponse *)v11 initWithClientDataJSON:a3 rawId:v15 extensionOutputsCBOR:v16 authenticatorData:v19 signature:v22 userHandle:v26 attachment:v23];
    if (v22) {
      CFRelease(v22);
    }
    if (v19) {
      CFRelease(v19);
    }
    int v25 = v27;
    if (v27)
    {
      int v27 = 0;
      int v28 = 0;
      WTF::fastFree(v25, v24);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v26) {
      CFRelease(v26);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_198C9621C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C9689C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  CFRelease(*(CFTypeRef *)(v19 + 8));
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9CC448[a19])(v20 - 57, &a9);
  }
  _Unwind_Resume(a1);
}

__n128 API::WebPushSubscriptionData::create(__n128 **a1, __n128 *a2)
{
  BOOL v4 = (__n128 *)API::Object::newObject(0x60uLL, 122);
  v4->n128_u64[0] = (unint64_t)&unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  v4->n128_u64[0] = (unint64_t)&unk_1EE9CC430;
  v4[1].n128_u64[0] = a2->n128_u64[0];
  unint64_t v5 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  v4[1].n128_u64[1] = v5;
  __n128 result = a2[1];
  v4[2] = result;
  v4[3].n128_u64[0] = 0;
  v4[3].n128_u64[1] = 0;
  unint64_t v7 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  v4[3].n128_u64[0] = v7;
  LODWORD(v7) = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = 0;
  v4[3].n128_u32[2] = v7;
  LODWORD(v7) = a2[2].n128_u32[3];
  a2[2].n128_u32[3] = 0;
  v4[3].n128_u32[3] = v7;
  v4[4].n128_u64[0] = 0;
  v4[4].n128_u64[1] = 0;
  unint64_t v8 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  v4[4].n128_u64[0] = v8;
  LODWORD(v8) = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  v4[4].n128_u32[2] = v8;
  LODWORD(v8) = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = 0;
  v4[4].n128_u32[3] = v8;
  v4[5].n128_u64[0] = 0;
  v4[5].n128_u64[1] = 0;
  unint64_t v9 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = 0;
  v4[5].n128_u64[0] = v9;
  LODWORD(v9) = a2[4].n128_u32[2];
  a2[4].n128_u32[2] = 0;
  v4[5].n128_u32[2] = v9;
  LODWORD(v9) = a2[4].n128_u32[3];
  a2[4].n128_u32[3] = 0;
  v4[5].n128_u32[3] = v9;
  *a1 = v4;
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)122>::type()
{
  return 122;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::PushSubscriptionData::PushSubscriptionData(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  int v3 = *(_DWORD **)(a3 + 8);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(a2 + 8) = v3;
}

uint64_t WebCore::PushSubscriptionData::PushSubscriptionData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  BOOL v4 = *(_DWORD **)(a2 + 8);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  unint64_t v5 = (WTF *)*(unsigned int *)(a2 + 44);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v5;
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a1 + 40) = v5;
    *(void *)(a1 + 32) = v6;
    memcpy(v6, *(const void **)(a2 + 32), *(unsigned int *)(a2 + 44));
  }
  unint64_t v7 = (WTF *)*(unsigned int *)(a2 + 60);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = v7;
  if (v7)
  {
    unint64_t v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(a1 + 56) = v7;
    *(void *)(a1 + 48) = v8;
    memcpy(v8, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
  }
  unint64_t v9 = (WTF *)*(unsigned int *)(a2 + 76);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v9;
  if (v9)
  {
    uint64_t v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(a1 + 72) = v9;
    *(void *)(a1 + 64) = v10;
    memcpy(v10, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  return a1;
}

void sub_198C96BEC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  unint64_t v8 = *(WTF::StringImpl **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C96E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9CC490[a12])(&a18, &a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  int v3 = *(_DWORD **)(a3 + 8);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(a2 + 8) = v3;
}

void sub_198C97168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  CFRelease(*(CFTypeRef *)(v34 + 8));
  std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, v36);
  if (a33 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9CC4D8[a33])(&a9, v33);
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WebCore::PushSubscriptionData,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    WebCore::PushSubscriptionData::PushSubscriptionData((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_198C97214(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return std::__optional_copy_base<WebCore::PushSubscriptionData,false>::__optional_copy_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  int v3 = *(_DWORD **)(a3 + 8);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(a2 + 8) = v3;
}

void sub_198C9744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  CFRelease(*(CFTypeRef *)(v14 + 8));
  std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v16);
  _Unwind_Resume(a1);
}

uint64_t API::ObjectImpl<(API::Object::Type)121>::type()
{
  return 121;
}

uint64_t WebKit::WebPushMessage::WebPushMessage(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    *(unsigned char *)(a1 + 16) = 1;
  }
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v5;
  WTF::URL::URL(a1 + 32, a2 + 4);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 72), (uint64_t)(a2 + 9));
  return a1;
}

void sub_198C97658(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = *v3;
  *int v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 16))
  {
    unint64_t v7 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>((uint64_t)a1, a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_198C97718(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    WTF::URL::URL(result, (uint64_t *)a2);
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(v5 + 40) = v4;
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
    std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](v5 + 64, a2 + 64);
    *(unsigned char *)(v3 + 128) = *(unsigned char *)(a2 + 128);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198C97788(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[5];
  v2[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *v2;
  *uint64_t v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WebCore::NotificationPayload,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>((uint64_t)a1, a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_198C97820(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v4 += 2;
    }
    *(void *)__n128 result = v4;
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = v5;
    uint64_t v6 = *(_DWORD **)(a2 + 40);
    if (v6) {
      *v6 += 2;
    }
    *(void *)(result + 40) = v6;
    *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
    std::__optional_copy_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(result + 64), a2 + 64);
    *(unsigned char *)(v3 + 128) = *(unsigned char *)(a2 + 128);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198C978C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[5];
  v2[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = *v2;
  *uint64_t v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[56] = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>((uint64_t)a1, a2);
    a1[56] = 1;
  }
  return a1;
}

void sub_198C97958(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*((unsigned char *)v2 + 56)) {
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(unsigned char *)__n128 result = *(unsigned char *)a2;
    uint64_t v2 = *(_DWORD **)(a2 + 8);
    if (v2) {
      *v2 += 2;
    }
    *(void *)(result + 8) = v2;
    uint64_t v3 = *(_DWORD **)(a2 + 16);
    if (v3) {
      *v3 += 2;
    }
    *(void *)(result + 16) = v3;
    uint64_t v4 = *(_DWORD **)(a2 + 24);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + 24) = v4;
    long long v5 = *(_DWORD **)(a2 + 32);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(result + 32) = v5;
    uint64_t v6 = *(_DWORD **)(a2 + 40);
    if (v6) {
      *v6 += 2;
    }
    *(void *)(result + 40) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198C97D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9CC598[a12])(&a18, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(_DWORD **)(a3 + 8);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(a2 + 8) = v3;
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!BYTE3(v3))
  {
    long long v5 = (WebCore::NotificationData *)WTF::fastMalloc((WTF *)(v3 << 8));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      unint64_t v7 = *(const WebCore::NotificationData **)a2;
      uint64_t v8 = v6 << 8;
      do
      {
        long long v5 = (WebCore::NotificationData *)((char *)WebCore::NotificationData::NotificationData(v5, v7) + 256);
        unint64_t v7 = (const WebCore::NotificationData *)((char *)v7 + 256);
        v8 -= 256;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198C97E30(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FileSystemStorageManager::~FileSystemStorageManager(WebKit::FileSystemStorageManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 4);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != v4)
  {
    id v43 = v6;
    unint64_t v44 = v3;
    while (1)
    {
      uint64_t v7 = v4[1];
      if (v7)
      {
        uint64_t v8 = *(unsigned int *)(v7 - 4);
        unint64_t v9 = (uint64_t *)(v7 + 8 * v8);
        if (*(_DWORD *)(v7 - 12))
        {
          uint64_t v10 = (uint64_t *)v4[1];
          if (v8)
          {
            uint64_t v11 = 8 * v8;
            uint64_t v10 = (uint64_t *)v4[1];
            while ((unint64_t)(*v10 + 1) <= 1)
            {
              ++v10;
              v11 -= 8;
              if (!v11)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
LABEL_13:
          uint64_t v12 = (uint64_t *)(v7 + 8 * *(unsigned int *)(v7 - 4));
          goto LABEL_18;
        }
        uint64_t v10 = (uint64_t *)(v7 + 8 * v8);
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v8 = 0;
      }
      unint64_t v9 = (uint64_t *)(v7 + 8 * v8);
      if (v7) {
        goto LABEL_13;
      }
      uint64_t v12 = 0;
LABEL_18:
      if (v12 != v10)
      {
        while (1)
        {
          uint64_t v47 = *v10;
          uint64_t v13 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 5, &v47);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take((uint64_t *)this + 5, v13, &v46);
          WebKit::FileSystemStorageHandleRegistry::unregisterHandle(*((void *)this + 2), v47);
          uint64_t v14 = (WTF::StringImpl *)v46;
          if (*(unsigned char *)(v46 + 64)) {
            break;
          }
          uint64_t v46 = 0;
LABEL_35:
          std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v46, v14);
LABEL_36:
          unsigned int v29 = v10 + 1;
          uint64_t v10 = v9;
          if (v29 != v9)
          {
            uint64_t v10 = v29;
            while ((unint64_t)(*v10 + 1) <= 1)
            {
              if (++v10 == v9)
              {
                uint64_t v10 = v9;
                break;
              }
            }
          }
          if (v10 == v12) {
            goto LABEL_46;
          }
        }
        v45[0] = *(void *)(v46 + 48);
        v45[1] = 1;
        IPC::Connection::connection(*v4, &v48);
        uint64_t v15 = (uint64_t)v48;
        if (v48)
        {
          CFTypeRef v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)CFTypeRef v16 = 1736;
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 66) = (char *)v16 + 16;
          *((void *)v16 + 67) = 512;
          *((void *)v16 + 68) = 0;
          *((void *)v16 + 70) = 0;
          *((void *)v16 + 69) = 0;
          IPC::Encoder::encodeHeader(v16);
          char v49 = v16;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v16, v45);
          IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v49, 0, 0);
          uint64_t v18 = v49;
          char v49 = 0;
          if (v18)
          {
            IPC::Encoder::~Encoder(v18, v17);
            WTF::fastFree(v30, v31);
          }
          uint64_t v19 = v48;
          int v48 = 0;
          if (v19)
          {
            char v20 = 0;
            atomic_uchar *volatile v21 = *v19;
            atomic_compare_exchange_strong_explicit(*v19, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
            if (v20) {
              MEMORY[0x19972E8D0](v21);
            }
            uint64_t v22 = *((void *)v21 + 1);
            uint64_t v23 = v22 - 1;
            *((void *)v21 + 1) = v22 - 1;
            if (v22 == 1)
            {
              uint64_t v32 = *((void *)v21 + 2);
              uint64_t v25 = *((void *)v21 + 3);
              *((void *)v21 + 3) = 0;
              BOOL v24 = v32 == 0;
            }
            else
            {
              BOOL v24 = 0;
              uint64_t v25 = 0;
            }
            int v26 = 1;
            atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
            if (v26 == 1)
            {
              if (!v23)
              {
LABEL_30:
                uint64_t v27 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v27 = &unk_1EE9B37E8;
                *(void *)(v27 + 8) = v21;
                *(void *)(v27 + 16) = v25;
                *(unsigned char *)(v27 + 24) = v24;
                char v49 = (IPC::Encoder *)v27;
                WTF::ensureOnMainRunLoop();
                int v28 = v49;
                char v49 = 0;
                if (v28) {
                  (*(void (**)(IPC::Encoder *))(*(void *)v28 + 8))(v28);
                }
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v21);
              if (!v23) {
                goto LABEL_30;
              }
            }
          }
        }
        uint64_t v14 = (WTF::StringImpl *)v46;
        uint64_t v46 = 0;
        if (!v14) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_46:
      v4 += 2;
      uint64_t v3 = v44;
      while (v4 != v44)
      {
        if ((unint64_t)(*v4 + 1) > 1) {
          goto LABEL_51;
        }
        v4 += 2;
      }
      uint64_t v4 = v44;
LABEL_51:
      if (v4 == v43)
      {
        uint64_t v5 = *v2;
        break;
      }
    }
  }
  if (v5)
  {
    *uint64_t v2 = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, v3);
  }
  uint64_t v33 = (WTF::StringImpl **)*((void *)this + 6);
  if (v33)
  {
    *((void *)this + 6) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v3);
    uint64_t v34 = (WTF::StringImpl **)*((void *)this + 6);
    if (v34) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, (WTF::StringImpl *)v3);
    }
  }
  uint64_t v35 = *((void *)this + 5);
  if (v35)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    if (v36)
    {
      char v37 = (void **)(v35 + 8);
      do
      {
        if (*(v37 - 1) != (void *)-1)
        {
          uint64_t v3 = (uint64_t *)*v37;
          *char v37 = 0;
          if (v3) {
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v37, (WTF::StringImpl *)v3);
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    WTF::fastFree((WTF *)(v35 - 16), v3);
  }
  if (*v2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*v2, v3);
  }
  uint64_t v38 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v38) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v38 + 8))(v38, v3);
  }
  uint64_t v39 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v39)
  {
    if (!atomic_load(v39))
    {
      __break(0xC471u);
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF);
  }
  uint64_t v41 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    unsigned int v42 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v42)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v42, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v3);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

BOOL WebKit::FileSystemStorageManager::isActive(WebKit::FileSystemStorageManager *this)
{
  uint64_t v1 = *((void *)this + 5);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

uint64_t WebKit::FileSystemStorageManager::allocatedUnusedCapacity(WebKit::FileSystemStorageManager *this)
{
  uint64_t v2 = (const WTF::String *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 5);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = (const WTF::String *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t v8 = 0;
  char v9 = 0;
  do
  {
    unint64_t v10 = WebKit::FileSystemStorageHandle::allocatedUnusedCapacity(*((WebKit::FileSystemStorageHandle **)v4 + 1), v3);
    if (__CFADD__(v8, v10)) {
      char v9 = 1;
    }
    if (!__CFADD__(v8, v10)) {
      v8 += v10;
    }
    while (1)
    {
      uint64_t v4 = (const WTF::String *)((char *)v4 + 16);
      if (v4 == v5) {
        break;
      }
      if ((unint64_t)(*(void *)v4 + 1) > 1) {
        goto LABEL_15;
      }
    }
    uint64_t v4 = v5;
LABEL_15:
    ;
  }
  while (v4 != v7);
  if (v9) {
    return 0;
  }
  else {
    return v8;
  }
}

void WebKit::FileSystemStorageManager::createHandle(WTF::FileSystemImpl *this@<X3>, uint64_t a2@<X0>, const WTF::String *a3@<X1>, BOOL a4@<X2>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4)) {
    goto LABEL_28;
  }
  int v14 = WTF::FileSystemImpl::fileExists(this, a3);
  if ((a6 & 1) == 0 && (v14 & 1) == 0)
  {
    char v16 = 2;
LABEL_29:
    *(unsigned char *)a7 = v16;
    *(_DWORD *)(a7 + 8) = 1;
    return;
  }
  if (v14)
  {
    uint64_t v17 = WTF::FileSystemImpl::fileType(this, v15);
    if ((v17 & 0xFF00000000) == 0)
    {
LABEL_28:
      char v16 = 7;
      goto LABEL_29;
    }
    BOOL v18 = v17 != 0;
    if (a4 != 2)
    {
      BOOL v19 = v18 == a4;
      BOOL v18 = a4;
      if (!v19)
      {
        char v16 = 6;
        goto LABEL_29;
      }
    }
  }
  else
  {
    BOOL v18 = a4;
  }
  WebKit::FileSystemStorageHandle::create(this, (unsigned int *)a2, (const WTF::String *)v18, a5, &v78);
  if (!v78) {
    goto LABEL_28;
  }
  uint64_t v21 = *((void *)v78 + 1);
  uint64_t v23 = (uint64_t *)(a2 + 32);
  uint64_t v22 = *(void *)(a2 + 32);
  if (v22
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a2 + 32), 0), (uint64_t v22 = *v23) != 0))
  {
    int v24 = *(_DWORD *)(v22 - 8);
  }
  else
  {
    int v24 = 0;
  }
  unint64_t v25 = ((unint64_t)a3 + ~((void)a3 << 32)) ^ (((unint64_t)a3 + ~((void)a3 << 32)) >> 22);
  unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  unsigned int v28 = v24 & ((v27 >> 31) ^ v27);
  unsigned int v29 = (uint64_t *)(v22 + 16 * v28);
  uint64_t v30 = *v29;
  if (!*v29)
  {
LABEL_24:
    uint64_t v33 = v29[1];
    *unsigned int v29 = (uint64_t)a3;
    v29[1] = 0;
    if (v33) {
      WTF::fastFree((WTF *)(v33 - 16), v20);
    }
    uint64_t v34 = *v23;
    if (*v23) {
      int v35 = *(_DWORD *)(v34 - 12) + 1;
    }
    else {
      int v35 = 1;
    }
    *(_DWORD *)(v34 - 12) = v35;
    uint64_t v36 = *v23;
    if (*v23) {
      int v37 = *(_DWORD *)(v36 - 12);
    }
    else {
      int v37 = 0;
    }
    uint64_t v38 = (*(_DWORD *)(v36 - 16) + v37);
    unint64_t v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38) {
        goto LABEL_38;
      }
    }
    else if (3 * v39 > 4 * v38)
    {
      goto LABEL_38;
    }
    unsigned int v29 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a2 + 32), v29);
    goto LABEL_38;
  }
  uint64_t v31 = 0;
  int v32 = 1;
  while ((const WTF::String *)v30 != a3)
  {
    if (v30 == -1) {
      uint64_t v31 = v29;
    }
    unsigned int v28 = (v28 + v32) & v24;
    unsigned int v29 = (uint64_t *)(v22 + 16 * v28);
    uint64_t v30 = *v29;
    ++v32;
    if (!*v29)
    {
      if (v31)
      {
        *uint64_t v31 = 0;
        v31[1] = 0;
        --*(_DWORD *)(*v23 - 16);
        unsigned int v29 = v31;
      }
      goto LABEL_24;
    }
  }
LABEL_38:
  uint64_t v42 = v29[1];
  uint64_t v41 = v29 + 1;
  uint64_t v40 = v42;
  if (v42
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v41, 0), (uint64_t v40 = *v41) != 0))
  {
    int v43 = *(_DWORD *)(v40 - 8);
  }
  else
  {
    int v43 = 0;
  }
  unint64_t v44 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
  unint64_t v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
  unint64_t v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
  unsigned int v47 = (v46 >> 31) ^ v46;
  unsigned int v48 = v43 & v47;
  char v49 = (uint64_t *)(v40 + 8 * (v43 & v47));
  uint64_t v50 = *v49;
  if (!*v49)
  {
LABEL_49:
    *char v49 = v21;
    uint64_t v53 = *v41;
    if (*v41) {
      int v54 = *(_DWORD *)(v53 - 12) + 1;
    }
    else {
      int v54 = 1;
    }
    *(_DWORD *)(v53 - 12) = v54;
    uint64_t v55 = *v41;
    if (*v41) {
      int v56 = *(_DWORD *)(v55 - 12);
    }
    else {
      int v56 = 0;
    }
    uint64_t v57 = (*(_DWORD *)(v55 - 16) + v56);
    unint64_t v58 = *(unsigned int *)(v55 - 4);
    if (v58 > 0x400)
    {
      if (v58 > 2 * v57) {
        goto LABEL_58;
      }
    }
    else if (3 * v58 > 4 * v57)
    {
      goto LABEL_58;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v41, v49);
    goto LABEL_58;
  }
  int v51 = 0;
  int v52 = 1;
  while (v50 != v21)
  {
    if (v50 == -1) {
      int v51 = v49;
    }
    unsigned int v48 = (v48 + v52) & v43;
    char v49 = (uint64_t *)(v40 + 8 * v48);
    uint64_t v50 = *v49;
    ++v52;
    if (!*v49)
    {
      if (v51)
      {
        *int v51 = 0;
        --*(_DWORD *)(*v41 - 16);
        char v49 = v51;
      }
      goto LABEL_49;
    }
  }
LABEL_58:
  uint64_t v59 = *(void *)(a2 + 16);
  uint64_t v80 = v21;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::FileSystemStorageHandle&>((uint64_t *)(v59 + 8), &v80, v78, (uint64_t)v79);
  uint64_t v62 = *(void *)(a2 + 40);
  uint64_t v61 = (uint64_t *)(a2 + 40);
  uint64_t v60 = v62;
  if (v62
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v61, 0), (uint64_t v60 = *v61) != 0))
  {
    int v63 = *(_DWORD *)(v60 - 8);
  }
  else
  {
    int v63 = 0;
  }
  unsigned int v64 = v63 & v47;
  uint64_t v65 = (uint64_t *)(v60 + 16 * (v63 & v47));
  uint64_t v66 = *v65;
  if (*v65)
  {
    uint64_t v67 = 0;
    int v68 = 1;
    while (v66 != v21)
    {
      if (v66 == -1) {
        uint64_t v67 = v65;
      }
      unsigned int v64 = (v64 + v68) & v63;
      uint64_t v65 = (uint64_t *)(v60 + 16 * v64);
      uint64_t v66 = *v65;
      ++v68;
      if (!*v65)
      {
        if (v67)
        {
          *uint64_t v67 = 0;
          v67[1] = 0;
          --*(_DWORD *)(*v61 - 16);
          uint64_t v65 = v67;
        }
        goto LABEL_69;
      }
    }
    goto LABEL_80;
  }
LABEL_69:
  uint64_t *v65 = v21;
  uint64_t v69 = (WTF::StringImpl *)v65[1];
  long long v70 = v78;
  uint64_t v78 = 0;
  v65[1] = (uint64_t)v70;
  if (v69) {
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)(v65 + 1), v69);
  }
  uint64_t v71 = *v61;
  if (*v61) {
    int v72 = *(_DWORD *)(v71 - 12) + 1;
  }
  else {
    int v72 = 1;
  }
  *(_DWORD *)(v71 - 12) = v72;
  uint64_t v73 = *v61;
  if (*v61) {
    int v74 = *(_DWORD *)(v73 - 12);
  }
  else {
    int v74 = 0;
  }
  uint64_t v75 = (*(_DWORD *)(v73 - 16) + v74);
  unint64_t v76 = *(unsigned int *)(v73 - 4);
  if (v76 <= 0x400)
  {
    if (3 * v76 > 4 * v75) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v76 <= 2 * v75) {
LABEL_79:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v61, v65);
LABEL_80:
  *(void *)a7 = v21;
  *(_DWORD *)(a7 + 8) = 0;
  uint64_t v77 = (WTF::StringImpl *)v78;
  uint64_t v78 = 0;
  if (v77) {
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v78, v77);
  }
}

uint64_t WebKit::FileSystemStorageManager::getType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 40), &v6);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  if (v4 == v3) {
    return 2;
  }
  else {
    return *(unsigned __int8 *)(*(void *)(v3 + 8) + 24);
  }
}

void WebKit::FileSystemStorageManager::closeHandle(WebKit::FileSystemStorageManager *this, WebKit::FileSystemStorageHandle *a2)
{
  uint64_t v16 = *((void *)a2 + 1);
  uint64_t v3 = (uint64_t *)((char *)this + 40);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 5, &v16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take(v3, v4, &v15);
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    unint64_t v10 = (void *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  }
  else {
    unint64_t v10 = 0;
  }
  if (v10 != v5)
  {
    while (1)
    {
      uint64_t v11 = (void *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v6 + 1, &v16);
      uint64_t v12 = v6[1];
      if (v12) {
        break;
      }
      if (v11)
      {
        uint64_t v13 = 0;
        goto LABEL_16;
      }
LABEL_9:
      while (1)
      {
        v6 += 2;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v8;
LABEL_13:
      if (v6 == v10) {
        goto LABEL_18;
      }
    }
    uint64_t v13 = (void *)(v12 + 8 * *(unsigned int *)(v12 - 4));
    if (v13 == v11) {
      goto LABEL_9;
    }
LABEL_16:
    if (v13 != v11) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v6 + 1, v11);
    }
  }
LABEL_18:
  WebKit::FileSystemStorageHandleRegistry::unregisterHandle(*((void *)this + 2), v16);
  int v14 = v15;
  uint64_t v15 = 0;
  if (v14) {
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v15, v14);
  }
}

uint64_t WebKit::FileSystemStorageManager::connectionClosed(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3 = (uint64_t *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    uint64_t v4 = (uint64_t *)result;
    unsigned int v5 = *(_DWORD *)(v2 - 8);
    unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
    unint64_t v10 = *(WTF::StringImpl **)(v2 + 16 * v9);
    if (v10 != a2)
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v5;
        unint64_t v10 = *(WTF::StringImpl **)(v2 + 16 * v9);
        ++v11;
        if (v10 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v2 - 4))
    {
      uint64_t v12 = (void *)(v2 + 16 * v9);
      int v14 = v12 + 1;
      uint64_t v13 = v12[1];
      if (!v13 || (uint64_t v15 = *(unsigned int *)(v13 - 12), !v15))
      {
        uint64_t v22 = 0;
        char v23 = 1;
        goto LABEL_62;
      }
      unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
      unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
      unint64_t v18 = (v17 | HIWORD(v17)) + 1;
      if (v18 > 0x400)
      {
        if (v18 > 2 * v15) {
          goto LABEL_17;
        }
      }
      else if (3 * v18 > 4 * v15)
      {
LABEL_14:
        double v19 = (double)v15;
        double v20 = (double)v18;
        double v21 = 0.604166667;
        goto LABEL_18;
      }
      LODWORD(v18) = 2 * v18;
      if (v18 <= 0x400) {
        goto LABEL_14;
      }
LABEL_17:
      double v19 = (double)v15;
      double v20 = (double)v18;
      double v21 = 0.416666667;
LABEL_18:
      if (v20 * v21 <= v19) {
        LODWORD(v18) = 2 * v18;
      }
      if (v18 <= 8) {
        uint64_t v24 = 8;
      }
      else {
        uint64_t v24 = v18;
      }
      __n128 result = WTF::fastZeroedMalloc((WTF *)(8 * v24 + 16));
      int v25 = v24 - 1;
      *(_DWORD *)(result + 8) = v24 - 1;
      *(_DWORD *)(result + 12) = v24;
      *(_DWORD *)__n128 result = 0;
      *(_DWORD *)(result + 4) = v15;
      unint64_t v26 = (void *)*v14;
      if (*v14)
      {
        uint64_t v27 = *((unsigned int *)v26 - 1);
        unsigned int v28 = &v26[v27];
        if (*((_DWORD *)v26 - 3))
        {
          unsigned int v29 = (void *)*v14;
          if (v27)
          {
            uint64_t v30 = 8 * v27;
            unsigned int v29 = (void *)*v14;
            while ((unint64_t)(*v29 + 1) <= 1)
            {
              ++v29;
              v30 -= 8;
              if (!v30)
              {
                unsigned int v29 = v28;
                break;
              }
            }
          }
LABEL_33:
          uint64_t v22 = result + 16;
          if (v26) {
            v26 += *((unsigned int *)v26 - 1);
          }
          while (v29 != v26)
          {
            unint64_t v31 = *v29 + ~(*v29 << 32);
            unint64_t v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
            unint64_t v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
            unsigned int v34 = v25 & (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~(v33 << 27)));
            int v35 = 1;
            do
            {
              unsigned int v36 = v34;
              uint64_t v37 = *(void *)(v22 + 8 * v34);
              unsigned int v34 = (v34 + v35++) & v25;
            }
            while (v37);
            *(void *)(v22 + 8 * v36) = *v29;
            uint64_t v38 = v29 + 1;
            unsigned int v29 = v28;
            if (v38 != v28)
            {
              unsigned int v29 = v38;
              while ((unint64_t)(*v29 + 1) <= 1)
              {
                if (++v29 == v28)
                {
                  unsigned int v29 = v28;
                  break;
                }
              }
            }
          }
          uint64_t v39 = 8 * v24;
          uint64_t v40 = (uint64_t *)(result + 16);
          uint64_t v41 = (uint64_t *)(v22 + 8 * v24);
          while ((unint64_t)(*v40 + 1) <= 1)
          {
            ++v40;
            v39 -= 8;
            if (!v39) {
              goto LABEL_61;
            }
          }
          if (!v39) {
            goto LABEL_61;
          }
          uint64_t v42 = v4 + 5;
LABEL_50:
          uint64_t v78 = *v40;
          int v43 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4 + 5, &v78);
          if (*v42)
          {
            uint64_t v44 = *v42 + 16 * *(unsigned int *)(*v42 - 4);
            if ((void *)v44 == v43) {
              goto LABEL_57;
            }
          }
          else
          {
            if (!v43) {
              goto LABEL_57;
            }
            uint64_t v44 = 0;
          }
          if ((void *)v44 != v43) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v4 + 5, v43);
          }
LABEL_57:
          __n128 result = (uint64_t)WebKit::FileSystemStorageHandleRegistry::unregisterHandle(v4[2], v78);
          while (++v40 != v41)
          {
            if ((unint64_t)(*v40 + 1) > 1)
            {
              if (v40 != v41) {
                goto LABEL_50;
              }
              break;
            }
          }
LABEL_61:
          char v23 = 0;
LABEL_62:
          uint64_t v47 = v4[6];
          unint64_t v45 = v4 + 6;
          uint64_t v46 = v47;
          if (!v47) {
            goto LABEL_96;
          }
          unsigned int v48 = *(_DWORD *)(v46 - 4);
          if (!v48) {
            goto LABEL_96;
          }
          int v49 = 0;
          do
          {
            __n128 result = v46 + 16 * --v48;
            if ((unint64_t)(*(void *)result + 1) >= 2 && (v23 & 1) == 0)
            {
              uint64_t v50 = *(void *)(v46 + 16 * v48 + 8);
              int v51 = *(_DWORD *)(v22 - 8);
              unint64_t v52 = (v50 + ~(v50 << 32)) ^ ((unint64_t)(v50 + ~(v50 << 32)) >> 22);
              unint64_t v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
              unint64_t v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
              unsigned int v55 = v51 & ((v54 >> 31) ^ v54);
              uint64_t v56 = *(void *)(v22 + 8 * v55);
              if (v56 == v50)
              {
LABEL_71:
                __n128 result = (uint64_t)WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)result, a2);
                ++v49;
              }
              else
              {
                int v57 = 1;
                while (v56)
                {
                  unsigned int v55 = (v55 + v57) & v51;
                  uint64_t v56 = *(void *)(v22 + 8 * v55);
                  ++v57;
                  if (v56 == v50) {
                    goto LABEL_71;
                  }
                }
              }
            }
          }
          while (v48);
          uint64_t v58 = *v45;
          if (v49)
          {
            *(_DWORD *)(v58 - 16) += v49;
            uint64_t v59 = *v45;
            if (*v45) {
              int v60 = *(_DWORD *)(v59 - 12);
            }
            else {
              int v60 = 0;
            }
            *(_DWORD *)(v59 - 12) = v60 - v49;
            uint64_t v58 = *v45;
          }
          if (!v58) {
            goto LABEL_96;
          }
          unsigned int v61 = *(_DWORD *)(v58 - 4);
          uint64_t v62 = *(unsigned int *)(v58 - 12);
          if (v61 < 9 || 6 * (int)v62 >= v61) {
            goto LABEL_96;
          }
          unsigned int v64 = (v62 - 1) | ((v62 - 1) >> 1) | (((v62 - 1) | ((v62 - 1) >> 1)) >> 2);
          unsigned int v65 = v64 | (v64 >> 4) | ((v64 | (v64 >> 4)) >> 8);
          unint64_t v66 = (v65 | HIWORD(v65)) + 1;
          if (v66 > 0x400)
          {
            if (v66 > 2 * v62) {
              goto LABEL_89;
            }
          }
          else if (3 * v66 > 4 * v62)
          {
LABEL_87:
            double v67 = (double)v62;
            double v68 = (double)v66;
            double v69 = 0.604166667;
LABEL_90:
            if (v68 * v69 <= v67) {
              LODWORD(v66) = 2 * v66;
            }
            if (v66 <= 8) {
              unsigned int v70 = 8;
            }
            else {
              unsigned int v70 = v66;
            }
            __n128 result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v45, v70, 0);
LABEL_96:
            uint64_t v71 = *v3;
            if (!*v3 || (v71 += 16 * *(unsigned int *)(v71 - 4), (void *)v71 != v12))
            {
              if ((void *)v71 != v12)
              {
                *uint64_t v12 = -1;
                if (*v14) {
                  __n128 result = WTF::fastFree((WTF *)(*v14 - 16), a2);
                }
                ++*(_DWORD *)(*v3 - 16);
                uint64_t v72 = *v3;
                if (*v3) {
                  int v73 = *(_DWORD *)(v72 - 12) - 1;
                }
                else {
                  int v73 = -1;
                }
                *(_DWORD *)(v72 - 12) = v73;
                uint64_t v74 = *v3;
                if (*v3)
                {
                  unsigned int v75 = 6 * *(_DWORD *)(v74 - 12);
                  unsigned int v76 = *(_DWORD *)(v74 - 4);
                  if (v75 < v76 && v76 >= 9) {
                    __n128 result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v76 >> 1, 0);
                  }
                }
              }
            }
            if ((v23 & 1) == 0) {
              return WTF::fastFree((WTF *)(v22 - 16), a2);
            }
            return result;
          }
          LODWORD(v66) = 2 * v66;
          if (v66 <= 0x400) {
            goto LABEL_87;
          }
LABEL_89:
          double v67 = (double)v62;
          double v68 = (double)v66;
          double v69 = 0.416666667;
          goto LABEL_90;
        }
        unsigned int v29 = &v26[v27];
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v27 = 0;
      }
      unsigned int v28 = &v26[v27];
      goto LABEL_33;
    }
  }
  return result;
}

uint64_t WebKit::FileSystemStorageManager::acquireLockForFile(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unint64_t v8 = a3;
  uint64_t v4 = (uint64_t *)(a1 + 48);
  unsigned int v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), a2, a3);
  if ((v5 & 1) == 0) {
    WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>(v4, a2, (const WTF::StringImpl *)&v8, (uint64_t)&v7);
  }
  return v5 ^ 1;
}

uint64_t *WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    unsigned int v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    __n128 result = WTF::String::operator=(v15, a2);
    v15[1] = *(void *)a3;
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        __n128 result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        uint64_t v15 = result;
        uint64_t v22 = *a1;
        if (*a1) {
          unint64_t v25 = *(unsigned int *)(v22 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    uint64_t v27 = v22 + 16 * v25;
    char v26 = 1;
    goto LABEL_33;
  }
  __n128 result = (uint64_t *)WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v20 = *a1;
  if (*a1) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  char v26 = 0;
  uint64_t v27 = v20 + 16 * v21;
LABEL_33:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

BOOL WebKit::FileSystemStorageManager::releaseLockForFile(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unsigned int v5 = (uint64_t *)(a1 + 48);
  uint64_t v7 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), a2, a3);
  if (v7 == a3)
  {
    uint64_t v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, v6);
    if (*v5)
    {
      uint64_t v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
      if ((WTF::StringImpl **)v9 == v8) {
        return v7 == a3;
      }
    }
    else
    {
      if (!v8) {
        return v7 == a3;
      }
      uint64_t v9 = 0;
    }
    if ((WTF::StringImpl **)v9 != v8) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, v8);
    }
  }
  return v7 == a3;
}

void WebKit::IDBStorageConnectionToClient::~IDBStorageConnectionToClient(WebKit::IDBStorageConnectionToClient *this, void *a2)
{
  *(void *)(*((void *)this + 3) + 8) = 0;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void *)(*((void *)this + 3) + 8) = 0;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::IDBStorageConnectionToClient::didDeleteDatabase(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1765;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      unsigned int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didOpenDatabase(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1775;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      unsigned int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didStartTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  IPC::Connection::connection(*(void *)(a1 + 8), &v22);
  uint64_t v5 = (uint64_t)v22;
  if (v22)
  {
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 1779;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v23 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v6, a2 + 1);
    __int16 v24 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(v6, (uint64_t)&v24);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    char v8 = v23;
    int v23 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v19, v20);
    }
    atomic_uchar *volatile v9 = v22;
    uint64_t v22 = 0;
    if (v9)
    {
      char v10 = 0;
      atomic_uchar *volatile v11 = *v9;
      atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
      if (v10) {
        MEMORY[0x19972E8D0](v11);
      }
      uint64_t v12 = *((void *)v11 + 1);
      uint64_t v13 = v12 - 1;
      *((void *)v11 + 1) = v12 - 1;
      if (v12 == 1)
      {
        uint64_t v21 = *((void *)v11 + 2);
        uint64_t v15 = *((void *)v11 + 3);
        *((void *)v11 + 3) = 0;
        BOOL v14 = v21 == 0;
      }
      else
      {
        BOOL v14 = 0;
        uint64_t v15 = 0;
      }
      int v16 = 1;
      atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (v13) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (v13) {
          return;
        }
      }
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9B37E8;
      *(void *)(v17 + 8) = v11;
      *(void *)(v17 + 16) = v15;
      *(unsigned char *)(v17 + 24) = v14;
      int v23 = (IPC::Encoder *)v17;
      WTF::ensureOnMainRunLoop();
      uint64_t v18 = v23;
      int v23 = 0;
      if (v18) {
        (*(void (**)(IPC::Encoder *))(*(void *)v18 + 8))(v18);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didAbortTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  IPC::Connection::connection(*(void *)(a1 + 8), &v22);
  uint64_t v5 = (uint64_t)v22;
  if (v22)
  {
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 1759;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v23 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v6, a2 + 1);
    __int16 v24 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(v6, (uint64_t)&v24);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    char v8 = v23;
    int v23 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v19, v20);
    }
    atomic_uchar *volatile v9 = v22;
    uint64_t v22 = 0;
    if (v9)
    {
      char v10 = 0;
      atomic_uchar *volatile v11 = *v9;
      atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
      if (v10) {
        MEMORY[0x19972E8D0](v11);
      }
      uint64_t v12 = *((void *)v11 + 1);
      uint64_t v13 = v12 - 1;
      *((void *)v11 + 1) = v12 - 1;
      if (v12 == 1)
      {
        uint64_t v21 = *((void *)v11 + 2);
        uint64_t v15 = *((void *)v11 + 3);
        *((void *)v11 + 3) = 0;
        BOOL v14 = v21 == 0;
      }
      else
      {
        BOOL v14 = 0;
        uint64_t v15 = 0;
      }
      int v16 = 1;
      atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (v13) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (v13) {
          return;
        }
      }
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9B37E8;
      *(void *)(v17 + 8) = v11;
      *(void *)(v17 + 16) = v15;
      *(unsigned char *)(v17 + 24) = v14;
      int v23 = (IPC::Encoder *)v17;
      WTF::ensureOnMainRunLoop();
      uint64_t v18 = v23;
      int v23 = 0;
      if (v18) {
        (*(void (**)(IPC::Encoder *))(*(void *)v18 + 8))(v18);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCommitTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  IPC::Connection::connection(*(void *)(a1 + 8), &v22);
  uint64_t v5 = (uint64_t)v22;
  if (v22)
  {
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 1762;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v23 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v6, a2 + 1);
    __int16 v24 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(v6, (uint64_t)&v24);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    char v8 = v23;
    int v23 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v19, v20);
    }
    atomic_uchar *volatile v9 = v22;
    uint64_t v22 = 0;
    if (v9)
    {
      char v10 = 0;
      atomic_uchar *volatile v11 = *v9;
      atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
      if (v10) {
        MEMORY[0x19972E8D0](v11);
      }
      uint64_t v12 = *((void *)v11 + 1);
      uint64_t v13 = v12 - 1;
      *((void *)v11 + 1) = v12 - 1;
      if (v12 == 1)
      {
        uint64_t v21 = *((void *)v11 + 2);
        uint64_t v15 = *((void *)v11 + 3);
        *((void *)v11 + 3) = 0;
        BOOL v14 = v21 == 0;
      }
      else
      {
        BOOL v14 = 0;
        uint64_t v15 = 0;
      }
      int v16 = 1;
      atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (v13) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (v13) {
          return;
        }
      }
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9B37E8;
      *(void *)(v17 + 8) = v11;
      *(void *)(v17 + 16) = v15;
      *(unsigned char *)(v17 + 24) = v14;
      int v23 = (IPC::Encoder *)v17;
      WTF::ensureOnMainRunLoop();
      uint64_t v18 = v23;
      int v23 = 0;
      if (v18) {
        (*(void (**)(IPC::Encoder *))(*(void *)v18 + 8))(v18);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCreateObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1764;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1767;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didRenameObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1778;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didClearObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1760;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCreateIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1763;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1766;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didRenameIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1777;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didPutOrAdd(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1776;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      int v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didGetRecord(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  MEMORY[0x199731420](v20, a2);
  v21[0] = 0;
  v21[1] = 0;
  IPC::Connection::connection(v2, &v22);
  uint64_t v4 = (uint64_t)v22;
  if (v22)
  {
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1772;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    int v23 = v5;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v5, (uint64_t)v20);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, (uint64_t)v21);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v23, 0, 0);
    unint64_t v6 = v23;
    int v23 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v3);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v22;
    uint64_t v22 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          goto LABEL_13;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      int v23 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = (uint64_t)v23;
      int v23 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
  }
LABEL_13:
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v20);
}

void WebKit::IDBStorageConnectionToClient::didGetAllRecords(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  MEMORY[0x199731420](v20, a2);
  v21[0] = 0;
  v21[1] = 0;
  IPC::Connection::connection(v2, &v22);
  uint64_t v4 = (uint64_t)v22;
  if (v22)
  {
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1770;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    int v23 = v5;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v5, (uint64_t)v20);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, (uint64_t)v21);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v23, 0, 0);
    unint64_t v6 = v23;
    int v23 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v3);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v22;
    uint64_t v22 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          goto LABEL_13;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      int v23 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = (uint64_t)v23;
      int v23 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
  }
LABEL_13:
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v20);
}

void WebKit::IDBStorageConnectionToClient::didGetCount(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1771;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteRecord(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  IPC::Connection::connection(*((void *)this + 1), &v20);
  uint64_t v3 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1768;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    uint64_t v21 = v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    unint64_t v6 = v21;
    uint64_t v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          return;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      uint64_t v21 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = v21;
      uint64_t v21 = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didOpenCursor(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  MEMORY[0x199731420](v20, a2);
  v21[0] = 0;
  v21[1] = 0;
  IPC::Connection::connection(v2, &v22);
  uint64_t v4 = (uint64_t)v22;
  if (v22)
  {
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1774;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    int v23 = v5;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v5, (uint64_t)v20);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, (uint64_t)v21);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v23, 0, 0);
    unint64_t v6 = v23;
    int v23 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v3);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v22;
    uint64_t v22 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          goto LABEL_13;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      int v23 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = (uint64_t)v23;
      int v23 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
  }
LABEL_13:
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v20);
}

void WebKit::IDBStorageConnectionToClient::didIterateCursor(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  MEMORY[0x199731420](v20, a2);
  v21[0] = 0;
  v21[1] = 0;
  IPC::Connection::connection(v2, &v22);
  uint64_t v4 = (uint64_t)v22;
  if (v22)
  {
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1773;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    int v23 = v5;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(v5, (uint64_t)v20);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, (uint64_t)v21);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v23, 0, 0);
    unint64_t v6 = v23;
    int v23 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v3);
      WTF::fastFree(v17, v18);
    }
    uint64_t v7 = v22;
    uint64_t v22 = 0;
    if (v7)
    {
      char v8 = 0;
      atomic_uchar *volatile v9 = *v7;
      atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v10 - 1;
      *((void *)v9 + 1) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v19 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        *((void *)v9 + 3) = 0;
        BOOL v12 = v19 == 0;
      }
      else
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
      }
      int v14 = 1;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1)
      {
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v11) {
          goto LABEL_13;
        }
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9B37E8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v13;
      *(unsigned char *)(v15 + 24) = v12;
      int v23 = (IPC::Encoder *)v15;
      WTF::ensureOnMainRunLoop();
      uint64_t v16 = (uint64_t)v23;
      int v23 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
  }
LABEL_13:
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v20);
}

void WebKit::IDBStorageConnectionToClient::didGetAllDatabaseNamesAndVersions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  IPC::Connection::connection(*(void *)(a1 + 8), &v25);
  uint64_t v5 = (uint64_t)v25;
  if (v25)
  {
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 1769;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    char v26 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v6, a2 + 1);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, *(unsigned int *)(a3 + 12));
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    if (v7)
    {
      char v8 = *(uint64_t **)a3;
      atomic_uchar *volatile v9 = &v8[2 * v7];
      do
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, v8);
        IPC::Encoder::operator<<<unsigned long long const&>(v6, v8 + 1);
        v8 += 2;
      }
      while (v8 != v9);
    }
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v26, 0, 0);
    uint64_t v11 = v26;
    char v26 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v22, v23);
    }
    BOOL v12 = v25;
    unint64_t v25 = 0;
    if (v12)
    {
      char v13 = 0;
      atomic_uchar *volatile v14 = *v12;
      atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
      if (v13) {
        MEMORY[0x19972E8D0](v14);
      }
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t v16 = v15 - 1;
      *((void *)v14 + 1) = v15 - 1;
      if (v15 == 1)
      {
        uint64_t v24 = *((void *)v14 + 2);
        uint64_t v18 = *((void *)v14 + 3);
        *((void *)v14 + 3) = 0;
        BOOL v17 = v24 == 0;
      }
      else
      {
        BOOL v17 = 0;
        uint64_t v18 = 0;
      }
      int v19 = 1;
      atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
      if (v19 == 1)
      {
        if (v16) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        if (v16) {
          return;
        }
      }
      uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v20 = &unk_1EE9B37E8;
      *(void *)(v20 + 8) = v14;
      *(void *)(v20 + 16) = v18;
      *(unsigned char *)(v20 + 24) = v17;
      char v26 = (IPC::Encoder *)v20;
      WTF::ensureOnMainRunLoop();
      uint64_t v21 = v26;
      char v26 = 0;
      if (v21) {
        (*(void (**)(IPC::Encoder *))(*(void *)v21 + 8))(v21);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::fireVersionChangeEvent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(a2 + 8);
  IPC::Connection::connection(v6, &v27);
  uint64_t v7 = (uint64_t)v27;
  if (v27)
  {
    char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v8 = 1780;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    unsigned int v28 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v26);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a3);
    IPC::Encoder::operator<<<unsigned long long const&>(v8, a3 + 1);
    atomic_uchar *volatile v9 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
    if (v10 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C9B728);
    }
    void *v9 = a4;
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v28, 0, 0);
    BOOL v12 = v28;
    unsigned int v28 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v23, v24);
    }
    char v13 = v27;
    uint64_t v27 = 0;
    if (v13)
    {
      char v14 = 0;
      atomic_uchar *volatile v15 = *v13;
      atomic_compare_exchange_strong_explicit(*v13, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        MEMORY[0x19972E8D0](v15);
      }
      uint64_t v16 = *((void *)v15 + 1);
      uint64_t v17 = v16 - 1;
      *((void *)v15 + 1) = v16 - 1;
      if (v16 == 1)
      {
        uint64_t v25 = *((void *)v15 + 2);
        uint64_t v19 = *((void *)v15 + 3);
        *((void *)v15 + 3) = 0;
        BOOL v18 = v25 == 0;
      }
      else
      {
        BOOL v18 = 0;
        uint64_t v19 = 0;
      }
      int v20 = 1;
      atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 == 1)
      {
        if (v17) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        if (v17) {
          return;
        }
      }
      uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v21 = &unk_1EE9B37E8;
      *(void *)(v21 + 8) = v15;
      *(void *)(v21 + 16) = v19;
      *(unsigned char *)(v21 + 24) = v18;
      unsigned int v28 = (IPC::Encoder *)v21;
      WTF::ensureOnMainRunLoop();
      uint64_t v22 = v28;
      unsigned int v28 = 0;
      if (v22) {
        (*(void (**)(IPC::Encoder *))(*(void *)v22 + 8))(v22);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCloseFromServer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a2 + 8);
  IPC::Connection::connection(v4, &v23);
  uint64_t v5 = (uint64_t)v23;
  if (v23)
  {
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 1761;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v24 = v6;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v22);
    __int16 v25 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(v6, (uint64_t)&v25);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v24, 0, 0);
    char v8 = v24;
    uint64_t v24 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v19, v20);
    }
    atomic_uchar *volatile v9 = v23;
    int v23 = 0;
    if (v9)
    {
      char v10 = 0;
      atomic_uchar *volatile v11 = *v9;
      atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
      if (v10) {
        MEMORY[0x19972E8D0](v11);
      }
      uint64_t v12 = *((void *)v11 + 1);
      uint64_t v13 = v12 - 1;
      *((void *)v11 + 1) = v12 - 1;
      if (v12 == 1)
      {
        uint64_t v21 = *((void *)v11 + 2);
        uint64_t v15 = *((void *)v11 + 3);
        *((void *)v11 + 3) = 0;
        BOOL v14 = v21 == 0;
      }
      else
      {
        BOOL v14 = 0;
        uint64_t v15 = 0;
      }
      int v16 = 1;
      atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (v13) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (v13) {
          return;
        }
      }
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9B37E8;
      *(void *)(v17 + 8) = v11;
      *(void *)(v17 + 16) = v15;
      *(unsigned char *)(v17 + 24) = v14;
      uint64_t v24 = (IPC::Encoder *)v17;
      WTF::ensureOnMainRunLoop();
      BOOL v18 = v24;
      uint64_t v24 = 0;
      if (v18) {
        (*(void (**)(IPC::Encoder *))(*(void *)v18 + 8))(v18);
      }
    }
  }
}

void WebKit::IDBStorageConnectionToClient::notifyOpenDBRequestBlocked(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  IPC::Connection::connection(*((void *)this + 1), &v28);
  uint64_t v7 = (uint64_t)v28;
  if (v28)
  {
    char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v8 = 1781;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    unsigned int v29 = v8;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, (uint64_t *)a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v8, (uint64_t *)a2 + 1);
    atomic_uchar *volatile v9 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
    if (v10 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C9BB0CLL);
    }
    void *v9 = a3;
    atomic_uchar *volatile v11 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
    if (v12 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C9BB2CLL);
    }
    *atomic_uchar *volatile v11 = a4;
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v29, 0, 0);
    BOOL v14 = v29;
    unsigned int v29 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v25, v26);
    }
    uint64_t v15 = v28;
    unsigned int v28 = 0;
    if (v15)
    {
      char v16 = 0;
      atomic_uchar *volatile v17 = *v15;
      atomic_compare_exchange_strong_explicit(*v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
      if (v16) {
        MEMORY[0x19972E8D0](v17);
      }
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v19 = v18 - 1;
      *((void *)v17 + 1) = v18 - 1;
      if (v18 == 1)
      {
        uint64_t v27 = *((void *)v17 + 2);
        uint64_t v21 = *((void *)v17 + 3);
        *((void *)v17 + 3) = 0;
        BOOL v20 = v27 == 0;
      }
      else
      {
        BOOL v20 = 0;
        uint64_t v21 = 0;
      }
      int v22 = 1;
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 == 1)
      {
        if (v19) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (v19) {
          return;
        }
      }
      uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v23 = &unk_1EE9B37E8;
      *(void *)(v23 + 8) = v17;
      *(void *)(v23 + 16) = v21;
      *(unsigned char *)(v23 + 24) = v20;
      unsigned int v29 = (IPC::Encoder *)v23;
      WTF::ensureOnMainRunLoop();
      uint64_t v24 = v29;
      unsigned int v29 = 0;
      if (v24) {
        (*(void (**)(IPC::Encoder *))(*(void *)v24 + 8))(v24);
      }
    }
  }
}

WTF::StringImpl *WebKit::IDBStorageManager::idbStorageOriginDirectory(WTF::StringImpl *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  uint64_t v3 = this;
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot();
    WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot();
    uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v4 = &unk_1EE9CC7F0;
    uint64_t v7 = v4;
    WebKit::migrateOriginDataImpl((WTF::FileSystemImpl *)&v8, v3, (uint64_t)&v7);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    this = v8;
    char v8 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    uint64_t v6 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v6 += 2;
    }
    *(void *)this = v6;
  }
  return this;
}

uint64_t WebKit::migrateOriginDataImpl(WTF::FileSystemImpl *a1, WTF::FileSystemImpl *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 && *(_DWORD *)(*(void *)a1 + 4) && WTF::FileSystemImpl::fileExists(a1, a2))
  {
    WTF::FileSystemImpl::listDirectory(&v20, a1, v6);
    if (v21 && (WTF::FileSystemImpl::makeAllDirectories(a2, v9), v21))
    {
      uint64_t v10 = v20;
      uint64_t v11 = 8 * v21;
      char v7 = 1;
      do
      {
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v24)
        {
          if (v23 != -1) {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v23])(&v19, v22);
          }
        }
        else
        {
          (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)a3 + 16))(&v19);
          WTF::FileSystemImpl::pathByAppendingComponent();
          uint64_t v13 = v19;
          uint64_t v19 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)v22, v12) & 1) == 0)
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            char v15 = WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v19, (const WTF::String *)v22, v14);
            char v16 = v19;
            uint64_t v19 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2) {
                WTF::StringImpl::destroy(v16, v9);
              }
              else {
                *(_DWORD *)v16 -= 2;
              }
            }
            v7 &= v15;
          }
          atomic_uchar *volatile v17 = v22[0];
          v22[0] = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v9);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      char v7 = 1;
    }
    WTF::FileSystemImpl::deleteEmptyDirectory(a1, v9);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
  }
  else
  {
    char v7 = 1;
  }
  return v7 & 1;
}

uint64_t WebKit::IDBStorageManager::migrateOriginData(WebKit::IDBStorageManager *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9CC818;
  uint64_t v8 = v5;
  uint64_t v6 = WebKit::migrateOriginDataImpl(this, a2, (uint64_t)&v8);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  return v6;
}

void WebKit::IDBStorageManager::~IDBStorageManager(WebKit::IDBStorageManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  uint64_t v4 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)this + 5);
  uint64_t v5 = v3;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    char v7 = (WTF::StringImpl *)(v6 + 88 * *(unsigned int *)(v6 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 != v4)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*((WebCore::IDBServer::UniqueIDBDatabase **)v4 + 10));
      while (1)
      {
        uint64_t v4 = (WTF::StringImpl *)((char *)v4 + 88);
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = v5;
LABEL_10:
      ;
    }
    while (v4 != v7);
    uint64_t v6 = *v2;
  }
  if (v6) {
    WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(v6, v3);
  }
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  atomic_uchar *volatile v9 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9)
  {
    if (!atomic_load(v9))
    {
      __break(0xC471u);
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF);
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v3);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    *(void *)(v12 + 8) = 0;
    uint64_t v13 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v3);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::IDBStorageManager::~IDBStorageManager(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::IDBStorageManager::hasDataInMemory(WebKit::IDBStorageManager *this)
{
  uint64_t v2 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)this + 5);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    char v7 = (void *)(v6 + 88 * *(unsigned int *)(v6 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t result = WebCore::IDBServer::UniqueIDBDatabase::hasDataInMemory((WebCore::IDBServer::UniqueIDBDatabase *)v3[10]);
    if (result) {
      return 1;
    }
    while (1)
    {
      v3 += 11;
      if (v3 == v5) {
        break;
      }
      if ((unint64_t)(*v3 + 1) > 1) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = v5;
LABEL_10:
    if (v3 == v7) {
      return result;
    }
  }
}

uint64_t WebKit::IDBStorageManager::closeDatabasesForDeletion(WebKit::IDBStorageManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  uint64_t v4 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)this + 5);
  uint64_t v5 = v3;
  uint64_t result = *((void *)this + 5);
  if (result) {
    char v7 = (WTF::StringImpl *)(result + 88 * *(unsigned int *)(result - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 != v4)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*((WebCore::IDBServer::UniqueIDBDatabase **)v4 + 10));
      while (1)
      {
        uint64_t v4 = (WTF::StringImpl *)((char *)v4 + 88);
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = v5;
LABEL_10:
      ;
    }
    while (v4 != v7);
    uint64_t result = *v2;
  }
  if (result)
  {
    *uint64_t v2 = 0;
    return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(result, v3);
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5
    || (WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand((uint64_t *)(a1 + 40), 0), (uint64_t v5 = *v4) != 0))
  {
    int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unsigned int v7 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>(a2);
  uint64_t v9 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v7 & v6;
    uint64_t v12 = v5 + 88 * (v7 & v6);
    if (*(void *)v12 == -1)
    {
      uint64_t v9 = v5 + 88 * v11;
      goto LABEL_10;
    }
    if (!*(void *)v12) {
      break;
    }
    if (WebCore::operator==(v5 + 88 * v11, a2, v8)) {
      return *(void *)(v12 + 80);
    }
LABEL_10:
    unsigned int v7 = i + v11;
  }
  if (v9)
  {
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 48) = 0;
    *(_DWORD *)(v9 + 64) = 0;
    *(void *)(v9 + 56) = 0;
    *(unsigned char *)(v9 + 72) = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_DWORD *)(v9 + 32) = 0;
    *(void *)(v9 + 80) = 0;
    --*(_DWORD *)(*v4 - 16);
    uint64_t v12 = v9;
  }
  WTF::String::operator=((uint64_t *)v12, (WTF::StringImpl **)a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 8, a2 + 8);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 40, a2 + 40);
  *(unsigned char *)(v12 + 72) = *(unsigned char *)(a2 + 72);
  std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v12 + 80), 0);
  uint64_t v13 = *v4;
  if (*v4) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *v4;
  if (*v4) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 <= 2 * v17) {
LABEL_21:
    }
      uint64_t v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand(v4, v12);
  }
  else if (3 * v18 <= 4 * v17)
  {
    goto LABEL_21;
  }
  uint64_t v19 = WTF::fastMalloc((WTF *)0x100);
  MEMORY[0x19973BD30](v19, a1, a2);
  std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v12 + 80), v19);
  return *(void *)(v12 + 80);
}

uint64_t WebCore::IDBOpenRequestData::databaseIdentifier(WebCore::IDBOpenRequestData *this, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a2 + 24);
  if (v4) {
    *v4 += 2;
  }
  *(void *)this = v4;
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 8, a2 + 32);
  *((unsigned char *)this + 40) = 0;
  uint64_t v5 = (char *)this + 40;
  *((_DWORD *)v5 + 6) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v5, a2 + 64);
  v5[32] = *(unsigned char *)(a2 + 96);
  return result;
}

void WebKit::IDBStorageManager::registerConnection(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = a2[1];
  uint64_t v7 = *(void *)(v3 + 16);
  int v6 = (uint64_t *)(v3 + 16);
  uint64_t v5 = v7;
  if (v7
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, 0), (uint64_t v5 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (void *)(v5 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != v4)
    {
      if (v14 == -1) {
        uint64_t v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v8;
      uint64_t v13 = (void *)(v5 + 16 * v12);
      uint64_t v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          void *v15 = 0;
          v15[1] = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v13 = v15;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    *uint64_t v13 = v4;
    uint64_t v17 = a2[2];
    if (v17) {
      goto LABEL_17;
    }
    uint64_t v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v17 = 1;
    *(void *)(v17 + 8) = a2;
    unint64_t v18 = (unsigned int *)a2[2];
    a2[2] = v17;
    if (!v18) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
    uint64_t v17 = a2[2];
    if (v17) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)v17, 1u);
    uint64_t v19 = (unsigned int *)v13[1];
    v13[1] = v17;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        return;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
      return;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, (uint64_t)v13);
  }
}

void WebKit::IDBStorageManager::unregisterConnection(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = (uint64_t *)(v2 + 16);
  uint64_t v3 = v5;
  if (v5)
  {
    uint64_t v6 = a2[1];
    unsigned int v7 = *(_DWORD *)(v3 - 8);
    unint64_t v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v3 + 16 * v11);
    if (v12 != v6)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v3 + 16 * v11);
        ++v13;
        if (v12 == v6) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v3 - 4))
    {
      uint64_t v14 = (void *)(v3 + 16 * v11);
      uint64_t v15 = (unsigned int *)v14[1];
      *uint64_t v14 = -1;
      v14[1] = 0;
      if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v16 = *v4;
      if (*v4) {
        int v17 = *(_DWORD *)(v16 - 12) - 1;
      }
      else {
        int v17 = -1;
      }
      *(_DWORD *)(v16 - 12) = v17;
      uint64_t v18 = *v4;
      if (*v4)
      {
        unsigned int v19 = 6 * *(_DWORD *)(v18 - 12);
        unsigned int v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
        {
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v4, v20 >> 1, 0);
        }
      }
    }
  }
}

WebCore::IDBResourceIdentifier *WebKit::IDBStorageManager::registerTransaction(WebKit::IDBStorageManager *this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = *((void *)a2 + 3);
  unint64_t v5 = *((void *)a2 + 4);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v6 = (uint64_t *)(v3 + 24);
  uint64_t v7 = v8;
  if (v8
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(v6),
        (uint64_t v7 = *v6) != 0))
  {
    int v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v9 = 0;
  }
  int v26 = -1640531527;
  __int16 v27 = 0;
  char v28 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v26, v4, v5);
  unsigned int v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v26) & v9;
  uint64_t v12 = (WebCore::IDBResourceIdentifier *)(v7 + 24 * v11);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  if (*(_OWORD *)v12 == 0)
  {
LABEL_12:
    *(void *)uint64_t v12 = v4;
    *((void *)v12 + 1) = v5;
    uint64_t result = *(WebCore::IDBResourceIdentifier **)a2;
    if (*(void *)a2) {
      goto LABEL_17;
    }
    uint64_t result = (WebCore::IDBResourceIdentifier *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *((void *)result + 1) = a2;
    uint64_t v18 = *(unsigned int **)a2;
    *(void *)a2 = result;
    if (!v18) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v10);
    }
    uint64_t result = *(WebCore::IDBResourceIdentifier **)a2;
    if (*(void *)a2) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
    unsigned int v19 = (unsigned int *)*((void *)v12 + 2);
    *((void *)v12 + 2) = result;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      uint64_t result = (WebCore::IDBResourceIdentifier *)WTF::fastFree((WTF *)v19, v10);
    }
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        return result;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
      return result;
    }
    return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(v6);
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (1)
    {
      uint64_t result = v15;
      uint64_t v15 = v12;
      if (v14 != -1)
      {
        uint64_t v15 = result;
        if (v14 == v4 && v13 == v5) {
          break;
        }
      }
      unsigned int v11 = (v11 + v16) & v9;
      uint64_t v12 = (WebCore::IDBResourceIdentifier *)(v7 + 24 * v11);
      uint64_t v14 = *(void *)v12;
      uint64_t v13 = *((void *)v12 + 1);
      ++v16;
      if (*(_OWORD *)v12 == 0)
      {
        if (v15)
        {
          *(void *)uint64_t v15 = WebCore::IDBResourceIdentifier::emptyValue(result);
          *((void *)v15 + 1) = v10;
          *((void *)v15 + 2) = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v12 = v15;
        }
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::unregisterTransaction(uint64_t this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v3 = (uint64_t *)(v2 + 24);
  uint64_t v4 = v5;
  if (!v5) {
    return this;
  }
  unint64_t v6 = *((void *)a2 + 3);
  unint64_t v7 = *((void *)a2 + 4);
  int v8 = *(_DWORD *)(v4 - 8);
  int v23 = -1640531527;
  __int16 v24 = 0;
  char v25 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v23, v6, v7);
  this = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23);
  unsigned int v10 = this & v8;
  unsigned int v11 = (uint64_t *)(v4 + 24 * (this & v8));
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_8:
    uint64_t v15 = *v3;
    if (!*v3) {
      return this;
    }
    unsigned int v16 = *(_DWORD *)(v15 - 4);
    unsigned int v11 = (uint64_t *)(v15 + 24 * v16);
LABEL_10:
    v15 += 24 * v16;
    if ((uint64_t *)v15 == v11) {
      return this;
    }
    goto LABEL_11;
  }
  int v14 = 1;
  while (v13 == -1 || v13 != v6 || v12 != v7)
  {
    unsigned int v10 = (v10 + v14) & v8;
    unsigned int v11 = (uint64_t *)(v4 + 24 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    ++v14;
    if (*(_OWORD *)v11 == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = *v3;
  if (*v3)
  {
    unsigned int v16 = *(_DWORD *)(v15 - 4);
    goto LABEL_10;
  }
LABEL_11:
  if ((uint64_t *)v15 != v11)
  {
    *unsigned int v11 = -1;
    this = v11[2];
    v11[2] = 0;
    if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, v9);
    }
    ++*(_DWORD *)(*v3 - 16);
    uint64_t v17 = *v3;
    if (*v3) {
      int v18 = *(_DWORD *)(v17 - 12) - 1;
    }
    else {
      int v18 = -1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v3;
    if (*v3)
    {
      unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
      unsigned int v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9) {
        return (uint64_t)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v3, v21 >> 1);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::IDBStorageManager::createBackingStore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && (*(_DWORD *)(v5 + 4) ? (BOOL v6 = *(unsigned char *)(a2 + 72) == 0) : (BOOL v6 = 0), v6))
  {
    WebCore::SQLiteFileSystem::computeHashForFileName();
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v8 = WTF::fastMalloc((WTF *)0x248);
    *a3 = (WTF::StringImpl *)MEMORY[0x19973BDD0](v8, a2, &v11);
    unsigned int v10 = v11;
    unsigned int v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    WTF::fastMalloc((WTF *)0x78);
    uint64_t result = (WTF::StringImpl *)WebCore::IDBServer::MemoryIDBBackingStore::MemoryIDBBackingStore();
    *a3 = result;
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::requestSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a3, a4);
}

uint64_t WebKit::IDBStorageRegistry::ensureConnectionToClient(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v6 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 8), 0), (uint64_t v5 = *v6) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    unsigned int v16 = (WTF *)v12[1];
    *uint64_t v12 = a3;
    v12[1] = 0;
    if (v16) {
      std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v16, a2);
    }
    uint64_t v17 = *v6;
    if (*v6) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v6;
    if (*v6) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_21:
        int v23 = (void *)WTF::fastMalloc((WTF *)0x20);
        *int v23 = &unk_1EE9CC5C8;
        v23[1] = a2;
        v23[2] = a3;
        WebCore::IDBServer::IDBConnectionToClient::create();
        char v25 = (WTF *)v12[1];
        v12[1] = (uint64_t)v23;
        if (v25) {
          std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v25, v24);
        }
        return *(void *)(v12[1] + 24);
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_21;
    }
    uint64_t v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v12);
    goto LABEL_21;
  }
  int v14 = 0;
  int v15 = 1;
  while (v13 != a3)
  {
    if (v13 == -1) {
      int v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v7;
    uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *int v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return *(void *)(v12[1] + 24);
}

uint64_t *WebKit::IDBStorageRegistry::removeConnectionToClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v3);
  int v7 = result;
  unint64_t v8 = v6;
  unint64_t v9 = 0;
  if (v3) {
    unint64_t v9 = &v3[2 * *((unsigned int *)v3 - 1)];
  }
  if (v9 != result)
  {
    do
    {
      uint64_t v10 = v7[1];
      if (*(void *)(v10 + 8) == a2) {
        uint64_t result = (uint64_t *)WebCore::IDBServer::IDBConnectionToClient::connectionToClientClosed(*(WebCore::IDBServer::IDBConnectionToClient **)(v10 + 24));
      }
      else {
        uint64_t result = (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>((WTF *)v11, v4, v7, v7 + 1);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v8) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_13;
        }
      }
      int v7 = v8;
LABEL_13:
      ;
    }
    while (v7 != v9);
  }
  if (v3)
  {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v3, v6);
  }
  return result;
}

WTF *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>(WTF *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v27 = v8 + 16 * v29;
        goto LABEL_26;
      }
      if (v17 == -1) {
        int v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      unsigned int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a4;
  *a4 = 0;
  uint64_t result = (WTF *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (WTF *)std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](result, a2);
  }
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *a2;
  if (*a2) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_20:
      uint64_t result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
      unsigned int v16 = (uint64_t *)result;
      uint64_t v23 = *a2;
      if (*a2) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_20;
  }
  uint64_t v27 = v23 + 16 * v26;
  char v28 = 1;
LABEL_26:
  *(void *)int v7 = v16;
  *((void *)v7 + 1) = v27;
  *((unsigned char *)v7 + 16) = v28;
  return result;
}

uint64_t WebKit::IDBStorageRegistry::connection(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = *(void **)(a1 + 16 * v6);
  if (v7 != a2)
  {
    int v8 = 1;
    while (v7)
    {
      uint64_t v6 = (v6 + v8) & v2;
      int v7 = *(void **)(a1 + 16 * v6);
      ++v8;
      if (v7 == a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 16 * v6 + 8);
  if (!v9) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  uint64_t v10 = *(void *)(v9 + 8);
  if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  return v10;
}

uint64_t WebKit::IDBStorageRegistry::transaction(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    unsigned int v6 = *(_DWORD *)(a1 - 8);
    int v15 = -1640531527;
    __int16 v16 = 0;
    char v17 = 0;
    WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v15, a2, a3);
    uint64_t v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15) & v6;
    uint64_t v9 = (uint64_t *)(v3 + 24 * v8);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    if (*(_OWORD *)v9 == 0) {
      return 0;
    }
    int v12 = 1;
    while (v11 == -1 || v11 != a2 || v10 != a3)
    {
      uint64_t v8 = (v8 + v12) & v6;
      uint64_t v11 = *(void *)(v3 + 24 * v8);
      uint64_t v10 = *(void *)(v3 + 24 * v8 + 8);
      ++v12;
      if (*(_OWORD *)(v3 + 24 * v8) == 0) {
        return 0;
      }
    }
    uint64_t v14 = *(void *)(v3 + 24 * v8 + 16);
    if (!v14)
    {
      return 0;
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)v14, 1u);
      uint64_t v3 = *(void *)(v14 + 8);
      if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
  }
  return v3;
}

uint64_t WebKit::fileNameToOrigin(WebKit *this, WTF::StringImpl **a2)
{
  uint64_t result = (uint64_t)*a2;
  if (*a2 && (uint64_t result = WTF::StringImpl::endsWith(), (result & 1) != 0) && *a2 && (v5 = *((_DWORD *)*a2 + 1), v5 > 0xD))
  {
    WTF::String::left(a2, v5 - 13, &v7);
    WebCore::SecurityOriginData::fromDatabaseIdentifier();
    uint64_t result = (uint64_t)v7;
    int v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 32) = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::LocalStorageManager::localStorageFilePath(WTF::StringImpl *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  if (a2 && *((_DWORD *)a2 + 1))
  {
    WebKit::originToFileName((WebKit *)&v5, a3);
    WTF::FileSystemImpl::pathByAppendingComponent();
    this = v5;
    unsigned int v5 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    unint64_t v4 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v4 += 2;
    }
    *(void *)this = v4;
  }
  return this;
}

WTF::StringImpl *WebKit::originToFileName(WebKit *this, const WebCore::ClientOrigin *a2)
{
  WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v5, (const WebCore::ClientOrigin *)((char *)a2 + 32));
  v6[0] = (uint64_t)".localstorage";
  v6[1] = 14;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(void *)this)
  {
    uint64_t result = v5;
    unsigned int v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::LocalStorageManager::localStorageFilePath@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4)) {
    return WTF::FileSystemImpl::pathByAppendingComponent();
  }
  uint64_t v3 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v3 += 2;
  }
  *a2 = v3;
  return this;
}

void *WebKit::LocalStorageManager::LocalStorageManager(void *result, _DWORD **a2, atomic_uint *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    *v3 += 2;
  }
  *uint64_t result = v3;
  result[1] = a3;
  atomic_fetch_add(a3, 1u);
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t WebKit::LocalStorageManager::isActive(WebKit::LocalStorageManager *this)
{
  unsigned int v2 = (WebKit::StorageAreaBase *)*((void *)this + 3);
  if (v2 && WebKit::StorageAreaBase::hasListeners(v2)) {
    return 1;
  }
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    return WebKit::StorageAreaBase::hasListeners((WebKit::StorageAreaBase *)result);
  }
  return result;
}

BOOL WebKit::LocalStorageManager::hasDataInMemory(WebKit::LocalStorageManager *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2
    && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)
    && !(*(unsigned int (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3)))
  {
    return 1;
  }
  uint64_t v3 = *((void *)this + 2);
  return v3 && WebCore::StorageMap::length((WebCore::StorageMap *)(v3 + 104)) != 0;
}

BOOL WebKit::MemoryStorageArea::isEmpty(WebKit::MemoryStorageArea *this)
{
  return WebCore::StorageMap::length((WebKit::MemoryStorageArea *)((char *)this + 104)) == 0;
}

uint64_t *WebKit::LocalStorageManager::clearDataInMemory(WebKit::LocalStorageManager *this)
{
  uint64_t result = (uint64_t *)*((void *)this + 3);
  if (result)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    if (result) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
    }
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    WebCore::StorageMap::clear((WebCore::StorageMap *)(v3 + 104));
    return WebKit::StorageAreaBase::notifyListenersAboutClear((WebKit::StorageAreaBase *)v3);
  }
  return result;
}

uint64_t *WebKit::MemoryStorageArea::clear(WebKit::MemoryStorageArea *this)
{
  WebCore::StorageMap::clear((WebKit::MemoryStorageArea *)((char *)this + 104));

  return WebKit::StorageAreaBase::notifyListenersAboutClear(this);
}

uint64_t WebKit::LocalStorageManager::clearDataOnDisk(WebKit::LocalStorageManager *this)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 3) + 40);
      return v3();
    }
  }
  return result;
}

void WebKit::LocalStorageManager::close(WebKit::LocalStorageManager *this)
{
  uint64_t v1 = (WebKit::SQLiteStorageArea *)*((void *)this + 3);
  if (v1 && ((*(uint64_t (**)(void))(*(void *)v1 + 16))(*((void *)this + 3)) & 1) == 0)
  {
    WebKit::SQLiteStorageArea::close(v1, v2);
  }
}

uint64_t WebKit::LocalStorageManager::syncLocalStorage(uint64_t this)
{
  if (this)
  {
    uint64_t v1 = (WebKit::SQLiteStorageArea *)this;
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
    if ((this & 1) == 0)
    {
      return WebKit::SQLiteStorageArea::commitTransactionIfNecessary(v1);
    }
  }
  return this;
}

void WebKit::LocalStorageManager::connectionClosed(uint64_t a1, uint64_t a2)
{
  WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(a1, a2);

  WebKit::LocalStorageManager::connectionClosedForTransientStorageArea(a1, a2);
}

uint64_t WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    WebKit::StorageAreaBase::removeListener(result, a2);
    uint64_t result = WebKit::StorageAreaBase::hasListeners(*(WebKit::StorageAreaBase **)(a1 + 24));
    if ((result & 1) == 0)
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24))
        || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24)),
            result))
      {
        WebKit::StorageAreaRegistry::unregisterStorageArea(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 24) + 16));
        uint64_t result = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = 0;
        if (result)
        {
          unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
          return v4();
        }
      }
    }
  }
  return result;
}

void WebKit::LocalStorageManager::connectionClosedForTransientStorageArea(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (WebKit::StorageAreaBase **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    WebKit::StorageAreaBase::removeListener(v3, a2);
    if (!WebKit::StorageAreaBase::hasListeners(*v4)
      && !WebCore::StorageMap::length((WebKit::StorageAreaBase *)((char *)*v4 + 104)))
    {
      WebKit::StorageAreaRegistry::unregisterStorageArea(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 16) + 16));
      unsigned int v5 = *(WebKit::StorageAreaBase **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (v5)
      {
        std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v4, v5);
      }
    }
  }
}

uint64_t WebKit::LocalStorageManager::connectToLocalStorageArea(void *a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4, uint64_t a5)
{
  uint64_t v8 = a1[3];
  if (!v8)
  {
    if (*a1 && *(_DWORD *)(*a1 + 4))
    {
      uint64_t v11 = WTF::fastMalloc((WTF *)0xB0);
      WebKit::SQLiteStorageArea::SQLiteStorageArea(v11, 5242880, a4, a1, a5);
      uint64_t v12 = a1[3];
      a1[3] = v11;
      if (!v12)
      {
LABEL_6:
        uint64_t v13 = a1[1];
        uint64_t v14 = a1[3];
        int v18 = *(void **)(v14 + 16);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>((uint64_t *)(v13 + 8), (uint64_t *)&v18, v14, (uint64_t)v16);
        uint64_t v8 = a1[3];
        goto LABEL_7;
      }
    }
    else
    {
      LOBYTE(v18) = 1;
      std::make_unique[abi:sn180100]<WebKit::MemoryStorageArea,WebCore::ClientOrigin const&,WebKit::StorageAreaBase::StorageType>(v16, a4, &v18);
      uint64_t v12 = a1[3];
      a1[3] = v16[0];
      if (!v12) {
        goto LABEL_6;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v17 = a3;
  int v18 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>((uint64_t *)(v8 + 96), &v18, &v17, (uint64_t)v16);
  return *(void *)(a1[3] + 16);
}

uint64_t WebKit::LocalStorageManager::connectToTransientLocalStorageArea(uint64_t a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4)
{
  int v7 = (WebKit::StorageAreaBase **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v10 = WTF::fastMalloc((WTF *)0x80);
    uint64_t v11 = WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)v10, -1, a4);
    *(void *)uint64_t v11 = &unk_1EE9CC6F8;
    WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v11 + 104));
    *(unsigned char *)(v10 + 120) = 1;
    uint64_t v12 = *v7;
    *int v7 = (WebKit::StorageAreaBase *)v10;
    if (v12)
    {
      std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v7, v12);
      uint64_t v10 = (uint64_t)*v7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v17 = *(void **)(v10 + 16);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>((uint64_t *)(v13 + 8), (uint64_t *)&v17, v10, (uint64_t)v15);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>((uint64_t *)(v6 + 96), &v17, &v16, (uint64_t)v15);
  return *((void *)*v7 + 2);
}

uint64_t *WebKit::MemoryStorageArea::allItems@<X0>(WebKit::MemoryStorageArea *this@<X0>, uint64_t *a2@<X8>)
{
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2, (void **)(*((void *)this + 13) + 8));
}

WTF::StringImpl *WebKit::MemoryStorageArea::setItem@<X0>(WTF::String *a1@<X3>, WTF::String *a2@<X4>, uint64_t a3@<X0>, uint64_t a4@<X1>, uint64_t a5@<X2>, uint64_t a6@<X5>, char *a7@<X8>)
{
  int v19 = 0;
  BOOL v18 = 0;
  WebCore::StorageMap::setItem((WebCore::StorageMap *)(a3 + 104), a1, a2, (WTF::String *)&v19, &v18);
  if (v18)
  {
    char v15 = 1;
    char v16 = 2;
  }
  else
  {
    WebKit::StorageAreaBase::dispatchEvents(a3, a4, a5, (uint64_t)a1, (uint64_t)&v19, (uint64_t)a2, a6);
    char v16 = 0;
    char v15 = 0;
  }
  *a7 = v16;
  a7[1] = v15;
  uint64_t result = v19;
  int v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::MemoryStorageArea::removeItem@<X0>(WTF::String *a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, _WORD *a6@<X8>)
{
  char v16 = 0;
  WebCore::StorageMap::removeItem((WebCore::StorageMap *)(a2 + 104), a1, (WTF::String *)&v16);
  char v15 = 0;
  WebKit::StorageAreaBase::dispatchEvents(a2, a3, a4, (uint64_t)a1, (uint64_t)&v16, (uint64_t)&v15, a5);
  uint64_t v13 = v15;
  char v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  *a6 = 0;
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::MemoryStorageArea::clear@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  uint64_t v10 = (WebCore::StorageMap *)(a1 + 104);
  uint64_t result = (WTF::StringImpl *)WebCore::StorageMap::length((WebCore::StorageMap *)(a1 + 104));
  if (result)
  {
    WebCore::StorageMap::clear(v10);
    char v16 = 0;
    uint64_t v17 = 0;
    char v15 = 0;
    WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, a4);
    uint64_t v13 = v15;
    char v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v16;
    char v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  *a5 = 0;
  return result;
}

WTF::StringImpl ***WebKit::MemoryStorageArea::clone@<X0>(WebKit::MemoryStorageArea *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v12[0] = 0;
  int v13 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v12, (uint64_t)this + 32);
  v14[0] = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, (uint64_t)this + 64);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
  char v5 = *((unsigned char *)this + 120);
  uint64_t v6 = WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)v4, -1, (const WebCore::ClientOrigin *)v12);
  *(void *)uint64_t v6 = &unk_1EE9CC6F8;
  int v7 = (WTF::StringImpl ****)((char *)v6 + 104);
  WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v6 + 104));
  *(unsigned char *)(v4 + 120) = v5;
  *a2 = v4;
  if (v15 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v15])(&v11, v14);
  }
  int v15 = -1;
  if (v13 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v13])(&v11, v12);
  }
  uint64_t v9 = (WTF::StringImpl ***)*((void *)this + 13);
  ++*(_DWORD *)v9;
  uint64_t result = *v7;
  *int v7 = v9;
  if (result) {
    uint64_t result = WTF::RefCounted<WebCore::StorageMap::Impl>::deref(result, v8);
  }
  *(_DWORD *)(v4 + 112) = *((_DWORD *)this + 28);
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::persistedFilePath(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2, WebCore::SecurityOriginData *a3)
{
  WebKit::originDirectoryPath((WTF::StringImpl *)&v7, (uint64_t)a2 + 56, a3, *((void *)a2 + 9));
  uint64_t result = v7;
  if (v7 && *((_DWORD *)v7 + 1))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t result = v7;
  }
  else
  {
    uint64_t v6 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v6 += 2;
    }
    *(void *)this = v6;
  }
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::originDirectoryPath(WTF::StringImpl *result, uint64_t a2, WebCore::SecurityOriginData *this, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    WebCore::SecurityOriginData::toString((uint64_t *)&v24, this);
    WebKit::encode((uint64_t)&v23, (uint64_t)&v24, a4);
    int v7 = (WTF::StringImpl *)v24;
    *(void *)&long long v24 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v24, (WebCore::SecurityOriginData *)((char *)this + 32));
    WebKit::encode((uint64_t)&v22, (uint64_t)&v24, a4);
    uint64_t v9 = (WTF::StringImpl *)v24;
    *(void *)&long long v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    *(void *)&long long v24 = 0;
    int v10 = (int)v23;
    if (v23)
    {
      unsigned int v11 = *((unsigned __int8 *)v23 + 16);
      int v10 = *((_DWORD *)v23 + 1);
      *(void *)&long long v24 = *((void *)v23 + 1);
      int v12 = (v11 >> 2) & 1;
    }
    else
    {
      LOBYTE(v12) = 1;
    }
    DWORD2(v24) = v10;
    BYTE12(v24) = v12;
    uint64_t v25 = 0;
    int v13 = (int)v22;
    if (v22)
    {
      unsigned int v14 = *((unsigned __int8 *)v22 + 16);
      int v13 = *((_DWORD *)v22 + 1);
      uint64_t v25 = *((void *)v22 + 1);
      int v15 = (v14 >> 2) & 1;
    }
    else
    {
      LOBYTE(v15) = 1;
    }
    int v26 = v13;
    char v27 = v15;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v20, &v24, 2uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    uint64_t v17 = v20;
    if (v20)
    {
      uint64_t v20 = 0;
      int v21 = 0;
      WTF::fastFree(v17, v16);
    }
    BOOL v18 = v22;
    int v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    int v19 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v19 += 2;
    }
    *(void *)uint64_t result = v19;
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>::operator=<WebKit::NetworkStorageManager,(void *)0>(uint64_t a1, void *a2)
{
  uint64_t v4 = (atomic_uchar *)a2[2];
  if (v4) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  char v5 = *(atomic_uchar **)a1;
  *(void *)a1 = v4;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  *(void *)(a1 + 8) = a2;
  return a1;
}

void WebKit::NetworkStorageManager::~NetworkStorageManager(WebKit::NetworkStorageManager *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 392))
  {
    uint64_t v3 = *((void *)this + 48);
    if (v3) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
    }
  }
  uint64_t v4 = *((void *)this + 47);
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = *(unsigned int *)(v4 - 4);
  if (!v5) {
    goto LABEL_19;
  }
  uint64_t v6 = v4 + 32;
  while (1)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 8);
    if (v7) {
      break;
    }
    if (*(void *)(v6 - 32) != -1) {
      goto LABEL_9;
    }
LABEL_15:
    v6 += 72;
    if (!--v5) {
      goto LABEL_19;
    }
  }
  if (v7 == 1)
  {
LABEL_9:
    uint64_t v8 = *(unsigned int *)(v6 + 24);
    if (v8 == -1)
    {
      *(_DWORD *)(v6 + 24) = -1;
    }
    else
    {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v8])(&v33, v6);
      uint64_t v7 = *(unsigned int *)(v6 - 8);
      *(_DWORD *)(v6 + 24) = -1;
      if (v7 == -1)
      {
LABEL_14:
        *(_DWORD *)(v6 - 8) = -1;
        goto LABEL_15;
      }
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v7])(&v34, v6 - 32);
    goto LABEL_14;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_19:
  WTF::fastFree((WTF *)(v4 - 16), a2);
LABEL_20:
  std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100]((WebKit::ServiceWorkerStorageManager **)this + 46, 0);
  if (*((unsigned char *)this + 352))
  {
    int v10 = (WTF::StringImpl **)*((void *)this + 43);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
    }
  }
  WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 328, v9);
  uint64_t v12 = *((void *)this + 40);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      unsigned int v14 = (WTF::StringImpl ***)(v12 + 8);
      do
      {
        if (*(v14 - 1) != (WTF::StringImpl **)-1 && *v14) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, v11);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), v11);
  }
  int v15 = (WTF::StringImpl *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v11);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v11);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  BOOL v18 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v11);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  int v19 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v11);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (WTF *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v20) {
    WebKit::CacheStorageRegistry::operator delete(v20, v11);
  }
  int v21 = (WTF *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v21) {
    WebKit::IDBStorageRegistry::operator delete(v21, v11);
  }
  int v22 = (WTF *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v22) {
    WebKit::StorageAreaRegistry::operator delete(v22, v11);
  }
  uint64_t v23 = (WTF *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v23) {
    WebKit::StorageAreaRegistry::operator delete(v23, v11);
  }
  uint64_t v24 = *((void *)this + 12);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    if (v25)
    {
      int v26 = (atomic_uchar **)(v24 + 8);
      do
      {
        if (*(v26 - 1) != (atomic_uchar *)-1)
        {
          char v27 = *v26;
          void *v26 = 0;
          if (v27) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v11);
          }
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v11);
  }
  uint64_t v28 = *((void *)this + 11);
  if (v28) {
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v28, v11);
  }
  uint64_t v29 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v11);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v11);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  unint64_t v31 = (WTF::WorkQueue *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v31) {
    WTF::WorkQueue::deref(v31);
  }
  unint64_t v32 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v11);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v11);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkStorageManager::~NetworkStorageManager(this, a2);
  if (*(_DWORD *)(v2 + 24))
  {
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

uint64_t WebKit::NetworkStorageManager::close(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 80) = 1;
  WTF::ThreadSafeWeakHashSet<IPC::Connection>::values((atomic_uchar *)(a1 + 96), a2, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v5 = v11;
    uint64_t v6 = 8 * v12;
    do
    {
      uint64_t v7 = *v5++;
      IPC::Connection::removeWorkQueueMessageReceiver(v7, 0x2Bu, 0);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
  uint64_t *v9 = (uint64_t)&unk_1EE9CC890;
  v9[1] = a1;
  v9[2] = a1;
  v9[3] = v8;
  unsigned int v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v11;
  unsigned int v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(WebKit::NetworkStorageManager *this, IPC::Connection *a2)
{
  uint64_t result = WTF::ThreadSafeWeakHashSet<IPC::Connection>::remove<IPC::Connection,(void *)0>((uint64_t *)this + 12, a2);
  if (result)
  {
    IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)a2, 0x2Bu, 0);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 2);
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v6 = &unk_1EE9CC8E0;
    v6[1] = this;
    uint64_t v6[2] = this;
    v6[3] = v5;
    uint64_t v7 = (uint64_t)v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = v7;
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<IPC::Connection>::remove<IPC::Connection,(void *)0>(uint64_t *a1, WTF *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 2);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a1 + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 2);
  }
  unsigned int v6 = *((_DWORD *)a1 + 3);
  unsigned int v7 = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((atomic_uchar *)a1);
    *((_DWORD *)a1 + 2) = 0;
    uint64_t v8 = *a1;
    if (*a1)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE) {
        LODWORD(v8) = 0x7FFFFFFF;
      }
    }
    *((_DWORD *)a1 + 3) = 2 * v8;
  }
  uint64_t v17 = a2;
  uint64_t v9 = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(a1, &v17);
  int v10 = (void *)v9;
  uint64_t v11 = *a1;
  if (*a1) {
    v11 += 16 * *(unsigned int *)(v11 - 4);
  }
  if (v11 == v9)
  {
    uint64_t v14 = 0;
  }
  else
  {
    unsigned int v12 = *(atomic_uchar **)(v9 + 8);
    if (v12) {
      BOOL v13 = !WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v12);
    }
    else {
      BOOL v13 = 1;
    }
    uint64_t v14 = v13 & WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::remove(a1, v10);
  }
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return v14;
}

WTF::WallTime *WebKit::NetworkStorageManager::includeOriginInBackupIfNecessary(WTF::WallTime *result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    double v3 = *(double *)(a2 + 64);
    char v4 = result;
    uint64_t result = (WTF::WallTime *)WTF::WallTime::now(result);
    if (v5 - v3 >= *((double *)v4 + 45))
    {
      uint64_t result = (WTF::WallTime *)WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)(a2 + 16), 0);
      *(unsigned char *)(a2 + 72) = 1;
    }
  }
  return result;
}

WTF::WallTime *WebKit::NetworkStorageManager::writeOriginToFileIfNecessary(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2, WebKit::StorageAreaBase *a3)
{
  uint64_t result = (WTF::WallTime *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*((void *)this + 11), (uint64_t)a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 8);
    if (v5)
    {
      return WebKit::NetworkStorageManager::includeOriginInBackupIfNecessary(this, v5);
    }
  }
  return result;
}

uint64_t WebKit::isEmptyOriginDirectory(WebKit *this, const WTF::String *a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::OriginStorageManager *)WTF::FileSystemImpl::listDirectory((uint64_t *)&v13, this, a2);
  if (v14)
  {
    if (v14 == 1)
    {
      WebKit::OriginStorageManager::originFileIdentifier(v16, v2);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v7 = 0;
      v16[1] = v15[0];
      unsigned int v12 = 0;
      do
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v12, (WTF::StringImpl **)&v16[v7++], v6, (uint64_t)v15);
      while (v7 != 2);
      for (uint64_t i = 1; i != -1; --i)
      {
        int v10 = (WTF::StringImpl *)v16[i];
        v16[i] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      uint64_t v11 = WTF::allOf<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebKit::isEmptyOriginDirectory(WTF::String const&)::$_0>(v13, v14, (const WTF::StringImpl *)&v12);
      uint64_t v4 = v11;
      if (v12) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v3);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v3);
  return v4;
}

WTF::StringImpl *WebKit::originFilePath(WTF::StringImpl *this, const WTF::String *a2)
{
  if (a2 && *((_DWORD *)a2 + 1))
  {
    WebKit::OriginStorageManager::originFileIdentifier((uint64_t *)&v4, this);
    WTF::FileSystemImpl::pathByAppendingComponent();
    this = v4;
    uint64_t v4 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v2);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    double v3 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v3 += 2;
    }
    *(void *)this = v3;
  }
  return this;
}

uint64_t WebKit::NetworkStorageManager::originStorageManager(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  v6[0] = (WebCore::SecurityOriginData *)a1;
  v6[1] = a2;
  WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>((uint64_t)v7, a1 + 11, (uint64_t)a2, v6);
  uint64_t v4 = *(void *)(v7[0] + 64);
  WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebKit::NetworkStorageManager *)a1, a2, 0);
  return v4;
}

unint64_t WebKit::OriginQuotaManager::usage(WebKit::OriginQuotaManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    return *((void *)this + 11) - v2;
  }
  if (*((unsigned char *)this + 120))
  {
    unint64_t result = *((void *)this + 14);
  }
  else
  {
    unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
    *((void *)this + 14) = result;
    *((unsigned char *)this + 120) = 1;
  }
  if (*((void *)this + 11) < result) {
    return *((void *)this + 11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2)
{
  double v3 = (uint64_t *)((char *)this + 88);
  uint64_t v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)this + 11, (uint64_t)a2);
  uint64_t v5 = (WebKit::OriginStorageManager **)v4;
  uint64_t v6 = *((void *)this + 11);
  if (v6) {
    v6 += 72 * *(unsigned int *)(v6 - 4);
  }
  if (v6 == v4) {
    return 1;
  }
  uint64_t v7 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v4 + 64));
  if (WebKit::OriginStorageManager::StorageBucket::isActive((WebKit::OriginStorageManager::StorageBucket *)v7)) {
    return 0;
  }
  uint64_t v8 = WebKit::OriginStorageManager::defaultBucket(v5[8]);
  if (WebKit::OriginStorageManager::StorageBucket::hasDataInMemory((WebKit::OriginStorageManager::StorageBucket *)v8)) {
    return 0;
  }
  WebKit::OriginStorageManager::deleteEmptyDirectory((unsigned __int8 *)v5[8]);
  WebKit::deleteEmptyOriginDirectory((WebKit::OriginStorageManager *)((char *)v5[8] + 16), v10);
  if (*v3)
  {
    uint64_t v11 = *v3 + 72 * *(unsigned int *)(*v3 - 4);
    if ((WebKit::OriginStorageManager **)v11 == v5) {
      return 1;
    }
  }
  else
  {
    if (!v5) {
      return 1;
    }
    uint64_t v11 = 0;
  }
  if ((WebKit::OriginStorageManager **)v11 == v5) {
    return 1;
  }
  WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket((WebCore::ClientOrigin *)v5);
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v12 = *v3;
  int v13 = *v3 ? *(_DWORD *)(v12 - 12) - 1 : -1;
  *(_DWORD *)(v12 - 12) = v13;
  uint64_t v14 = *v3;
  if (!*v3) {
    return 1;
  }
  unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
  unsigned int v16 = *(_DWORD *)(v14 - 4);
  uint64_t result = 1;
  if (v15 < v16 && v16 >= 9)
  {
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v3, v16 >> 1, 0);
    return 1;
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::persistedInternal(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2)
{
  WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v6, this, a2);
  double v3 = v6;
  if (!v6) {
    return 0;
  }
  if (*((_DWORD *)v6 + 1))
  {
    uint64_t v4 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v6, v2);
    double v3 = v6;
    uint64_t v6 = 0;
    if (!v3) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, v2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }
  return v4;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2, const WebCore::ClientOrigin *a3)
{
  v25[8] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = (atomic_uchar *)*((void *)a2 + 5);
  WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)&v24, a3);
  v25[7] = *((void *)a2 + 39);
  WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void>(&v22, (uint64_t *)&v23);
  WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0::~$_0((uint64_t)&v23);
  if (*((unsigned char *)a2 + 248)) {
    double v7 = (double)*((unint64_t *)a2 + 30);
  }
  else {
    double v7 = 0.0;
  }
  double v8 = (double)*((unint64_t *)a2 + 24);
  if (*((unsigned char *)a2 + 216) && *((unsigned char *)a2 + 200))
  {
    if (*((unsigned char *)a2 + 264))
    {
      unint64_t v13 = *((void *)a2 + 32) & 0xFFFFFFFFFFFFFF00;
      uint64_t v12 = *((void *)a2 + 32);
    }
    else
    {
      uint64_t v9 = WTF::FileSystemImpl::volumeCapacity((const WebCore::ClientOrigin *)((char *)a2 + 56), v6);
      int v10 = *((unsigned __int8 *)a2 + 216);
      if (!v11)
      {
LABEL_17:
        if (v10)
        {
          double v14 = *((double *)a2 + 26);
          goto LABEL_10;
        }
LABEL_21:
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      if (!*((unsigned char *)a2 + 216)) {
        goto LABEL_21;
      }
      uint64_t v12 = 0;
      unint64_t v13 = (v9 + 0x3FFFFFFF) & 0xFFFFFFFFC0000000;
    }
    double v14 = *((double *)a2 + 26);
    double v8 = v14 * (double)(v13 | v12);
    uint64_t v15 = v22;
    uint64_t v22 = 0;
    if (!v15)
    {
LABEL_10:
      double v7 = v7 * v14;
      goto LABEL_11;
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    int v10 = *((unsigned __int8 *)a2 + 216);
    goto LABEL_17;
  }
LABEL_11:
  int v16 = WebCore::operator==();
  uint64_t v17 = (atomic_uchar *)*((void *)a2 + 2);
  if (v17) {
    uint64_t v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v17);
  }
  if (!v16)
  {
    double v8 = v8 * 0.1;
    double v7 = v7 * 0.1;
  }
  uint64_t v23 = v17;
  uint64_t v24 = a2;
  WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)v25, a3);
  WTF::Function<void ()(unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void>(&v21, (uint64_t *)&v23);
  uint64_t result = WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::~$_1((uint64_t)&v23, v18);
  *(void *)this = vcvtpd_u64_f64(v8);
  *((void *)this + 1) = vcvtpd_u64_f64(v7);
  uint64_t v20 = v21;
  *((void *)this + 2) = v22;
  *((void *)this + 3) = v20;
  return result;
}

uint64_t *WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9CC9D0;
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 16, (uint64_t)(a2 + 1));
  *(unsigned char *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 48, (uint64_t)(a2 + 5));
  *(void *)(v4 + 80) = a2[9];
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v2])(&v5, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t *WTF::Function<void ()(unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9CC9F8;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 24, (uint64_t)(a2 + 2));
  *(unsigned char *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 56, (uint64_t)(a2 + 6));
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::~$_1(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v7, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v5 = *(atomic_uchar **)a1;
  *(void *)a1 = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  return a1;
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3, WebCore::SecurityOriginData **a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v9;
  uint64_t v11 = v8 + 72 * v10;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (1)
    {
      int v23 = *(_DWORD *)(v11 + 24);
      if (v23) {
        break;
      }
      if (*(void *)v11 != -1) {
        goto LABEL_18;
      }
      uint64_t v21 = v11;
LABEL_19:
      unsigned int v10 = (v10 + v22) & v9;
      uint64_t v11 = v8 + 72 * v10;
      ++v22;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        if (v21)
        {
          *(void *)(v21 + 64) = 0;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)uint64_t v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          --*(_DWORD *)(*a2 - 16);
          uint64_t v11 = v21;
        }
        goto LABEL_5;
      }
    }
    if (v23 != 1)
    {
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_34;
    }
LABEL_18:
    uint64_t result = WebCore::operator==();
    if (result)
    {
      uint64_t v24 = *a2;
      if (*a2) {
        unsigned int v25 = *(_DWORD *)(v24 - 4);
      }
      else {
        unsigned int v25 = 0;
      }
      char v20 = 0;
      uint64_t v19 = v24 + 72 * v25;
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_5:
  uint64_t result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>::translate<WebCore::ClientOrigin const&,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>(v11, a3, a4);
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_11;
    }
LABEL_26:
    uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, v11);
    uint64_t v11 = result;
    uint64_t v15 = *a2;
    if (*a2) {
LABEL_34:
    }
      LODWORD(v18) = *(_DWORD *)(v15 - 4);
    else {
      LODWORD(v18) = 0;
    }
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_26;
  }
LABEL_11:
  uint64_t v19 = v15 + 72 * v18;
  char v20 = 1;
LABEL_12:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v20;
  return result;
}

WTF::StringImpl *WebKit::deleteEmptyOriginDirectory(WTF::StringImpl *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    uint64_t v2 = (const WTF::String **)this;
    if (WebKit::isEmptyOriginDirectory(this, a2))
    {
      WebKit::originFilePath((WTF::StringImpl *)&v9, *v2);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v9, v4);
      uint64_t v5 = v9;
      int v9 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v3);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)v2, v3);
    WTF::FileSystemImpl::parentPath((uint64_t *)&v9, (WTF::FileSystemImpl *)v2, v6);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v9, v7);
    this = v9;
    int v9 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebKit::NetworkStorageManager::persisted(WebKit::NetworkStorageManager *a1, const WebCore::ClientOrigin *a2, uint64_t *a3)
{
  uint64_t v4 = WebKit::NetworkStorageManager::persistedInternal(a1, a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(uint64_t result, uint64_t *a2)
{
  if (!*(unsigned char *)(result + 80))
  {
    uint64_t v3 = result;
    uint64_t v9 = result;
    uint64_t v4 = *(atomic_uchar **)(result + 16);
    if (v4) {
      uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
    }
    unsigned int v10 = (WTF::ThreadSafeWeakPtrControlBlock *)v4;
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v11);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x28);
    void *v5 = &unk_1EE9CCA98;
    v5[1] = v9;
    void v5[2] = v10;
    v5[3] = v3;
    uint64_t v6 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    v5[4] = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(void *))(*v8 + 8))(v8);
    }
    if (v11) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::persistOrigin(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2)
{
  int v4 = *((unsigned __int8 *)this + 352);
  if (*((unsigned char *)this + 352))
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)this;
    int v4 = *((_DWORD *)a2 + 14);
    if (!v4)
    {
      uint64_t v5 = (const WebCore::ClientOrigin *)((char *)a2 + 40);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  if (v4 == 1)
  {
    uint64_t v5 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
LABEL_4:
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v5, &v13);
    uint64_t v7 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v3 + 43, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    if (v7)
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v13, (const WebCore::ClientOrigin *)v3, v2);
      WTF::FileSystemImpl::overwriteEntireFile();
    }
    else
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v13, (const WebCore::ClientOrigin *)v3, v2);
      unsigned int v10 = v13;
      if (!v13) {
        return v7;
      }
      if (!*((_DWORD *)v13 + 1))
      {
        uint64_t v13 = 0;
LABEL_14:
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
        return v7;
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v13, v9);
    }
    unsigned int v10 = v13;
    uint64_t v13 = 0;
    if (v10) {
      goto LABEL_14;
    }
    return v7;
  }
  uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::NetworkStorageManager::persist(v12);
}

WTF::StringImpl *WebKit::NetworkStorageManager::persist(uint64_t a1, WebCore::SecurityOriginData *a2, WTF::RunLoop **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t)a2 + 32;
  if ((WebCore::operator==() & 1) == 0)
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(uint64_t (**)(WTF::RunLoop *))(*(void *)v12 + 8);
    return (WTF::StringImpl *)v13(v12);
  }
  WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)v24, (const WebCore::ClientOrigin *)a1, a2);
  uint64_t v8 = v24[0];
  if (!v24[0]) {
    goto LABEL_11;
  }
  int v9 = *((_DWORD *)v24[0] + 1);
  v24[0] = 0;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v7);
    if (v9) {
      goto LABEL_5;
    }
LABEL_11:
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, void))(*(void *)v11 + 16))(v11, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v11 + 8))(v11);
  }
  *(_DWORD *)v8 -= 2;
  if (!v9) {
    goto LABEL_11;
  }
LABEL_5:
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v10 = WebKit::NetworkStorageManager::persistOrigin((WebKit::NetworkStorageManager *)a1, a2);
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, uint64_t))(*(void *)v11 + 16))(v11, v10);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v11 + 8))(v11);
  }
  LOBYTE(v24[0]) = 0;
  int v25 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v24, (uint64_t)a2);
  v26[0] = 0;
  int v27 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v26, v6);
  uint64_t v15 = *a3;
  *a3 = 0;
  uint64_t v28 = v15;
  uint64_t v16 = *(unsigned int *)(a1 + 340);
  if (v16 == *(_DWORD *)(a1 + 336))
  {
    uint64_t v17 = WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 328), v16 + 1, (unint64_t)v24);
    uint64_t v18 = *(void *)(a1 + 328) + 72 * *(unsigned int *)(a1 + 340);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 328) + 72 * v16;
    uint64_t v17 = (uint64_t)v24;
  }
  std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](v18, v17);
  ++*(_DWORD *)(a1 + 340);
  uint64_t v19 = v28;
  uint64_t v28 = 0;
  if (v19) {
    uint64_t v19 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v19 + 8))(v19);
  }
  if (v27 != -1) {
    uint64_t v19 = (WTF::RunLoop *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v23, v26);
  }
  int v27 = -1;
  if (v25 != -1) {
    uint64_t v19 = (WTF::RunLoop *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(&v23, v24);
  }
  WTF::RunLoop::main(v19);
  char v20 = *(atomic_uchar **)(a1 + 16);
  if (v20) {
    uint64_t v21 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v20);
  }
  else {
    uint64_t v21 = 0;
  }
  int v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)int v22 = &unk_1EE9CCAC0;
  *((void *)v22 + 1) = v21;
  *((void *)v22 + 2) = a1;
  v24[0] = v22;
  WTF::RunLoop::dispatch();
  uint64_t result = v24[0];
  v24[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::estimate(uint64_t *a1, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v4 = WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  unint64_t v5 = WebKit::OriginQuotaManager::usage(*(WebKit::OriginQuotaManager **)(v4 + 48));
  unint64_t v6 = WebKit::OriginQuotaManager::reportedQuota(*(WebKit::OriginQuotaManager **)(v4 + 48));
  uint64_t v7 = *a3;
  *a3 = 0;
  v9[0] = v5;
  v9[1] = v6;
  char v10 = 1;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkStorageManager::resetStoragePersistedState(uint64_t a1, uint64_t *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9CCAE8;
  v5[1] = a1;
  void v5[2] = a1;
  v5[3] = v4;
  uint64_t v7 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearStorageForWebPage(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9CCB38;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  unint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  unint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *unint64_t v6 = &unk_1EE9CCB60;
  v6[1] = a1;
  uint64_t v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  uint64_t v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

atomic_uchar *WebKit::NetworkStorageManager::didIncreaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v17 = a1;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  *(void *)&long long v22 = a3;
  *((void *)&v22 + 1) = a4;
  char v23 = a5;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v9 = &unk_1EE9CCB88;
  *(void *)(v9 + 8) = v16;
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  *(void *)(v9 + 16) = v10;
  *(unsigned char *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 24, (uint64_t)v18);
  *(unsigned char *)(v9 + 56) = 0;
  *(_DWORD *)(v9 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 56, (uint64_t)v20);
  long long v11 = v22;
  *(unsigned char *)(v9 + 104) = v23;
  *(_OWORD *)(v9 + 88) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (atomic_uchar *)v9;
  if (v9) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (v21 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v21])(&v15, v20);
  }
  int v21 = -1;
  if (v19 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v19])(&v15, v18);
  }
  int v19 = -1;
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  if (v14) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), v12);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::fileSystemGetDirectory(uint64_t a1, uint64_t a2, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)a1, a3);
  uint64_t v8 = WebKit::OriginStorageManager::fileSystemStorageManager(v7, *(atomic_uint **)(a1 + 120));
  uint64_t v9 = *(const WTF::String **)(a2 + 24);
  uint64_t v10 = (WTF::StringImpl *)*((void *)v8 + 1);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v10;
  WebKit::FileSystemStorageManager::createHandle((WTF::FileSystemImpl *)&v17, (uint64_t)v8, v9, 1, (uint64_t *)&v16, 1, (uint64_t)v15);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v11);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, v15);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

void WebKit::NetworkStorageManager::closeHandle(uint64_t a1, uint64_t a2)
{
  Handle = (WebKit::FileSystemStorageHandle *)WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::close(Handle);
  }
}

uint64_t WebKit::NetworkStorageManager::isSameEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    uint64_t isSameEntry = WebKit::FileSystemStorageHandle::isSameEntry(Handle, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, isSameEntry);
  }
  else
  {
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::NetworkStorageManager::move(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    uint64_t v9 = (unsigned __int16)WebKit::FileSystemStorageHandle::move(Handle, a3, a4);
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
  }
  else
  {
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 263);
  }
  long long v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::NetworkStorageManager::getFileHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, char a5, uint64_t *a6)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::requestCreateHandle(a4, Handle, *(const WTF::String **)(a2 + 24), 0, a5, (uint64_t)&v13);
    uint64_t v11 = *a6;
    *a6 = 0;
    long long v14 = v13;
  }
  else
  {
    uint64_t v11 = *a6;
    *a6 = 0;
    LOBYTE(v14) = 7;
    DWORD2(v14) = 1;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v11 + 16))(v11, &v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkStorageManager::getDirectoryHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, char a5, uint64_t *a6)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::requestCreateHandle(a4, Handle, *(const WTF::String **)(a2 + 24), (const WTF::String *)1, a5, (uint64_t)&v13);
    uint64_t v11 = *a6;
    *a6 = 0;
    long long v14 = v13;
  }
  else
  {
    uint64_t v11 = *a6;
    *a6 = 0;
    LOBYTE(v14) = 7;
    DWORD2(v14) = 1;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v11 + 16))(v11, &v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkStorageManager::removeEntry(uint64_t a1, uint64_t a2, const WTF::String *a3, const WTF::String *a4, uint64_t *a5)
{
  uint64_t Handle = (WebKit::FileSystemStorageHandle *)WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    uint64_t v9 = (unsigned __int16)WebKit::FileSystemStorageHandle::removeEntry(Handle, a3, a4);
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
  }
  else
  {
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 263);
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::NetworkStorageManager::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::resolve(Handle, a3, (uint64_t)v8);
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a4, (uint64_t)v8);
    if (v9 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9CC790[v9])(&v12, v8);
    }
  }
  else
  {
    v10[0] = 7;
    int v11 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a4, (uint64_t)v10);
    if (v11 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9CC790[v11])(&v12, v10);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  int v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CC790[v7])(&v8, v6);
  }
  if (v5 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9CC790[v5])(v6, v4);
  }
  int v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::getFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    int v5 = *(_DWORD **)(Handle + 32);
    if (v5) {
      *v5 += 2;
    }
    int v7 = v5;
    int v8 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)&v7);
    if (v8 != -1) {
      return ((uint64_t (*)(char *, _DWORD **))off_1EE9CC7A0[v8])(&v11, &v7);
    }
  }
  else
  {
    v9[0] = 7;
    int v10 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v9);
    if (v10 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9CC7A0[v10])(&v11, v9);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  int v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CC7A0[v7])(&v8, v6);
  }
  if (v5 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9CC7A0[v5])(v6, v4);
  }
  int v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::createSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::createSyncAccessHandle(Handle, (uint64_t)v6);
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v6);
    if (v7 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))*(&off_1EE9CC7B0 + v7))(&v10, v6);
    }
  }
  else
  {
    v8[0] = 7;
    unsigned int v9 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v8);
    if (v9 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))*(&off_1EE9CC7B0 + v9))(&v10, v8);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  unsigned int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  unsigned int v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))*(&off_1EE9CC7B0 + v7))(&v8, v6);
  }
  if (v5 != -1) {
    ((void (*)(unsigned char *, unsigned char *))*(&off_1EE9CC7B0 + v5))(v6, v4);
  }
  unsigned int v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::closeSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle) {
    WebKit::FileSystemStorageHandle::closeSyncAccessHandle(Handle, a3);
  }
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::NetworkStorageManager::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    return WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(Handle, a3, a4, a5);
  }
  else
  {
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v10 + 16))(v10, 0, 0);
    char v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
}

uint64_t WebKit::NetworkStorageManager::getHandleNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::getHandleNames(Handle, v5, (uint64_t)v7);
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v7);
    if (v8 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9CC790[v8])(&v11, v7);
    }
  }
  else
  {
    v9[0] = 7;
    int v10 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v9);
    if (v10 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9CC790[v10])(&v11, v9);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::getHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, uint64_t *a5)
{
  uint64_t Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(void *)(a1 + 120), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::getHandle(a4, Handle, *(const WTF::String **)(a2 + 24), (uint64_t)&v11);
    uint64_t v9 = *a5;
    *a5 = 0;
    uint64_t v14 = v12;
    long long v13 = v11;
  }
  else
  {
    uint64_t v9 = *a5;
    *a5 = 0;
    LOBYTE(v13) = 7;
    LODWORD(v14) = 1;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v9 + 16))(v9, &v13);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::updateOriginData(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  LODWORD(v33[0]) = -1640531527;
  WORD2(v33[0]) = 0;
  BYTE6(v33[0]) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v33, a2);
  unsigned int v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v33) & v7;
  uint64_t v9 = v6 + 40 * v8;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    int v13 = *(_DWORD *)(v9 + 24);
    if (v13) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    uint64_t v11 = v9;
LABEL_11:
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = v6 + 40 * v8;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
    ++v12;
    if (v15) {
      goto LABEL_15;
    }
  }
  if (v13 == 1)
  {
LABEL_8:
    uint64_t result = WebCore::operator==();
    if (result) {
      goto LABEL_28;
    }
    goto LABEL_11;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
  if (v11)
  {
    *(void *)(v11 + 32) = 0;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    --*(_DWORD *)(*a1 - 16);
    uint64_t v9 = v11;
  }
LABEL_17:
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v9, a2);
  uint64_t v17 = *(void *)(v9 + 32);
  *(void *)(v9 + 32) = 0;
  if (v17) {
    uint64_t result = WTF::fastFree((WTF *)(v17 - 16), v16);
  }
  uint64_t v18 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v20 = *a1;
  if (*a1) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_27:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, v9);
      uint64_t v9 = result;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v24 = (_DWORD *)*a3;
  if (!*a3)
  {
    int v27 = 0;
    uint64_t v25 = 0;
    goto LABEL_39;
  }
  uint64_t v25 = *(v24 - 1);
  int v26 = &v24[4 * v25];
  if (!*(v24 - 3))
  {
    int v27 = &v24[4 * v25];
LABEL_39:
    int v26 = &v24[4 * v25];
    if (v24) {
      goto LABEL_36;
    }
    goto LABEL_40;
  }
  int v27 = v24;
  if (v25)
  {
    uint64_t v28 = 16 * v25;
    int v27 = v24;
    while (*v27 >= 0xFFFFFFFE)
    {
      v27 += 4;
      v28 -= 16;
      if (!v28)
      {
        int v27 = v26;
        break;
      }
    }
  }
  if (v24)
  {
LABEL_36:
    uint64_t v29 = &v24[4 * *(v24 - 1)];
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v29 = 0;
LABEL_41:
  if (v29 != v27)
  {
    uint64_t v30 = (uint64_t *)(v9 + 32);
    do
    {
      long long v34 = *(_OWORD *)v27;
      int v32 = 0;
      uint64_t result = (uint64_t)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>(v30, (int *)&v34, &v32, (uint64_t)v33);
      *(void *)(v33[0] + 8) += *((void *)&v34 + 1);
      unint64_t v31 = v27 + 4;
      int v27 = v26;
      if (v31 != v26)
      {
        int v27 = v31;
        while (*v27 >= 0xFFFFFFFE)
        {
          v27 += 4;
          if (v27 == v26)
          {
            int v27 = v26;
            break;
          }
        }
      }
    }
    while (v27 != v29);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::fetchData(uint64_t a1, int a2, char a3, uint64_t *a4)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v9 = &unk_1EE9CCC08;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(unsigned char *)(v9 + 28) = a3;
  *(void *)(v9 + 32) = v8;
  uint64_t v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v11;
  if (v11) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataOnDisk(uint64_t *a1, uint64_t *a2, unsigned int a3, void *a4, double a5)
{
  *a1 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v25, a2);
  uint64_t v11 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v25);
  int v12 = v10;
  int v13 = 0;
  uint64_t result = v25;
  if (v25) {
    int v13 = (WebCore::SecurityOriginData *)(v25 + ((unint64_t)*(unsigned int *)(v25 - 4) << 6));
  }
  if (v13 != v11)
  {
    unint64_t v15 = a3;
    uint64_t v16 = *(void *)&a3 & 0x8C0B0;
    while (1)
    {
      if (!(*(unsigned int (**)(void, WebCore::SecurityOriginData *))(*(void *)*a4 + 16))(*a4, v11)) {
        goto LABEL_20;
      }
      uint64_t v17 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a2, v11);
      uint64_t v18 = WebKit::OriginStorageManager::defaultBucket(v17);
      WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList((WTF::StringImpl *)v18, v15, 0, &v24);
      if (v24 && *(_DWORD *)(v24 - 12))
      {
        WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(a1, (uint64_t)v11, (uint64_t)v23);
        int v19 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a2, v11);
        uint64_t v20 = WebKit::OriginStorageManager::defaultBucket(v19);
        WebKit::OriginStorageManager::StorageBucket::deleteData((WTF::StringImpl *)v20, (void *)v15, a5);
      }
      if (v16 == 573616)
      {
        WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)v23, (const WebCore::ClientOrigin *)a2, v11);
        uint64_t v22 = v23[0];
        if (v23[0])
        {
          if (!*((_DWORD *)v23[0] + 1))
          {
            v23[0] = 0;
LABEL_15:
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
            goto LABEL_18;
          }
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v23, v21);
          uint64_t v22 = v23[0];
          v23[0] = 0;
          if (v22) {
            goto LABEL_15;
          }
        }
      }
LABEL_18:
      WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)a2, v11);
      if (v24) {
        WTF::fastFree((WTF *)(v24 - 16), v10);
      }
LABEL_20:
      while (1)
      {
        uint64_t v11 = (WebCore::SecurityOriginData *)((char *)v11 + 64);
        if (v11 == v12) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v11)) {
          goto LABEL_24;
        }
      }
      uint64_t v11 = v12;
LABEL_24:
      if (v11 == v13)
      {
        uint64_t result = v25;
        break;
      }
    }
  }
  if (result) {
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(result, v10);
  }
  return result;
}

atomic_uchar *volatile *WebKit::NetworkStorageManager::deleteData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v9 = *(unsigned int *)(a3 + 12);
  if (v9)
  {
    if (v9 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)(32 * v9));
    uint64_t v11 = *(unsigned int *)(a3 + 12);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 32 * v11;
      int v20 = ((unint64_t)(32 * v11 - 32) >> 5) + 1;
      do
      {
        WebCore::SecurityOriginData::isolatedCopy();
        uint64_t v14 = v10 + v12;
        *(unsigned char *)uint64_t v14 = 0;
        *(_DWORD *)(v14 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v10 + v12, (uint64_t)v24);
        if (v25 != -1) {
          ((void (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(&v23, v24);
        }
        v12 += 32;
      }
      while (v13 != v12);
      int v15 = v20;
    }
    else
    {
      int v15 = 0;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v16 = *a4;
  *a4 = 0;
  uint64_t v22 = v16;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v17 = &unk_1EE9CCC58;
  *(void *)(v17 + 8) = a1;
  *(void *)(v17 + 16) = a1;
  *(_DWORD *)(v17 + 24) = a2;
  *(void *)(v17 + 32) = v10;
  v21[0] = 0;
  v21[1] = 0;
  *(_DWORD *)(v17 + 40) = v9;
  *(_DWORD *)(v17 + 44) = v15;
  *(void *)(v17 + 48) = v16;
  v24[0] = v17;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v19 = v24[0];
  v24[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v22 = 0;
  return (atomic_uchar *volatile *)WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v18);
}

atomic_uchar *WebKit::NetworkStorageManager::deleteData(uint64_t a1, int a2, uint64_t a3, atomic_uchar **a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v16 = a1;
  int v17 = a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  int v7 = *a4;
  *a4 = 0;
  uint64_t v22 = v7;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x68);
  *(void *)uint64_t v8 = &unk_1EE9CCCD0;
  *(void *)(v8 + 8) = v15;
  uint64_t v9 = v16;
  uint64_t v16 = 0;
  *(void *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 24) = v17;
  *(unsigned char *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, (uint64_t)v18);
  *(unsigned char *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 64, (uint64_t)v20);
  uint64_t v10 = v22;
  uint64_t v22 = 0;
  *(void *)(v8 + 96) = v10;
  WTF::SuspendableWorkQueue::dispatch();
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  if (v21 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v21])(&v14, v20);
  }
  int v21 = -1;
  if (v19 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v19])(&v14, v18);
  }
  int v19 = -1;
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 16), v11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataModifiedSince(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v9 = &unk_1EE9CCD48;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(double *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = v8;
  uint64_t v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v11;
  if (v11) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)&v17, a3);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v19 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v9 = &unk_1EE9CCDC0;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v17;
  uint64_t v10 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(void *)(v9 + 40) = v10;
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  *(void *)(v9 + 48) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v19;
  uint64_t v19 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v12);
}

atomic_uchar *WebKit::NetworkStorageManager::moveData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, atomic_uchar **a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v17 = a1;
  int v18 = a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v23 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x68);
  *(void *)uint64_t v9 = &unk_1EE9CCE38;
  *(void *)(v9 + 8) = v16;
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  *(void *)(v9 + 16) = v10;
  *(_DWORD *)(v9 + 24) = v18;
  *(unsigned char *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 32, (uint64_t)v19);
  *(unsigned char *)(v9 + 64) = 0;
  *(_DWORD *)(v9 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 64, (uint64_t)v21);
  uint64_t v11 = v23;
  uint64_t v23 = 0;
  *(void *)(v9 + 96) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  if (v22 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v22])(&v15, v21);
  }
  int v22 = -1;
  if (v20 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v20])(&v15, v19);
  }
  int v20 = -1;
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  if (v14) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), v12);
  }
  return result;
}

atomic_uchar *WebKit::NetworkStorageManager::getOriginDirectory(uint64_t a1, uint64_t a2, int a3, atomic_uchar **a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v16 = a1;
  int v17 = a3;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  int v7 = *a4;
  *a4 = 0;
  int v22 = v7;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x68);
  *(void *)uint64_t v8 = &unk_1EE9CCE60;
  *(void *)(v8 + 8) = v15;
  uint64_t v9 = v16;
  uint64_t v16 = 0;
  *(void *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 24) = v17;
  *(unsigned char *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, (uint64_t)v18);
  *(unsigned char *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 64, (uint64_t)v20);
  uint64_t v10 = v22;
  int v22 = 0;
  *(void *)(v8 + 96) = v10;
  WTF::SuspendableWorkQueue::dispatch();
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v22;
  int v22 = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  if (v21 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v21])(&v14, v20);
  }
  int v21 = -1;
  if (v19 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v19])(&v14, v18);
  }
  int v19 = -1;
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 16), v11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::suspend(uint64_t a1, uint64_t *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    uint64_t v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v9[0]) = 134217984;
      *(void *)((char *)v9 + 4) = a1;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::suspend()", (uint8_t *)v9, 0xCu);
    }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    unsigned int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v5 = &unk_1EE9CCEB0;
    v5[1] = a1;
    void v5[2] = a1;
    v9[0] = v5;
    WTF::SuspendableWorkQueue::suspend();
    uint64_t result = v9[0];
    v9[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::resume(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this + 40);
  if ((v2 & 0x8000000000000000) == 0 || v2 == -1)
  {
    uint64_t v3 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134217984;
      uint64_t v5 = v1;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::resume()", (uint8_t *)&v4, 0xCu);
    }
    return WTF::SuspendableWorkQueue::resume(*(WTF::SuspendableWorkQueue **)(v1 + 48));
  }
  return this;
}

uint64_t WebKit::NetworkStorageManager::handleLowMemoryWarning(atomic_uchar *volatile *this)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1EE9CCED8;
  v2[1] = this;
  v2[2] = this;
  uint64_t v4 = (uint64_t)v2;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::syncLocalStorage(uint64_t a1, uint64_t *a2)
{
  v9[0] = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9CCF00;
  v5[1] = a1;
  void v5[2] = a1;
  v5[3] = v4;
  v9[1] = 0;
  void v9[2] = 0;
  uint64_t v10 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  return WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v9, v6);
}

uint64_t WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_((uint64_t)&v13, a3);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x30);
  *uint64_t v6 = &unk_1EE9CCF28;
  v6[1] = a1;
  uint64_t v6[2] = a1;
  v6[3] = v12;
  v6[4] = v13;
  uint64_t v7 = v14;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v6[5] = v7;
  uint64_t v15 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v8);
}

uint64_t WebKit::NetworkStorageManager::resetQuotaForTesting(uint64_t a1, uint64_t *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9CCF50;
  v5[1] = a1;
  void v5[2] = a1;
  v5[3] = v4;
  uint64_t v7 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting(uint64_t a1, uint64_t a2)
{
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(void *)(a1 + 88), a2);
  if (result)
  {
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 48);
      uint64_t v5 = *(void *)(v4 + 104);
      *(void *)(v4 + 80) = 0;
      *(void *)(v4 + 88) = v5;
      if (*(unsigned char *)(v4 + 120)) {
        *(unsigned char *)(v4 + 120) = 0;
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v7 = &unk_1EE9CCF78;
  *(void *)(v7 + 8) = a1;
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = v6;
  uint64_t v9 = v7;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v7 = &unk_1EE9CCFA0;
  *(void *)(v7 + 8) = a1;
  *(void *)(v7 + 16) = a1;
  *(double *)(v7 + 24) = a3;
  *(void *)(v7 + 32) = v6;
  uint64_t v9 = v7;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t std::optional<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    uint64_t v4 = *(void *)a1;
    *(void *)a1 = v3;
    if (v4) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
    }
  }
  else
  {
    *(void *)a1 = 0;
    uint64_t v5 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(WebKit::NetworkStorageManager *this, char a2)
{
  uint64_t v4 = (atomic_uchar *)*((void *)this + 2);
  if (v4) {
    uint64_t v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9CCFC8;
  *(void *)(v6 + 8) = v5;
  *(void *)(v6 + 16) = this;
  *(unsigned char *)(v6 + 24) = a2;
  uint64_t v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkStorageManager::addAllowedSitesForConnectionInternal(WTF::StringImpl **result, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (*((unsigned char *)result + 392))
  {
    uint64_t v10 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(v11, (uint64_t *)result + 48, &v12, (uint64_t *)&v10);
    uint64_t result = v10;
    uint64_t v5 = v11[0];
    if (v10) {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v4);
    }
    uint64_t v6 = *(unsigned int *)(a3 + 12);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)((char *)v5 + 8);
      uint64_t v8 = *(WTF::StringImpl ***)a3;
      uint64_t v9 = 8 * v6;
      do
      {
        uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v7, v8++, (uint64_t)v11);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::StringImpl **result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        int v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a4;
  *a4 = 0;
  uint64_t result = (WTF::StringImpl **)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, (WTF::StringImpl *)a2);
  }
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
      uint64_t v16 = (uint64_t *)result;
      uint64_t v24 = *a2;
      if (*a2) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *uint64_t v7 = (WTF::StringImpl *)v16;
  v7[1] = (WTF::StringImpl *)v29;
  *((unsigned char *)v7 + 16) = v28;
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9CCFF0;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  *(_OWORD *)a2 = 0u;
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = a2[2];
  *(_OWORD *)(v4 + 32) = 0u;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(v4 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  *a1 = v4;
  return a1;
}

atomic_uchar **WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0(atomic_uchar **a1, void *a2)
{
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::isSiteAllowedForConnection(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  if (!*(unsigned char *)(a1 + 392)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 384);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a2);
  if (v5) {
    uint64_t v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v6) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(v6 + 8);

  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v8, a3);
}

WTF::StringImpl **WebKit::NetworkStorageManager::connectToStorageArea(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, WebCore::SecurityOriginData *a7, uint64_t *a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *(void *)(a2 + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, a7);
  char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v16, (WTF::ASCIICaseInsensitiveHash **)buf);
  int v19 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (isSiteAllowedForConnection)
  {
    uint64_t v20 = *(void **)(a2 + 24);
    v47[0] = (WebCore::SecurityOriginData *)a1;
    v47[1] = a7;
    WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>((uint64_t)buf, a1 + 11, (uint64_t)a7, v47);
    uint64_t v21 = *(WebKit::OriginStorageManager **)(*(void *)buf + 64);
    if (a3 == 1)
    {
      int v22 = (atomic_uint *)a1[16];
      uint64_t v23 = WebKit::OriginStorageManager::defaultBucket(v21);
      uint64_t v24 = WebKit::OriginStorageManager::StorageBucket::localStorageManager((WebKit::OriginStorageManager::StorageBucket *)v23, v22);
      int v25 = (WTF::WorkQueue *)a1[6];
      WTF::WorkQueue::ref(v25);
      *(void *)buf = v25;
      uint64_t v26 = WebKit::LocalStorageManager::connectToLocalStorageArea(v24, v20, a4, a7, (uint64_t)buf);
      uint64_t v27 = *(void *)buf;
      *(void *)buf = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 56))(v27);
      }
      goto LABEL_8;
    }
    if (a3)
    {
      if (a3 != 2)
      {
        uint64_t v26 = 0;
        goto LABEL_8;
      }
      char v33 = (atomic_uint *)a1[16];
      long long v34 = WebKit::OriginStorageManager::defaultBucket(v21);
      int v35 = WebKit::OriginStorageManager::StorageBucket::localStorageManager((WebKit::OriginStorageManager::StorageBucket *)v34, v33);
      uint64_t v36 = WebKit::LocalStorageManager::connectToTransientLocalStorageArea((uint64_t)v35, v20, a4, a7);
    }
    else
    {
      if (!a6)
      {
        unint64_t v45 = 0;
        WebKit::StorageAreaBase::nextMessageIdentifier(v21);
        WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, 0, &v45);
        uint64_t result = v45;
        if (!v45) {
          return result;
        }
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
      }
      uint64_t v38 = (atomic_uint *)a1[16];
      uint64_t v39 = WebKit::OriginStorageManager::defaultBucket(v21);
      uint64_t v40 = (uint64_t *)WebKit::OriginStorageManager::StorageBucket::sessionStorageManager((uint64_t)v39, v38);
      uint64_t v36 = WebKit::SessionStorageManager::connectToSessionStorageArea(v40, v20, a4, a7, a5);
    }
    uint64_t v26 = v36;
LABEL_8:
    uint64_t StorageArea = WebKit::StorageAreaRegistry::getStorageArea(a1[16], v26);
    if (StorageArea)
    {
      uint64_t v29 = (WebKit::StorageAreaBase *)StorageArea;
      uint64_t v30 = (WebKit::StorageAreaBase *)(*(void *(**)(WTF::StringImpl ***__return_ptr))(*(void *)StorageArea
                                                                                                  + 48))(&v44);
      WebKit::StorageAreaBase::nextMessageIdentifier(v30);
      WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, v26, &v44);
      if (v44) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v44, v31);
      }
      return (WTF::StringImpl **)WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebKit::NetworkStorageManager *)a1, a7, v29);
    }
    int v43 = 0;
    WebKit::StorageAreaBase::nextMessageIdentifier(0);
    WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, v26, &v43);
    uint64_t result = v43;
    if (!v43) {
      return result;
    }
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
  }
  uint64_t v41 = off_1EB358938;
  BOOL v42 = os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT);
  if (v42)
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "void WebKit::NetworkStorageManager::connectToStorageArea(IPC::Connection &, WebCore::StorageTyp"
                         "e, StorageAreaMapIdentifier, std::optional<StorageNamespaceIdentifier>, const WebCore::ClientOr"
                         "igin &, CompletionHandler<void (StorageAreaIdentifier, HashMap<String, String>, uint64_t)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1390: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
  uint64_t v46 = 0;
  WebKit::StorageAreaBase::nextMessageIdentifier((WebKit::StorageAreaBase *)v42);
  WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, 0, &v46);
  uint64_t result = v46;
  if (v46) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
  }
  return result;
}

WTF::StringImpl **WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl ***a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v8 = v4;
  WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(v3, a2, &v8);
  uint64_t result = v8;
  if (v8) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v5);
  }
  if (v3)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (WTF::StringImpl **)v7(v3);
  }
  return result;
}

void WebKit::NetworkStorageManager::cancelConnectToStorageArea(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, WebCore::SecurityOriginData *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a2 + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v23, a6);
  char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v12, (WTF::ASCIICaseInsensitiveHash **)v23);
  unsigned int v15 = *(WTF::StringImpl **)v23;
  *(void *)uint64_t v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      if (isSiteAllowedForConnection) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (isSiteAllowedForConnection)
  {
LABEL_5:
    uint64_t v16 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 88), (uint64_t)a6);
    uint64_t v17 = *(void *)(a1 + 88);
    if (v17) {
      v17 += 72 * *(unsigned int *)(v17 - 4);
    }
    if (v17 != v16)
    {
      uint64_t v18 = *(void *)(a2 + 24);
      if (a3)
      {
        if (a3 == 2 || a3 == 1)
        {
          int v19 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v16 + 64))[4];
          if (v19) {
            WebKit::LocalStorageManager::connectionClosedForLocalStorageArea((uint64_t)v19, v18);
          }
        }
      }
      else
      {
        uint64_t v21 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v16 + 64))[7];
        if (v21) {
          BOOL v22 = a5 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22) {
          WebKit::SessionStorageManager::cancelConnectToSessionStorageArea((uint64_t)v21, v18, a4);
        }
      }
    }
    return;
  }
LABEL_14:
  uint64_t v20 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v23 = 136446210;
    *(void *)&v23[4] = "void WebKit::NetworkStorageManager::cancelConnectToStorageArea(IPC::Connection &, WebCore::Stor"
                         "ageType, std::optional<StorageNamespaceIdentifier>, const WebCore::ClientOrigin &)";
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1426: Invalid message dispatched %{public}s", v23, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
}

void WebKit::NetworkStorageManager::disconnectFromStorageArea(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t StorageArea = WebKit::StorageAreaRegistry::getStorageArea(a1[16], a3);
  if (StorageArea)
  {
    uint64_t v7 = StorageArea;
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = StorageArea + 32;
    buf[0] = 0;
    int v30 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
    uint64_t v10 = v7 + 64;
    v31[0] = 0;
    int v32 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v7 + 64);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v26, (const WebCore::SecurityOriginData *)buf);
    char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v8, &v26);
    unint64_t v13 = v26;
    uint64_t v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    if (v32 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v32])(&v27, v31);
    }
    int v32 = -1;
    if (v30 != -1) {
      ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v30])(&v27, buf);
    }
    if (isSiteAllowedForConnection)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        buf[0] = 0;
        int v30 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v9);
        v31[0] = 0;
        int v32 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v10);
        unint64_t v14 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (WebCore::SecurityOriginData *)buf);
        unsigned int v15 = (atomic_uint *)a1[16];
        uint64_t v16 = WebKit::OriginStorageManager::defaultBucket(v14);
        uint64_t v17 = WebKit::OriginStorageManager::StorageBucket::localStorageManager((WebKit::OriginStorageManager::StorageBucket *)v16, v15);
        uint64_t v18 = *(void *)(a2 + 24);
        uint64_t v19 = *((void *)v17 + 3);
        if (v19 && *(void *)(v19 + 16) == a3)
        {
          WebKit::LocalStorageManager::connectionClosedForLocalStorageArea((uint64_t)v17, v18);
        }
        else
        {
          uint64_t v24 = *((void *)v17 + 2);
          if (v24 && *(void *)(v24 + 16) == a3) {
            WebKit::LocalStorageManager::connectionClosedForTransientStorageArea((uint64_t)v17, v18);
          }
        }
        if (v32 != -1) {
          ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v32])(&v26, v31);
        }
        int v32 = -1;
      }
      else
      {
        buf[0] = 0;
        int v30 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v9);
        v31[0] = 0;
        int v32 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v10);
        uint64_t v20 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (WebCore::SecurityOriginData *)buf);
        uint64_t v21 = (atomic_uint *)a1[16];
        BOOL v22 = WebKit::OriginStorageManager::defaultBucket(v20);
        uint64_t v23 = WebKit::OriginStorageManager::StorageBucket::sessionStorageManager((uint64_t)v22, v21);
        WebKit::SessionStorageManager::disconnectFromStorageArea((uint64_t)v23, *(void *)(a2 + 24), a3);
        if (v32 != -1) {
          ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v32])(&v26, v31);
        }
        int v32 = -1;
      }
      if (v30 != -1) {
        ((void (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v30])(&v26, buf);
      }
    }
    else
    {
      int v25 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "void WebKit::NetworkStorageManager::disconnectFromStorageArea(IPC::Connection &, StorageAreaIdentifier)";
        _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1459: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
    }
  }
}

WTF::StringImpl **WebKit::NetworkStorageManager::setItem(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = 0;
  uint64_t StorageArea = WebKit::StorageAreaRegistry::getStorageArea(a1[16], a3);
  if (!StorageArea)
  {
    uint64_t v21 = *a8;
    *a8 = 0;
LABEL_6:
    (*(void (**)(uint64_t, void, WTF::StringImpl ***))(*(void *)v21 + 16))(v21, 0, &v40);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    goto LABEL_30;
  }
  uint64_t v16 = (WebKit::StorageAreaBase *)StorageArea;
  uint64_t v37 = a4;
  uint64_t v17 = *(void *)(a2 + 24);
  buf[0] = 0;
  int v43 = -1;
  uint64_t v38 = StorageArea + 32;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
  v44[0] = 0;
  int v45 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v39, (const WebCore::SecurityOriginData *)buf);
  char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v17, &v39);
  uint64_t v20 = v39;
  uint64_t v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v45 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v45])(&v41, v44);
  }
  int v45 = -1;
  if (v43 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v43])(&v41, buf);
  }
  if ((isSiteAllowedForConnection & 1) == 0)
  {
    int v35 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkStorageManager::setItem(IPC::Connection &, StorageAreaIdentifier, Storage"
                           "AreaImplIdentifier, String &&, String &&, String &&, CompletionHandler<void (BOOL, HashMap<St"
                           "ring, String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v35, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1477: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    uint64_t v21 = *a8;
    *a8 = 0;
    goto LABEL_6;
  }
  uint64_t v23 = *(void *)(a2 + 24);
  buf[0] = 0;
  int v43 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v38);
  v44[0] = 0;
  int v45 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v39, (const WebCore::SecurityOriginData *)buf);
  char v25 = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v23, &v39);
  uint64_t v26 = v39;
  uint64_t v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v45 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v45])(&v41, v44);
  }
  int v45 = -1;
  if (v43 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v43])(&v41, buf);
  }
  if (v25)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebKit::StorageAreaBase *, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 56))(&v39, v16, *(void *)(a2 + 24), v37, a5, a6, a7);
    int v27 = BYTE1(v39);
    if (BYTE1(v39))
    {
      (*(void (**)(unsigned char *__return_ptr, WebKit::StorageAreaBase *))(*(void *)v16 + 48))(buf, v16);
      uint64_t v29 = *(WTF::StringImpl ***)buf;
      *(void *)buf = 0;
      int v30 = v40;
      uint64_t v40 = v29;
      if (v30)
      {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v28);
        if (*(void *)buf) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v31);
        }
      }
    }
    BOOL v32 = v27 != 0;
    uint64_t v33 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, BOOL, WTF::StringImpl ***))(*(void *)v33 + 16))(v33, v32, &v40);
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    buf[0] = 0;
    int v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v38);
    v44[0] = 0;
    int v45 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
    WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebKit::NetworkStorageManager *)a1, (const WebCore::ClientOrigin *)buf, v16);
    if (v45 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v45])(&v41, v44);
    }
    int v45 = -1;
    if (v43 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v43])(&v41, buf);
    }
  }
  else
  {
    uint64_t v36 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkStorageManager::setItem(IPC::Connection &, StorageAreaIdentifier, Storage"
                           "AreaImplIdentifier, String &&, String &&, String &&, CompletionHandler<void (BOOL, HashMap<St"
                           "ring, String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v36, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1479: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
LABEL_30:
  uint64_t result = v40;
  if (v40) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v22);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkStorageManager::removeItem(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL v32 = 0;
  uint64_t StorageArea = WebKit::StorageAreaRegistry::getStorageArea(a1[16], a3);
  if (!StorageArea)
  {
LABEL_22:
    uint64_t v28 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, void, WTF::StringImpl ***))(*(void *)v28 + 16))(v28, 0, &v32);
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    goto LABEL_23;
  }
  unint64_t v14 = (WebKit::StorageAreaBase *)StorageArea;
  uint64_t v15 = *(void *)(a2 + 24);
  buf[0] = 0;
  int v35 = -1;
  uint64_t v30 = StorageArea + 32;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
  v36[0] = 0;
  int v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v36, (uint64_t)v14 + 64);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v31, (const WebCore::SecurityOriginData *)buf);
  char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v15, &v31);
  uint64_t v18 = v31;
  unint64_t v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (v37 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v37])(&v33, v36);
  }
  int v37 = -1;
  if (v35 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v33, buf);
  }
  if ((isSiteAllowedForConnection & 1) == 0)
  {
    int v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkStorageManager::removeItem(IPC::Connection &, StorageAreaIdentifier, Stor"
                           "ageAreaImplIdentifier, String &&, String &&, CompletionHandler<void (BOOL, HashMap<String, String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1500: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebKit::StorageAreaBase *, void, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 64))(&v31, v14, *(void *)(a2 + 24), a4, a5, a6);
  int v19 = BYTE1(v31);
  if (BYTE1(v31))
  {
    (*(void (**)(unsigned char *__return_ptr, WebKit::StorageAreaBase *))(*(void *)v14 + 48))(buf, v14);
    uint64_t v21 = *(WTF::StringImpl ***)buf;
    *(void *)buf = 0;
    BOOL v22 = v32;
    BOOL v32 = v21;
    if (v22)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v20);
      if (*(void *)buf) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v23);
      }
    }
  }
  BOOL v24 = v19 != 0;
  uint64_t v25 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, BOOL, WTF::StringImpl ***))(*(void *)v25 + 16))(v25, v24, &v32);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  buf[0] = 0;
  int v35 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v30);
  v36[0] = 0;
  int v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v36, (uint64_t)v14 + 64);
  WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebKit::NetworkStorageManager *)a1, (const WebCore::ClientOrigin *)buf, v14);
  if (v37 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v37])(&v33, v36);
  }
  int v37 = -1;
  if (v35 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v33, buf);
  }
LABEL_23:
  uint64_t result = v32;
  if (v32) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v26);
  }
  return result;
}

WTF::WallTime *WebKit::NetworkStorageManager::clear(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t StorageArea = WebKit::StorageAreaRegistry::getStorageArea(a1[16], a3);
  if (StorageArea)
  {
    uint64_t v12 = (WebKit::StorageAreaBase *)StorageArea;
    uint64_t v24 = a5;
    uint64_t v13 = *(void *)(a2 + 24);
    uint64_t v14 = StorageArea + 32;
    buf[0] = 0;
    int v29 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
    v30[0] = 0;
    int v31 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v12 + 64);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v25, (const WebCore::SecurityOriginData *)buf);
    char isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection((uint64_t)a1, v13, &v25);
    uint64_t v17 = v25;
    uint64_t v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v31 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(&v26, v30);
    }
    int v31 = -1;
    if (v29 != -1) {
      ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v29])(&v26, buf);
    }
    if (isSiteAllowedForConnection)
    {
      (*(void (**)(uint8_t *__return_ptr, WebKit::StorageAreaBase *, void, uint64_t, uint64_t))(*(void *)v12 + 72))(buf, v12, *(void *)(a2 + 24), a4, v24);
      uint64_t v21 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      buf[0] = 0;
      int v29 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v14);
      v30[0] = 0;
      int v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v12 + 64);
      uint64_t result = WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebKit::NetworkStorageManager *)a1, (const WebCore::ClientOrigin *)buf, v12);
      if (v31 != -1) {
        uint64_t result = (WTF::WallTime *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(&v25, v30);
      }
      int v31 = -1;
      if (v29 != -1) {
        return (WTF::WallTime *)((uint64_t (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v29])(&v25, buf);
      }
    }
    else
    {
      BOOL v22 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "void WebKit::NetworkStorageManager::clear(IPC::Connection &, StorageAreaIdentifier, StorageAreaImplIdentif"
              "ier, String &&, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1519: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
      uint64_t v23 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      return (WTF::WallTime *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  else
  {
    uint64_t v18 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    int v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);
    return (WTF::WallTime *)v19(v18);
  }
  return result;
}

WTF *WebKit::NetworkStorageManager::openDatabase(WebKit::NetworkStorageManager *this, void **a2, const WebCore::IDBOpenRequestData *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(*((void *)this + 17), a2[3], *((void *)a3 + 1));
  ++*(_DWORD *)v5;
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v14, (uint64_t)a3);
  uint64_t v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, (WebCore::SecurityOriginData *)v15);
  uint64_t v7 = WebKit::OriginStorageManager::idbStorageManager(v6, *((atomic_uint **)this + 17));
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v19, (uint64_t)a3);
  WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase((uint64_t)v7, (uint64_t)&v19);
  if (v23 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v23])(&v13, &v22);
  }
  int v23 = -1;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v21])(&v13, &v20);
  }
  int v21 = -1;
  uint64_t v9 = v19;
  int v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::openDatabaseConnection();
  if (v18 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v18])(&v19, &v17);
  }
  int v18 = -1;
  if (v16 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v16])(&v19, v15);
  }
  int v16 = -1;
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v5, v10);
}

WTF::StringImpl *WebKit::NetworkStorageManager::openDBRequestCancelled(WebKit::NetworkStorageManager *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v21, (uint64_t)a2);
  uint64_t v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, (WebCore::SecurityOriginData *)v22);
  uint64_t v5 = WebKit::OriginStorageManager::idbStorageManager(v4, *((atomic_uint **)this + 17));
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)v26, (uint64_t)a2);
  uint64_t v9 = (WebCore::IDBServer::UniqueIDBDatabase *)*((void *)v5 + 5);
  uint64_t v7 = (uint64_t *)((char *)v5 + 40);
  uint64_t v8 = v9;
  if (v9)
  {
    unsigned int v10 = *((_DWORD *)v8 - 2);
    int v11 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>((uint64_t)v26);
    for (i = 0; ; int v11 = i + v14)
    {
      unsigned int v14 = v11 & v10;
      uint64_t v15 = (void *)((char *)v8 + 88 * (v11 & v10));
      if (*v15 != -1)
      {
        if (!*v15)
        {
          uint64_t v8 = 0;
          goto LABEL_9;
        }
        if (WebCore::operator==((uint64_t)v15, (uint64_t)v26, v12)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v8 = (WebCore::IDBServer::UniqueIDBDatabase *)*((void *)v8 + 11 * v14 + 10);
  }
LABEL_9:
  if (v29 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v29])(&v20, &v28);
  }
  int v29 = -1;
  if (v27 != -1) {
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v20, &v26[1]);
  }
  int v27 = -1;
  int v16 = v26[0];
  v26[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v6);
      if (!v8) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v8) {
    goto LABEL_27;
  }
LABEL_19:
  *(_OWORD *)char v26 = *(_OWORD *)((char *)a2 + 8);
  WebCore::IDBServer::UniqueIDBDatabase::openDBRequestCancelled(v8, (const WebCore::IDBResourceIdentifier *)v26);
  if (!WebCore::IDBServer::UniqueIDBDatabase::tryClose(v8)) {
    goto LABEL_27;
  }
  uint64_t v17 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>(v7, (uint64_t)v8 + 16);
  uint64_t v6 = (WTF::StringImpl *)v17;
  if (*v7)
  {
    uint64_t v18 = *v7 + 88 * *(unsigned int *)(*v7 - 4);
    if (v18 == v17) {
      goto LABEL_27;
    }
  }
  else
  {
    if (!v17) {
      goto LABEL_27;
    }
    uint64_t v18 = 0;
  }
  if (v18 != v17) {
    WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove(v7, v17);
  }
LABEL_27:
  if (v25 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(v26, &v24);
  }
  int v25 = -1;
  if (v23 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v23])(v26, v22);
  }
  int v23 = -1;
  uint64_t result = v21;
  int v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebKit::NetworkStorageManager::deleteDatabase(WebKit::NetworkStorageManager *this, void **a2, const WebCore::IDBOpenRequestData *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(*((void *)this + 17), a2[3], *((void *)a3 + 1));
  ++*(_DWORD *)v5;
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v18, (uint64_t)a3);
  uint64_t v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, (WebCore::SecurityOriginData *)v19);
  uint64_t v7 = WebKit::OriginStorageManager::idbStorageManager(v6, *((atomic_uint **)this + 17));
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v23, (uint64_t)a3);
  UniqueIDBDatabase = (WebCore::IDBServer::UniqueIDBDatabase *)WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase((uint64_t)v7, (uint64_t)&v23);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v17, &v26);
  }
  int v27 = -1;
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(&v17, &v24);
  }
  int v25 = -1;
  unsigned int v10 = v23;
  int v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDelete();
  if (WebCore::IDBServer::UniqueIDBDatabase::tryClose(UniqueIDBDatabase))
  {
    uint64_t v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>((uint64_t *)v7 + 5, (uint64_t)UniqueIDBDatabase + 16);
    int v11 = (WTF::StringImpl *)v12;
    uint64_t v13 = *((void *)v7 + 5);
    if (v13)
    {
      uint64_t v14 = v13 + 88 * *(unsigned int *)(v13 - 4);
      if (v14 == v12) {
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t v14 = 0;
    }
    if (v14 != v12) {
      WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove((uint64_t *)v7 + 5, v12);
    }
  }
LABEL_17:
  if (v22 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v22])(&v23, &v21);
  }
  int v22 = -1;
  if (v20 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v20])(&v23, v19);
  }
  int v20 = -1;
  uint64_t v15 = v18;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v5, v11);
}

uint64_t WebKit::NetworkStorageManager::establishTransaction(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173960]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::databaseConnectionPendingClose(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173980]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::databaseConnectionClosed(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173970]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::abortOpenAndUpgradeNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v5 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(void *)(*(void *)(a1 + 136) + 24), *(void *)a3, *(void *)(a3 + 8));
    if (v5) {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::abortWithoutCallback(v5);
    }
  }
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173970]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::didFireVersionChangeEvent(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173968]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::abortTransaction(WebKit::NetworkStorageManager *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(*((void *)this + 17) + 24), *(void *)a2, *((void *)a2 + 1));
  if (result)
  {
    return MEMORY[0x1F41739E8]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::commitTransaction(WebKit::NetworkStorageManager *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(*((void *)this + 17) + 24), *(void *)a2, *((void *)a2 + 1));
  if (result)
  {
    return MEMORY[0x1F41739F0]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::didFinishHandlingVersionChangeTransaction(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::IDBStorageRegistry::connection(*(void *)(*(void *)(a1 + 136) + 16), a2);
  if (result)
  {
    return MEMORY[0x1F4173978]();
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::createObjectStore(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 136);
  unint64_t v6 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(void *)(v5 + 24), v6, v7);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if (result)
    {
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)MEMORY[0x1F41739C8](v9, this, a3);
    }
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::deleteObjectStore(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  uint64_t v5 = *((void *)this + 17);
  unint64_t v6 = WebCore::IDBRequestData::transactionIdentifier(a2);
  uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(void *)(v5 + 24), v6, v7);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if (result)
    {
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)MEMORY[0x1F41739D0](v9, a2, a3);
    }
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::renameObjectStore(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 136);
  unint64_t v8 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(void *)(v7 + 24), v8, v9);
  if (result)
  {
    int v11 = result;
    uint64_t result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if (result)
    {
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)MEMORY[0x1F41739D8](v11, this, a3, a4);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearObjectStore(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739C0]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::createIndex(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F4173990]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteIndex(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F4173998]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::renameIndex(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739A0]();
  }
  return result;
}

void WebKit::NetworkStorageManager::putOrAdd(uint64_t a1, uint64_t a2, WebCore::IDBRequestData *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 136);
  unint64_t v13 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t v15 = WebKit::IDBStorageRegistry::transaction(*(void *)(v12 + 24), v13, v14);
  if (!v15) {
    return;
  }
  uint64_t v17 = *(unsigned int *)(a5 + 20);
  if (v17 == *(_DWORD *)(a5 + 36))
  {
    uint64_t v18 = v15;
    if (!v17)
    {
LABEL_27:
      MEMORY[0x1F4173A00](v18, this, a4, a5, a6);
      return;
    }
    uint64_t v19 = *(void *)(a1 + 320);
    if (v19)
    {
      uint64_t v23 = *(void *)(a2 + 24);
      unsigned int v24 = *(_DWORD *)(v19 - 8);
      unint64_t v25 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
      unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      uint64_t v28 = v24 & ((v27 >> 31) ^ v27);
      uint64_t v29 = *(void *)(v19 + 16 * v28);
      if (v29 != v23)
      {
        int v30 = 1;
        while (v29)
        {
          uint64_t v28 = (v28 + v30) & v24;
          uint64_t v29 = *(void *)(v19 + 16 * v28);
          ++v30;
          if (v29 == v23) {
            goto LABEL_17;
          }
        }
        uint64_t v28 = *(unsigned int *)(v19 - 4);
      }
LABEL_17:
      if (v28 != *(_DWORD *)(v19 - 4))
      {
        int v31 = (uint64_t *)(v19 + 16 * v28 + 8);
        uint64_t v32 = *(WTF::StringImpl ***)(a5 + 24);
        uint64_t v33 = 8 * v17;
        while (1)
        {
          long long v34 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v31, v32, v16);
          if (*v31)
          {
            uint64_t v35 = *v31 + 8 * *(unsigned int *)(*v31 - 4);
            if ((WTF::StringImpl **)v35 == v34) {
              goto LABEL_30;
            }
          }
          else
          {
            if (!v34)
            {
LABEL_30:
              int v20 = qword_1EB357F38;
              if (os_log_type_enabled((os_log_t)qword_1EB357F38, OS_LOG_TYPE_FAULT))
              {
                __int16 v36 = 0;
                uint64_t v21 = "NetworkStorageManager::putOrAdd: Blob path was not created for this WebProcess";
                int v22 = (uint8_t *)&v36;
LABEL_15:
                _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, v21, v22, 2u);
              }
              return;
            }
            uint64_t v35 = 0;
          }
          if ((WTF::StringImpl **)v35 != v34) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v31, v34);
          }
          ++v32;
          v33 -= 8;
          if (!v33) {
            goto LABEL_27;
          }
        }
      }
    }
    int v20 = qword_1EB357F38;
    if (os_log_type_enabled((os_log_t)qword_1EB357F38, OS_LOG_TYPE_FAULT))
    {
      __int16 v37 = 0;
      uint64_t v21 = "NetworkStorageManager::putOrAdd: IDBValue contains blob paths but none are allowed for this process";
      int v22 = (uint8_t *)&v37;
      goto LABEL_15;
    }
    return;
  }
  int v20 = qword_1EB357F38;
  if (os_log_type_enabled((os_log_t)qword_1EB357F38, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v21 = "NetworkStorageManager::putOrAdd: Number of blob URLs doesn't match the number of blob file paths.";
    int v22 = buf;
    goto LABEL_15;
  }
}

uint64_t WebKit::NetworkStorageManager::getRecord(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F4173A08]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::getAllRecords(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739B0]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::getCount(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739F8]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteRecord(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739A8]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::openCursor(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F4173988]();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::iterateCursor(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2 = *(void *)(a1 + 136);
  unint64_t v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  uint64_t result = WebKit::IDBStorageRegistry::transaction(*(void *)(v2 + 24), v3, v4);
  if (result)
  {
    return MEMORY[0x1F41739B8]();
  }
  return result;
}

WTF *WebKit::NetworkStorageManager::getAllDatabaseNamesAndVersions(WebKit::NetworkStorageManager *this, void **a2, const WebCore::IDBResourceIdentifier *a3, const WebCore::ClientOrigin *a4)
{
  unint64_t v6 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(*((void *)this + 17), a2[3], *(void *)a3);
  ++*(_DWORD *)v6;
  uint64_t v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, a4);
  unint64_t v8 = WebKit::OriginStorageManager::idbStorageManager(v7, *((atomic_uint **)this + 17));
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unsigned int v61 = 0;
  unint64_t v9 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)v8 + 5);
  int v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = *((void *)v8 + 5);
  if (v13) {
    unint64_t v14 = (WTF::StringImpl *)(v13 + 88 * *(unsigned int *)(v13 - 4));
  }
  else {
    unint64_t v14 = 0;
  }
  if (v14 != v9)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::filePath((uint64_t *)&v56, *((WebCore::IDBServer::UniqueIDBDatabase **)v11 + 10));
      if (v56 && *((_DWORD *)v56 + 1)) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v61, &v56, v15, (uint64_t)&v58);
      }
      WebCore::IDBServer::UniqueIDBDatabase::nameAndVersion((uint64_t *)&v58, *((WebCore::IDBServer::UniqueIDBDatabase **)v11 + 10));
      if (v60)
      {
        int v16 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          uint64_t v17 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v58);
          int v18 = HIDWORD(v53);
          uint64_t v19 = (void *)(v52 + 16 * HIDWORD(v53));
          uint64_t v20 = *v17;
          uint64_t *v17 = 0;
          *uint64_t v19 = v20;
          v19[1] = v17[1];
          HIDWORD(v53) = v18 + 1;
          if (!v60) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v21 = (WTF::StringImpl **)(v52 + 16 * HIDWORD(v53));
          int v22 = v58;
          uint64_t v58 = 0;
          const char *v21 = v22;
          v21[1] = v59;
          HIDWORD(v53) = v16 + 1;
        }
        uint64_t v23 = v58;
        uint64_t v58 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v10);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
LABEL_17:
      unsigned int v24 = v56;
      uint64_t v56 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v10);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      while (1)
      {
        int v11 = (WTF::StringImpl *)((char *)v11 + 88);
        if (v11 == v12) {
          break;
        }
        if ((unint64_t)(*(void *)v11 + 1) > 1) {
          goto LABEL_25;
        }
      }
      int v11 = v12;
LABEL_25:
      ;
    }
    while (v11 != v14);
  }
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v56, (WebKit::IDBStorageManager *)((char *)v8 + 16), v10);
  if (v57)
  {
    unint64_t v26 = v56;
    unint64_t v27 = (WTF::StringImpl *)((char *)v56 + 8 * v57);
    do
    {
      uint64_t v28 = *(WTF::StringImpl **)v26;
      if (*(void *)v26) {
        *(_DWORD *)v28 += 2;
      }
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebCore::IDBServer::SQLiteIDBBackingStore::fullDatabasePathForDirectory((uint64_t *)&v54, (WebCore::IDBServer::SQLiteIDBBackingStore *)&v55, v29);
      int v31 = v61;
      if (v61)
      {
        int v42 = *((_DWORD *)v61 - 2);
        unsigned int v43 = *((_DWORD *)v54 + 4);
        if (v43 >= 0x100) {
          unsigned int v44 = v43 >> 8;
        }
        else {
          unsigned int v44 = WTF::StringImpl::hashSlowCase(v54);
        }
        for (int i = 0; ; v44 = i + v46)
        {
          int v46 = v44 & v42;
          uint64_t v47 = v31[v44 & v42];
          if (v47 != (WTF *)-1)
          {
            if (!v47) {
              goto LABEL_31;
            }
            if (WTF::equal(v47, v54, v30)) {
              break;
            }
          }
          ++i;
        }
      }
      else
      {
LABEL_31:
        WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile((uint64_t *)&v58, (WebCore::IDBServer::SQLiteIDBBackingStore *)&v54, v25);
        if (!v60) {
          goto LABEL_40;
        }
        int v32 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          uint64_t v33 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v58);
          int v34 = HIDWORD(v53);
          uint64_t v35 = (void *)(v52 + 16 * HIDWORD(v53));
          uint64_t v36 = *v33;
          uint64_t *v33 = 0;
          *uint64_t v35 = v36;
          v35[1] = v33[1];
          HIDWORD(v53) = v34 + 1;
          if (!v60) {
            goto LABEL_40;
          }
        }
        else
        {
          __int16 v37 = (WTF::StringImpl **)(v52 + 16 * HIDWORD(v53));
          uint64_t v38 = v58;
          uint64_t v58 = 0;
          *__int16 v37 = v38;
          v37[1] = v59;
          HIDWORD(v53) = v32 + 1;
        }
        uint64_t v39 = v58;
        uint64_t v58 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v25);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
      }
LABEL_40:
      uint64_t v40 = v54;
      unint64_t v54 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v25);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      char v41 = v55;
      unsigned int v55 = 0;
      if (!v41) {
        goto LABEL_47;
      }
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
LABEL_47:
        if (v28) {
          goto LABEL_50;
        }
        goto LABEL_53;
      }
      WTF::StringImpl::destroy(v41, v25);
      if (v28)
      {
LABEL_50:
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v25);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
LABEL_53:
      unint64_t v26 = (WTF::StringImpl *)((char *)v26 + 8);
    }
    while (v26 != v27);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v25);
  if (v61) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61, v48);
  }
  WebCore::IDBServer::IDBConnectionToClient::didGetAllDatabaseNamesAndVersions();
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v49);
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v6, v50);
}

uint64_t WebKit::NetworkStorageManager::cacheStorageOpenCache(uint64_t *a1, WebCore::SecurityOriginData *a2, const WTF::StringImpl **a3, unsigned int *a4)
{
  unint64_t v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  unint64_t v9 = (atomic_uint *)a1[18];
  unsigned int v10 = (WTF::WorkQueue *)a1[6];
  WTF::WorkQueue::ref(v10);
  uint64_t v13 = v10;
  int v11 = WebKit::OriginStorageManager::cacheStorageManager(v8, v9, (uint64_t)a2, (uint64_t *)&v13);
  WebKit::CacheStorageManager::openCache((uint64_t)v11, a3, a4);
  uint64_t result = (uint64_t)v13;
  uint64_t v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::cacheStorageRemoveCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a2, a3);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 24)) != 0 && (v9 = *(void *)(v8 + 8)) != 0)
  {
    return WebKit::CacheStorageManager::removeCache(v9, a2, a3, a4);
  }
  else
  {
    v12[0] = 4;
    int v13 = 1;
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v11 + 16))(v11, v12);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
}

uint64_t WebKit::NetworkStorageManager::cacheStorageAllCaches(uint64_t *a1, WebCore::SecurityOriginData *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  uint64_t v9 = (atomic_uint *)a1[18];
  unsigned int v10 = (WTF::WorkQueue *)a1[6];
  WTF::WorkQueue::ref(v10);
  int v13 = v10;
  uint64_t v11 = WebKit::OriginStorageManager::cacheStorageManager(v8, v9, (uint64_t)a2, (uint64_t *)&v13);
  WebKit::CacheStorageManager::allCaches((uint64_t)v11, a3, a4);
  uint64_t result = (uint64_t)v13;
  int v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

uint64_t *WebKit::NetworkStorageManager::cacheStorageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t *)WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a3, a4);
  if (result)
  {
    uint64_t v8 = result[3];
    if (v8)
    {
      uint64_t result = *(uint64_t **)(v8 + 8);
      if (result)
      {
        uint64_t v9 = *(void *)(a2 + 24);
        return WebKit::CacheStorageManager::reference((uint64_t)result, v9, a3, a4);
      }
    }
  }
  return result;
}

WebKit::CacheStorageCache *WebKit::NetworkStorageManager::cacheStorageDereference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (WebKit::CacheStorageCache *)WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a3, a4);
  if (result)
  {
    uint64_t v8 = *((void *)result + 3);
    if (v8)
    {
      uint64_t result = *(WebKit::CacheStorageCache **)(v8 + 8);
      if (result)
      {
        uint64_t v9 = *(void *)(a2 + 24);
        return WebKit::CacheStorageManager::dereference((uint64_t)result, v9, a3, a4);
      }
    }
  }
  return result;
}

WTF::WorkQueue *WebKit::NetworkStorageManager::lockCacheStorage(WebKit::NetworkStorageManager *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3)
{
  unint64_t v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, a3);
  uint64_t v7 = (atomic_uint *)*((void *)this + 18);
  uint64_t v8 = (WTF::WorkQueue *)*((void *)this + 6);
  WTF::WorkQueue::ref(v8);
  uint64_t v11 = v8;
  uint64_t v9 = WebKit::OriginStorageManager::cacheStorageManager(v6, v7, (uint64_t)a3, (uint64_t *)&v11);
  uint64_t v13 = *((void *)a2 + 3);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add((uint64_t *)v9 + 15, &v13, (uint64_t)v12);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)result + 56))(result);
  }
  return result;
}

uint64_t *WebKit::NetworkStorageManager::unlockCacheStorage(WebKit::NetworkStorageManager *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3)
{
  unint64_t v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t *)this, a3);
  uint64_t result = (uint64_t *)WebKit::OriginStorageManager::defaultBucket(v4)[11];
  if (result)
  {
    uint64_t v6 = *((void *)a2 + 3);
    return WebKit::CacheStorageManager::unlockStorage((uint64_t)result, v6);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStorageRetrieveRecords(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t *a5)
{
  uint64_t v7 = WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a2, a3);
  if (v7)
  {
    return WebKit::CacheStorageCache::retrieveRecords(v7, a4, a5);
  }
  else
  {
    v10[0] = 4;
    int v11 = 1;
    uint64_t v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v10);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v11 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9CC7C0[v11])(&v12, v10);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::cacheStorageRemoveRecords(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = (void *)WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a2, a3);
  if (v9)
  {
    return WebKit::CacheStorageCache::removeRecords(v9, a4, a5, a6);
  }
  else
  {
    v12[0] = 4;
    int v13 = 1;
    uint64_t v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(v11, v12);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v13 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CC7D0[v13])(&v14, v12);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStoragePutRecords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::CacheStorageRegistry::cache(*(void *)(a1 + 144), a3, a4);
  if (v9)
  {
    unsigned int v10 = (WTF::StringImpl *)v9;
    unsigned int v11 = *(_DWORD *)(a5 + 12);
    if (!v11)
    {
LABEL_6:
      return WebKit::CacheStorageCache::putRecords(v10, a5, a6);
    }
    uint64_t v12 = *(void *)a5 + 568;
    uint64_t v13 = 592 * v11;
    while (1)
    {
      unint64_t v14 = *(void *)(v12 + 16);
      if (v14 < WebKit::CacheStorageDiskStore::computeRealBodySizeForStorage(v12)) {
        break;
      }
      v12 += 592;
      v13 -= 592;
      if (!v13) {
        goto LABEL_6;
      }
    }
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "void WebKit::NetworkStorageManager::cacheStoragePutRecords(IPC::Connection &, WebCore::DOMCacheIdentifier, V"
            "ector<WebCore::DOMCacheEngine::CrossThreadRecord> &&, WebCore::DOMCacheEngine::RecordIdentifiersCallback &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1816: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    buf[0] = 4;
  }
  else
  {
    buf[0] = 4;
  }
  int v21 = 1;
  uint64_t v16 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 16))(v16, buf);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
  if (v21 != -1) {
    return ((uint64_t (*)(char *, uint8_t *))off_1EE9CC7D0[v21])(&v18, buf);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStorageClearMemoryRepresentation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 88), a2);
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6) {
    v6 += 72 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != v5)
  {
    uint64_t v7 = *(void *)(*(void *)(v5 + 64) + 8);
    if (v7) {
      std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100]((WebKit::CacheStorageManager **)(v7 + 88), 0);
    }
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::NetworkStorageManager::cacheStorageRepresentation(uint64_t *a1, void *a2)
{
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v86, a1);
  uint64_t v5 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v86);
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  uint64_t v8 = v86;
  if (v86) {
    uint64_t v7 = v86 + ((unint64_t)*(unsigned int *)(v86 - 4) << 6);
  }
  if (v7 != v5)
  {
    uint64_t v72 = a2;
    uint64_t v73 = v7;
    while (1)
    {
      uint64_t v9 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (WebCore::SecurityOriginData *)v5);
      unsigned int v10 = WebKit::OriginStorageManager::defaultBucket(v9);
      WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList((WTF::StringImpl *)v10, 0x8000, 0, &v85);
      if (!v85 || !*(_DWORD *)(v85 - 12)) {
        goto LABEL_79;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v84, (WebCore::SecurityOriginData *)v5);
      WebCore::SecurityOriginData::toString((uint64_t *)&v83, (WebCore::SecurityOriginData *)(v5 + 32));
      unsigned int v11 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (WebCore::SecurityOriginData *)v5);
      uint64_t v12 = (atomic_uint *)a1[18];
      uint64_t v13 = (WTF::WorkQueue *)a1[6];
      WTF::WorkQueue::ref(v13);
      v81 = v13;
      unint64_t v14 = WebKit::OriginStorageManager::cacheStorageManager(v11, v12, v5, (uint64_t *)&v81);
      uint64_t result = (uint64_t)WebKit::CacheStorageManager::representationString(v14, &v82);
      uint64_t v17 = v84;
      if (v84) {
        int v18 = *((_DWORD *)v84 + 1);
      }
      else {
        int v18 = 0;
      }
      uint64_t v19 = v82;
      uint64_t v20 = v83;
      if (v83)
      {
        int v21 = *((_DWORD *)v83 + 1);
        if (!v82) {
          goto LABEL_90;
        }
      }
      else
      {
        int v21 = 0;
        if (!v82)
        {
LABEL_90:
          int v22 = 0;
          goto LABEL_12;
        }
      }
      int v22 = *((_DWORD *)v82 + 1);
      if (v22 < 0) {
        goto LABEL_117;
      }
LABEL_12:
      BOOL v23 = __OFADD__(v22, 1);
      int v24 = v22 + 1;
      if (v23) {
        goto LABEL_117;
      }
      BOOL v23 = __OFADD__(v24, 16);
      int v25 = v24 + 16;
      BOOL v26 = v23;
      if (v21 < 0) {
        goto LABEL_117;
      }
      if (v26) {
        goto LABEL_117;
      }
      BOOL v23 = __OFADD__(v21, v25);
      int v27 = v21 + v25;
      if (v23) {
        goto LABEL_117;
      }
      BOOL v23 = __OFADD__(v27, 20);
      int v28 = v27 + 20;
      BOOL v29 = v23;
      if (v18 < 0
        || v29
        || (BOOL v23 = __OFADD__(v18, v28), v30 = v18 + v28, v23)
        || (uint64_t v31 = (v30 + 31), __OFADD__(v30, 31)))
      {
LABEL_117:
        __break(0xC471u);
        return result;
      }
      if ((!v84 || (*((unsigned char *)v84 + 16) & 4) != 0)
        && (!v83 || (*((unsigned char *)v83 + 16) & 4) != 0)
        && (!v82 || (*((unsigned char *)v82 + 16) & 4) != 0))
      {
        if (v30 != -31)
        {
          if ((v31 & 0x80000000) != 0) {
            goto LABEL_117;
          }
          uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v31 + 20));
          int v32 = v77;
          if (!v77) {
            goto LABEL_117;
          }
          *(_DWORD *)uint64_t v77 = 2;
          *((_DWORD *)v32 + 1) = v31;
          *((void *)v32 + 1) = (char *)v32 + 20;
          *((_DWORD *)v32 + 4) = 4;
          qmemcpy((char *)v32 + 20, "\n{ \"origin\" : { \"topOrigin\" : \"", 31);
          v74[0] = v17;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v74, (char *)v32 + 51);
          int v46 = v74[0];
          if (v74[0]) {
            int v46 = (WTF::StringImpl *)*((unsigned int *)v74[0] + 1);
          }
          uint64_t v47 = (char *)v46 + (void)v32 + 51;
          *(_OWORD *)uint64_t v47 = *(_OWORD *)"\", \"clientOrigin\": \"";
          *((_DWORD *)v47 + 4) = 572537378;
          unsigned int v48 = v47 + 20;
          unsigned int v75 = (const char *)v20;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v75, v47 + 20);
          uint64_t v49 = v75;
          if (v75) {
            uint64_t v49 = (const char *)*((unsigned int *)v75 + 1);
          }
          uint64_t v50 = (char *)&v49[(void)v48];
          *(_OWORD *)uint64_t v50 = *(_OWORD *)"\" }, \"caches\" : ";
          int v51 = v50 + 16;
          uint64_t v77 = v19;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, v50 + 16);
          uint64_t v52 = v77;
          if (v77) {
            uint64_t v52 = (WTF::StringImpl *)*((unsigned int *)v77 + 1);
          }
          uint64_t v7 = v73;
          *((unsigned char *)v52 + (void)v51) = 125;
          goto LABEL_59;
        }
      }
      else if (v30 != -31)
      {
        if (v31 > 0x7FFFFFEF) {
          goto LABEL_117;
        }
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v31 + 20));
        int v32 = v77;
        if (!v77) {
          goto LABEL_117;
        }
        *(_DWORD *)uint64_t v77 = 2;
        *((_DWORD *)v32 + 1) = v31;
        *((void *)v32 + 1) = (char *)v32 + 20;
        *((_DWORD *)v32 + 4) = 0;
        uint64_t v33 = 20;
        int v34 = "\n{ \"origin\" : { \"topOrigin\" : \"";
        do
        {
          __int16 v35 = *(unsigned __int8 *)v34++;
          *(_WORD *)((char *)v32 + v33) = v35;
          v33 += 2;
        }
        while (v33 != 82);
        v74[0] = v17;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v74, (char *)v32 + 82);
        if (v74[0]) {
          uint64_t v36 = *((unsigned int *)v74[0] + 1);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = 0;
        uint64_t v38 = (uint64_t)v32 + 2 * v36 + 82;
        do
        {
          *(_WORD *)(v38 + 2 * v37) = aClientorigin[v37];
          ++v37;
        }
        while (v37 != 20);
        uint64_t v39 = v38 + 40;
        unsigned int v75 = (const char *)v20;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v75, (char *)(v38 + 40));
        if (v75) {
          uint64_t v40 = *((unsigned int *)v75 + 1);
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = 0;
        uint64_t v42 = v39 + 2 * v40;
        uint64_t v43 = (uint64_t)v32 + 2 * v36 + 2 * v40 + 122;
        do
        {
          *(_WORD *)(v43 + 2 * v41) = aCaches[v41];
          ++v41;
        }
        while (v41 != 16);
        uint64_t v44 = v42 + 32;
        uint64_t v77 = v19;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, (char *)(v42 + 32));
        int v45 = v77;
        if (v77) {
          int v45 = (WTF::StringImpl *)*((unsigned int *)v77 + 1);
        }
        uint64_t v7 = v73;
        *(_WORD *)(v44 + 2 * (void)v45) = 125;
        goto LABEL_59;
      }
      int v32 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
      uint64_t v7 = v73;
LABEL_59:
      uint64_t v77 = v32;
      LODWORD(v53) = HIDWORD(v88);
      if (HIDWORD(v88) == v88)
      {
        uint64_t v59 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v87, HIDWORD(v88) + 1, (unint64_t)&v77);
        uint64_t v53 = HIDWORD(v88);
        uint64_t v60 = (uint64_t)v87;
        uint64_t v61 = *v59;
        *uint64_t v59 = 0;
        *(void *)(v60 + 8 * v53) = v61;
      }
      else
      {
        uint64_t v77 = 0;
        v87[HIDWORD(v88)] = (uint64_t)v32;
      }
      HIDWORD(v88) = v53 + 1;
      unint64_t v54 = v77;
      uint64_t v77 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v16);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      unsigned int v55 = v82;
      int v82 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v16);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      uint64_t v56 = (uint64_t)v81;
      v81 = 0;
      if (v56) {
        (*(void (**)(uint64_t))(*(void *)v56 + 56))(v56);
      }
      unsigned int v57 = v83;
      int v83 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v16);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      uint64_t v58 = v84;
      uint64_t v84 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v16);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
LABEL_79:
      WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)a1, (const WebCore::ClientOrigin *)v5);
      if (v85) {
        WTF::fastFree((WTF *)(v85 - 16), v4);
      }
      while (1)
      {
        v5 += 64;
        if ((void *)v5 == v6) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v5)) {
          goto LABEL_85;
        }
      }
      uint64_t v5 = (uint64_t)v6;
LABEL_85:
      if (v5 == v7)
      {
        uint64_t v8 = v86;
        a2 = v72;
        break;
      }
    }
  }
  if (v8) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v8, v4);
  }
  unint64_t v62 = 126 - 2 * __clz(HIDWORD(v88));
  if (HIDWORD(v88)) {
    int v63 = (const WTF::StringImpl *)v62;
  }
  else {
    int v63 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>((uint64_t)v87, &v87[HIDWORD(v88)], v63, 1);
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v79 = 0;
  char v80 = 1;
  unsigned int v75 = "{ \"path\": \"";
  uint64_t v76 = 12;
  v74[0] = (WTF::StringImpl *)"\", \"origins\": [";
  v74[1] = (WTF::StringImpl *)16;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v77, (uint64_t)&v75, a1 + 22, (uint64_t)v74);
  unsigned int v75 = "";
  uint64_t v76 = 1;
  if (HIDWORD(v88))
  {
    unsigned int v64 = v87;
    uint64_t v65 = 8 * HIDWORD(v88);
    do
    {
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)&v77, (uint64_t)&v75, v64);
      unsigned int v75 = ",";
      uint64_t v76 = 2;
      ++v64;
      v65 -= 8;
    }
    while (v65);
  }
  WTF::StringBuilder::append();
  unint64_t v66 = v77;
  if (v77
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v77),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77),
        (unint64_t v66 = v77) != 0))
  {
    *(_DWORD *)v66 += 2;
  }
  v74[0] = v66;
  uint64_t v67 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v67 + 16))(v67, v74);
  (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  double v69 = v74[0];
  v74[0] = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2) {
      WTF::StringImpl::destroy(v69, v68);
    }
    else {
      *(_DWORD *)v69 -= 2;
    }
  }
  unsigned int v70 = v78;
  uint64_t v78 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, v68);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  uint64_t v71 = v77;
  uint64_t v77 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2) {
      WTF::StringImpl::destroy(v71, v68);
    }
    else {
      *(_DWORD *)v71 -= 2;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v68);
}

WTF::WorkQueue *WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 80))
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)*a3 + 16);
    return (WTF::WorkQueue *)v4();
  }
  else
  {
    uint64_t v16 = a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    uint64_t v17 = a1;
    uint64_t v7 = *(WTF::WorkQueue **)(a1 + 48);
    WTF::WorkQueue::ref(v7);
    int v18 = v7;
    WebCore::SecurityOriginData::isolatedCopy();
    WebCore::SecurityOriginData::isolatedCopy();
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v23 = v8;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v9 = &unk_1EE9CD018;
    *(void *)(v9 + 8) = v16;
    *(void *)(v9 + 16) = v17;
    unsigned int v10 = v18;
    uint64_t v17 = 0;
    int v18 = 0;
    *(void *)(v9 + 24) = v10;
    *(unsigned char *)(v9 + 32) = 0;
    *(_DWORD *)(v9 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 32, (uint64_t)v19);
    *(unsigned char *)(v9 + 64) = 0;
    *(_DWORD *)(v9 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 64, (uint64_t)v21);
    uint64_t v11 = v23;
    uint64_t v23 = 0;
    *(void *)(v9 + 96) = v11;
    WTF::SuspendableWorkQueue::dispatch();
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v13 = v23;
    uint64_t v23 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v22 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v22])(&v15, v21);
    }
    int v22 = -1;
    if (v20 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v20])(&v15, v19);
    }
    int v20 = -1;
    uint64_t result = v18;
    int v18 = 0;
    if (result) {
      uint64_t result = (WTF::WorkQueue *)WTF::WorkQueue::deref(result);
    }
    uint64_t v14 = v17;
    uint64_t v17 = 0;
    if (v14) {
      return (WTF::WorkQueue *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), v12);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  IPC::Connection::connection(a1, &v31);
  uint64_t v9 = (uint64_t)v31;
  if (!v31) {
    return 2;
  }
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 339;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v32 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *(uint64_t **)(a2 + 8));
  char v11 = *(unsigned char *)(a2 + 16);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198CA6E88);
  }
  *uint64_t v12 = v11;
  uint64_t v15 = IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v32, a4, a5);
  uint64_t v16 = v32;
  int v32 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v28, v29);
  }
  uint64_t v17 = v31;
  uint64_t v31 = 0;
  if (v17)
  {
    char v18 = 0;
    atomic_uchar *volatile v19 = *v17;
    atomic_compare_exchange_strong_explicit(*v17, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
    if (v18) {
      MEMORY[0x19972E8D0](v19);
    }
    uint64_t v20 = *((void *)v19 + 1);
    uint64_t v21 = v20 - 1;
    *((void *)v19 + 1) = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v30 = *((void *)v19 + 2);
      uint64_t v23 = *((void *)v19 + 3);
      *((void *)v19 + 3) = 0;
      BOOL v22 = v30 == 0;
    }
    else
    {
      BOOL v22 = 0;
      uint64_t v23 = 0;
    }
    int v24 = 1;
    atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
    if (v24 == 1)
    {
      if (v21) {
        return v15;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v21) {
        return v15;
      }
    }
    uint64_t v25 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v25 = &unk_1EE9B37E8;
    *(void *)(v25 + 8) = v19;
    *(void *)(v25 + 16) = v23;
    *(unsigned char *)(v25 + 24) = v22;
    int v32 = (IPC::Encoder *)v25;
    WTF::ensureOnMainRunLoop();
    BOOL v26 = v32;
    int v32 = 0;
    if (v26) {
      (*(void (**)(IPC::Encoder *))(*(void *)v26 + 8))(v26);
    }
  }
  return v15;
}

uint64_t WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9CD040;
    v8[1] = a1;
    v8[2] = a1;
    void v8[3] = v7;
    uint64_t v9 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v9;
    if (v9) {
      return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9CD090;
    v8[1] = a1;
    v8[2] = a1;
    void v8[3] = v7;
    uint64_t v9 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v9;
    if (v9) {
      return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v35[5] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 80))
  {
    LOBYTE(v30[0]) = 0;
    char v31 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a4, v30);
    if (v31) {
      return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v6);
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v26, a2);
    unint64_t v10 = *(void *)a3;
    unsigned int v11 = *(_DWORD *)(a3 + 12);
    if (v11)
    {
      unint64_t v12 = v10 + 72 * v11;
      do
      {
        WebCore::ServiceWorkerRegistrationKey::isolatedCopy();
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v10, (uint64_t)v33);
        uint64_t v13 = v10 + 32;
        WTF::URL::operator=(v13, (uint64_t)v35);
        uint64_t v15 = v35[0];
        v35[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        if (v34 != -1) {
          ((void (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v34])(&v32, v33);
        }
        unint64_t v10 = v13 + 40;
      }
      while (v10 < v12);
      unint64_t v10 = *(void *)a3;
      int v16 = *(_DWORD *)(a3 + 12);
    }
    else
    {
      int v16 = 0;
    }
    *(void *)a3 = 0;
    int v17 = *(_DWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    uint64_t v18 = *a4;
    *a4 = 0;
    uint64_t v29 = v18;
    uint64_t v19 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v19 = &unk_1EE9CD130;
    *(void *)(v19 + 8) = a1;
    *(void *)(v19 + 16) = a1;
    uint64_t v20 = v26;
    uint64_t v26 = 0;
    *(void *)(v19 + 24) = v20;
    uint64_t v21 = v27;
    uint64_t v27 = 0;
    *(void *)(v19 + 32) = v21;
    v28[0] = 0;
    *(void *)(v19 + 40) = v10;
    v28[1] = 0;
    *(_DWORD *)(v19 + 48) = v17;
    *(_DWORD *)(v19 + 52) = v16;
    *(void *)(v19 + 56) = v18;
    v33[0] = v19;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v23 = v33[0];
    v33[0] = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v29 = 0;
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v22);
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v24);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    char v9 = 1;
    v8[0] = 0;
    v10[0] = v4;
    v8[1] = 0;
    uint64_t v5 = a2[1];
    a2[1] = 0;
    v10[1] = v5;
    char v11 = 1;
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    char v11 = 0;
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v10);
  if (v11) {
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
  }
  if (v3) {
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v7;
  uint64_t v9 = v6 + 96 * v8;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    goto LABEL_18;
  }
  uint64_t v27 = a1;
  uint64_t v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 24);
    if (v12) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    uint64_t v10 = v9;
LABEL_12:
    unsigned int v8 = (v8 + v11) & v7;
    uint64_t v9 = v6 + 96 * v8;
    ++v11;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_16;
    }
  }
  if (v12 == 1)
  {
LABEL_8:
    if (WebCore::operator==())
    {
      uint64_t result = WebCore::operator==();
      if (result)
      {
        uint64_t v25 = *a2;
        if (*a2) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        a1 = v27;
        char v24 = 0;
        uint64_t v23 = v25 + 96 * v26;
        goto LABEL_27;
      }
    }
    goto LABEL_12;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_16:
  a1 = v27;
  if (v10)
  {
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue((void *)(v10 + 64), v14);
    --*(_DWORD *)(*a2 - 16);
    uint64_t v9 = v10;
  }
LABEL_18:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v9, a3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v9 + 32, a3 + 32);
  long long v28 = 0u;
  long long v29 = 0u;
  std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](v9 + 64, (uint64_t)&v28);
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v15);
  uint64_t result = WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v16);
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21) {
      goto LABEL_24;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
LABEL_24:
    uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, v9);
    uint64_t v9 = result;
    uint64_t v19 = *a2;
    if (*a2) {
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    }
    else {
      LODWORD(v22) = 0;
    }
  }
  uint64_t v23 = v19 + 96 * v22;
  char v24 = 1;
LABEL_27:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

unsigned int *WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unsigned int *result, uint64_t *a2)
{
  int v3 = result;
  uint64_t v4 = *((unsigned int *)a2 + 3);
  unint64_t v5 = result[2];
  uint64_t v6 = result[3];
  unint64_t v7 = v4 + v6;
  if (v4 + v6 > v5)
  {
    unint64_t v8 = v5 + (v5 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 > v7) {
      unint64_t v7 = v9;
    }
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = *(WTF **)result;
    int v11 = 40 * v7;
    uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * v7));
    v3[2] = (v11 & 0xFFFFFFF8) / 0x28;
    *(void *)int v3 = result;
    if (v6)
    {
      uint64_t v13 = result;
      uint64_t v14 = 40 * v6;
      uint64_t v15 = (unsigned int *)((char *)v10 + 24);
      do
      {
        *(void *)uint64_t v13 = *((void *)v15 - 3);
        uint64_t v16 = *((void *)v15 - 2);
        *((void *)v15 - 2) = 0;
        *(void *)((char *)v13 + 29) = 0;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *((void *)v13 + 1) = v16;
        uint64_t v17 = *((void *)v15 - 1);
        *((void *)v15 - 1) = 0;
        *((void *)v13 + 2) = v17;
        LODWORD(v17) = *v15;
        unsigned int *v15 = 0;
        v13[6] = v17;
        LODWORD(v17) = v15[1];
        v15[1] = 0;
        v13[7] = v17;
        LODWORD(v17) = v15[2];
        v15[2] = 0;
        v13[8] = v17;
        LOBYTE(v17) = *((unsigned char *)v15 + 12);
        *((unsigned char *)v15 + 12) = 0;
        *((unsigned char *)v13 + 36) = v17;
        int v18 = (WTF *)*((void *)v15 - 1);
        if (v18) {
          WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v18, (void *)*v15);
        }
        uint64_t result = (unsigned int *)*((void *)v15 - 2);
        *((void *)v15 - 2) = 0;
        if (result) {
          uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
        }
        v15 += 10;
        v13 += 10;
        v14 -= 40;
      }
      while (v14);
    }
    if (v10)
    {
      if (*(WTF **)v3 == v10)
      {
        *(void *)int v3 = 0;
        v3[2] = 0;
      }
      uint64_t result = (unsigned int *)WTF::fastFree(v10, v12);
    }
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if (v4)
  {
    uint64_t v19 = *a2;
    uint64_t v20 = *a2 + 40 * v4;
    unsigned int v21 = v3[3];
    do
    {
      uint64_t v22 = *(void *)v3 + 40 * v21;
      *(void *)uint64_t v22 = *(void *)v19;
      uint64_t v23 = *(void *)(v19 + 8);
      *(void *)(v19 + 8) = 0;
      *(void *)(v22 + 16) = 0;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 8) = v23;
      *(void *)(v22 + 29) = 0;
      uint64_t v24 = *(void *)(v19 + 16);
      *(void *)(v19 + 16) = 0;
      *(void *)(v22 + 16) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 24);
      *(_DWORD *)(v19 + 24) = 0;
      *(_DWORD *)(v22 + 24) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 28);
      *(_DWORD *)(v19 + 28) = 0;
      *(_DWORD *)(v22 + 28) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 32);
      *(_DWORD *)(v19 + 32) = 0;
      *(_DWORD *)(v22 + 32) = v24;
      LOBYTE(v24) = *(unsigned char *)(v19 + 36);
      *(unsigned char *)(v19 + 36) = 0;
      *(unsigned char *)(v22 + 36) = v24;
      unsigned int v21 = v3[3] + 1;
      v3[3] = v21;
      v19 += 40;
    }
    while (v19 != v20);
  }
  return result;
}

uint64_t WebKit::OriginQuotaManager::create@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x98);
  uint64_t result = WebKit::OriginQuotaManager::OriginQuotaManager(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebKit::OriginQuotaManager::OriginQuotaManager(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1994F5F10;
  *(void *)(v6 + 24) = a1;
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v7 = *a2;
  *(_OWORD *)(a1 + 88) = *a2;
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v8 = *a3;
  *a3 = 0;
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  *(void *)(a1 + 144) = v10;
  return a1;
}

unsigned char *WebKit::OriginQuotaManager::requestSpace(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = v4;
  uint64_t v9 = 0;
  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::append((uint64_t)(a1 + 8), &v7);
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return WebKit::OriginQuotaManager::handleRequests(a1);
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result)
  {
    if (v4 + 1 != *(void *)result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(result + 24);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    uint64_t result = WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::expandCapacity(result);
    uint64_t v4 = *(void *)(v3 + 8);
  }
LABEL_10:
  uint64_t v6 = (void *)(*(void *)(v3 + 16) + 24 * v4);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = 0;
  *uint64_t v6 = v7;
  v6[1] = v8;
  uint64_t v6[2] = a2[2];
  uint64_t v9 = *(void *)(v3 + 8);
  if (v9 == *(unsigned int *)(v3 + 24) - 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  *(void *)(v3 + 8) = v10;
  return result;
}

unsigned char *WebKit::OriginQuotaManager::handleRequests(unsigned char *this)
{
  if (!this[64])
  {
    uint64_t v1 = (uint64_t)this;
    char v2 = this[72];
    this[72] = 1;
    while (1)
    {
      uint64_t v3 = *(void *)(v1 + 8);
      if (v3 == *(void *)(v1 + 16))
      {
LABEL_30:
        *(unsigned char *)(v1 + 72) = v2;
        return this;
      }
      uint64_t v4 = (uint64_t *)(*(void *)(v1 + 24) + 24 * v3);
      uint64_t v6 = *v4;
      uint64_t v5 = v4[1];
      v4[1] = 0;
      uint64_t v7 = v4[2];
      uint64_t v8 = *(void *)(v1 + 24) + 24 * v3;
      uint64_t v9 = *(void *)(v8 + 8);
      *(void *)(v8 + 8) = 0;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        uint64_t v3 = *(void *)(v1 + 8);
        int v10 = *(unsigned __int8 *)(v1 + 64);
      }
      else
      {
        int v10 = 0;
      }
      uint64_t v11 = v3 == *(unsigned int *)(v1 + 32) - 1 ? 0 : v3 + 1;
      *(void *)(v1 + 8) = v11;
      *(void *)(v1 + 40) = v6;
      if (v10)
      {
        uint64_t v12 = *(void *)(v1 + 48);
        *(void *)(v1 + 48) = v5;
        if (v12)
        {
          this = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
          int v13 = *(unsigned __int8 *)(v1 + 64);
          *(void *)(v1 + 56) = v7;
          if (!v13) {
            goto LABEL_32;
          }
        }
        else
        {
          *(void *)(v1 + 56) = v7;
        }
      }
      else
      {
        *(void *)(v1 + 48) = v5;
        *(void *)(v1 + 56) = v7;
        *(unsigned char *)(v1 + 64) = 1;
      }
      this = (unsigned char *)WebKit::OriginQuotaManager::grantWithCurrentQuota((WebKit::OriginQuotaManager *)v1, *(void *)(v1 + 40));
      if (this) {
        break;
      }
      if (!*(void *)(v1 + 136))
      {
        if (!*(unsigned char *)(v1 + 64)) {
          goto LABEL_32;
        }
        uint64_t v14 = *(void *)(v1 + 48);
        *(void *)(v1 + 48) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
        goto LABEL_25;
      }
      this = (unsigned char *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      if (!*(unsigned char *)(v1 + 64) || (*(void *)(v1 + 56) = this, !*(unsigned char *)(v1 + 120)))
      {
LABEL_32:
        __break(1u);
        return this;
      }
      this = (unsigned char *)(*(uint64_t (**)(void, unsigned char *, void, void, void))(**(void **)(v1 + 136) + 16))(*(void *)(v1 + 136), this, *(void *)(v1 + 88), *(void *)(v1 + 112), *(void *)(v1 + 40));
      int v15 = *(unsigned __int8 *)(v1 + 64);
LABEL_29:
      if (v15) {
        goto LABEL_30;
      }
    }
    if (!*(unsigned char *)(v1 + 64)) {
      goto LABEL_32;
    }
    uint64_t v14 = *(void *)(v1 + 48);
    *(void *)(v1 + 48) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 1);
LABEL_25:
    this = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    int v15 = *(unsigned __int8 *)(v1 + 64);
    if (*(unsigned char *)(v1 + 64))
    {
      this = *(unsigned char **)(v1 + 48);
      *(void *)(v1 + 48) = 0;
      if (this) {
        this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 8))(this);
      }
      int v15 = 0;
      *(unsigned char *)(v1 + 64) = 0;
    }
    goto LABEL_29;
  }
  return this;
}

uint64_t WebKit::OriginQuotaManager::grantWithCurrentQuota(WebKit::OriginQuotaManager *this, unint64_t a2)
{
  unint64_t v4 = *((void *)this + 10);
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (!v5)
  {
    int v7 = *((unsigned __int8 *)this + 120);
    unint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
    *((void *)this + 14) = v8;
    *((unsigned char *)this + 120) = 1;
    unint64_t v9 = *((void *)this + 11);
    if (!v7)
    {
      if (v9 <= v9 / 0xA * (v8 / (v9 / 0xA)) + v9 / 0xA) {
        unint64_t v9 = v9 / 0xA * (v8 / (v9 / 0xA)) + v9 / 0xA;
      }
      *((void *)this + 11) = v9;
    }
    BOOL v5 = v9 >= v8;
    unint64_t v10 = v9 - v8;
    if (!v5) {
      unint64_t v10 = 0;
    }
    *((void *)this + 10) = v10;
    BOOL v5 = v10 >= a2;
    unint64_t v6 = v10 - a2;
    if (!v5) {
      return 0;
    }
  }
  *((void *)this + 10) = v6;
  uint64_t v12 = *((void *)this + 18);
  if (v12) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v12 + 16))(v12, a2);
  }
  return 1;
}

unint64_t WebKit::OriginQuotaManager::reportedQuota(WebKit::OriginQuotaManager *this)
{
  char v2 = (unint64_t *)((char *)this + 96);
  if (*((void *)this + 12))
  {
    unint64_t v3 = WebKit::OriginQuotaManager::usage(this);
    unint64_t v4 = *((void *)this + 11);
    unint64_t v5 = *((void *)this + 12);
    unint64_t v6 = (char *)this + 88;
    for (double i = (double)v5; (double)v3 + (double)v3 > i && v5 < v4; double i = (double)v5)
    {
      unint64_t v5 = (unint64_t)(i + i);
      *char v2 = v5;
    }
    if (v5 >= v4) {
      unint64_t v8 = (unint64_t *)v6;
    }
    else {
      unint64_t v8 = v2;
    }
  }
  else
  {
    unint64_t v8 = (unint64_t *)((char *)this + 88);
  }
  return *v8;
}

uint64_t WebKit::IDBStorageConnectionToClient::identifier(WebKit::IDBStorageConnectionToClient *this)
{
  return *((void *)this + 2);
}

void WebKit::MemoryStorageArea::~MemoryStorageArea(WebKit::MemoryStorageArea *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl ***)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, a2);
  }

  WebKit::StorageAreaBase::~StorageAreaBase(this, a2);
}

{
  WTF::StringImpl ***v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  unint64_t v3 = (WTF::StringImpl ***)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, a2);
  }
  WebKit::StorageAreaBase::~StorageAreaBase(this, a2);

  WTF::fastFree(v4, v5);
}

uint64_t WebKit::MemoryStorageArea::type(WebKit::MemoryStorageArea *this)
{
  return 1;
}

uint64_t WebKit::MemoryStorageArea::storageType(WebKit::MemoryStorageArea *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unint64_t v4 = (void *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1 && *v4) {
        WTF::fastFree((WTF *)(*v4 - 16), a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (a2)
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 5);
    *((void *)a2 + 5) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 4);
    *((void *)a2 + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    unint64_t v5 = (unsigned int *)*((void *)a2 + 2);
    *((void *)a2 + 2) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    unint64_t v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v6, v7);
  }
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1 + 32; ; i += 64)
    {
      uint64_t v5 = *(unsigned int *)(i - 8);
      if (v5) {
        break;
      }
      if (*(void *)(i - 32) != -1) {
        goto LABEL_5;
      }
LABEL_11:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    uint64_t v6 = *(unsigned int *)(i + 24);
    if (v6 == -1)
    {
      *(_DWORD *)(i + 24) = -1;
    }
    else
    {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v6])(&v8, i);
      uint64_t v5 = *(unsigned int *)(i - 8);
      *(_DWORD *)(i + 24) = -1;
      if (v5 == -1)
      {
LABEL_10:
        *(_DWORD *)(i - 8) = -1;
        goto LABEL_11;
      }
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, i - 32);
    goto LABEL_10;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      if (*(void *)(v4 - 40) != -1)
      {
        std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v4 + 40), 0);
        uint64_t v5 = *(unsigned int *)(v4 + 24);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, v4);
        }
        *(_DWORD *)(v4 + 24) = -1;
        uint64_t v6 = *(unsigned int *)(v4 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v6])(&v10, v4 - 32);
        }
        *(_DWORD *)(v4 - 8) = -1;
        int v7 = *(WTF::StringImpl **)(v4 - 40);
        *(void *)(v4 - 40) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      v4 += 88;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x19973BD40]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](WTF *this, void *a2)
{
  *(void *)(*((void *)this + 3) + 8) = 0;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100](int a1, WebKit::StorageAreaBase *this)
{
  if (this)
  {
    uint64_t v3 = (WTF::StringImpl ***)*((void *)this + 13);
    *((void *)this + 13) = 0;
    if (v3) {
      WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, this);
    }
    WebKit::StorageAreaBase::~StorageAreaBase(this, this);
    WTF::fastFree(v4, v5);
  }
}

uint64_t std::make_unique[abi:sn180100]<WebKit::MemoryStorageArea,WebCore::ClientOrigin const&,WebKit::StorageAreaBase::StorageType>(WebKit::StorageAreaBase **a1, const WebCore::ClientOrigin *a2, unsigned char *a3)
{
  uint64_t v6 = (WebKit::StorageAreaBase *)WTF::fastMalloc((WTF *)0x80);
  LOBYTE(a3) = *a3;
  int v7 = WebKit::StorageAreaBase::StorageAreaBase(v6, -1, a2);
  *(void *)int v7 = &unk_1EE9CC6F8;
  uint64_t result = WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v7 + 104));
  *((unsigned char *)v6 + 120) = (_BYTE)a3;
  *a1 = v6;
  return result;
}

WTF::StringImpl ***WTF::RefCounted<WebCore::StorageMap::Impl>::deref(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  char v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = this[1];
    if (v3) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    return (WTF::StringImpl ***)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

PAL::CryptoDigest *WebKit::encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a3;
  PAL::CryptoDigest::create();
  WTF::String::utf8();
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash((uint64_t *)&v9, v12);
  WTF::base64EncodeToString();
  uint64_t v4 = v9;
  if (v9)
  {
    char v9 = 0;
    int v10 = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1) {
      WTF::fastFree(v5, v3);
    }
    else {
      --*(_DWORD *)v5;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    PAL::CryptoDigest::~CryptoDigest(result);
    return (PAL::CryptoDigest *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebKit::ServiceWorkerStorageManager *std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100](WebKit::ServiceWorkerStorageManager **a1, WebKit::ServiceWorkerStorageManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ServiceWorkerStorageManager::~ServiceWorkerStorageManager(result);
    return (WebKit::ServiceWorkerStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF *WebKit::CacheStorageRegistry::operator delete(WTF *this, void *a2)
{
  char v2 = this;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 16);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-1)
        {
          uint64_t v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    this = (WTF *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (atomic_load((unsigned int *)v2))
  {
    *(void *)char v2 = 0;
    *((void *)v2 + 1) = 0;
  }
  else
  {
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

double WebKit::IDBStorageRegistry::operator delete(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 16);
      do
      {
        if (*(v5 - 2) != (unsigned int *)-1)
        {
          uint64_t v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      char v9 = (unsigned int **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (unsigned int *)-1)
        {
          int v10 = *v9;
          WTF *v9 = 0;
          if (v10)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, a2);
            }
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v11 = *((void *)this + 1);
  if (v11) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, a2);
  }
  if (atomic_load((unsigned int *)this))
  {
    double result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
  return result;
}

WTF *WebKit::StorageAreaRegistry::operator delete(WTF *this, void *a2)
{
  char v2 = this;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-1)
        {
          uint64_t v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    this = (WTF *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (atomic_load((unsigned int *)v2))
  {
    *(void *)char v2 = 0;
    *((void *)v2 + 1) = 0;
  }
  else
  {
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1 + 32; ; i += 72)
    {
      int v5 = *(_DWORD *)(i - 8);
      if (v5) {
        break;
      }
      if (*(void *)(i - 32) != -1) {
        goto LABEL_5;
      }
LABEL_10:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(i + 32), 0);
    uint64_t v6 = *(unsigned int *)(i + 24);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v6])(&v9, i);
    }
    *(_DWORD *)(i + 24) = -1;
    uint64_t v7 = *(unsigned int *)(i - 8);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v7])(&v10, i - 32);
    }
    *(_DWORD *)(i - 8) = -1;
    goto LABEL_10;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair(uint64_t a1)
{
  std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(a1 + 64), 0);
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v2])(&v5, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

WebKit::OriginStorageManager *std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](WebKit::OriginStorageManager **a1, WebKit::OriginStorageManager *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::OriginStorageManager::~OriginStorageManager(result);
    return (WebKit::OriginStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::allOf<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebKit::isEmptyOriginDirectory(WTF::String const&)::$_0>(WTF::StringImpl **a1, int a2, const WTF::StringImpl *a3)
{
  if (!a2) {
    return 1;
  }
  uint64_t v4 = a1;
  char v5 = &a1[a2];
  while (2)
  {
    uint64_t v6 = *(void *)a3;
    BOOL v7 = *(void *)a3 != 0;
    if (*(void *)a3)
    {
      int v8 = *(_DWORD *)(v6 - 8);
      unsigned int v9 = *((_DWORD *)*v4 + 4);
      if (v9 >= 0x100) {
        unsigned int v10 = v9 >> 8;
      }
      else {
        unsigned int v10 = WTF::StringImpl::hashSlowCase(*v4);
      }
      for (i = 0; ; unsigned int v10 = i + v12)
      {
        int v12 = v10 & v8;
        uint64_t v13 = *(WTF **)(v6 + 8 * (v10 & v8));
        if (v13 != (WTF *)-1)
        {
          if (!v13) {
            return 0;
          }
          if (WTF::equal(v13, *v4, a3)) {
            break;
          }
        }
        ++i;
      }
      if (++v4 != v5) {
        continue;
      }
    }
    break;
  }
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>(uint64_t result, double *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(a2 - 3) <= *(double *)(v9 + 48)) {
                  return result;
                }
                uint64_t v48 = v9;
                uint64_t v49 = (uint64_t)(a2 - 9);
                break;
              case 3:
                return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9, v9 + 72, (uint64_t)(a2 - 9));
              case 4:
                return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9, v9 + 72, v9 + 144, (uint64_t)(a2 - 9));
              case 5:
                double result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9, v9 + 72, v9 + 144, v9 + 216);
                if (*(a2 - 3) <= *(double *)(v9 + 264)) {
                  return result;
                }
                double result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v9 + 216, (uint64_t)(a2 - 9));
                if (*(double *)(v9 + 264) <= *(double *)(v9 + 192)) {
                  return result;
                }
                double result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v9 + 144, v9 + 216);
                if (*(double *)(v9 + 192) <= *(double *)(v9 + 120)) {
                  return result;
                }
                double result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v9 + 72, v9 + 144);
                if (*(double *)(v9 + 120) <= *(double *)(v9 + 48)) {
                  return result;
                }
                uint64_t v48 = v9;
                uint64_t v49 = v9 + 72;
                break;
              default:
                JUMPOUT(0);
            }
            return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v48, v49);
          }
          if (v11 <= 1727)
          {
            if (a4)
            {
              if ((double *)v9 != a2)
              {
                uint64_t v50 = v9 + 72;
                if ((double *)(v9 + 72) != a2)
                {
                  uint64_t v51 = 0;
                  uint64_t v52 = v9;
                  do
                  {
                    uint64_t v53 = v50;
                    if (*(double *)(v52 + 120) > *(double *)(v52 + 48))
                    {
                      v108[0] = 0;
                      int v109 = -1;
                      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v50);
                      long long v110 = *(_OWORD *)(v52 + 104);
                      uint64_t v54 = *(void *)(v52 + 128);
                      double v111 = *(double *)(v52 + 120);
                      uint64_t v112 = v54;
                      uint64_t v55 = *(void *)(v52 + 136);
                      *(void *)(v52 + 128) = 0;
                      *(void *)(v52 + 136) = 0;
                      uint64_t v56 = v51;
                      uint64_t v113 = v55;
                      while (1)
                      {
                        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v9 + v56 + 72, v9 + v56);
                        if (!v56) {
                          break;
                        }
                        double v57 = *(double *)(v9 + v56 - 24);
                        v56 -= 72;
                        if (v111 <= v57)
                        {
                          uint64_t v58 = v9 + v56 + 72;
                          goto LABEL_89;
                        }
                      }
                      uint64_t v58 = v9;
LABEL_89:
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v58, (uint64_t)v108);
                      double result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v59);
                      if (v109 != -1) {
                        double result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(v103, v108);
                      }
                    }
                    uint64_t v50 = v53 + 72;
                    v51 += 72;
                    uint64_t v52 = v53;
                  }
                  while ((double *)(v53 + 72) != a2);
                }
              }
            }
            else if ((double *)v9 != a2)
            {
              uint64_t v89 = v9 + 72;
              if ((double *)(v9 + 72) != a2)
              {
                uint64_t v90 = 0;
                uint64_t v91 = -2;
                uint64_t v92 = 1;
                uint64_t v93 = v9;
                do
                {
                  uint64_t v94 = v9 + 72 * v90;
                  uint64_t v90 = v92;
                  if (*(double *)(v93 + 120) > *(double *)(v94 + 48))
                  {
                    v108[0] = 0;
                    int v109 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v89);
                    long long v110 = *(_OWORD *)(v93 + 104);
                    uint64_t v95 = *(void *)(v93 + 128);
                    double v111 = *(double *)(v93 + 120);
                    uint64_t v112 = v95;
                    uint64_t v96 = *(void *)(v93 + 136);
                    *(void *)(v93 + 128) = 0;
                    *(void *)(v93 + 136) = 0;
                    uint64_t v97 = v91;
                    uint64_t v98 = v93;
                    uint64_t v113 = v96;
                    do
                    {
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v98 + 72, v98);
                      BOOL v4 = __CFADD__(v97++, 1);
                      if (v4) {
                        goto LABEL_140;
                      }
                      uint64_t v99 = v98 - 72;
                      double v100 = *(double *)(v98 - 24);
                      v98 -= 72;
                    }
                    while (v111 > v100);
                    std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v99 + 72, (uint64_t)v108);
                    double result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v101);
                    if (v109 != -1) {
                      double result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(v103, v108);
                    }
                  }
                  v93 += 72;
                  uint64_t v92 = v90 + 1;
                  uint64_t v89 = v9 + 72 * (v90 + 1);
                  --v91;
                }
                while ((double *)v89 != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if ((double *)v9 != a2)
            {
              int64_t v60 = (unint64_t)(v12 - 2) >> 1;
              int64_t v61 = v60;
              do
              {
                int64_t v62 = v61;
                if (v60 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  uint64_t v64 = v9 + 72 * v63;
                  if (2 * v61 + 2 < v12 && *(double *)(v9 + 72 * v63 + 48) > *(double *)(v64 + 120))
                  {
                    v64 += 72;
                    uint64_t v63 = 2 * v61 + 2;
                  }
                  if (*(double *)(v64 + 48) <= *(double *)(v9 + 72 * v61 + 48))
                  {
                    uint64_t v65 = v9 + 72 * v61;
                    v108[0] = 0;
                    int v109 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v65);
                    uint64_t v66 = v9 + 72 * v62;
                    long long v67 = *(_OWORD *)(v66 + 32);
                    double v111 = *(double *)(v66 + 48);
                    long long v110 = v67;
                    uint64_t v68 = *(void *)(v66 + 56);
                    *(void *)(v66 + 56) = 0;
                    uint64_t v112 = v68;
                    LODWORD(v68) = *(_DWORD *)(v66 + 64);
                    *(_DWORD *)(v66 + 64) = 0;
                    LODWORD(v113) = v68;
                    LODWORD(v68) = *(_DWORD *)(v66 + 68);
                    *(_DWORD *)(v66 + 68) = 0;
                    HIDWORD(v113) = v68;
                    do
                    {
                      uint64_t v69 = v64;
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v65, v64);
                      if (v60 < v63) {
                        break;
                      }
                      uint64_t v70 = (2 * v63) | 1;
                      uint64_t v64 = v9 + 72 * v70;
                      if (2 * v63 + 2 < v12 && *(double *)(v9 + 72 * v70 + 48) > *(double *)(v64 + 120))
                      {
                        v64 += 72;
                        uint64_t v70 = 2 * v63 + 2;
                      }
                      uint64_t v65 = v69;
                      uint64_t v63 = v70;
                    }
                    while (*(double *)(v64 + 48) <= v111);
                    std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v69, (uint64_t)v108);
                    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v71);
                    if (v109 != -1) {
                      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(v103, v108);
                    }
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              int64_t v72 = v11 / 0x48uLL;
              do
              {
                v103[0] = 0;
                int v104 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v103, v9);
                uint64_t v73 = 0;
                long long v74 = *(_OWORD *)(v9 + 32);
                uint64_t v106 = *(void *)(v9 + 48);
                long long v105 = v74;
                uint64_t v75 = *(void *)(v9 + 56);
                *(void *)(v9 + 56) = 0;
                v107[0] = v75;
                *(void *)&long long v74 = *(void *)(v9 + 64);
                *(void *)(v9 + 64) = 0;
                uint64_t v76 = v9;
                v107[1] = v74;
                do
                {
                  uint64_t v77 = v76;
                  uint64_t v78 = v73 + 1;
                  v76 += 72 * (v73 + 1);
                  uint64_t v79 = 2 * v73;
                  uint64_t v73 = (2 * v73) | 1;
                  int64_t v80 = v79 + 2;
                  if (v80 < v72 && *(double *)(v77 + 72 * v78 + 48) > *(double *)(v76 + 120))
                  {
                    v76 += 72;
                    uint64_t v73 = v80;
                  }
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v77, v76);
                }
                while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                a2 -= 9;
                if ((double *)v76 == a2)
                {
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v76, (uint64_t)v103);
                }
                else
                {
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v76, (uint64_t)a2);
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)a2, (uint64_t)v103);
                  uint64_t v82 = v76 - v9 + 72;
                  if (v82 >= 73)
                  {
                    unint64_t v83 = (v82 / 0x48uLL - 2) >> 1;
                    if (*(double *)(v9 + 72 * v83 + 48) > *(double *)(v76 + 48))
                    {
                      v108[0] = 0;
                      int v109 = -1;
                      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v76);
                      long long v84 = *(_OWORD *)(v76 + 32);
                      double v111 = *(double *)(v76 + 48);
                      long long v110 = v84;
                      uint64_t v85 = *(void *)(v76 + 56);
                      *(void *)(v76 + 56) = 0;
                      uint64_t v112 = v85;
                      LODWORD(v85) = *(_DWORD *)(v76 + 64);
                      *(_DWORD *)(v76 + 64) = 0;
                      LODWORD(v113) = v85;
                      LODWORD(v85) = *(_DWORD *)(v76 + 68);
                      *(_DWORD *)(v76 + 68) = 0;
                      HIDWORD(v113) = v85;
                      do
                      {
                        uint64_t v86 = v76;
                        uint64_t v76 = v9 + 72 * v83;
                        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v86, v76);
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                      }
                      while (*(double *)(v9 + 72 * v83 + 48) > v111);
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v76, (uint64_t)v108);
                      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v87);
                      if (v109 != -1) {
                        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(&v102, v108);
                      }
                    }
                  }
                }
                double result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v107, v81);
                if (v104 != -1) {
                  double result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v104])(v108, v103);
                }
              }
              while (v72-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = v9 + 72 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x2401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v14, v9, (uint64_t)(a2 - 9));
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9, v14, (uint64_t)(a2 - 9));
            uint64_t v15 = 9 * v13;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9 + 72, v9 + 8 * v15 - 72, (uint64_t)(a2 - 18));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9 + 144, v9 + 72 + 8 * v15, (uint64_t)(a2 - 27));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v9 + 8 * v15 - 72, v14, v9 + 72 + 8 * v15);
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v9, v14);
          }
          --a3;
          if ((a4 & 1) != 0 || *(double *)(v9 - 24) > *(double *)(v9 + 48)) {
            break;
          }
          v108[0] = 0;
          int v109 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v9);
          long long v35 = *(_OWORD *)(v9 + 32);
          uint64_t v36 = *(void *)(v9 + 56);
          double v111 = *(double *)(v9 + 48);
          long long v110 = v35;
          *(void *)(v9 + 56) = 0;
          uint64_t v112 = v36;
          *(void *)&long long v35 = *(void *)(v9 + 64);
          *(void *)(v9 + 64) = 0;
          uint64_t v113 = v35;
          uint64_t v37 = (double *)(v9 + 72);
          if (v111 <= *(a2 - 3))
          {
            do
            {
              unint64_t v10 = (unint64_t)v37;
              if (v37 >= a2) {
                break;
              }
              double v39 = v37[6];
              v37 += 9;
            }
            while (v111 <= v39);
          }
          else
          {
            do
            {
              if (v37 == a2) {
                goto LABEL_140;
              }
              double v38 = v37[6];
              v37 += 9;
            }
            while (v111 <= v38);
            unint64_t v10 = (unint64_t)(v37 - 9);
          }
          unint64_t v40 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v41 = a2;
            while (v41 != (double *)v9)
            {
              unint64_t v40 = (unint64_t)(v41 - 9);
              double v42 = *(v41 - 3);
              v41 -= 9;
              if (v111 <= v42) {
                goto LABEL_53;
              }
            }
LABEL_140:
            __break(1u);
          }
LABEL_53:
          if (v10 < v40)
          {
            do
            {
              std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v10, v40);
              uint64_t v43 = (double *)(v10 + 72);
              do
              {
                if (v43 == a2) {
                  goto LABEL_140;
                }
                double v44 = v43[6];
                v43 += 9;
              }
              while (v111 <= v44);
              unint64_t v10 = (unint64_t)(v43 - 9);
              do
              {
                if (v40 == v9) {
                  goto LABEL_140;
                }
                unint64_t v45 = v40 - 72;
                double v46 = *(double *)(v40 - 24);
                v40 -= 72;
              }
              while (v111 > v46);
              unint64_t v40 = v45;
            }
            while (v10 < v45);
          }
          if (v10 - 72 != v9) {
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v9, v10 - 72);
          }
          std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v10 - 72, (uint64_t)v108);
          double result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v47);
          BOOL v4 = __CFADD__(v109, 1);
          BOOL v5 = v109 == -1;
          if (v109 != -1) {
            double result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(v103, v108);
          }
          a4 = 0;
        }
        v108[0] = 0;
        int v109 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v108, v9);
        uint64_t v16 = 0;
        long long v17 = *(_OWORD *)(v9 + 32);
        uint64_t v18 = *(void *)(v9 + 56);
        double v111 = *(double *)(v9 + 48);
        long long v110 = v17;
        *(void *)(v9 + 56) = 0;
        uint64_t v112 = v18;
        *(void *)&long long v17 = *(void *)(v9 + 64);
        *(void *)(v9 + 64) = 0;
        uint64_t v113 = v17;
        do
        {
          if ((double *)(v9 + v16 + 72) == a2) {
            goto LABEL_140;
          }
          double v19 = *(double *)(v9 + v16 + 120);
          v16 += 72;
        }
        while (v19 > v111);
        unint64_t v20 = v9 + v16;
        unsigned int v21 = a2;
        if (v16 != 72)
        {
          while (v21 != (double *)v9)
          {
            unint64_t v22 = (unint64_t)(v21 - 9);
            double v23 = *(v21 - 3);
            v21 -= 9;
            if (v23 > v111) {
              goto LABEL_24;
            }
          }
          goto LABEL_140;
        }
        uint64_t v24 = a2;
        while (v20 < (unint64_t)v24)
        {
          unint64_t v22 = (unint64_t)(v24 - 9);
          double v25 = *(v24 - 3);
          v24 -= 9;
          if (v25 > v111) {
            goto LABEL_24;
          }
        }
        unint64_t v22 = (unint64_t)v24;
LABEL_24:
        if (v20 >= v22)
        {
          char v32 = (double *)(v20 - 72);
        }
        else
        {
          unint64_t v26 = v20;
          uint64_t v27 = v22;
          do
          {
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v26, v27);
            long long v28 = (double *)(v26 + 72);
            do
            {
              if (v28 == a2) {
                goto LABEL_140;
              }
              double v29 = v28[6];
              v28 += 9;
            }
            while (v29 > v111);
            unint64_t v26 = (unint64_t)(v28 - 9);
            do
            {
              if (v27 == v9) {
                goto LABEL_140;
              }
              unint64_t v30 = v27 - 72;
              double v31 = *(double *)(v27 - 24);
              v27 -= 72;
            }
            while (v31 <= v111);
            uint64_t v27 = v30;
          }
          while (v26 < v30);
          char v32 = v28 - 18;
        }
        if (v32 != (double *)v9) {
          std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v9, (uint64_t)v32);
        }
        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)v32, (uint64_t)v108);
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v33);
        if (v109 != -1) {
          ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v109])(v103, v108);
        }
        if (v20 >= v22) {
          break;
        }
LABEL_42:
        double result = std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>(v9, v32, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = (unint64_t)(v32 + 9);
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((double *)v9, v32);
      unint64_t v10 = (unint64_t)(v32 + 9);
      double result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v32 + 9, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_42;
      }
    }
    a2 = v32;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  double v6 = *(double *)(a2 + 48);
  double v7 = *(double *)(a3 + 48);
  if (v6 <= *(double *)(result + 48))
  {
    if (v7 <= v6) {
      return result;
    }
    double result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a2, a3);
    if (*(double *)(a2 + 48) <= *(double *)(v5 + 48)) {
      return result;
    }
    double result = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 <= v6)
    {
      double result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](result, a2);
      if (*(double *)(a3 + 48) <= *(double *)(a2 + 48)) {
        return result;
      }
      double result = a2;
    }
    uint64_t v8 = a3;
  }

  return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](result, v8);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(double *a1, double *a2)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 3) > a1[6])
      {
        uint64_t v6 = (uint64_t)(a2 - 9);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a2 - 9));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a2 - 9));
      return 1;
    case 5uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
      if (*(a2 - 3) > a1[33])
      {
        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 27), (uint64_t)(a2 - 9));
        if (a1[33] > a1[24])
        {
          std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
          if (a1[24] > a1[15])
          {
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
            if (a1[15] > a1[6])
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = (uint64_t)(a1 + 9);
LABEL_4:
              std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 18;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
      uint64_t v9 = (uint64_t)(a1 + 27);
      if (a1 + 27 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v9 + 48) > v8[6])
    {
      v19[0] = 0;
      int v20 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, v9);
      long long v21 = *(_OWORD *)(v9 + 32);
      uint64_t v12 = *(void *)(v9 + 56);
      double v22 = *(double *)(v9 + 48);
      v23[0] = v12;
      uint64_t v13 = *(void *)(v9 + 64);
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      uint64_t v14 = v10;
      v23[1] = v13;
      while (1)
      {
        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)a1 + v14 + 216, (uint64_t)a1 + v14 + 144);
        if (v14 == -144) {
          break;
        }
        double v15 = *(double *)((char *)a1 + v14 + 120);
        v14 -= 72;
        if (v22 <= v15)
        {
          uint64_t v16 = (uint64_t)a1 + v14 + 216;
          goto LABEL_13;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_13:
      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v16, (uint64_t)v19);
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v17);
      if (v20 != -1) {
        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v20])(&v18, v19);
      }
      if (++v11 == 8) {
        return v9 + 72 == (void)a2;
      }
    }
    uint64_t v8 = (double *)v9;
    v10 += 72;
    v9 += 72;
    if ((double *)v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](uint64_t a1, uint64_t a2)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  LOBYTE(v16) = 0;
  LODWORD(v18[0]) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v16, a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v16);
  if (LODWORD(v18[0]) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[LODWORD(v18[0])])(&v15, &v16);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v4 = (void *)(a1 + 56);
  uint64_t v5 = v6;
  long long v16 = *(_OWORD *)(v4 - 3);
  uint64_t v17 = *(v4 - 1);
  uint64_t v7 = v4[1];
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v8 = *(void *)(a2 + 48);
  *(_OWORD *)(v4 - 3) = *(_OWORD *)(a2 + 32);
  *(v4 - 1) = v8;
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, (_DWORD *)(a2 + 56));
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  uint64_t v10 = *(unsigned int *)(a2 + 68);
  int v11 = *(unsigned int **)(a2 + 56);
  if (v10)
  {
    uint64_t v12 = 32 * v10;
    do
    {
      uint64_t v13 = v11[6];
      if (v13 != -1) {
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v13])(&v15, v11);
      }
      v11[6] = -1;
      v11 += 8;
      v12 -= 32;
    }
    while (v12);
    int v11 = *(unsigned int **)(a2 + 56);
  }
  if (v11)
  {
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
    WTF::fastFree((WTF *)v11, v9);
  }
  v18[0] = 0;
  v18[1] = 0;
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v7;
  return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v9);
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(a1, a2, a3);
  if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
  {
    uint64_t result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a3, a4);
    if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
    {
      uint64_t result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a2, a3);
      if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
      {
        return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a1, a2);
      }
    }
  }
  return result;
}

uint64_t std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(unsigned int *)(a1 + 68);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = 32 * v5;
    do
    {
      uint64_t v8 = *(unsigned int *)(v6 + 24);
      if (v8 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v8])(&v10, v6);
      }
      *(_DWORD *)(v6 + 24) = -1;
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 56, (_DWORD *)(a2 + 56));
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_()
{
}

uint64_t *WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  char v15 = (uint64_t *)(v8 + 16 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v8 + 16 * v21;
        goto LABEL_29;
      }
      if (v16 == -2) {
        uint64_t v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      char v15 = (uint64_t *)(v8 + 16 * v14);
      int v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)uint64_t v17 = -1;
      v17[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      int v11 = *a2;
      char v15 = v17;
    }
  }
  *(_DWORD *)char v15 = v11;
  v15[1] = *a3;
  uint64_t v19 = *v6;
  if (*v6) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(v6, v15);
      char v15 = result;
      uint64_t v22 = *v6;
      if (*v6) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  uint64_t v27 = v22 + 16 * v25;
  char v26 = 1;
LABEL_29:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 40 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = v2 + 40 * v10;
      int v14 = *(_DWORD *)(v13 + 24);
      if (v14) {
        break;
      }
      if (*(void *)v13 != -1) {
        goto LABEL_12;
      }
LABEL_33:
      if (++v10 == v12) {
        goto LABEL_38;
      }
    }
    if (v14 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_37;
    }
LABEL_12:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10));
    if (v15)
    {
      uint64_t v16 = *(void *)(v2 + 40 * v10 + 32);
      if (v16) {
        WTF::fastFree((WTF *)(v16 - 16), v7);
      }
      uint64_t v17 = *(unsigned int *)(v13 + 24);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v17])(&v40, v2 + 40 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      double v39 = v11;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      int v43 = -1640531527;
      __int16 v44 = 0;
      char v45 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v43, v2 + 40 * v10);
      unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v43);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        int v23 = (unsigned int *)(v18 + 40 * (v20 & v19));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
        int v26 = v25;
        unsigned int v20 = ++v21 + v22;
      }
      while (!v26);
      uint64_t v27 = v18 + 40 * v22;
      uint64_t v30 = *(void *)(v27 + 32);
      double v29 = (void *)(v27 + 32);
      uint64_t v28 = v30;
      if (v30) {
        WTF::fastFree((WTF *)(v28 - 16), v24);
      }
      uint64_t v31 = v23[6];
      if (v31 != -1) {
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(&v41, v23);
      }
      *(unsigned char *)int v23 = 0;
      v23[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, v2 + 40 * v10);
      uint64_t v32 = v2 + 40 * v10;
      *double v29 = 0;
      uint64_t v33 = *(void *)(v32 + 32);
      *(void *)(v32 + 32) = 0;
      *double v29 = v33;
      uint64_t v34 = *(void *)(v32 + 32);
      if (v34) {
        WTF::fastFree((WTF *)(v34 - 16), v7);
      }
      uint64_t v35 = *(unsigned int *)(v13 + 24);
      if (v35 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v42, v2 + 40 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
      int v11 = v39;
      if (v13 == a2) {
        int v11 = v23;
      }
    }
    goto LABEL_33;
  }
LABEL_37:
  int v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_38:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

_OWORD *WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v12 = (_DWORD *)v6;
    do
    {
      if (*v12 <= 0xFFFFFFFD)
      {
        uint64_t v13 = (_OWORD *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::lookupForReinsert(a1, v12);
        *uint64_t v13 = *(_OWORD *)v12;
        if (v12 == a3) {
          int v11 = v13;
        }
      }
      v12 += 4;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (void *)(v2 + 24);
    do
    {
      *((_DWORD *)v5 - 2) = -1;
      void *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::lookupForReinsert(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = 0;
  unsigned int v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  unsigned int v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v7 = v6 & v3;
    unsigned int v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + 16 * v7) != -1);
  return v2 + 16 * v7;
}

WTF::StringImpl *_ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      int v4 = result;
      uint64_t result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *(void *)int v4 = result;
      uint64_t v5 = *((unsigned int *)a2 + 3);
      if (v5)
      {
        uint64_t v6 = *a2;
        uint64_t v7 = 8 * v5;
        do
        {
          WebCore::RegistrableDomain::isolatedCopy(&v12);
          uint64_t v9 = *((unsigned int *)v4 + 3);
          uint64_t v10 = *(void *)v4;
          int v11 = v12;
          uint64_t v12 = 0;
          *(void *)(v10 + 8 * v9) = v11;
          *((_DWORD *)v4 + 3) = v9 + 1;
          uint64_t result = v12;
          uint64_t v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl **)-1 && *v4) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>(uint64_t result, uint64_t *a2, const WTF::StringImpl *a3, char a4)
{
  uint64_t v6 = a3;
  int v8 = (const WTF::StringImpl **)result;
LABEL_2:
  uint64_t v9 = (const WTF::StringImpl *)(a2 - 1);
  uint64_t v10 = (const WTF::StringImpl *)(a2 - 2);
  int v11 = v8;
  while (1)
  {
    int v8 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = ((char *)a2 - (char *)v11) >> 3;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t result = WTF::codePointCompare((WTF *)*(a2 - 1), *v8, a3);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v49 = *v8;
            WTF::StringImpl *v8 = (const WTF::StringImpl *)*(a2 - 1);
            *(a2 - 1) = (uint64_t)v49;
          }
          break;
        case 3:
          uint64_t result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8, v8 + 1, v9);
          break;
        case 4:
          uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8, v8 + 1, (const WTF::StringImpl *)(v8 + 2), (WTF **)v9);
          break;
        case 5:
          uint64_t v50 = v8 + 2;
          uint64_t v51 = v8 + 3;
          std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8, v8 + 1, (const WTF::StringImpl *)(v8 + 2), v8 + 3);
          uint64_t result = WTF::codePointCompare((WTF *)*(a2 - 1), v8[3], v52);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v54 = *v51;
            *uint64_t v51 = (WTF *)*(a2 - 1);
            *(a2 - 1) = (uint64_t)v54;
            uint64_t result = WTF::codePointCompare(*v51, *v50, v53);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v56 = *v50;
              double v57 = *v51;
              *uint64_t v50 = *v51;
              *uint64_t v51 = v56;
              uint64_t result = WTF::codePointCompare(v57, v8[1], v55);
              if ((result & 0x80000000) != 0)
              {
                int64_t v60 = v8[1];
                uint64_t v59 = v8[2];
                int64_t v61 = *v8;
                v8[1] = v59;
                void v8[2] = v60;
                uint64_t result = WTF::codePointCompare(v59, v61, v58);
                if ((result & 0x80000000) != 0) {
                  *(int8x16_t *)int v8 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!v6)
    {
      if (v8 == (const WTF::StringImpl **)a2) {
        return result;
      }
      int64_t v73 = (unint64_t)(v13 - 2) >> 1;
      int64_t v112 = v73;
      do
      {
        int64_t v74 = v73;
        if (v112 >= v73)
        {
          uint64_t v75 = (2 * v73) | 1;
          uint64_t v76 = &v8[v75];
          if (2 * v73 + 2 < v13 && (int)WTF::codePointCompare(*v76, v76[1], a3) < 0)
          {
            ++v76;
            uint64_t v75 = 2 * v74 + 2;
          }
          uint64_t v77 = (uint64_t *)&v8[v74];
          if ((WTF::codePointCompare(*v76, (const WTF::StringImpl *)*v77, a3) & 0x80000000) == 0)
          {
            int64_t v110 = v74;
            uint64_t v78 = (const WTF::StringImpl *)*v77;
            uint64_t *v77 = 0;
            do
            {
              uint64_t v79 = v76;
              WTF::String::operator=(v77, (uint64_t *)v76);
              if (v112 < v75) {
                break;
              }
              uint64_t v81 = (2 * v75) | 1;
              uint64_t v76 = &v8[v81];
              if (2 * v75 + 2 < v13 && (int)WTF::codePointCompare(*v76, v76[1], a3) < 0)
              {
                ++v76;
                uint64_t v81 = 2 * v75 + 2;
              }
              uint64_t v77 = (uint64_t *)v79;
              uint64_t v75 = v81;
            }
            while ((WTF::codePointCompare(*v76, v78, a3) & 0x80000000) == 0);
            uint64_t v82 = *v79;
            *uint64_t v79 = v78;
            int64_t v74 = v110;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2) {
                WTF::StringImpl::destroy(v82, v80);
              }
              else {
                *(_DWORD *)v82 -= 2;
              }
            }
          }
        }
        int64_t v73 = v74 - 1;
      }
      while (v74);
      uint64_t v83 = (unint64_t)v12 >> 3;
      while (2)
      {
        uint64_t v84 = 0;
        uint64_t v85 = *v8;
        WTF::StringImpl *v8 = 0;
        uint64_t v86 = (uint64_t *)v8;
        do
        {
          uint64_t v87 = (WTF **)&v86[v84 + 1];
          uint64_t v88 = (2 * v84) | 1;
          uint64_t v89 = 2 * v84 + 2;
          if (v89 < v83 && (int)WTF::codePointCompare(*v87, (const WTF::StringImpl *)v86[v84 + 2], a3) < 0)
          {
            ++v87;
            uint64_t v88 = v89;
          }
          WTF::String::operator=(v86, (uint64_t *)v87);
          uint64_t v86 = (uint64_t *)v87;
          uint64_t v84 = v88;
        }
        while (v88 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
        if (v87 == (WTF **)--a2)
        {
          uint64_t result = (uint64_t)*v87;
          *uint64_t v87 = v85;
          if (result) {
            goto LABEL_142;
          }
        }
        else
        {
          WTF::String::operator=((uint64_t *)v87, a2);
          uint64_t result = *a2;
          *a2 = (uint64_t)v85;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v91);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          uint64_t v92 = (char *)(v87 + 1) - (char *)v8;
          if (v92 >= 9)
          {
            unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
            uint64_t v94 = &v8[v93];
            uint64_t result = WTF::codePointCompare(*v94, *v87, a3);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v95 = *v87;
              *uint64_t v87 = 0;
              do
              {
                uint64_t v96 = (uint64_t *)v94;
                WTF::String::operator=((uint64_t *)v87, (uint64_t *)v94);
                if (!v93) {
                  break;
                }
                unint64_t v93 = (v93 - 1) >> 1;
                uint64_t v94 = &v8[v93];
                uint64_t v87 = (WTF **)v96;
              }
              while ((WTF::codePointCompare(*v94, v95, a3) & 0x80000000) != 0);
              uint64_t result = *v96;
              uint64_t *v96 = (uint64_t)v95;
              if (result)
              {
LABEL_142:
                if (*(_DWORD *)result == 2) {
                  uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v90);
                }
                else {
                  *(_DWORD *)result -= 2;
                }
              }
            }
          }
        }
        if (v83-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    int v15 = &v8[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v15, v8, v9);
    }
    else
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8, v15, v9);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8 + 1, v15 - 1, v10);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8 + 2, &v8[v14 + 1], (const WTF::StringImpl *)(a2 - 3));
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v15 - 1, v15, (const WTF::StringImpl *)&v8[v14 + 1]);
      uint64_t v17 = *v8;
      WTF::StringImpl *v8 = *v15;
      uint64_t *v15 = v17;
    }
    uint64_t v6 = (const WTF::StringImpl *)((char *)v6 - 1);
    if ((a4 & 1) != 0 || (WTF::codePointCompare(*(v8 - 1), *v8, v16) & 0x80000000) != 0)
    {
      uint64_t v18 = 0;
      int v19 = *v8;
      WTF::StringImpl *v8 = 0;
      do
      {
        unsigned int v20 = &v8[v18 + 1];
        if (v20 == (WTF **)a2) {
          goto LABEL_160;
        }
        ++v18;
      }
      while ((WTF::codePointCompare(*v20, v19, v16) & 0x80000000) != 0);
      unsigned int v22 = &v8[v18];
      int v23 = a2;
      if (v18 != 1)
      {
        while (v23 != (uint64_t *)v8)
        {
          uint64_t v24 = (WTF *)*--v23;
          if ((WTF::codePointCompare(v24, v19, v16) & 0x80000000) != 0) {
            goto LABEL_22;
          }
        }
        goto LABEL_160;
      }
      int v23 = a2;
      do
      {
        if (v22 >= (const WTF::StringImpl **)v23) {
          break;
        }
        int v25 = (WTF *)*--v23;
      }
      while ((WTF::codePointCompare(v25, v19, v16) & 0x80000000) == 0);
LABEL_22:
      if (v22 >= (const WTF::StringImpl **)v23)
      {
        uint64_t v34 = v22 - 1;
      }
      else
      {
        int v109 = v6;
        int v26 = v10;
        uint64_t v27 = v9;
        uint64_t v28 = &v8[v18];
        double v29 = (const WTF::StringImpl **)v23;
        do
        {
          uint64_t v30 = *v28;
          *uint64_t v28 = *v29;
          *double v29 = v30;
          uint64_t v31 = v28 + 1;
          do
          {
            if (v31 == (WTF **)a2) {
              goto LABEL_160;
            }
            uint64_t v32 = *v31++;
          }
          while ((WTF::codePointCompare(v32, v19, v16) & 0x80000000) != 0);
          uint64_t v28 = v31 - 1;
          do
          {
            if (v29 == v8) {
              goto LABEL_160;
            }
            uint64_t v33 = *--v29;
          }
          while ((WTF::codePointCompare(v33, v19, v16) & 0x80000000) == 0);
        }
        while (v28 < v29);
        uint64_t v34 = v31 - 2;
        uint64_t v9 = v27;
        uint64_t v10 = v26;
        uint64_t v6 = v109;
      }
      if (v34 != v8) {
        WTF::String::operator=((uint64_t *)v8, (uint64_t *)v34);
      }
      uint64_t v35 = *v34;
      const char *v34 = v19;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v21);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      if (v22 < (const WTF::StringImpl **)v23) {
        goto LABEL_42;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v8, v34, v16);
      int v11 = v34 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v34 + 1, (const WTF::StringImpl **)a2, v37);
      if (result)
      {
        a2 = (uint64_t *)v34;
        if (v36) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v36)
      {
LABEL_42:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>(v8, v34, v6, a4 & 1);
        a4 = 0;
        int v11 = v34 + 1;
      }
    }
    else
    {
      double v38 = *v8;
      WTF::StringImpl *v8 = 0;
      char v40 = v8 + 1;
      if ((WTF::codePointCompare(v38, *(const WTF::StringImpl **)v9, v16) & 0x80000000) != 0)
      {
        do
        {
          if (v40 == (const WTF::StringImpl **)a2) {
            goto LABEL_160;
          }
          char v41 = *v40++;
        }
        while ((WTF::codePointCompare(v38, v41, a3) & 0x80000000) == 0);
        int v11 = v40 - 1;
      }
      else
      {
        do
        {
          int v11 = v40;
          if (v40 >= (const WTF::StringImpl **)a2) {
            break;
          }
          ++v40;
        }
        while ((WTF::codePointCompare(v38, *v11, a3) & 0x80000000) == 0);
      }
      char v42 = (const WTF::StringImpl **)a2;
      if (v11 < (const WTF::StringImpl **)a2)
      {
        char v42 = (const WTF::StringImpl **)a2;
        while (v42 != v8)
        {
          int v43 = *--v42;
          if ((WTF::codePointCompare(v38, v43, a3) & 0x80000000) == 0) {
            goto LABEL_61;
          }
        }
LABEL_160:
        __break(1u);
        JUMPOUT(0x198CAADA4);
      }
LABEL_61:
      if (v11 < v42)
      {
        __int16 v44 = *v11;
        *int v11 = *v42;
        char v45 = v11 + 1;
        *char v42 = v44;
        do
        {
          if (v45 == (const WTF::StringImpl **)a2) {
            goto LABEL_160;
          }
          double v46 = *v45++;
        }
        while ((WTF::codePointCompare(v38, v46, a3) & 0x80000000) == 0);
        int v11 = v45 - 1;
        while (v42 != v8)
        {
          uint64_t v47 = *--v42;
          if ((WTF::codePointCompare(v38, v47, a3) & 0x80000000) == 0) {
            goto LABEL_61;
          }
        }
        goto LABEL_160;
      }
      uint64_t v48 = (uint64_t *)(v11 - 1);
      BOOL v4 = v11 - 1 >= v8;
      BOOL v5 = v11 - 1 == v8;
      if (v11 - 1 != v8) {
        WTF::String::operator=((uint64_t *)v8, (uint64_t *)v11 - 1);
      }
      a4 = 0;
      uint64_t result = *v48;
      *uint64_t v48 = (uint64_t)v38;
      if (result)
      {
        BOOL v4 = *(_DWORD *)result >= 2u;
        BOOL v5 = *(_DWORD *)result == 2;
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v39);
          a4 = 0;
        }
        else
        {
          a4 = 0;
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  int64_t v62 = v8 + 1;
  BOOL v64 = v8 == (const WTF::StringImpl **)a2 || v62 == (WTF **)a2;
  if (a4)
  {
    if (!v64)
    {
      uint64_t v65 = 0;
      uint64_t v66 = v8;
      do
      {
        long long v67 = *v66;
        uint64_t v66 = v62;
        uint64_t result = WTF::codePointCompare(*v62, v67, a3);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v68 = *v62;
          WTF::StringImpl *v62 = 0;
          uint64_t v69 = v65;
          while (1)
          {
            WTF::String::operator=((uint64_t *)((char *)v8 + v69 + 8), (uint64_t *)((char *)v8 + v69));
            if (!v69) {
              break;
            }
            int v71 = WTF::codePointCompare(v68, *(const WTF::StringImpl **)((char *)v8 + v69 - 8), a3);
            v69 -= 8;
            if ((v71 & 0x80000000) == 0)
            {
              int64_t v72 = (uint64_t *)((char *)v8 + v69 + 8);
              goto LABEL_99;
            }
          }
          int64_t v72 = (uint64_t *)v8;
LABEL_99:
          uint64_t result = *v72;
          uint64_t *v72 = (uint64_t)v68;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v70);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        int64_t v62 = v66 + 1;
        v65 += 8;
      }
      while (v66 + 1 != (const WTF::StringImpl **)a2);
    }
  }
  else if (!v64)
  {
    uint64_t v98 = 0;
    uint64_t v99 = -1;
    uint64_t v100 = 1;
    do
    {
      int v101 = v8[v98];
      uint64_t v98 = v100;
      uint64_t result = WTF::codePointCompare(*v62, v101, a3);
      if ((result & 0x80000000) != 0)
      {
        char v102 = *v62;
        WTF::StringImpl *v62 = 0;
        uint64_t v103 = v99;
        int v104 = (uint64_t *)v62;
        do
        {
          long long v105 = v104 - 1;
          WTF::String::operator=(v104, v104 - 1);
          if (!v103) {
            goto LABEL_160;
          }
          int v107 = WTF::codePointCompare(v102, (const WTF::StringImpl *)*(v104 - 2), v106);
          ++v103;
          --v104;
        }
        while (v107 < 0);
        uint64_t result = *v105;
        *long long v105 = (uint64_t)v102;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v108);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      uint64_t v100 = v98 + 1;
      ++v62;
      --v99;
    }
    while (v62 != (WTF **)a2);
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v6 = WTF::codePointCompare(*a2, *a1, a3);
  uint64_t result = WTF::codePointCompare(*(WTF **)a3, *a2, v7);
  if (v6 < 0)
  {
    uint64_t v12 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *(const WTF::StringImpl **)a3;
      *(void *)a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      uint64_t result = WTF::codePointCompare(*(WTF **)a3, v12, v9);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *a2;
        *a2 = *(WTF **)a3;
        *(void *)a3 = v13;
      }
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    uint64_t v10 = *a2;
    *a2 = *(WTF **)a3;
    *(void *)a3 = v10;
    uint64_t result = WTF::codePointCompare(*a2, *a1, v9);
    if ((result & 0x80000000) != 0)
    {
      int v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        uint64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a2 - 1);
      return 1;
    case 5:
      int v19 = a1 + 2;
      unsigned int v20 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3);
      if ((WTF::codePointCompare(*(a2 - 1), a1[3], v21) & 0x80000000) != 0)
      {
        int v23 = *v20;
        WTF::StringImpl *v20 = *(a2 - 1);
        *(a2 - 1) = v23;
        if ((WTF::codePointCompare(*v20, *v19, v22) & 0x80000000) != 0)
        {
          int v25 = *v19;
          int v26 = *v20;
          *int v19 = *v20;
          WTF::StringImpl *v20 = v25;
          if ((WTF::codePointCompare(v26, a1[1], v24) & 0x80000000) != 0)
          {
            double v29 = a1[1];
            uint64_t v28 = a1[2];
            uint64_t v30 = *a1;
            a1[1] = v28;
            a1[2] = v29;
            if ((WTF::codePointCompare(v28, v30, v27) & 0x80000000) != 0) {
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      *uint64_t v10 = 0;
      uint64_t v14 = v11;
      while (1)
      {
        WTF::String::operator=((uint64_t *)((char *)a1 + v14 + 24), (uint64_t *)((char *)a1 + v14 + 16));
        if (v14 == -16) {
          break;
        }
        int v16 = WTF::codePointCompare(v13, *(const WTF::StringImpl **)((char *)a1 + v14 + 8), v9);
        v14 -= 8;
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v17 = (const WTF::StringImpl **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      uint64_t v18 = *v17;
      const WTF::StringImpl *v17 = v13;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v15);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    int v8 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4)
{
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a2, a3);
  uint64_t result = WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v8);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v11 = *(WTF **)a3;
    *(void *)a3 = *a4;
    *a4 = v11;
    uint64_t result = WTF::codePointCompare(*(WTF **)a3, *a2, v10);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v13 = *a2;
      *a2 = *(WTF **)a3;
      *(void *)a3 = v13;
      uint64_t result = WTF::codePointCompare(*a2, *a1, v12);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = v4 + 592 * v5;
    do
    {
      WebCore::ServiceWorkerContextData::isolatedCopy();
      WebCore::ServiceWorkerContextData::operator=(v4, v9);
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v9, v7);
      v4 += 592;
    }
    while (v4 < v6);
    unint64_t v4 = *(void *)a2;
    unsigned int v5 = *(_DWORD *)(a2 + 12);
  }
  *(void *)a1 = v4;
  int v8 = *(_DWORD *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 96)
    {
      int v5 = *(_DWORD *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_10:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(i + 80, a2);
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(i + 64, v6);
    uint64_t v7 = *(unsigned int *)(i + 56);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v7])(&v10, i + 32);
    }
    *(_DWORD *)(i + 56) = -1;
    uint64_t v8 = *(unsigned int *)(i + 24);
    if (v8 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v8])(&v11, i);
    }
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_10;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          double v29 = v27 + 1;
          uint64_t v28 = (WTF::StringImpl *)v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v29, v28);
          }
          *uint64_t v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WTF::StringImpl **)(v30 + 8);
          *uint64_t v31 = 0;
          *double v29 = v32;
          char v10 = *v31;
          *uint64_t v31 = 0;
          if (v10) {
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v31, v10);
          }
          if (v13 == a3) {
            int v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v17 = *(WTF::StringImpl **)(v15 + 8);
          int v16 = (void *)(v15 + 8);
          char v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return;
    }
  }
  else
  {
    if (!a2) {
      return;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  unsigned int v5 = (WTF::StringImpl *)a2[1];
  uint64_t v3 = a2 + 1;
  uint64_t v4 = v5;
  *uint64_t v3 = 0;
  if (v5) {
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100) {
            unsigned int v18 = v17 >> 8;
          }
          else {
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v16;
            unsigned int v18 = ++v19 + v20;
          }
          while (*(void *)(v15 + 16 * v20));
          unint64_t v21 = (WTF::StringImpl **)(v15 + 16 * v20);
          const WTF::StringImpl *v21 = 0;
          unint64_t v22 = *v13;
          *uint64_t v13 = 0;
          const WTF::StringImpl *v21 = v22;
          v21[1] = *(WTF::StringImpl **)(v6 + 16 * v11 + 8);
          unsigned int v23 = *v13;
          *uint64_t v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v10);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          if (v13 == a3) {
            int v12 = v21;
          }
        }
        else
        {
          *uint64_t v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v7 = i + v10)
  {
    int v10 = v7 & v5;
    uint64_t result = *(WTF **)(v3 + 16 * (v7 & v5));
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return (WTF *)1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF *WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v7 = i + v10)
  {
    uint64_t v10 = v7 & v5;
    uint64_t result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v11)
  {
    uint64_t v11 = v8 & v6;
    int v12 = *(WTF **)(v3 + 16 * v11);
    if (v12 == (WTF *)-1) {
      goto LABEL_10;
    }
    if (!v12) {
      break;
    }
    if (WTF::equal(v12, *a2, a3)) {
      return v3 + 16 * v11;
    }
LABEL_10:
    ++i;
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

WTF *WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(WTF *this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::IDBStorageManager::idbStorageOriginDirectory(WTF::String const&,WebCore::ClientOrigin const&)::$_0,WTF::String,WTF::String const&>::call(int a1, WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  WebCore::IDBServer::SQLiteIDBBackingStore::decodeDatabaseName((uint64_t *)&v4, this, this);
  WebCore::SQLiteFileSystem::computeHashForFileName();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v7;
  uint64_t v9 = v6 + (v8 << 6);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    goto LABEL_18;
  }
  uint64_t v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 24);
    if (v12) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    uint64_t v10 = (_OWORD *)v9;
LABEL_12:
    uint64_t v8 = (v8 + v11) & v7;
    uint64_t v9 = v6 + (v8 << 6);
    ++v11;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_16;
    }
  }
  if (v12 == 1)
  {
LABEL_8:
    if (WebCore::operator==())
    {
      uint64_t result = WebCore::operator==();
      if (result)
      {
        uint64_t v22 = *a2;
        if (*a2) {
          uint64_t v23 = *(unsigned int *)(v22 - 4);
        }
        else {
          uint64_t v23 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v22 + (v23 << 6);
        goto LABEL_31;
      }
    }
    goto LABEL_12;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_16:
  if (v10)
  {
    void v10[2] = 0u;
    v10[3] = 0u;
    *uint64_t v10 = 0u;
    v10[1] = 0u;
    --*(_DWORD *)(*a2 - 16);
    uint64_t v9 = (uint64_t)v10;
  }
LABEL_18:
  v25[0] = 0;
  int v26 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v25, a3);
  v27[0] = 0;
  int v28 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, a3 + 32);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v25);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9 + 32, (uint64_t)v27);
  if (v28 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v28])(&v24, v27);
  }
  int v28 = -1;
  if (v26 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v26])(&v24, v25);
  }
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 <= 2 * v18) {
      goto LABEL_28;
    }
  }
  else if (3 * v19 <= 4 * v18)
  {
LABEL_28:
    uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, (void *)v9);
    uint64_t v9 = result;
    uint64_t v16 = *a2;
    if (*a2) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
  }
  uint64_t v20 = v16 + (v19 << 6);
  char v21 = 1;
LABEL_31:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

uint64_t WebCore::operator==()
{
  uint64_t result = WebCore::operator==();
  if (result)
  {
    return WebCore::operator==();
  }
  return result;
}

{
  return MEMORY[0x1F4173CD0]();
}

{
  return MEMORY[0x1F4173CD8]();
}

void WTF::Detail::CallableWrapper<WebKit::IDBStorageManager::migrateOriginData(WTF::String const&,WTF::String const&)::$_0,WTF::String,WTF::String const&>::call(_DWORD **a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *v2 += 2;
  }
  *a2 = v2;
}

void *WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)result - 1);
  uint64_t v3 = &result[11 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[11 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 88 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 11;
      v4 -= 88;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(v7 + 96);
    do
    {
      *(v10 - 5) = 0;
      *(v10 - 4) = 0;
      *((_DWORD *)v10 - 4) = 0;
      *(v10 - 3) = 0;
      *((unsigned char *)v10 - 8) = 0;
      *((_OWORD *)v10 - 5) = 0uLL;
      *((_OWORD *)v10 - 4) = 0uLL;
      *((_DWORD *)v10 - 12) = 0;
      *uint64_t v10 = 0;
      v10 += 11;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v5 = v5;
    uint64_t v35 = v5;
    do
    {
      uint64_t v13 = v4 + 88 * v11;
      if (*(void *)v13 != -1)
      {
        if (*(void *)v13)
        {
          uint64_t v38 = v12;
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>(v4 + 88 * v11);
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = v17 + 88 * (v19 & v18);
            int v19 = ++v20 + (v19 & v18);
          }
          while (*(void *)v22);
          uint64_t v23 = (uint64_t *)(v17 + 88 * v21 + 80);
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](v23, 0);
          uint64_t v25 = *(unsigned int *)(v22 + 64);
          if (v25 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(&v43, v22 + 40);
          }
          *(_DWORD *)(v22 + 64) = -1;
          uint64_t v26 = *(unsigned int *)(v22 + 32);
          if (v26 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v26])(&v44, v22 + 8);
          }
          *(_DWORD *)(v22 + 32) = -1;
          uint64_t v27 = *(WTF::StringImpl **)v22;
          *(void *)uint64_t v22 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v24);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          int v28 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v22 = v28;
          *(unsigned char *)(v22 + 8) = 0;
          *(_DWORD *)(v22 + 32) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v22 + 8, v13 + 8);
          *(unsigned char *)(v22 + 40) = 0;
          *(_DWORD *)(v22 + 64) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v22 + 40, v13 + 40);
          *(unsigned char *)(v22 + 72) = *(unsigned char *)(v13 + 72);
          uint64_t v29 = (uint64_t *)(v4 + 88 * v11);
          uint64_t v30 = v29[10];
          v29 += 10;
          *uint64_t v29 = 0;
          *uint64_t v23 = v30;
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](v29, 0);
          uint64_t v31 = *(unsigned int *)(v13 + 64);
          if (v31 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(&v41, v13 + 40);
          }
          *(_DWORD *)(v13 + 64) = -1;
          uint64_t v32 = *(unsigned int *)(v13 + 32);
          uint64_t v12 = v38;
          uint64_t v5 = v35;
          if (v32 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v32])(&v42, v13 + 8);
          }
          *(_DWORD *)(v13 + 32) = -1;
          uint64_t v33 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v8);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v22;
          }
        }
        else
        {
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v4 + 88 * v11 + 80), 0);
          uint64_t v14 = *(unsigned int *)(v13 + 64);
          if (v14 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v14])(&v39, v13 + 40);
          }
          *(_DWORD *)(v13 + 64) = -1;
          uint64_t v15 = *(unsigned int *)(v13 + 32);
          if (v15 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v15])(&v40, v13 + 8);
          }
          *(_DWORD *)(v13 + 32) = -1;
          uint64_t v16 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v8);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::computeHash<WebCore::IDBDatabaseIdentifier>(uint64_t a1)
{
  unsigned int v5 = -1640531527;
  __int16 v6 = 0;
  char v7 = 0;
  uint64_t v2 = a1 + 8;
  int v3 = *(unsigned __int8 *)(a1 + 72);
  WTF::add(&v5, (uint64_t *)a1);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v5, v2);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v5, a1 + 40);
  unsigned int v5 = ((v5 + v3) ^ ((v5 + v3) << 16)) + (((v5 + v3) ^ ((v5 + v3) << 16)) >> 11);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v5);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v14, a2 + 40);
  }
  *(_DWORD *)(a2 + 64) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v15, a2 + 8);
  }
  *(_DWORD *)(a2 + 32) = -1;
  __int16 v6 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  *(void *)a2 = -1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  uint64_t result = std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(a2 + 80), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v8 = *a1;
  if (*a1) {
    int v9 = *(_DWORD *)(v8 - 12) - 1;
  }
  else {
    int v9 = -1;
  }
  *(_DWORD *)(v8 - 12) = v9;
  uint64_t v10 = *a1;
  if (*a1)
  {
    unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
    unsigned int v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
    {
      return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(a1, v12 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>(a2);
  for (i = 0; ; unsigned int v6 = ++i + v9)
  {
    unsigned int v9 = v6 & v5;
    uint64_t v10 = (void *)(v2 + 88 * (v6 & v5));
    if (*v10 == -1) {
      continue;
    }
    if (!*v10) {
      break;
    }
    if (WebCore::operator==(v2 + 88 * v9, a2, v7)) {
      return (uint64_t)v10;
    }
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 88 * *(unsigned int *)(*a1 - 4);
}

unint64_t WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 16 * *(unsigned int *)(result + 12));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    int v5 = 0;
    int v6 = 0;
LABEL_3:
    unsigned int v7 = 8;
    goto LABEL_4;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  int v6 = *(_DWORD *)(v4 - 12);
  if (!v5) {
    goto LABEL_3;
  }
  unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    do
    {
      unsigned int v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (uint64_t *)(v16 + 16 * v23);
          uint64_t v26 = (WTF *)v25[1];
          v25[1] = 0;
          if (v26) {
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v26, v9);
          }
          uint64_t *v25 = *v12;
          uint64_t v27 = v4 + 16 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v25[1] = v28;
          uint64_t v29 = *(WTF **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v29, v9);
          }
          if (v12 == a2) {
            unsigned int v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          char v15 = *(WTF **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15) {
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v15, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

WebCore::IDBResourceIdentifier *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v3);
}

WebCore::IDBResourceIdentifier *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = (WebCore::IDBResourceIdentifier *)WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = result;
  unint64_t v9 = (char *)result + 16;
  if (a2)
  {
    uint64_t v10 = a2;
    unsigned int v11 = (void *)((char *)result + 32);
    do
    {
      uint64_t result = (WebCore::IDBResourceIdentifier *)WebCore::IDBResourceIdentifier::emptyValue(result);
      *(v11 - 2) = result;
      *(v11 - 1) = v7;
      *unsigned int v11 = 0;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  *a1 = (uint64_t)v9;
  *((_DWORD *)v8 + 3) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v4;
    while (1)
    {
      uint64_t v14 = (unint64_t *)(v3 + 24 * v12);
      unint64_t v7 = *v14;
      if (*v14 != -1)
      {
        unint64_t v15 = v14[1];
        if (v15 | v7)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v31 = -1640531527;
          __int16 v32 = 0;
          char v33 = 0;
          WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v31, v7, v15);
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v17;
            unsigned int v23 = (_OWORD *)(v16 + 24 * (v20 & v17));
            int v20 = ++v21 + (v20 & v17);
          }
          while (*v23 != 0);
          uint64_t v24 = v16 + 24 * v22;
          uint64_t v27 = *(unsigned int **)(v24 + 16);
          uint64_t v26 = (void *)(v24 + 16);
          uint64_t v25 = v27;
          void *v26 = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, (void *)v7);
          }
          *unsigned int v23 = *(_OWORD *)v14;
          uint64_t v28 = v3 + 24 * v12;
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = 0;
          void *v26 = v29;
          unint64_t v19 = *(atomic_uint **)(v28 + 16);
          *(void *)(v28 + 16) = 0;
          if (!v19 || atomic_fetch_add(v19, 0xFFFFFFFF) != 1) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v18 = v3 + 24 * v12;
          unint64_t v19 = *(atomic_uint **)(v18 + 16);
          *(void *)(v18 + 16) = 0;
          if (!v19 || atomic_fetch_add(v19, 0xFFFFFFFF) != 1) {
            goto LABEL_25;
          }
        }
        atomic_store(1u, (unsigned int *)v19);
        WTF::fastFree((WTF *)v19, (void *)v7);
      }
LABEL_25:
      if (++v12 == v13) {
        goto LABEL_28;
      }
    }
  }
  if (v3)
  {
LABEL_28:
    return (WebCore::IDBResourceIdentifier *)WTF::fastFree((WTF *)(v3 - 16), (void *)v7);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 72 * v3;
    uint64_t v5 = *(void *)a1 + 32;
    do
    {
      uint64_t v6 = *(void *)(v5 + 32);
      *(void *)(v5 + 32) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v7 = *(unsigned int *)(v5 + 24);
      if (v7 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v7])(&v11, v5);
      }
      *(_DWORD *)(v5 + 24) = -1;
      uint64_t v8 = *(unsigned int *)(v5 - 8);
      if (v8 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v8])(&v12, v5 - 32);
      }
      *(_DWORD *)(v5 - 8) = -1;
      v5 += 72;
      v4 -= 72;
    }
    while (v4);
  }
  unint64_t v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3 = *(atomic_uchar **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)a1;
  uint64_t v4 = qword_1EB359928;
  if (qword_1EB359928) {
    unsigned int v5 = *(_DWORD *)(qword_1EB359928 - 8);
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v3 + 4);
  if (v6 >= 0x100) {
    int v7 = v6 >> 8;
  }
  else {
    int v7 = WTF::StringImpl::hashSlowCase(v3);
  }
  int v8 = 0;
  do
  {
    unsigned int v9 = v7 & v5;
    uint64_t v10 = (WTF::StringImpl **)(v4 + 24 * (v7 & v5));
    int v7 = ++v8 + (v7 & v5);
  }
  while (*v10);
  uint64_t v11 = v4 + 24 * v9;
  uint64_t v14 = *(atomic_uchar **)(v11 + 8);
  uint64_t v13 = (void *)(v11 + 8);
  char v12 = v14;
  *uint64_t v13 = 0;
  if (v14)
  {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
    uint64_t v16 = *v10;
    *uint64_t v10 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    *uint64_t v10 = 0;
  }
  unsigned int v17 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  *uint64_t v10 = v17;
  *uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(v4 + 24 * v9 + 16) = v18;
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC840;
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9CC868;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::ThreadSafeWeakHashSet<IPC::Connection>::values@<X0>(atomic_uchar *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unsigned int v6 = (WTF::Lock *)(a1 + 16);
  atomic_compare_exchange_strong_explicit(a1 + 16, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (!*(void *)a1)
  {
    unsigned int v13 = 0;
    LODWORD(v7) = 0;
LABEL_15:
    int v14 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = *(unsigned int *)(*(void *)a1 - 12);
  if (!v7)
  {
    unsigned int v13 = 0;
    goto LABEL_15;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x198CAD234);
  }
  int v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  LODWORD(v56) = v7;
  uint64_t v55 = v8;
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1)
  {
    int v14 = 0;
    goto LABEL_66;
  }
  if (*(_DWORD *)(v9 - 12))
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      uint64_t v12 = *(void *)a1;
      while ((unint64_t)(*(void *)v12 + 1) <= 1)
      {
        v12 += 16;
        v11 -= 16;
        if (!v11) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v12 = *(void *)a1;
    }
    uint64_t v33 = v9 + 16 * v10;
    if (v33 == v12)
    {
LABEL_60:
      int v14 = 0;
      unsigned int v13 = 0;
    }
    else
    {
      int v14 = 0;
      a2 = *(void **)v12;
LABEL_39:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v12 + 8), (uint64_t)a2, &v57);
      uint64_t v34 = v57;
      if (!v57)
      {
        int v14 = 1;
        goto LABEL_53;
      }
      double v57 = 0;
      uint64_t v58 = v34;
      LODWORD(v35) = HIDWORD(v56);
      if (HIDWORD(v56) == v56)
      {
        BOOL v36 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)&v58);
        uint64_t v35 = HIDWORD(v56);
        uint64_t v37 = v55;
        uint64_t v38 = *v36;
        *BOOL v36 = 0;
        *((void *)v37 + v35) = v38;
      }
      else
      {
        uint64_t v58 = 0;
        *((void *)v55 + HIDWORD(v56)) = v34;
      }
      HIDWORD(v56) = v35 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v58);
      char v39 = v57;
      double v57 = 0;
      if (v39)
      {
        char v40 = 0;
        atomic_uchar *volatile v41 = *v39;
        atomic_compare_exchange_strong_explicit(*v39, (unsigned __int8 *)&v40, 1u, memory_order_acquire, memory_order_acquire);
        if (v40) {
          MEMORY[0x19972E8D0](v41);
        }
        uint64_t v42 = *((void *)v41 + 1) - 1;
        *((void *)v41 + 1) = v42;
        if (v42)
        {
          BOOL v43 = 0;
          uint64_t v44 = 0;
        }
        else
        {
          uint64_t v48 = *((void *)v41 + 2);
          uint64_t v44 = *((void *)v41 + 3);
          *((void *)v41 + 3) = 0;
          BOOL v43 = v48 == 0;
        }
        int v45 = 1;
        atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v45, 0, memory_order_release, memory_order_relaxed);
        if (v45 == 1)
        {
          if (v42) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v54 = v42;
          WTF::Lock::unlockSlow((WTF::Lock *)v41);
          if (v54) {
            goto LABEL_53;
          }
        }
        uint64_t v46 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v46 = &unk_1EE9B37E8;
        *(void *)(v46 + 8) = v41;
        *(void *)(v46 + 16) = v44;
        *(unsigned char *)(v46 + 24) = v43;
        uint64_t v58 = (atomic_uchar *volatile *)v46;
        WTF::ensureOnMainRunLoop();
        uint64_t v47 = v58;
        uint64_t v58 = 0;
        if (v47) {
          (*((void (**)(atomic_uchar *volatile *))*v47 + 1))(v47);
        }
      }
LABEL_53:
      while (1)
      {
        v12 += 16;
        if (v12 == v33) {
          break;
        }
        a2 = *(void **)v12;
        if ((unint64_t)(*(void *)v12 + 1) > 1)
        {
          if (v12 != v33) {
            goto LABEL_39;
          }
          break;
        }
      }
      LODWORD(v7) = v56;
      unsigned int v13 = HIDWORD(v56);
    }
    if (v7 <= v13) {
      goto LABEL_16;
    }
    int v8 = v55;
    if (v13)
    {
      uint64_t v55 = (WTF *)WTF::fastRealloc(v55, (void *)(8 * v13));
      LODWORD(v7) = v13;
      goto LABEL_16;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8)
  {
LABEL_66:
    uint64_t v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree(v8, a2);
    unsigned int v13 = 0;
    LODWORD(v7) = 0;
    goto LABEL_16;
  }
  unsigned int v13 = 0;
LABEL_16:
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  uint64_t v16 = *(WTF **)a3;
  if (v15)
  {
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(atomic_uchar *volatile ***)a3;
    do
    {
      uint64_t v18 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v18)
          + 1;
      v17 -= 8;
    }
    while (v17);
  }
  if (v16) {
    WTF::fastFree(v16, a2);
  }
  unint64_t v19 = v55;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  *(void *)a3 = v19;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v13;
  uint64_t result = WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, a2);
  uint64_t v21 = *(void *)a1;
  if (v14)
  {
    if (v21)
    {
      int v22 = *(_DWORD *)(v21 - 4);
      if (!v22) {
        goto LABEL_76;
      }
      int v23 = 0;
      unsigned int v24 = v22 - 1;
      do
      {
        uint64_t v25 = v24;
        uint64_t v26 = (void *)(v21 + 16 * v24);
        if ((unint64_t)(*v26 + 1) >= 2)
        {
          uint64_t v27 = v21 + 16 * v24;
          uint64_t v29 = *(atomic_uchar **)(v27 + 8);
          uint64_t v28 = (uint64_t *)(v27 + 8);
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v29);
          if (result)
          {
            void *v26 = -1;
            uint64_t result = *v28;
            *uint64_t v28 = 0;
            if (result) {
              uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v30);
            }
            ++v23;
          }
        }
        --v24;
      }
      while (v25);
      uint64_t v21 = *(void *)a1;
      if (v23)
      {
        *(_DWORD *)(v21 - 16) += v23;
        uint64_t v31 = *(void *)a1;
        if (*(void *)a1) {
          int v32 = *(_DWORD *)(v31 - 12);
        }
        else {
          int v32 = 0;
        }
        *(_DWORD *)(v31 - 12) = v32 - v23;
        uint64_t v21 = *(void *)a1;
      }
      if (v21)
      {
        unsigned int v49 = *(_DWORD *)(v21 - 4);
        if (v49 >= 9 && 6 * *(_DWORD *)(v21 - 12) < v49)
        {
          uint64_t result = (uint64_t)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v21 = *(void *)a1;
          goto LABEL_78;
        }
LABEL_76:
        *((_DWORD *)a1 + 2) = 0;
        goto LABEL_79;
      }
    }
    unsigned int v51 = 0;
    *((_DWORD *)a1 + 2) = 0;
LABEL_82:
    int v52 = v51;
    goto LABEL_83;
  }
LABEL_78:
  *((_DWORD *)a1 + 2) = 0;
  if (!v21)
  {
    unsigned int v51 = 0;
    goto LABEL_82;
  }
LABEL_79:
  unsigned int v51 = *(_DWORD *)(v21 - 12);
  int v52 = 0x7FFFFFFF;
  if (v51 < 0x7FFFFFFF) {
    goto LABEL_82;
  }
LABEL_83:
  *((_DWORD *)a1 + 3) = 2 * v52;
  int v53 = 1;
  atomic_compare_exchange_strong_explicit(a1 + 16, (unsigned __int8 *)&v53, 0, memory_order_release, memory_order_relaxed);
  if (v53 != 1) {
    return WTF::Lock::unlockSlow(v6);
  }
  return result;
}

void *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v8, 0);
}

void *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (~(*a2 << 32) + *a2) ^ ((~(*a2 << 32) + *a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = (void *)(a1 + 16 * v9);
  uint64_t v12 = (atomic_uchar *)v11[1];
  v11[1] = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
  }
  *uint64_t v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(atomic_uchar *volatile ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v4 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC890;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC890;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4)
  {
    *(void *)(v3 + 88) = 0;
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(WTF **)(v3 + 120);
  *(void *)(v3 + 120) = 0;
  if (v5) {
    WebKit::StorageAreaRegistry::operator delete(v5, a2);
  }
  uint64_t v6 = *(void *)(v3 + 328);
  uint64_t v17 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 340);
  int v18 = *(_DWORD *)(v3 + 336);
  int v19 = v7;
  v16[0] = 0;
  *(void *)(v3 + 328) = 0;
  v16[1] = 0;
  *(void *)(v3 + 336) = 0;
  WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, a2);
  if (v7)
  {
    uint64_t v9 = 72 * v7;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    do
    {
      uint64_t v11 = *v10;
      *uint64_t v10 = 0;
      v10 += 9;
      (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      v9 -= 72;
    }
    while (v9);
  }
  WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v8);
  uint64_t v12 = std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100]((WebKit::ServiceWorkerStorageManager **)(v3 + 368), 0);
  WTF::RunLoop::main(v12);
  long long v15 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v13 = &unk_1EE9CC8B8;
  *(_OWORD *)(v13 + 8) = v15;
  uint64_t v17 = v13;
  WTF::RunLoop::dispatch();
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC8B8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC8B8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((void *)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((void *)v2 != a2) {
    WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::remove(a1, a2);
  }
  return 1;
}

uint64_t WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(uint64_t *a1, WTF **a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(result, a2);
    uint64_t v4 = *a1;
    if (!result)
    {
      if (v4) {
        return v4 + 16 * *(unsigned int *)(v4 - 4);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(uint64_t result, WTF **a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    uint64_t v5 = WTF::IntHash<unsigned long>::hash(*a2) & v4;
    uint64_t v6 = *(WTF **)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      int v7 = 1;
      while (v6)
      {
        uint64_t v5 = (v5 + v7) & v4;
        uint64_t v6 = *(WTF **)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2) {
          return v3 + 16 * v5;
        }
      }
      return 0;
    }
  }
  return result;
}

atomic_uchar *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (atomic_uchar *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (atomic_uchar *)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC8E0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC8E0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()((uint64_t *)(a1 + 8));
}

WTF::StringImpl **WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1 + 2;
  WebKit::IDBStorageRegistry::removeConnectionToClient(*(void *)(*a1 + 136), a1[2]);
  uint64_t v11 = (WTF::StringImpl **)(a1 + 2);
  _ZN3WTF9HashTableIN7WebCore12ClientOriginENS_12KeyValuePairIS2_NSt3__110unique_ptrIN6WebKit20OriginStorageManagerENS4_14default_deleteIS7_EEEEEENS_24KeyValuePairKeyExtractorISB_EENS_11DefaultHashIS2_EENS_7HashMapIS2_SA_SF_NS_10HashTraitsIS2_EENSH_ISA_EENS_15HashTableTraitsEE18KeyValuePairTraitsESI_E8removeIfIZZNS6_21NetworkStorageManager34stopReceivingMessageFromConnectionERN3IPC10ConnectionEEN3__0clEvEUlRT_E_EEbRKSU_(v2 + 88, &v11);
  uint64_t v4 = *(void *)(v2 + 320);
  if (v4)
  {
    uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v2 + 320), *v3);
    if (v10) {
      int v5 = (WTF::StringImpl *)v10;
    }
    else {
      int v5 = (WTF::StringImpl *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = (WTF::RunLoop *)WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove((uint64_t *)(v2 + 320), v5);
  if (*(unsigned char *)(v2 + 392)) {
    uint64_t v6 = (WTF::RunLoop *)WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove((WTF::StringImpl **)(v2 + 384), (WTF::StringImpl *)*v3);
  }
  WTF::RunLoop::main(v6);
  uint64_t v7 = a1[1];
  a1[1] = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v8 = &unk_1EE9CC908;
  *(void *)(v8 + 8) = v7;
  uint64_t v11 = (WTF::StringImpl **)v8;
  WTF::RunLoop::dispatch();
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = (uint64_t *)result;
    unsigned int v4 = *((_DWORD *)v2 - 2);
    unint64_t v5 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = (WTF::StringImpl *)*((void *)v2 + 2 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = (WTF::StringImpl *)*((void *)v2 + 2 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *((unsigned int *)v2 - 1);
    }
LABEL_8:
    if (v8 != *((_DWORD *)v2 - 1))
    {
      uint64_t v11 = (void *)((char *)v2 + 16 * v8);
      *uint64_t v11 = -1;
      uint64_t result = (WTF::StringImpl **)v11[1];
      if (result) {
        uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v12 = *v3;
      if (*v3) {
        int v13 = *(_DWORD *)(v12 - 12) - 1;
      }
      else {
        int v13 = -1;
      }
      *(_DWORD *)(v12 - 12) = v13;
      uint64_t v14 = *v3;
      if (*v3)
      {
        unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
        unsigned int v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
        {
          return (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v16 >> 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF9HashTableIN7WebCore12ClientOriginENS_12KeyValuePairIS2_NSt3__110unique_ptrIN6WebKit20OriginStorageManagerENS4_14default_deleteIS7_EEEEEENS_24KeyValuePairKeyExtractorISB_EENS_11DefaultHashIS2_EENS_7HashMapIS2_SA_SF_NS_10HashTraitsIS2_EENSH_ISA_EENS_15HashTableTraitsEE18KeyValuePairTraitsESI_E8removeIfIZZNS6_21NetworkStorageManager34stopReceivingMessageFromConnectionERN3IPC10ConnectionEEN3__0clEvEUlRT_E_EEbRKSU_(uint64_t result, WTF::StringImpl ***a2)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)result)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      unint64_t v5 = (uint64_t *)result;
      int v6 = 0;
      unsigned int v7 = v3 - 1;
      do
      {
        uint64_t v8 = v7;
        uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v2 + 72 * v7);
        if ((result & 1) == 0)
        {
          uint64_t result = _ZZZN6WebKit21NetworkStorageManager34stopReceivingMessageFromConnectionERN3IPC10ConnectionEEN3__0clEvENKUlRT_E_clIN3WTF12KeyValuePairIN7WebCore12ClientOriginENSt3__110unique_ptrINS_20OriginStorageManagerENSD_14default_deleteISF_EEEEEEEEDaS6_(**a2, v2 + 72 * v7);
          if (result)
          {
            uint64_t result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket((WebCore::ClientOrigin *)(v2 + 72 * v7));
            ++v6;
          }
        }
        --v7;
      }
      while (v8);
      uint64_t v9 = *v5;
      if (v6)
      {
        *(_DWORD *)(v9 - 16) += v6;
        uint64_t v10 = *v5;
        if (*v5) {
          int v11 = *(_DWORD *)(v10 - 12);
        }
        else {
          int v11 = 0;
        }
        *(_DWORD *)(v10 - 12) = v11 - v6;
        uint64_t v9 = *v5;
      }
      if (v9)
      {
        unsigned int v12 = *(_DWORD *)(v9 - 4);
        if (6 * *(_DWORD *)(v9 - 12) < v12 && v12 >= 9)
        {
          return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::shrinkToBestSize(v5);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(uint64_t a1)
{
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    return 1;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (!v3) {
    return *(void *)a1 == -1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZZZN6WebKit21NetworkStorageManager34stopReceivingMessageFromConnectionERN3IPC10ConnectionEEN3__0clEvENKUlRT_E_clIN3WTF12KeyValuePairIN7WebCore12ClientOriginENSt3__110unique_ptrINS_20OriginStorageManagerENSD_14default_deleteISF_EEEEEEEEDaS6_(v4);
}

uint64_t _ZZZN6WebKit21NetworkStorageManager34stopReceivingMessageFromConnectionERN3IPC10ConnectionEEN3__0clEvENKUlRT_E_clIN3WTF12KeyValuePairIN7WebCore12ClientOriginENSt3__110unique_ptrINS_20OriginStorageManagerENSD_14default_deleteISF_EEEEEEEEDaS6_(WTF::StringImpl *a1, uint64_t a2)
{
  WebKit::OriginStorageManager::connectionClosed(*(void *)(a2 + 64), a1);
  int v3 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(a2 + 64));
  if (WebKit::OriginStorageManager::StorageBucket::isActive((WebKit::OriginStorageManager::StorageBucket *)v3)) {
    return 0;
  }
  uint64_t v4 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(a2 + 64));
  if (WebKit::OriginStorageManager::StorageBucket::hasDataInMemory((WebKit::OriginStorageManager::StorageBucket *)v4)) {
    return 0;
  }
  WebKit::OriginStorageManager::deleteEmptyDirectory(*(unsigned __int8 **)(a2 + 64));
  WebKit::deleteEmptyOriginDirectory((WTF::StringImpl *)(*(void *)(a2 + 64) + 16), v5);
  return 1;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v8, 0);
}

WebKit::OriginStorageManager *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket(WebCore::ClientOrigin *a1)
{
  WebCore::ClientOrigin::~ClientOrigin(a1);
  *(void *)uint64_t v1 = -1;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  unsigned int v2 = (WebKit::OriginStorageManager **)(v1 + 64);

  return std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](v2, 0);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 72 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    while (1)
    {
      int v17 = *(_DWORD *)(v16 + 24);
      if (v17) {
        break;
      }
      if (*(void *)v16 != -1) {
        goto LABEL_12;
      }
LABEL_16:
      v16 += 72;
      if (!--v15) {
        goto LABEL_17;
      }
    }
    if (v17 != 1)
    {
      uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::reinsert(v19, v20);
    }
LABEL_12:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair(v16);
    }
    else
    {
      uint64_t v18 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::reinsert(*a1, v16);
      WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair(v16);
      if (v16 == a3) {
        uint64_t v13 = v18;
      }
    }
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::reinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = WTF::computeHash<WebCore::ClientOrigin>(a2);
  int v6 = 0;
  do
  {
    unsigned int v7 = v5 & v4;
    uint64_t v8 = a1 + 72 * (v5 & v4);
    int v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    unsigned int v5 = ++v6 + v7;
  }
  while (!v9);
  uint64_t v10 = (WebKit::OriginStorageManager **)(a1 + 72 * v7 + 64);
  std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](v10, 0);
  uint64_t v11 = *(unsigned int *)(v8 + 56);
  if (v11 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v11])(&v15, v8 + 32);
  }
  *(_DWORD *)(v8 + 56) = -1;
  uint64_t v12 = *(unsigned int *)(v8 + 24);
  if (v12 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v12])(&v16, v8);
  }
  *(unsigned char *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8, a2);
  *(unsigned char *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, a2 + 32);
  uint64_t v13 = *(WebKit::OriginStorageManager **)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *uint64_t v10 = v13;
  return v8;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  if (*a1)
  {
    unsigned int v2 = (WTF::StringImpl *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v2 = 0;
  }
  if (v2 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  *(void *)a2 = -1;
  uint64_t result = (WTF::StringImpl **)*((void *)a2 + 1);
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      char v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = (void *)(v19 + 16 * v26);
          uint64_t v30 = v28 + 1;
          uint64_t v29 = (WTF::StringImpl **)v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v10);
            uint64_t v17 = *v16;
          }
          *uint64_t v28 = v17;
          uint64_t v31 = v6 + 16 * v13;
          *uint64_t v30 = 0;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          *uint64_t v30 = v32;
          uint64_t v33 = *(WTF::StringImpl ***)(v31 + 8);
          if (v33) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v10);
          }
          if (v16 == a3) {
            uint64_t v14 = v28;
          }
        }
        else
        {
          uint64_t v18 = *(WTF::StringImpl ***)(v6 + 16 * v13 + 8);
          if (v18) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v10);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      char v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = (void *)(v19 + 16 * v26);
          uint64_t v30 = v28 + 1;
          uint64_t v29 = (WTF::StringImpl **)v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v10);
            uint64_t v17 = *v16;
          }
          *uint64_t v28 = v17;
          uint64_t v31 = v6 + 16 * v13;
          *uint64_t v30 = 0;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          *uint64_t v30 = v32;
          uint64_t v33 = *(WTF::StringImpl ***)(v31 + 8);
          if (v33) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v10);
          }
          if (v16 == a3) {
            uint64_t v14 = v28;
          }
        }
        else
        {
          uint64_t v18 = *(WTF::StringImpl ***)(v6 + 16 * v13 + 8);
          if (v18) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v10);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9CC908;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CC908;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result - 8);
    unsigned int v4 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v3;
    uint64_t v5 = v2 + 72 * v4;
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
    {
      for (int i = 1; ; ++i)
      {
        int v7 = *(_DWORD *)(v5 + 24);
        if (v7)
        {
          if (v7 != 1)
          {
            uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::~CallableWrapper(v10);
          }
        }
        else if (*(void *)v5 == -1)
        {
          goto LABEL_8;
        }
        if (WebCore::operator==())
        {
          char v8 = WebCore::operator==();
          uint64_t result = v5;
          if (v8) {
            return result;
          }
        }
LABEL_8:
        unsigned int v4 = (v4 + i) & v3;
        uint64_t v5 = v2 + 72 * v4;
        int v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        uint64_t result = 0;
        if (v9) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC930;
  int v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC930;
  int v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *((void *)result + 1);
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v13, v1, *((void *)result + 3));
    uint64_t v5 = v13;
    if (v13)
    {
      if (!*(unsigned char *)(v3 + 80))
      {
        uint64_t v6 = *(void *)(v3 + 32);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          if (v7)
          {
            uint64_t v8 = *(void *)(v3 + 40);
            long long v11 = *((_OWORD *)v2 + 1);
            *((void *)v2 + 2) = 0;
            *((void *)v2 + 3) = 0;
            uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v9 = &unk_1EE9CC958;
            *(void *)(v9 + 8) = v3;
            *(_OWORD *)(v9 + 16) = v11;
            uint64_t v12 = v9;
            WebKit::NetworkProcess::registrableDomainsWithLastAccessedTime(v7, v8, &v12);
            uint64_t v10 = v12;
            uint64_t v12 = 0;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
          }
        }
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9CC958;
  uint64_t v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC958;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEE4callESK_(WTF::StringImpl **result, uint64_t a2)
{
  uint64_t v2 = result;
  LOBYTE(v17) = 0;
  unsigned __int8 v18 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned int v4 = *(WTF::StringImpl ***)a2;
    *(void *)a2 = 0;
    uint64_t v17 = v4;
    int v5 = 1;
    unsigned __int8 v18 = 1;
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = (atomic_uchar *)result[2];
  if (v6)
  {
    uint64_t v7 = result[1];
    uint64_t result = (WTF::StringImpl **)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v23, v6, (uint64_t)result[3]);
    uint64_t v9 = v23;
    if (v23)
    {
      if (!*((unsigned char *)v7 + 80))
      {
        long long v10 = *((_OWORD *)v2 + 1);
        v2[2] = 0;
        v2[3] = 0;
        *(_OWORD *)uint64_t v19 = v10;
        if (v3)
        {
          WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy((uint64_t *)&v17, (uint64_t)v6, v8, (uint64_t *)&v20);
          char v11 = 1;
        }
        else
        {
          char v11 = 0;
          LOBYTE(v20) = 0;
        }
        char v21 = v11;
        uint64_t v12 = WTF::fastMalloc((WTF *)0x28);
        *(void *)uint64_t v12 = &unk_1EE9CC980;
        *(WTF::ThreadSafeWeakPtrControlBlock **)(v12 + 8) = v19[0];
        uint64_t v13 = v19[1];
        v19[0] = 0;
        v19[1] = 0;
        *(void *)(v12 + 16) = v13;
        *(unsigned char *)(v12 + 24) = 0;
        *(unsigned char *)(v12 + 32) = 0;
        if (v21)
        {
          uint64_t v14 = v20;
          int v20 = 0;
          *(void *)(v12 + 24) = v14;
          *(unsigned char *)(v12 + 32) = 1;
        }
        uint64_t v22 = v12;
        WTF::SuspendableWorkQueue::dispatch();
        uint64_t v15 = v22;
        uint64_t v22 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        if (v21 && v20) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, (WTF::StringImpl *)v6);
        }
        char v16 = (atomic_uchar *)v19[0];
        v19[0] = 0;
        if (v16) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v6);
        }
      }
      uint64_t result = (WTF::StringImpl **)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), v6);
      int v5 = v18;
    }
  }
  if (v5)
  {
    uint64_t result = v17;
    if (v17) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, (WTF::StringImpl *)v6);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEED1Ev(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC980;
  if (*(unsigned char *)(a1 + 32))
  {
    int v3 = *(WTF::StringImpl ***)(a1 + 24);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
  }
  unsigned int v4 = *(atomic_uchar **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CC980;
  if (*((unsigned char *)this + 32))
  {
    int v3 = (WTF::StringImpl **)*((void *)this + 3);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
  }
  unsigned int v4 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEE4callEv(void *result)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (atomic_uchar *)result[1];
  if (!v1) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v106, v1, result[2]);
  int v3 = v106;
  if (!v106) {
    return result;
  }
  uint64_t v107 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v108, v106);
  int v5 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v108);
  uint64_t v6 = (uint64_t)v4;
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t)v108;
  if (v108) {
    uint64_t v7 = (WTF *)((char *)v108 + 64 * (unint64_t)*((unsigned int *)v108 - 1));
  }
  uint64_t v9 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1;
  char v102 = v3;
  unint64_t v10 = 0;
  if (v7 == v5)
  {
LABEL_101:
    if (v8) {
      uint64_t v8 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v8, v4);
    }
    v3[34] = v10;
    *((unsigned char *)v3 + 280) = 1;
    *((unsigned char *)v3 + 304) = 0;
    if (!*((unsigned char *)v3 + 296)) {
      goto LABEL_184;
    }
    uint64_t v6 = v107;
    if (v10 <= v3[36])
    {
LABEL_169:
      if (!v6) {
        goto LABEL_182;
      }
      uint64_t v91 = *(unsigned int *)(v6 - 4);
      if (!v91) {
        goto LABEL_181;
      }
      uint64_t v92 = v6;
      while (1)
      {
        int v93 = *(_DWORD *)(v92 + 24);
        if (v93) {
          break;
        }
        if (*(void *)v92 != -1) {
          goto LABEL_174;
        }
LABEL_177:
        v92 += 72;
        if (!--v91) {
          goto LABEL_181;
        }
      }
      if (v93 != 1) {
        goto LABEL_180;
      }
LABEL_174:
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v92 + 56, v4);
      uint64_t v94 = *(unsigned int *)(v92 + 24);
      if (v94 != -1) {
        ((void (*)(unsigned char *, uint64_t))v9[v94])(buf, v92);
      }
      *(_DWORD *)(v92 + 24) = -1;
      goto LABEL_177;
    }
    v108 = 0;
    uint64_t v109 = 0;
    if (v107)
    {
      uint64_t v57 = *(unsigned int *)(v107 - 4);
      uint64_t v58 = v107 + 72 * v57;
      if (*(_DWORD *)(v107 - 12))
      {
        uint64_t v59 = v107;
        if (v57)
        {
          uint64_t v60 = 72 * v57;
          uint64_t v59 = v107;
          while (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket((WebCore::SecurityOriginData *)v59))
          {
            v59 += 72;
            v60 -= 72;
            if (!v60)
            {
              uint64_t v59 = v58;
              break;
            }
          }
          int v3 = v102;
        }
LABEL_116:
        if (v6) {
          uint64_t v61 = v6 + 72 * *(unsigned int *)(v6 - 4);
        }
        else {
          uint64_t v61 = 0;
        }
        if (v61 == v59)
        {
          uint64_t v75 = 0;
          int64_t v74 = 0;
        }
        else
        {
          do
          {
            buf[0] = 0;
            *(_DWORD *)double v116 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, v59);
            long long v62 = *(_OWORD *)(v59 + 32);
            uint64_t v117 = *(void *)(v59 + 48);
            *(_OWORD *)&v116[8] = v62;
            uint64_t v118 = 0;
            uint64_t v119 = 0;
            uint64_t v63 = *(void *)(v59 + 56);
            *(void *)(v59 + 56) = 0;
            uint64_t v118 = v63;
            *(void *)&long long v62 = *(void *)(v59 + 64);
            *(void *)(v59 + 64) = 0;
            uint64_t v119 = v62;
            int v64 = HIDWORD(v109);
            if (HIDWORD(v109) == v109)
            {
              unint64_t v65 = WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, (unint64_t)buf);
              int v64 = HIDWORD(v109);
              uint64_t v66 = (char *)v108 + 72 * HIDWORD(v109);
              *uint64_t v66 = 0;
              *((_DWORD *)v66 + 6) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v66, v65);
              uint64_t v68 = *(void *)(v65 + 48);
              *((_OWORD *)v66 + 2) = *(_OWORD *)(v65 + 32);
              *((void *)v66 + 7) = 0;
              *((void *)v66 + 8) = 0;
              *((void *)v66 + 6) = v68;
              uint64_t v69 = *(void *)(v65 + 56);
              *(void *)(v65 + 56) = 0;
              *((void *)v66 + 7) = v69;
              LODWORD(v69) = *(_DWORD *)(v65 + 64);
              *(_DWORD *)(v65 + 64) = 0;
              *((_DWORD *)v66 + 16) = v69;
              LODWORD(v69) = *(_DWORD *)(v65 + 68);
              *(_DWORD *)(v65 + 68) = 0;
              *((_DWORD *)v66 + 17) = v69;
            }
            else
            {
              uint64_t v70 = (char *)v108 + 72 * HIDWORD(v109);
              *uint64_t v70 = 0;
              *((_DWORD *)v70 + 6) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v70, (uint64_t)buf);
              uint64_t v71 = v117;
              *((_OWORD *)v70 + 2) = *(_OWORD *)&v116[8];
              *((void *)v70 + 7) = 0;
              *((void *)v70 + 8) = 0;
              *((void *)v70 + 6) = v71;
              uint64_t v72 = v118;
              uint64_t v118 = 0;
              *((void *)v70 + 7) = v72;
              LODWORD(v72) = v119;
              LODWORD(v119) = 0;
              *((_DWORD *)v70 + 16) = v72;
              LODWORD(v72) = HIDWORD(v119);
              HIDWORD(v119) = 0;
              *((_DWORD *)v70 + 17) = v72;
            }
            HIDWORD(v109) = v64 + 1;
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v67);
            if (*(_DWORD *)v116 != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))v9[*(unsigned int *)v116])(v111, buf);
            }
            uint64_t v73 = v59 + 72;
            uint64_t v59 = v58;
            int v3 = v102;
            if (v73 != v58)
            {
              uint64_t v59 = v73;
              while (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket((WebCore::SecurityOriginData *)v59))
              {
                v59 += 72;
                if (v59 == v58)
                {
                  uint64_t v59 = v58;
                  break;
                }
              }
            }
          }
          while (v59 != v61);
          int64_t v74 = v108;
          uint64_t v75 = (double *)((char *)v108 + 72 * HIDWORD(v109));
          if (HIDWORD(v109))
          {
            uint64_t v76 = 126 - 2 * __clz(HIDWORD(v109));
LABEL_135:
            std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>((uint64_t)v74, v75, v76, 1);
            if (HIDWORD(v109))
            {
              uint64_t v105 = 0;
              uint64_t v77 = v108;
              while (*((unsigned char *)v3 + 280) && *((unsigned char *)v3 + 296))
              {
                if (v3[34] <= (unint64_t)v3[36]) {
                  goto LABEL_158;
                }
                int v78 = HIDWORD(v109) - 1;
                uint64_t v79 = (unsigned int *)((char *)v77 + 72 * HIDWORD(v109));
                buf[0] = 0;
                *(_DWORD *)double v116 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)(v79 - 18));
                long long v80 = *(_OWORD *)(v79 - 10);
                uint64_t v117 = *((void *)v79 - 3);
                *(_OWORD *)&v116[8] = v80;
                uint64_t v81 = *((void *)v79 - 2);
                *((void *)v79 - 2) = 0;
                uint64_t v118 = v81;
                LODWORD(v81) = *(v79 - 2);
                *(v79 - 2) = 0;
                LODWORD(v119) = v81;
                LODWORD(v81) = *(v79 - 1);
                *(v79 - 1) = 0;
                HIDWORD(v119) = v81;
                WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct((uint64_t)(v79 - 18), v79);
                HIDWORD(v109) = v78;
                if (v116[8])
                {
                  int v3 = v102;
                }
                else
                {
                  int v3 = v102;
                  if (!v116[10] || !v116[9])
                  {
                    if (HIDWORD(v119))
                    {
                      uint64_t v83 = v118;
                      uint64_t v84 = 32 * HIDWORD(v119);
                      do
                      {
                        LOBYTE(v111[0]) = 0;
                        unsigned int v112 = -1;
                        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v111, (uint64_t)buf);
                        v113[0] = 0;
                        unsigned int v114 = -1;
                        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v113, v83);
                        uint64_t v85 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v102, (WebCore::SecurityOriginData *)v111);
                        uint64_t v86 = WebKit::OriginStorageManager::defaultBucket(v85);
                        WebKit::OriginStorageManager::StorageBucket::deleteData((WTF::StringImpl *)v86, (void *)0x8C0B0, -INFINITY);
                        WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v102, (const WebCore::ClientOrigin *)v111);
                        if (v114 != -1) {
                          ((void (*)(char *, unsigned char *))v9[v114])(&v110, v113);
                        }
                        unsigned int v114 = -1;
                        if (v112 != -1) {
                          ((void (*)(char *, WTF::StringImpl **))v9[v112])(&v110, v111);
                        }
                        v83 += 32;
                        v84 -= 32;
                      }
                      while (v84);
                    }
                    if (!*((unsigned char *)v102 + 280)) {
                      break;
                    }
                    v102[34] -= *(void *)&v116[16];
                    *((unsigned char *)v102 + 280) = 1;
                    ++v105;
                  }
                }
                WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v82);
                if (*(_DWORD *)v116 != -1) {
                  ((void (*)(WTF::StringImpl **, unsigned char *))v9[*(unsigned int *)v116])(v111, buf);
                }
                if (!HIDWORD(v109)) {
                  goto LABEL_158;
                }
              }
LABEL_184:
              __break(1u);
            }
            uint64_t v105 = 0;
LABEL_158:
            uint64_t v87 = qword_1EB3585F0;
            uint64_t v8 = os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT);
            if (v8)
            {
              if (!*((unsigned char *)v3 + 296)) {
                goto LABEL_184;
              }
              if (*((unsigned char *)v3 + 280)) {
                uint64_t v88 = v3[34];
              }
              else {
                uint64_t v88 = 0;
              }
              uint64_t v89 = v3[36];
              *(_DWORD *)buf = 134218752;
              *(void *)&uint8_t buf[4] = v3;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v105;
              *(_WORD *)&buf[22] = 2048;
              *(void *)double v116 = v88;
              *(_WORD *)&v116[8] = 2048;
              *(void *)&v116[10] = v89;
              _os_log_impl(&dword_1985F2000, v87, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::performEviction evicts %llu origins, current usage %llu, total quota %llu", buf, 0x2Au);
            }
            uint64_t v90 = v108;
            if (HIDWORD(v109)) {
              uint64_t v8 = WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct((uint64_t)v108, (unsigned int *)v108 + 18 * HIDWORD(v109));
            }
            if (v90) {
              uint64_t v8 = WTF::fastFree(v90, v4);
            }
            uint64_t v6 = v107;
            goto LABEL_169;
          }
        }
        uint64_t v76 = 0;
        goto LABEL_135;
      }
      uint64_t v59 = v107 + 72 * v57;
    }
    else
    {
      uint64_t v59 = 0;
      LODWORD(v57) = 0;
    }
    uint64_t v58 = v107 + 72 * v57;
    goto LABEL_116;
  }
  uint64_t v99 = v2 + 3;
  uint64_t v97 = (WTF::String *)(v3 + 20);
  uint64_t v98 = (const WTF::String **)(v3 + 22);
  uint64_t v100 = v7;
  int v101 = v2;
  while (1)
  {
    uint64_t v11 = WebKit::NetworkStorageManager::originStorageManager(v3, v5);
    unint64_t v103 = v10;
    unint64_t v104 = WebKit::OriginQuotaManager::usage(*(WebKit::OriginQuotaManager **)(v11 + 48));
    if (*((unsigned char *)v2 + 32))
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, v5);
      double v13 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v99, (WTF::ASCIICaseInsensitiveHash **)buf);
    }
    else
    {
      uint64_t v14 = WebKit::NetworkStorageManager::originStorageManager(v3, v5);
      int v15 = *((unsigned __int8 *)v3 + 305);
      double v13 = 0.0;
      if (v15 != 2)
      {
        if (v15 != 1)
        {
          if (*((unsigned char *)v3 + 305)) {
            goto LABEL_46;
          }
          WebKit::LocalStorageManager::localStorageFilePath((WTF::StringImpl *)buf, (const WTF::String *)v3[19], v5);
          double v17 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v16));
          if (!v18) {
            double v17 = 0.0;
          }
          if (v17 >= 0.0) {
            double v13 = v17;
          }
          else {
            double v13 = 0.0;
          }
          WebKit::IDBStorageManager::idbStorageOriginDirectory((WTF::StringImpl *)v111, v97, v5);
          double v21 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)v111, v19));
          if (!(_BYTE)v20) {
            double v21 = 0.0;
          }
          if (v21 >= v13) {
            double v13 = v21;
          }
          uint64_t v22 = v111[0];
          v111[0] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v20);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v23 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v20);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        WebKit::CacheStorageManager::cacheStorageOriginDirectory(v98, v5, buf);
        double v26 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v24));
        if (!(_BYTE)v25) {
          double v26 = 0.0;
        }
        if (v26 >= v13) {
          double v13 = v26;
        }
        uint64_t v27 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v25);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      WebKit::originFilePath((WTF::StringImpl *)buf, *(const WTF::String **)(v14 + 16));
      double v29 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v28));
      if (!(_BYTE)v12) {
        double v29 = 0.0;
      }
      if (v29 >= v13) {
        double v13 = v29;
      }
    }
    uint64_t v30 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v12);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
LABEL_46:
    uint64_t v31 = v9;
    uint64_t v32 = v107;
    if (v107
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(&v107, 0), (uint64_t v32 = v107) != 0))
    {
      int v33 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      int v33 = 0;
    }
    *(_DWORD *)buf = -1640531527;
    *(_WORD *)&uint8_t buf[4] = 0;
    buf[6] = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(buf, (uint64_t)v5);
    unsigned int v34 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v33;
    uint64_t v35 = (unsigned int *)(v32 + 72 * v34);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v35);
    if ((v36 & 1) == 0) {
      break;
    }
LABEL_62:
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v35, (uint64_t)v5);
    *(_WORD *)buf = 0;
    uint8_t buf[2] = 0;
    *(_OWORD *)&uint8_t buf[8] = 0u;
    *(_OWORD *)double v116 = 0u;
    *((_OWORD *)v35 + 2) = *(_OWORD *)buf;
    *((void *)v35 + 6) = *(void *)&buf[16];
    uint64_t v42 = v35[17];
    BOOL v43 = (unsigned int *)*((void *)v35 + 7);
    if (v42)
    {
      uint64_t v44 = 32 * v42;
      do
      {
        uint64_t v45 = v43[6];
        if (v45 != -1) {
          ((void (*)(WTF::StringImpl **, unsigned int *))v31[v45])(v111, v43);
        }
        v43[6] = -1;
        v43 += 8;
        v44 -= 32;
      }
      while (v44);
      BOOL v43 = (unsigned int *)*((void *)v35 + 7);
    }
    if (v43)
    {
      *((void *)v35 + 7) = 0;
      v35[16] = 0;
      WTF::fastFree((WTF *)v43, v41);
    }
    *((void *)v35 + 7) = *(void *)v116;
    uint64_t v46 = *(void *)&v116[8];
    *(void *)double v116 = 0;
    *(void *)&v116[8] = 0;
    *((void *)v35 + 8) = v46;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v116, v41);
    uint64_t v47 = v107;
    if (v107) {
      int v48 = *(_DWORD *)(v107 - 12) + 1;
    }
    else {
      int v48 = 1;
    }
    *(_DWORD *)(v107 - 12) = v48;
    uint64_t v49 = (*(_DWORD *)(v47 - 16) + v48);
    unint64_t v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49) {
        goto LABEL_76;
      }
LABEL_75:
      uint64_t v35 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(&v107, (uint64_t)v35);
      goto LABEL_76;
    }
    if (3 * v50 <= 4 * v49) {
      goto LABEL_75;
    }
LABEL_76:
    *((void *)v35 + 5) += v104;
    if (*((double *)v35 + 6) < v13) {
      *((double *)v35 + 6) = v13;
    }
    unint64_t v51 = (unint64_t)v5 + 32;
    uint64_t v52 = v35[17];
    uint64_t v9 = v31;
    int v3 = v102;
    if (v52 == v35[16])
    {
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>((uint64_t)(v35 + 14), v51);
    }
    else
    {
      uint64_t v53 = *((void *)v35 + 7) + 32 * v52;
      *(unsigned char *)uint64_t v53 = 0;
      *(_DWORD *)(v53 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v53, v51);
      ++v35[17];
    }
    if ((WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v102, v5) & 1) == 0) {
      *((unsigned char *)v35 + 32) = 1;
    }
    if (!*((unsigned char *)v35 + 34))
    {
      buf[0] = 0;
      *(_DWORD *)double v116 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v5);
      v116[8] = 0;
      LODWORD(v118) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v116[8], (uint64_t)v5);
      int v54 = WebKit::NetworkStorageManager::persistedInternal((WebKit::NetworkStorageManager *)v102, (const WebCore::ClientOrigin *)buf);
      if (v118 != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))v31[v118])(v111, &v116[8]);
      }
      LODWORD(v118) = -1;
      if (*(_DWORD *)v116 != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))v31[*(unsigned int *)v116])(v111, buf);
      }
      if (v54) {
        *(_WORD *)((char *)v35 + 33) = 257;
      }
    }
    int v5 = (WebCore::SecurityOriginData *)((char *)v5 + 64);
    if (v5 == (WebCore::SecurityOriginData *)v6)
    {
      int v5 = (WebCore::SecurityOriginData *)v6;
      uint64_t v55 = v100;
      uint64_t v2 = v101;
      unint64_t v56 = v103;
    }
    else
    {
      uint64_t v55 = v100;
      uint64_t v2 = v101;
      unint64_t v56 = v103;
      while (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v5))
      {
        int v5 = (WebCore::SecurityOriginData *)((char *)v5 + 64);
        if (v5 == (WebCore::SecurityOriginData *)v6)
        {
          int v5 = (WebCore::SecurityOriginData *)v6;
          break;
        }
      }
    }
    unint64_t v10 = v104 + v56;
    if (v5 == v55)
    {
      uint64_t v8 = (uint64_t)v108;
      goto LABEL_101;
    }
  }
  uint64_t v37 = 0;
  int v38 = 1;
  while (1)
  {
    unsigned int v39 = v35[6];
    if (v39) {
      break;
    }
    if (*(void *)v35 != -1) {
      goto LABEL_53;
    }
    uint64_t v37 = v35;
LABEL_56:
    unsigned int v34 = (v34 + v38) & v33;
    uint64_t v35 = (unsigned int *)(v32 + 72 * v34);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v35);
    ++v38;
    if (v40)
    {
      if (v37)
      {
        *((void *)v37 + 8) = 0;
        *((_OWORD *)v37 + 2) = 0u;
        *((_OWORD *)v37 + 3) = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        *((_OWORD *)v37 + 1) = 0u;
        --*(_DWORD *)(v107 - 16);
        uint64_t v35 = v37;
      }
      goto LABEL_62;
    }
  }
  if (v39 == 1)
  {
LABEL_53:
    if (WebCore::operator==()) {
      goto LABEL_76;
    }
    goto LABEL_56;
  }
LABEL_180:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_181:
  uint64_t v8 = WTF::fastFree((WTF *)(v6 - 16), v4);
LABEL_182:
  WTF::RunLoop::main((WTF::RunLoop *)v8);
  uint64_t v95 = v106;
  uint64_t v96 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v96 = &unk_1EE9CC9A8;
  v96[1] = v95;
  *(void *)buf = v96;
  WTF::RunLoop::dispatch();
  uint64_t result = *(void **)buf;
  *(void *)buf = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_ENUlvE_clEvEUlvE_vJEED1Ev(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9CC9A8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_ENUlvE_clEvEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CC9A8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

double WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  double v3 = 0.0;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v2 - 8);
    uint64_t v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
    uint64_t v7 = (WTF **)(v2 + 16 * v6);
    if ((WTF::equal(*v7, 0, v8) & 1) == 0)
    {
      int v10 = 1;
      while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
      {
        uint64_t v6 = (v6 + v10) & v5;
        uint64_t v7 = (WTF **)(v2 + 16 * v6);
        ++v10;
        if (WTF::equal(*v7, 0, v9)) {
          return v3;
        }
      }
      return *(double *)(v2 + 16 * v6 + 8);
    }
  }
  return v3;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 72 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = v2 + 72 * v10;
      int v14 = *(_DWORD *)(v13 + 24);
      if (v14) {
        break;
      }
      if (*(void *)v13 != -1) {
        goto LABEL_12;
      }
LABEL_27:
      if (++v10 == v12) {
        goto LABEL_32;
      }
    }
    if (v14 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_31;
    }
LABEL_12:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 72 * v10));
    if (v16)
    {
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72 * v10 + 56, v15);
      uint64_t v17 = *(unsigned int *)(v13 + 24);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v17])(&v40, v2 + 72 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      unsigned int v39 = v11;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      int v43 = -1640531527;
      __int16 v44 = 0;
      char v45 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v43, v2 + 72 * v10);
      unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v43);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        uint64_t v11 = (unsigned int *)(v18 + 72 * (v20 & v19));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v11);
        int v25 = v24;
        unsigned int v20 = ++v21 + v22;
      }
      while (!v25);
      double v26 = (void *)(v18 + 72 * v22 + 56);
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v23);
      uint64_t v27 = v11[6];
      if (v27 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v41, v18 + 72 * v22);
      }
      *(unsigned char *)uint64_t v11 = 0;
      v11[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18 + 72 * v22, v2 + 72 * v10);
      uint64_t v28 = v18 + 72 * v22;
      uint64_t v29 = v2 + 72 * v10;
      long long v30 = *(_OWORD *)(v29 + 32);
      *(void *)(v28 + 48) = *(void *)(v29 + 48);
      *(_OWORD *)(v28 + 32) = v30;
      void *v26 = 0;
      *(void *)(v28 + 64) = 0;
      uint64_t v31 = *(void *)(v29 + 56);
      v29 += 56;
      *(void *)uint64_t v29 = 0;
      void *v26 = v31;
      int v32 = *(_DWORD *)(v29 + 8);
      *(_DWORD *)(v29 + 8) = 0;
      *(_DWORD *)(v28 + 64) = v32;
      int v33 = *(_DWORD *)(v29 + 12);
      *(_DWORD *)(v29 + 12) = 0;
      *(_DWORD *)(v28 + 68) = v33;
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v34);
      uint64_t v35 = *(unsigned int *)(v13 + 24);
      if (v35 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v42, v2 + 72 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
      if (v13 != a2) {
        uint64_t v11 = v39;
      }
    }
    goto LABEL_27;
  }
LABEL_31:
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_32:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct(uint64_t result, unsigned int *a2)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    unsigned int v5 = (unsigned int *)result;
    do
    {
      uint64_t result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 14), a2);
      uint64_t v6 = v5[6];
      if (v6 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v6])(&v7, v5);
      }
      v5[6] = -1;
      v5 += 18;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 72 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(72 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        uint64_t v8 = 72 * v4;
        uint64_t v9 = (uint64_t)v3 + 56;
        do
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v7, v9 - 56);
          uint64_t v10 = *(void *)(v9 - 8);
          *(_OWORD *)(v7 + 32) = *(_OWORD *)(v9 - 24);
          *(void *)(v7 + 56) = 0;
          *(void *)(v7 + 64) = 0;
          *(void *)(v7 + 48) = v10;
          uint64_t v11 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)(v7 + 56) = v11;
          LODWORD(v11) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 64) = v11;
          LODWORD(v11) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 68) = v11;
          uint64_t result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v12);
          uint64_t v13 = *(unsigned int *)(v9 - 32);
          if (v13 != -1) {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v13])(&v14, v9 - 56);
          }
          *(_DWORD *)(v9 - 32) = -1;
          v9 += 72;
          v7 += 72;
          v8 -= 72;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CC9D0;
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v2])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC9D0;
  uint64_t v3 = *((unsigned int *)this + 18);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v4 = *((unsigned int *)this + 10);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v7, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 80);
  v6[0] = a1 + 8;
  v6[1] = a1 + 16;
  uint64_t v6[2] = &v7;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(v5, (uint64_t)v6);
}

void IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(uint64_t a1, uint64_t a2)
{
  IPC::Connection::connection(a1, &v29);
  uint64_t v3 = (uint64_t)v29;
  if (v29)
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 332;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    long long v30 = v4;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v4, *(void *)(a2 + 8));
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)(a2 + 16));
    uint64_t v5 = *(void *)(a2 + 24);
    char v6 = (void *)IPC::Encoder::grow(v4, 8uLL, 8);
    if (v7 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198CB0400);
    }
    *char v6 = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = (void *)IPC::Encoder::grow(v4, 8uLL, 8);
    if (v10 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198CB0420);
    }
    void *v9 = v8;
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = (void *)IPC::Encoder::grow(v4, 8uLL, 8);
    if (v13 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198CB0440);
    }
    *uint64_t v12 = v11;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v30, 0, 0);
    int v15 = v30;
    long long v30 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v26, v27);
    }
    int v16 = v29;
    uint64_t v29 = 0;
    if (v16)
    {
      char v17 = 0;
      atomic_uchar *volatile v18 = *v16;
      atomic_compare_exchange_strong_explicit(*v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
      if (v17) {
        MEMORY[0x19972E8D0](v18);
      }
      uint64_t v19 = *((void *)v18 + 1);
      uint64_t v20 = v19 - 1;
      *((void *)v18 + 1) = v19 - 1;
      if (v19 == 1)
      {
        uint64_t v28 = *((void *)v18 + 2);
        uint64_t v22 = *((void *)v18 + 3);
        *((void *)v18 + 3) = 0;
        BOOL v21 = v28 == 0;
      }
      else
      {
        BOOL v21 = 0;
        uint64_t v22 = 0;
      }
      int v23 = 1;
      atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
      if (v23 == 1)
      {
        if (v20) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
        if (v20) {
          return;
        }
      }
      uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v24 = &unk_1EE9B37E8;
      *(void *)(v24 + 8) = v18;
      *(void *)(v24 + 16) = v22;
      *(unsigned char *)(v24 + 24) = v21;
      long long v30 = (IPC::Encoder *)v24;
      WTF::ensureOnMainRunLoop();
      int v25 = v30;
      long long v30 = 0;
      if (v25) {
        (*(void (**)(IPC::Encoder *))(*(void *)v25 + 8))(v25);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CC9F8;
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v7, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v5 = *(atomic_uchar **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CC9F8;
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v7, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF::WallTime *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::call(WTF::WallTime *result, uint64_t a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)result + 1);
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = (WTF::WallTime *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v67, v3, *((void *)result + 2));
  uint64_t v5 = v67;
  if (!v67) {
    return result;
  }
  uint64_t v6 = (uint64_t)v4 + 24;
  WTF::WallTime::now(result);
  double v8 = v7;
  uint64_t v9 = (uint64_t *)(v5 + 376);
  uint64_t v10 = *(void *)(v5 + 376);
  uint64_t v65 = v5;
  uint64_t v66 = (uint64_t *)(v5 + 376);
  if (!v10)
  {
LABEL_11:
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v9, 0);
    uint64_t v16 = *v9;
    if (!*v9)
    {
      unsigned int v18 = 0;
      goto LABEL_23;
    }
LABEL_12:
    unsigned int v18 = *(_DWORD *)(v16 - 8);
LABEL_23:
    uint64_t v13 = (uint64_t)v4 + 56;
    uint64_t v20 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)v4 + 24) & v18;
    uint64_t v21 = v16 + 72 * v20;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v9 = v66;
      goto LABEL_38;
    }
    uint64_t v22 = 0;
    uint64_t v5 = 1;
    while (1)
    {
      int v23 = *(_DWORD *)(v21 + 24);
      if (v23) {
        break;
      }
      if (*(void *)v21 != -1) {
        goto LABEL_28;
      }
      uint64_t v22 = v21;
LABEL_32:
      uint64_t v20 = (v20 + v5) & v18;
      uint64_t v21 = v16 + 72 * v20;
      uint64_t v5 = (v5 + 1);
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        uint64_t v5 = v65;
        uint64_t v9 = v66;
        if (v22)
        {
          *(void *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 32) = 0u;
          *(_OWORD *)(v22 + 48) = 0u;
          *(_OWORD *)uint64_t v22 = 0u;
          *(_OWORD *)(v22 + 16) = 0u;
          --*(_DWORD *)(*v66 - 16);
          uint64_t v21 = v22;
        }
LABEL_38:
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v21, v6);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v21 + 32, v13);
        *(double *)(v21 + 64) = v8;
        uint64_t v24 = *v9;
        if (*v9) {
          int v25 = *(_DWORD *)(v24 - 12) + 1;
        }
        else {
          int v25 = 1;
        }
        *(_DWORD *)(v24 - 12) = v25;
        uint64_t v26 = *v9;
        if (*v9) {
          int v27 = *(_DWORD *)(v26 - 12);
        }
        else {
          int v27 = 0;
        }
        uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
        unint64_t v29 = *(unsigned int *)(v26 - 4);
        if (v29 > 0x400)
        {
          if (v29 <= 2 * v28) {
LABEL_46:
          }
            WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v9, v21);
        }
        else if (3 * v29 <= 4 * v28)
        {
          goto LABEL_46;
        }
LABEL_47:
        uint64_t v30 = *v9;
        if (*v9)
        {
          int v31 = *(_DWORD *)(v30 - 4);
          if (v31)
          {
            LODWORD(v13) = 0;
            unsigned int v32 = v31 - 1;
            while (1)
            {
              uint64_t v33 = v32;
              uint64_t v34 = v30 + 72 * v32;
              if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
              {
                uint64_t v35 = *(unsigned int *)(v34 + 24);
                if (v35)
                {
                  if (v35 != 1) {
                    goto LABEL_63;
                  }
                }
                else if (*(void *)v34 == -1)
                {
                  goto LABEL_60;
                }
                if (v8 - *(double *)(v30 + 72 * v32 + 64) > 30.0)
                {
                  uint64_t v36 = *(unsigned int *)(v34 + 56);
                  if (v36 != -1)
                  {
                    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v36])(&v68, v34 + 32);
                    uint64_t v35 = *(unsigned int *)(v34 + 24);
                    *(_DWORD *)(v34 + 56) = -1;
                    if (v35 != -1) {
LABEL_58:
                    }
                      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v68, v30 + 72 * v32);
                    *(void *)uint64_t v34 = -1;
                    *(void *)(v34 + 8) = 0;
                    *(_DWORD *)(v34 + 16) = 0;
                    LODWORD(v13) = v13 + 1;
                    *(_DWORD *)(v34 + 24) = 0;
                    goto LABEL_60;
                  }
                  *(_DWORD *)(v34 + 56) = -1;
                  goto LABEL_58;
                }
              }
LABEL_60:
              --v32;
              if (!v33) {
                goto LABEL_64;
              }
            }
          }
        }
LABEL_91:
        uint64_t v14 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(void *)(v5 + 88), v6);
        unint64_t v50 = *(WebKit::OriginStorageManager **)(v14 + 64);
        unint64_t v51 = (const WTF::String *)*((void *)v50 + 2);
        if (v51)
        {
          *(_DWORD *)v51 += 2;
          WebKit::originFilePath((WTF::StringImpl *)&v68, v51);
          WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v68, v52);
          uint64_t v14 = (uint64_t)v68;
          uint64_t v68 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          if (*(unsigned __int8 *)(v5 + 305) <= 1u)
          {
            uint64_t v53 = WebKit::OriginStorageManager::defaultBucket(v50);
            WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v53, 0x8000, &v68);
            WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v68, v54);
            uint64_t v14 = (uint64_t)v68;
            uint64_t v68 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
            if (!*(unsigned char *)(v5 + 305))
            {
              uint64_t v55 = WebKit::OriginStorageManager::defaultBucket(v50);
              WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v55, 128, &v68);
              WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v68, v56);
              uint64_t v14 = (uint64_t)v68;
              uint64_t v68 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2) {
                  uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
                }
                else {
                  *(_DWORD *)v14 -= 2;
                }
              }
            }
          }
          if (*(_DWORD *)v51 == 2) {
            uint64_t v14 = WTF::StringImpl::destroy(v51, v15);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        goto LABEL_109;
      }
    }
    if (v23 != 1) {
      goto LABEL_63;
    }
LABEL_28:
    if (WebCore::operator==() && WebCore::operator==())
    {
      *(double *)(v16 + 72 * v20 + 64) = v8;
      uint64_t v5 = v65;
      uint64_t v9 = v66;
      goto LABEL_47;
    }
    goto LABEL_32;
  }
  int v11 = *(_DWORD *)(v10 - 8);
  unsigned int v12 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)v4 + 24) & v11;
  uint64_t v13 = v10 + 72 * v12;
  uint64_t v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
  if (v14)
  {
LABEL_6:
    uint64_t v5 = v65;
    uint64_t v9 = v66;
    uint64_t v16 = *v66;
    if (*v66)
    {
      unsigned int v17 = *(_DWORD *)(v16 - 4);
      uint64_t v13 = v16 + 72 * v17;
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  uint64_t v5 = 1;
  while (1)
  {
    int v19 = *(_DWORD *)(v13 + 24);
    if (v19) {
      break;
    }
    if (*(void *)v13 != -1) {
      goto LABEL_16;
    }
LABEL_18:
    unsigned int v12 = (v12 + v5) & v11;
    uint64_t v13 = v10 + 72 * v12;
    uint64_t v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    uint64_t v5 = (v5 + 1);
    if (v14) {
      goto LABEL_6;
    }
  }
  if (v19 != 1)
  {
LABEL_63:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_64:
    uint64_t v37 = *v66;
    if (v13)
    {
      *(_DWORD *)(v37 - 16) += v13;
      uint64_t v38 = *v66;
      if (*v66) {
        int v39 = *(_DWORD *)(v38 - 12);
      }
      else {
        int v39 = 0;
      }
      *(_DWORD *)(v38 - 12) = v39 - v13;
      uint64_t v37 = *v66;
    }
    if (!v37) {
      goto LABEL_91;
    }
    unsigned int v40 = *(_DWORD *)(v37 - 4);
    uint64_t v41 = *(unsigned int *)(v37 - 12);
    if (v40 < 9 || 6 * (int)v41 >= v40) {
      goto LABEL_91;
    }
    unsigned int v43 = (v41 - 1) | ((v41 - 1) >> 1) | (((v41 - 1) | ((v41 - 1) >> 1)) >> 2);
    unsigned int v44 = v43 | (v43 >> 4) | ((v43 | (v43 >> 4)) >> 8);
    unint64_t v45 = (v44 | HIWORD(v44)) + 1;
    if (v45 > 0x400)
    {
      if (v45 > 2 * v41) {
        goto LABEL_84;
      }
    }
    else if (3 * v45 > 4 * v41)
    {
LABEL_79:
      double v46 = (double)v41;
      double v47 = (double)v45;
      double v48 = 0.604166667;
LABEL_85:
      if (v47 * v48 <= v46) {
        LODWORD(v45) = 2 * v45;
      }
      if (v45 <= 8) {
        unsigned int v49 = 8;
      }
      else {
        unsigned int v49 = v45;
      }
      WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v66, v49, 0);
      goto LABEL_91;
    }
    LODWORD(v45) = 2 * v45;
    if (v45 <= 0x400) {
      goto LABEL_79;
    }
LABEL_84:
    double v46 = (double)v41;
    double v47 = (double)v45;
    double v48 = 0.416666667;
    goto LABEL_85;
  }
LABEL_16:
  if (!WebCore::operator==()) {
    goto LABEL_18;
  }
  uint64_t v14 = WebCore::operator==();
  if ((v14 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v9 = v66;
  uint64_t v16 = *v66;
  if (!*v66)
  {
    uint64_t v5 = v65;
    goto LABEL_9;
  }
  unsigned int v17 = *(_DWORD *)(v16 - 4);
  uint64_t v5 = v65;
LABEL_8:
  if (v16 + 72 * v17 == v13) {
    goto LABEL_12;
  }
LABEL_9:
  if (v8 - *(double *)(v13 + 64) > 30.0)
  {
    *(double *)(v13 + 64) = v8;
    goto LABEL_47;
  }
LABEL_109:
  if (!*(unsigned char *)(v5 + 232)) {
    goto LABEL_122;
  }
  if (*(unsigned char *)(v5 + 296)) {
    goto LABEL_115;
  }
  if (*(unsigned char *)(v5 + 264))
  {
    double v57 = *(double *)(v5 + 224) * (double)*(unint64_t *)(v5 + 256);
    goto LABEL_113;
  }
  uint64_t v14 = WTF::FileSystemImpl::volumeCapacity((WTF::FileSystemImpl *)(v5 + 56), v15);
  if (!v64) {
    goto LABEL_122;
  }
  if (!*(unsigned char *)(v5 + 232))
  {
    __break(1u);
    goto LABEL_129;
  }
  double v57 = *(double *)(v5 + 224) * (double)((v14 + 0x3FFFFFFF) & 0xFFFFFFFFC0000000);
  if (!*(unsigned char *)(v5 + 296)) {
LABEL_113:
  }
    *(unsigned char *)(v5 + 296) = 1;
  *(void *)(v5 + 288) = (unint64_t)v57;
LABEL_115:
  if (*(unsigned char *)(v5 + 280))
  {
    unint64_t v58 = *(void *)(v5 + 272) + a2;
    *(void *)(v5 + 272) = v58;
    *(unsigned char *)(v5 + 280) = 1;
    if (v58 <= *(void *)(v5 + 288)) {
      goto LABEL_122;
    }
  }
  if (*(unsigned char *)(v5 + 304)) {
    goto LABEL_122;
  }
  *(unsigned char *)(v5 + 304) = 1;
  WTF::RunLoop::main((WTF::RunLoop *)v14);
  uint64_t v59 = *(atomic_uchar **)(v5 + 16);
  if (!v59)
  {
LABEL_129:
    uint64_t v60 = 0;
    goto LABEL_120;
  }
  uint64_t v60 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v59);
LABEL_120:
  uint64_t v61 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v61 = &unk_1EE9CC930;
  *((void *)v61 + 1) = v5;
  *((void *)v61 + 2) = v60;
  *((void *)v61 + 3) = v5;
  uint64_t v68 = v61;
  WTF::RunLoop::dispatch();
  uint64_t v14 = (uint64_t)v68;
  uint64_t v68 = 0;
  if (v14) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
LABEL_122:
  WTF::RunLoop::main((WTF::RunLoop *)v14);
  uint64_t v62 = v67;
  uint64_t v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v63 = &unk_1EE9CCA20;
  *((void *)v63 + 1) = v62;
  uint64_t v68 = v63;
  WTF::RunLoop::dispatch();
  uint64_t result = v68;
  uint64_t v68 = 0;
  if (result) {
    return (WTF::WallTime *)(*(uint64_t (**)(WTF::WallTime *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::operator() const(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9CCA20;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::operator() const(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CCA20;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

WebKit::OriginStorageManager *WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>::translate<WebCore::ClientOrigin const&,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>(uint64_t a1, uint64_t a2, WebCore::SecurityOriginData **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 32, a2 + 32);
  WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0::operator()((uint64_t *)&v8, a3);
  uint64_t v6 = v8;

  return std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(a1 + 64), v6);
}

WTF::StringImpl *WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0::operator()(uint64_t *a1, WebCore::SecurityOriginData **a2)
{
  v18[9] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  WebKit::originDirectoryPath((WTF::StringImpl *)&v16, (uint64_t)*a2 + 56, a2[1], *((void *)*a2 + 9));
  WebKit::LocalStorageManager::localStorageFilePath((WTF::StringImpl *)&v15, *((const WTF::String **)v4 + 19), a2[1]);
  WebKit::IDBStorageManager::idbStorageOriginDirectory((WTF::StringImpl *)&v14, (WebCore::SecurityOriginData *)((char *)v4 + 160), a2[1]);
  WebKit::CacheStorageManager::cacheStorageOriginDirectory((const WTF::String **)v4 + 22, a2[1], &v13);
  WebKit::CacheStorageManager::copySaltFileToOriginDirectory((const WTF::String **)v4 + 22, (const WTF::String *)&v13, v5);
  uint64_t v17 = *((void *)v4 + 5);
  WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)v18, a2[1]);
  v18[8] = *((void *)v4 + 39);
  _ZN3WTF8FunctionIFvNS_23ObjectIdentifierGenericIN6WebKit34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyyyEEC1IZZNS2_21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENSB_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vEEOSI_(&v12, &v17);
  WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0::~$_0((uint64_t)&v17);
  WebKit::NetworkStorageManager::originQuotaManagerParameters((WebKit::NetworkStorageManager *)&v17, v4, a2[1]);
  std::make_unique[abi:sn180100]<WebKit::OriginStorageManager,WebKit::OriginQuotaManager::Parameters,WTF::String,WTF::String,WTF::String,WTF::String,WebKit::UnifiedOriginStorageLevel &>(a1, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v13, (unsigned __int8 *)v4 + 305);
  WebKit::OriginQuotaManager::Parameters::~Parameters((WebKit::OriginQuotaManager::Parameters *)&v17);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  double v8 = v13;
  uint64_t v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v6);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v15;
  int v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v6);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *_ZN3WTF8FunctionIFvNS_23ObjectIdentifierGenericIN6WebKit34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyyyEEC1IZZNS2_21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENSB_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vEEOSI_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9CCA48;
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 16, (uint64_t)(a2 + 1));
  *(unsigned char *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 48, (uint64_t)(a2 + 5));
  *(void *)(v4 + 80) = a2[9];
  *a1 = v4;
  return a1;
}

void WebKit::OriginQuotaManager::Parameters::~Parameters(WebKit::OriginQuotaManager::Parameters *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyyyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CCA48;
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v2])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyyyEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCA48;
  uint64_t v3 = *((unsigned int *)this + 18);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v4 = *((unsigned int *)this + 10);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v7, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyyyEE4callESK_yyy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 80);
  v6[0] = a1 + 8;
  v6[1] = a1 + 16;
  uint64_t v6[2] = &v7;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(v5, (uint64_t)v6);
}

uint64_t std::make_unique[abi:sn180100]<WebKit::OriginStorageManager,WebKit::OriginQuotaManager::Parameters,WTF::String,WTF::String,WTF::String,WTF::String,WebKit::UnifiedOriginStorageLevel &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v14 = WTF::fastMalloc((WTF *)0x50);
  uint64_t result = WebKit::OriginStorageManager::OriginStorageManager(v14, a2, a3, a4, a5, a6, *a7);
  *a1 = result;
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  uint64_t v6 = v2 + 72 * v5;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
  {
LABEL_3:
    if (*a1) {
      return *a1 + 72 * *(unsigned int *)(*a1 - 4);
    }
    return 0;
  }
  int v8 = 1;
  while (1)
  {
    int v9 = *(_DWORD *)(v6 + 24);
    if (v9) {
      break;
    }
    if (*(void *)v6 != -1) {
      goto LABEL_10;
    }
LABEL_11:
    unsigned int v5 = (v5 + v8) & v4;
    uint64_t v6 = v2 + 72 * v5;
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_3;
    }
  }
  if (v9 == 1)
  {
LABEL_10:
    if (WebCore::operator==()) {
      return v6;
    }
    goto LABEL_11;
  }
  uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v10);
}

void WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

void WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 72 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = v4 + 72 * v11;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_10;
      }
LABEL_31:
      if (++v11 == v13) {
        goto LABEL_36;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_35;
    }
LABEL_10:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v16 = *(unsigned int *)(v14 + 56);
      if (v16 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v16])(&v31, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v17 = *(unsigned int *)(v14 + 24);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v17])(&v32, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      uint64_t v30 = v12;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      unsigned int v20 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        uint64_t v12 = v18 + 72 * (v20 & v19);
        int v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        unsigned int v20 = ++v21 + v22;
      }
      while (!v23);
      uint64_t v24 = *(unsigned int *)(v12 + 56);
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v24])(&v33, v12 + 32);
      }
      *(_DWORD *)(v12 + 56) = -1;
      uint64_t v25 = *(unsigned int *)(v12 + 24);
      if (v25 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v25])(&v34, v18 + 72 * v22);
      }
      *(unsigned char *)uint64_t v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18 + 72 * v22, v4 + 72 * v11);
      *(unsigned char *)(v12 + 32) = 0;
      *(_DWORD *)(v12 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v12 + 32, v14 + 32);
      *(void *)(v18 + 72 * v22 + 64) = *(void *)(v4 + 72 * v11 + 64);
      uint64_t v26 = *(unsigned int *)(v14 + 56);
      if (v26 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v26])(&v35, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v27 = *(unsigned int *)(v14 + 24);
      uint64_t v13 = v5;
      if (v27 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v36, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
      if (v14 != a3) {
        uint64_t v12 = v30;
      }
    }
    goto LABEL_31;
  }
LABEL_35:
  if (v4) {
LABEL_36:
  }
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CCA70;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CCA70;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::call(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)result + 1);
  if (v3)
  {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v7, v3, *((void *)result + 2));
    uint64_t v4 = v7;
    if (v7)
    {
      WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(v7, a2);
      int v6 = *(atomic_uchar **)(v4 + 16);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v6, v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CCA98;
  uint64_t v3 = (WTF::StringImpl **)a1[4];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CCA98;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *((void *)result + 1);
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v20, v1, *((void *)result + 3));
    uint64_t v5 = v20;
    if (v20)
    {
      if (*(unsigned char *)(v3 + 352))
      {
        uint64_t v6 = *((void *)v2 + 4);
        *((void *)v2 + 4) = 0;
        uint64_t v7 = *(WTF::StringImpl ***)(v3 + 344);
        *(void *)(v3 + 344) = v6;
        if (v7) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
        }
      }
      else
      {
        *(void *)(v3 + 344) = 0;
        uint64_t v8 = *((void *)v2 + 4);
        *((void *)v2 + 4) = 0;
        *(void *)(v3 + 344) = v8;
        *(unsigned char *)(v3 + 352) = 1;
      }
      uint64_t v9 = *(const WebCore::ClientOrigin **)(v3 + 328);
      uint64_t v17 = v9;
      unsigned int v10 = *(_DWORD *)(v3 + 340);
      int v18 = *(_DWORD *)(v3 + 336);
      unsigned int v19 = v10;
      v16[0] = 0;
      *(void *)(v3 + 328) = 0;
      v16[1] = 0;
      *(void *)(v3 + 336) = 0;
      WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v4);
      if (v10)
      {
        uint64_t v12 = (const WebCore::ClientOrigin *)((char *)v9 + 72 * v10);
        do
        {
          uint64_t v13 = WebKit::NetworkStorageManager::persistOrigin((WebKit::NetworkStorageManager *)v3, v9);
          uint64_t v14 = *((void *)v9 + 8);
          *((void *)v9 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v13);
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          uint64_t v9 = (const WebCore::ClientOrigin *)((char *)v9 + 72);
        }
        while (v9 != v12);
      }
      WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v11);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v15);
    }
  }
  return result;
}

uint64_t std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v4;
  return a1;
}

unint64_t WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = result[3];
      int v5 = 72 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(72 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = (uint64_t)result;
        uint64_t v8 = 72 * v4;
        unint64_t v9 = (char *)v3 + 32;
        do
        {
          std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](v7, (uint64_t)(v9 - 32));
          uint64_t result = (unsigned int *)*((void *)v9 + 4);
          *((void *)v9 + 4) = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          uint64_t v10 = *((unsigned int *)v9 + 6);
          if (v10 != -1) {
            uint64_t result = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v10])(&v12, v9);
          }
          *((_DWORD *)v9 + 6) = -1;
          uint64_t v11 = *((unsigned int *)v9 - 2);
          if (v11 != -1) {
            uint64_t result = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v11])(&v13, v9 - 32);
          }
          *((_DWORD *)v9 - 2) = -1;
          v7 += 72;
          v9 += 72;
          v8 -= 72;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CCAC0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CCAC0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 1);
  if (v1)
  {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v11, v1, *((void *)result + 2));
    uint64_t v2 = v11;
    if (v11)
    {
      uint64_t v3 = v11[4];
      if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
      {
        uint64_t v5 = v11[5];
        uint64_t v6 = (atomic_uchar *)v11[2];
        if (v6) {
          uint64_t v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v8 = &unk_1EE9CCA70;
        *(void *)(v8 + 8) = v7;
        *(void *)(v8 + 16) = v2;
        char v12 = (WTF::StringImpl **)v8;
        WebKit::NetworkProcess::registrableDomainsExemptFromWebsiteDataDeletion(v4, v5, (uint64_t *)&v12);
        uint64_t v10 = v12;
        char v12 = 0;
        if (v10) {
          (*((void (**)(WTF::StringImpl **))*v10 + 1))(v10);
        }
      }
      else
      {
        char v12 = 0;
        WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist((uint64_t)v11, (uint64_t *)&v12);
        if (v12) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
        }
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>((atomic_uchar *)v2[2], v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCAE8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCAE8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v13, v2);
  uint64_t v4 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v13);
  uint64_t v5 = v3;
  uint64_t v6 = v13;
  if (v13) {
    uint64_t v7 = (WTF::RunLoop *)((char *)v13 + 64 * (unint64_t)*((unsigned int *)v13 - 1));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v4)
  {
    do
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v12, (const WebCore::ClientOrigin *)v2, v4);
      uint64_t v8 = v12;
      if (!v12) {
        goto LABEL_12;
      }
      if (*((_DWORD *)v12 + 1))
      {
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v12, v3);
        uint64_t v8 = v12;
        char v12 = 0;
        if (!v8) {
          goto LABEL_12;
        }
      }
      else
      {
        char v12 = 0;
      }
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v3);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
LABEL_12:
      while (1)
      {
        uint64_t v4 = (WebCore::SecurityOriginData *)((char *)v4 + 64);
        if (v4 == v5) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v4)) {
          goto LABEL_16;
        }
      }
      uint64_t v4 = v5;
LABEL_16:
      ;
    }
    while (v4 != v7);
    uint64_t v6 = v13;
  }
  if (v6) {
    uint64_t v6 = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)v6, v3);
  }
  WTF::RunLoop::main(v6);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v9 = &unk_1EE9CCB10;
  *(_OWORD *)(v9 + 8) = v11;
  char v13 = (WTF::RunLoop *)v9;
  WTF::RunLoop::dispatch();
  uint64_t result = v13;
  char v13 = 0;
  if (result) {
    return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCB10;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCB10;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = a1 + 72 * v3;
  if (v4 != a2)
  {
    while (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v2))
    {
      v2 += 72;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCB38;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCB38;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v2 + 88));
  uint64_t v4 = result;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 + 88);
  if (v7) {
    uint64_t v8 = v7 + 72 * *(unsigned int *)(v7 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    while (1)
    {
      uint64_t result = (uint64_t)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v4 + 64))[7];
      if (!result) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9 == -1) {
        break;
      }
      uint64_t result = WebKit::SessionStorageManager::removeNamespace((uint64_t *)result, v9);
LABEL_8:
      while (1)
      {
        v4 += 72;
        if (v4 == v6) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v4);
        if (!result) {
          goto LABEL_12;
        }
      }
      uint64_t v4 = v6;
LABEL_12:
      if (v4 == v8) {
        return result;
      }
    }
    uint64_t result = 151;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCB60;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCB60;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[3];
  if (v1 == -1 || (uint64_t v2 = a1[4], v2 == -1))
  {
    __break(0xC471u);
    JUMPOUT(0x198CB2688);
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v3 + 88));
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v3 + 88);
  if (v8) {
    uint64_t v9 = v8 + 72 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v4)
  {
    do
    {
      uint64_t v10 = (uint64_t *)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v5 + 64))[7];
      if (v10) {
        WebKit::SessionStorageManager::cloneStorageArea(v10, v1, v2);
      }
      while (1)
      {
        v5 += 72;
        if (v5 == v7) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v5)) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = v7;
LABEL_13:
      ;
    }
    while (v5 != v9);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCB88;
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v7, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCB88;
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v7, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = (void *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(void *)(*(void *)(a1 + 8) + 88), a1 + 24);
  if (result)
  {
    uint64_t v3 = result[8];
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 48);
      if (*(unsigned char *)(v4 + 64))
      {
        if (*(void *)(v4 + 56) == *(void *)(a1 + 88))
        {
          if (*(unsigned char *)(a1 + 104))
          {
            uint64_t v5 = *(void *)(a1 + 96);
            *(void *)(v4 + 80) = 0;
            *(void *)(v4 + 88) = v5;
          }
          uint64_t result = (void *)WebKit::OriginQuotaManager::grantWithCurrentQuota((WebKit::OriginQuotaManager *)v4, *(void *)(v4 + 40));
          if (*(unsigned char *)(v4 + 64))
          {
            uint64_t v6 = *(void *)(v4 + 48);
            *(void *)(v4 + 48) = 0;
            (*(void (**)(uint64_t, void *))(*(void *)v6 + 16))(v6, result);
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
            if (*(unsigned char *)(v4 + 64))
            {
              uint64_t result = *(void **)(v4 + 48);
              *(void *)(v4 + 48) = 0;
              if (result) {
                uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
              }
              *(unsigned char *)(v4 + 64) = 0;
            }
            if (!*(unsigned char *)(v4 + 72))
            {
              return WebKit::OriginQuotaManager::handleRequests((unsigned char *)v4);
            }
          }
          else
          {
            __break(1u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CC790[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CCBA0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CC7A0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CCBB0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*(&off_1EE9CC7B0 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CCBC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  uint64_t result = WebCore::FileHandle::FileHandle();
  a2[4] = a3[4];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getAllOrigins(void)::$_0,void,WTF::String const&>::call(uint64_t a1, const WTF::String **a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2) {
    *(_DWORD *)v3 += 2;
  }
  WebKit::originFilePath((WTF::StringImpl *)v9, v3);
  WebCore::StorageUtilities::readOriginFromFile(v10, (WebCore::StorageUtilities *)v9, v4);
  char v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v11) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(*(uint64_t **)(a1 + 8), (uint64_t)v10, (uint64_t)v9);
  }
  uint64_t result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      return WTF::StringImpl::destroy(v3, v8);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCC08;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCC08;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v66 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v70, v2);
  char v6 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v70);
  char v7 = v5;
  char v8 = 0;
  isEmptyOrDeletedBucket = v70;
  if (v70) {
    char v8 = (WTF::RunLoop *)((char *)v70 + 64 * (unint64_t)*((unsigned int *)v70 - 1));
  }
  if (v8 != v6)
  {
    do
    {
      uint64_t v10 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, v6);
      char v11 = WebKit::OriginStorageManager::defaultBucket(v10);
      WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList((WTF::StringImpl *)v11, v3, v4 != 0, v75);
      WebKit::updateOriginData((uint64_t *)&v66, (uint64_t)v6 + 32, v75);
      if ((WebCore::operator==() & 1) == 0) {
        WebKit::updateOriginData((uint64_t *)&v66, (uint64_t)v6, v75);
      }
      WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v6);
      if (v75[0]) {
        WTF::fastFree((WTF *)(v75[0] - 16), v5);
      }
      while (1)
      {
        char v6 = (WebCore::SecurityOriginData *)((char *)v6 + 64);
        if (v6 == v7) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v6)) {
          goto LABEL_12;
        }
      }
      char v6 = v7;
LABEL_12:
      ;
    }
    while (v6 != v8);
    isEmptyOrDeletedBucket = v70;
  }
  if (isEmptyOrDeletedBucket) {
    isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)isEmptyOrDeletedBucket, v5);
  }
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v12 = (uint64_t)v66;
  if (v66)
  {
    uint64_t v13 = *((unsigned int *)v66 - 1);
    uint64_t v14 = (WebCore::SecurityOriginData *)((char *)v66 + 40 * v13);
    if (*((_DWORD *)v66 - 3))
    {
      int v15 = v66;
      if (v13)
      {
        uint64_t v16 = 40 * v13;
        int v15 = v66;
        while (1)
        {
          isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v15);
          if (!isEmptyOrDeletedBucket) {
            break;
          }
          int v15 = (WebCore::SecurityOriginData *)((char *)v15 + 40);
          v16 -= 40;
          if (!v16)
          {
            int v15 = v14;
            break;
          }
        }
      }
      if (v12) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
    int v15 = (WebCore::SecurityOriginData *)((char *)v66 + 40 * v13);
  }
  else
  {
    int v15 = 0;
    LODWORD(v13) = 0;
  }
  uint64_t v14 = (WebCore::SecurityOriginData *)((char *)v66 + 40 * v13);
  if (v66)
  {
LABEL_24:
    uint64_t v17 = (WebCore::SecurityOriginData *)(v12 + 40 * *(unsigned int *)(v12 - 4));
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v17 = 0;
LABEL_29:
  if (v17 == v15) {
    goto LABEL_100;
  }
  do
  {
    LOBYTE(v75[0]) = 0;
    int v76 = -1;
    isEmptyOrDeletedBucket = (WTF::RunLoop *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v75, (uint64_t)v15);
    uint64_t v77 = 0;
    uint64_t v18 = *((void *)v15 + 4);
    if (!v18) {
      goto LABEL_91;
    }
    uint64_t v19 = *(unsigned int *)(v18 - 12);
    if (v19)
    {
      unsigned int v20 = (v19 - 1) | ((v19 - 1) >> 1) | (((v19 - 1) | ((v19 - 1) >> 1)) >> 2);
      unsigned int v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
      unint64_t v22 = (v21 | HIWORD(v21)) + 1;
      if (v22 > 0x400)
      {
        if (v22 > 2 * v19) {
          goto LABEL_37;
        }
      }
      else if (3 * v22 > 4 * v19)
      {
LABEL_35:
        double v23 = (double)v19;
        double v24 = (double)v22 * 0.604166667;
        goto LABEL_38;
      }
      LODWORD(v22) = 2 * v22;
      if (v22 <= 0x400) {
        goto LABEL_35;
      }
LABEL_37:
      double v23 = (double)v19;
      double v24 = (double)v22 * 0.416666667;
LABEL_38:
      if (v24 <= v23) {
        LODWORD(v22) = 2 * v22;
      }
      if (v22 <= 8) {
        unsigned int v25 = 8;
      }
      else {
        unsigned int v25 = v22;
      }
      isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(v25);
      uint64_t v77 = isEmptyOrDeletedBucket;
      *((_DWORD *)isEmptyOrDeletedBucket - 1) = v25;
      *((_DWORD *)v77 - 2) = v25 - 1;
      *((_DWORD *)v77 - 3) = v19;
      *((_DWORD *)v77 - 4) = 0;
      uint64_t v26 = (_DWORD *)*((void *)v15 + 4);
      if (v26)
      {
        uint64_t v27 = *(v26 - 1);
        uint64_t v28 = &v26[4 * v27];
        if (*(v26 - 3))
        {
          unint64_t v29 = (_DWORD *)*((void *)v15 + 4);
          if (v27)
          {
            uint64_t v30 = 16 * v27;
            unint64_t v29 = (_DWORD *)*((void *)v15 + 4);
            while (*v29 >= 0xFFFFFFFE)
            {
              v29 += 4;
              v30 -= 16;
              if (!v30)
              {
                unint64_t v29 = v28;
                goto LABEL_53;
              }
            }
          }
          goto LABEL_53;
        }
        unint64_t v29 = &v26[4 * v27];
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v26[4 * v27];
LABEL_53:
      if (v26) {
        v26 += 4 * *(v26 - 1);
      }
      if (v26 != v29)
      {
        do
        {
          if (v77) {
            int v31 = *((_DWORD *)v77 - 2);
          }
          else {
            int v31 = 0;
          }
          int v32 = 0;
          unsigned int v33 = *v29 + ~(*v29 << 15);
          unsigned int v34 = (9 * (v33 ^ (v33 >> 10))) ^ ((9 * (v33 ^ (v33 >> 10))) >> 6);
          unsigned int v35 = (v34 + ~(v34 << 11)) ^ ((v34 + ~(v34 << 11)) >> 16);
          do
          {
            uint64_t v36 = v35 & v31;
            unsigned int v35 = ++v32 + v36;
          }
          while (*((_DWORD *)v77 + 4 * v36) != -1);
          long long v38 = *(_OWORD *)v29;
          uint64_t v37 = v29 + 4;
          *((_OWORD *)v77 + v36) = v38;
          int v39 = v28;
          if (v37 != v28)
          {
            int v39 = v37;
            while (*v39 >= 0xFFFFFFFE)
            {
              v39 += 4;
              if (v39 == v28)
              {
                int v39 = v28;
                break;
              }
            }
          }
          unint64_t v29 = v39;
        }
        while (v39 != v26);
      }
    }
    unsigned int v40 = v77;
    if (v77)
    {
      if (!*((_DWORD *)v77 - 3)) {
        goto LABEL_90;
      }
      uint64_t v41 = *((unsigned int *)v77 - 1);
      char v42 = v77;
      if (v41)
      {
        uint64_t v43 = 0;
        while (*(_DWORD *)((char *)v77 + v43) >= 0xFFFFFFFE)
        {
          v43 += 16;
          if (16 * v41 == v43) {
            goto LABEL_89;
          }
        }
        char v42 = (WTF::RunLoop *)((char *)v77 + v43);
      }
      unsigned int v44 = (WTF::RunLoop *)((char *)v77 + 16 * v41);
      if (v44 != v42)
      {
        int v45 = *(_DWORD *)v42;
LABEL_77:
        uint64_t v46 = *((void *)v42 + 1);
        v68[0] = 0;
        int v69 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v68, (uint64_t)v75);
        LOBYTE(v70) = 0;
        LODWORD(v73) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v70, (uint64_t)v68);
        LODWORD(v74) = v45;
        *((void *)&v74 + 1) = v46;
        if (HIDWORD(v65) == v65)
        {
          isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v64, (unint64_t)&v70);
        }
        else
        {
          uint64_t v47 = v64 + 48 * HIDWORD(v65);
          *(unsigned char *)uint64_t v47 = 0;
          *(_DWORD *)(v47 + 24) = -1;
          isEmptyOrDeletedBucket = (WTF::RunLoop *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v47, (uint64_t)&v70);
          *(_OWORD *)(v47 + 32) = v74;
          ++HIDWORD(v65);
        }
        if (v73 != -1) {
          isEmptyOrDeletedBucket = (WTF::RunLoop *)((uint64_t (*)(char *, WTF::RunLoop **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v73])(&v67, &v70);
        }
        LODWORD(v73) = -1;
        if (v69 != -1) {
          isEmptyOrDeletedBucket = (WTF::RunLoop *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v69])(&v67, v68);
        }
        int v69 = -1;
        while (1)
        {
          char v42 = (WTF::RunLoop *)((char *)v42 + 16);
          if (v42 == v44) {
            break;
          }
          int v45 = *(_DWORD *)v42;
          if (*(_DWORD *)v42 < 0xFFFFFFFE)
          {
            if (v42 != v44) {
              goto LABEL_77;
            }
            break;
          }
        }
        unsigned int v40 = v77;
      }
LABEL_89:
      if (v40) {
LABEL_90:
      }
        isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::fastFree((WTF::RunLoop *)((char *)v40 - 16), v5);
    }
LABEL_91:
    if (v76 != -1) {
      isEmptyOrDeletedBucket = (WTF::RunLoop *)((uint64_t (*)(WTF::RunLoop **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v76])(&v70, v75);
    }
    double v48 = (WebCore::SecurityOriginData *)((char *)v15 + 40);
    int v15 = v14;
    if (v48 != v14)
    {
      int v15 = v48;
      while (1)
      {
        isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v15);
        if (!isEmptyOrDeletedBucket) {
          break;
        }
        int v15 = (WebCore::SecurityOriginData *)((char *)v15 + 40);
        if (v15 == v14)
        {
          int v15 = v14;
          break;
        }
      }
    }
  }
  while (v15 != v17);
  uint64_t v12 = (uint64_t)v66;
LABEL_100:
  if (!v12) {
    goto LABEL_114;
  }
  uint64_t v49 = *(unsigned int *)(v12 - 4);
  if (!v49) {
    goto LABEL_113;
  }
  uint64_t v50 = v12;
  while (2)
  {
    uint64_t v51 = *(unsigned int *)(v50 + 24);
    if (!v51)
    {
      if (*(void *)v50 != -1)
      {
LABEL_105:
        uint64_t v52 = *(void *)(v50 + 32);
        if (!v52 || (WTF::fastFree((WTF *)(v52 - 16), v5), uint64_t v51 = *(unsigned int *)(v50 + 24), v51 != -1)) {
          ((void (*)(WTF::RunLoop **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v51])(&v70, v50);
        }
        *(_DWORD *)(v50 + 24) = -1;
      }
      v50 += 40;
      if (!--v49) {
        goto LABEL_113;
      }
      continue;
    }
    break;
  }
  if (v51 == 1) {
    goto LABEL_105;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_113:
  isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::fastFree((WTF *)(v12 - 16), v5);
LABEL_114:
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  uint64_t v53 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v54 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  uint64_t v70 = (WTF::RunLoop *)v53;
  uint64_t v71 = v54;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v64, (uint64_t)&v72);
  uint64_t v55 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v55 = &unk_1EE9CCC30;
  v55[1] = v70;
  uint64_t v56 = v71;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  v55[2] = v56;
  v55[3] = v72;
  uint64_t v57 = v73;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  v55[4] = v57;
  v75[0] = (uint64_t)v55;
  WTF::RunLoop::dispatch();
  uint64_t v59 = v75[0];
  v75[0] = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v58);
  uint64_t v61 = v71;
  uint64_t v71 = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = (uint64_t)v70;
  uint64_t v70 = 0;
  if (v62) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v62 + 16), v60);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v60);
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)result;
  unsigned int v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    unint64_t v6 = v4 + 48 * v5;
    do
    {
      WebKit::WebsiteData::Entry::isolatedCopy(v4, (uint64_t)v9);
      uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)v9);
      *(_OWORD *)(v4 + 32) = v11;
      if (v10 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v10])(&v8, v9);
      }
      v4 += 48;
    }
    while (v4 < v6);
    unint64_t v4 = *(void *)v2;
    unsigned int v5 = *(_DWORD *)(v2 + 12);
  }
  *(void *)a2 = v4;
  int v7 = *(_DWORD *)(v2 + 8);
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCC30;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCC30;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v3);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 24);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCC58;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCC58;
  uint64_t v3 = *((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v17 = 0;
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(&v17, *(_DWORD *)(a1 + 44));
  uint64_t v3 = *(unsigned int *)(a1 + 44);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = 32 * v3;
    do
    {
      LOBYTE(v18[0]) = 0;
      int v19 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, v4);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v17, (uint64_t)v18, (uint64_t)v16);
      if (v19 != -1) {
        ((void (*)(void *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v19])(v16, v18);
      }
      v4 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  int v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v7 = &unk_1EE9CCC80;
  v7[1] = &v17;
  v16[0] = v7;
  WebKit::NetworkStorageManager::deleteDataOnDisk(v18, v2, v6, v16, -INFINITY);
  if (v18[0]) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v18[0], v8);
  }
  uint64_t v9 = (WTF::RunLoop *)(*(uint64_t (**)(void *))(*v7 + 8))(v7);
  WTF::RunLoop::main(v9);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9CCCA8;
  v12[1] = v10;
  v12[2] = v11;
  v16[0] = v12;
  WTF::RunLoop::dispatch();
  uint64_t v14 = v16[0];
  v16[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v17;
  if (v17) {
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v13);
  }
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(void *a1, unsigned int a2)
{
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(a2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)((32 * v4) | 0x10));
  bzero((void *)(v5 + 16), 32 * v4);
  *a1 = v5 + 16;
  *(_DWORD *)(v5 + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlT_E_bJRKNS8_12ClientOriginEEE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  int v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v7, a2);
  v9[0] = 0;
  int v10 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2 + 32);
  if (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(*(uint64_t **)(a1 + 8), (uint64_t)v7))uint64_t v4 = 1; {
  else
  }
    uint64_t v4 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(*(uint64_t **)(a1 + 8), (uint64_t)v9);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v10])(&v6, v9);
  }
  int v10 = -1;
  if (v8 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v8])(&v6, v7);
  }
  return v4;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCCA8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCCA8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCCD0;
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 64);
  }
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCCD0;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, (char *)this + 64);
  }
  *((_DWORD *)this + 22) = -1;
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24);
  LOBYTE(v14[0]) = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, a1 + 32);
  v16[0] = 0;
  int v17 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, a1 + 64);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v4 = &unk_1EE9CCCF8;
  *(unsigned char *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4 + 8, (uint64_t)v14);
  *(unsigned char *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4 + 40, (uint64_t)v16);
  uint64_t v11 = v4;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v12, v2, v3, &v11, -INFINITY);
  if (v12) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v12, v5);
  }
  uint64_t v6 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v17 != -1) {
    uint64_t v6 = (WTF::RunLoop *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v17])(&v13, v16);
  }
  int v17 = -1;
  if (v15 != -1) {
    uint64_t v6 = (WTF::RunLoop *)((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v15])(&v13, v14);
  }
  WTF::RunLoop::main(v6);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9CCD20;
  v9[1] = v7;
  void v9[2] = v8;
  v14[0] = v9;
  WTF::RunLoop::dispatch();
  uint64_t result = v14[0];
  v14[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CCCF8;
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v2])(&v5, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCCF8;
  uint64_t v3 = *((unsigned int *)this + 16);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v3])(&v6, (char *)this + 40);
  }
  *((_DWORD *)this + 16) = -1;
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v7, (char *)this + 8);
  }
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EE4callESA_()
{
  return WebCore::operator==();
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCD20;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCD20;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCD48;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCD48;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24);
  double v4 = *(double *)(a1 + 32);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9CCD70;
  uint64_t v12 = (void *)v5;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v13, v2, v3, &v12, v4);
  if (v13) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v13, v6);
  }
  char v7 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  WTF::RunLoop::main(v7);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v10 = &unk_1EE9CCD98;
  v10[1] = v8;
  void v10[2] = v9;
  uint64_t v12 = v10;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager23deleteDataModifiedSinceENS_9OptionSetINS2_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJRKN7WebCore12ClientOriginEEE4callESJ_()
{
  return 1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCD98;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCD98;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCDC0;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCDC0;
  uint64_t v3 = *((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = a1 + 32;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9CCDE8;
  v5[1] = v4;
  uint64_t v28 = v5;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v27, v2, v3, &v28, -INFINITY);
  (*(void (**)(void *))(*v5 + 8))(v5);
  uint64_t v26 = 0;
  isEmptyOrDeletedBucket = (WTF::StringImpl *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v27);
  uint64_t v7 = (uint64_t)isEmptyOrDeletedBucket;
  uint64_t v9 = v8;
  int v10 = 0;
  if (v27) {
    int v10 = (WTF::StringImpl *)(v27 + ((unint64_t)*(unsigned int *)(v27 - 4) << 6));
  }
  if (v10 != isEmptyOrDeletedBucket)
  {
    uint64_t v11 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
    while (1)
    {
      LOBYTE(v28) = 0;
      int v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v28, v7);
      v32[0] = 0;
      int v34 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, v7 + 32);
      uint64_t v12 = (WebCore::RegistrableDomain *)&v33;
      if (v34)
      {
        uint64_t v12 = v11;
        if (v34 != 1) {
          break;
        }
      }
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v12, &v25);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v26, &v25, (uint64_t)v24);
      isEmptyOrDeletedBucket = v25;
      unsigned int v25 = 0;
      if (isEmptyOrDeletedBucket)
      {
        if (*(_DWORD *)isEmptyOrDeletedBucket == 2) {
          isEmptyOrDeletedBucket = (WTF::StringImpl *)WTF::StringImpl::destroy(isEmptyOrDeletedBucket, v13);
        }
        else {
          *(_DWORD *)isEmptyOrDeletedBucket -= 2;
        }
      }
      if (v34 != -1) {
        isEmptyOrDeletedBucket = (WTF::StringImpl *)((uint64_t (*)(void *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v34])(v24, v32);
      }
      int v34 = -1;
      if (v31 != -1) {
        isEmptyOrDeletedBucket = (WTF::StringImpl *)((uint64_t (*)(void *, void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(v24, &v28);
      }
      while (1)
      {
        v7 += 64;
        if (v7 == v9) {
          break;
        }
        isEmptyOrDeletedBucket = (WTF::StringImpl *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v7);
        if (!isEmptyOrDeletedBucket) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v9;
LABEL_18:
      if ((WTF::StringImpl *)v7 == v10) {
        goto LABEL_22;
      }
    }
    isEmptyOrDeletedBucket = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  }
LABEL_22:
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  uint64_t v14 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)&v26, (uint64_t *)&v30);
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v16 = &unk_1EE9CCE10;
  v16[1] = v28;
  uint64_t v17 = v29;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  void v16[2] = v17;
  uint64_t v18 = v30;
  uint64_t v30 = 0;
  void v16[3] = v18;
  v24[0] = v16;
  WTF::RunLoop::dispatch();
  uint64_t v20 = v24[0];
  v24[0] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  if (v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v19);
  }
  uint64_t v21 = v29;
  uint64_t v29 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  unint64_t v22 = v28;
  uint64_t v28 = 0;
  if (v22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>((atomic_uchar *)v22[2], v19);
  }
  if (v26) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v19);
  }
  uint64_t result = v27;
  if (v27) {
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v27, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager31deleteDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS9_NS_11DefaultHashIS9_EENS_10HashTraitsIS9_EENS_15HashTableTraitsEEEEEEEN3__0clEvEUlRT_E_bJRKNS8_12ClientOriginEEE4callESX_(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 56);
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v11);
    }
    uint64_t v4 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  }
  else
  {
    uint64_t v4 = (WebCore::RegistrableDomain *)(a2 + 40);
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v4, &v12);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v13 = &v12;
  uint64_t v8 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(v5, &v13, v6);
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v8 != -1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CCE10;
  int v3 = (WTF::StringImpl **)a1[3];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CCE10;
  int v3 = (WTF::StringImpl **)*((void *)this + 3);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 24);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCE38;
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 64);
  }
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCE38;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, (char *)this + 64);
  }
  *((_DWORD *)this + 22) = -1;
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = a1 + 32;
  v25[0] = 0;
  int v26 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, a1 + 32);
  v27[0] = 0;
  int v28 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v3);
  v21[0] = 0;
  int v22 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v21, a1 + 64);
  v23[0] = 0;
  int v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, a1 + 64);
  uint64_t v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, (WebCore::SecurityOriginData *)v21);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 24);
  uint64_t v6 = WebKit::OriginStorageManager::defaultBucket(v4);
  WebKit::OriginStorageManager::StorageBucket::deleteData((WTF::StringImpl *)v6, v5, -INFINITY);
  uint64_t v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, (WebCore::SecurityOriginData *)v25);
  int v8 = *(_DWORD *)(a1 + 24);
  char v9 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, (WebCore::SecurityOriginData *)v21);
  int v10 = WebKit::OriginStorageManager::defaultBucket(v9);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v10, 32, &v20);
  uint64_t v11 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, (WebCore::SecurityOriginData *)v21);
  uint64_t v12 = WebKit::OriginStorageManager::defaultBucket(v11);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v12, 128, &v19);
  uint64_t v13 = WebKit::OriginStorageManager::defaultBucket(v7);
  WebKit::OriginStorageManager::StorageBucket::moveData((WTF::StringImpl *)v13, v8, (WTF::FileSystemImpl *)&v20, (WTF::FileSystemImpl *)&v19);
  uint64_t v15 = v19;
  int v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v20;
  uint64_t v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, (const WebCore::ClientOrigin *)v21);
  uint64_t v17 = (WTF::RunLoop *)WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, (const WebCore::ClientOrigin *)v25);
  WTF::RunLoop::main(v17);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v20, (uint64_t *)(a1 + 96));
  WTF::RunLoop::dispatch();
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  if (v24 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v24])(&v20, v23);
  }
  int v24 = -1;
  if (v22 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v22])(&v20, v21);
  }
  if (v28 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v28])(v21, v27);
  }
  int v28 = -1;
  if (v26 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v26])(v21, v25);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCE60;
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, a1 + 64);
  }
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCE60;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v8, (char *)this + 64);
  }
  *((_DWORD *)this + 22) = -1;
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v9, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(WTF::RunLoop *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (uint64_t *)*((void *)a1 + 1);
  WTF::RunLoop::main(a1);
  uint64_t v3 = *((void *)v1 + 12);
  *((void *)v1 + 12) = 0;
  uint64_t v16 = v3;
  uint64_t v4 = (WTF::RunLoop *)((char *)v1 + 32);
  uint64_t v5 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, (WTF::RunLoop *)((char *)v1 + 32));
  LODWORD(v1) = *((_DWORD *)v1 + 6);
  uint64_t v6 = WebKit::OriginStorageManager::defaultBucket(v5);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v6, (int)v1, &v15);
  WTF::String::isolatedCopy();
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9CCE88;
  v7[1] = v16;
  char v8 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v7[2] = v8;
  uint64_t v18 = v7;
  WTF::RunLoop::dispatch();
  int v10 = v18;
  uint64_t v18 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CCE88;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CCE88;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCEB0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCEB0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v1 + 88));
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v1 + 88);
  if (v6) {
    uint64_t v7 = v6 + 72 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      char v8 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v3 + 64))[4];
      if (v8) {
        WebKit::LocalStorageManager::syncLocalStorage(*((void *)v8 + 3));
      }
      uint64_t result = (uint64_t)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v3 + 64));
      uint64_t v9 = *(void *)(result + 64);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 16);
        if (v10)
        {
          if (*(_DWORD *)(v10 + 4))
          {
            uint64_t result = (uint64_t)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)(v9 + 40));
            uint64_t v11 = (void *)result;
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)(v9 + 40);
            uint64_t v15 = v14 ? v14 + 88 * *(unsigned int *)(v14 - 4) : 0;
            if (v15 != result)
            {
              do
              {
                uint64_t result = v11[10];
                if (!*(unsigned char *)(result + 88)) {
                  uint64_t result = WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions((WebCore::IDBServer::UniqueIDBDatabase *)result);
                }
                while (1)
                {
                  v11 += 11;
                  if (v11 == v13) {
                    break;
                  }
                  if ((unint64_t)(*v11 + 1) > 1) {
                    goto LABEL_20;
                  }
                }
                uint64_t v11 = v13;
LABEL_20:
                ;
              }
              while (v11 != (void *)v15);
            }
          }
        }
      }
      while (1)
      {
        v3 += 72;
        if (v3 == v5) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v3);
        if (!result) {
          goto LABEL_25;
        }
      }
      uint64_t v3 = v5;
LABEL_25:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCED8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCED8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v1 + 88));
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v1 + 88);
  if (v6) {
    uint64_t v7 = v6 + 72 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      char v8 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v3 + 64))[4];
      if (v8)
      {
        uint64_t v9 = (void *)*((void *)v8 + 3);
        if (v9)
        {
          if (((*(uint64_t (**)(void *))(*v9 + 16))(v9) & 1) == 0)
          {
            uint64_t v10 = (WebCore::SQLiteDatabase *)v9[15];
            if (v10)
            {
              if (*((void *)v10 + 1)) {
                WebCore::SQLiteDatabase::releaseMemory(v10);
              }
            }
          }
        }
      }
      uint64_t result = (uint64_t)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v3 + 64));
      uint64_t v11 = *(void *)(result + 64);
      if (v11)
      {
        uint64_t result = (uint64_t)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((void **)(v11 + 40));
        uint64_t v12 = result;
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)(v11 + 40);
        uint64_t v16 = v15 ? v15 + 88 * *(unsigned int *)(v15 - 4) : 0;
        if (v16 != result)
        {
          do
          {
            uint64_t result = WebCore::IDBServer::UniqueIDBDatabase::handleLowMemoryWarning(*(WebCore::IDBServer::UniqueIDBDatabase **)(v12 + 80));
            while (1)
            {
              v12 += 88;
              if (v12 == v14) {
                break;
              }
              if ((unint64_t)(*(void *)v12 + 1) > 1) {
                goto LABEL_21;
              }
            }
            uint64_t v12 = v14;
LABEL_21:
            ;
          }
          while (v12 != v16);
        }
      }
      while (1)
      {
        v3 += 72;
        if (v3 == v5) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v3);
        if (!result) {
          goto LABEL_26;
        }
      }
      uint64_t v3 = v5;
LABEL_26:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCF00;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCF00;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(*a1 + 88));
  uint64_t v4 = (uint64_t)isEmptyOrDeletedBucket;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 + 88);
  if (v7) {
    char v8 = (WTF::RunLoop *)(v7 + 72 * *(unsigned int *)(v7 - 4));
  }
  else {
    char v8 = 0;
  }
  if (v8 != isEmptyOrDeletedBucket)
  {
    do
    {
      isEmptyOrDeletedBucket = (WTF::RunLoop *)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v4 + 64));
      uint64_t v10 = *((void *)isEmptyOrDeletedBucket + 4);
      if (v10) {
        isEmptyOrDeletedBucket = (WTF::RunLoop *)WebKit::LocalStorageManager::syncLocalStorage(*(void *)(v10 + 24));
      }
      while (1)
      {
        v4 += 72;
        if (v4 == v6) {
          break;
        }
        isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v4);
        if (!isEmptyOrDeletedBucket) {
          goto LABEL_13;
        }
      }
      uint64_t v4 = v6;
LABEL_13:
      ;
    }
    while ((WTF::RunLoop *)v4 != v8);
  }
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 2);
  WTF::RunLoop::dispatch();
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCF28;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCF28;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v3);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t *)(*(void *)(result + 8) + 320);
  uint64_t v5 = *v4;
  if (*v4
    || (uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(*(void *)(result + 8) + 320), 0), (v5 = *v4) != 0))
  {
    int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(void *)(v3 + 24);
  unint64_t v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v6 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    uint64_t result = v12[1];
    *uint64_t v12 = v7;
    v12[1] = 0;
    if (result) {
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
    }
    uint64_t v16 = *v4;
    if (*v4) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v18 = *v4;
    if (*v4) {
      int v19 = *(_DWORD *)(v18 - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
    unint64_t v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20) {
        goto LABEL_23;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_23;
    }
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, v12);
    uint64_t v12 = (uint64_t *)result;
    goto LABEL_23;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1) {
      uint64_t v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v6;
    uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *uint64_t v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v7 = *(void *)(v3 + 24);
        uint64_t v12 = v14;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v22 = *(unsigned int *)(v3 + 44);
  if (v22)
  {
    double v23 = v12 + 1;
    int v24 = *(WTF::StringImpl ***)(v3 + 32);
    uint64_t v25 = 8 * v22;
    do
    {
      uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v23, v24++, a3, (uint64_t)v26);
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v4, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCF50;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCF50;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v2 + 88));
  uint64_t v4 = (uint64_t)isEmptyOrDeletedBucket;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 + 88);
  if (v7) {
    unint64_t v8 = (WTF::RunLoop *)(v7 + 72 * *(unsigned int *)(v7 - 4));
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 != isEmptyOrDeletedBucket)
  {
    do
    {
      unint64_t v9 = *(void **)(*(void *)(v4 + 64) + 48);
      uint64_t v10 = v9[13];
      v9[10] = 0;
      v9[11] = v10;
      while (1)
      {
        v4 += 72;
        if (v4 == v6) {
          break;
        }
        isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v4);
        if (!isEmptyOrDeletedBucket) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = v6;
LABEL_10:
      ;
    }
    while ((WTF::RunLoop *)v4 != v8);
  }
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v12, (uint64_t *)(a1 + 24));
  WTF::RunLoop::dispatch();
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCF78;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCF78;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(WTF::RunLoop *isEmptyOrDeletedBucket)
{
  uint64_t v1 = isEmptyOrDeletedBucket;
  uint64_t v2 = *((void *)isEmptyOrDeletedBucket + 1);
  int v3 = *((unsigned __int8 *)isEmptyOrDeletedBucket + 24);
  if (*(unsigned __int8 *)(v2 + 200) != v3)
  {
    *(unsigned char *)(v2 + 200) = v3;
    isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v2 + 88));
    uint64_t v4 = isEmptyOrDeletedBucket;
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v2 + 88);
    uint64_t v8 = v7 ? v7 + 72 * *(unsigned int *)(v7 - 4) : 0;
    if ((WTF::RunLoop *)v8 != isEmptyOrDeletedBucket)
    {
      do
      {
        uint64_t v9 = *(void *)(*((void *)v4 + 8) + 48);
        WebKit::NetworkStorageManager::originQuotaManagerParameters((WebKit::NetworkStorageManager *)&v12, (const WebCore::ClientOrigin *)v2, v4);
        *(_OWORD *)(v9 + 88) = v12;
        uint64_t v10 = *(void *)(v9 + 136);
        *(void *)(v9 + 136) = v13;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        isEmptyOrDeletedBucket = *(WTF::RunLoop **)(v9 + 144);
        *(void *)(v9 + 144) = v14;
        if (isEmptyOrDeletedBucket) {
          isEmptyOrDeletedBucket = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)isEmptyOrDeletedBucket
        }
                                                                                             + 8))(isEmptyOrDeletedBucket);
        *(void *)(v9 + 104) = *(void *)(v9 + 88);
        *(void *)(v9 + 80) = 0;
        if (*(unsigned char *)(v9 + 120)) {
          *(unsigned char *)(v9 + 120) = 0;
        }
        while (1)
        {
          uint64_t v4 = (WTF::RunLoop *)((char *)v4 + 72);
          if (v4 == v6) {
            break;
          }
          isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v4);
          if (!isEmptyOrDeletedBucket) {
            goto LABEL_16;
          }
        }
        uint64_t v4 = v6;
LABEL_16:
        ;
      }
      while (v4 != (WTF::RunLoop *)v8);
    }
  }
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v12, (uint64_t *)v1 + 4);
  WTF::RunLoop::dispatch();
  uint64_t result = v12;
  *(void *)&long long v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCFA0;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CCFA0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  *(void *)(a1[1] + 360) = a1[3];
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, a1 + 4);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CCFC8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CCFC8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v6, v1, *((void *)result + 2));
    uint64_t v3 = v6;
    if (v6)
    {
      WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal((uint64_t)v6, (WTF::StringImpl *)v2[24]);
      uint64_t v5 = (atomic_uchar *)*((void *)v3 + 2);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v5, v4);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CCFF0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  int v4 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CCFF0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  int v4 = (atomic_uchar *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }

  return WTF::fastFree(a1, v3);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()((atomic_uchar *)(a1 + 8));
}

atomic_uchar *WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()(atomic_uchar *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v5, *(atomic_uchar **)result, *((void *)result + 1));
    uint64_t v2 = v5;
    if (v5)
    {
      WebKit::NetworkStorageManager::addAllowedSitesForConnectionInternal(v5, *((void *)v1 + 2), (uint64_t)(v1 + 24));
      int v4 = (atomic_uchar *)v2[2];
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v4, v3);
    }
  }
  return result;
}

WTF::StringImpl **WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl ***))(*(void *)a1 + 16))(a1, a2, &v6);
  uint64_t result = v6;
  if (v6) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CD018;
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v9, a1 + 64);
  }
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v10, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v6 = *(WTF::WorkQueue **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    WTF::WorkQueue::deref(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD018;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v4])(&v9, (char *)this + 64);
  }
  *((_DWORD *)this + 22) = -1;
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v5])(&v10, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v6 = (WTF::WorkQueue *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    WTF::WorkQueue::deref(v6);
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(*(uint64_t **)(a1 + 8), (WebCore::SecurityOriginData *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = v3;
  Manager = WebKit::OriginStorageManager::backgroundFetchManager(v2, &v6);
  (*(void (**)(void, WebKit::BackgroundFetchStoreManager *))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), Manager);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD040;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD040;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 368);
  if (v3)
  {
    isEmptyOrDeletedBucket = (WTF::RunLoop *)std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100]((uint64_t *)(v3 + 8), 0);
  }
  else
  {
    isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(void *)(v2 + 88));
    uint64_t v5 = (uint64_t)isEmptyOrDeletedBucket;
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v2 + 88);
    if (v8) {
      char v9 = (WTF::RunLoop *)(v8 + 72 * *(unsigned int *)(v8 - 4));
    }
    else {
      char v9 = 0;
    }
    if (v9 != isEmptyOrDeletedBucket)
    {
      do
      {
        char v10 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v5 + 64));
        uint64_t v11 = WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager((WebKit::OriginStorageManager::StorageBucket *)v10);
        isEmptyOrDeletedBucket = (WTF::RunLoop *)std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100]((uint64_t *)(v11 + 8), 0);
        while (1)
        {
          v5 += 72;
          if (v5 == v7) {
            break;
          }
          isEmptyOrDeletedBucket = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v5);
          if (!isEmptyOrDeletedBucket) {
            goto LABEL_12;
          }
        }
        uint64_t v5 = v7;
LABEL_12:
        ;
      }
      while ((WTF::RunLoop *)v5 != v9);
    }
  }
  WTF::RunLoop::main(isEmptyOrDeletedBucket);
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v12 = &unk_1EE9CD068;
  *(_OWORD *)(v12 + 8) = v14;
  uint64_t v15 = v12;
  WTF::RunLoop::dispatch();
  uint64_t result = v15;
  if (v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD068;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD068;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD090;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD090;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (WebKit::ServiceWorkerStorageManager *)v2[46];
  if (v3)
  {
    uint64_t v4 = (WTF::RunLoop *)WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v3);
  }
  else
  {
    WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v15, v2);
    uint64_t v6 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v15);
    uint64_t v7 = v5;
    uint64_t v4 = v15;
    if (v15) {
      uint64_t v8 = (WTF::RunLoop *)((char *)v15 + 64 * (unint64_t)*((unsigned int *)v15 - 1));
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8 != v6)
    {
      do
      {
        char v9 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, v6);
        char v10 = WebKit::OriginStorageManager::defaultBucket(v9);
        uint64_t v11 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager((WebKit::OriginStorageManager::StorageBucket *)v10);
        WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v11);
        WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v6);
        while (1)
        {
          uint64_t v6 = (WebCore::SecurityOriginData *)((char *)v6 + 64);
          if (v6 == v7) {
            break;
          }
          if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v6)) {
            goto LABEL_11;
          }
        }
        uint64_t v6 = v7;
LABEL_11:
        ;
      }
      while (v6 != v8);
      uint64_t v4 = v15;
    }
    if (v4) {
      uint64_t v4 = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)v4, v5);
    }
  }
  WTF::RunLoop::main(v4);
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v12 = &unk_1EE9CD0B8;
  *(_OWORD *)(v12 + 8) = v14;
  uint64_t v15 = (WTF::RunLoop *)v12;
  WTF::RunLoop::dispatch();
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD0B8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD0B8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD0E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

__n128 WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 3);
  unint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = v4 + *(unsigned int *)(a1 + 12);
  if (v6 > v5)
  {
    unint64_t v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = v8;
    }
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v9);
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if (v4)
  {
    uint64_t v11 = (long long *)*a2;
    uint64_t v12 = &v11[37 * v4];
    unsigned int v13 = *(_DWORD *)(a1 + 12);
    do
    {
      uint64_t v14 = *(void *)a1 + 592 * v13;
      long long v15 = *v11;
      *(void *)(v14 + 16) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v14 + 24, (uint64_t)v11 + 24);
      *(void *)(v14 + 376) = *((void *)v11 + 47);
      uint64_t v16 = *((void *)v11 + 48);
      *((void *)v11 + 48) = 0;
      *(void *)(v14 + 384) = v16;
      uint64_t v17 = *((void *)v11 + 49);
      *((void *)v11 + 49) = 0;
      *(void *)(v14 + 400) = 0;
      *(void *)(v14 + 408) = 0;
      *(void *)(v14 + 392) = v17;
      uint64_t v18 = *((void *)v11 + 50);
      *((void *)v11 + 50) = 0;
      *(void *)(v14 + 400) = v18;
      LODWORD(v18) = *((_DWORD *)v11 + 102);
      *((_DWORD *)v11 + 102) = 0;
      *(_DWORD *)(v14 + 408) = v18;
      LODWORD(v18) = *((_DWORD *)v11 + 103);
      *((_DWORD *)v11 + 103) = 0;
      *(_DWORD *)(v14 + 412) = v18;
      LODWORD(v18) = *((_DWORD *)v11 + 104);
      *(unsigned char *)(v14 + 420) = *((unsigned char *)v11 + 420);
      *(_DWORD *)(v14 + 416) = v18;
      *(_WORD *)(v14 + 424) = *((_WORD *)v11 + 212);
      uint64_t v19 = *((void *)v11 + 54);
      *((void *)v11 + 54) = 0;
      *(void *)(v14 + 432) = v19;
      uint64_t v20 = *((void *)v11 + 55);
      *((void *)v11 + 55) = 0;
      *(void *)(v14 + 440) = v20;
      uint64_t v21 = *((void *)v11 + 56);
      *((void *)v11 + 56) = 0;
      *(void *)(v14 + 448) = v21;
      WTF::URL::URL(v14 + 456, (uint64_t *)v11 + 57);
      *(_DWORD *)(v14 + 496) = *((_DWORD *)v11 + 124);
      *(void *)(v14 + 517) = 0;
      *(void *)(v14 + 504) = 0;
      *(void *)(v14 + 512) = 0;
      uint64_t v22 = *((void *)v11 + 63);
      *((void *)v11 + 63) = 0;
      *(void *)(v14 + 504) = v22;
      LODWORD(v22) = *((_DWORD *)v11 + 128);
      *((_DWORD *)v11 + 128) = 0;
      *(_DWORD *)(v14 + 512) = v22;
      LODWORD(v22) = *((_DWORD *)v11 + 129);
      *((_DWORD *)v11 + 129) = 0;
      *(_DWORD *)(v14 + 516) = v22;
      LODWORD(v22) = *((_DWORD *)v11 + 130);
      *((_DWORD *)v11 + 130) = 0;
      *(_DWORD *)(v14 + 520) = v22;
      LOBYTE(v22) = *((unsigned char *)v11 + 524);
      *((unsigned char *)v11 + 524) = 0;
      *(unsigned char *)(v14 + 524) = v22;
      long long v23 = v11[33];
      __n128 result = (__n128)v11[34];
      long long v24 = v11[35];
      *(__n128 *)(v14 + 544) = result;
      *(_OWORD *)(v14 + 560) = v24;
      *(_OWORD *)(v14 + 528) = v23;
      *(unsigned char *)(v14 + 576) = *((unsigned char *)v11 + 576);
      uint64_t v25 = *((void *)v11 + 73);
      *((void *)v11 + 73) = 0;
      *(void *)(v14 + 584) = v25;
      unsigned int v13 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v13;
      v11 += 37;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 16))
  {
    if (a2 != (WTF::StringImpl *)result)
    {
      unsigned int v4 = *(_DWORD *)(result + 12);
      unsigned int v5 = *((_DWORD *)a2 + 3);
      if (v4 <= v5)
      {
        unsigned int v15 = *(_DWORD *)(result + 8);
        if (v5 <= v15)
        {
          unsigned int v5 = *(_DWORD *)(result + 12);
        }
        else
        {
          if (v15)
          {
            if (v4)
            {
              uint64_t v16 = *(WebCore::ServiceWorkerContextData **)result;
              uint64_t v17 = 592 * v4;
              do
              {
                WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v16, a2);
                uint64_t v16 = (WebCore::ServiceWorkerContextData *)(v18 + 592);
                v17 -= 592;
              }
              while (v17);
              *(_DWORD *)(v3 + 12) = 0;
            }
            uint64_t v19 = *(WTF **)v3;
            if (*(void *)v3)
            {
              *(void *)uint64_t v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
              WTF::fastFree(v19, a2);
            }
          }
          WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3, *((unsigned int *)a2 + 3));
          unsigned int v5 = *(_DWORD *)(v3 + 12);
        }
      }
      else
      {
        unint64_t v6 = (WebCore::ServiceWorkerContextData *)(*(void *)result + 592 * v5);
        uint64_t v7 = 592 * v4 - 592 * v5;
        do
        {
          WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v6, a2);
          unint64_t v6 = (WebCore::ServiceWorkerContextData *)(v8 + 592);
          v7 -= 592;
        }
        while (v7);
        *(_DWORD *)(v3 + 12) = v5;
      }
      uint64_t v20 = *(long long **)a2;
      if (v5)
      {
        unsigned int v21 = v5;
        uint64_t v22 = *(void *)v3;
        uint64_t v23 = 592 * v21;
        do
        {
          WebCore::ServiceWorkerContextData::operator=(v22, v20);
          v20 += 37;
          v22 += 592;
          v23 -= 592;
        }
        while (v23);
        uint64_t v20 = *(long long **)a2;
        unsigned int v24 = *(_DWORD *)(v3 + 12);
      }
      else
      {
        unsigned int v24 = 0;
      }
      unsigned int v25 = *((_DWORD *)a2 + 3);
      if (v24 != v25)
      {
        int v26 = (WebCore::ServiceWorkerContextData *)(*(void *)v3 + 592 * v24);
        uint64_t v27 = (const WebCore::ServiceWorkerContextData *)&v20[37 * v24];
        uint64_t v28 = 592 * v25 - 592 * v24;
        do
        {
          int v26 = (WebCore::ServiceWorkerContextData *)((char *)WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v26, v27)+ 592);
          uint64_t v27 = (const WebCore::ServiceWorkerContextData *)((char *)v27 + 592);
          v28 -= 592;
        }
        while (v28);
        unsigned int v24 = *((_DWORD *)a2 + 3);
      }
      *(_DWORD *)(v3 + 12) = v24;
    }
    return v3;
  }
  unsigned int v9 = *((_DWORD *)a2 + 3);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v9;
  if (!v9)
  {
LABEL_12:
    *(unsigned char *)(v3 + 16) = 1;
    return v3;
  }
  if (v9 < 0x6EB3E5)
  {
    unsigned int v10 = 592 * v9;
    uint64_t v11 = (WebCore::ServiceWorkerContextData *)WTF::fastMalloc((WTF *)(592 * v9));
    *(_DWORD *)(v3 + 8) = v10 / 0x250;
    *(void *)uint64_t v3 = v11;
    unsigned int v12 = *((_DWORD *)a2 + 3);
    if (v12)
    {
      unsigned int v13 = *(const WebCore::ServiceWorkerContextData **)a2;
      uint64_t v14 = 592 * v12;
      do
      {
        uint64_t v11 = (WebCore::ServiceWorkerContextData *)((char *)WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v11, v13)+ 592);
        unsigned int v13 = (const WebCore::ServiceWorkerContextData *)((char *)v13 + 592);
        v14 -= 592;
      }
      while (v14);
    }
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

WTF *std::__optional_storage_base<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(WTF *result, WTF::StringImpl *a2)
{
  uint64_t v3 = (uint64_t)result;
  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((unsigned char *)result + 16))
    {
      unsigned int v4 = *((_DWORD *)result + 3);
      if (v4)
      {
        unsigned int v5 = *(WebCore::ServiceWorkerContextData **)result;
        uint64_t v6 = 592 * v4;
        do
        {
          WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v5, a2);
          unsigned int v5 = (WebCore::ServiceWorkerContextData *)(v7 + 592);
          v6 -= 592;
        }
        while (v6);
      }
      return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(v3, a2);
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    __n128 result = (WTF *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *(unsigned char *)(v3 + 16) = 0;
  }
  else
  {
    *(void *)__n128 result = 0;
    *((void *)result + 1) = 0;
    uint64_t v8 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)__n128 result = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)result + 2) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)result + 3) = v8;
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

uint64_t WebCore::ServiceWorkerContextData::ServiceWorkerContextData(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a1 + 24, (uint64_t)a2 + 24);
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  uint64_t v5 = *((void *)a2 + 48);
  *((void *)a2 + 48) = 0;
  *(void *)(a1 + 384) = v5;
  uint64_t v6 = *((void *)a2 + 49);
  *((void *)a2 + 49) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = v6;
  uint64_t v7 = *((void *)a2 + 50);
  *((void *)a2 + 50) = 0;
  *(void *)(a1 + 400) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 102);
  *((_DWORD *)a2 + 102) = 0;
  *(_DWORD *)(a1 + 408) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 103);
  *((_DWORD *)a2 + 103) = 0;
  *(_DWORD *)(a1 + 412) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 104);
  *(unsigned char *)(a1 + 420) = *((unsigned char *)a2 + 420);
  *(_DWORD *)(a1 + 416) = v7;
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  uint64_t v8 = *((void *)a2 + 54);
  *((void *)a2 + 54) = 0;
  *(void *)(a1 + 432) = v8;
  uint64_t v9 = *((void *)a2 + 55);
  *((void *)a2 + 55) = 0;
  *(void *)(a1 + 440) = v9;
  uint64_t v10 = *((void *)a2 + 56);
  *((void *)a2 + 56) = 0;
  *(void *)(a1 + 448) = v10;
  WTF::URL::URL(a1 + 456, (uint64_t *)a2 + 57);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  *(void *)(a1 + 517) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  uint64_t v11 = *((void *)a2 + 63);
  *((void *)a2 + 63) = 0;
  *(void *)(a1 + 504) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 128);
  *((_DWORD *)a2 + 128) = 0;
  *(_DWORD *)(a1 + 512) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 129);
  *((_DWORD *)a2 + 129) = 0;
  *(_DWORD *)(a1 + 516) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 130);
  *((_DWORD *)a2 + 130) = 0;
  *(_DWORD *)(a1 + 520) = v11;
  LOBYTE(v11) = *((unsigned char *)a2 + 524);
  *((unsigned char *)a2 + 524) = 0;
  *(unsigned char *)(a1 + 524) = v11;
  long long v12 = a2[33];
  long long v13 = a2[35];
  *(_OWORD *)(a1 + 544) = a2[34];
  *(_OWORD *)(a1 + 560) = v13;
  *(_OWORD *)(a1 + 528) = v12;
  *(unsigned char *)(a1 + 576) = *((unsigned char *)a2 + 576);
  uint64_t v14 = *((void *)a2 + 73);
  *((void *)a2 + 73) = 0;
  *(void *)(a1 + 584) = v14;
  return a1;
}

uint64_t WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  WTF::URL::URL(a1 + 32, (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CD108;
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 32)) {
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD130;
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v4);
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CD130;
  uint64_t v3 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v4);
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }

  return WTF::fastFree(a1, v5);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  LOBYTE(v100) = 0;
  unsigned __int8 v102 = 0;
  uint64_t v5 = (WebKit::ServiceWorkerStorageManager *)v4[46];
  if (!v5)
  {
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin((uint64_t)&v110, v4, *(long long **)(a1 + 24), *(_DWORD *)(a1 + 36), a1 + 40);
    uint64_t v100 = v110;
    uint64_t v8 = v111;
    char v110 = 0;
    uint64_t v111 = 0;
    uint64_t v101 = v8;
    unsigned __int8 v102 = 1;
LABEL_6:
    updated = (WTF::RunLoop *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v7);
    goto LABEL_7;
  }
  updated = (WTF::RunLoop *)WebKit::ServiceWorkerStorageManager::updateRegistrations(v5, &v110);
  if (v102 != v112)
  {
    uint64_t v100 = v110;
    uint64_t v9 = v111;
    char v110 = 0;
    uint64_t v111 = 0;
    uint64_t v101 = v9;
    unsigned __int8 v102 = 1;
    if (v112) {
      goto LABEL_6;
    }
  }
LABEL_7:
  WTF::RunLoop::main(updated);
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v85 = v11;
  *(void *)(v11 + 16) = 0;
  uint64_t v95 = v12;
  char v13 = v102;
  int v84 = v102;
  if (v102)
  {
    uint64_t v14 = v100;
    if (HIDWORD(v101))
    {
      uint64_t v86 = (char *)v100 + 40 * HIDWORD(v101);
      while (1)
      {
        unsigned int v15 = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin((uint64_t)v14 + 16);
        uint64_t v89 = *((void *)v14 + 2) + 48 * *((unsigned int *)v14 + 6);
        uint64_t v87 = v14;
        if ((WTF **)v89 != v15) {
          break;
        }
        LOBYTE(v18) = 0;
        int v19 = 0;
        unsigned int v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
LABEL_99:
        uint64_t v103 = *(void *)v87;
        WebCore::ScriptBuffer::isolatedCopy((WebCore::ScriptBuffer *)&v104, (WTF *)((char *)v87 + 8));
        uint64_t v105 = v22;
        v106[0] = v21;
        v106[1] = v20;
        v106[2] = v19;
        LOBYTE(v106[3]) = v18;
        *(void *)uint64_t v87 = v103;
        int v76 = v104;
        unint64_t v104 = 0;
        uint64_t v77 = (unsigned int *)*((void *)v87 + 1);
        *((void *)v87 + 1) = v76;
        if (v77)
        {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v77, v75);
          uint64_t v22 = v105;
          unsigned int v21 = v106[0];
          unsigned int v20 = v106[1];
          int v19 = v106[2];
          LOBYTE(v18) = v106[3];
        }
        uint64_t v105 = 0;
        memset(v106, 0, 13);
        uint64_t v78 = (WTF *)*((void *)v87 + 2);
        *((void *)v87 + 2) = v22;
        uint64_t v10 = (void *)*((unsigned int *)v87 + 6);
        *((_DWORD *)v87 + 6) = v21;
        *((_DWORD *)v87 + 7) = v20;
        *((_DWORD *)v87 + 8) = v19;
        *((unsigned char *)v87 + 36) = v18;
        if (v78)
        {
          WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v78, v10);
          if (v105) {
            WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v105, (void *)v106[0]);
          }
        }
        uint64_t v79 = v104;
        unint64_t v104 = 0;
        if (v79) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v79, v10);
        }
        uint64_t v14 = (WTF *)((char *)v87 + 40);
        if ((char *)v87 + 40 >= v86)
        {
          uint64_t v14 = v100;
          unsigned int v1 = HIDWORD(v101);
          uint64_t v12 = v95;
          goto LABEL_110;
        }
      }
      uint64_t v17 = v15;
      int v18 = 0;
      int v19 = 0;
      unsigned int v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      uint64_t v88 = v16;
      while (1)
      {
        uint64_t v90 = v17;
        WTF::URL::isolatedCopy();
        WebCore::ScriptBuffer::isolatedCopy((WebCore::ScriptBuffer *)&v107, (WebCore::SharedBufferBuilder *)(v17 + 5));
        uint64_t v109 = &v107;
        int v91 = v20;
        if (10 * (unint64_t)v20 >= 9 * (unint64_t)v21 || (_BYTE)v18 && 2 * v20 >= v21) {
          break;
        }
LABEL_47:
        int v94 = v18;
        unsigned int v48 = *((_DWORD *)v108[0] + 4);
        if (v48 >= 0x100) {
          unsigned int v49 = v48 >> 8;
        }
        else {
          unsigned int v49 = WTF::StringImpl::hashSlowCase(v108[0]);
        }
        unsigned int v50 = v21 - 1;
        uint64_t v51 = (v49 ^ v19) & (v21 - 1);
        uint64_t v52 = (WTF::StringImpl **)((char *)v22 + 48 * v51);
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v52))
        {
          int v54 = v91;
          uint64_t v55 = v88;
          uint64_t v17 = v90;
          int v18 = v94;
LABEL_63:
          WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ScriptBuffer>(WTF::URL &&,WebCore::ScriptBuffer &&)::{lambda(void)#1}>((uint64_t)v52, (uint64_t)v108, (uint64_t **)&v109);
        }
        else
        {
          unsigned int v56 = 0;
          while (1)
          {
            unsigned int v57 = *((_DWORD *)*v52 + 4);
            int v58 = v57 >= 0x100 ? v57 >> 8 : WTF::StringImpl::hashSlowCase(*v52);
            unsigned int v59 = (v51 + v21 - ((v58 ^ v19) & v50)) & v50;
            if (v56 > v59) {
              break;
            }
            if (v58 == v49 && (WTF::equal(*v52, v108[0], v53) & 1) != 0)
            {
              unsigned int v20 = v91;
              uint64_t v55 = v88;
              uint64_t v17 = v90;
              int v18 = v94;
              goto LABEL_65;
            }
            ++v56;
            uint64_t v51 = (v51 + 1) & v50;
            uint64_t v52 = (WTF::StringImpl **)((char *)v22 + 48 * v51);
            if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v52))
            {
              int v18 = v94;
              if (v56 > 0x7F) {
                int v18 = 1;
              }
              int v54 = v91;
              uint64_t v55 = v88;
              uint64_t v17 = v90;
              goto LABEL_63;
            }
          }
          int v18 = v94;
          if (v56 > 0x7F) {
            int v18 = 1;
          }
          WTF::URL::URL((uint64_t)&v110, (uint64_t *)v52);
          uint64_t v64 = (char *)v22 + 48 * v51;
          uint64_t v66 = (unsigned int *)*((void *)v64 + 5);
          uint64_t v65 = v64 + 40;
          uint64_t v113 = v66;
          void *v65 = 0;
          char v67 = *v52;
          *uint64_t v52 = 0;
          int v54 = v91;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2) {
              WTF::StringImpl::destroy(v67, v63);
            }
            else {
              *(_DWORD *)v67 -= 2;
            }
          }
          *uint64_t v52 = 0;
          WTF::URL::invalidate((WTF::URL *)v52);
          void *v65 = 0;
          WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ScriptBuffer>(WTF::URL &&,WebCore::ScriptBuffer &&)::{lambda(void)#1}>((uint64_t)v52, (uint64_t)v108, (uint64_t **)&v109);
          unsigned int v68 = (v51 + 1) & v50;
          int v69 = (WTF::StringImpl **)((char *)v22 + 48 * v68);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v69) & 1) == 0)
          {
            do
            {
              unsigned int v70 = *((_DWORD *)*v69 + 4);
              if (v70 >= 0x100) {
                unsigned int v71 = v70 >> 8;
              }
              else {
                unsigned int v71 = WTF::StringImpl::hashSlowCase(*v69);
              }
              ++v59;
              unsigned int v72 = (v68 + v21 - ((v71 ^ v19) & v50)) & v50;
              if (v59 > v72)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t *)&v110, (uint64_t)v69);
                unsigned int v59 = v72;
              }
              unsigned int v68 = (v68 + 1) & v50;
              int v69 = (WTF::StringImpl **)((char *)v22 + 48 * v68);
            }
            while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v69));
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t)v69, (uint64_t)&v110);
          uint64_t v73 = v113;
          uint64_t v113 = 0;
          if (v73) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v73, v60);
          }
          long long v74 = v110;
          char v110 = 0;
          uint64_t v55 = v88;
          uint64_t v17 = v90;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2) {
              WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v60);
            }
            else {
              *(_DWORD *)v74 -= 2;
            }
          }
        }
        unsigned int v20 = v54 + 1;
LABEL_65:
        uint64_t v61 = v107;
        uint64_t v107 = 0;
        if (v61) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v61, v60);
        }
        uint64_t v62 = v108[0];
        v108[0] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2) {
            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v60);
          }
          else {
            *(_DWORD *)v62 -= 2;
          }
        }
        while (1)
        {
          v17 += 6;
          if (v17 == v55) {
            break;
          }
          if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v17)) {
            goto LABEL_75;
          }
        }
        uint64_t v17 = v55;
LABEL_75:
        if (v17 == (WTF **)v89) {
          goto LABEL_99;
        }
      }
      unsigned int v23 = 2 * v21;
      if (v21) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 8;
      }
      uint64_t v25 = WTF::fastMalloc((WTF *)(16 * (v24 + 2 * v24)));
      uint64_t v27 = v25;
      if (v24)
      {
        uint64_t v28 = (WTF::URL *)v25;
        uint64_t v29 = v24;
        do
        {
          *(void *)uint64_t v28 = 0;
          WTF::URL::invalidate(v28);
          *((void *)v28 + 5) = 0;
          uint64_t v28 = (WTF::URL *)((char *)v28 + 48);
          --v29;
        }
        while (v29);
      }
      unint64_t v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
      unint64_t v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      unint64_t v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      int v19 = (v32 >> 31) ^ v32;
      if (v21)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v21;
        unsigned int v35 = v23 - 1;
        uint64_t v92 = v21;
        int v93 = v22;
        do
        {
          uint64_t v36 = (WTF::StringImpl **)((char *)v22 + 48 * v33);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v36) & 1) == 0)
          {
            unsigned int v37 = *((_DWORD *)*v36 + 4);
            if (v37 >= 0x100) {
              unsigned int v38 = v37 >> 8;
            }
            else {
              unsigned int v38 = WTF::StringImpl::hashSlowCase(*v36);
            }
            unsigned int v39 = (v38 ^ v19) & v35;
            unsigned int v40 = (WTF::StringImpl **)(v27 + 48 * v39);
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v40) & 1) == 0)
            {
              unsigned int v41 = 0;
              do
              {
                unsigned int v42 = *((_DWORD *)*v40 + 4);
                if (v42 >= 0x100) {
                  unsigned int v43 = v42 >> 8;
                }
                else {
                  unsigned int v43 = WTF::StringImpl::hashSlowCase(*v40);
                }
                unsigned int v44 = (v39 + v24 - ((v43 ^ v19) & v35)) & v35;
                if (v41 > v44)
                {
                  std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t *)v36, (uint64_t)v40);
                  unsigned int v41 = v44;
                }
                ++v41;
                unsigned int v39 = (v39 + 1) & v35;
                unsigned int v40 = (WTF::StringImpl **)(v27 + 48 * v39);
              }
              while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v40));
            }
            WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t)v40, (uint64_t)v36);
            uint64_t v34 = v92;
            uint64_t v22 = v93;
          }
          int v45 = (char *)v22 + 48 * v33;
          uint64_t v46 = (unsigned int *)*((void *)v45 + 5);
          *((void *)v45 + 5) = 0;
          if (v46) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v46, v26);
          }
          uint64_t v47 = *v36;
          *uint64_t v36 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v26);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
          ++v33;
        }
        while (v33 != v34);
      }
      else if (!v22)
      {
        int v18 = 0;
        unsigned int v21 = 8;
        goto LABEL_46;
      }
      WTF::fastFree(v22, v26);
      int v18 = 0;
      unsigned int v21 = v24;
LABEL_46:
      uint64_t v22 = (WTF *)v27;
      goto LABEL_47;
    }
    unsigned int v1 = 0;
LABEL_110:
    uint64_t v100 = 0;
    unsigned int v2 = v101;
    uint64_t v101 = 0;
    char v110 = 0;
    uint64_t v96 = v14;
    uint64_t v111 = 0;
    unint64_t v97 = __PAIR64__(v1, v2);
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v10);
    char v13 = 1;
  }
  else
  {
    LOBYTE(v96) = 0;
  }
  char v98 = v13;
  uint64_t v80 = *(void *)(v85 + 56);
  *(void *)(v85 + 56) = 0;
  uint64_t v99 = v80;
  uint64_t v81 = (WTF *)WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v81 = &unk_1EE9CD158;
  *((void *)v81 + 1) = v12;
  *((unsigned char *)v81 + 16) = 0;
  *((unsigned char *)v81 + 32) = 0;
  if (v84)
  {
    *((void *)v81 + 2) = v96;
    uint64_t v96 = 0;
    unint64_t v97 = 0;
    *((_DWORD *)v81 + 6) = v2;
    *((_DWORD *)v81 + 7) = v1;
    *((unsigned char *)v81 + 32) = 1;
  }
  *((void *)v81 + 5) = v80;
  char v110 = v81;
  WTF::RunLoop::dispatch();
  __n128 result = v110;
  char v110 = 0;
  if (result) {
    __n128 result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
  }
  uint64_t v99 = 0;
  if (v84) {
    __n128 result = (WTF *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96, v82);
  }
  if (v102) {
    return (WTF *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v82);
  }
  return result;
}

unsigned int *WebCore::ScriptBuffer::isolatedCopy(WebCore::ScriptBuffer *this, WebCore::SharedBufferBuilder *a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a2)
  {
    WebCore::SharedBufferBuilder::copy(a2, (uint64_t *)&v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v7 = v3;
  WebCore::SharedBufferBuilder::SharedBufferBuilder();
  __n128 result = v7;
  uint64_t v7 = 0;
  if (result) {
    __n128 result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
  }
  if (v2)
  {
    __n128 result = v6;
    uint64_t v6 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
    }
  }
  return result;
}

WTF **WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin(uint64_t a1)
{
  unsigned int v1 = *(WTF ***)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(void *)a1 + 48 * v2;
  if (!*(_DWORD *)(a1 + 12)) {
    return (WTF **)v3;
  }
  if (v2)
  {
    uint64_t v4 = 48 * v2;
    while (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v1))
    {
      v1 += 6;
      v4 -= 48;
      if (!v4) {
        return (WTF **)v3;
      }
    }
  }
  return v1;
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ScriptBuffer>(WTF::URL &&,WebCore::ScriptBuffer &&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  WTF::URL::operator=(a1, a2);
  uint64_t v6 = **a3;
  **a3 = 0;
  __n128 result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  __n128 result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
  }
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>(uint64_t *a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v13, a1);
  uint64_t v4 = a1[5];
  a1[5] = 0;
  uint64_t v14 = (unsigned int *)v4;
  WTF::URL::operator=((uint64_t)a1, a2);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v7 = (unsigned int *)a1[5];
  a1[5] = v6;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  }
  WTF::URL::operator=(a2, (uint64_t)v13);
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  uint64_t v10 = *(unsigned int **)(a2 + 40);
  *(void *)(a2 + 40) = v9;
  if (v10)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v8);
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v8);
    }
  }
  __n128 result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CD158;
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 32)) {
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD158;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 32)) {
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 40);
  LOBYTE(v6[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a1 + 32))
  {
    v6[0] = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    v6[1] = v3;
    char v7 = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(v2, v6);
  if (v7) {
    return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    int v4 = 0;
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3) {
    goto LABEL_3;
  }
  unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  uint64_t v6 = WTF::fastMalloc((WTF *)((96 * v5) | 0x10));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t v11 = (void *)(v6 + 80);
    do
    {
      *((_OWORD *)v11 - 2) = 0u;
      *((_OWORD *)v11 - 1) = 0u;
      *((_OWORD *)v11 - 4) = 0u;
      *((_OWORD *)v11 - 3) = 0u;
      WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue(v11, v7);
      v11 += 12;
      --v10;
    }
    while (v10);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v3 = v3;
    uint64_t v50 = v3;
    uint64_t v51 = v2;
    while (1)
    {
      uint64_t v14 = v2 + 96 * v12;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_11;
      }
LABEL_32:
      if (++v12 == v3) {
        goto LABEL_37;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_36;
    }
LABEL_11:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v17 = v2 + 96 * v12;
      uint64_t v18 = v17 + 64;
      WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17 + 80, v16);
      WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v19);
      uint64_t v20 = *(unsigned int *)(v14 + 56);
      if (v20 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v20])(&v55, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v21 = *(unsigned int *)(v14 + 24);
      if (v21 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v21])(&v56, v2 + 96 * v12);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v22 = *a1;
      uint64_t v54 = v13;
      if (*a1) {
        int v23 = *(_DWORD *)(v22 - 8);
      }
      else {
        int v23 = 0;
      }
      unsigned int v24 = WTF::computeHash<WebCore::ClientOrigin>(v2 + 96 * v12);
      int v25 = 0;
      do
      {
        unsigned int v26 = v24 & v23;
        uint64_t v27 = v22 + 96 * (v24 & v23);
        int v29 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        unsigned int v24 = ++v25 + v26;
      }
      while (!v29);
      uint64_t v30 = v22 + 96 * v26;
      unint64_t v31 = (void *)(v30 + 64);
      unint64_t v32 = (void *)(v30 + 80);
      WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30 + 80, v28);
      WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v33);
      uint64_t v34 = *(unsigned int *)(v27 + 56);
      if (v34 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v34])(&v59, v27 + 32);
      }
      *(_DWORD *)(v27 + 56) = -1;
      uint64_t v35 = *(unsigned int *)(v27 + 24);
      if (v35 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v35])(&v60, v22 + 96 * v26);
      }
      *(unsigned char *)uint64_t v27 = 0;
      *(_DWORD *)(v27 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v22 + 96 * v26, v2 + 96 * v12);
      *(unsigned char *)(v27 + 32) = 0;
      *(_DWORD *)(v27 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v27 + 32, v14 + 32);
      *unint64_t v31 = 0;
      v31[1] = 0;
      uint64_t v36 = v2 + 96 * v12;
      uint64_t v38 = *(void *)(v36 + 64);
      uint64_t v37 = v36 + 64;
      *(void *)(v36 + 64) = 0;
      *unint64_t v31 = v38;
      int v39 = *(_DWORD *)(v36 + 72);
      *(_DWORD *)(v36 + 72) = 0;
      unsigned int v40 = (_DWORD *)(v22 + 96 * v26);
      v40[18] = v39;
      int v41 = *(_DWORD *)(v36 + 76);
      *(_DWORD *)(v36 + 76) = 0;
      v40[19] = v41;
      void *v32 = 0;
      v32[1] = 0;
      uint64_t v42 = *(void *)(v36 + 80);
      v36 += 80;
      *(void *)uint64_t v36 = 0;
      void *v32 = v42;
      int v43 = *(_DWORD *)(v36 + 8);
      *(_DWORD *)(v36 + 8) = 0;
      v40[22] = v43;
      int v44 = *(_DWORD *)(v36 + 12);
      *(_DWORD *)(v36 + 12) = 0;
      v40[23] = v44;
      WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v45);
      WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v37, v46);
      uint64_t v47 = *(unsigned int *)(v14 + 56);
      if (v47 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v47])(&v57, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v48 = *(unsigned int *)(v14 + 24);
      uint64_t v13 = v54;
      uint64_t v3 = v50;
      if (v48 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v48])(&v58, v14);
      }
      *(_DWORD *)(v14 + 24) = -1;
      uint64_t v2 = v51;
      if (v14 == a2) {
        uint64_t v13 = v27;
      }
    }
    goto LABEL_32;
  }
LABEL_36:
  uint64_t v13 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v13;
  }
  return result;
}

uint64_t WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue(void *a1, void *a2)
{
  v5[0] = 0;
  *a1 = 0;
  v5[1] = 0;
  a1[1] = 0;
  v4[0] = 0;
  a1[2] = 0;
  v4[1] = 0;
  a1[3] = 0;
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, a2);
  return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
}

uint64_t std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    unsigned int v5 = *(WebCore::ServiceWorkerContextData **)a1;
    uint64_t v6 = 592 * v4;
    do
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v5, (WTF::StringImpl *)a2);
      unsigned int v5 = (WebCore::ServiceWorkerContextData *)(v7 + 592);
      v6 -= 592;
    }
    while (v6);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, (_DWORD *)a2);
  unsigned int v9 = *(_DWORD *)(a1 + 28);
  if (v9) {
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(void *)(a1 + 16) + 72 * v9));
  }
  uint64_t v10 = *(WTF **)(a1 + 16);
  if (v10)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v10, v8);
  }
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 24) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 28) = v11;
  return a1;
}

void WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationKey>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 72 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4, v3);
  WTF::URL::URL(v4 + 32, (uint64_t *)(v3 + 32));
  ++*(_DWORD *)(a1 + 12);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = a1 + 96 * v3;
  if (v4 != a2)
  {
    while (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v2))
    {
      v2 += 96;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0xAAAAAAA)
  {
    __break(0xC471u);
    JUMPOUT(0x198CB91C8);
  }
  uint64_t v4 = *(WTF **)(a1 + 16);
  int v5 = 24 * v2 + 24;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(24 * v2 + 24));
  *(_DWORD *)(a1 + 24) = (v5 & 0xFFFFFFF8) / 0x18;
  *(void *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 <= v7)
  {
    uint64_t result = WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4 + 24 * *(void *)a1, (uint64_t *)v4 + 3 * v7, &v6[3 * *(void *)a1]);
    if (!v4) {
      return result;
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4, (uint64_t *)v4 + 3 * v7, v6);
    uint64_t v8 = *(void *)a1 - v1 + *(unsigned int *)(a1 + 24);
    uint64_t result = WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4 + 24 * *(void *)a1, (uint64_t *)v4 + 3 * v1, (void *)(*(void *)(a1 + 16) + 24 * v8));
    *(void *)a1 = v8;
    if (!v4) {
      return result;
    }
  }
  if (*(WTF **)(a1 + 16) == v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }

  return WTF::fastFree(v4, v10);
}

uint64_t WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      v5[1] = 0;
      *a3 = v6;
      a3[1] = v7;
      a3[2] = v5[2];
      uint64_t result = v5[1];
      v5[1] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_198CBB198(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CBBA0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((a21 & 0x8000000000000) != 0)
  {
    uint64_t v22 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CBBEEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CBC49C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198CBC688(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198CBC95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebCore::IOSurface *a12, uint64_t a13, WebCore::IOSurface *a14)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  WTF::RefCounted<WebKit::ViewSnapshot>::deref(v14);
  if (a14)
  {
    WebCore::IOSurface::~IOSurface(a14);
    WTF::fastFree(v16, v17);
  }
  _Unwind_Resume(a1);
}

void sub_198CBE288(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    uint64_t v14 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    WebCore::Color::operator=();
  }
  else
  {
    WebCore::Color::Color();
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_198CBEB00(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  WTF::fastFree(v10, a2);
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

BOOL WebCore::FloatSize::isZero(WebCore::FloatSize *this)
{
  float v1 = *(float *)this;
  if (*(float *)this != 0.0)
  {
    if (v1 < 0.0) {
      float v1 = -v1;
    }
    if (v1 >= 0.00000011921) {
      return 0;
    }
  }
  float v2 = *((float *)this + 1);
  if (v2 == 0.0)
  {
    float v2 = 0.0;
  }
  else if (v2 < 0.0)
  {
    float v2 = -v2;
  }
  return v2 < 0.00000011921;
}

void sub_198CBF000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_198CBF54C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, WTF *a12, id location, WTF *a14)
{
  if (a11) {
    (*(void (**)(id))(*(void *)a11 + 8))(a11);
  }
  uint64_t v16 = (unsigned int *)a14;
  a14 = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, a2);
  }
  objc_destroyWeak(&location);
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v17);
  }
  _Unwind_Resume(a1);
}

void sub_198CBF67C()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x198CBF64CLL);
}

CFTypeRef __copy_helper_block_e8_32c90_ZTSKZ76__WKWebView_WKViewInternalIOS___addUpdateVisibleContentRectPreCommitHandler_E4__11(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c90_ZTSKZ76__WKWebView_WKViewInternalIOS___addUpdateVisibleContentRectPreCommitHandler_E4__11(uint64_t a1)
{
  float v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198CC04C0(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 109) = v2;
  _Unwind_Resume(a1);
}

void sub_198CC07E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC0D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_198CC0E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c111_ZTSKZ97__WKWebView_WKViewInternalIOS___firePresentationUpdateForPendingStableStatePresentationCallbacks_E4__15(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSKZ97__WKWebView_WKViewInternalIOS___firePresentationUpdateForPendingStableStatePresentationCallbacks_E4__15(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198CC14E8(_Unwind_Exception *exception_object)
{
  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
      {
LABEL_8:
        if (v1) {
          CFRelease(v1);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      CFRelease(v2);
      goto LABEL_8;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_198CC176C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198CC18AC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c62_ZTSKZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_E4__18(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c62_ZTSKZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_E4__18(uint64_t a1)
{
}

void sub_198CC2598(_Unwind_Exception *a1, void *a2)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c74_ZTSKZ60__WKWebView_WKViewInternalIOS___updatePageLoadObserverState_E4__20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c74_ZTSKZ60__WKWebView_WKViewInternalIOS___updatePageLoadObserverState_E4__20(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198CC2954(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a24, a2);
  _Unwind_Resume(a1);
}

void sub_198CC2C4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebPageProxy::EventAttribution,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_198CC2F8C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a24, a2);
  _Unwind_Resume(a1);
}

void sub_198CC354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_198CC37E4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198CC394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKWebView_WKPrivateIOS___requestActivatedElementAtPosition_completionBlock__E4__24(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKWebView_WKPrivateIOS___requestActivatedElementAtPosition_completionBlock__E4__24(uint64_t a1)
{
}

void sub_198CC4270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, WebCore::IOSurface *a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef a31)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    CFRelease(a12);
  }
  if (a13)
  {
    WebCore::IOSurface::~IOSurface(a13);
    WTF::fastFree(v33, v34);
  }
  if (a31) {
    CFRelease(a31);
  }
  uint64_t v35 = *(WebCore::IOSurface **)(v31 - 184);
  *(void *)(v31 - 184) = 0;
  if (v35)
  {
    WebCore::IOSurface::~IOSurface(v35);
    WTF::fastFree(v36, v37);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_198CC44F8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c66_ZTSKZ52__WKWebView_WKPrivateIOS___retainActiveFocusedState_E4__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_e8_32c107_ZTSKZ93__WKWebView_WKPrivateIOS___becomeFirstResponderWithSelectionMovingForward_completionHandler__E4__29(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_198CC4924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void sub_198CC4A18(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKWebView_WKPrivateIOS___accessibilityRetrieveRectsAtSelectionOffset_withText_completionHandler__E4__30(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKWebView_WKPrivateIOS___accessibilityRetrieveRectsAtSelectionOffset_withText_completionHandler__E4__30(uint64_t a1)
{
}

void sub_198CC4B78(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198CC4C40(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198CC4F50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198CC5078(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198CC5378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  _Block_release(aBlock);
  objc_destroyWeak(v16);
  _Block_release(a10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_198CC55C0(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c91_ZTSKZ77__WKWebView_WKTestingIOS___requestTextInputContextsInRect_completionHandler__E4__38(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_198CC566C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c91_ZTSKZ77__WKWebView_WKTestingIOS___requestTextInputContextsInRect_completionHandler__E4__38(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  _Block_release(*(const void **)(a1 + 40));

  objc_destroyWeak(v1);
}

void sub_198CC59D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

NSUInteger dumpUIView(WTF::TextStream *a1, UIView *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  WTF::TextStream::operator<<();
  uint64_t v4 = (objc_class *)objc_opt_class();
  int v5 = NSStringFromClass(v4);
  MEMORY[0x19972EAD0](&v45, v5);
  if (v45)
  {
    long long v6 = (unsigned __int8 *)*((void *)v45 + 1);
    unint64_t v7 = *((unsigned int *)v45 + 1) | ((unint64_t)((*((_DWORD *)v45 + 4) >> 2) & 1) << 32);
  }
  else
  {
    long long v6 = 0;
    unint64_t v7 = 0x100000000;
  }
  uint64_t v8 = 0;
  unsigned int v9 = (char **)&__block_descriptor_tmp_0;
  while (!WTF::operator==(v6, v7, (unsigned __int8 *)(&allowListedClassToString(UIView *)::allowedClassesArray)[v8], (uint64_t)(&allowListedClassToString(UIView *)::allowedClassesArray)[v8 + 1]))
  {
    v8 += 2;
    if (v8 == 28) {
      goto LABEL_8;
    }
  }
  unsigned int v9 = &(&allowListedClassToString(UIView *)::allowedClassesArray)[v8];
LABEL_8:
  if ((char *)v9 - (char *)&allowListedClassToString(UIView *)::allowedClassesArray == 224)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v11 = v45;
    int v44 = v46;
    int v45 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    int v44 = v45;
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  uint64_t v13 = v44;
  int v44 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  [(CALayer *)[(UIView *)a2 layer] bounds];
  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, (uint64_t)" width: ", 9, (uint64_t)" height: ", 10, &v46, 0x5Du);
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  int v15 = v46;
  uint64_t v46 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  [(CALayer *)[(UIView *)a2 layer] position];
  if (v16 != 0.0 || ([(CALayer *)[(UIView *)a2 layer] position], v17 != 0.0))
  {
    [(CALayer *)[(UIView *)a2 layer] position];
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, &v46, v18, v18);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    uint64_t v20 = v46;
    uint64_t v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  [(CALayer *)[(UIView *)a2 layer] zPosition];
  if (v21 != 0.0)
  {
    [(CALayer *)[(UIView *)a2 layer] zPosition];
    uint64_t v46 = v22;
    WTF::tryMakeString<double>(&v45);
    if (!v45) {
      goto LABEL_57;
    }
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    unsigned int v24 = v45;
    int v45 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  [(CALayer *)[(UIView *)a2 layer] anchorPoint];
  if (v25 != 0.5 || ([(CALayer *)[(UIView *)a2 layer] anchorPoint], v26 != 0.5))
  {
    [(CALayer *)[(UIView *)a2 layer] anchorPoint];
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, &v46, v27, v27);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    int v29 = v46;
    uint64_t v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  [(CALayer *)[(UIView *)a2 layer] anchorPointZ];
  if (v30 != 0.0)
  {
    [(CALayer *)[(UIView *)a2 layer] anchorPointZ];
    uint64_t v46 = v31;
    WTF::tryMakeString<double>(&v45);
    if (v45)
    {
      WTF::TextStream::dumpProperty<WTF::String>(a1);
      uint64_t v33 = v45;
      int v45 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v32);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      goto LABEL_46;
    }
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x198CC5F64);
  }
LABEL_46:
  NSUInteger result = [(NSArray *)[(UIView *)a2 subviews] count];
  if (result)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v35 = [(UIView *)a2 subviews];
    uint64_t v36 = [(NSArray *)v35 countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v36)
    {
      uint64_t v37 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v41 != v37) {
            objc_enumerationMutation(v35);
          }
          int v39 = *(UIView **)(*((void *)&v40 + 1) + 8 * i);
          WTF::TextStream::startGroup(a1);
          dumpUIView(a1, v39);
          WTF::TextStream::endGroup(a1);
        }
        uint64_t v36 = [(NSArray *)v35 countByEnumeratingWithState:&v40 objects:v47 count:16];
      }
      while (v36);
    }
    return WTF::TextStream::endGroup(a1);
  }
  return result;
}

void sub_198CC5F70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC61F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC6E30(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198CC6FA8(_Unwind_Exception *a1)
{
  char v2 = v1;
  _Block_release(v2);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticationChallengeProxy::sendClientCertificateCredentialOverXpc(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::Credential *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v8, "message-name", "client-certificate-credential");
  xpc_dictionary_set_uint64(v8, "challenge-id", a3);
  xpc_dictionary_set_value(v8, "sec-key-proxy-endpoint", (xpc_object_t)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 16), "endpoint"), "_endpoint"));
  xpc_object_t v9 = xpc_array_create(0, 0);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v10 = objc_msgSend((id)WebCore::Credential::nsCredential(a4), "certificates", 0);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v20;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v10);
        }
        CFDataRef v14 = SecCertificateCopyData(*(SecCertificateRef *)(*((void *)&v19 + 1) + 8 * v13));
        BytePtr = CFDataGetBytePtr(v14);
        size_t Length = CFDataGetLength(v14);
        xpc_object_t v17 = xpc_data_create(BytePtr, Length);
        xpc_array_append_value(v9, v17);
        if (v17) {

        }
        if (v14) {
          CFRelease(v14);
        }
        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }
  xpc_dictionary_set_value(v8, "certificates", v9);
  uint64_t v18 = [(id)WebCore::Credential::nsCredential(a4) persistence];
  xpc_dictionary_set_uint64(v8, "persistence", v18);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 352), v8);
  if (v9) {

  }
  if (v8) {
}
  }

void sub_198CC7204(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void sub_198CC7264()
{
  if (v0) {
    JUMPOUT(0x198CC726CLL);
  }
  JUMPOUT(0x198CC7230);
}

BOOL WebKit::SecKeyProxyStore::initialize(WebKit::SecKeyProxyStore *this, const WebCore::Credential *a2)
{
  if ((WebCore::Credential::isEmpty(a2) & 1) == 0)
  {
    if ([(id)WebCore::Credential::nsCredential(a2) identity])
    {
      uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F3B450]), "initWithIdentity:", objc_msgSend((id)WebCore::Credential::nsCredential(a2), "identity"));
      int v5 = (const void *)*((void *)this + 2);
      *((void *)this + 2) = v4;
      if (v5) {
        CFRelease(v5);
      }
    }
  }
  return *((void *)this + 2) != 0;
}

WTF *WebKit::WebAutomationSession::platformGetBase64EncodedPNGData@<X0>(unsigned char *a1@<X8>)
{
  WebCore::ShareableBitmap::create();
  NSUInteger result = v6;
  if (v6)
  {
    WebCore::ShareableBitmap::makeCGImage();
    WebKit::getBase64EncodedPNGData((CGImageRef *)&cf, (uint64_t)a1);
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
    NSUInteger result = v6;
    long long v6 = 0;
    if (result) {
      return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v3);
    }
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
  return result;
}

void sub_198CC7390(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::getBase64EncodedPNGData(CGImageRef *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4 = (__CFData *)objc_alloc_init(MEMORY[0x1E4F1CA58]);
  int v5 = CGImageDestinationCreateWithData(v4, (CFStringRef)*MEMORY[0x1E4F22678], 1uLL, 0);
  long long v6 = v5;
  if (v5)
  {
    CGImageDestinationAddImage(v5, *a1, 0);
    CGImageDestinationFinalize(v6);
    MEMORY[0x19972EAD0](&v7, [(__CFData *)v4 base64EncodedStringWithOptions:0]);
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = 1;
    CFRelease(v6);
    if (!v4) {
      return;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (!v4) {
      return;
    }
  }
  CFRelease(v4);
}

void sub_198CC748C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(WebKit::WebAutomationSession *this@<X0>, unsigned char *a2@<X8>)
{
  CFTypeRef v4 = (WebCore::IOSurface *)*((void *)this + 2);
  if (v4)
  {
    WebCore::IOSurface::createPlatformContext(*((WebCore::IOSurface **)this + 2));
    WebCore::IOSurface::createImage((uint64_t *)&v7, v4, (CGContext *)cf);
    WebKit::getBase64EncodedPNGData((CGImageRef *)&v7, (uint64_t)a2);
    CFTypeRef v5 = v7;
    CFTypeRef v7 = 0;
    if (v5) {
      CFRelease(v5);
    }
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void sub_198CC7544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebAutomationSession::platformGenerateLocalFilePathForRemoteFile(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, unsigned char *a3@<X8>)
{
  id v7 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  if (*(void *)a2) {
    xpc_object_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    xpc_object_t v8 = &stru_1EEA10550;
  }
  uint64_t v9 = [v7 initWithBase64EncodedString:v8 options:0];
  if (v9)
  {
    uint64_t v11 = (void *)v9;
    TemporaryDirectory = (void *)WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)@"WebDriver", v10);
    uint64_t v13 = (void *)MEMORY[0x1E4F1CB10];
    if (*(void *)a1) {
      CFDataRef v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      CFDataRef v14 = &stru_1EEA10550;
    }
    uint64_t v15 = objc_msgSend(TemporaryDirectory, "stringByAppendingPathComponent:", objc_msgSend((id)objc_msgSend(v13, "fileURLWithPath:isDirectory:", v14, 0), "lastPathComponent"));
    uint64_t v17 = 0;
    [v11 writeToFile:v15 options:1 error:&v17];
    if (v17)
    {
      *a3 = 0;
      a3[8] = 0;
    }
    else
    {
      MEMORY[0x19972EAD0](&v16, v15);
      *(void *)a3 = v16;
      a3[8] = 1;
    }
    CFRelease(v11);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void sub_198CC76AC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAutomationSession::charCodeForVirtualKey(uint64_t a1, int a2)
{
  if ((a2 - 4) > 0x65) {
    return 0;
  }
  else {
    return (dword_1994F68F4[a2 - 4] | dword_1994F675C[a2 - 4]) | dword_1994F6A8C[a2 - 4];
  }
}

uint64_t WebKit::WebAutomationSession::charCodeIgnoringModifiersForVirtualKey(uint64_t a1, int a2)
{
  if (a2 == 88)
  {
    int v2 = 0x10000;
    int v3 = 56;
  }
  else if (a2 == 89)
  {
    int v2 = 0x10000;
    int v3 = 61;
  }
  else
  {
    uint64_t v4 = WebKit::WebAutomationSession::charCodeForVirtualKey(a1, a2);
    int v2 = v4 & 0x10000;
    int v3 = (unsigned __int16)v4;
  }
  return v2 | v3;
}

__n128 __copy_helper_block_e8_32c84_ZTSKZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverrideE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void sub_198CC77D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC78B4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198CC7AF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_ENK4__18clEv_block_invoke(uint64_t a1, void *a2)
{
  return [a2 removeFromSuperview];
}

void sub_198CC7C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC7F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZL21pageLoadObserverQueuev_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  global_queue = dispatch_get_global_queue(9, 0);
  dispatch_queue_t result = dispatch_queue_create_with_target_V2("com.apple.WebKit.pageLoadObserver", v0, global_queue);
  qword_1EB359948 = (uint64_t)result;
  return result;
}

uint64_t ___ZL26sendPageLoadAnalyticsEventON3WTF9RetainPtrI8NSStringEENSt3__18optionalI13audit_token_tEE_block_invoke(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

const void *WTF::dynamic_cf_cast<__CFArray const*>(const void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFArrayGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

WTF *WTF::RefCounted<anonymous namespace'::WebKitClientAppInfo>::deref(WTF *this, void *a2)
{
  CFTypeID v2 = this;
  if (*(_DWORD *)this == 1)
  {
    int v3 = (const void *)*((void *)this + 7);
    *((void *)v2 + 7) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)*((void *)v2 + 5);
    *((void *)v2 + 5) = 0;
    if (v4) {
      CFRelease(v4);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t std::__optional_destruct_base<WebKit::WebPageProxy::EventAttribution,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    CFTypeRef v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSString *,NSString *,BOOL *)>::fromCallable<viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0>(viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0)::{lambda(void *,NSString *,NSString *,BOOL *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"-[WKWebView _overrideViewportWithArguments:]: Keys and values must all be NSStrings."];
  }
  MEMORY[0x19972EAD0](&v11, a2);
  MEMORY[0x19972EAD0](&v10, a3);
  CFTypeRef v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9CD530;
  uint64_t v9 = v5;
  WebCore::setViewportFeature();
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  id v7 = v10;
  uint64_t v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  dispatch_queue_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CC82C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0::operator() const(NSString *,NSString *,BOOL *)::{lambda(WebCore::ViewportErrorCode,WTF::String const&)#1},void,WebCore::ViewportErrorCode,WTF::String const&>::call()
{
  WTF::String::utf8();
  if (v3) {
    uint64_t v0 = (char *)v3 + 16;
  }
  else {
    uint64_t v0 = 0;
  }
  NSLog(&cfstr_WkwebviewOverr_0.isa, v0);
  uint64_t result = (uint64_t)v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      return WTF::fastFree(v3, v1);
    }
    else {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

void sub_198CC83DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC8700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::IOSurface *a10)
{
  if (a10)
  {
    WebCore::IOSurface::~IOSurface(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC889C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198CC8A80(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198CC9148(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198CC94E4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::OriginStorageManager::StorageBucket::StorageBucket(uint64_t result, _DWORD *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, char a7)
{
  if (a2) {
    *a2 += 2;
  }
  *(void *)uint64_t result = a2;
  id v7 = *a3;
  if (*a3) {
    *v7 += 2;
  }
  *(void *)(result + 8) = v7;
  *(unsigned char *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  xpc_object_t v8 = *a4;
  if (*a4) {
    *v8 += 2;
  }
  *(void *)(result + 40) = v8;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  uint64_t v9 = *a5;
  if (*a5) {
    *v9 += 2;
  }
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = v9;
  uint64_t v10 = *a6;
  if (*a6) {
    *v10 += 2;
  }
  *(void *)(result + 96) = v10;
  *(void *)(result + 104) = 0;
  *(unsigned char *)(result + 112) = a7;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::connectionClosed(void *a1, WTF::StringImpl *a2)
{
  uint64_t v4 = a1[3];
  if (v4) {
    WebKit::FileSystemStorageManager::connectionClosed(v4, a2);
  }
  uint64_t v5 = a1[4];
  if (v5) {
    WebKit::LocalStorageManager::connectionClosed(v5, (uint64_t)a2);
  }
  uint64_t v6 = a1[7];
  if (v6) {
    WebKit::SessionStorageManager::connectionClosed(*(void *)(v6 + 8), (uint64_t)a2);
  }
  uint64_t result = a1[11];
  if (result)
  {
    return WebKit::CacheStorageManager::connectionClosed(result, (uint64_t)a2);
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::connectionClosed(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
LABEL_10:
    uint64_t v4 = (void *)(result + 16 * v3);
    goto LABEL_11;
  }
  uint64_t v3 = *(unsigned int *)(result - 4);
  uint64_t v4 = (void *)(result + 16 * v3);
  if (!*(_DWORD *)(result - 12))
  {
    uint64_t v5 = (void *)(result + 16 * v3);
    goto LABEL_10;
  }
  uint64_t v5 = (void *)result;
  if (v3)
  {
    uint64_t v6 = 16 * v3;
    uint64_t v5 = (void *)result;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        uint64_t v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (result) {
    id v7 = (void *)(result + 16 * *(unsigned int *)(result - 4));
  }
  else {
    id v7 = 0;
  }
  while (v5 != v7)
  {
    uint64_t result = WebKit::StorageAreaBase::removeListener(v5[1], a2);
    xpc_object_t v8 = v5 + 2;
    uint64_t v5 = v4;
    if (v8 != v4)
    {
      uint64_t v5 = v8;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::toStorageType(uint64_t a1, int a2)
{
  if (a2 < 0x4000)
  {
    if (a2 == 16)
    {
      int v2 = 1;
      int v3 = 2;
      return v3 | (v2 << 8);
    }
    if (a2 != 32)
    {
      if (a2 == 128)
      {
        int v2 = 1;
        int v3 = 3;
        return v3 | (v2 << 8);
      }
LABEL_16:
      int v3 = 0;
      int v2 = 0;
      return v3 | (v2 << 8);
    }
    int v3 = 1;
LABEL_18:
    int v2 = 1;
    return v3 | (v2 << 8);
  }
  if (a2 >= 0x80000)
  {
    if (a2 != 0x80000)
    {
      if (a2 == 0x100000)
      {
        int v2 = 1;
        int v3 = 5;
        return v3 | (v2 << 8);
      }
      goto LABEL_16;
    }
    int v3 = 0;
    goto LABEL_18;
  }
  if (a2 == 0x4000)
  {
    int v2 = 1;
    int v3 = 6;
    return v3 | (v2 << 8);
  }
  if (a2 != 0x8000) {
    goto LABEL_16;
  }
  int v2 = 1;
  int v3 = 4;
  return v3 | (v2 << 8);
}

uint64_t WebKit::OriginStorageManager::StorageBucket::typeStoragePath@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result;
  switch((int)a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v5 = v8;
      break;
    default:
      uint64_t v5 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
      if (*MEMORY[0x1E4F30980]) {
        *(_DWORD *)v5 += 2;
      }
      break;
  }
  if (*(void *)v3)
  {
    BOOL v6 = !*(_DWORD *)(*(void *)v3 + 4) || v5 == 0;
    if (!v6 && *((_DWORD *)v5 + 1))
    {
      uint64_t result = WTF::FileSystemImpl::pathByAppendingComponent();
LABEL_10:
      if (*(_DWORD *)v5 == 2) {
        return WTF::StringImpl::destroy(v5, a2);
      }
      *(_DWORD *)v5 -= 2;
      return result;
    }
  }
  id v7 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v7 += 2;
  }
  *a3 = v7;
  if (v5) {
    goto LABEL_10;
  }
  return result;
}

WebKit::FileSystemStorageManager *WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager(uint64_t a1, atomic_uint *a2, uint64_t *a3)
{
  uint64_t v4 = (WebKit::FileSystemStorageManager **)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::typeStoragePath(a1, 0, &v13);
    id v7 = (WebKit::FileSystemStorageManager *)WTF::fastMalloc((WTF *)0x38);
    *(void *)id v7 = 0;
    xpc_object_t v8 = v13;
    uint64_t v13 = 0;
    *((void *)v7 + 1) = v8;
    *((void *)v7 + 2) = a2;
    atomic_fetch_add(a2, 1u);
    uint64_t v9 = *a3;
    *a3 = 0;
    *((void *)v7 + 3) = v9;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100](v4, v7);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return *v4;
  }
  return (WebKit::FileSystemStorageManager *)v3;
}

WebKit::LocalStorageManager *WebKit::OriginStorageManager::StorageBucket::localStorageManager(WebKit::OriginStorageManager::StorageBucket *this, atomic_uint *a2)
{
  uint64_t v4 = (WebKit::LocalStorageManager **)((char *)this + 32);
  uint64_t result = (WebKit::LocalStorageManager *)*((void *)this + 4);
  if (!result)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(this, &v9);
    BOOL v6 = (WebKit::LocalStorageManager *)WTF::fastMalloc((WTF *)0x20);
    WebKit::LocalStorageManager::LocalStorageManager(v6, (_DWORD **)&v9, a2);
    std::unique_ptr<WebKit::LocalStorageManager>::reset[abi:sn180100](v4, v6);
    xpc_object_t v8 = v9;
    uint64_t v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    return *v4;
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath@<X0>(WTF::StringImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t v3 = (_DWORD *)*((void *)this + 6);
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v5 = this;
  if (!*((unsigned char *)this + 112))
  {
    uint64_t v11 = (WTF::StringImpl **)((char *)this + 40);
    goto LABEL_19;
  }
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4))
  {
    uint64_t v11 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
LABEL_19:
    this = (WTF::StringImpl *)WTF::String::operator=((uint64_t *)this + 6, v11);
    goto LABEL_15;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)1, &v20);
  WebKit::LocalStorageManager::localStorageFilePath((uint64_t)&v20, &v19);
  uint64_t v7 = *((void *)v5 + 5);
  if (v7
    && *(_DWORD *)(v7 + 4)
    && (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v19, v6) & 1) == 0
    && WTF::FileSystemImpl::fileExists((WTF::StringImpl *)((char *)v5 + 40), v8))
  {
    uint64_t v12 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      uint64_t v14 = v18 ? (uint64_t)v18 + 16 : 0;
      *(_DWORD *)buf = 134218242;
      long long v22 = v5;
      __int16 v23 = 2082;
      uint64_t v24 = v14;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedLocalStoragePath New path '%{public}s'", buf, 0x16u);
      if (v18)
      {
        if (*(_DWORD *)v18 == 1) {
          WTF::fastFree(v18, v13);
        }
        else {
          --*(_DWORD *)v18;
        }
      }
    }
    WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v20, (const WTF::String *)v13);
    if ((WebCore::SQLiteFileSystem::moveDatabaseFile((WTF::StringImpl *)((char *)v5 + 40), (const WTF::String *)&v19, v15) & 1) == 0&& (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v19, v16) & 1) == 0)
    {
      uint64_t v17 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        long long v22 = v5;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%p - StorageBucket::resolvedLocalStoragePath Fails to migrate file to new path", buf, 0xCu);
      }
    }
  }
  WTF::String::operator=(v4, &v19);
  uint64_t v10 = v19;
  long long v19 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  this = v20;
  long long v20 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_15:
  uint64_t v3 = (_DWORD *)*v4;
  if (*v4) {
LABEL_16:
  }
    *v3 += 2;
  *a2 = v3;
  return this;
}

WTF *WebKit::OriginStorageManager::StorageBucket::sessionStorageManager(uint64_t a1, atomic_uint *a2)
{
  uint64_t v3 = (WTF **)(a1 + 56);
  uint64_t result = *(WTF **)(a1 + 56);
  if (!result)
  {
    uint64_t result = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t result = a2;
    atomic_fetch_add(a2, 1u);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    uint64_t v5 = *v3;
    *uint64_t v3 = result;
    if (v5)
    {
      std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100]((int)v3, v5);
      return *v3;
    }
  }
  return result;
}

WebKit::IDBStorageManager *WebKit::OriginStorageManager::StorageBucket::idbStorageManager(uint64_t a1, atomic_uint *a2, uint64_t *a3)
{
  uint64_t v4 = (WebKit::IDBStorageManager **)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((char *)a1, &v12);
    uint64_t v7 = (WebKit::IDBStorageManager *)WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v7 = &unk_1EE9CC6A8;
    *((void *)v7 + 1) = 0;
    xpc_object_t v8 = v12;
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    *((void *)v7 + 2) = v8;
    *((void *)v7 + 3) = a2;
    atomic_fetch_add(a2, 1u);
    uint64_t v9 = *a3;
    *a3 = 0;
    *((void *)v7 + 4) = v9;
    *((void *)v7 + 5) = 0;
    std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100](v4, v7);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    return *v4;
  }
  return (WebKit::IDBStorageManager *)v3;
}

char *WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath@<X0>(char *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(this + 80);
  uint64_t v3 = (_DWORD *)*((void *)this + 10);
  if (v3) {
    goto LABEL_22;
  }
  uint64_t v5 = this;
  if (this[112])
  {
    WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)3, &v22);
    if (WebKit::IDBStorageManager::migrateOriginData((WebKit::IDBStorageManager *)(v5 + 72), (const WTF::String *)&v22, v6))
    {
      xpc_object_t v8 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        uint64_t v9 = v20 ? (char *)v20 + 16 : 0;
        *(_DWORD *)buf = 134218242;
        uint64_t v24 = v5;
        __int16 v25 = 2082;
        double v26 = v9;
        _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedIDBStoragePath New path '%{public}s'", buf, 0x16u);
        uint64_t v11 = v20;
        long long v20 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1) {
            WTF::fastFree(v11, v10);
          }
          else {
            --*(_DWORD *)v11;
          }
        }
      }
    }
    else if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v22, v7))
    {
      WTF::FileSystemImpl::listDirectory((uint64_t *)&v20, (WTF::FileSystemImpl *)(v5 + 72), v12);
      WTF::FileSystemImpl::listDirectory(&v18, (WTF::FileSystemImpl *)&v22, v13);
      uint64_t v14 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218496;
        uint64_t v24 = v5;
        __int16 v25 = 2048;
        double v26 = (char *)v19;
        __int16 v27 = 2048;
        uint64_t v28 = v21;
        _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - StorageBucket::resolvedLocalStoragePath Fails to migrate all databases to new path: %zu migrated, %zu left", buf, 0x20u);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v15);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
    }
    WTF::String::operator=(v4, &v22);
    this = (char *)v22;
    long long v22 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        this = (char *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    this = (char *)WTF::String::operator=((uint64_t *)this + 10, (WTF::StringImpl **)this + 9);
  }
  uint64_t v3 = (_DWORD *)*v4;
  if (*v4) {
LABEL_22:
  }
    *v3 += 2;
  *a2 = v3;
  return this;
}

WebKit::CacheStorageManager *WebKit::OriginStorageManager::StorageBucket::cacheStorageManager(WebKit::OriginStorageManager::StorageBucket *this, atomic_uint *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (WebKit::CacheStorageManager **)((char *)this + 88);
  uint64_t result = (WebKit::CacheStorageManager *)*((void *)this + 11);
  if (!result)
  {
    v14[0] = 0;
    v14[64] = 0;
    if (*((unsigned __int8 *)this + 112) <= 1u) {
      std::optional<WebCore::ClientOrigin>::operator=[abi:sn180100]<WebCore::ClientOrigin const&,void>((uint64_t)v14, a3);
    }
    WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((uint64_t)this, &v13);
    uint64_t v11 = (WebKit::CacheStorageManager *)WTF::fastMalloc((WTF *)0xA8);
    WebKit::CacheStorageManager::CacheStorageManager((uint64_t)v11, &v13, a2, (const WTF::String *)v14, a4, a5);
    std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100](v7, v11);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
    return *v7;
  }
  return result;
}

uint64_t std::optional<WebCore::ClientOrigin>::operator=[abi:sn180100]<WebCore::ClientOrigin const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 32, a2 + 32);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    *(unsigned char *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 32, a2 + 32);
    *(unsigned char *)(a1 + 64) = 1;
  }
  return a1;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (WTF::FileSystemImpl *)(this + 104);
  uint64_t v3 = *(_DWORD **)(this + 104);
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v5 = this;
  unsigned int v6 = *(unsigned __int8 *)(this + 112);
  if (v6 < 2)
  {
    this = (uint64_t)WTF::String::operator=((uint64_t *)(this + 104), (WTF::StringImpl **)(this + 96));
    goto LABEL_4;
  }
  if (v6 != 2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath(this, (WTF::StringImpl *)4, buf);
  xpc_object_t v8 = *(_DWORD **)buf;
  *(void *)buf = 0;
  this = *(void *)(v5 + 104);
  *(void *)(v5 + 104) = v8;
  if (this)
  {
    int v9 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      this = *(void *)buf;
      *(void *)buf = 0;
      if (!this)
      {
LABEL_14:
        xpc_object_t v8 = *(_DWORD **)v4;
        goto LABEL_15;
      }
      int v9 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
        goto LABEL_14;
      }
    }
    *(_DWORD *)this = v9;
    goto LABEL_14;
  }
LABEL_15:
  if (v8)
  {
    if (v8[1])
    {
      uint64_t v10 = *(void *)(v5 + 96);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 4))
        {
          this = WTF::FileSystemImpl::fileExists(v4, v7);
          if ((this & 1) == 0)
          {
            this = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(v5 + 96), v11);
            if (this)
            {
              uint64_t v12 = qword_1EB3585F0;
              if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
              {
                WTF::String::utf8();
                if (v16) {
                  uint64_t v14 = (char *)v16 + 16;
                }
                else {
                  uint64_t v14 = 0;
                }
                *(_DWORD *)buf = 134218242;
                *(void *)&uint8_t buf[4] = v5;
                __int16 v18 = 2082;
                unsigned int v19 = v14;
                _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedCacheStoragePath New path '%{public}s'", buf, 0x16u);
                if (v16)
                {
                  if (*(_DWORD *)v16 == 1) {
                    WTF::fastFree(v16, v15);
                  }
                  else {
                    --*(_DWORD *)v16;
                  }
                }
              }
              this = WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)(v5 + 96), v4, v13);
            }
          }
        }
      }
    }
  }
LABEL_4:
  uint64_t v3 = *(_DWORD **)v4;
  if (*(void *)v4) {
LABEL_5:
  }
    *v3 += 2;
LABEL_6:
  *a2 = v3;
  return this;
}

WebKit::BackgroundFetchStoreManager *WebKit::OriginStorageManager::StorageBucket::backgroundFetchManager(WebKit::BackgroundFetchStoreManager **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1 + 15;
  uint64_t v3 = a1[15];
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath((WTF::StringImpl *)a1, &v10);
    uint64_t v7 = (WebKit::BackgroundFetchStoreManager *)WTF::fastMalloc((WTF *)0x30);
    WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(v7, (_DWORD **)&v10, a2, a3);
    std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100](v4, v7);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    return *v4;
  }
  return v3;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 13);
  if (v3) {
    goto LABEL_9;
  }
  uint64_t v4 = this;
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)5, &v8);
  uint64_t v3 = v8;
  xpc_object_t v8 = 0;
  this = (WTF::StringImpl *)*((void *)v4 + 13);
  *((void *)v4 + 13) = v3;
  if (!this) {
    goto LABEL_8;
  }
  int v6 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
  {
LABEL_6:
    *(_DWORD *)this = v6;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(this, v5);
  this = v8;
  xpc_object_t v8 = 0;
  if (this)
  {
    int v6 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v3 = (WTF::StringImpl *)*((void *)v4 + 13);
LABEL_8:
  if (v3) {
LABEL_9:
  }
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(WebKit::OriginStorageManager::StorageBucket *this)
{
  if (*((unsigned __int8 *)this + 112) <= 1u)
  {
    uint64_t result = 269;
    __break(0xC471u);
  }
  else
  {
    int v2 = (WebKit::ServiceWorkerStorageManager **)((char *)this + 128);
    uint64_t v1 = *((void *)this + 16);
    if (!v1)
    {
      WebKit::OriginStorageManager::StorageBucket::resolvedPath(this, 0x4000, &v8);
      uint64_t v3 = (WebKit::ServiceWorkerStorageManager *)WTF::fastMalloc((WTF *)0x10);
      uint64_t v4 = v8;
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
      *(void *)uint64_t v3 = v4;
      *((void *)v3 + 1) = 0;
      std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100](v2, v3);
      int v6 = v8;
      xpc_object_t v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v5);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      return (uint64_t)*v2;
    }
    return v1;
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::resolvedPath@<X0>(WTF::StringImpl *a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t result = WebKit::OriginStorageManager::StorageBucket::toStorageType((uint64_t)a1, a2);
  if ((unsigned __int16)result > 0xFFu)
  {
    switch((char)result)
    {
      case 0:
      case 2:
      case 6:
        uint64_t result = WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)a1, (WTF::StringImpl *)result, a3);
        break;
      case 1:
        uint64_t result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(a1, a3);
        break;
      case 3:
        uint64_t result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((char *)a1, a3);
        break;
      case 4:
        uint64_t result = WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((uint64_t)a1, a3);
        break;
      case 5:
        uint64_t result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath(a1, a3);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198CCA7B8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::isActive(WebKit::OriginStorageManager::StorageBucket *this)
{
  int v2 = (WebKit::FileSystemStorageManager *)*((void *)this + 3);
  if (v2 && WebKit::FileSystemStorageManager::isActive(v2)) {
    return 1;
  }
  uint64_t v3 = (WebKit::LocalStorageManager *)*((void *)this + 4);
  if (v3)
  {
    if (WebKit::LocalStorageManager::isActive(v3)) {
      return 1;
    }
  }
  uint64_t v4 = (WebKit::SessionStorageManager *)*((void *)this + 7);
  if (v4)
  {
    if (WebKit::SessionStorageManager::isActive(v4)) {
      return 1;
    }
  }
  uint64_t v5 = (WebKit::FileSystemStorageManager *)*((void *)this + 8);
  if (v5)
  {
    if (WebKit::FileSystemStorageManager::isActive(v5)) {
      return 1;
    }
  }
  uint64_t result = *((void *)this + 11);
  if (result)
  {
    return WebKit::CacheStorageManager::isActive((WebKit::CacheStorageManager *)result);
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::isActive(WebKit::SessionStorageManager *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = &v1[2 * v2];
    goto LABEL_11;
  }
  uint64_t v2 = *((unsigned int *)v1 - 1);
  uint64_t v3 = &v1[2 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    uint64_t v4 = &v1[2 * v2];
    goto LABEL_10;
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = (void *)*((void *)this + 1);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    v1 += 2 * *((unsigned int *)v1 - 1);
  }
  if (v1 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v4[1] + 96);
    if (v6)
    {
      if (*(_DWORD *)(v6 - 12)) {
        return 1;
      }
    }
    uint64_t v7 = v4 + 2;
    uint64_t v4 = v3;
    if (v7 != v3)
    {
      uint64_t v4 = v7;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
    if (v4 == v1) {
      return 0;
    }
  }
}

BOOL WebKit::OriginStorageManager::StorageBucket::hasDataInMemory(WebKit::OriginStorageManager::StorageBucket *this)
{
  uint64_t v2 = (WebKit::LocalStorageManager *)*((void *)this + 4);
  if (v2 && WebKit::LocalStorageManager::hasDataInMemory(v2)) {
    return 1;
  }
  uint64_t v3 = (WebKit::SessionStorageManager *)*((void *)this + 7);
  if (v3)
  {
    if (WebKit::SessionStorageManager::hasDataInMemory(v3)) {
      return 1;
    }
  }
  uint64_t v4 = (WebKit::IDBStorageManager *)*((void *)this + 8);
  if (v4)
  {
    if (WebKit::IDBStorageManager::hasDataInMemory(v4)) {
      return 1;
    }
  }
  uint64_t v5 = *((void *)this + 11);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5 + 56);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 4)) {
      return 0;
    }
  }
  if (*(_DWORD *)(v5 + 100)) {
    return 1;
  }
  uint64_t v8 = *(void *)(v5 + 104);
  if (!v8) {
    return 0;
  }
  return *(_DWORD *)(v8 - 12) != 0;
}

BOOL WebKit::SessionStorageManager::hasDataInMemory(WebKit::SessionStorageManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = (void *)(v1 + 16 * v2);
    goto LABEL_11;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = (void *)(v1 + 16 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    uint64_t v4 = (void *)(v1 + 16 * v2);
    goto LABEL_10;
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = (void *)*((void *)this + 1);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    uint64_t v6 = (void *)(v1 + 16 * *(unsigned int *)(v1 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == v4) {
    return 0;
  }
  do
  {
    int v7 = WebCore::StorageMap::length((WebCore::StorageMap *)(v4[1] + 104));
    BOOL result = v7 != 0;
    if (v7) {
      break;
    }
    int v9 = v4 + 2;
    uint64_t v4 = v3;
    if (v9 != v3)
    {
      uint64_t v4 = v9;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList@<X0>(WTF::StringImpl *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int16 v6 = a2;
  WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk(a1, a2, a3, a4);
  uint64_t result = WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory(a1, v6);
  if (result)
  {
    int v8 = result;
    do
    {
      int v10 = 0;
      int v11 = v8 & -v8;
      uint64_t result = (uint64_t)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>(a4, &v11, &v10, (uint64_t)&v9);
      v8 &= v8 - 1;
    }
    while (v8);
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int16 v5 = a2;
  __int16 v6 = this;
  *a4 = 0;
  if ((a2 & 0x80000) == 0) {
    goto LABEL_12;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v33);
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v31, (WTF::FileSystemImpl *)&v33, v8);
  if (v32)
  {
    uint64_t v30 = 0;
    if (a3)
    {
      uint64_t v10 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v33, v9);
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v30 = v12;
    }
    int v29 = 0x80000;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, &v29, &v30);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v9);
  this = v33;
  uint64_t v33 = 0;
  if (!this)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_12;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
  if ((v5 & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(v6, &v31);
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v31, v14))
  {
    uint64_t v33 = 0;
    if (a3) {
      uint64_t v33 = (WTF::StringImpl *)WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v31, v15);
    }
    LODWORD(v30) = 32;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, (int *)&v30, &v33);
  }
  this = v31;
  uint64_t v31 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_23:
  if ((v5 & 0x80) == 0) {
    goto LABEL_34;
  }
  WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((char *)v6, &v33);
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v31, (WTF::FileSystemImpl *)&v33, v16);
  if (v32)
  {
    uint64_t v30 = 0;
    if (a3)
    {
      uint64_t v18 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v33, v17);
      if (v19) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v30 = v20;
    }
    int v29 = 128;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, &v29, &v30);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v17);
  this = v33;
  uint64_t v33 = 0;
  if (!this)
  {
LABEL_34:
    if ((v5 & 0x8000) == 0) {
      return this;
    }
    goto LABEL_35;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_34;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v21);
  if ((v5 & 0x8000) == 0) {
    return this;
  }
LABEL_35:
  WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((uint64_t)v6, v28);
  int hasCacheList = WebKit::CacheStorageManager::hasCacheList((WebKit::CacheStorageManager *)v28, v22);
  this = v28[0];
  if (!v28[0]) {
    goto LABEL_38;
  }
  if (*(_DWORD *)v28[0] != 2)
  {
    *(_DWORD *)v28[0] -= 2;
LABEL_38:
    if (!hasCacheList) {
      return this;
    }
    goto LABEL_43;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(v28[0], v23);
  if (!hasCacheList) {
    return this;
  }
LABEL_43:
  uint64_t v31 = 0;
  if (a3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((uint64_t)v6, v28);
    uint64_t v31 = (WTF::StringImpl *)WebKit::CacheStorageManager::cacheStorageSize((WebKit::CacheStorageManager *)v28, v25);
    __int16 v27 = v28[0];
    v28[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v26);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  LODWORD(v33) = 0x8000;
  return (WTF::StringImpl *)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, (int *)&v33, &v31);
}

uint64_t WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory(void *a1, __int16 a2)
{
  if ((a2 & 0x20) != 0 && (uint64_t v4 = (WebKit::LocalStorageManager *)a1[4]) != 0)
  {
    if (WebKit::LocalStorageManager::hasDataInMemory(v4)) {
      uint64_t v5 = 32;
    }
    else {
      uint64_t v5 = 0;
    }
    if ((a2 & 0x10) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if ((a2 & 0x10) == 0) {
      goto LABEL_13;
    }
  }
  __int16 v6 = (WebKit::SessionStorageManager *)a1[7];
  if (v6)
  {
    if (WebKit::SessionStorageManager::hasDataInMemory(v6)) {
      uint64_t v5 = v5 | 0x10;
    }
    else {
      uint64_t v5 = v5;
    }
  }
LABEL_13:
  if ((a2 & 0x80) != 0)
  {
    int v7 = (WebKit::IDBStorageManager *)a1[8];
    if (v7)
    {
      if (WebKit::IDBStorageManager::hasDataInMemory(v7)) {
        uint64_t v5 = v5 | 0x80;
      }
      else {
        uint64_t v5 = v5;
      }
    }
  }
  if (a2 < 0)
  {
    uint64_t v8 = a1[11];
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 56);
      if (!v9 || !*(_DWORD *)(v9 + 4))
      {
        if (*(_DWORD *)(v8 + 100)) {
          return v5 | 0x8000;
        }
        uint64_t v11 = *(void *)(v8 + 104);
        if (v11)
        {
          if (*(_DWORD *)(v11 - 12)) {
            return v5 | 0x8000;
          }
        }
      }
    }
  }
  return v5;
}

_OWORD *WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(_OWORD *result, uint64_t *a2, int *a3, void *a4)
{
  int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (_OWORD *)(v8 + 16 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v8 + 16 * v21;
        goto LABEL_29;
      }
      if (v16 == -2) {
        uint64_t v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (_OWORD *)(v8 + 16 * v14);
      int v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)uint64_t v17 = -1;
      *((void *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      int v11 = *a3;
      uint64_t v15 = v17;
    }
  }
  *(_DWORD *)uint64_t v15 = v11;
  *((void *)v15 + 1) = *a4;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      uint64_t result = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(a2, v15);
      uint64_t v15 = result;
      uint64_t v22 = *a2;
      if (*a2) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  uint64_t v27 = v22 + 16 * v25;
  char v26 = 1;
LABEL_29:
  *(void *)int v7 = v15;
  *((void *)v7 + 1) = v27;
  *((unsigned char *)v7 + 16) = v26;
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::deleteData(WTF::StringImpl *a1, void *a2, double a3)
{
  __int16 v4 = (__int16)a2;
  uint64_t v5 = (WebKit::LocalStorageManager **)a1;
  if ((a2 & 0x80000) != 0)
  {
    a1 = WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData((uint64_t)a1, a3);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((a2 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  a1 = WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData(v5, a3);
  if ((v4 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  WTF::WallTime::now(a1);
  if (a3 < v6) {
    WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData((WebKit::OriginStorageManager::StorageBucket *)v5);
  }
LABEL_9:
  if ((v4 & 0x80) != 0) {
    WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData((uint64_t)v5, a3);
  }
  if (v4 < 0)
  {
    WebKit::OriginStorageManager::StorageBucket::deleteCacheStorageData((uint64_t)v5, a2, a3);
  }
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData(uint64_t a1, double a2)
{
  std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100]((WebKit::FileSystemStorageManager **)(a1 + 24), 0);
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath(a1, 0, &v8);
  v4.n128_f64[0] = a2;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v8, v5, v4);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData(WebKit::LocalStorageManager **a1, double a2)
{
  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath((WTF::StringImpl *)a1, &v13);
  double v5 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v13, v4));
  if ((_BYTE)v6) {
    BOOL v7 = a2 > v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      WebKit::LocalStorageManager::clearDataOnDisk(v8);
    }
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v13, v6);
  }
  int v11 = a1[4];
  int v10 = a1 + 4;
  char v9 = v11;
  if (v11)
  {
    WebKit::LocalStorageManager::clearDataInMemory(v9);
    if ((WebKit::LocalStorageManager::isActive(*v10) & 1) == 0) {
      std::unique_ptr<WebKit::LocalStorageManager>::reset[abi:sn180100](v10, 0);
    }
  }
  uint64_t result = v13;
  unsigned int v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData(WebKit::OriginStorageManager::StorageBucket *this)
{
  uint64_t v2 = (WebKit::SessionStorageManager **)((char *)this + 56);
  uint64_t v1 = (uint64_t *)*((void *)this + 7);
  if (v1)
  {
    WebKit::SessionStorageManager::clearData(v1);
    uint64_t v3 = *v2;
    if ((WebKit::SessionStorageManager::isActive(*v2) & 1) == 0)
    {
      *uint64_t v2 = 0;
      if (v3)
      {
        std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100]((int)v2, v3);
      }
    }
  }
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData(uint64_t a1, double a2)
{
  __n128 v4 = *(WebKit::IDBStorageManager **)(a1 + 64);
  if (v4) {
    WebKit::IDBStorageManager::closeDatabasesForDeletion(v4);
  }
  WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((char *)a1, &v9);
  v5.n128_f64[0] = a2;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v9, v6, v5);
  uint64_t result = v9;
  char v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteCacheStorageData(uint64_t a1, void *a2, double a3)
{
  __n128 v5 = *(WebKit::CacheStorageManager **)(a1 + 88);
  if (v5) {
    WebKit::CacheStorageManager::reset(v5, a2);
  }
  WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath(a1, &v10);
  v6.n128_f64[0] = a3;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v10, v7, v6);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::SessionStorageManager::clearData(uint64_t *this)
{
  uint64_t v1 = this[1];
  if (!v1)
  {
    __n128 v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = (void *)(v1 + 16 * v2);
    goto LABEL_11;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = (void *)(v1 + 16 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    __n128 v4 = (void *)(v1 + 16 * v2);
    goto LABEL_10;
  }
  __n128 v4 = (void *)this[1];
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    __n128 v4 = (void *)this[1];
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        __n128 v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    __n128 v6 = (void *)(v1 + 16 * *(unsigned int *)(v1 - 4));
  }
  else {
    __n128 v6 = 0;
  }
  while (v4 != v6)
  {
    uint64_t v7 = v4[1];
    WebCore::StorageMap::clear((WebCore::StorageMap *)(v7 + 104));
    this = WebKit::StorageAreaBase::notifyListenersAboutClear((WebKit::StorageAreaBase *)v7);
    uint64_t v8 = v4 + 2;
    __n128 v4 = v3;
    if (v8 != v3)
    {
      __n128 v4 = v8;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          __n128 v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::moveData(WTF::StringImpl *this, char a2, WTF::FileSystemImpl *a3, WTF::FileSystemImpl *a4)
{
  __n128 v6 = this;
  if ((a2 & 0x20) == 0 || !*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4)) {
    goto LABEL_16;
  }
  uint64_t v8 = (WebKit::LocalStorageManager *)*((void *)this + 4);
  if (v8) {
    WebKit::LocalStorageManager::close(v8);
  }
  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(v6, &v21);
  this = v21;
  if (!v21) {
    goto LABEL_16;
  }
  if (!*((_DWORD *)v21 + 1))
  {
    uint64_t v21 = 0;
    goto LABEL_14;
  }
  WTF::FileSystemImpl::parentPath((uint64_t *)&v20, a3, v9);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v20, v10);
  unsigned int v13 = v20;
  int v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::SQLiteFileSystem::moveDatabaseFile((WebCore::SQLiteFileSystem *)&v21, a3, v12);
  this = v21;
  uint64_t v21 = 0;
  if (!this)
  {
LABEL_16:
    if ((a2 & 0x80) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_16;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
  if ((a2 & 0x80) == 0) {
    return this;
  }
LABEL_17:
  if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
  {
    unsigned int v14 = (WebKit::IDBStorageManager *)*((void *)v6 + 8);
    if (v14) {
      WebKit::IDBStorageManager::closeDatabasesForDeletion(v14);
    }
    WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((char *)v6, &v21);
    this = v21;
    if (v21)
    {
      if (!*((_DWORD *)v21 + 1))
      {
        uint64_t v21 = 0;
LABEL_31:
        if (*(_DWORD *)this == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
        }
        *(_DWORD *)this -= 2;
        return this;
      }
      WTF::FileSystemImpl::parentPath((uint64_t *)&v20, a4, v15);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v20, v16);
      uint64_t v19 = v20;
      int v20 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v21, a4, v18);
      this = v21;
      uint64_t v21 = 0;
      if (this) {
        goto LABEL_31;
      }
    }
  }
  return this;
}

unsigned __int8 *WebKit::OriginStorageManager::StorageBucket::deleteEmptyDirectory(unsigned __int8 *this)
{
  uint64_t v1 = this;
  int v2 = this[112];
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v19);
      uint64_t v21 = v27;
      uint64_t v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)1, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v22);
      uint64_t v24 = v27;
      uint64_t v27 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)3, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v25);
      char v26 = v27;
      uint64_t v27 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v18);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    else
    {
      if (this[112]) {
        return this;
      }
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v14);
      int v16 = v27;
      uint64_t v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 40), v15);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 72), v17);
    }
    return (unsigned __int8 *)WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 96), v18);
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v3);
  uint64_t v5 = v27;
  uint64_t v27 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)1, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v6);
  uint64_t v8 = v27;
  uint64_t v27 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)3, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v9);
  int v11 = v27;
  uint64_t v27 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)4, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v12);
  this = (unsigned __int8 *)v27;
  uint64_t v27 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebKit::OriginStorageManager::originFileIdentifier(WebKit::OriginStorageManager *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebKit::OriginStorageManager::createQuotaManager(uint64_t *a1, unsigned int *a2, long long *a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  __n128 v6 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9CD910;
  v7[1] = a2;
  v7[2] = v6;
  char v9 = v7;
  WebKit::OriginQuotaManager::create(a3, (uint64_t *)&v9, a1);
  uint64_t result = (uint64_t)v9;
  char v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::OriginStorageManager(uint64_t a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v9;
  uint64_t v10 = *a4;
  *a4 = 0;
  *(void *)(a1 + 24) = v10;
  uint64_t v11 = *a5;
  *a5 = 0;
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = *a6;
  *a6 = 0;
  *(void *)(a1 + 40) = v12;
  WebKit::OriginStorageManager::createQuotaManager((uint64_t *)(a1 + 48), (unsigned int *)a1, a2);
  *(unsigned char *)(a1 + 56) = a7;
  *(void *)(a1 + 64) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 72) = 0;
  return a1;
}

void WebKit::OriginStorageManager::~OriginStorageManager(WebKit::OriginStorageManager *this, void *a2)
{
  uint64_t v3 = (WebKit::OriginQuotaManager **)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v3, a2);
  }
  __n128 v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  __n128 v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100]((WebKit::ServiceWorkerStorageManager ***)this + 1, 0);

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v8);
}

void *WebKit::OriginStorageManager::connectionClosed(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(void **)(a1 + 8);
  if (result) {
    return (void *)WebKit::OriginStorageManager::StorageBucket::connectionClosed(result, a2);
  }
  return result;
}

WebKit::ServiceWorkerStorageManager **WebKit::OriginStorageManager::defaultBucket(WebKit::OriginStorageManager *this)
{
  int v2 = (WebKit::ServiceWorkerStorageManager ***)((char *)this + 8);
  uint64_t v1 = *((void *)this + 1);
  if (!v1)
  {
    v8[0] = (uint64_t)"default";
    v8[1] = 8;
    std::make_unique[abi:sn180100]<WebKit::OriginStorageManager::StorageBucket,WTF::String &,WTF::ASCIILiteral,WTF::String &,WTF::String &,WTF::String &,WebKit::UnifiedOriginStorageLevel &>((_DWORD **)this + 2, v8, (_DWORD **)this + 3, (_DWORD **)this + 4, (_DWORD **)this + 5, (char *)this + 56, (uint64_t *)&v9);
    __n128 v4 = (WebKit::ServiceWorkerStorageManager **)v9;
    uint64_t v9 = 0;
    std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100](v2, v4);
    uint64_t v5 = (WebKit::ServiceWorkerStorageManager **)v9;
    uint64_t v9 = 0;
    if (v5)
    {
      WebKit::OriginStorageManager::StorageBucket::~StorageBucket(v5);
      WTF::fastFree(v6, v7);
    }
    return *v2;
  }
  return (WebKit::ServiceWorkerStorageManager **)v1;
}

WebKit::FileSystemStorageManager *WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::OriginStorageManager *a1, atomic_uint *a2)
{
  __n128 v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  uint64_t v5 = (atomic_uchar **)*((void *)a1 + 6);
  if (*v5) {
    __n128 v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  }
  else {
    __n128 v6 = 0;
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9CD938;
  v7[1] = v6;
  v7[2] = v5;
  uint64_t v10 = v7;
  uint64_t v8 = WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager((uint64_t)v4, a2, (uint64_t *)&v10);
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  return v8;
}

WebKit::IDBStorageManager *WebKit::OriginStorageManager::idbStorageManager(WebKit::OriginStorageManager *a1, atomic_uint *a2)
{
  __n128 v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  uint64_t v5 = (atomic_uchar **)*((void *)a1 + 6);
  if (*v5) {
    __n128 v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  }
  else {
    __n128 v6 = 0;
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9CD988;
  v7[1] = v6;
  v7[2] = v5;
  uint64_t v10 = v7;
  uint64_t v8 = WebKit::OriginStorageManager::StorageBucket::idbStorageManager((uint64_t)v4, a2, (uint64_t *)&v10);
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  return v8;
}

WebKit::CacheStorageManager *WebKit::OriginStorageManager::cacheStorageManager(WebKit::OriginStorageManager *a1, atomic_uint *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::OriginStorageManager::defaultBucket(a1);
  uint64_t v9 = (atomic_uchar **)*((void *)a1 + 6);
  if (*v9) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v11 = &unk_1EE9CD9D8;
  v11[1] = v10;
  v11[2] = v9;
  unsigned int v14 = v11;
  uint64_t v12 = WebKit::OriginStorageManager::StorageBucket::cacheStorageManager((WebKit::OriginStorageManager::StorageBucket *)v8, a2, a3, (uint64_t *)&v14, a4);
  if (v14) {
    (*(void (**)(void *))(*v14 + 8))(v14);
  }
  return v12;
}

WebKit::BackgroundFetchStoreManager *WebKit::OriginStorageManager::backgroundFetchManager(WebKit::OriginStorageManager *a1, uint64_t *a2)
{
  __n128 v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  uint64_t v5 = (atomic_uchar **)*((void *)a1 + 6);
  if (*v5) {
    __n128 v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  }
  else {
    __n128 v6 = 0;
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9CDA28;
  v7[1] = v6;
  v7[2] = v5;
  uint64_t v10 = v7;
  Manager = WebKit::OriginStorageManager::StorageBucket::backgroundFetchManager(v4, a2, (uint64_t *)&v10);
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  return Manager;
}

unsigned __int8 *WebKit::OriginStorageManager::deleteEmptyDirectory(unsigned __int8 *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && *(_DWORD *)(v1 + 4))
  {
    int v2 = (unsigned __int8 *)WebKit::OriginStorageManager::defaultBucket((WebKit::OriginStorageManager *)this);
    return WebKit::OriginStorageManager::StorageBucket::deleteEmptyDirectory(v2);
  }
  return this;
}

uint64_t WebKit::SQLiteStorageArea::SQLiteStorageArea(uint64_t a1, int a2, const WebCore::ClientOrigin *a3, _DWORD **a4, uint64_t *a5)
{
  *(void *)WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)a1, a2, a3) = &unk_1EE9CD820;
  uint64_t v8 = *a4;
  if (*a4) {
    *v8 += 2;
  }
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *a5;
  *a5 = 0;
  *(void *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 148) = 6;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(a1 + 144) = 6;
  *(void *)(a1 + 136) = v10;
  bzero(v10, 8 * *(unsigned int *)(a1 + 148));
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  return a1;
}

WebKit::StorageAreaBase *WebKit::StorageAreaBase::StorageAreaBase(WebKit::StorageAreaBase *this, int a2, const WebCore::ClientOrigin *a3)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)this = &unk_1EE9CD880;
  *((_DWORD *)this + 6) = a2;
  WebCore::ClientOrigin::ClientOrigin((WebKit::StorageAreaBase *)((char *)this + 32), a3);
  *((void *)this + 12) = 0;
  return this;
}

void WebKit::SQLiteStorageArea::close(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 160))
  {
    uint64_t v7 = *((void *)this + 19);
    if (v7) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
    }
    *((unsigned char *)this + 160) = 0;
  }
  if (*((unsigned char *)this + 172)) {
    *((unsigned char *)this + 172) = 0;
  }
  WebKit::SQLiteStorageArea::commitTransactionIfNecessary(this);
  for (unint64_t i = 0; i != 6; ++i)
  {
    if (i >= *((unsigned int *)this + 37))
    {
      __break(0xC471u);
      return;
    }
    uint64_t v4 = *((void *)this + 17);
    uint64_t v5 = *(WebCore::SQLiteStatement **)(v4 + 8 * i);
    *(void *)(v4 + 8 * i) = 0;
    if (v5) {
      WebCore::SQLiteStatement::operator delete(v5, 0x18uLL);
    }
  }
  __n128 v6 = (WebCore::SQLiteDatabase *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6)
  {
    WebCore::SQLiteDatabase::operator delete(v6, 0x40uLL);
  }
}

uint64_t WebKit::SQLiteStorageArea::commitTransactionIfNecessary(WebKit::SQLiteStorageArea *this)
{
  uint64_t v3 = (WebCore::SQLiteTransaction *)*((void *)this + 16);
  uint64_t v1 = (uint64_t *)((char *)this + 128);
  int v2 = v3;
  *uint64_t v1 = 0;
  uint64_t result = std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](v1, 0);
  if (v3)
  {
    WebCore::SQLiteTransaction::commit(v2);
    uint64_t v5 = (WTF *)MEMORY[0x199733E80](v2);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void WebKit::SQLiteStorageArea::~SQLiteStorageArea(WebKit::SQLiteStorageArea *this)
{
  BOOL isEmpty = WebKit::SQLiteStorageArea::isEmpty(this);
  WebKit::SQLiteStorageArea::close(this, v3);
  if (isEmpty) {
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), v4);
  }
  if (*((unsigned char *)this + 160))
  {
    uint64_t v9 = *((void *)this + 19);
    if (v9) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v4);
    }
  }
  WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v4);
  std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100]((uint64_t *)this + 16, 0);
  __n128 v6 = (WebCore::SQLiteDatabase *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    WebCore::SQLiteDatabase::operator delete(v6, 0x40uLL);
  }
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }

  WebKit::StorageAreaBase::~StorageAreaBase(this, v5);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SQLiteStorageArea::~SQLiteStorageArea(this);

  WTF::fastFree(v1, v2);
}

BOOL WebKit::SQLiteStorageArea::isEmpty(WebKit::SQLiteStorageArea *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 160))
  {
    uint64_t v4 = *((void *)this + 19);
    if (v4) {
      return *(_DWORD *)(v4 - 12) == 0;
    }
    return 1;
  }
  if (!WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)this, 0) || !*((void *)this + 15)) {
    return 1;
  }
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v8, (uint64_t)this, 0);
  if (v8 && WebCore::SQLiteStatement::step(v8) == 100)
  {
    BOOL v2 = WebCore::SQLiteStatement::columnInt(v8) == 0;
  }
  else
  {
    uint64_t v5 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
    {
      int Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      int v10 = Error;
      __int16 v11 = 2082;
      uint64_t v12 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::isEmpty failed on executing statement (%d) - %{public}s", buf, 0x12u);
    }
    BOOL v2 = 1;
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
  return v2;
}

void WebKit::StorageAreaBase::~StorageAreaBase(WebKit::StorageAreaBase *this, void *a2)
{
  *(void *)this = &unk_1EE9CD880;
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::ClientOrigin::~ClientOrigin((WebKit::StorageAreaBase *)((char *)this + 32));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

uint64_t WebKit::SQLiteStorageArea::prepareDatabase(uint64_t a1, const WTF::String *a2)
{
  int v2 = (int)a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(WebCore::SQLiteDatabase **)(a1 + 120);
  if (v4)
  {
    if (*((void *)v4 + 1)) {
      return 1;
    }
    *(void *)(a1 + 120) = 0;
    WebCore::SQLiteDatabase::operator delete(v4, 0x40uLL);
  }
  else
  {
    *(void *)(a1 + 120) = 0;
  }
  int v5 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(a1 + 104), a2);
  char v6 = v5;
  if ((v2 & 1) == 0 && !v5) {
    return 1;
  }
  uint64_t v8 = (WebCore::SQLiteDatabase *)WTF::fastMalloc((WTF *)0x40);
  WebCore::SQLiteDatabase::SQLiteDatabase(v8);
  int v10 = *(WebCore::SQLiteDatabase **)(a1 + 120);
  *(void *)(a1 + 120) = v8;
  if (v10) {
    WebCore::SQLiteDatabase::operator delete(v10, 0x40uLL);
  }
  WTF::FileSystemImpl::parentPath((uint64_t *)buf, (WTF::FileSystemImpl *)(a1 + 104), v9);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)buf, v11);
  uint64_t v13 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (WebCore::SQLiteDatabase::open())
  {
    if (WebKit::SQLiteStorageArea::createTableIfNecessary((WebKit::SQLiteStorageArea *)a1))
    {
      if ((v6 & 1) == 0)
      {
LABEL_15:
        *(void *)buf = 0;
        std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>(a1 + 152, (WTF::StringImpl *)buf);
        if (*(void *)buf) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(uint64_t *)buf, v14);
        }
        if (!*(unsigned char *)(a1 + 172)) {
          *(unsigned char *)(a1 + 172) = 1;
        }
        *(_DWORD *)(a1 + 168) = 0;
      }
      return 1;
    }
  }
  else
  {
    int Error = (WTF::StringImpl *)WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
    if (!WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, Error)) {
      goto LABEL_29;
    }
    if (!v2) {
      return 1;
    }
    int v16 = (WebCore::SQLiteDatabase *)WTF::fastMalloc((WTF *)0x40);
    uint64_t v17 = WebCore::SQLiteDatabase::SQLiteDatabase(v16);
    int v18 = *(WebCore::SQLiteDatabase **)(a1 + 120);
    *(void *)(a1 + 120) = v17;
    if (v18) {
      WebCore::SQLiteDatabase::operator delete(v18, 0x40uLL);
    }
    if (WebCore::SQLiteDatabase::open())
    {
      if (WebKit::SQLiteStorageArea::createTableIfNecessary((WebKit::SQLiteStorageArea *)a1)) {
        goto LABEL_15;
      }
    }
    else
    {
LABEL_29:
      uint64_t v19 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        WTF::String::utf8();
        uint64_t v20 = v22 ? (uint64_t)v22 + 16 : 0;
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::prepareDatabase failed to open database at '%s'", buf, 0xCu);
        if (v22)
        {
          if (*(_DWORD *)v22 == 1) {
            WTF::fastFree(v22, v21);
          }
          else {
            --*(_DWORD *)v22;
          }
        }
      }
    }
  }
  uint64_t result = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (result)
  {
    WebCore::SQLiteDatabase::operator delete((WebCore::SQLiteDatabase *)result, 0x40uLL);
    return 0;
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::cachedStatement(WebCore::SQLiteStatementAutoResetScope *this, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 148);
  if (v3 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCC7B0);
  }
  uint64_t v7 = a3;
  if (!*(void *)(*(void *)(a2 + 136) + 8 * a3))
  {
    WebCore::SQLiteDatabase::prepareHeapStatement();
    int v8 = v14;
    if (!v14)
    {
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (*(_DWORD *)(a2 + 148) <= a3)
      {
        __break(0xC471u);
        JUMPOUT(0x198CCC7C0);
      }
      uint64_t v10 = *(void *)(a2 + 136);
      __int16 v11 = *(WebCore::SQLiteStatement **)(v10 + 8 * v7);
      *(void *)(v10 + 8 * v7) = v9;
      if (!v11)
      {
        int v8 = 0;
LABEL_9:
        ((void (*)(char *, uint64_t *))off_1EE9CD8E0[v8])(&v15, &v13);
LABEL_10:
        unsigned int v3 = *(_DWORD *)(a2 + 148);
        goto LABEL_11;
      }
      WebCore::SQLiteStatement::operator delete(v11, 0x18uLL);
      int v8 = v14;
    }
    if (v8 == -1) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  if (v3 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCC7B8);
  }
  return WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(this, *(WebCore::SQLiteStatement **)(*(void *)(a2 + 136) + 8 * v7));
}

uint64_t *WebKit::SQLiteStorageArea::clear(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  WebKit::SQLiteStorageArea::close(this, a2);
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), v3);

  return WebKit::StorageAreaBase::notifyListenersAboutClear(this);
}

uint64_t *WebKit::StorageAreaBase::notifyListenersAboutClear(WebKit::StorageAreaBase *this)
{
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin((void **)this + 12);
  unsigned int v3 = result;
  int v5 = v4;
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    uint64_t v7 = (uint64_t *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = v3[1];
      unint64_t v10 = atomic_fetch_add(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier, 1uLL) + 1;
      uint64_t result = (uint64_t *)IPC::Connection::send<Messages::StorageAreaMap::ClearCache>(v8, (uint64_t *)&v10, v9, 0, 0);
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      unsigned int v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::createTableIfNecessary(WebKit::SQLiteStorageArea *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 15)) {
    return 0;
  }
  WebCore::SQLiteDatabase::tableSQL();
  if (MEMORY[0x19972E990](v11, "CREATE TABLE ItemTable (key TEXT UNIQUE ON CONFLICT REPLACE, value BLOB NOT NULL ON CONFLICT FAIL)", 98) & 1) != 0|| (MEMORY[0x19972E990](v11, "CREATE TABLE IF NOT EXISTS ItemTable (key TEXT UNIQUE ON CONFLICT REPLACE, value BLOB NOT NULL ON CONFLICT FAIL)", 112))
  {
    goto LABEL_8;
  }
  if (v11 && *((_DWORD *)v11 + 1) && (WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    int v5 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
    {
      int Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      int v13 = Error;
      __int16 v14 = 2082;
      uint64_t v15 = ErrorMsg;
      uint64_t v8 = "SQLiteStorageArea::createTableIfNecessary failed to drop existing item table (%d) - %{public}s";
      goto LABEL_20;
    }
  }
  else
  {
    if (WebCore::SQLiteDatabase::executeCommand())
    {
LABEL_8:
      uint64_t v3 = 1;
      goto LABEL_9;
    }
    int v5 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
    {
      int v6 = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      uint64_t v7 = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      int v13 = v6;
      __int16 v14 = 2082;
      uint64_t v15 = v7;
      uint64_t v8 = "SQLiteStorageArea::createTableIfNecessary failed to create item table (%d) - %{public}s";
LABEL_20:
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v3;
}

uint64_t WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 == 10)
  {
    WebKit::SQLiteStorageArea::close(this, a2);
    return 0;
  }
  if (a2 != 26 && a2 != 11) {
    return 0;
  }
  WebKit::SQLiteStorageArea::close(this, a2);
  uint64_t v3 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    if (v7) {
      int v6 = (char *)v7 + 16;
    }
    else {
      int v6 = 0;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v9 = v6;
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::handleDatabaseCorruption deletes corrupted database file '%s'", buf, 0xCu);
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        WTF::fastFree(v7, v4);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
  }
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), (const WTF::String *)v4);
  return 1;
}

uint64_t std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    uint64_t v4 = *(void *)a1;
    *(void *)a1 = v3;
    if (v4) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
  }
  else
  {
    *(void *)a1 = 0;
    uint64_t v5 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

WebCore::SQLiteTransaction *WebKit::SQLiteStorageArea::startTransactionIfNecessary(WebKit::SQLiteStorageArea *this)
{
  uint64_t v3 = (uint64_t *)((char *)this + 128);
  int v2 = (WebCore::SQLiteTransaction *)*((void *)this + 16);
  if (!v2 || WebCore::SQLiteTransaction::wasRolledBackBySqlite(v2))
  {
    uint64_t v4 = (WebCore::SQLiteDatabase *)*((void *)this + 15);
    uint64_t v5 = (WebCore::SQLiteTransaction *)WTF::fastMalloc((WTF *)0x10);
    WebCore::SQLiteTransaction::SQLiteTransaction(v5, v4);
    std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](v3, (uint64_t)v5);
  }
  uint64_t result = (WebCore::SQLiteTransaction *)*v3;
  if (!*(unsigned char *)(*v3 + 8))
  {
    WebCore::SQLiteTransaction::begin(result);
    uint64_t v7 = *((void *)this + 14);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v8 = (atomic_uint *)*((void *)this + 1);
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    uint64_t v9 = (WebCore::SQLiteTransaction *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v9 = &unk_1EE9CDA78;
    *((void *)v9 + 1) = v8;
    uint64_t v10 = v9;
    (*(void (**)(uint64_t, WebCore::SQLiteTransaction **, double))(*(void *)v7 + 16))(v7, &v10, 0.5);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (WebCore::SQLiteTransaction *)(*(uint64_t (**)(WebCore::SQLiteTransaction *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::SQLiteStorageArea::getItem(WebKit::SQLiteStorageArea *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  if (!*((unsigned char *)a2 + 160)) {
    goto LABEL_7;
  }
  uint64_t v5 = (uint64_t *)((char *)a2 + 152);
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2 + 19, a3, (const WTF::StringImpl *)a3);
  if (!*((unsigned char *)a2 + 160))
  {
    __break(1u);
    return;
  }
  uint64_t v7 = *v5;
  if (*v5) {
    v7 += 24 * *(unsigned int *)(v7 - 4);
  }
  if (v7 == v6)
  {
    *(unsigned char *)this = 1;
    *((_DWORD *)this + 2) = 1;
    return;
  }
  if (!*(_DWORD *)(v6 + 16))
  {
    uint64_t v8 = *(_DWORD **)(v6 + 8);
    if (v8) {
      *v8 += 2;
    }
    *(void *)this = v8;
    *((_DWORD *)this + 2) = 0;
  }
  else
  {
LABEL_7:
    WebKit::SQLiteStorageArea::getItemFromDatabase(this, (WebCore::SQLiteDatabase **)a2);
  }
}

void WebKit::SQLiteStorageArea::getItemFromDatabase(WebKit::SQLiteStorageArea *this, WebCore::SQLiteDatabase **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)a2, 0) & 1) == 0)
  {
LABEL_16:
    *(unsigned char *)this = 0;
    goto LABEL_17;
  }
  if (a2[15])
  {
    WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v12, (uint64_t)a2, 3u);
    if (!v12 || WebCore::SQLiteStatement::bindText())
    {
      uint64_t v4 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        int Error = WebCore::SQLiteDatabase::lastError(a2[15]);
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(a2[15]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = Error;
        __int16 v14 = 2082;
        uint64_t v15 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::getItemFromDatabase failed on creating statement (%d) - %{public}s", buf, 0x12u);
      }
      *(unsigned char *)this = 0;
      *((_DWORD *)this + 2) = 1;
      goto LABEL_8;
    }
    uint64_t v5 = WebCore::SQLiteStatement::step(v12);
    if (v5 == 100)
    {
      WebCore::SQLiteStatement::columnBlobAsString(v12);
      *(void *)this = *(void *)buf;
      *((_DWORD *)this + 2) = 0;
LABEL_8:
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v12);
      return;
    }
    uint64_t v6 = (WTF::StringImpl *)v5;
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v12);
    if (v6 != 101)
    {
      uint64_t v7 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        int v10 = WebCore::SQLiteDatabase::lastError(a2[15]);
        uint64_t v11 = WebCore::SQLiteDatabase::lastErrorMsg(a2[15]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v10;
        __int16 v14 = 2082;
        uint64_t v15 = v11;
        _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::getItemFromDatabase failed on stepping statement (%d) - %{public}s", buf, 0x12u);
      }
      WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a2, v6);
      goto LABEL_16;
    }
  }
  *(unsigned char *)this = 1;
LABEL_17:
  *((_DWORD *)this + 2) = 1;
}

void WebKit::SQLiteStorageArea::allItems(WebKit::SQLiteStorageArea *this@<X0>, void *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)this, 0) || !*((void *)this + 15))
  {
    *a2 = 0;
    return;
  }
  int v29 = 0;
  uint64_t v4 = (WTF::StringImpl ***)((char *)this + 152);
  if (*((unsigned char *)this + 160))
  {
    if (*v4) {
      unsigned int v5 = *((_DWORD *)*v4 - 3);
    }
    else {
      unsigned int v5 = 0;
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(&v29, v5);
    if (!*((unsigned char *)this + 160)) {
      __break(1u);
    }
    uint64_t v6 = *v4;
    uint64_t v7 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
    uint64_t v8 = v7;
    int v10 = v9;
    if (v6) {
      v6 += 3 * *((unsigned int *)v6 - 1);
    }
    if (v6 != v7)
    {
      do
      {
        if (*((_DWORD *)v8 + 4))
        {
          WebKit::SQLiteStorageArea::getItemFromDatabase((WebKit::SQLiteStorageArea *)&v27, (WebCore::SQLiteDatabase **)this);
          uint64_t v11 = v28;
          if (!v28)
          {
            WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v29, v8, &v27, (uint64_t)buf);
            uint64_t v11 = v28;
          }
          if (v11 != 0xFFFFFFFFLL) {
            ((void (*)(uint8_t *, WebCore::SQLiteStatement **))off_1EE9CD8F0[v11])(buf, &v27);
          }
        }
        else
        {
          WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v29, v8, v8 + 1, (uint64_t)buf);
        }
        while (1)
        {
          v8 += 3;
          if (v8 == v10) {
            break;
          }
          if ((unint64_t)*v8 + 1 > 1) {
            goto LABEL_22;
          }
        }
        uint64_t v8 = v10;
LABEL_22:
        ;
      }
      while (v8 != v6);
    }
    goto LABEL_23;
  }
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v27, (uint64_t)this, 4u);
  if (v27)
  {
    *(void *)buf = 0;
    std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>((uint64_t)this + 152, (WTF::StringImpl *)buf);
    if (*(void *)buf) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(uint64_t *)buf, v12);
    }
    if (!*((unsigned char *)this + 172)) {
      *((unsigned char *)this + 172) = 1;
    }
    *((_DWORD *)this + 42) = 0;
    int v13 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v27);
    while (v13 == 100)
    {
      WebCore::SQLiteStatement::columnText(v27);
      WebCore::SQLiteStatement::columnBlobAsString(v27);
      if (v26) {
        BOOL v14 = v25 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (!v14)
      {
        WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v29, &v26, &v25, (uint64_t)buf);
        WebKit::SQLiteStorageArea::updateCacheIfNeeded((uint64_t)this, &v26, (const WTF::String *)&v25);
      }
      int v13 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v27);
      uint64_t v16 = v25;
      unint64_t v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = v26;
      char v26 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
    if (v13 != 101)
    {
      int v18 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        int Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = Error;
        __int16 v31 = 2082;
        uint64_t v32 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::allItems failed on executing statement (%d) - %{public}s", buf, 0x12u);
      }
      WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded(this, v13);
    }
LABEL_23:
    *a2 = v29;
    return;
  }
  uint64_t v19 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
  {
    int v21 = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
    uint64_t v22 = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v21;
    __int16 v31 = 2082;
    uint64_t v32 = v22;
    _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::allItems failed on creating statement (%d) - %{public}s", buf, 0x12u);
  }
  *a2 = 0;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
  if (v29) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v20);
  }
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    BOOL v14 = (uint64_t *)(v7 + 16 * (v10 & v8));
    uint64_t v15 = (WTF *)*v14;
    if (*v14 != -1) {
      break;
    }
    uint64_t v11 = (uint64_t *)(v7 + 16 * v13);
LABEL_13:
    unsigned int v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *uint64_t v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      BOOL v14 = v11;
    }
    uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::String&>(WTF::String const&,WTF::String&)::{lambda(void)#1}>(v14, a2, &v27);
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v14);
        BOOL v14 = (uint64_t *)result;
        uint64_t v21 = *a1;
        if (*a1) {
          unint64_t v24 = *(unsigned int *)(v21 - 4);
        }
        else {
          unint64_t v24 = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_26;
    }
    uint64_t v25 = v21 + 16 * v24;
    char v26 = 1;
    goto LABEL_31;
  }
  uint64_t result = WTF::equal(v15, *a2, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
  }
  else {
    uint64_t v20 = 0;
  }
  char v26 = 0;
  uint64_t v25 = v19 + 16 * v20;
LABEL_31:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v25;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

uint64_t WebKit::SQLiteStorageArea::updateCacheIfNeeded(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 160))
  {
    uint64_t v5 = this;
    uint64_t v6 = (uint64_t *)(this + 152);
    uint64_t v7 = (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 152), a2, a3);
    if (!*(unsigned char *)(v5 + 160)) {
      goto LABEL_172;
    }
    uint64_t v9 = *v6;
    if (*v6) {
      unsigned int v10 = (_DWORD *)(v9 + 24 * *(unsigned int *)(v9 - 4));
    }
    else {
      unsigned int v10 = 0;
    }
    if (*a2) {
      unsigned int v11 = *((_DWORD *)*a2 + 1) << (((*((_DWORD *)*a2 + 4) >> 2) & 1) == 0);
    }
    else {
      unsigned int v11 = 0;
    }
    uint64_t v12 = *(void *)a3;
    if (*(void *)a3) {
      unsigned int v13 = *(_DWORD *)(v12 + 4) << (((*(_DWORD *)(v12 + 16) >> 2) & 1) == 0);
    }
    else {
      unsigned int v13 = 0;
    }
    if (v10 == v7)
    {
      unsigned int v15 = 0;
      unsigned int v16 = 0;
      unsigned int v14 = v11;
    }
    else
    {
      if (*(void *)v7) {
        unsigned int v14 = *(_DWORD *)(*(void *)v7 + 4) << (((*(_DWORD *)(*(void *)v7 + 16) >> 2) & 1) == 0);
      }
      else {
        unsigned int v14 = 0;
      }
      int v17 = v7[4];
      if (v17 == 1)
      {
        unsigned int v15 = v7[2];
      }
      else
      {
        if (v17) {
          goto LABEL_173;
        }
        uint64_t v18 = *((void *)v7 + 1);
        if (v18) {
          unsigned int v15 = *(_DWORD *)(v18 + 4) << (((*(_DWORD *)(v18 + 16) >> 2) & 1) == 0);
        }
        else {
          unsigned int v15 = 0;
        }
      }
      unsigned int v16 = v14;
    }
    if (!*(unsigned char *)(v5 + 172)) {
      goto LABEL_172;
    }
    unsigned int v92 = v14;
    unsigned int v19 = *(_DWORD *)(v5 + 168);
    if (v12)
    {
      unsigned int v90 = v13;
      unsigned int v91 = v11;
      unsigned int v88 = v16;
      unsigned int v89 = v15;
      unsigned int v87 = *(_DWORD *)(v5 + 168);
      if (v13 >= 0x401)
      {
        if (v9
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
              (uint64_t v9 = *v6) != 0))
        {
          int v20 = *(_DWORD *)(v9 - 8);
        }
        else
        {
          int v20 = 0;
        }
        unsigned int v21 = *((_DWORD *)*a2 + 4);
        if (v21 >= 0x100) {
          unsigned int v22 = v21 >> 8;
        }
        else {
          unsigned int v22 = WTF::StringImpl::hashSlowCase(*a2);
        }
        uint64_t v29 = 0;
        for (int i = 1; ; ++i)
        {
          unsigned int v31 = v22 & v20;
          uint64_t v32 = (uint64_t *)(v9 + 24 * (v22 & v20));
          uint64_t v33 = (WTF *)*v32;
          if (*v32 == -1)
          {
            uint64_t v29 = v9 + 24 * v31;
          }
          else
          {
            if (!v33)
            {
              if (v29)
              {
                *(void *)uint64_t v29 = 0;
                *(void *)(v29 + 8) = 0;
                *(_DWORD *)(v29 + 16) = 0;
                --*(_DWORD *)(*v6 - 16);
                uint64_t v32 = (uint64_t *)v29;
              }
              WTF::String::operator=(v32, a2);
              unsigned int v13 = v90;
              *(_DWORD *)buf = v90;
              *(_DWORD *)uint64_t v95 = 1;
              this = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,unsigned int>,(std::__variant_detail::_Trait)1>>((uint64_t)(v32 + 1), (uint64_t)buf);
              unsigned int v11 = v91;
              unsigned int v16 = v88;
              if (*(_DWORD *)v95 != -1) {
                this = ((uint64_t (*)(char *, uint8_t *))off_1EE9CD8D0[*(unsigned int *)v95])(&v93, buf);
              }
              uint64_t v34 = *v6;
              if (*v6) {
                int v35 = *(_DWORD *)(v34 - 12) + 1;
              }
              else {
                int v35 = 1;
              }
              *(_DWORD *)(v34 - 12) = v35;
              uint64_t v60 = *v6;
              if (*v6) {
                int v61 = *(_DWORD *)(v60 - 12);
              }
              else {
                int v61 = 0;
              }
              uint64_t v64 = (*(_DWORD *)(v60 - 16) + v61);
              unint64_t v65 = *(unsigned int *)(v60 - 4);
              if (v65 > 0x400)
              {
                if (v65 > 2 * v64) {
                  goto LABEL_112;
                }
              }
              else if (3 * v65 > 4 * v64)
              {
                goto LABEL_112;
              }
              uint64_t v66 = v6;
              goto LABEL_105;
            }
            this = WTF::equal(v33, *a2, v8);
            if (this)
            {
              uint64_t v36 = v9 + 24 * v31;
              uint64_t v37 = (unsigned int *)(v36 + 8);
              uint64_t v38 = *(unsigned int *)(v36 + 16);
              unsigned int v13 = v90;
              unsigned int v11 = v91;
              unsigned int v16 = v88;
              if (v38 != -1)
              {
                if (v38 == 1)
                {
                  *uint64_t v37 = v90;
                  goto LABEL_112;
                }
                this = ((uint64_t (*)(uint8_t *, unsigned int *))off_1EE9CD8D0[v38])(buf, v37);
              }
              *uint64_t v37 = v90;
              v37[2] = 1;
              goto LABEL_112;
            }
          }
          unsigned int v22 = i + v31;
        }
      }
      if (v9
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
            (uint64_t v9 = *v6) != 0))
      {
        int v26 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        int v26 = 0;
      }
      unsigned int v27 = *((_DWORD *)*a2 + 4);
      uint64_t v86 = v6;
      if (v27 >= 0x100) {
        unsigned int v28 = v27 >> 8;
      }
      else {
        unsigned int v28 = WTF::StringImpl::hashSlowCase(*a2);
      }
      uint64_t v39 = 0;
      for (int j = 1; ; ++j)
      {
        unsigned int v41 = v28 & v26;
        long long v42 = (uint64_t *)(v9 + 24 * (v28 & v26));
        long long v43 = (WTF *)*v42;
        if (*v42 == -1)
        {
          uint64_t v39 = v9 + 24 * v41;
        }
        else
        {
          if (!v43)
          {
            uint64_t v6 = v86;
            if (v39)
            {
              *(void *)uint64_t v39 = 0;
              *(void *)(v39 + 8) = 0;
              *(_DWORD *)(v39 + 16) = 0;
              --*(_DWORD *)(*v86 - 16);
              long long v42 = (uint64_t *)v39;
            }
            WTF::String::operator=(v42, a2);
            int v44 = *(_DWORD **)a3;
            unsigned int v15 = v89;
            unsigned int v13 = v90;
            if (*(void *)a3) {
              *v44 += 2;
            }
            *(void *)buf = v44;
            *(_DWORD *)uint64_t v95 = 0;
            this = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,unsigned int>,(std::__variant_detail::_Trait)1>>((uint64_t)(v42 + 1), (uint64_t)buf);
            unsigned int v11 = v91;
            if (*(_DWORD *)v95 != -1) {
              this = ((uint64_t (*)(char *, uint8_t *))off_1EE9CD8D0[*(unsigned int *)v95])(&v93, buf);
            }
            uint64_t v45 = *v86;
            if (*v86) {
              int v46 = *(_DWORD *)(v45 - 12) + 1;
            }
            else {
              int v46 = 1;
            }
            *(_DWORD *)(v45 - 12) = v46;
            uint64_t v62 = *v86;
            if (*v86) {
              int v63 = *(_DWORD *)(v62 - 12);
            }
            else {
              int v63 = 0;
            }
            uint64_t v67 = (*(_DWORD *)(v62 - 16) + v63);
            unint64_t v68 = *(unsigned int *)(v62 - 4);
            if (v68 > 0x400)
            {
              if (v68 > 2 * v67) {
                goto LABEL_112;
              }
            }
            else if (3 * v68 > 4 * v67)
            {
              goto LABEL_112;
            }
            uint64_t v66 = v86;
LABEL_105:
            this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v66);
LABEL_112:
            unsigned int v70 = v87 - v16;
            if (v87 < v16) {
              unsigned int v70 = v87;
            }
            unsigned int v71 = v70 - v15;
            if (v70 < v15) {
              unsigned int v71 = v70;
            }
            unsigned int v72 = v71 + v92;
            BOOL v73 = __CFADD__(v71, v92);
            if (__CFADD__(v71, v92)) {
              unsigned int v72 = v71;
            }
            int v74 = v70 < v15 || v73;
            if (v87 < v16) {
              BOOL v57 = 1;
            }
            else {
              BOOL v57 = v74;
            }
            unsigned int v59 = v72 + v13;
            if (!__CFADD__(v72, v13))
            {
LABEL_128:
              if (v57) {
                goto LABEL_129;
              }
              if (!*(unsigned char *)(v5 + 172))
              {
LABEL_162:
                *(_DWORD *)(v5 + 168) = v59;
                *(unsigned char *)(v5 + 172) = 1;
                return this;
              }
LABEL_160:
              *(_DWORD *)(v5 + 168) = v59;
              return this;
            }
LABEL_129:
            uint64_t v75 = qword_1EB3585F0;
            if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
            {
              if (*(unsigned char *)(v5 + 172))
              {
                int v85 = *(_DWORD *)(v5 + 168);
                *(_DWORD *)buf = 67110144;
                *(_DWORD *)&uint8_t buf[4] = v85;
                *(_WORD *)uint64_t v95 = 1024;
                *(_DWORD *)&void v95[2] = v16;
                __int16 v96 = 1024;
                unsigned int v97 = v15;
                __int16 v98 = 1024;
                unsigned int v99 = v11;
                __int16 v100 = 1024;
                unsigned int v101 = v13;
                _os_log_error_impl(&dword_1985F2000, v75, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::updateCacheIfNeeded newCacheSize has overflowed: cacheSize - %u, oldKeySize - %u, oldValueSize - %u, keySize - %u, valueSize - %u, will recompute", buf, 0x20u);
                goto LABEL_130;
              }
            }
            else
            {
LABEL_130:
              if (*(unsigned char *)(v5 + 160))
              {
                int v76 = (void *)*v6;
                this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v76);
                if (v76) {
                  uint64_t v78 = &v76[3 * *((unsigned int *)v76 - 1)];
                }
                else {
                  uint64_t v78 = 0;
                }
                if (v78 == (void *)this)
                {
                  unsigned int v59 = 0;
                  int v80 = 0;
                }
                else
                {
                  unsigned int v79 = 0;
                  int v80 = 0;
                  unsigned int v59 = 0;
                  do
                  {
                    int v81 = *(_DWORD *)(this + 16);
                    if (v81 == 1)
                    {
                      LODWORD(v82) = *(_DWORD *)(this + 8);
                    }
                    else
                    {
                      if (v81) {
                        goto LABEL_173;
                      }
                      uint64_t v82 = *(void *)(this + 8);
                      if (v82) {
                        LODWORD(v82) = *(_DWORD *)(v82 + 4) << ((*(_DWORD *)(v82 + 16) & 4) == 0);
                      }
                    }
                    BOOL v58 = __CFADD__(v79, v82);
                    unsigned int v83 = v79 + v82;
                    char v84 = v58;
                    if (v84) {
                      int v80 = 1;
                    }
                    else {
                      unsigned int v59 = v83;
                    }
                    if ((v84 & 1) == 0) {
                      unsigned int v79 = v83;
                    }
                    while (1)
                    {
                      this += 24;
                      if (this == v77) {
                        break;
                      }
                      if ((unint64_t)(*(void *)this + 1) > 1) {
                        goto LABEL_155;
                      }
                    }
                    this = v77;
LABEL_155:
                    ;
                  }
                  while ((void *)this != v78);
                }
                if (*(unsigned char *)(v5 + 172))
                {
                  if (!v80) {
                    goto LABEL_160;
                  }
                }
                else if (!v80)
                {
                  goto LABEL_162;
                }
                __break(0xC471u);
                JUMPOUT(0x198CCDDE4);
              }
            }
LABEL_172:
            __break(1u);
LABEL_173:
            std::__throw_bad_variant_access[abi:sn180100]();
          }
          this = WTF::equal(v43, *a2, v8);
          if (this)
          {
            uint64_t v47 = v9 + 24 * v41;
            uint64_t v48 = v47 + 8;
            uint64_t v49 = *(unsigned int *)(v47 + 16);
            uint64_t v6 = v86;
            unsigned int v13 = v90;
            unsigned int v11 = v91;
            unsigned int v15 = v89;
            if (v49 != -1)
            {
              if (!v49)
              {
                this = (uint64_t)WTF::String::operator=((uint64_t *)v48, (WTF::StringImpl **)a3);
                goto LABEL_112;
              }
              this = ((uint64_t (*)(uint8_t *, uint64_t))off_1EE9CD8D0[v49])(buf, v48);
            }
            int v69 = *(_DWORD **)a3;
            if (*(void *)a3) {
              *v69 += 2;
            }
            *(void *)uint64_t v48 = v69;
            *(_DWORD *)(v48 + 8) = 0;
            goto LABEL_112;
          }
        }
        unsigned int v28 = j + v41;
      }
    }
    this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, a2, v8);
    uint64_t v24 = this;
    if (*v6)
    {
      uint64_t v25 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
      if (v25 == this) {
        goto LABEL_87;
      }
    }
    else
    {
      if (!this) {
        goto LABEL_87;
      }
      uint64_t v25 = 0;
    }
    if (v25 != this)
    {
      this = (uint64_t)WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)this, v23);
      uint64_t v50 = *(unsigned int *)(v24 + 16);
      if (v50 != -1) {
        this = ((uint64_t (*)(uint8_t *, uint64_t))off_1EE9CD8D0[v50])(buf, v24 + 8);
      }
      int v51 = -1;
      *(_DWORD *)(v24 + 16) = -1;
      ++*(_DWORD *)(*v6 - 16);
      uint64_t v52 = *v6;
      if (*v6) {
        int v51 = *(_DWORD *)(v52 - 12) - 1;
      }
      *(_DWORD *)(v52 - 12) = v51;
      uint64_t v53 = *v6;
      if (*v6)
      {
        unsigned int v54 = 6 * *(_DWORD *)(v53 - 12);
        unsigned int v55 = *(_DWORD *)(v53 - 4);
        if (v54 < v55 && v55 >= 9) {
          this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, v55 >> 1);
        }
      }
    }
LABEL_87:
    unsigned int v56 = v19 - v16;
    BOOL v57 = v19 < v16;
    if (v19 < v16) {
      unsigned int v56 = v19;
    }
    BOOL v58 = v56 >= v15;
    unsigned int v59 = v56 - v15;
    if (v58) {
      goto LABEL_128;
    }
    goto LABEL_129;
  }
  return this;
}

uint64_t WebKit::SQLiteStorageArea::setItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X3>, const WTF::String *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::SQLiteStorageArea::prepareDatabase(a1, (const WTF::String *)1);
  if ((result & 1) == 0)
  {
    __int16 v21 = 256;
LABEL_36:
    *(_WORD *)a7 = v21;
    return result;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    if (!*(void *)a5) {
      goto LABEL_38;
    }
    if (!*(unsigned char *)(a1 + 172)
      || (unsigned int v16 = (uint64_t *)(a1 + 152),
          unsigned int v17 = *(_DWORD *)(a1 + 168),
          uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 152), a4, v15), !*(unsigned char *)(a1 + 160)))
    {
      __break(1u);
    }
    uint64_t v18 = *v16;
    if (*v16) {
      v18 += 24 * *(unsigned int *)(v18 - 4);
    }
    if (v18 == result)
    {
      uint64_t v25 = *a4;
      if (*a4) {
        LODWORD(v25) = *((_DWORD *)v25 + 1) << ((*((_DWORD *)v25 + 4) & 4) == 0);
      }
      unsigned int v26 = v17 + v25;
      BOOL v27 = __CFADD__(v17, v25);
    }
    else
    {
      int v19 = *(_DWORD *)(result + 16);
      if (v19 == 1)
      {
        LODWORD(v20) = *(_DWORD *)(result + 8);
      }
      else
      {
        if (v19) {
          goto LABEL_61;
        }
        uint64_t v20 = *(void *)(result + 8);
        if (v20) {
          LODWORD(v20) = *(_DWORD *)(v20 + 4) << ((*(_DWORD *)(v20 + 16) & 4) == 0);
        }
      }
      unsigned int v26 = v17 - v20;
      BOOL v27 = v17 < v20;
    }
    if (v27) {
      unsigned int v26 = v17;
    }
    uint64_t v28 = *(void *)a5;
    if (*(void *)a5) {
      LODWORD(v28) = *(_DWORD *)(v28 + 4) << ((*(_DWORD *)(v28 + 16) & 4) == 0);
    }
    BOOL v29 = __CFADD__(v26, v28);
    unsigned int v24 = v26 + v28;
    int v30 = v29;
    if ((v30 | v27)) {
      goto LABEL_35;
    }
  }
  else
  {
    unsigned int v22 = *a4;
    if (*a4) {
      LODWORD(v22) = *((_DWORD *)v22 + 1) << ((*((_DWORD *)v22 + 4) & 4) == 0);
    }
    uint64_t v23 = *(void *)a5;
    if (*(void *)a5) {
      LODWORD(v23) = *(_DWORD *)(v23 + 4) << ((*(_DWORD *)(v23 + 16) & 4) == 0);
    }
    unsigned int v24 = v23 + v22;
  }
  if (v24 > *(_DWORD *)(a1 + 24))
  {
LABEL_35:
    __int16 v21 = 258;
    goto LABEL_36;
  }
LABEL_38:
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  WebKit::SQLiteStorageArea::getItem((WebKit::SQLiteStorageArea *)&v48, (const WTF::String *)a1, a4);
  uint64_t v47 = 0;
  if (v49 != 1)
  {
    if (!v49)
    {
      WTF::String::operator=((uint64_t *)&v47, &v48);
LABEL_42:
      WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v46, a1, 5u);
      if (!v46
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::bindBlob(v46, 2, a5))
      {
        uint64_t v32 = qword_1EB3585F0;
        if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
        {
          int Error = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
          *(_DWORD *)buf = 67109378;
          int v51 = Error;
          __int16 v52 = 2082;
          uint64_t v53 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::setItem failed on creating statement (%d) - %{public}s", buf, 0x12u);
        }
        *(_WORD *)a7 = 256;
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v46);
      }
      else
      {
        uint64_t v33 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v46);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v46);
        if (v33 == 101)
        {
          WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)a4, (uint64_t)&v47, (uint64_t)a5, a6);
          WebKit::SQLiteStorageArea::updateCacheIfNeeded(a1, a4, a5);
          *(_WORD *)a7 = 0;
        }
        else
        {
          uint64_t v36 = qword_1EB3585F0;
          if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
          {
            int v37 = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
            uint64_t v38 = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
            *(_DWORD *)buf = 67109378;
            int v51 = v37;
            __int16 v52 = 2082;
            uint64_t v53 = v38;
            _os_log_error_impl(&dword_1985F2000, v36, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::setItem failed on stepping statement (%d) - %{public}s", buf, 0x12u);
          }
          WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v33);
          *(_WORD *)a7 = 256;
        }
      }
      goto LABEL_49;
    }
LABEL_61:
    uint64_t v39 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageAreaBase::dispatchEvents(v39, v40, v41, v42, v43, v44, v45);
  }
  if (v48 == 1) {
    goto LABEL_42;
  }
  *(unsigned char *)a7 = (_BYTE)v48;
  *(unsigned char *)(a7 + 1) = 1;
LABEL_49:
  uint64_t result = (uint64_t)v47;
  uint64_t v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v49 != -1) {
    return ((uint64_t (*)(uint8_t *, WTF::StringImpl **))off_1EE9CD8F0[v49])(buf, &v48);
  }
  return result;
}

uint64_t WebKit::StorageAreaBase::dispatchEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin((void **)(a1 + 96));
  unsigned int v14 = (uint64_t *)result;
  unsigned int v16 = v15;
  uint64_t v17 = *(void *)(a1 + 96);
  if (v17) {
    uint64_t v18 = (uint64_t *)(v17 + 16 * *(unsigned int *)(v17 - 4));
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18 != (uint64_t *)result)
  {
    do
    {
      LOBYTE(v23) = 0;
      char v24 = 0;
      uint64_t v19 = *v14;
      if (*v14 == a2)
      {
        char v24 = 1;
        uint64_t v23 = a3;
        uint64_t v19 = *v14;
      }
      unint64_t v20 = atomic_fetch_add(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier, 1uLL) + 1;
      v22[0] = (uint64_t)&v23;
      v22[1] = a4;
      v22[2] = a5;
      v22[3] = a6;
      v22[4] = a7;
      v22[5] = v20;
      uint64_t result = IPC::Connection::send<Messages::StorageAreaMap::DispatchStorageEvent>(v19, v22, v14[1], 0, 0);
      while (1)
      {
        v14 += 2;
        if (v14 == v16) {
          break;
        }
        if ((unint64_t)(*v14 + 1) > 1) {
          goto LABEL_12;
        }
      }
      unsigned int v14 = v16;
LABEL_12:
      ;
    }
    while (v14 != v18);
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::removeItem@<X0>(WebCore::SQLiteDatabase **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X3>, uint64_t a5@<X4>, __int16 *a6@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)a1, 0);
  if ((result & 1) == 0)
  {
    __int16 v16 = 256;
LABEL_7:
    *a6 = v16;
    return result;
  }
  if (!a1[15])
  {
    __int16 v16 = 257;
    goto LABEL_7;
  }
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  uint64_t v28 = 0;
  WebKit::SQLiteStorageArea::getItem((WebKit::SQLiteStorageArea *)buf, (const WTF::String *)a1, a4);
  int v14 = v30[0];
  if (v30[0])
  {
    *a6 = 257;
    int v15 = v14;
  }
  else
  {
    WTF::String::operator=((uint64_t *)&v28, (WTF::StringImpl **)buf);
    int v15 = v30[0];
  }
  if (v15 != -1) {
    ((void (*)(WebCore::SQLiteStatement **, uint8_t *))off_1EE9CD8F0[v15])(&v27, buf);
  }
  if (!v14)
  {
    WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v27, (uint64_t)a1, 1u);
    if (v27 && !WebCore::SQLiteStatement::bindText())
    {
      uint64_t v18 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v27);
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
      if (v18 == 101)
      {
        *(void *)buf = 0;
        WebKit::StorageAreaBase::dispatchEvents((uint64_t)a1, a2, a3, (uint64_t)a4, (uint64_t)&v28, (uint64_t)buf, a5);
        unint64_t v20 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v19);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        *(void *)buf = 0;
        WebKit::SQLiteStorageArea::updateCacheIfNeeded((uint64_t)a1, a4, (const WTF::String *)buf);
        char v24 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v13);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        *a6 = 0;
      }
      else
      {
        __int16 v21 = qword_1EB3585F0;
        if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
        {
          int Error = WebCore::SQLiteDatabase::lastError(a1[15]);
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(a1[15]);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = Error;
          LOWORD(v30[0]) = 2082;
          *(void *)((char *)v30 + 2) = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::removeItem failed on executing statement (%d) - %{public}s", buf, 0x12u);
        }
        WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v18);
        *a6 = 256;
      }
    }
    else
    {
      uint64_t v17 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        int v22 = WebCore::SQLiteDatabase::lastError(a1[15]);
        uint64_t v23 = WebCore::SQLiteDatabase::lastErrorMsg(a1[15]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v22;
        LOWORD(v30[0]) = 2082;
        *(void *)((char *)v30 + 2) = v23;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::removeItem failed on creating statement (%d) - %{public}s", buf, 0x12u);
      }
      *a6 = 256;
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
    }
  }
  uint64_t result = (uint64_t)v28;
  uint64_t v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::SQLiteStorageArea::clear(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 *a5@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((WebKit::SQLiteStorageArea::prepareDatabase(a1, 0) & 1) == 0) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v11 = *(void *)(a1 + 152);
    if (!v11 || !*(_DWORD *)(v11 - 12)) {
      goto LABEL_15;
    }
    *(void *)(a1 + 152) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
    if (!*(unsigned char *)(a1 + 172)) {
      *(unsigned char *)(a1 + 172) = 1;
    }
    *(_DWORD *)(a1 + 168) = 0;
  }
  if (!*(void *)(a1 + 120))
  {
LABEL_15:
    __int16 v15 = 257;
LABEL_23:
    *a5 = v15;
    return;
  }
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v25, a1, 2u);
  if (v25)
  {
    uint64_t v12 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v25);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v25);
    if (v12 == 101)
    {
      if ((int)WebCore::SQLiteDatabase::lastChanges(*(WebCore::SQLiteDatabase **)(a1 + 120)) > 0)
      {
        uint64_t v25 = 0;
        *(void *)buf = 0;
        char v24 = 0;
        WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)buf, (uint64_t)&v25, (uint64_t)&v24, a4);
        int v14 = v24;
        char v24 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        uint64_t v18 = v25;
        uint64_t v25 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v13);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v13);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        *a5 = 0;
        return;
      }
      goto LABEL_15;
    }
    uint64_t v17 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
    {
      int Error = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = Error;
      __int16 v27 = 2082;
      uint64_t v28 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::clear failed on executing statement (%d) - %{public}s", buf, 0x12u);
    }
    WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v12);
LABEL_22:
    __int16 v15 = 256;
    goto LABEL_23;
  }
  __int16 v16 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
  {
    int v20 = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
    uint64_t v21 = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v20;
    __int16 v27 = 2082;
    uint64_t v28 = v21;
    _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::clear failed on creating statement (%d) - %{public}s", buf, 0x12u);
  }
  *a5 = 256;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v25);
}

uint64_t WebKit::ServiceWorkerStorageManager::updateRegistrations@<X0>(WebKit::ServiceWorkerStorageManager *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = WebKit::ServiceWorkerStorageManager::ensureDatabase(a1);
  if (result)
  {
    return MEMORY[0x1F4170E68]();
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t WebKit::StorageAreaBase::removeListener(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  int v2 = (uint64_t *)(a1 + 96);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 96), &v5);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::remove(v2, v3);
}

uint64_t WebKit::SessionStorageManager::removeNamespace(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::take(a1 + 2, &v8);
  uint64_t v7 = result;
  if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 1, &v7);
    uint64_t v5 = a1[1];
    if (v5)
    {
      uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
      if (v6 == v4) {
        return WebKit::StorageAreaRegistry::unregisterStorageArea(*a1, v7);
      }
    }
    else
    {
      if (!v4) {
        return WebKit::StorageAreaRegistry::unregisterStorageArea(*a1, v7);
      }
      uint64_t v6 = 0;
    }
    if (v6 != v4) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 1, v4);
    }
    return WebKit::StorageAreaRegistry::unregisterStorageArea(*a1, v7);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::take(uint64_t *a1, void *a2)
{
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  if (!*a1)
  {
    if (v3) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4)) == v3) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = v3[1];
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, v3);
  return v4;
}

uint64_t WebKit::StorageAreaRegistry::unregisterStorageArea(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 8), &v5);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(v2, v3);
}

uint64_t WebKit::SessionStorageManager::addStorageArea(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v9 = a3;
  uint64_t v5 = *a2;
  uint64_t v10 = *(void *)(*a2 + 16);
  uint64_t v7 = a1 + 1;
  uint64_t v6 = *a1;
  uint64_t v12 = v10;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>((uint64_t *)(v6 + 8), &v12, v5, (uint64_t)v11);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>(a1 + 2, &v9, &v10, (uint64_t)v11);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::MemoryStorageArea>>(v7, &v10, a2, (uint64_t)v11);
  return v10;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  __int16 v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      __int16 v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      __int16 v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  v16[1] = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      __int16 v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  uint64_t v28 = v23 + 16 * v26;
  char v27 = 1;
LABEL_29:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::MemoryStorageArea>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  __int16 v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      __int16 v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = *a2;
      __int16 v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  int v21 = (WebKit::StorageAreaBase *)v16[1];
  v16[1] = v20;
  if (v21) {
    std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100](v16 + 8, v21);
  }
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *a1;
  if (*a1) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      __int16 v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
      uint64_t v25 = *a1;
      if (*a1) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
}

uint64_t WebKit::SessionStorageManager::connectToSessionStorageArea(uint64_t *a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v16);
  if ((unint64_t)(v15 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    char v9 = (WebKit::StorageAreaBase *)WTF::fastMalloc((WTF *)0x80);
    int v10 = WebKit::StorageAreaBase::StorageAreaBase(v9, -1, a4);
    *(void *)int v10 = &unk_1EE9CC6F8;
    WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v10 + 104));
    *((unsigned char *)v9 + 120) = 0;
    unint64_t v14 = v9;
    uint64_t v11 = WebKit::SessionStorageManager::addStorageArea(a1, (uint64_t *)&v14, v16);
    unint64_t v12 = v14;
    unint64_t v14 = 0;
    uint64_t v15 = v11;
    if (v12) {
      std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)&v14, v12);
    }
  }
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 1, &v15);
  if (result)
  {
    uint64_t v18 = a3;
    int v19 = a2;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>((uint64_t *)(result + 96), &v19, &v18, (uint64_t)v17);
    return v15;
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::cancelConnectToSessionStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v7);
  uint64_t v6 = result;
  if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 8), &v6);
    if (result) {
      return WebKit::StorageAreaBase::removeListener(result, a2);
    }
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::disconnectFromStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 8), &v5);
  if (result) {
    return WebKit::StorageAreaBase::removeListener(result, a2);
  }
  return result;
}

void WebKit::SessionStorageManager::cloneStorageArea(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v9);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = (WebKit::MemoryStorageArea *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 1, &v8);
    if (v5)
    {
      WebKit::MemoryStorageArea::clone(v5, (uint64_t *)&v7);
      WebKit::SessionStorageManager::addStorageArea(a1, (uint64_t *)&v7, a3);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)&v7, v6);
      }
    }
  }
}

unint64_t WebKit::StorageAreaBase::nextMessageIdentifier(WebKit::StorageAreaBase *this)
{
  return atomic_fetch_add(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier, 1uLL) + 1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v11 = result & v9;
  unint64_t v12 = (void *)(v8 + 16 * (result & v9));
  unint64_t v13 = (void *)*v12;
  unint64_t v14 = *a2;
  if (*v12)
  {
    int v23 = 0;
    int v24 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v25 = *a1;
        if (*a1) {
          uint64_t v26 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == (void *)-1) {
        int v23 = v12;
      }
      unsigned int v11 = (v11 + v24) & v9;
      unint64_t v12 = (void *)(v8 + 16 * v11);
      unint64_t v13 = (void *)*v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *int v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      unint64_t v14 = *a2;
      unint64_t v12 = v23;
    }
  }
  *unint64_t v12 = v14;
  v12[1] = *a3;
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, (void **)v12);
    unint64_t v12 = (void *)result;
    uint64_t v17 = *a1;
    if (*a1) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v21 = v17 + 16 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v21;
  *(unsigned char *)(a4 + 16) = v22;
  return result;
}

BOOL WebKit::StorageAreaBase::hasListeners(WebKit::StorageAreaBase *this)
{
  uint64_t v1 = *((void *)this + 12);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

uint64_t IPC::Connection::send<Messages::StorageAreaMap::ClearCache>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  IPC::Connection::connection(a1, &v28);
  uint64_t v9 = (uint64_t)v28;
  if (!v28) {
    return 2;
  }
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 1491;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  char v29 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v29, a4, a5);
  unint64_t v13 = v29;
  char v29 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v25, v26);
  }
  unint64_t v14 = v28;
  unint64_t v28 = 0;
  if (v14)
  {
    char v15 = 0;
    atomic_uchar *volatile v16 = *v14;
    atomic_compare_exchange_strong_explicit(*v14, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
    if (v15) {
      MEMORY[0x19972E8D0](v16);
    }
    uint64_t v17 = *((void *)v16 + 1);
    uint64_t v18 = v17 - 1;
    *((void *)v16 + 1) = v17 - 1;
    if (v17 == 1)
    {
      uint64_t v27 = *((void *)v16 + 2);
      uint64_t v20 = *((void *)v16 + 3);
      *((void *)v16 + 3) = 0;
      BOOL v19 = v27 == 0;
    }
    else
    {
      BOOL v19 = 0;
      uint64_t v20 = 0;
    }
    int v21 = 1;
    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
    if (v21 == 1)
    {
      if (v18) {
        return v12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (v18) {
        return v12;
      }
    }
    uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v22 = &unk_1EE9B37E8;
    *(void *)(v22 + 8) = v16;
    *(void *)(v22 + 16) = v20;
    *(unsigned char *)(v22 + 24) = v19;
    char v29 = (IPC::Encoder *)v22;
    WTF::ensureOnMainRunLoop();
    int v23 = v29;
    char v29 = 0;
    if (v23) {
      (*(void (**)(IPC::Encoder *))(*(void *)v23 + 8))(v23);
    }
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::StorageAreaMap::DispatchStorageEvent>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  IPC::Connection::connection(a1, &v39);
  uint64_t v9 = (uint64_t)v39;
  if (!v39) {
    return 2;
  }
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 1492;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v40 = v10;
  uint64_t v11 = *a2;
  int v12 = *(unsigned __int8 *)(*a2 + 8);
  unint64_t v13 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (!v12)
  {
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198CCF7B0);
    }
    *unint64_t v13 = 0;
LABEL_9:
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2[1]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2[2]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2[3]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2[4]);
    uint64_t v16 = a2[5];
    uint64_t v17 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
    if (v18 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198CCF740);
    }
    void *v17 = v16;
    uint64_t v15 = IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v40, a4, a5);
    uint64_t v20 = v40;
    uint64_t v40 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v32, v33);
    }
    int v21 = v39;
    uint64_t v39 = 0;
    if (!v21) {
      return v15;
    }
    char v22 = 0;
    atomic_uchar *volatile v23 = *v21;
    atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x19972E8D0](v23);
    }
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = v24 - 1;
    *((void *)v23 + 1) = v24 - 1;
    if (v24 == 1)
    {
      uint64_t v34 = *((void *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 3);
      *((void *)v23 + 3) = 0;
      BOOL v26 = v34 == 0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = 0;
    }
    int v28 = 1;
    atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (!v25) {
        goto LABEL_19;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (!v25)
      {
LABEL_19:
        uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v29 = &unk_1EE9B37E8;
        *(void *)(v29 + 8) = v23;
        *(void *)(v29 + 16) = v27;
        *(unsigned char *)(v29 + 24) = v26;
        uint64_t v40 = (IPC::Encoder *)v29;
        WTF::ensureOnMainRunLoop();
        uint64_t v30 = v40;
        uint64_t v40 = 0;
        if (v30) {
          (*(void (**)(IPC::Encoder *))(*(void *)v30 + 8))(v30);
        }
      }
    }
    return v15;
  }
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCF790);
  }
  *unint64_t v13 = 1;
  if (*(unsigned char *)(v11 + 8))
  {
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, (uint64_t *)v11);
    goto LABEL_9;
  }
  int v35 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>(v35, v36, v37, v38);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v10 = result & v8;
  uint64_t v11 = (void *)(v7 + 16 * (result & v8));
  uint64_t v12 = *v11;
  uint64_t v13 = *a2;
  if (*v11)
  {
    char v22 = 0;
    int v23 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v24 = *a1;
        if (*a1) {
          uint64_t v25 = *(unsigned int *)(v24 - 4);
        }
        else {
          uint64_t v25 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v24 + 16 * v25;
        goto LABEL_12;
      }
      if (v12 == -1) {
        char v22 = v11;
      }
      unsigned int v10 = (v10 + v23) & v8;
      uint64_t v11 = (void *)(v7 + 16 * v10);
      uint64_t v12 = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *char v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v13 = *a2;
      uint64_t v11 = v22;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaBase&>(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaBase&)::{lambda(void)#1}>(v11, v13, &v26);
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v11);
    uint64_t v11 = (void *)result;
    uint64_t v16 = *a1;
    if (*a1) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v20 = v16 + 16 * v19;
  char v21 = 1;
LABEL_12:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v21;
  return result;
}

uint64_t WebKit::StorageAreaRegistry::getStorageArea(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 8), &v7);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (!v4) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  uint64_t v5 = *(void *)(v4 + 8);
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v5;
}

void WebKit::NetworkMDNSRegister::~NetworkMDNSRegister(WebKit::NetworkMDNSRegister *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)this + 1);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  }
  uint64_t v6 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

uint64_t WebKit::NetworkMDNSRegister::hasRegisteredName(WebKit::NetworkMDNSRegister *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    int v10 = v8 & v6;
    uint64_t result = *(void *)(v3 + 8 * (v8 & v6));
    if (result != -1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal((WTF *)result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return 1;
}

uint64_t WebKit::NetworkMDNSRegister::unregisterMDNSNames(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 3;
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
  uint64_t v6 = a1[3];
  if (v6)
  {
    unsigned int v7 = (uint64_t *)(v6 + 48 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    unsigned int v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v4, v5);
  }
LABEL_8:
  unsigned int v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 2, a2);
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take(a1 + 2, v8, &v17);
  if (v18)
  {
    uint64_t v11 = v17;
    uint64_t v12 = a1 + 1;
    for (uint64_t i = 8 * v18; i; i -= 8)
    {
      uint64_t v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v12, v11, v10);
      uint64_t v9 = v14;
      if (*v12)
      {
        uint64_t v15 = *v12 + 8 * *(unsigned int *)(*v12 - 4);
        if ((WTF::StringImpl **)v15 != v14) {
          goto LABEL_12;
        }
      }
      else if (v14)
      {
        uint64_t v15 = 0;
LABEL_12:
        if ((WTF::StringImpl **)v15 != v14) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v12, v14);
        }
      }
      ++v11;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
}

WTF::StringImpl *WebKit::NetworkMDNSRegister::registerMDNSName(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  WTF::UUID::UUID((WTF::UUID *)buf);
  sdRef[0] = (DNSServiceRef)".local";
  sdRef[1] = (DNSServiceRef)7;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::UUID,WTF::ASCIILiteral>(buf, (uint64_t *)sdRef, &v108);
  if (!v108)
  {
    __break(0xC471u);
    return result;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1 + 1, &v108, v8, (uint64_t)buf);
  uint64_t v9 = a1 + 2;
  uint64_t v10 = a1[2];
  if (v10
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 2, 0), (uint64_t v10 = *v9) != 0))
  {
    int v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v11 = 0;
  }
  *(_DWORD *)buf = -1640531527;
  *(_WORD *)&uint8_t buf[4] = 0;
  buf[6] = 0;
  WTF::addArgs<WTF::UUID>(buf, a2);
  unsigned int v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v11;
  uint64_t v13 = v10 + 48 * v12;
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  if (*(_OWORD *)v13 == 0 && v16 == 0)
  {
LABEL_26:
    long long v23 = *(_OWORD *)a2;
    *(void *)(v13 + 16) = a2[2];
    *(_OWORD *)uint64_t v13 = v23;
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 32, buf);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v24);
    uint64_t v25 = *v9;
    if (*v9) {
      int v26 = *(_DWORD *)(v25 - 12) + 1;
    }
    else {
      int v26 = 1;
    }
    *(_DWORD *)(v25 - 12) = v26;
    uint64_t v27 = *v9;
    if (*v9) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29) {
        goto LABEL_35;
      }
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_35;
    }
    uint64_t v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 2, v13);
    goto LABEL_35;
  }
  unsigned int v18 = 0;
  int v19 = 1;
  while (1)
  {
    BOOL v20 = v14 == a2[1] && v15 == *a2;
    if (v20 && v16 == a2[2]) {
      break;
    }
    if (v16 == -1) {
      unsigned int v18 = (void *)v13;
    }
    unsigned int v12 = (v12 + v19) & v11;
    uint64_t v13 = v10 + 48 * v12;
    uint64_t v15 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 16);
    ++v19;
    if (*(_OWORD *)v13 == 0 && v16 == 0)
    {
      if (v18)
      {
        void *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        v18[4] = 0;
        v18[5] = 0;
        --*(_DWORD *)(*v9 - 16);
        uint64_t v13 = (uint64_t)v18;
      }
      goto LABEL_26;
    }
  }
LABEL_35:
  uint64_t v31 = (uint64_t *)(v13 + 32);
  uint64_t v32 = *(unsigned int *)(v13 + 44);
  if (v32 == *(_DWORD *)(v13 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v31, (unint64_t)&v108);
  }
  else
  {
    uint64_t v33 = *v31;
    uint64_t v34 = v108;
    if (v108) {
      *(_DWORD *)v108 += 2;
    }
    *(void *)(v33 + 8 * v32) = v34;
    *(_DWORD *)(v13 + 44) = v32 + 1;
  }
  sdRef[0] = 0;
  int v35 = a1 + 3;
  uint64_t v36 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
  uint64_t v37 = (uint64_t *)a1[3];
  if (v37) {
    v37 += 6 * *((unsigned int *)v37 - 1);
  }
  if (v37 == v36)
  {
    DNSServiceErrorType Connection = DNSServiceCreateConnection(sdRef);
    if (Connection)
    {
      DNSServiceErrorType v43 = Connection;
      uint64_t v44 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
LABEL_79:
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v43;
        _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName DNSServiceCreateConnection error %d", buf, 0x12u);
      }
    }
    else
    {
      DNSServiceErrorType v67 = DNSServiceSetDispatchQueue(sdRef[0], MEMORY[0x1E4F14428]);
      if (!v67)
      {
        int v85 = sdRef[0];
        uint64_t v86 = *v35;
        if (*v35
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 3, 0), (uint64_t v86 = *v35) != 0))
        {
          int v87 = *(_DWORD *)(v86 - 8);
        }
        else
        {
          int v87 = 0;
        }
        *(_DWORD *)buf = -1640531527;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 0;
        WTF::addArgs<WTF::UUID>(buf, a2);
        unsigned int v88 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v87;
        unsigned int v89 = (void *)(v86 + 48 * v88);
        uint64_t v91 = *v89;
        uint64_t v90 = v89[1];
        uint64_t v92 = v89[2];
        if (*(_OWORD *)v89 != 0 || v92)
        {
          char v93 = 0;
          int v94 = 1;
          while (1)
          {
            BOOL v95 = v90 == a2[1] && v91 == *a2;
            if (v95 && v92 == a2[2]) {
              break;
            }
            if (v92 == -1) {
              char v93 = v89;
            }
            unsigned int v88 = (v88 + v94) & v87;
            unsigned int v89 = (void *)(v86 + 48 * v88);
            uint64_t v91 = *v89;
            uint64_t v90 = v89[1];
            uint64_t v92 = v89[2];
            ++v94;
            if (*(_OWORD *)v89 == 0 && v92 == 0)
            {
              if (v93)
              {
                *char v93 = 0;
                v93[1] = 0;
                v93[2] = 0;
                v93[4] = 0;
                --*(_DWORD *)(*v35 - 16);
                unsigned int v89 = v93;
              }
              goto LABEL_147;
            }
          }
          if (v85) {
            DNSServiceRefDeallocate(v85);
          }
          goto LABEL_43;
        }
LABEL_147:
        long long v98 = *(_OWORD *)a2;
        v89[2] = a2[2];
        *(_OWORD *)unsigned int v89 = v98;
        unsigned int v99 = (_DNSServiceRef_t *)v89[4];
        v89[4] = v85;
        if (v99) {
          DNSServiceRefDeallocate(v99);
        }
        uint64_t v100 = *v35;
        if (*v35) {
          int v101 = *(_DWORD *)(v100 - 12) + 1;
        }
        else {
          int v101 = 1;
        }
        *(_DWORD *)(v100 - 12) = v101;
        uint64_t v102 = *v35;
        if (*v35) {
          int v103 = *(_DWORD *)(v102 - 12);
        }
        else {
          int v103 = 0;
        }
        uint64_t v104 = (*(_DWORD *)(v102 - 16) + v103);
        unint64_t v105 = *(unsigned int *)(v102 - 4);
        if (v105 > 0x400)
        {
          if (v105 > 2 * v104) {
            goto LABEL_43;
          }
        }
        else if (3 * v105 > 4 * v104)
        {
          goto LABEL_43;
        }
        WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 3, (uint64_t)v89);
        goto LABEL_43;
      }
      DNSServiceErrorType v43 = v67;
      uint64_t v44 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_79;
      }
    }
    uint64_t v66 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v66 + 16))(v66, &v108, 258);
    goto LABEL_81;
  }
  sdRef[0] = (DNSServiceRef)v36[4];
LABEL_43:
  WTF::String::utf8();
  if (*(void *)buf) {
    uint64_t v38 = (const char *)(*(void *)buf + 16);
  }
  else {
    uint64_t v38 = 0;
  }
  in_addr_t v40 = inet_addr(v38);
  uint64_t v41 = *(WTF **)buf;
  *(void *)buf = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1) {
      WTF::fastFree(v41, v39);
    }
    else {
      --*(_DWORD *)v41;
    }
  }
  in_addr_t rdata = v40;
  if (v40 != -1)
  {
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    uint64_t v46 = *(void *)(*a1 + 8);
    if (v46) {
      uint64_t v47 = v46 - 48;
    }
    else {
      uint64_t v47 = 0;
    }
    ++*(_DWORD *)(v47 + 8);
    uint64_t v48 = *(void *)(v47 + 88);
    uint64_t v50 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    ++*(_DWORD *)(v47 + 8);
    *(void *)uint64_t v50 = v47;
    int v51 = v108;
    v108 = 0;
    *((void *)v50 + 1) = v51;
    *((void *)v50 + 2) = v48;
    uint64_t v52 = *a4;
    *a4 = 0;
    *((void *)v50 + 3) = v52;
    if (_MergedGlobals_78)
    {
      uint64_t v53 = qword_1EB359960;
      if (qword_1EB359960) {
        goto LABEL_60;
      }
    }
    else
    {
      qword_1EB359960 = 0;
      _MergedGlobals_78 = 1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(0);
    uint64_t v53 = qword_1EB359960;
    if (!qword_1EB359960)
    {
      int v54 = 0;
LABEL_61:
      unint64_t v55 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      unint64_t v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      unint64_t v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      unsigned int v58 = v54 & ((v57 >> 31) ^ v57);
      unsigned int v59 = (uint64_t *)(v53 + 16 * v58);
      uint64_t v60 = *v59;
      if (*v59)
      {
        int v61 = 0;
        int v62 = 1;
        while (v60 != IdentifierInternal)
        {
          if (v60 == -1) {
            int v61 = v59;
          }
          unsigned int v58 = (v58 + v62) & v54;
          unsigned int v59 = (uint64_t *)(v53 + 16 * v58);
          uint64_t v60 = *v59;
          ++v62;
          if (!*v59)
          {
            if (v61)
            {
              *int v61 = 0;
              v61[1] = 0;
              --*(_DWORD *)(v53 - 16);
              unsigned int v59 = v61;
            }
            goto LABEL_69;
          }
        }
LABEL_91:
        DNSRecordRef RecordRef = 0;
        unsigned int v72 = sdRef[0];
        WTF::String::utf8();
        if (*(void *)buf) {
          BOOL v73 = (const char *)(*(void *)buf + 16);
        }
        else {
          BOOL v73 = 0;
        }
        DNSServiceErrorType v74 = DNSServiceRegisterRecord(v72, &RecordRef, 0x800u, 0, v73, 1u, 1u, 4u, &rdata, 0, (DNSServiceRegisterRecordReply)WebKit::registerMDNSNameCallback, (void *)IdentifierInternal);
        uint64_t v75 = *(WTF **)buf;
        *(void *)buf = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 1)
          {
            WTF::fastFree(v75, v68);
            if (!v74)
            {
LABEL_113:
              if (v50) {
                std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v50, (WTF::StringImpl *)v68);
              }
              if (v46)
              {
                if (*(_DWORD *)(v47 + 8) == 1) {
                  (*(void (**)(uint64_t))(*(void *)(v46 - 48) + 8))(v46 - 48);
                }
                else {
                  --*(_DWORD *)(v47 + 8);
                }
              }
              goto LABEL_119;
            }
LABEL_100:
            int v76 = off_1EB358988;
            if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = a1;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v74;
              _os_log_impl(&dword_1985F2000, v76, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName DNSServiceRegisterRecord error %d", buf, 0x12u);
            }
            uint64_t v77 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
            if (*v35)
            {
              uint64_t v78 = *v35 + 48 * *(unsigned int *)(*v35 - 4);
              unsigned int v79 = &qword_1EB359000;
              if ((uint64_t *)v78 == v77) {
                goto LABEL_109;
              }
            }
            else
            {
              unsigned int v79 = &qword_1EB359000;
              if (!v77)
              {
LABEL_109:
                if ((v79[299] & 1) == 0)
                {
                  qword_1EB359960 = 0;
                  _MergedGlobals_78 = 1;
                }
                int v80 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(IdentifierInternal);
                WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take((uint64_t *)buf, v80);
                int v81 = *(WTF **)buf;
                if (*(void *)buf)
                {
                  uint64_t v82 = *(void *)buf + 8;
                  uint64_t v83 = *(void *)(*(void *)buf + 24);
                  *(void *)(*(void *)buf + 24) = 0;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v82, 258);
                  (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
                  std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v81, v84);
                }
                goto LABEL_113;
              }
              uint64_t v78 = 0;
            }
            if ((uint64_t *)v78 != v77) {
              WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v35, v77);
            }
            goto LABEL_109;
          }
          --*(_DWORD *)v75;
        }
        if (!v74) {
          goto LABEL_113;
        }
        goto LABEL_100;
      }
LABEL_69:
      int v63 = (WTF *)v59[1];
      *unsigned int v59 = IdentifierInternal;
      v59[1] = (uint64_t)v50;
      if (v63) {
        std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v63, v49);
      }
      if (qword_1EB359960) {
        int v64 = *(_DWORD *)(qword_1EB359960 - 12) + 1;
      }
      else {
        int v64 = 1;
      }
      *(_DWORD *)(qword_1EB359960 - 12) = v64;
      if (qword_1EB359960) {
        int v69 = *(_DWORD *)(qword_1EB359960 - 12);
      }
      else {
        int v69 = 0;
      }
      uint64_t v70 = (*(_DWORD *)(qword_1EB359960 - 16) + v69);
      unint64_t v71 = *(unsigned int *)(qword_1EB359960 - 4);
      if (v71 > 0x400)
      {
        if (v71 > 2 * v70) {
          goto LABEL_90;
        }
      }
      else if (3 * v71 > 4 * v70)
      {
LABEL_90:
        uint64_t v50 = 0;
        goto LABEL_91;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v59);
      goto LABEL_90;
    }
LABEL_60:
    int v54 = *(_DWORD *)(v53 - 8);
    goto LABEL_61;
  }
  unint64_t v65 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName inet_addr error", buf, 0xCu);
  }
  uint64_t v66 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v66 + 16))(v66, &v108, 257);
LABEL_81:
  (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
LABEL_119:
  uint64_t result = v108;
  v108 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v68);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::registerMDNSNameCallback(WebKit *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((_MergedGlobals_78 & 1) == 0)
  {
    qword_1EB359960 = 0;
    _MergedGlobals_78 = 1;
  }
  if (a5 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198CD0960);
  }
  unsigned int v8 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a5);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take((uint64_t *)&v39, v8);
  uint64_t v10 = v39;
  if (v39)
  {
    int v11 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v41 = a4;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "NetworkMDNSRegister callback - registerMDNSNameCallback with error %d", buf, 8u);
    }
    if (!a4)
    {
      uint64_t v27 = *((void *)v10 + 3);
      *((void *)v10 + 3) = 0;
      (*(void (**)(uint64_t, void *, void))(*(void *)v27 + 16))(v27, (void *)v10 + 1, 0);
LABEL_44:
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      return (uint64_t *)std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v10, v38);
    }
    unsigned int v12 = (uint64_t *)(*(void *)v10 + 192);
    uint64_t v13 = *v12;
    if (!*v12) {
      goto LABEL_43;
    }
    int v14 = *(_DWORD *)(v13 - 4);
    if (!v14) {
      goto LABEL_43;
    }
    int v15 = 0;
    unsigned int v16 = v14 - 1;
    do
    {
      uint64_t v17 = v16;
      unsigned int v18 = (void *)(v13 + 48 * v16);
      uint64_t v19 = v18[2];
      if (*v18 | v18[1] | v19) {
        BOOL v20 = v19 == -1;
      }
      else {
        BOOL v20 = 1;
      }
      if (!v20)
      {
        uint64_t v21 = v13 + 48 * v16;
        long long v23 = *(WebKit **)(v21 + 32);
        char v22 = (void *)(v21 + 32);
        if (v23 == this)
        {
          void *v18 = 1;
          v18[1] = 0;
          v18[2] = -1;
          *char v22 = 0;
          if (this) {
            DNSServiceRefDeallocate(this);
          }
          ++v15;
        }
      }
      --v16;
    }
    while (v17);
    uint64_t v24 = *v12;
    if (v15)
    {
      *(_DWORD *)(v24 - 16) += v15;
      uint64_t v25 = *v12;
      if (*v12) {
        int v26 = *(_DWORD *)(v25 - 12);
      }
      else {
        int v26 = 0;
      }
      *(_DWORD *)(v25 - 12) = v26 - v15;
      uint64_t v24 = *v12;
    }
    if (!v24
      || ((unsigned int v28 = *(_DWORD *)(v24 - 4), v29 = *(unsigned int *)(v24 - 12), v28 >= 9)
        ? (BOOL v30 = 6 * (int)v29 >= v28)
        : (BOOL v30 = 1),
          v30))
    {
LABEL_43:
      uint64_t v27 = *((void *)v10 + 3);
      *((void *)v10 + 3) = 0;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v27 + 16))(v27, (void *)v10 + 1, 258);
      goto LABEL_44;
    }
    unsigned int v31 = (v29 - 1) | ((v29 - 1) >> 1) | (((v29 - 1) | ((v29 - 1) >> 1)) >> 2);
    unsigned int v32 = v31 | (v31 >> 4) | ((v31 | (v31 >> 4)) >> 8);
    unint64_t v33 = (v32 | HIWORD(v32)) + 1;
    if (v33 > 0x400)
    {
      if (v33 > 2 * v29) {
        goto LABEL_36;
      }
    }
    else if (3 * v33 > 4 * v29)
    {
LABEL_34:
      double v34 = (double)v29;
      double v35 = (double)v33;
      double v36 = 0.604166667;
LABEL_37:
      if (v35 * v36 <= v34) {
        LODWORD(v33) = 2 * v33;
      }
      if (v33 <= 8) {
        unsigned int v37 = 8;
      }
      else {
        unsigned int v37 = v33;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v12, v37, 0);
      goto LABEL_43;
    }
    LODWORD(v33) = 2 * v33;
    if (v33 <= 0x400) {
      goto LABEL_34;
    }
LABEL_36:
    double v34 = (double)v29;
    double v35 = (double)v33;
    double v36 = 0.416666667;
    goto LABEL_37;
  }
  return result;
}

WebKit::RTCDataChannelRemoteManagerProxy *WebKit::RTCDataChannelRemoteManagerProxy::RTCDataChannelRemoteManagerProxy(WebKit::RTCDataChannelRemoteManagerProxy *this)
{
  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((void *)this + 2) = v2;
  *(void *)this = &unk_1EE9BB668;
  WTF::WorkQueue::create();
  *((void *)this + 4) = 0;
  return this;
}

void WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::RTCDataChannelRemoteManagerProxy *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v4 = *((void *)this + 3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 2);
  uint64_t v5 = *((void *)a2 + 33);
  uint64_t v6 = *(void *)(*((void *)a2 + 9) + 24);
  unsigned int v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *unsigned int v7 = &unk_1EE9CDAC0;
  v7[1] = this;
  v7[2] = this;
  void v7[3] = v5;
  v7[4] = v6;
  uint64_t v9 = v7;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v9);
  unsigned int v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  IPC::Connection::addWorkQueueMessageReceiver(*((void *)a2 + 9), 0x34u, *((void *)this + 3), (uint64_t)this, 0);
}

void WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::RTCDataChannelRemoteManagerProxy *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v4 = *((void *)this + 3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 2);
  uint64_t v5 = *((void *)a2 + 33);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9CDAE8;
  v6[1] = this;
  uint64_t v6[2] = this;
  v6[3] = v5;
  unsigned int v8 = v6;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v8);
  unsigned int v7 = v8;
  unsigned int v8 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  IPC::Connection::removeWorkQueueMessageReceiver(*((void *)a2 + 9), 0x34u, 0);
}

void WebKit::RTCDataChannelRemoteManagerProxy::sendData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v29[0] = a2;
  v29[1] = a3;
  v28[0] = a5;
  v28[1] = a6;
  uint64_t v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), v29);
  if (v7)
  {
    uint64_t v25 = v29;
    char v26 = a4;
    uint64_t v27 = v28;
    IPC::Connection::connection(v7, &v30);
    uint64_t v8 = (uint64_t)v30;
    if (v30)
    {
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 698;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      unsigned int v31 = v9;
      IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v9, (uint64_t)&v25);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v31, 0, 0);
      int v11 = v31;
      unsigned int v31 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v22, v23);
      }
      unsigned int v12 = v30;
      BOOL v30 = 0;
      if (v12)
      {
        char v13 = 0;
        atomic_uchar *volatile v14 = *v12;
        atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
        if (v13) {
          MEMORY[0x19972E8D0](v14);
        }
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = v15 - 1;
        *((void *)v14 + 1) = v15 - 1;
        if (v15 == 1)
        {
          uint64_t v24 = *((void *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 3);
          *((void *)v14 + 3) = 0;
          BOOL v17 = v24 == 0;
        }
        else
        {
          BOOL v17 = 0;
          uint64_t v18 = 0;
        }
        int v19 = 1;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
        if (v19 == 1)
        {
          if (v16) {
            return;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v14);
          if (v16) {
            return;
          }
        }
        uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v20 = &unk_1EE9B37E8;
        *(void *)(v20 + 8) = v14;
        *(void *)(v20 + 16) = v18;
        *(unsigned char *)(v20 + 24) = v17;
        unsigned int v31 = (IPC::Encoder *)v20;
        WTF::ensureOnMainRunLoop();
        uint64_t v21 = (uint64_t)v31;
        unsigned int v31 = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
    }
  }
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), v5);
  if (result)
  {
    uint64_t v4 = v5;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::Close>(result, &v4, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::Close>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  IPC::Connection::connection(a1, &v29);
  uint64_t v9 = (uint64_t)v29;
  if (!v29) {
    return 2;
  }
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 695;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  BOOL v30 = v10;
  int v11 = *a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, v11);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, v11 + 1);
  uint64_t v13 = IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v30, a4, a5);
  atomic_uchar *volatile v14 = v30;
  BOOL v30 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v26, v27);
  }
  uint64_t v15 = v29;
  uint64_t v29 = 0;
  if (v15)
  {
    char v16 = 0;
    atomic_uchar *volatile v17 = *v15;
    atomic_compare_exchange_strong_explicit(*v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v19 = v18 - 1;
    *((void *)v17 + 1) = v18 - 1;
    if (v18 == 1)
    {
      uint64_t v28 = *((void *)v17 + 2);
      uint64_t v21 = *((void *)v17 + 3);
      *((void *)v17 + 3) = 0;
      BOOL v20 = v28 == 0;
    }
    else
    {
      BOOL v20 = 0;
      uint64_t v21 = 0;
    }
    int v22 = 1;
    atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1)
    {
      if (v19) {
        return v13;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (v19) {
        return v13;
      }
    }
    uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v23 = &unk_1EE9B37E8;
    *(void *)(v23 + 8) = v17;
    *(void *)(v23 + 16) = v21;
    *(unsigned char *)(v23 + 24) = v20;
    BOOL v30 = (IPC::Encoder *)v23;
    WTF::ensureOnMainRunLoop();
    uint64_t v24 = v30;
    BOOL v30 = 0;
    if (v24) {
      (*(void (**)(IPC::Encoder *))(*(void *)v24 + 8))(v24);
    }
  }
  return v13;
}

void WebKit::RTCDataChannelRemoteManagerProxy::changeReadyState(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v23);
  if (v5)
  {
    IPC::Connection::connection(v5, &v25);
    uint64_t v6 = (uint64_t)v25;
    if (v25)
    {
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 694;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      char v26 = v7;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v23);
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v24);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, a4);
      IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v26, 0, 0);
      uint64_t v9 = v26;
      char v26 = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v20, v21);
      }
      uint64_t v10 = v25;
      uint64_t v25 = 0;
      if (v10)
      {
        char v11 = 0;
        atomic_uchar *volatile v12 = *v10;
        atomic_compare_exchange_strong_explicit(*v10, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
        if (v11) {
          MEMORY[0x19972E8D0](v12);
        }
        uint64_t v13 = *((void *)v12 + 1);
        uint64_t v14 = v13 - 1;
        *((void *)v12 + 1) = v13 - 1;
        if (v13 == 1)
        {
          uint64_t v22 = *((void *)v12 + 2);
          uint64_t v16 = *((void *)v12 + 3);
          *((void *)v12 + 3) = 0;
          BOOL v15 = v22 == 0;
        }
        else
        {
          BOOL v15 = 0;
          uint64_t v16 = 0;
        }
        int v17 = 1;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
        if (v17 == 1)
        {
          if (v14) {
            return;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          if (v14) {
            return;
          }
        }
        uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v18 = &unk_1EE9B37E8;
        *(void *)(v18 + 8) = v12;
        *(void *)(v18 + 16) = v16;
        *(unsigned char *)(v18 + 24) = v15;
        char v26 = (IPC::Encoder *)v18;
        WTF::ensureOnMainRunLoop();
        uint64_t v19 = v26;
        char v26 = 0;
        if (v19) {
          (*(void (**)(IPC::Encoder *))(*(void *)v19 + 8))(v19);
        }
      }
    }
  }
}

void WebKit::RTCDataChannelRemoteManagerProxy::receiveData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v29[0] = a2;
  v29[1] = a3;
  v28[0] = a5;
  v28[1] = a6;
  uint64_t v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), v29);
  if (v7)
  {
    uint64_t v25 = v29;
    char v26 = a4;
    uint64_t v27 = v28;
    IPC::Connection::connection(v7, &v30);
    uint64_t v8 = (uint64_t)v30;
    if (v30)
    {
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 697;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      unsigned int v31 = v9;
      IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v9, (uint64_t)&v25);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v31, 0, 0);
      char v11 = v31;
      unsigned int v31 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v22, v23);
      }
      atomic_uchar *volatile v12 = v30;
      BOOL v30 = 0;
      if (v12)
      {
        char v13 = 0;
        atomic_uchar *volatile v14 = *v12;
        atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
        if (v13) {
          MEMORY[0x19972E8D0](v14);
        }
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = v15 - 1;
        *((void *)v14 + 1) = v15 - 1;
        if (v15 == 1)
        {
          uint64_t v24 = *((void *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 3);
          *((void *)v14 + 3) = 0;
          BOOL v17 = v24 == 0;
        }
        else
        {
          BOOL v17 = 0;
          uint64_t v18 = 0;
        }
        int v19 = 1;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
        if (v19 == 1)
        {
          if (v16) {
            return;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v14);
          if (v16) {
            return;
          }
        }
        uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v20 = &unk_1EE9B37E8;
        *(void *)(v20 + 8) = v14;
        *(void *)(v20 + 16) = v18;
        *(unsigned char *)(v20 + 24) = v17;
        unsigned int v31 = (IPC::Encoder *)v20;
        WTF::ensureOnMainRunLoop();
        uint64_t v21 = (uint64_t)v31;
        unsigned int v31 = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
    }
  }
}

void WebKit::RTCDataChannelRemoteManagerProxy::detectError(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  v28[0] = a2;
  v28[1] = a3;
  uint64_t v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), v28);
  if (v7)
  {
    uint64_t v25 = v28;
    char v26 = a4;
    uint64_t v27 = a5;
    IPC::Connection::connection(v7, &v29);
    uint64_t v8 = (uint64_t)v29;
    if (v29)
    {
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 696;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      BOOL v30 = v9;
      IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>(v9, (uint64_t)&v25);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v30, 0, 0);
      char v11 = v30;
      BOOL v30 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v22, v23);
      }
      atomic_uchar *volatile v12 = v29;
      uint64_t v29 = 0;
      if (v12)
      {
        char v13 = 0;
        atomic_uchar *volatile v14 = *v12;
        atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
        if (v13) {
          MEMORY[0x19972E8D0](v14);
        }
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = v15 - 1;
        *((void *)v14 + 1) = v15 - 1;
        if (v15 == 1)
        {
          uint64_t v24 = *((void *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 3);
          *((void *)v14 + 3) = 0;
          BOOL v17 = v24 == 0;
        }
        else
        {
          BOOL v17 = 0;
          uint64_t v18 = 0;
        }
        int v19 = 1;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
        if (v19 == 1)
        {
          if (v16) {
            return;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v14);
          if (v16) {
            return;
          }
        }
        uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v20 = &unk_1EE9B37E8;
        *(void *)(v20 + 8) = v14;
        *(void *)(v20 + 16) = v18;
        *(unsigned char *)(v20 + 24) = v17;
        BOOL v30 = (IPC::Encoder *)v20;
        WTF::ensureOnMainRunLoop();
        uint64_t v21 = (uint64_t)v30;
        BOOL v30 = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
    }
  }
}

void WebKit::RTCDataChannelRemoteManagerProxy::bufferedAmountIsDecreasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v23);
  if (v5)
  {
    IPC::Connection::connection(v5, &v25);
    uint64_t v6 = (uint64_t)v25;
    if (v25)
    {
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 693;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      char v26 = v7;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v23);
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v24);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, a4);
      IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v26, 0, 0);
      uint64_t v9 = v26;
      char v26 = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v20, v21);
      }
      uint64_t v10 = v25;
      uint64_t v25 = 0;
      if (v10)
      {
        char v11 = 0;
        atomic_uchar *volatile v12 = *v10;
        atomic_compare_exchange_strong_explicit(*v10, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
        if (v11) {
          MEMORY[0x19972E8D0](v12);
        }
        uint64_t v13 = *((void *)v12 + 1);
        uint64_t v14 = v13 - 1;
        *((void *)v12 + 1) = v13 - 1;
        if (v13 == 1)
        {
          uint64_t v22 = *((void *)v12 + 2);
          uint64_t v16 = *((void *)v12 + 3);
          *((void *)v12 + 3) = 0;
          BOOL v15 = v22 == 0;
        }
        else
        {
          BOOL v15 = 0;
          uint64_t v16 = 0;
        }
        int v17 = 1;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
        if (v17 == 1)
        {
          if (v14) {
            return;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          if (v14) {
            return;
          }
        }
        uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v18 = &unk_1EE9B37E8;
        *(void *)(v18 + 8) = v12;
        *(void *)(v18 + 16) = v16;
        *(unsigned char *)(v18 + 24) = v15;
        char v26 = (IPC::Encoder *)v18;
        WTF::ensureOnMainRunLoop();
        int v19 = v26;
        char v26 = 0;
        if (v19) {
          (*(void (**)(IPC::Encoder *))(*(void *)v19 + 8))(v19);
        }
      }
    }
  }
}

uint64_t WebKit::SQLiteStorageArea::type(WebKit::SQLiteStorageArea *this)
{
  return 0;
}

uint64_t WebKit::SQLiteStorageArea::storageType(WebKit::SQLiteStorageArea *this)
{
  return 1;
}

WebKit::FileSystemStorageManager *std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100](WebKit::FileSystemStorageManager **a1, WebKit::FileSystemStorageManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::FileSystemStorageManager::~FileSystemStorageManager(result);
    return (WebKit::FileSystemStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::LocalStorageManager *std::unique_ptr<WebKit::LocalStorageManager>::reset[abi:sn180100](WebKit::LocalStorageManager **a1, WebKit::LocalStorageManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LocalStorageManager::~LocalStorageManager(result);
    return (WebKit::LocalStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::LocalStorageManager::~LocalStorageManager(WebKit::LocalStorageManager *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (WebKit::StorageAreaBase *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100](this + 16, v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (!atomic_load(v4))
    {
      __break(0xC471u);
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF);
  }
  uint64_t v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

void std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      WTF::fastFree((WTF *)(v3 - 16), this);
    }
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, this);
    }
    uint64_t v5 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v5)
    {
      if (!atomic_load(v5))
      {
        __break(0xC471u);
        return;
      }
      atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WebKit::StorageAreaBase *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::StorageAreaBase **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::StorageAreaBase *)-1)
      {
        a2 = *v4;
        *uint64_t v4 = 0;
        if (a2) {
          std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v4, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::IDBStorageManager *std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100](WebKit::IDBStorageManager **a1, WebKit::IDBStorageManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::IDBStorageManager::~IDBStorageManager(result);
    return (WebKit::IDBStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::CacheStorageManager *std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100](WebKit::CacheStorageManager **a1, WebKit::CacheStorageManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageManager::~CacheStorageManager(result, a2);
    return (WebKit::CacheStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::BackgroundFetchStoreManager *std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100](WebKit::BackgroundFetchStoreManager **a1, WebKit::BackgroundFetchStoreManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::BackgroundFetchStoreManager::~BackgroundFetchStoreManager(result, a2);
    return (WebKit::BackgroundFetchStoreManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::ServiceWorkerStorageManager **std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100](WebKit::ServiceWorkerStorageManager ***a1, WebKit::ServiceWorkerStorageManager **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::OriginStorageManager::StorageBucket::~StorageBucket(result);
    return (WebKit::ServiceWorkerStorageManager **)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::~StorageBucket(WebKit::ServiceWorkerStorageManager **this)
{
  std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100](this + 16, 0);
  std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100](this + 15, 0);
  uint64_t v3 = this[13];
  this[13] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = this[12];
  this[12] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100](this + 11, 0);
  uint64_t v6 = this[10];
  this[10] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = this[9];
  this[9] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100](this + 8, 0);
  uint64_t v8 = this[7];
  this[7] = 0;
  if (v8) {
    std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100](this + 56, v8);
  }
  uint64_t v9 = this[6];
  this[6] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = this[5];
  this[5] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  std::unique_ptr<WebKit::LocalStorageManager>::reset[abi:sn180100](this + 4, 0);
  std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100](this + 3, 0);
  atomic_uchar *volatile v12 = this[1];
  this[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *this;
  *this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

WTF::StringImpl *std::make_unique[abi:sn180100]<WebKit::OriginStorageManager::StorageBucket,WTF::String &,WTF::ASCIILiteral,WTF::String &,WTF::String &,WTF::String &,WebKit::UnifiedOriginStorageLevel &>@<X0>(_DWORD **a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, _DWORD **a4@<X3>, _DWORD **a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = WTF::fastMalloc((WTF *)0x88);
  WTF::String::String((uint64_t *)&v17, *a2, a2[1]);
  WebKit::OriginStorageManager::StorageBucket::StorageBucket(v14, *a1, (_DWORD **)&v17, a3, a4, a5, *a6);
  *a7 = v14;
  uint64_t result = v17;
  int v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::SQLiteDatabase::operator delete(WebCore::SQLiteDatabase *a1, size_t a2)
{
  WebCore::SQLiteDatabase::~SQLiteDatabase(a1);
  if (atomic_load((unsigned int *)v3))
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x199733E80]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
      if (v5 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = *(unsigned int *)(v4 + 8);
        if (v6 != -1)
        {
          ((void (*)(char *, uint64_t))off_1EE9CD8D0[v6])(&v8, v4);
          uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
        }
        *(_DWORD *)(v4 + 8) = -1;
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEjEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_jEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN6WebKit12StorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DNSServiceRef_t **)(a1 + 32);
    do
    {
      if (*(v4 - 2) != (_DNSServiceRef_t *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          DNSServiceRefDeallocate(v5);
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      if (*(void *)(v4 - 16) != -1) {
        uint64_t v4 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(_DWORD **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CD910;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD910;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v2 = *(WebKit::OriginStorageManager **)(a1 + 8);
  uint64_t v3 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v3, 128, &v24);
  uint64_t v4 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v4, 0x8000, &v23);
  uint64_t v5 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath((WTF::StringImpl *)v5, 0x80000, &v22);
  uint64_t v7 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v22, v6);
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::OriginStorageManager::defaultBucket(v2)[3];
  if (v10)
  {
    uint64_t v12 = WebKit::FileSystemStorageManager::allocatedUnusedCapacity(v10);
    if (!__CFADD__(v9, v12)) {
      v9 += v12;
    }
  }
  if (v24 && *((_DWORD *)v24 + 1)) {
    uint64_t v13 = WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory((WebCore::IDBServer::SQLiteIDBBackingStore *)&v24, v11);
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v16 = WebKit::CacheStorageManager::cacheStorageSize((WebKit::CacheStorageManager *)&v23, v11);
  int v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  unint64_t v18 = v9 + v16;
  int v19 = v23;
  uint64_t v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v15);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  unint64_t v14 = v13 + v18;
  uint64_t v20 = v24;
  uint64_t v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v15);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v14;
}

WebKit::OriginQuotaManager *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(WebKit::OriginQuotaManager *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (WebKit::OriginQuotaManager *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    BOOL v6 = 0;
    uint64_t v7 = 0;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    this = (WebKit::OriginQuotaManager *)WTF::Lock::unlockSlow(v2);
  }
  if (!v5)
  {
    v10[0] = v2;
    v10[1] = v7;
    BOOL v11 = v6;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v10, a2);
  }
  return this;
}

WebKit::OriginQuotaManager *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)a1;
  uint64_t result = *(WebKit::OriginQuotaManager **)(a1 + 8);
  if (result)
  {
    WebKit::OriginQuotaManager::~OriginQuotaManager(result);
    uint64_t result = (WebKit::OriginQuotaManager *)WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return (WebKit::OriginQuotaManager *)WTF::fastFree(v4, a2);
  }
  return result;
}

void WebKit::OriginQuotaManager::~OriginQuotaManager(WebKit::OriginQuotaManager *this)
{
  uint64_t v2 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((unsigned char *)this + 64))
  {
    uint64_t v5 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::~Deque((uint64_t)this + 8);
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::~Deque(uint64_t a1)
{
  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::destroyAll((unint64_t *)a1);
  uint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, v2);
  }
  return a1;
}

unint64_t *WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::destroyAll(unint64_t *result)
{
  unint64_t v1 = *result;
  unint64_t v2 = result[1];
  uint64_t v3 = result[2];
  if (*result > v2)
  {
    uint64_t v4 = (uint64_t *)result;
    if (v2)
    {
      uint64_t v12 = 24 * v2;
      uint64_t v13 = (unint64_t **)(v3 + 8);
      do
      {
        uint64_t result = *v13;
        *uint64_t v13 = 0;
        if (result) {
          uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        }
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      uint64_t v3 = v4[2];
      unint64_t v1 = *v4;
    }
    uint64_t v5 = *((unsigned int *)v4 + 6);
    if (v1 != v5)
    {
      uint64_t v6 = 3 * v1;
      uint64_t v7 = 24 * v5 - 8 * v6;
      int v8 = (unint64_t **)(v3 + 8 * v6 + 8);
      do
      {
        uint64_t result = *v8;
        WTF *v8 = 0;
        if (result) {
          uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        }
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else if (*result != v2)
  {
    uint64_t v9 = 3 * v1;
    uint64_t v10 = 24 * v2 - 8 * v9;
    BOOL v11 = (unint64_t **)(v3 + 8 * v9 + 8);
    do
    {
      uint64_t result = *v11;
      *BOOL v11 = 0;
      if (result) {
        uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CD938;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CD938;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::OriginQuotaManager *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(atomic_uchar **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v15, v5, *(void *)(a1 + 16)), (uint64_t v6 = v15) != 0))
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v8 = &unk_1EE9CD960;
    v8[1] = v7;
    unint64_t v14 = v8;
    WebKit::OriginQuotaManager::requestSpace(v6, a2, (uint64_t *)&v14);
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
    uint64_t v10 = *(WebKit::OriginQuotaManager **)v6;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(v10, v9);
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (WebKit::OriginQuotaManager *)v13(v12);
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CD960;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CD960;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESE_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CD988;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CD988;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::OriginQuotaManager *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(atomic_uchar **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v15, v5, *(void *)(a1 + 16)), (uint64_t v6 = v15) != 0))
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v8 = &unk_1EE9CD9B0;
    v8[1] = v7;
    unint64_t v14 = v8;
    WebKit::OriginQuotaManager::requestSpace(v6, a2, (uint64_t *)&v14);
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
    uint64_t v10 = *(WebKit::OriginQuotaManager **)v6;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(v10, v9);
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (WebKit::OriginQuotaManager *)v13(v12);
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CD9B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CD9B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESE_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CD9D8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CD9D8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::OriginQuotaManager *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(atomic_uchar **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v5, *(void *)(a1 + 16)), v18))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v18, v7);
    int v8 = *(atomic_uchar **)(a1 + 8);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v8, *(void *)(a1 + 16));
      uint64_t v9 = v18;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v13 = *a3;
    *a3 = 0;
    unint64_t v14 = (WebKit::OriginQuotaManager *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unint64_t v14 = &unk_1EE9CDA00;
    *((void *)v14 + 1) = v13;
    int v17 = v14;
    WebKit::OriginQuotaManager::requestSpace(v9, a2, (uint64_t *)&v17);
    uint64_t result = v17;
    if (v17) {
      uint64_t result = (WebKit::OriginQuotaManager *)(*(uint64_t (**)(WebKit::OriginQuotaManager *))(*(void *)v17 + 8))(v17);
    }
    if (v9)
    {
      unint64_t v16 = *v9;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(v16, v15);
    }
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    BOOL v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (WebKit::OriginQuotaManager *)v11(v10);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CDA00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CDA00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESQ_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9CDA28;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDA28;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::OriginQuotaManager *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(atomic_uchar **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v5, *(void *)(a1 + 16)), v18))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v18, v7);
    int v8 = *(atomic_uchar **)(a1 + 8);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v8, *(void *)(a1 + 16));
      uint64_t v9 = v18;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v13 = *a3;
    *a3 = 0;
    unint64_t v14 = (WebKit::OriginQuotaManager *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unint64_t v14 = &unk_1EE9CDA50;
    *((void *)v14 + 1) = v13;
    int v17 = v14;
    WebKit::OriginQuotaManager::requestSpace(v9, a2, (uint64_t *)&v17);
    uint64_t result = v17;
    if (v17) {
      uint64_t result = (WebKit::OriginQuotaManager *)(*(uint64_t (**)(WebKit::OriginQuotaManager *))(*(void *)v17 + 8))(v17);
    }
    if (v9)
    {
      unint64_t v16 = *v9;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(v16, v15);
    }
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    BOOL v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (WebKit::OriginQuotaManager *)v11(v10);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CDA50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CDA50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESK_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::SQLiteStatement ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        WebCore::SQLiteStatement::operator delete(v6, 0x18uLL);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CDA78;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDA78;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::SQLiteStorageArea *WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::call(WebKit::SQLiteStorageArea *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(WebKit::SQLiteStorageArea **)(v1 + 8);
    if (result) {
      return (WebKit::SQLiteStorageArea *)WebKit::SQLiteStorageArea::commitTransactionIfNecessary(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(void *a1, unsigned int a2)
{
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(a2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::String&>(WTF::String const&,WTF::String&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, void **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v6 = (_DWORD *)**a3;
  if (v6) {
    *v6 += 2;
  }
  uint64_t result = (WTF::StringImpl *)a1[1];
  a1[1] = (uint64_t)v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = result + 16;
    do
    {
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    while (1)
    {
      uint64_t v12 = (WTF::StringImpl **)(v3 + 24 * v10);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)v13 + 4);
          if (v20 >= 0x100) {
            int v21 = v20 >> 8;
          }
          else {
            int v21 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v19;
            uint64_t v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            int v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          uint64_t v25 = v18 + 24 * v23;
          unsigned int v28 = *(_DWORD *)(v25 + 16);
          uint64_t v27 = (_DWORD *)(v25 + 16);
          uint64_t v26 = v28;
          if (v28 == -1)
          {
            WTF::StringImpl *v24 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1EE9CD8D0[v26])(&v39, v18 + 24 * v23 + 8);
            uint64_t v29 = *v24;
            *uint64_t v27 = -1;
            WTF::StringImpl *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v7);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          BOOL v30 = *v12;
          *uint64_t v12 = 0;
          WTF::StringImpl *v24 = v30;
          uint64_t v31 = v18 + 24 * v23;
          *(unsigned char *)(v31 + 8) = 0;
          uint64_t v32 = v31 + 8;
          uint64_t v33 = v3 + 24 * v10;
          *(_DWORD *)(v32 + 8) = -1;
          uint64_t v34 = *(unsigned int *)(v33 + 16);
          if (v34 != -1)
          {
            uint64_t v35 = v33 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1EE9CDA90[v34])(&v41, v32, v33 + 8);
            *(_DWORD *)(v32 + 8) = v34;
            uint64_t v36 = *(unsigned int *)(v3 + 24 * v10 + 16);
            if (v36 != -1) {
              ((void (*)(char *, uint64_t))off_1EE9CD8D0[v36])(&v40, v35);
            }
          }
          *(_DWORD *)(v3 + 24 * v10 + 16) = -1;
          uint64_t v13 = *v12;
          *uint64_t v12 = 0;
          if (!v13) {
            goto LABEL_38;
          }
          if (*(_DWORD *)v13 == 2) {
            goto LABEL_37;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          uint64_t v14 = v3 + 24 * v10;
          unsigned int v17 = *(_DWORD *)(v14 + 16);
          unint64_t v16 = (_DWORD *)(v14 + 16);
          uint64_t v15 = v17;
          if (v17 != -1)
          {
            ((void (*)(char *, uint64_t))off_1EE9CD8D0[v15])(&v38, v3 + 24 * v10 + 8);
            uint64_t v13 = *v12;
          }
          _DWORD *v16 = -1;
          *uint64_t v12 = 0;
          if (!v13) {
            goto LABEL_38;
          }
          if (*(_DWORD *)v13 == 2)
          {
LABEL_37:
            WTF::StringImpl::destroy(v13, v7);
            goto LABEL_38;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_38:
      if (++v10 == v11) {
        return WTF::fastFree((WTF *)(v3 - 16), v7);
      }
    }
  }
  if (v3) {
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEjEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEjEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,unsigned int>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CD8D0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9CDAA0[v4])(&v5, result, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEjEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSO_EEEDcSG_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9CD8D0[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEjEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSO_EEEDcSG_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, _DWORD *))off_1EE9CD8D0[v5])(&v6, v4);
  }
  void v4[2] = -1;
  *uint64_t v4 = *a3;
  void v4[2] = 1;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (void *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = (*v13 + ~(*v13 << 32)) ^ ((*v13 + ~(*v13 << 32)) >> 22);
        unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
        int v20 = 1;
        do
        {
          unsigned int v21 = v19;
          uint64_t v22 = *(void *)(v14 + 16 * v19);
          unsigned int v19 = (v19 + v20++) & v15;
        }
        while (v22);
        unsigned int v23 = (_OWORD *)(v14 + 16 * v21);
        *unsigned int v23 = *(_OWORD *)v13;
        if (v13 == a3) {
          uint64_t v12 = v23;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  unsigned int v5 = (WebKit::StorageAreaBase *)a2[1];
  int v3 = a2 + 1;
  uint64_t v4 = v5;
  *int v3 = 0;
  if (v5) {
    std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          uint64_t v29 = v27 + 1;
          unsigned int v28 = (WebKit::StorageAreaBase *)v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v29, v28);
          }
          *uint64_t v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WebKit::StorageAreaBase **)(v30 + 8);
          *uint64_t v31 = 0;
          *uint64_t v29 = v32;
          unsigned int v10 = *v31;
          *uint64_t v31 = 0;
          if (v10) {
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v31, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unint64_t v17 = *(WebKit::StorageAreaBase **)(v15 + 8);
          uint64_t v16 = (void *)(v15 + 8);
          unsigned int v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v13 = (void **)v6;
    do
    {
      unsigned int v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v14 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(*a1, (uint64_t)v10);
        *uint64_t v14 = *(_OWORD *)v13;
        if (v13 == a3) {
          uint64_t v11 = v14;
        }
      }
      v13 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v2 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v2 = 0;
  }
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = 1;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = *(void *)(a1 + 16 * v6);
    unsigned int v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 16 * v8;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((void *)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((void *)v2 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  int v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaBase&>(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaBase&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = *a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a3 + 8), *a3);
  unsigned int v6 = *(atomic_uint **)(v4 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t result = (unsigned int *)a1[1];
  a1[1] = v6;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = (void *)v6;
    uint64_t v16 = v7;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          uint64_t v18 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v15);
          int v19 = (unsigned int *)v15[1];
          v15[1] = 0;
          if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            unint64_t v20 = v18;
            WTF::fastFree((WTF *)v19, v10);
            uint64_t v18 = v20;
          }
          if (v15 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          unint64_t v17 = (unsigned int *)v15[1];
          v15[1] = 0;
          if (v17)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
        }
      }
      v15 += 2;
      --v16;
    }
    while (v16);
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = (void *)(a1 + 16 * v9);
  uint64_t v12 = (unsigned int *)v11[1];
  v11[1] = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, a2);
  }
  *uint64_t v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((void *)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((void *)v2 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return 1;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(void *a1, void *a2)
{
  uint64_t result = (unsigned int *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    uint64_t v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
    uint64_t v6 = *(void *)(v2 + 16 * v5);
    if (v6 == *a2) {
      return v2 + 16 * v5;
    }
    int v8 = 1;
    while (v6)
    {
      uint64_t v5 = (v5 + v8) & v4;
      uint64_t v6 = *(void *)(v2 + 16 * v5);
      ++v8;
      if (v6 == *a2) {
        return v2 + 16 * v5;
      }
    }
  }
  return 0;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = 1;
  a2[1] = 0;
  a2[2] = -1;
  int v3 = (_DNSServiceRef_t *)a2[4];
  a2[4] = 0;
  if (v3) {
    DNSServiceRefDeallocate(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (void *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *uint64_t v11 = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v5 + 48 * v12;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = *(_OWORD *)v14 == 0;
        }
        if (v16)
        {
          uint64_t v19 = v5 + 48 * v12;
          unint64_t v20 = *(_DNSServiceRef_t **)(v19 + 32);
          *(void *)(v19 + 32) = 0;
          if (v20) {
            DNSServiceRefDeallocate(v20);
          }
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v36 = -1640531527;
          __int16 v37 = 0;
          char v38 = 0;
          WTF::addArgs<WTF::UUID>(&v36, (void *)(v5 + 48 * v12));
          int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36);
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v18;
            uint64_t v24 = v17 + 48 * (v21 & v18);
            int v21 = ++v22 + (v21 & v18);
          }
          while (*(_OWORD *)v24 != 0 || *(void *)(v24 + 16) != 0);
          uint64_t v26 = v17 + 48 * v23;
          uint64_t v29 = *(_DNSServiceRef_t **)(v26 + 32);
          unsigned int v28 = (void *)(v26 + 32);
          uint64_t v27 = v29;
          *unsigned int v28 = 0;
          if (v29) {
            DNSServiceRefDeallocate(v27);
          }
          long long v30 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v14;
          *(_OWORD *)(v24 + 16) = v30;
          uint64_t v31 = v5 + 48 * v12;
          uint64_t v32 = *(void *)(v31 + 32);
          *(void *)(v31 + 32) = 0;
          *unsigned int v28 = v32;
          uint64_t v33 = *(_DNSServiceRef_t **)(v31 + 32);
          *(void *)(v31 + 32) = 0;
          if (v33) {
            DNSServiceRefDeallocate(v33);
          }
          if (v14 == a3) {
            uint64_t v13 = v24;
          }
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    v3 += 48 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a2)
  {
    v6[0] = 0;
    *a3 = 0;
    v6[1] = 0;
    a3[1] = 0;
    return (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, a2);
  }
  *a3 = a2[4];
  uint64_t v4 = a2[5];
  a2[4] = 0;
  a2[5] = 0;
  a3[1] = v4;
  if (*result)
  {
    uint64_t v5 = *result + 48 * *(unsigned int *)(*result - 4);
    if ((void *)v5 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a2)
  {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(result, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = 1;
  a2[1] = 0;
  a2[2] = -1;
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 4), a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (void *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v5 + 48 * v12;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = *(_OWORD *)v14 == 0;
        }
        if (v16)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 48 * v12 + 32, v9);
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v34 = -1640531527;
          __int16 v35 = 0;
          char v36 = 0;
          WTF::addArgs<WTF::UUID>(&v34, (void *)(v5 + 48 * v12));
          int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          int v21 = 0;
          do
          {
            unsigned int v22 = v19 & v18;
            uint64_t v23 = v17 + 48 * (v19 & v18);
            int v19 = ++v21 + (v19 & v18);
          }
          while (*(_OWORD *)v23 != 0 || *(void *)(v23 + 16) != 0);
          uint64_t v25 = v17 + 48 * v22;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 + 32, v20);
          long long v26 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v14;
          *(_OWORD *)(v23 + 16) = v26;
          uint64_t v27 = v5 + 48 * v12;
          *(void *)(v25 + 32) = 0;
          *(void *)(v25 + 40) = 0;
          uint64_t v28 = *(void *)(v27 + 32);
          v27 += 32;
          *(void *)uint64_t v27 = 0;
          *(void *)(v25 + 32) = v28;
          int v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          *(_DWORD *)(v25 + 40) = v29;
          int v30 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *(_DWORD *)(v25 + 44) = v30;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
          if (v14 == a3) {
            uint64_t v13 = v23;
          }
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v20 = -1640531527;
  __int16 v21 = 0;
  char v22 = 0;
  WTF::addArgs<WTF::UUID>(&v20, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  unsigned int v10 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 48 * (v6 & v5));
  uint64_t v12 = *result;
  uint64_t v13 = result[1];
  BOOL v14 = v13 == v8 && v12 == v7;
  uint64_t v15 = result[2];
  if (!v14 || v15 != v9)
  {
    int v17 = 1;
    while (v12 | v13 || v15)
    {
      unsigned int v10 = (v10 + v17) & v5;
      uint64_t result = (uint64_t *)(v2 + 48 * v10);
      uint64_t v12 = *result;
      uint64_t v13 = result[1];
      BOOL v18 = v13 == v8 && v12 == v7;
      uint64_t v15 = result[2];
      ++v17;
      if (v18 && v15 == v9) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take(uint64_t *result, void *a2)
{
  if (qword_1EB359960)
  {
    if ((void *)(qword_1EB359960 + 16 * *(unsigned int *)(qword_1EB359960 - 4)) != a2) {
      goto LABEL_3;
    }
LABEL_6:
    *uint64_t result = 0;
    return result;
  }
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  *uint64_t result = a2[1];
  *a2 = -1;
  a2[1] = 0;
  uint64_t v2 = qword_1EB359960;
  ++*(_DWORD *)(qword_1EB359960 - 16);
  if (v2) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  if (qword_1EB359960)
  {
    unsigned int v4 = *(_DWORD *)(qword_1EB359960 - 4);
    if (6 * *(_DWORD *)(qword_1EB359960 - 12) < v4 && v4 >= 9) {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v4 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4 = qword_1EB359960;
  if (qword_1EB359960)
  {
    int v5 = *(_DWORD *)(qword_1EB359960 - 4);
    int v6 = *(_DWORD *)(qword_1EB359960 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359960 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  void v7[3] = a1;
  *uint64_t v7 = 0;
  *(_DWORD *)(qword_1EB359960 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v11 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          if (qword_1EB359960) {
            int v15 = *(_DWORD *)(qword_1EB359960 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(qword_1EB359960 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(qword_1EB359960 + 16 * v21);
          uint64_t v24 = (WTF *)v23[1];
          v23[1] = 0;
          if (v24) {
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v24, v8);
          }
          *uint64_t v23 = *v11;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v27 = *(WTF **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v27) {
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v27, v8);
          }
          if (v11 == a2) {
            unsigned int v10 = v23;
          }
        }
        else
        {
          uint64_t v13 = v4 + 16 * v9;
          BOOL v14 = *(WTF **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14) {
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v14, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1)
{
  if (!qword_1EB359960) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(qword_1EB359960 - 8);
  unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  uint64_t v5 = v1 & ((v4 >> 31) ^ v4);
  uint64_t v6 = *(void *)(qword_1EB359960 + 16 * v5);
  if (v6 == a1) {
    return qword_1EB359960 + 16 * v5;
  }
  int v7 = 1;
  while (v6)
  {
    uint64_t v5 = (v5 + v7) & v1;
    uint64_t v6 = *(void *)(qword_1EB359960 + 16 * v5);
    ++v7;
    if (v6 == a1) {
      return qword_1EB359960 + 16 * v5;
    }
  }
  return qword_1EB359960 + 16 * *(unsigned int *)(qword_1EB359960 - 4);
}

uint64_t WTF::tryMakeString<WTF::UUID,WTF::ASCIILiteral>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  uint64_t v4 = a2[1];
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = *a2;
  if (v6 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v6;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)v10, (uint64_t)&v8, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(a1, (uint64_t)&v9);
  int v7 = *(_DWORD *)(a2 + 8);
  if (((v7 | result) & 0x80000000) == 0)
  {
    BOOL v8 = __OFADD__(result, v7);
    uint64_t result = (result + v7);
    if (!v8) {
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, *(_DWORD **)a1, *(void *)(a1 + 8), *(_OWORD **)a2, *(void *)(a2 + 8), a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, void *a7@<X8>)
{
  int v11 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v13 = v25;
        if (v25)
        {
          _DWORD *v25 = 2;
          v13[1] = v11;
          *((void *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = &v28;
          uint64_t v28 = v13 + 5;
          _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v25, (unsigned char ***)&v27);
          uint64_t result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)&v25, (uint64_t)&v28);
          if (a6)
          {
            uint64_t result = (uint64_t)v13 + result + 20;
            if (a6 == 1) {
              *(unsigned char *)uint64_t result = *(unsigned char *)a5;
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, a5, a6);
            }
          }
        }
        goto LABEL_19;
      }
LABEL_10:
      uint64_t v13 = 0;
      goto LABEL_19;
    }
LABEL_11:
    uint64_t v13 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_19;
  }
  if (!result) {
    goto LABEL_11;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_10;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v13 = v25;
  if (v25)
  {
    _DWORD *v25 = 2;
    v13[1] = v11;
    *((void *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = &v28;
    uint64_t v28 = v13 + 5;
    _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v25, &v27);
    uint64_t result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)&v25, (uint64_t)&v28);
    BOOL v14 = (char *)v13 + 2 * result + 20;
    int v15 = &v14[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      unint64_t v16 = &v14[2 * (a6 & 0xFFFFFFC0)];
      long long v17 = 0uLL;
      do
      {
        v29.val[0] = (int8x16_t)*a5;
        int8x16_t v18 = *((int8x16_t *)a5 + 1);
        v30.val[0] = (int8x16_t)a5[2];
        long long v19 = a5[3];
        a5 += 4;
        long long v20 = v19;
        v30.val[1] = 0uLL;
        v31.val[0] = v18;
        v29.val[1] = 0uLL;
        unsigned int v21 = v14;
        vst2q_s8(v21, v29);
        v21 += 32;
        v31.val[1] = 0uLL;
        vst2q_s8(v21, v31);
        uint64_t v22 = v14 + 64;
        vst2q_s8(v22, v30);
        uint64_t v23 = v14 + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
        v14 += 128;
      }
      while (v14 != v16);
      BOOL v14 = v16;
    }
    while (v14 != v15)
    {
      __int16 v24 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)BOOL v14 = v24;
      v14 += 2;
    }
  }
LABEL_19:
  *a7 = v13;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  if (qword_1EB359960 && (int v2 = *(_DWORD *)(qword_1EB359960 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB359960 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, a1);
}

void *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CDAC0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CDAC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(v2 + 32);
  int v4 = (uint64_t *)(v2 + 32);
  uint64_t v3 = v5;
  if (v5
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4),
        (uint64_t v3 = *v4) != 0))
  {
    int v6 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(void *)(v1 + 24);
  unint64_t v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v6 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (void *)(v3 + 16 * v11);
  uint64_t v13 = *v12;
  if (*v12)
  {
    BOOL v14 = 0;
    int v15 = 1;
    while (v13 != v7)
    {
      if (v13 == -1) {
        BOOL v14 = v12;
      }
      unsigned int v11 = (v11 + v15) & v6;
      uint64_t v12 = (void *)(v3 + 16 * v11);
      uint64_t v13 = *v12;
      ++v15;
      if (!*v12)
      {
        if (v14)
        {
          *BOOL v14 = 0;
          v14[1] = 0;
          --*(_DWORD *)(*v4 - 16);
          uint64_t v7 = *(void *)(v1 + 24);
          uint64_t v12 = v14;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    *uint64_t v12 = v7;
    v12[1] = *(void *)(v1 + 32);
    uint64_t v16 = *v4;
    if (*v4) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v18 = *v4;
    if (*v4) {
      int v19 = *(_DWORD *)(v18 - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
    unint64_t v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20) {
        return result;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v10 = (void *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        uint64_t v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          uint64_t v19 = *(void *)(v11 + 16 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CDAE8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CDAE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t result = (uint64_t *)(v2 + 32);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned int v7 = *(_DWORD *)(v4 - 8);
    unint64_t v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      *(void *)(v4 + 16 * v11) = -1;
      ++*(_DWORD *)(*result - 16);
      uint64_t v14 = *result;
      int v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      uint64_t v16 = *result;
      if (*result)
      {
        unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
        unsigned int v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9) {
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v18 >> 1);
        }
      }
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v4 + 1);
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = v5;
    uint64_t v8 = *(void *)(a2 + 16);
    unint64_t v9 = *(const void **)v8;
    size_t v10 = *(void *)(v8 + 8);
    return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v9, v10);
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v4 + 1);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  char v5 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v5);
}

uint64_t WebKit::WebAutomationSession::sendSynthesizedEventsToPage(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2, NSArray *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t result = [(WebKit::WebPageProxy *)a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v15;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(a2);
        }
        unint64_t v9 = *(WebKit::WebIOSEventFactory **)(*((void *)&v14 + 1) + 8 * v8);
        if (([(WebKit::WebIOSEventFactory *)v9 type] & 0xFFFFFFFE) == 4)
        {
          WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent((uint64_t)v12, v9, 0);
          WebKit::WebPageProxy::handleKeyboardEvent((uint64_t)this, (uint64_t)v12);
          CFTypeRef v11 = cf;
          CFTypeRef cf = 0;
          if (v11) {
            CFRelease(v11);
          }
          WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v12, v10);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [(WebKit::WebPageProxy *)a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(unsigned int *a1, WebKit::WebAutomationSession *a2, int a3, int *a4)
{
  int v8 = a4[2];
  if (v8 != 1)
  {
    if (v8)
    {
      unint64_t v21 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (a1) {
        CFRelease(a1);
      }
      if (v4) {
        CFRelease(v4);
      }
      _Unwind_Resume(v21);
    }
    int v9 = *a4;
    int v25 = WebKit::WebAutomationSession::charCodeForVirtualKey((uint64_t)a1, *a4);
    if ((v25 & 0xFF0000) != 0) {
      size_t v10 = (__CFString *)[NSString stringWithCharacters:&v25 length:1];
    }
    else {
      size_t v10 = 0;
    }
    int v24 = WebKit::WebAutomationSession::charCodeIgnoringModifiersForVirtualKey((uint64_t)a1, v9);
    if ((v24 & 0xFF0000) != 0) {
      int v13 = (__CFString *)[NSString stringWithCharacters:&v24 length:1];
    }
    else {
      int v13 = 0;
    }
    int v15 = v9 - 36;
    if (v9 - 36) <= 0xA && ((0x7F7u >> v15))
    {
      int v14 = dword_1994F6C38[v15];
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  CFTypeRef v11 = *(WTF::StringImpl **)a4;
  if (*(void *)a4)
  {
    *(_DWORD *)v11 += 2;
    size_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    int v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (*(_DWORD *)v11 != 2)
    {
      int v14 = 0;
      *(_DWORD *)v11 -= 2;
      goto LABEL_17;
    }
    WTF::StringImpl::destroy(v11, v12);
LABEL_16:
    int v14 = 0;
    goto LABEL_17;
  }
  int v14 = 0;
  size_t v10 = &stru_1EEA10550;
  int v13 = &stru_1EEA10550;
LABEL_17:
  BOOL v16 = [(__CFString *)v10 length] == 1
     && [(__CFString *)v10 characterAtIndex:0] == 9;
  id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  switch(a3)
  {
    case 'l':
      BYTE2(v22) = v16;
      LOWORD(v22) = 0;
      uint64_t v20 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4FB6DA8]), "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, v10, v13, a1[74], 0, 0, CFAbsoluteTimeGetCurrent(), 0, v22);
      [v18 addObject:v20];
      if (v20) {
        CFRelease(v20);
      }
      BYTE2(v23) = v16;
      LOWORD(v23) = 0;
      uint64_t v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4FB6DA8]), "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, v10, v13, a1[74], 0, 0, CFAbsoluteTimeGetCurrent(), 0, v23);
      [v18 addObject:v19];
      break;
    case 'k':
      a1[74] &= ~v14;
      BYTE2(v22) = v16;
      LOWORD(v22) = 0;
      uint64_t v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4FB6DA8]), "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, v10, v13, a1[74], 0, 0, CFAbsoluteTimeGetCurrent(), 0, v22);
      [v18 addObject:v19];
      break;
    case 'j':
      a1[74] |= v14;
      BYTE2(v22) = v16;
      LOWORD(v22) = 0;
      uint64_t v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4FB6DA8]), "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, v10, v13, a1[74], 0, 0, CFAbsoluteTimeGetCurrent(), 0, v22);
      [v18 addObject:v19];
      break;
    default:
      goto LABEL_30;
  }
  if (v19) {
    CFRelease(v19);
  }
LABEL_30:
  WebKit::WebAutomationSession::sendSynthesizedEventsToPage(a2, (WebKit::WebPageProxy *)v18, v17);
  if (v18) {
    CFRelease(v18);
  }
}

void sub_198CD5F8C(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  JUMPOUT(0x198CD5F84);
}

void WebKit::WebAutomationSession::platformSimulateKeySequence(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2, const WTF::String *a3)
{
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (*(void *)a3) {
    uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  char v8 = [(__CFString *)v7 isEqualToString:@"\t"];
  uint64_t v9 = [(__CFString *)v7 length];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN6WebKit20WebAutomationSession27platformSimulateKeySequenceERNS_12WebPageProxyERKN3WTF6StringE_block_invoke;
  v12[3] = &__block_descriptor_49_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE_e52_v56__0__NSString_8__NSRange_QQ_16__NSRange_QQ_32_B48l;
  char v14 = v8;
  char v12[4] = this;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](v7, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 2, v12);
  WebKit::WebAutomationSession::sendSynthesizedEventsToPage(a2, (WebKit::WebPageProxy *)v6, v10);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_198CD60D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit20WebAutomationSession27platformSimulateKeySequenceERNS_12WebPageProxyERKN3WTF6StringE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = objc_alloc(MEMORY[0x1E4FB6DA8]);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  BYTE2(v11) = *(unsigned char *)(a1 + 48);
  LOWORD(v11) = 0;
  uint64_t v7 = (const void *)objc_msgSend(v5, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, a2, a2, *(unsigned int *)(v4 + 296), 0, 0, Current, 0, v11);
  [*(id *)(a1 + 40) addObject:v7];
  id v8 = objc_alloc(MEMORY[0x1E4FB6DA8]);
  CFAbsoluteTime v9 = CFAbsoluteTimeGetCurrent();
  BYTE2(v12) = *(unsigned char *)(a1 + 48);
  LOWORD(v12) = 0;
  size_t v10 = (const void *)objc_msgSend(v8, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, a2, a2, *(unsigned int *)(v4 + 296), 0, 0, v9, 0, v12);
  [*(id *)(a1 + 40) addObject:v10];
  if (v10) {
    CFRelease(v10);
  }
  if (v7)
  {
    CFRelease(v7);
  }
}

void sub_198CD622C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebKit::WebAutomationSession::platformSimulateTouchInteraction(int a1, WebKit::WebPageProxy *this, int a3, IntPoint *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v15.m_location = *a4;
  v15.m_size = 0;
  uint64_t v16 = WebKit::WebPageProxy::syncRootViewToScreen(this, &v15);
  uint64_t v10 = *a7;
  *a7 = 0;
  uint64_t v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v11 = MEMORY[0x1E4F14398];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::descriptor;
  v11[4] = v10;
  id v12 = +[_WKTouchEventGenerator sharedTouchEventGenerator];
  WebKit::WebPageProxy::cocoaView(this, &v15);
  m_location = (const void *)v15.m_location;
  uint64_t v14 = [*(id *)&v15.m_location window];
  if (m_location) {
    CFRelease(m_location);
  }
  if (a3)
  {
    if (a3 == 1)
    {
      WebCore::IntPoint::operator CGPoint();
      objc_msgSend(v12, "moveToPoint:duration:window:completionBlock:", v14, v11);
    }
    else if (a3 == 2)
    {
      WebCore::IntPoint::operator CGPoint();
      objc_msgSend(v12, "liftUp:window:completionBlock:", v14, v11);
    }
  }
  else
  {
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v12, "touchDown:window:completionBlock:", v14, v11);
  }
  _Block_release(v11);
}

void sub_198CD6410(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AutomationClient::AutomationClient(uint64_t a1, uint64_t a2, id val)
{
  uint64_t v4 = (Inspector::RemoteInspector::Client *)(a1 + 8);
  *(void *)a1 = &unk_1EE9CDB40;
  *(void *)(a1 + 8) = &unk_1EE9CDB98;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  objc_initWeak((id *)(a1 + 24), val);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v5 = 2;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) & 0xFD | v5;
  if (objc_opt_respondsToSelector()) {
    char v6 = 4;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) & 0xFB | v6;
  if (objc_opt_respondsToSelector()) {
    char v7 = 8;
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) & 0xF7 | v7;
  uint64_t v8 = objc_opt_respondsToSelector();
  if (v8) {
    char v9 = 16;
  }
  else {
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) & 0xEF | v9;
  uint64_t v10 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v8);
  Inspector::RemoteInspector::setClient(v10, v4);
  return a1;
}

void sub_198CD65D0(_Unwind_Exception *a1)
{
  Inspector::RemoteInspector::Client::~Client(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationClient::~AutomationClient(id *this)
{
  uint64_t v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)this);
  Inspector::RemoteInspector::setClient(v2, 0);
  objc_destroyWeak(this + 3);
  Inspector::RemoteInspector::Client::~Client((Inspector::RemoteInspector::Client *)(this + 1));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::AutomationClient::~AutomationClient(this);

  WTF::fastFree(v1, v2);
}

void sub_198CD6634(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 + 24));
  Inspector::RemoteInspector::Client::~Client((Inspector::RemoteInspector::Client *)(v1 + 8));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::AutomationClient::~AutomationClient(id *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::AutomationClient::~AutomationClient(this - 1);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::AutomationClient::didRequestAutomationSession(WebKit::AutomationClient *this, WebKit::WebProcessPool *a2, WTF::RunLoop **a3)
{
  char v5 = 0;
  int v4 = 0;
  return WebKit::AutomationClient::requestAutomationSession((uint64_t)this, a3, (unsigned __int8 *)&v4);
}

uint64_t WebKit::AutomationClient::requestAutomationSession(uint64_t a1, WTF::RunLoop **a2, unsigned __int8 *a3)
{
  char v6 = objc_alloc_init(_WKAutomationSessionConfiguration);
  [(_WKAutomationSessionConfiguration *)v6 setAcceptInsecureCertificates:*a3];
  if (a3[2]) {
    [(_WKAutomationSessionConfiguration *)v6 setAllowsInsecureMediaCapture:a3[1]];
  }
  if (a3[4]) {
    [(_WKAutomationSessionConfiguration *)v6 setSuppressesICECandidateFiltering:a3[3]];
  }
  char v7 = *a2;
  if (*a2)
  {
    char v7 = (WTF::RunLoop *)WTF::StringImpl::operator NSString *();
    uint64_t v8 = (__CFString *)v7;
  }
  else
  {
    uint64_t v8 = &stru_1EEA10550;
  }
  WTF::RunLoop::main(v7);
  if (v8) {
    CFRetain(v8);
  }
  char v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v9 = &unk_1EE9CDD30;
  v9[1] = a1;
  void v9[2] = v8;
  void v9[3] = v6;
  uint64_t v11 = v9;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v11;
  if (v11) {
    return (*(uint64_t (**)(void *))(*v11 + 8))(v11);
  }
  return result;
}

void sub_198CD67F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AutomationClient::remoteAutomationAllowed(WebKit::AutomationClient *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 3);
  uint64_t v1 = [WeakRetained _processPoolAllowsRemoteAutomation:*((void *)this + 2)];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v1;
}

void sub_198CD68C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::AutomationClient::remoteAutomationAllowed(WebKit::AutomationClient *this)
{
  return WebKit::AutomationClient::remoteAutomationAllowed((WebKit::AutomationClient *)((char *)this - 8));
}

uint64_t non-virtual thunk to'WebKit::AutomationClient::requestAutomationSession(uint64_t a1, WTF::RunLoop **a2, unsigned __int8 *a3)
{
  return WebKit::AutomationClient::requestAutomationSession(a1 - 8, a2, a3);
}

uint64_t WebKit::AutomationClient::requestedDebuggablesToWakeUp(WebKit::AutomationClient *this)
{
  WTF::RunLoop::main(this);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9CDD58;
  v2[1] = this;
  uint64_t v4 = (uint64_t)v2;
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void sub_198CD6988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::AutomationClient::requestedDebuggablesToWakeUp(WebKit::AutomationClient *this)
{
  return WebKit::AutomationClient::requestedDebuggablesToWakeUp((WebKit::AutomationClient *)((char *)this - 8));
}

void WebKit::AutomationClient::browserName(id *this)
{
  if (((_BYTE)this[4] & 8) != 0)
  {
    [objc_loadWeak(this + 3) _processPoolBrowserNameForAutomation:this[2]];
  }
  else
  {
    uint64_t v1 = (void *)[MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v2 = (void *)[v1 infoDictionary];
    [v2 objectForKeyedSubscript:*MEMORY[0x1E4F1CC48]];
    uint64_t v3 = (void *)[v1 infoDictionary];
    [v3 objectForKeyedSubscript:*MEMORY[0x1E4F1D008]];
  }

  JUMPOUT(0x19972EAD0);
}

void non-virtual thunk to'WebKit::AutomationClient::browserName(id *this)
{
}

void WebKit::AutomationClient::browserVersion(id *this)
{
  if (((_BYTE)this[4] & 0x10) != 0)
  {
    [objc_loadWeak(this + 3) _processPoolBrowserVersionForAutomation:this[2]];
  }
  else
  {
    uint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary");
    [v1 objectForKeyedSubscript:*MEMORY[0x1E4F1CC70]];
  }

  JUMPOUT(0x19972EAD0);
}

void non-virtual thunk to'WebKit::AutomationClient::browserVersion(id *this)
{
}

uint64_t WebKit::AutomationSessionClient::AutomationSessionClient(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CDBE0;
  *(void *)(a1 + 8) = 0;
  objc_initWeak((id *)(a1 + 8), a2);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFD | v3;
  if (objc_opt_respondsToSelector()) {
    __int16 v4 = 4;
  }
  else {
    __int16 v4 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFB | v4;
  if (objc_opt_respondsToSelector()) {
    __int16 v5 = 8;
  }
  else {
    __int16 v5 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFF7 | v5;
  if (objc_opt_respondsToSelector()) {
    __int16 v6 = 16;
  }
  else {
    __int16 v6 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFEF | v6;
  if (objc_opt_respondsToSelector()) {
    __int16 v7 = 32;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFDF | v7;
  if (objc_opt_respondsToSelector()) {
    __int16 v8 = 64;
  }
  else {
    __int16 v8 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFBF | v8;
  if (objc_opt_respondsToSelector()) {
    __int16 v9 = 128;
  }
  else {
    __int16 v9 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFF7F | v9;
  if (objc_opt_respondsToSelector()) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFEFF | v10;
  if (objc_opt_respondsToSelector()) {
    __int16 v11 = 512;
  }
  else {
    __int16 v11 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFDFF | v11;
  if (objc_opt_respondsToSelector()) {
    __int16 v12 = 1024;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFBFF | v12;
  if (objc_opt_respondsToSelector()) {
    __int16 v13 = 2048;
  }
  else {
    __int16 v13 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF7FF | v13;
  if (objc_opt_respondsToSelector()) {
    __int16 v14 = 4096;
  }
  else {
    __int16 v14 = 0;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xEFFF | v14;
  return a1;
}

void sub_198CD6D88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::didDisconnectFromRemote(id *this, WebKit::WebAutomationSession *a2)
{
  if ((_WORD)this[2])
  {
    id WeakRetained = objc_loadWeakRetained(this + 1);
    [WeakRetained _automationSessionDidDisconnectFromRemote:*((void *)a2 + 1)];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD6DFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AutomationSessionClient::requestNewPageWithOptions(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if ((*(_WORD *)(a1 + 16) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *a4;
    *a4 = 0;
    __int16 v10 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *__int16 v10 = MEMORY[0x1E4F14398];
    v10[1] = 50331650;
    void v10[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke;
    v10[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::descriptor;
    v10[4] = v9;
    [WeakRetained _automationSession:v8 requestNewWebViewWithOptions:a3 & 1 completionHandler:v10];
    _Block_release(v10);
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)>::operator()(a4);
  }
}

void sub_198CD6F40(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestSwitchToPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  WebKit::WebPageProxy::cocoaView(this, &v12);
  __int16 v7 = v12;
  if (v12 && (*(_WORD *)(a1 + 16) & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a4;
    *a4 = 0;
    __int16 v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *__int16 v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v11[4] = v10;
    [WeakRetained _automationSession:v9 requestSwitchToWebView:v7 completionHandler:v11];
    _Block_release(v11);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    if (!v7) {
      return;
    }
  }

  CFRelease(v7);
}

void sub_198CD70C8(_Unwind_Exception *a1)
{
  __int16 v4 = v3;
  _Block_release(v4);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestHideWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  WebKit::WebPageProxy::cocoaView(this, &v12);
  __int16 v7 = v12;
  if (v12 && (*(_WORD *)(a1 + 16) & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a4;
    *a4 = 0;
    __int16 v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *__int16 v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v11[4] = v10;
    [WeakRetained _automationSession:v9 requestHideWindowOfWebView:v7 completionHandler:v11];
    _Block_release(v11);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    if (!v7) {
      return;
    }
  }

  CFRelease(v7);
}

void sub_198CD727C(_Unwind_Exception *a1)
{
  __int16 v4 = v3;
  _Block_release(v4);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestRestoreWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  WebKit::WebPageProxy::cocoaView(this, &v12);
  __int16 v7 = v12;
  if (v12 && (*(_WORD *)(a1 + 16) & 0x10) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a4;
    *a4 = 0;
    __int16 v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *__int16 v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v11[4] = v10;
    [WeakRetained _automationSession:v9 requestRestoreWindowOfWebView:v7 completionHandler:v11];
    _Block_release(v11);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    if (!v7) {
      return;
    }
  }

  CFRelease(v7);
}

void sub_198CD7430(_Unwind_Exception *a1)
{
  __int16 v4 = v3;
  _Block_release(v4);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestMaximizeWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  WebKit::WebPageProxy::cocoaView(this, &v12);
  __int16 v7 = v12;
  if (v12 && (*(_WORD *)(a1 + 16) & 0x20) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a4;
    *a4 = 0;
    __int16 v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *__int16 v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v11[4] = v10;
    [WeakRetained _automationSession:v9 requestMaximizeWindowOfWebView:v7 completionHandler:v11];
    _Block_release(v11);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    if (!v7) {
      return;
    }
  }

  CFRelease(v7);
}

void sub_198CD75E4(_Unwind_Exception *a1)
{
  __int16 v4 = v3;
  _Block_release(v4);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AutomationSessionClient::isShowingJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v5 = cf;
  if (!cf) {
    return 0;
  }
  if ((*((_WORD *)this + 8) & 0x40) == 0)
  {
    CFRelease(cf);
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  uint64_t v6 = [WeakRetained _automationSession:*((void *)a2 + 1) isShowingJavaScriptDialogForWebView:v5];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFRelease(v5);
  return v6;
}

void sub_198CD76F8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::dismissCurrentJavaScriptDialogOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v5 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x80) != 0)
    {
      id WeakRetained = objc_loadWeakRetained(this + 1);
      [WeakRetained _automationSession:*((void *)a2 + 1) dismissCurrentJavaScriptDialogForWebView:v5];
      if (WeakRetained) {
        CFRelease(WeakRetained);
      }
    }
    CFRelease(v5);
  }
}

void sub_198CD77BC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::acceptCurrentJavaScriptDialogOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v5 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x100) != 0)
    {
      id WeakRetained = objc_loadWeakRetained(this + 1);
      [WeakRetained _automationSession:*((void *)a2 + 1) acceptCurrentJavaScriptDialogForWebView:v5];
      if (WeakRetained) {
        CFRelease(WeakRetained);
      }
    }
    CFRelease(v5);
  }
}

void sub_198CD7880(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::messageOfCurrentJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this@<X0>, WebKit::WebAutomationSession *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, void *a4@<X8>)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v7 = cf;
  if (!cf) {
    goto LABEL_4;
  }
  if ((*((_WORD *)this + 8) & 0x200) == 0)
  {
    CFRelease(cf);
LABEL_4:
    *a4 = 0;
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  MEMORY[0x19972EAD0](a4, [WeakRetained _automationSession:*((void *)a2 + 1) messageOfCurrentJavaScriptDialogForWebView:v7]);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFRelease(v7);
}

void sub_198CD7944(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::setUserInputForCurrentJavaScriptPromptOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3, const WTF::String *a4)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v7 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x400) != 0)
    {
      id WeakRetained = objc_loadWeakRetained(this + 1);
      uint64_t v9 = *((void *)a2 + 1);
      uint64_t v10 = *(void *)a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
      [WeakRetained _automationSession:v9 setUserInput:v10 forCurrentJavaScriptDialogForWebView:v7];
      if (WeakRetained) {
        CFRelease(WeakRetained);
      }
    }
    CFRelease(v7);
  }
}

void sub_198CD7A30(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::AutomationSessionClient::typeOfCurrentJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v5 = cf;
  if (!cf) {
    goto LABEL_4;
  }
  if ((*((_WORD *)this + 8) & 0x800) == 0)
  {
    CFRelease(cf);
LABEL_4:
    unint64_t v6 = 0x100000000;
    uint64_t v7 = 2;
    return v6 | v7;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  uint64_t v9 = [WeakRetained _automationSession:*((void *)a2 + 1) typeOfCurrentJavaScriptDialogForWebView:v5];
  unint64_t v6 = (unint64_t)((unint64_t)(v9 - 2) < 3) << 32;
  if ((unint64_t)(v9 - 2) >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v9 - 2;
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFRelease(v5);
  return v6 | v7;
}

void sub_198CD7B00(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::AutomationSessionClient::currentPresentationOfPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  WebKit::WebPageProxy::cocoaView(a3, &cf);
  CFTypeRef v5 = cf;
  if (!cf) {
    return 1;
  }
  if ((*((_WORD *)this + 8) & 0x1000) == 0)
  {
    CFRelease(cf);
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  BOOL v6 = [WeakRetained _automationSession:*((void *)a2 + 1) currentPresentationForWebView:v5] != 0;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFRelease(v5);
  return v6;
}

void sub_198CD7BC0(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::BrowsingWarning::BrowsingWarning(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(_DWORD *)a1 = 1;
  uint64_t v8 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v8 += 2;
  }
  *(void *)(a1 + 8) = v8;
  long long v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v9;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&cf, a4);
  if (v157 == 1)
  {
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"This Connection Is Not Secure", v10);
    if (v163[0])
    {
      CFAutorelease(v163[0]);
      CFTypeRef v14 = v163[0];
    }
    else
    {
      CFTypeRef v14 = 0;
    }
  }
  else
  {
    if (v157)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_250:
      __break(1u);
      goto LABEL_251;
    }
    __int16 v11 = (void *)cf;
    if (cf) {
      CFRetain(cf);
    }
    if ([v11 isPhishing])
    {
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Deceptive Website Warning", v12);
      CFTypeRef v13 = v163[0];
      if (v163[0]) {
        goto LABEL_16;
      }
    }
    else if ([v11 isMalware])
    {
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Malware Website Warning", v15);
      CFTypeRef v13 = v163[0];
      if (v163[0])
      {
LABEL_16:
        CFAutorelease(v13);
        CFTypeRef v14 = v163[0];
        if (!v11) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else
    {
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Website With Harmful Software Warning", v15);
      CFTypeRef v13 = v163[0];
      if (v163[0]) {
        goto LABEL_16;
      }
    }
    CFTypeRef v14 = 0;
    if (v11) {
LABEL_17:
    }
      CFRelease(v11);
  }
LABEL_18:
  MEMORY[0x19972EAD0](a1 + 48, v14);
  if (v157 != -1) {
    ((void (*)(CFTypeRef *, CFTypeRef *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v157])(v163, &cf);
  }
  int v157 = -1;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v154, a4);
  if (v155 == 1)
  {
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"This website does not support connecting securely over HTTPS. The information you see and enter on this website, including credit cards, phone numbers, and passwords, can be read and altered by other people.", v16);
    if (v163[0])
    {
      CFAutorelease(v163[0]);
      CFTypeRef v20 = v163[0];
    }
    else
    {
      CFTypeRef v20 = 0;
    }
    goto LABEL_35;
  }
  if (v155)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_250;
  }
  long long v17 = (void *)v154;
  if (v154) {
    CFRetain(v154);
  }
  if ([v17 isPhishing])
  {
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"This website may try to trick you into doing something dangerous, like installing software or disclosing personal or financial information, like passwords, phone numbers, or credit cards.", v18);
    CFTypeRef v19 = v163[0];
    if (v163[0]) {
      goto LABEL_33;
    }
  }
  else if ([v17 isMalware])
  {
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"This website may attempt to install dangerous software, which could harm your computer or steal your personal or financial information, like passwords, photos, or credit cards.", v21);
    CFTypeRef v19 = v163[0];
    if (v163[0])
    {
LABEL_33:
      CFAutorelease(v19);
      CFTypeRef v20 = v163[0];
      if (!v17) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
  }
  else
  {
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"This website may try to trick you into installing software that harms your browsing experience, like changing your settings without your permission or showing you unwanted ads. Once installed, it may be difficult to remove.", v21);
    CFTypeRef v19 = v163[0];
    if (v163[0]) {
      goto LABEL_33;
    }
  }
  CFTypeRef v20 = 0;
  if (v17) {
LABEL_34:
  }
    CFRelease(v17);
LABEL_35:
  MEMORY[0x19972EAD0](a1 + 56, v20);
  if (v155 != -1) {
    ((void (*)(CFTypeRef *, CFTypeRef *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v155])(v163, &v154);
  }
  int v155 = -1;
  *(unsigned char *)(a1 + 64) = a3;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v152, a4);
  int v22 = v153;
  if (v153)
  {
    *(void *)(a1 + 72) = 0;
    goto LABEL_231;
  }
  id v23 = v152;
  if (![v152 isPhishing])
  {
    int v53 = [v23 isMalware];
    if (v53)
    {
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Warnings are shown for websites where malicious software has been detected. You can check the %status-link% on the %safeBrowsingProvider% diagnostic page.", v52);
      if (v163[0])
      {
        CFAutorelease(v163[0]);
        CFTypeRef v54 = v163[0];
      }
      else
      {
        CFTypeRef v54 = 0;
      }
      unint64_t v55 = @"%status-link%";
    }
    else
    {
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Warnings are shown for websites where harmful software has been detected. You can check %the-status-of-site% on the %safeBrowsingProvider% diagnostic page.", v52);
      if (v163[0])
      {
        CFAutorelease(v163[0]);
        CFTypeRef v54 = v163[0];
      }
      else
      {
        CFTypeRef v54 = 0;
      }
      unint64_t v55 = @"%the-status-of-site%";
    }
    unsigned int v59 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v54];
    MEMORY[0x19972EAD0](v163, [v23 localizedProviderDisplayName]);
    if (v163[0]) {
      uint64_t v60 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v60 = &stru_1EEA10550;
    }
    uint64_t v61 = objc_msgSend((id)objc_msgSend(v59, "string"), "rangeOfString:", @"%safeBrowsingProvider%");
    objc_msgSend(v59, "replaceCharactersInRange:withString:", v61, v62, v60);
    int v64 = (WTF::StringImpl *)v163[0];
    v163[0] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v63);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
    id v70 = objc_alloc(MEMORY[0x1E4F28E48]);
    WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"the status of “%site%”", v71);
    if (v163[0])
    {
      CFAutorelease(v163[0]);
      CFTypeRef v72 = v163[0];
    }
    else
    {
      CFTypeRef v72 = 0;
    }
    BOOL v73 = (NSString *)[v70 initWithString:v72];
    uint64_t v151 = v73;
    WTF::URL::host((WTF::URL *)a2);
    if ((v74 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    if (v163[0]) {
      uint64_t v75 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v75 = &stru_1EEA10550;
    }
    uint64_t v76 = objc_msgSend((id)-[NSString string](v73, "string"), "rangeOfString:", @"%site%");
    -[NSString replaceCharactersInRange:withString:](v73, "replaceCharactersInRange:withString:", v76, v77, v75);
    unsigned int v79 = (WTF::StringImpl *)v163[0];
    v163[0] = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2) {
        WTF::StringImpl::destroy(v79, v78);
      }
      else {
        *(_DWORD *)v79 -= 2;
      }
    }
    int v80 = (NSString *)[(NSString *)v73 string];
    WTF::URL::URL((WTF::URL *)v162);
    MEMORY[0x19972EAD0](&v160, [v23 malwareDetailsBaseURLString]);
    v149 = (NSMutableAttributedString *)v55;
    int v81 = v53;
    uint64_t v82 = WTF::URL::host((WTF::URL *)a2);
    uint64_t v84 = v83;
    WTF::defaultLanguage();
    int v85 = v159;
    uint64_t v86 = v160;
    if (v160) {
      int v87 = *((_DWORD *)v160 + 1);
    }
    else {
      int v87 = 0;
    }
    long long v148 = (WTF::StringImpl *)v82;
    if (v159)
    {
      int v88 = *((_DWORD *)v159 + 1);
      if (v88 < 0) {
        goto LABEL_251;
      }
    }
    else
    {
      int v88 = 0;
    }
    BOOL v44 = __OFADD__(v88, 4);
    int v89 = v88 + 4;
    char v90 = v44;
    if ((v84 & 0x80000000) != 0
      || (v90 & 1) != 0
      || (BOOL v44 = __OFADD__(v84, v89), v91 = v84 + v89, v44)
      || ((BOOL v44 = __OFADD__(v91, 6), v92 = v91 + 6, !v44) ? (v93 = 0) : (v93 = 1),
          v87 < 0 || (v93 & 1) != 0 || (unsigned int v94 = v87 + v92, __OFADD__(v87, v92))))
    {
LABEL_251:
      __break(0xC471u);
      JUMPOUT(0x198CD8A7CLL);
    }
    if (v160)
    {
      BOOL v95 = (v84 & 0xFF00000000) == 0 || (*((unsigned char *)v160 + 16) & 4) == 0;
      if (v159 && !v95)
      {
LABEL_128:
        uint64_t v96 = v94;
        BOOL v97 = v94 == 0;
        if ((*((unsigned char *)v159 + 16) & 4) != 0) {
          goto LABEL_129;
        }
        goto LABEL_186;
      }
    }
    else
    {
      BOOL v95 = (v84 & 0xFF00000000) == 0;
      if ((v84 & 0xFF00000000) != 0 && v159) {
        goto LABEL_128;
      }
    }
    uint64_t v96 = v94;
    BOOL v97 = v94 == 0;
    if (!v95)
    {
LABEL_129:
      if (!v97)
      {
        if ((v94 & 0x80000000) != 0) {
          goto LABEL_251;
        }
        WTF::tryFastCompactMalloc((WTF *)(v96 + 20));
        uint64_t v98 = (uint64_t)v165;
        if (!v165) {
          goto LABEL_251;
        }
        long long v147 = v59;
        unsigned int v99 = v80;
        *(_DWORD *)v165 = 2;
        *(_DWORD *)(v98 + 4) = v94;
        *(void *)(v98 + 8) = v98 + 20;
        *(_DWORD *)(v98 + 16) = 4;
        v164 = v86;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v164, (char *)(v98 + 20));
        unint64_t v100 = 0x1E4F28000;
        uint64_t v101 = (uint64_t)v164;
        if (v164) {
          uint64_t v101 = *((unsigned int *)v164 + 1);
        }
        uint64_t v102 = v98 + 20 + v101;
        *(_WORD *)(v102 + 4) = 15717;
        *(_DWORD *)uint64_t v102 = 1953067814;
        uint64_t v103 = v102 + 6;
        v165 = v148;
        uint64_t v166 = v84;
        WTF::StringView::getCharacters<unsigned char>(&v165, (char *)(v102 + 6));
        uint64_t v104 = v103 + v166;
        *(_DWORD *)uint64_t v104 = 1030514726;
        v167[0] = (uint64_t)v85;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v167, (char *)(v104 + 4));
        unint64_t v105 = v151;
        int v80 = v99;
        unsigned int v59 = v147;
        goto LABEL_195;
      }
      goto LABEL_187;
    }
LABEL_186:
    if (!v97)
    {
      if (v94 > 0x7FFFFFEF) {
        goto LABEL_251;
      }
      WTF::tryFastCompactMalloc((WTF *)(2 * v96 + 20));
      uint64_t v98 = (uint64_t)v165;
      if (!v165) {
        goto LABEL_251;
      }
      uint64_t v146 = v80;
      *(_DWORD *)v165 = 2;
      *(_DWORD *)(v98 + 4) = v94;
      *(void *)(v98 + 8) = v98 + 20;
      *(_DWORD *)(v98 + 16) = 0;
      v164 = v86;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v164, (char *)(v98 + 20));
      unint64_t v100 = 0x1E4F28000uLL;
      uint64_t v122 = (uint64_t)v164;
      if (v164) {
        uint64_t v122 = *((unsigned int *)v164 + 1);
      }
      uint64_t v123 = 0;
      uint64_t v124 = v98 + 20 + 2 * v122;
      do
      {
        *(_WORD *)(v124 + 2 * v123) = aSite_0[v123];
        ++v123;
      }
      while (v123 != 6);
      uint64_t v125 = v124 + 12;
      v165 = v148;
      uint64_t v166 = v84;
      WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v165, (char *)(v124 + 12));
      uint64_t v126 = v125 + 2 * v166;
      *(void *)uint64_t v126 = 0x3D006C00680026;
      v167[0] = (uint64_t)v85;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v167, (char *)(v126 + 8));
      unint64_t v105 = v151;
      int v80 = v146;
LABEL_195:
      uint64_t v161 = (WTF::StringImpl *)v98;
      MEMORY[0x19972E8B0](v163, v162, &v161, 0);
      v129 = (NSString *)WTF::URL::operator NSURL *();
      uint64_t v130 = (WTF::StringImpl *)v163[0];
      v163[0] = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2) {
          WTF::StringImpl::destroy(v130, v127);
        }
        else {
          *(_DWORD *)v130 -= 2;
        }
      }
      char v131 = v161;
      uint64_t v161 = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2) {
          WTF::StringImpl::destroy(v131, v127);
        }
        else {
          *(_DWORD *)v131 -= 2;
        }
      }
      uint64_t v132 = v159;
      uint64_t v159 = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 2) {
          WTF::StringImpl::destroy(v132, v127);
        }
        else {
          *(_DWORD *)v132 -= 2;
        }
      }
      uint64_t v133 = v160;
      unsigned __int8 v160 = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2) {
          WTF::StringImpl::destroy(v133, v127);
        }
        else {
          *(_DWORD *)v133 -= 2;
        }
      }
      v134 = v162[0];
      v162[0] = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 2) {
          WTF::StringImpl::destroy(v134, v127);
        }
        else {
          *(_DWORD *)v134 -= 2;
        }
      }
      WebKit::addLinkAndReplace((WebKit *)v59, v149, v80, v129, v128);
      id v135 = objc_alloc(*(Class *)(v100 + 3656));
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"If you understand the risks involved, you can %visit-this-unsafe-site-link%.", v136);
      if (v163[0])
      {
        CFAutorelease(v163[0]);
        CFTypeRef v137 = v163[0];
      }
      else
      {
        CFTypeRef v137 = 0;
      }
      char v138 = (WebKit *)[v135 initWithString:v137];
      WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"visit this unsafe website", v139);
      if (v163[0])
      {
        CFAutorelease(v163[0]);
        uint64_t v140 = (NSString *)v163[0];
      }
      else
      {
        uint64_t v140 = 0;
      }
      if (v81) {
        uint64_t v141 = @"WKConfirmMalwareSentinel";
      }
      else {
        uint64_t v141 = @"WKVisitUnsafeWebsiteSentinel";
      }
      uint64_t v142 = (NSString *)[MEMORY[0x1E4F1CB10] URLWithString:v141];
      WebKit::addLinkAndReplace(v138, (NSMutableAttributedString *)@"%visit-this-unsafe-site-link%", v140, v142, v143);
      String v144 = (const void *)[objc_alloc(*(Class *)(v100 + 3656)) initWithString:@"\n\n"];
      [v59 appendAttributedString:v144];
      if (v144) {
        CFRelease(v144);
      }
      [v59 appendAttributedString:v138];
      CFTypeRef v121 = (id)CFMakeCollectable(v59);
      if (v138) {
        CFRelease(v138);
      }
      if (v105) {
        CFRelease(v105);
      }
      goto LABEL_228;
    }
LABEL_187:
    uint64_t v98 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    unint64_t v105 = v151;
    unint64_t v100 = 0x1E4F28000;
    goto LABEL_195;
  }
  WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Warnings are shown for websites that have been reported as deceptive. Deceptive websites try to trick you into believing they are legitimate websites you trust.", v24);
  if (v163[0])
  {
    CFAutorelease(v163[0]);
    CFTypeRef v26 = v163[0];
  }
  else
  {
    CFTypeRef v26 = 0;
  }
  WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"Learn more…", v25);
  if (v163[0])
  {
    CFAutorelease(v163[0]);
    uint64_t v28 = (NSMutableAttributedString *)v163[0];
  }
  else
  {
    uint64_t v28 = 0;
  }
  WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"If you believe this website is safe, you can %report-an-error%. Or, if you understand the risks involved, you can %bypass-link%.", v27);
  if (v163[0])
  {
    CFAutorelease(v163[0]);
    CFTypeRef v30 = v163[0];
  }
  else
  {
    CFTypeRef v30 = 0;
  }
  WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"report an error", v29);
  if (v163[0])
  {
    CFAutorelease(v163[0]);
    uint64_t v32 = (NSString *)v163[0];
  }
  else
  {
    uint64_t v32 = 0;
  }
  WebCore::copyLocalizedString((uint64_t *)v163, (WebCore *)@"visit this unsafe website", v31);
  if (v163[0])
  {
    CFAutorelease(v163[0]);
    char v150 = (NSString *)v163[0];
  }
  else
  {
    char v150 = 0;
  }
  id v33 = objc_alloc(MEMORY[0x1E4F28E48]);
  int v34 = (WebKit *)[v33 initWithString:objc_msgSend(NSString, "stringWithFormat:", @"%@ %@\n\n%@", v26, v28, v30)];
  __int16 v35 = (NSString *)[v23 learnMoreURL];
  WebKit::addLinkAndReplace(v34, v28, (NSString *)&v28->super.super.isa, v35, v36);
  WTF::URL::URL((WTF::URL *)v162);
  MEMORY[0x19972EAD0](&v160, [v23 reportAnErrorBaseURLString]);
  WTF::encodeWithURLEscapeSequences((uint64_t *)&v159, (WTF *)a2, v37);
  WTF::defaultLanguage();
  char v38 = v159;
  char v39 = v160;
  char v40 = v158;
  if (v160)
  {
    int v41 = *((_DWORD *)v160 + 1);
    if (v159) {
      goto LABEL_52;
    }
  }
  else
  {
    int v41 = 0;
    if (v159)
    {
LABEL_52:
      int v42 = *((_DWORD *)v159 + 1);
      if (v158) {
        goto LABEL_53;
      }
LABEL_238:
      int v43 = 0;
      goto LABEL_54;
    }
  }
  int v42 = 0;
  if (!v158) {
    goto LABEL_238;
  }
LABEL_53:
  int v43 = *((_DWORD *)v158 + 1);
  if (v43 < 0) {
    goto LABEL_251;
  }
LABEL_54:
  BOOL v44 = __OFADD__(v43, 4);
  int v45 = v43 + 4;
  char v46 = v44;
  if (v42 < 0) {
    goto LABEL_251;
  }
  if (v46) {
    goto LABEL_251;
  }
  BOOL v44 = __OFADD__(v42, v45);
  int v47 = v42 + v45;
  if (v44) {
    goto LABEL_251;
  }
  BOOL v44 = __OFADD__(v47, 5);
  int v48 = v47 + 5;
  BOOL v49 = v44;
  if (v41 < 0) {
    goto LABEL_251;
  }
  if (v49) {
    goto LABEL_251;
  }
  unsigned int v50 = v41 + v48;
  if (__OFADD__(v41, v48)) {
    goto LABEL_251;
  }
  if (!v160 || (*((unsigned char *)v160 + 16) & 4) != 0)
  {
    if (v159)
    {
      int v56 = *((_DWORD *)v159 + 4);
      if (!v158 || (v56 & 4) == 0)
      {
        uint64_t v51 = v50;
        BOOL v57 = v50 == 0;
        if ((v56 & 4) == 0)
        {
LABEL_78:
          if (!v57) {
            goto LABEL_88;
          }
          goto LABEL_79;
        }
        goto LABEL_136;
      }
    }
    else if (!v158)
    {
      if (!v50) {
        goto LABEL_79;
      }
      uint64_t v51 = v50;
      if ((v50 & 0x80000000) != 0) {
        goto LABEL_251;
      }
      goto LABEL_138;
    }
    uint64_t v51 = v50;
    BOOL v57 = v50 == 0;
    if ((*((unsigned char *)v158 + 16) & 4) == 0) {
      goto LABEL_78;
    }
LABEL_136:
    if (v57) {
      goto LABEL_79;
    }
    if ((v50 & 0x80000000) != 0) {
      goto LABEL_251;
    }
LABEL_138:
    WTF::tryFastCompactMalloc((WTF *)(v51 + 20));
    uint64_t v58 = (uint64_t)v165;
    if (v165)
    {
      *(_DWORD *)v165 = 2;
      *(_DWORD *)(v58 + 4) = v50;
      *(void *)(v58 + 8) = v58 + 20;
      *(_DWORD *)(v58 + 16) = 4;
      v164 = v39;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v164, (char *)(v58 + 20));
      uint64_t v106 = (uint64_t)v164;
      if (v164) {
        uint64_t v106 = *((unsigned int *)v164 + 1);
      }
      uint64_t v107 = v58 + 20 + v106;
      *(unsigned char *)(v107 + 4) = 61;
      *(_DWORD *)uint64_t v107 = 1819440422;
      uint64_t v108 = v107 + 5;
      v167[0] = (uint64_t)v38;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v167, (char *)(v107 + 5));
      uint64_t v109 = v167[0];
      if (v167[0]) {
        uint64_t v109 = *(unsigned int *)(v167[0] + 4);
      }
      *(_DWORD *)(v108 + v109) = 1030514726;
      v165 = v40;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v165, (char *)(v108 + v109 + 4));
      goto LABEL_144;
    }
    goto LABEL_251;
  }
  if (v50)
  {
    uint64_t v51 = v50;
LABEL_88:
    if (v50 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v51 + 20));
      uint64_t v58 = (uint64_t)v165;
      if (v165)
      {
        *(_DWORD *)v165 = 2;
        *(_DWORD *)(v58 + 4) = v50;
        *(void *)(v58 + 8) = v58 + 20;
        *(_DWORD *)(v58 + 16) = 0;
        v164 = v39;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v164, (char *)(v58 + 20));
        uint64_t v65 = (uint64_t)v164;
        if (v164) {
          uint64_t v65 = *((unsigned int *)v164 + 1);
        }
        uint64_t v66 = v58 + 20 + 2 * v65;
        *(void *)uint64_t v66 = 0x6C007200750026;
        *(_WORD *)(v66 + 8) = 61;
        uint64_t v67 = v66 + 10;
        v167[0] = (uint64_t)v38;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v167, (char *)(v66 + 10));
        uint64_t v68 = v167[0];
        if (v167[0]) {
          uint64_t v68 = *(unsigned int *)(v167[0] + 4);
        }
        uint64_t v69 = v67 + 2 * v68;
        *(void *)uint64_t v69 = 0x3D006C00680026;
        v165 = v40;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v165, (char *)(v69 + 8));
        goto LABEL_144;
      }
    }
    goto LABEL_251;
  }
LABEL_79:
  uint64_t v58 = MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
LABEL_144:
  uint64_t v161 = (WTF::StringImpl *)v58;
  MEMORY[0x19972E8B0](v163, v162, &v161, 0);
  unsigned __int8 v112 = (NSString *)WTF::URL::operator NSURL *();
  uint64_t v113 = (WTF::StringImpl *)v163[0];
  v163[0] = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2) {
      WTF::StringImpl::destroy(v113, v110);
    }
    else {
      *(_DWORD *)v113 -= 2;
    }
  }
  unsigned int v114 = v161;
  uint64_t v161 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2) {
      WTF::StringImpl::destroy(v114, v110);
    }
    else {
      *(_DWORD *)v114 -= 2;
    }
  }
  unsigned int v115 = v158;
  v158 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2) {
      WTF::StringImpl::destroy(v115, v110);
    }
    else {
      *(_DWORD *)v115 -= 2;
    }
  }
  double v116 = v159;
  uint64_t v159 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2) {
      WTF::StringImpl::destroy(v116, v110);
    }
    else {
      *(_DWORD *)v116 -= 2;
    }
  }
  uint64_t v117 = v160;
  unsigned __int8 v160 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2) {
      WTF::StringImpl::destroy(v117, v110);
    }
    else {
      *(_DWORD *)v117 -= 2;
    }
  }
  uint64_t v118 = v162[0];
  v162[0] = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2) {
      WTF::StringImpl::destroy(v118, v110);
    }
    else {
      *(_DWORD *)v118 -= 2;
    }
  }
  WebKit::addLinkAndReplace(v34, (NSMutableAttributedString *)@"%report-an-error%", v32, v112, v111);
  uint64_t v119 = (NSString *)[MEMORY[0x1E4F1CB10] URLWithString:@"WKVisitUnsafeWebsiteSentinel"];
  WebKit::addLinkAndReplace(v34, (NSMutableAttributedString *)@"%bypass-link%", v150, v119, v120);
  CFTypeRef v121 = (id)CFMakeCollectable(v34);
LABEL_228:
  *(void *)(a1 + 72) = v121;
  if (v121) {
    CFRetain(v121);
  }
  int v22 = v153;
LABEL_231:
  if (v22 != -1) {
    ((void (*)(CFTypeRef *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v22])(v163, &v152);
  }
  int v153 = -1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 80, a4);
  return a1;
}

void sub_198CD8AC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, WTF::StringImpl **a18, WTF::StringImpl **a19, char a20,int a21,int a22,int a23,char a24,int a25,int a26,int a27,char a28,int a29,int a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35)
{
  char v38 = *(const void **)(v36 - 160);
  *(void *)(v36 - 160) = 0;
  if (v38) {
    CFRelease(v38);
  }
  if (a22 != -1) {
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[a22])(&a34, &a20);
  }
  a22 = -1;
  char v39 = *a18;
  *a18 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, a2);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  char v40 = *a19;
  *a19 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, a2);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  int v41 = *(WTF::StringImpl **)(v35 + 8);
  *(void *)(v35 + 8) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, a2);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::BrowsingWarning::BrowsingWarning(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  *(_DWORD *)a1 = 1;
  WTF::URL::URL(a1 + 8, a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 48) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v13 = *a5;
  *a5 = 0;
  *(void *)(a1 + 72) = v13;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 80, a6);
  return a1;
}

void sub_198CD90BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v3;
  BOOL v6 = *(const void **)(v4 + 72);
  uint64_t v7 = v4;
  *(void *)(v4 + 72) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v8 = *(WTF::StringImpl **)(v7 + 56);
  *(void *)(v7 + 56) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = *(WTF::StringImpl **)(v7 + 48);
  *(void *)(v7 + 48) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFStringRef v10 = *v2;
  *uint64_t v2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::BrowsingWarning::visitUnsafeWebsiteSentinel(WebKit::BrowsingWarning *this)
{
  return [MEMORY[0x1E4F1CB10] URLWithString:@"WKVisitUnsafeWebsiteSentinel"];
}

uint64_t WebKit::BrowsingWarning::confirmMalwareSentinel(WebKit::BrowsingWarning *this)
{
  return [MEMORY[0x1E4F1CB10] URLWithString:@"WKConfirmMalwareSentinel"];
}

uint64_t WebKit::shouldAllowAutoFillForCellularIdentifiers(WebKit *this, const WTF::URL *a2)
{
  uint64_t v2 = this;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (WebKit::isFullWebBrowserOrRunningTest(this))
  {
    char v3 = _MergedGlobals_33;
    _MergedGlobals_33 = 1;
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = qword_1EB358668;
      uint64_t v5 = 0;
      if (os_log_type_enabled((os_log_t)qword_1EB358668, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        BOOL v6 = "Skipped cellular AutoFill status check (app is a web browser)";
LABEL_65:
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
        return 0;
      }
      return v5;
    }
    return 0;
  }
  if (byte_1E93CF65A)
  {
    if (byte_1E93CF659) {
      goto LABEL_7;
    }
  }
  else
  {
    char v38 = v2;
    CFStringRef v24 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    if (v24)
    {
      CFStringRef v25 = v24;
      CFTypeRef v26 = SecTaskCopyValueForEntitlement(v24, @"com.apple.CommCenter.fine-grained", 0);
      CFStringRef v27 = (void *)WTF::dynamic_cf_cast<__CFArray const*>(v26);
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)char v40 = 0u;
      long long v41 = 0u;
      uint64_t v28 = [v27 countByEnumeratingWithState:v40 objects:buf count:16];
      if (v28)
      {
        uint64_t v29 = *(void *)v41;
        while (2)
        {
          for (uint64_t i = 0; i != v28; ++i)
          {
            if (*(void *)v41 != v29) {
              objc_enumerationMutation(v27);
            }
            CFStringRef v31 = (void *)*((void *)v40[1] + i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v32 = v31;
            }
            else {
              uint64_t v32 = 0;
            }
            if (objc_msgSend(v32, "isEqualToString:", @"public-cellular-plan", v38))
            {
              int v33 = 1;
              goto LABEL_57;
            }
          }
          uint64_t v28 = [v27 countByEnumeratingWithState:v40 objects:buf count:16];
          if (v28) {
            continue;
          }
          break;
        }
      }
      int v33 = 0;
LABEL_57:
      if (v26) {
        CFRelease(v26);
      }
      CFRelease(v25);
    }
    else
    {
      int v33 = 0;
    }
    byte_1E93CF659 = v33;
    byte_1E93CF65A = 1;
    uint64_t v2 = v38;
    if (v33)
    {
LABEL_7:
      WTF::URL::host(v2);
      if ((v7 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
      if (v40[0] && *((_DWORD *)v40[0] + 1))
      {
        if (byte_1E93CF65B == 1)
        {
          uint64_t v11 = (void *)qword_1E93CF660;
        }
        else
        {
          gotLoadHelper_x8__OBJC_CLASS___CoreTelephonyClient(v10);
          id v37 = objc_alloc(*(Class *)(v36 + 2688));
          uint64_t v11 = (void *)[v37 initWithQueue:MEMORY[0x1E4F14428]];
          qword_1E93CF660 = (uint64_t)v11;
          byte_1E93CF65B = 1;
        }
        if (byte_1E93CF65C == 1)
        {
          uint64_t v12 = (WTF *)qword_1E93CF668;
        }
        else
        {
          uint64_t v12 = 0;
          qword_1E93CF668 = 0;
          byte_1E93CF65C = 1;
        }
        if (WTF::equal(v12, v40[0], v9))
        {
          uint64_t v5 = byte_1E93CF65D != 0;
          goto LABEL_37;
        }
        char v39 = 0;
        if (v40[0]) {
          CFStringRef v15 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          CFStringRef v15 = &stru_1EEA10550;
        }
        uint64_t v5 = objc_msgSend(v11, "isAutofilleSIMIdAllowedForDomain:error:", v15, &v39, v38);
        CFStringRef v16 = v39;
        char v17 = _MergedGlobals_33;
        _MergedGlobals_33 = 1;
        if (v39)
        {
          if ((v17 & 1) == 0)
          {
            CFStringRef v18 = qword_1EB358668;
            if (os_log_type_enabled((os_log_t)qword_1EB358668, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              int v45 = v16;
              _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "Failed to query cellular AutoFill status: %{public}@", buf, 0xCu);
            }
            goto LABEL_26;
          }
        }
        else if ((v17 & 1) == 0)
        {
          CFTypeRef v19 = qword_1EB358668;
          if (os_log_type_enabled((os_log_t)qword_1EB358668, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeRef v20 = @"NO";
            if (v5) {
              CFTypeRef v20 = @"YES";
            }
            *(_DWORD *)buf = 138543362;
            int v45 = v20;
            _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "Is cellular AutoFill allowed for current host? %{public}@", buf, 0xCu);
          }
        }
        CFStringRef v21 = v40[0];
        v40[0] = 0;
        int v22 = (WTF::StringImpl *)qword_1E93CF668;
        qword_1E93CF668 = (uint64_t)v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v8);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        byte_1E93CF65D = v5;
        goto LABEL_37;
      }
      char v13 = _MergedGlobals_33;
      _MergedGlobals_33 = 1;
      if ((v13 & 1) == 0)
      {
        CFTypeRef v14 = qword_1EB358668;
        uint64_t v5 = 0;
        if (!os_log_type_enabled((os_log_t)qword_1EB358668, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_37;
        }
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "Skipped cellular AutoFill status check (no registrable domain)", buf, 2u);
      }
LABEL_26:
      uint64_t v5 = 0;
LABEL_37:
      id v23 = v40[0];
      v40[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v8);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      return v5;
    }
  }
  char v34 = _MergedGlobals_33;
  _MergedGlobals_33 = 1;
  if (v34) {
    return 0;
  }
  uint64_t v4 = qword_1EB358668;
  uint64_t v5 = 0;
  if (os_log_type_enabled((os_log_t)qword_1EB358668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    BOOL v6 = "Skipped cellular AutoFill status check (app does not have cellular plan entitlement)";
    goto LABEL_65;
  }
  return v5;
}

void sub_198CD9684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(v11);
  _Unwind_Resume(a1);
}

id WebKit::DiagnosticLoggingClient::delegate@<X0>(id *this@<X0>, void *a2@<X8>)
{
  id result = objc_loadWeakRetained(this + 2);
  *a2 = result;
  return result;
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessage(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  if ((_BYTE)this[3])
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    id v8 = this[1];
    long long v9 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    double v10 = *(void *)a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v8 logDiagnosticMessage:v9 description:v10];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD97DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v12 = *a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v13 = a5 == 2 ? 2 : a5 == 1;
    [WeakRetained _webView:v10 logDiagnosticMessageWithResult:v11 description:v12 result:v13];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD98D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithValue(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  if (((_BYTE)this[3] & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    id v10 = this[1];
    uint64_t v11 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v12 = *(void *)a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v13 = *(void *)a5 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v10 logDiagnosticMessageWithValue:v11 description:v12 value:v13];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD99D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  if (((_BYTE)this[3] & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    id v8 = this[1];
    long long v9 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    id v10 = *(void *)a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v8 logDiagnosticMessageWithEnhancedPrivacy:v9 description:v10];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD9AA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithValueDictionary(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if ((*(unsigned char *)(a1 + 24) & 0x10) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v12 = *a4 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v10 logDiagnosticMessage:v11 description:v12 valueDictionary:*(void *)(*(void *)a5 + 8)];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD9B88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithDomain(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(unsigned char *)(a1 + 24) & 0x20) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v6 logDiagnosticMessageWithDomain:v7 domain:0];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CD9C38(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AutomationSessionClient::~AutomationSessionClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 1);

  WTF::fastFree((WTF *)this, v2);
}

void API::AutomationSessionClient::sessionIdentifier(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::DiagnosticLoggingClient::~DiagnosticLoggingClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  v4[0] = 0;
  char v7 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 32), (uint64_t)v4);
  if (v7) {
    BOOL v3 = v6 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CD9DD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13) {
    BOOL v16 = a11 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EE9CDD00[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_198CD9EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS9_26HTTPSNavigationFailureDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void WebKit::addLinkAndReplace(WebKit *this, NSMutableAttributedString *a2, NSString *a3, NSString *a4, NSURL *a5)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  long long v9 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:a3];
  v12[0] = _MergedGlobals_30();
  v13[0] = a4;
  v12[1] = off_1EB352FE8();
  v13[1] = &unk_1EEA52E10;
  objc_msgSend(v9, "addAttributes:range:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v13, v12, 2), 0, -[NSString length](a3, "length"));
  uint64_t v10 = objc_msgSend((id)-[WebKit string](this, "string"), "rangeOfString:", a2);
  -[WebKit replaceCharactersInRange:withAttributedString:](this, "replaceCharactersInRange:withAttributedString:", v10, v11, v9);
  if (v9) {
    CFRelease(v9);
  }
}

void sub_198CDA038(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t initNSLinkAttributeName(void)
{
  if (byte_1E93CF65E == 1)
  {
    uint64_t v0 = (void *)qword_1E93CF678;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke();
    qword_1E93CF678 = (uint64_t)v0;
    byte_1E93CF65E = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSLinkAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDA0C8);
  }
  uint64_t result = *v1;
  qword_1E93CF670 = result;
  _MergedGlobals_30 = NSLinkAttributeNameFunction;
  return result;
}

uint64_t NSLinkAttributeNameFunction(void)
{
  return qword_1E93CF670;
}

uint64_t ___ZL19UIFoundationLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
  if (!result)
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t initNSUnderlineStyleAttributeName(void)
{
  if (byte_1E93CF65E == 1)
  {
    uint64_t v0 = (void *)qword_1E93CF678;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke();
    qword_1E93CF678 = (uint64_t)v0;
    byte_1E93CF65E = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDA1B4);
  }
  uint64_t result = *v1;
  qword_1E93CF680 = result;
  off_1EB352FE8 = NSUnderlineStyleAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1E93CF9CE == 1)
  {
    uint64_t v0 = (void *)qword_1E93CFA20;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1E93CFA20 = (uint64_t)v0;
    byte_1E93CF9CE = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x199469F28);
  }
  uint64_t result = *v1;
  qword_1E93CFA30 = result;
  off_1EC2B2190 = NSUnderlineStyleAttributeNameFunction;
  return result;
}

uint64_t NSUnderlineStyleAttributeNameFunction(void)
{
  return qword_1E93CF680;
}

{
  return qword_1E93CFA30;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198CDA21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::BrowsingWarning::SafeBrowsingWarningData,WebKit::BrowsingWarning::HTTPSNavigationFailureData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS9_26HTTPSNavigationFailureDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CDD30;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CDD30;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if ((*(unsigned char *)(v1 + 32) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    [WeakRetained _processPool:*(void *)(v1 + 16) didRequestAutomationSessionWithIdentifier:a1[2] configuration:a1[3]];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CDA438(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestedDebuggablesToWakeUp(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v1 + 32) & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    [WeakRetained _processPoolDidRequestInspectorDebuggablesToWakeUp:*(void *)(v1 + 16)];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CDA4B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkManager::NetworkManager(WebKit::NetworkManager *this)
{
  qword_1EB359970 = 0;
  *(void *)&dword_1EB359978 = 0;
  WTF::ConcurrentWorkQueue::create();
  uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v1 = &unk_1EE9CDEA8;
  uint64_t result = WebCore::TimerBase::TimerBase((WebCore::TimerBase *)qword_1EB359988);
  qword_1EB359988[0] = (uint64_t)&unk_1EE9BA5F0;
  qword_1EB3599B8 = (uint64_t)v1;
  byte_1EB3599C0 = 0;
  qword_1EB3599C8 = 0;
  unk_1EB3599D0 = 0;
  dword_1EB3599E8 = 0;
  dword_1EB3599FC = 0;
  dword_1EB359A00 = 0;
  qword_1EB359A08 = 0;
  return result;
}

atomic_uchar *volatile **WebKit::NetworkRTCMonitor::onNetworksChanged(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::onNetworksChanged sent", buf, 0xCu);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, *(atomic_uchar *volatile **)(*(void *)(a1 + 8) + 64));
  long long v9 = v19;
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2704;
  *((void *)v10 + objc_destroyWeak(this + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  *(void *)buf = v10;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, *(unsigned int *)(a2 + 12));
  uint64_t v11 = *(unsigned int *)(a2 + 12);
  if (v11)
  {
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = 96 * v11;
    do
    {
      IPC::ArgumentCoder<WebKit::RTCNetwork,void>::encode(v10, v12);
      v12 += 96;
      v13 -= 96;
    }
    while (v13);
  }
  unsigned __int8 v20 = a3[4];
  IPC::Encoder::operator<<<BOOL>(v10, (char *)&v20);
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(v10, a3, v20);
  unsigned __int8 v20 = a4[4];
  IPC::Encoder::operator<<<BOOL>(v10, (char *)&v20);
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(v10, a4, v20);
  IPC::Connection::sendMessageImpl((uint64_t)v9, (uint64_t *)buf, 0, 0);
  uint64_t v15 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v17, v18);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
}

BOOL WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences()
{
  if (!qword_1EB359970 || !*(_DWORD *)(qword_1EB359970 - 12)) {
    return 1;
  }
  uint64_t v10 = &qword_1EB359970;
  uint64_t v11 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1EB359970);
  uint64_t v12 = v0;
  uint64_t v1 = qword_1EB359970;
  if (qword_1EB359970)
  {
    uint64_t v2 = *(unsigned int *)(qword_1EB359970 - 4);
    uint64_t v3 = qword_1EB359970 + 8 * v2;
    uint64_t v13 = v3;
    uint64_t v14 = v3;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
    uint64_t v3 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v5 = &qword_1EB359970;
  char v6 = (void *)v3;
  uint64_t v7 = v3;
  uint64_t v8 = v3;
  uint64_t v9 = v1 + 8 * v2;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v5);
  return v11 == v6;
}

unsigned int *WebKit::NetworkManager::updateNetworks(WebKit::NetworkManager *this)
{
  uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v1 = &unk_1EE9CDED0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)uint64_t v2 = 1;
  *(void *)(v2 + 8) = v1;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 60) = 0;
  uint64_t v3 = qword_1EB359980;
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9CDEF8;
  v4[1] = v2;
  uint64_t v13 = v4;
  MEMORY[0x19972E4D0](v3, &v13);
  uint64_t v5 = v13;
  uint64_t v13 = 0;
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  uint64_t v6 = qword_1EB359980;
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9CDF20;
  v7[1] = v2;
  uint64_t v13 = v7;
  MEMORY[0x19972E4D0](v6, &v13);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  uint64_t v9 = qword_1EB359980;
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9CDF48;
  v10[1] = v2;
  uint64_t v13 = v10;
  MEMORY[0x19972E4D0](v9, &v13);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  return WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref((unsigned int *)v2);
}

uint64_t WebKit::isEqual(WebKit *this, const WebKit::RTC::Network::IPAddress *a2, const WebKit::RTC::Network::IPAddress *a3)
{
  WebKit::RTC::Network::IPAddress::rtcAddress((int *)this, (uint64_t)v6);
  WebKit::RTC::Network::IPAddress::rtcAddress((int *)a2, (uint64_t)&v5);
  return rtc::IPAddress::operator==();
}

BOOL WebKit::sortNetworks(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  int v3 = *(_DWORD *)(a2 + 56);
  BOOL v4 = v2 < v3;
  if (v2 != v3) {
    return v4;
  }
  if (!*(_DWORD *)(a1 + 92))
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  uint64_t v6 = *(int **)(a1 + 80);
  WebKit::RTC::Network::IPAddress::rtcAddress(v6, (uint64_t)v20);
  int v7 = v6[5];
  int v17 = v21;
  long long v18 = v22;
  BOOL v16 = &unk_1EE9D05A0;
  int v19 = v7;
  int v9 = rtc::IPAddressPrecedence((rtc *)&v16, v8);
  if (!*(_DWORD *)(a2 + 92))
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x198CDAB3CLL);
  }
  int v10 = v9;
  uint64_t v11 = *(int **)(a2 + 80);
  WebKit::RTC::Network::IPAddress::rtcAddress(v11, (uint64_t)v20);
  int v12 = v11[5];
  int v17 = v21;
  long long v18 = v22;
  BOOL v16 = &unk_1EE9D05A0;
  int v19 = v12;
  int v14 = rtc::IPAddressPrecedence((rtc *)&v16, v13);
  BOOL v4 = v10 < v14;
  if (v10 == v14) {
    return WTF::codePointCompare() >> 31;
  }
  return v4;
}

unsigned int *WebKit::NetworkRTCMonitor::startUpdatingIfNeeded(WebKit::NetworkRTCMonitor *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v2 = off_1EB358988;
  BOOL v3 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    int v4 = *((unsigned __int8 *)this + 16);
    *(_DWORD *)buf = 134218240;
    CFStringRef v25 = this;
    __int16 v26 = 1024;
    int v27 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::startUpdatingIfNeeded m_isStarted=%d", buf, 0x12u);
  }
  if ((_MergedGlobals_79 & 1) == 0)
  {
    WebKit::NetworkManager::NetworkManager((WebKit::NetworkManager *)v3);
    _MergedGlobals_79 = 1;
  }
  if (byte_1EB3599C0) {
    WebKit::NetworkRTCMonitor::onNetworksChanged((uint64_t)this, (uint64_t)&qword_1EB3599C8, (int *)&xmmword_1EB3599D8, (int *)&xmmword_1EB3599EC);
  }
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences();
  if (++dword_1EB359978 > dword_1EB35997C)
  {
    uint64_t v7 = qword_1EB359970;
    if (qword_1EB359970)
    {
      int v8 = *(_DWORD *)(qword_1EB359970 - 4);
      if (!v8) {
        goto LABEL_28;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, v5);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = qword_1EB359970;
      if (v9)
      {
        *(_DWORD *)(qword_1EB359970 - 16) += v9;
        if (qword_1EB359970) {
          int v13 = *(_DWORD *)(qword_1EB359970 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(qword_1EB359970 - 1objc_destroyWeak(this + 2) = v13 - v9;
        uint64_t v7 = qword_1EB359970;
      }
      if (v7)
      {
        unsigned int v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EB359970);
          uint64_t v7 = qword_1EB359970;
          dword_1EB359978 = 0;
          if (!qword_1EB359970)
          {
            unsigned int v16 = 0;
            goto LABEL_32;
          }
          goto LABEL_31;
        }
LABEL_28:
        dword_1EB359978 = 0;
LABEL_31:
        unsigned int v16 = *(_DWORD *)(v7 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_33:
          dword_1EB35997C = 2 * v17;
          goto LABEL_34;
        }
LABEL_32:
        int v17 = v16;
        goto LABEL_33;
      }
    }
    unsigned int v16 = 0;
    dword_1EB359978 = 0;
    goto LABEL_32;
  }
LABEL_34:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  long long v18 = *(atomic_uint **)this;
  atomic_fetch_add(v18, 1u);
  atomic_fetch_add(v18, 1u);
  id v23 = (WTF *)v18;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1EB359970, &v23, (uint64_t)buf);
  uint64_t result = (unsigned int *)v23;
  id v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v19);
  }
  if (v18 && atomic_fetch_add(v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v18);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)v18, v19);
    if (!isEmptyIgnoringNullReferences) {
      return result;
    }
  }
  else if (!isEmptyIgnoringNullReferences)
  {
    return result;
  }
  int v21 = qword_1EB358820;
  BOOL v22 = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
  if (v22)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper startUpdating", buf, 2u);
  }
  WebKit::NetworkManager::updateNetworks((WebKit::NetworkManager *)v22);
  return (unsigned int *)WebCore::TimerBase::start();
}

void WebKit::NetworkRTCMonitor::stopUpdating(WebKit::NetworkRTCMonitor *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v2 = off_1EB358988;
  BOOL v3 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_DWORD *)int v19 = 134217984;
    *(void *)&v19[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::stopUpdating", v19, 0xCu);
  }
  if ((_MergedGlobals_79 & 1) == 0)
  {
    WebKit::NetworkManager::NetworkManager((WebKit::NetworkManager *)v3);
    _MergedGlobals_79 = 1;
  }
  if (++dword_1EB359978 > dword_1EB35997C)
  {
    uint64_t v5 = qword_1EB359970;
    if (qword_1EB359970)
    {
      int v6 = *(_DWORD *)(qword_1EB359970 - 4);
      if (!v6) {
        goto LABEL_26;
      }
      int v7 = 0;
      unsigned int v8 = v6 - 1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(v5 + 8 * v8);
        if ((unint64_t)(v10 + 1) >= 2 && !*(void *)(v10 + 8))
        {
          *(void *)(v5 + 8 * v8) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v10);
            WTF::fastFree((WTF *)v10, v4);
          }
          *(void *)(v5 + 8 * v8) = -1;
          ++v7;
        }
        --v8;
      }
      while (v9);
      uint64_t v5 = qword_1EB359970;
      if (v7)
      {
        *(_DWORD *)(qword_1EB359970 - 16) += v7;
        if (qword_1EB359970) {
          int v11 = *(_DWORD *)(qword_1EB359970 - 12);
        }
        else {
          int v11 = 0;
        }
        *(_DWORD *)(qword_1EB359970 - 1objc_destroyWeak(this + 2) = v11 - v7;
        uint64_t v5 = qword_1EB359970;
      }
      if (v5)
      {
        unsigned int v12 = *(_DWORD *)(v5 - 4);
        if (v12 >= 9 && 6 * *(_DWORD *)(v5 - 12) < v12)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EB359970);
          uint64_t v5 = qword_1EB359970;
          dword_1EB359978 = 0;
          if (!qword_1EB359970)
          {
            unsigned int v14 = 0;
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_26:
        dword_1EB359978 = 0;
LABEL_29:
        unsigned int v14 = *(_DWORD *)(v5 - 12);
        int v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
        {
LABEL_31:
          dword_1EB35997C = 2 * v15;
          goto LABEL_32;
        }
LABEL_30:
        int v15 = v14;
        goto LABEL_31;
      }
    }
    unsigned int v14 = 0;
    dword_1EB359978 = 0;
    goto LABEL_30;
  }
LABEL_32:
  if (*(void *)this && *(void *)(*(void *)this + 8))
  {
    *(void *)int v19 = *(void *)this;
    unsigned int v16 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EB359970, v19);
    if (qword_1EB359970)
    {
      uint64_t v17 = qword_1EB359970 + 8 * *(unsigned int *)(qword_1EB359970 - 4);
      if ((unsigned int **)v17 == v16) {
        goto LABEL_41;
      }
    }
    else
    {
      if (!v16) {
        goto LABEL_41;
      }
      uint64_t v17 = 0;
    }
    if ((unsigned int **)v17 != v16) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1EB359970, v16);
    }
  }
LABEL_41:
  if (WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences())
  {
    long long v18 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v19 = 0;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper stopUpdating", v19, 2u);
    }
    if ((qword_1EB3599A8 & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)qword_1EB359988);
    }
  }
}

WebKit::NetworkRTCProvider *WebKit::NetworkRTCProvider::NetworkRTCProvider(WebKit::NetworkRTCProvider *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  int v4 = (void *)WTF::FunctionDispatcher::FunctionDispatcher(this);
  v4[3] = 1;
  *int v4 = &unk_1EE9CDD80;
  v4[1] = &unk_1EE9CDDB0;
  void v4[2] = 0;
  v4[6] = 0;
  v4[5] = 0;
  v4[4] = v4 + 5;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 7);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + 7) = v5;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)this + 8, *((atomic_uchar *volatile **)a2 + 9));
  *((unsigned char *)this + 7objc_destroyWeak(this + 2) = 1;
  *((void *)this + 10) = 0;
  *((void *)this + 1objc_destroyWeak(this + 1) = this;
  atomic_fetch_add((atomic_uint *volatile)this + 7, 1u);
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 13) = 0;
  WebKit::NetworkProcess::sourceApplicationAuditToken(*((void *)a2 + 10), (uint64_t)this + 112);
  *((void *)this + 19) = 0;
  WTF::WorkQueue::create();
  uint64_t v6 = *((void *)a2 + 10);
  int v13 = (WTF *)*((void *)a2 + 11);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), &v13))
  {
    WTF::String::utf8();
    unsigned int v8 = v13;
    int v13 = 0;
    uint64_t v9 = (WTF *)*((void *)this + 19);
    *((void *)this + 19) = v8;
    if (v9)
    {
      int v10 = *(_DWORD *)v9 - 1;
      if (*(_DWORD *)v9 != 1)
      {
LABEL_8:
        *(_DWORD *)uint64_t v9 = v10;
        goto LABEL_9;
      }
      WTF::fastFree(v9, v7);
      uint64_t v9 = v13;
      int v13 = 0;
      if (v9)
      {
        int v10 = *(_DWORD *)v9 - 1;
        if (*(_DWORD *)v9 == 1)
        {
          WTF::fastFree(v9, v11);
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  WebCore::LibWebRTCProvider::setRTCLogging();
  return this;
}

void WebKit::NetworkRTCProvider::~NetworkRTCProvider(WebKit::NetworkRTCProvider *this, void *a2)
{
  *(void *)this = &unk_1EE9CDD80;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9CDDB0;
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  int v4 = (WTF *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1) {
      WTF::fastFree(v4, a2);
    }
    else {
      --*(_DWORD *)v4;
    }
  }
  uint64_t v5 = *((void *)this + 13);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v6)
  {
    int v7 = (unsigned int *)(v6 + 28);
    if (!atomic_load(v7))
    {
      __break(0xC471u);
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF);
  }
  uint64_t v9 = *((void *)this + 10);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    int v10 = (unsigned int *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  else
  {
    *((void *)this + 10) = 0;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 8);
  unsigned int v12 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*((WTF **)this + 5));
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v13);

  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

void non-virtual thunk to'WebKit::NetworkRTCProvider::~NetworkRTCProvider(WebKit::NetworkRTCProvider *this, void *a2)
{
}

{
  WebKit::NetworkRTCProvider::operator delete((WebKit::NetworkRTCProvider *)((char *)this - 8), a2);
}

double WebKit::NetworkRTCProvider::operator delete(WebKit::NetworkRTCProvider *a1, void *a2)
{
  WebKit::NetworkRTCProvider::~NetworkRTCProvider(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 28)))
  {
    *(void *)(v2 + 160) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 11objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::close(WebKit::NetworkRTCProvider *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v10 = 134217984;
    *(void *)&v10[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCProvider::close", v10, 0xCu);
  }
  uint64_t v3 = *(void *)(*((void *)this + 7) + 8);
  if (v3) {
    uint64_t v4 = v3 - 48;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v10[8] = 0;
  *(_WORD *)int v10 = 296;
  char v11 = 0;
  IPC::Connection::removeMessageReceiveQueue(v5, v10);
  int v7 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  WebKit::NetworkRTCMonitor::stopUpdating((WebKit::NetworkRTCProvider *)((char *)this + 80));
  atomic_fetch_add((atomic_uint *volatile)this + 6, 1u);
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9CDF98;
  v8[1] = this;
  uint64_t v8[2] = this;
  *(void *)int v10 = v8;
  (*(void (**)(void, uint8_t *))(**((void **)this + 20) + 32))(*((void *)this + 20), v10);
  uint64_t result = *(void *)v10;
  *(void *)int v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::NetworkRTCProvider::sendToSocket(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, WebKit::RTC::Network::SocketAddress *this, uint64_t a6)
{
  unsigned int v8 = *(void **)(a1 + 40);
  uint64_t v6 = (void *)(a1 + 40);
  int v7 = v8;
  if (v8)
  {
    uint64_t v12 = v6;
    do
    {
      unint64_t v13 = v7[4];
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        int v15 = v7;
      }
      else {
        int v15 = v7 + 1;
      }
      if (v14) {
        uint64_t v12 = v7;
      }
      int v7 = (void *)*v15;
    }
    while (*v15);
    if (v12 != v6 && v12[4] <= a2)
    {
      uint64_t v16 = v12[5];
      WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)v16 + 48))(v16, a3, a4, __p, a6);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t WebKit::NetworkRTCProvider::closeSocket(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t result = a1 + 40;
  uint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = v3;
      }
      else {
        unsigned int v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      uint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if (v5 != result && *(void *)(v5 + 32) <= a2) {
      return (*(uint64_t (**)(void))(**(void **)(v5 + 40) + 32))();
    }
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::setSocketOption(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void **)(a1 + 40);
  uint64_t result = a1 + 40;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = v5[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        int v10 = v5;
      }
      else {
        int v10 = v5 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v5;
      }
      uint64_t v5 = (void *)*v10;
    }
    while (*v10);
    if (v7 != result && *(void *)(v7 + 32) <= a2) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 40) + 40))(*(void *)(v7 + 40), a3, a4);
    }
  }
  return result;
}

void WebKit::NetworkRTCProvider::addSocket(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t **)(a1 + 40);
  unint64_t v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v6;
        unint64_t v9 = v6[4];
        if (v9 <= a2) {
          break;
        }
        unint64_t v6 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= a2) {
        break;
      }
      unint64_t v6 = v8[1];
      if (!v6)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t **)(a1 + 40);
LABEL_9:
    int v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x30);
    v10[4] = a2;
    uint64_t v11 = *a3;
    *a3 = 0;
    v10[5] = v11;
    *int v10 = 0;
    v10[1] = 0;
    void v10[2] = (uint64_t)v8;
    *uint64_t v7 = v10;
    uint64_t v12 = **(void **)(a1 + 32);
    if (v12)
    {
      *(void *)(a1 + 3objc_destroyWeak(this + 2) = v12;
      unint64_t v13 = *v7;
    }
    else
    {
      unint64_t v13 = v10;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v13);
    ++*(void *)(a1 + 48);
  }
  BOOL v14 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 48);
    int v18 = 134218496;
    uint64_t v19 = a1;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = v15;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCProvider::new socket %llu, total socket number is %lu", (uint8_t *)&v18, 0x20u);
  }
  if (*(void *)(a1 + 48) >= 0x101uLL)
  {
    unint64_t v16 = *(void *)(*(void *)(a1 + 32) + 32);
    uint64_t v17 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
    {
      int v18 = 134218240;
      uint64_t v19 = a1;
      __int16 v20 = 2048;
      unint64_t v21 = v16;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%p - NetworkRTCProvider::too many sockets, closing %llu", (uint8_t *)&v18, 0x16u);
    }
    WebKit::NetworkRTCProvider::closeSocket(a1, v16);
  }
}

uint64_t *WebKit::NetworkRTCProvider::takeSocket@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = result + 5;
  uint64_t v4 = (void *)result[5];
  if (!v4) {
    goto LABEL_12;
  }
  result += 4;
  uint64_t v5 = v3;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unint64_t v8 = v4;
    }
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v3 && v5[4] <= a2)
  {
    uint64_t v9 = v5[5];
    v5[5] = 0;
    *a3 = v9;
    return std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::erase((uint64_t **)result, v5);
  }
  else
  {
LABEL_12:
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

WTF::StringImpl *WebKit::NetworkRTCProvider::createResolver(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  if ((WTF::isMainRunLoop((WTF *)a1) & 1) == 0)
  {
    CFStringRef v31 = (WTF *)a1;
    uint64_t v32 = (WTF *)a1;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
    int v33 = (WTF *)a2;
    WTF::String::isolatedCopy();
    __int16 v20 = (WTF **)WTF::fastMalloc((WTF *)0x28);
    __CFString *v20 = (WTF *)&unk_1EE9CDFC0;
    v20[1] = v31;
    v20[2] = v32;
    v20[3] = v33;
    unint64_t v21 = v34;
    uint64_t v32 = 0;
    char v34 = 0;
    uint64_t v35 = v20;
    v20[4] = v21;
    WTF::callOnMainRunLoop();
    uint64_t v23 = v35;
    uint64_t v35 = 0;
    if (v23) {
      (*((void (**)(WTF **))*v23 + 1))(v23);
    }
    uint64_t result = v34;
    char v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    __int16 v26 = v32;
    uint64_t v32 = 0;
    if (v26) {
      return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)v26 + 6);
    }
    return result;
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    BOOL v9 = v8 == 0;
    if (!v8)
    {
      int v10 = 0;
LABEL_20:
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
      goto LABEL_21;
    }
    int v10 = (_DWORD *)(v8 - 48);
    ++*(_DWORD *)(v8 - 40);
    hasRegisteredName = (WebKit::NetworkManager *)WebKit::NetworkMDNSRegister::hasRegisteredName((WebKit::NetworkMDNSRegister *)(v8 + 120), a3, v6);
    if (hasRegisteredName)
    {
      CFStringRef v31 = 0;
      uint64_t v32 = 0;
      if ((_MergedGlobals_79 & 1) == 0)
      {
        WebKit::NetworkManager::NetworkManager(hasRegisteredName);
        _MergedGlobals_79 = 1;
      }
      if (dword_1EB3599E8)
      {
        uint64_t v12 = (WebKit::NetworkManager *)WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, 1uLL, (unint64_t)&xmmword_1EB3599D8);
        int v13 = HIDWORD(v32);
        BOOL v14 = (char *)v31 + 20 * HIDWORD(v32);
        int v15 = *((_DWORD *)v12 + 4);
        *(_OWORD *)BOOL v14 = *(_OWORD *)v12;
        *((_DWORD *)v14 + 4) = v15;
        HIDWORD(v3objc_destroyWeak(this + 2) = v13 + 1;
        if ((_MergedGlobals_79 & 1) == 0)
        {
          WebKit::NetworkManager::NetworkManager(v12);
          _MergedGlobals_79 = 1;
        }
      }
      if (dword_1EB3599FC)
      {
        int v16 = HIDWORD(v32);
        if (HIDWORD(v32) == v32)
        {
          unint64_t v17 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, HIDWORD(v32) + 1, (unint64_t)&xmmword_1EB3599EC);
          int v16 = HIDWORD(v32);
          int v18 = (char *)v31 + 20 * HIDWORD(v32);
          int v19 = *(_DWORD *)(v17 + 16);
          *(_OWORD *)int v18 = *(_OWORD *)v17;
          *((_DWORD *)v18 + 4) = v19;
        }
        else
        {
          int v27 = (char *)v31 + 20 * HIDWORD(v32);
          long long v28 = xmmword_1EB3599EC;
          *((_DWORD *)v27 + 4) = dword_1EB3599FC;
          *(_OWORD *)int v27 = v28;
        }
        HIDWORD(v3objc_destroyWeak(this + 2) = v16 + 1;
      }
      uint64_t v29 = *(void *)(v8 + 24);
      uint64_t v35 = &v31;
      IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(v29, (uint64_t *)&v35, a2);
      uint64_t result = v31;
      if (v31)
      {
        CFStringRef v31 = 0;
        LODWORD(v3objc_destroyWeak(this + 2) = 0;
        uint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v30);
      }
LABEL_32:
      if (v10[2] == 1) {
        return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      --v10[2];
      return result;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      goto LABEL_20;
    }
    BOOL v9 = 0;
  }
  else
  {
    int v10 = 0;
    BOOL v9 = 1;
  }
LABEL_21:
  CFStringRef v25 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(void *)CFStringRef v25 = &unk_1EE9CDFE8;
  *((void *)v25 + objc_destroyWeak(this + 1) = v7;
  *((void *)v25 + objc_destroyWeak(this + 2) = a2;
  CFStringRef v31 = v25;
  WebCore::resolveDNS();
  uint64_t result = v31;
  CFStringRef v31 = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  if (!v9) {
    goto LABEL_32;
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::stopResolver(atomic_uint *a1, uint64_t a2)
{
  if (WTF::isMainRunLoop((WTF *)a1))
  {
    return MEMORY[0x1F416DF20](a2);
  }
  else
  {
    atomic_fetch_add(a1 + 6, 1u);
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v4 = &unk_1EE9CE010;
    v4[1] = a1;
    void v4[2] = a1;
    v4[3] = a2;
    unint64_t v6 = v4;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v6;
    if (v6) {
      return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
    }
  }
  return result;
}

void *WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 104), 0), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (void *)(v4 + 16 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *uint64_t v11 = a2;
    CFTypeRef v30 = 0;
    int v15 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v15 = &unk_1EE9CE038;
    v15[1] = a1;
    v15[2] = &v30;
    uint64_t v15[3] = &v29;
    CFStringRef v31 = v15;
    WTF::callOnMainRunLoopAndWait();
    unint64_t v17 = v31;
    CFStringRef v31 = 0;
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
    int v18 = v30;
    CFTypeRef v30 = 0;
    int v19 = (WTF::StringImpl *)v11[1];
    v11[1] = v18;
    if (v19)
    {
      int v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 != 2) {
        goto LABEL_18;
      }
      WTF::StringImpl::destroy(v19, v16);
      int v19 = v30;
      CFTypeRef v30 = 0;
      if (!v19) {
        goto LABEL_19;
      }
      int v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v21);
      }
      else {
LABEL_18:
      }
        *(_DWORD *)int v19 = v20;
    }
LABEL_19:
    uint64_t v22 = *v5;
    if (*v5) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
    uint64_t v24 = *v5;
    if (*v5) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        return v11 + 1;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
      return v11 + 1;
    }
    uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, v11);
    return v11 + 1;
  }
  int v13 = 0;
  int v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1) {
      int v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    uint64_t v11 = (void *)(v4 + 16 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *int v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void WebKit::NetworkRTCProvider::createUDPSocket(uint64_t a1, unint64_t a2, WebKit::RTC::Network::SocketAddress *this, int a4, int a5, uint64_t a6, char a7, char a8, WebKit *a9)
{
  int v14 = *(void **)(a1 + 40);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = a1 + 40;
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= a2;
    if (v16 >= a2) {
      int v18 = v14;
    }
    else {
      int v18 = v14 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t)v14;
    }
    int v14 = (void *)*v18;
  }
  while (*v18);
  if (v15 != a1 + 40 && *(void *)(v15 + 32) <= a2)
  {
    int v23 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "NetworkRTCProvider::createUDPSocket duplicate identifier", (uint8_t *)__p, 2u);
    }
  }
  else
  {
LABEL_12:
    WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v25, *(atomic_uchar *volatile **)(a1 + 64));
    int v19 = (WTF::StringImpl *)*WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(a1, a6);
    if (v19) {
      *(_DWORD *)v19 += 2;
    }
    uint64_t v24 = v19;
    int v20 = (void *)WTF::fastMalloc((WTF *)0x20);
    WebKit::NetworkRTCUDPSocketCocoa::NetworkRTCUDPSocketCocoa(v20, a2, a1, (nw_listener_t)__p, (uint64_t *)&v25, (uint64_t *)&v24, a7, a8, a9);
    uint64_t v22 = v24;
    uint64_t v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v25);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v20;
    WebKit::NetworkRTCProvider::addSocket(a1, a2, (uint64_t *)__p);
    if (__p[0]) {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
  }
}

void WebKit::NetworkRTCProvider::createClientTCPSocket(uint64_t a1, atomic_uchar *volatile *a2, int a3, WebKit::RTC::Network::SocketAddress *this, int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, WebKit *a10)
{
  uint64_t v15 = *(void **)(a1 + 40);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v16 = a1 + 40;
  do
  {
    unint64_t v17 = v15[4];
    BOOL v18 = v17 >= (unint64_t)a2;
    if (v17 >= (unint64_t)a2) {
      int v19 = v15;
    }
    else {
      int v19 = v15 + 1;
    }
    if (v18) {
      uint64_t v16 = (uint64_t)v15;
    }
    uint64_t v15 = (void *)*v19;
  }
  while (*v19);
  if (v16 != a1 + 40 && *(void *)(v16 + 32) <= (unint64_t)a2)
  {
    int v25 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1985F2000, v25, OS_LOG_TYPE_ERROR, "NetworkRTCProvider::createClientTCPSocket duplicate identifier", (uint8_t *)__p, 2u);
    }
  }
  else
  {
LABEL_12:
    WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
    int v20 = WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(a1, a7);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, *(atomic_uchar *volatile **)(a1 + 64));
    WebKit::NetworkRTCTCPSocketCocoa::createClientTCPSocket((uint64_t)a2, a1, __p, a6, (uint64_t)v20, a8, a9, a10, &v27, (uint64_t *)&v29);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v27)
    {
      WebKit::NetworkRTCProvider::addSocket(a1, (unint64_t)a2, &v27);
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v29 = a2;
      uint64_t v22 = *(void *)(v21 + 8);
      if (v22) {
        uint64_t v23 = v22 - 48;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(v23 + 72);
      int v28 = 1;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v28;
      IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v24, (uint64_t)__p, 0, 0, 0);
    }
  }
}

void WebKit::NetworkRTCProvider::getInterfaceName(uint64_t a1, WTF::URL *a2, uint64_t a3, uint64_t a4, int a5, WebKit *a6, uint64_t *a7)
{
  if ((*((unsigned char *)a2 + 8) & 2) != 0)
  {
    uint64_t v16 = WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(a1, a3);
    WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(a1, a2, (uint64_t)v16, a4, a5, a6, a7);
  }
  else
  {
    unint64_t v17 = 0;
    uint64_t v8 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v8 + 16))(v8, &v17);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    unsigned int v10 = v17;
    unint64_t v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
}

void WebKit::NetworkTransportSession::~NetworkTransportSession(WebKit::NetworkTransportSession *this, void *a2)
{
  *(void *)this = &unk_1EE9CDDE8;
  *((void *)this + 3) = &unk_1EE9CDE30;
  uint64_t v3 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, (WTF *)a2);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, a2);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v8, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkTransportSession::~NetworkTransportSession(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::NetworkTransportSession::~NetworkTransportSession(WebKit::NetworkTransportSession *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkTransportSession::~NetworkTransportSession((WebKit::NetworkTransportSession *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::NetworkTransportSession::messageSenderConnection(WebKit::NetworkTransportSession *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 + 24);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'WebKit::NetworkTransportSession::messageSenderConnection(WebKit::NetworkTransportSession *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 + 24);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkTransportSession::messageSenderDestinationID(WebKit::NetworkTransportSession *this)
{
  return *((void *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::NetworkTransportSession::messageSenderDestinationID(WebKit::NetworkTransportSession *this)
{
  return *((void *)this + 1);
}

uint64_t WebKit::NetworkTransportSession::sendStreamSendBytes(uint64_t a1, uint64_t a2, void *a3, WTF *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v9 = (NSObject **)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 56), a2);
  if (v9) {
    WebKit::NetworkTransportSendStream::sendBytes(v9, a3, a4);
  }
  uint64_t v10 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::NetworkTransportSession::streamSendBytes(uint64_t a1, uint64_t a2, void *a3, WTF *this, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9) {
    goto LABEL_7;
  }
  unsigned int v10 = *(_DWORD *)(v9 - 8);
  unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
  uint64_t v15 = *(void *)(v9 + 16 * v14);
  if (v15 != a2)
  {
    int v16 = 1;
    while (v15)
    {
      uint64_t v14 = (v14 + v16) & v10;
      uint64_t v15 = *(void *)(v9 + 16 * v14);
      ++v16;
      if (v15 == a2) {
        goto LABEL_6;
      }
    }
LABEL_7:
    unint64_t v17 = (NSObject **)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 56), a2);
    if (!v17) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v17 = *(NSObject ***)(v9 + 16 * v14 + 8);
  if (!v17) {
    goto LABEL_7;
  }
LABEL_8:
  WebKit::NetworkTransportSendStream::sendBytes(v17, a3, this);
LABEL_9:
  uint64_t v18 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  int v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);

  return v19(v18);
}

void WebKit::NetworkTransportSession::destroyOutgoingUnidirectionalStream(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 56);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 56), &v7);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
}

uint64_t *WebKit::NetworkTransportSession::destroyBidirectionalStream(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 40), &v7);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkTransportSession::receiveDatagram(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = a1 + 24;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2849;
  *((void *)v7 + objc_destroyWeak(this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkTransportSession::streamReceiveBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[1] = a4;
  uint64_t v15 = a2;
  v14[0] = a3;
  v12[0] = &v15;
  v12[1] = v14;
  char v13 = a5;
  uint64_t v5 = a1 + 24;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2851;
  *((void *)v7 + objc_destroyWeak(this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v16 = v7;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,0ul,1ul,2ul>(v7, (uint64_t)v12);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v16, 0);
  uint64_t result = v16;
  int v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        uint64_t v5 = *(WTF **)(v4 + 88);
        if (v5)
        {
          *(void *)(v4 + 88) = 0;
          *(_DWORD *)(v4 + 96) = 0;
          WTF::fastFree(v5, a2);
        }
        uint64_t v6 = *(WTF **)(v4 + 24);
        if (v6)
        {
          *(void *)(v4 + 24) = 0;
          *(_DWORD *)(v4 + 3objc_destroyWeak(this + 2) = 0;
          WTF::fastFree(v6, a2);
        }
        uint64_t v7 = *(WTF **)(v4 + 8);
        if (v7)
        {
          *(void *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v7, a2);
        }
        uint64_t v8 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
      v4 += 104;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*,false>(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v10 = result;
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    uint64_t v11 = a2 - 96;
    unint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = v12;
        uint64_t v13 = a2 - v12;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 5);
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              uint64_t result = (*a3)(v11, v10);
              if (result)
              {
                uint64_t result = (uint64_t)std::swap[abi:sn180100]<WebKit::RTCNetwork>(v10, v11);
              }
              break;
            case 3uLL:
              uint64_t result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10, v10 + 96, v11, a3);
              break;
            case 4uLL:
              uint64_t result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10, v10 + 96, v10 + 192, v11, a3);
              break;
            case 5uLL:
              uint64_t result = (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10, v10 + 96, v10 + 192, v10 + 288, v11, a3);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 2303)
        {
          if (a5)
          {
            if (v10 != a2)
            {
              uint64_t v68 = (WTF **)(v10 + 96);
              if (v10 + 96 != a2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = v10;
                do
                {
                  CFStringRef v71 = v68;
                  uint64_t result = (*a3)((uint64_t)v68, v70);
                  if (result)
                  {
                    CFTypeRef v72 = *v71;
                    *CFStringRef v71 = 0;
                    v205 = v72;
                    uint64_t v73 = *(void *)(v70 + 104);
                    *(void *)(v70 + 104) = 0;
                    uint64_t v206 = v73;
                    uint64_t v74 = *(WTF **)(v70 + 112);
                    *(void *)(v70 + 11objc_destroyWeak(this + 2) = 0;
                    v207 = v74;
                    uint64_t v75 = *(void *)(v70 + 120);
                    *(void *)(v70 + 120) = 0;
                    uint64_t v208 = v75;
                    long long v76 = *(_OWORD *)(v70 + 144);
                    long long v209 = *(_OWORD *)(v70 + 128);
                    v210[0] = v76;
                    *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = *(_OWORD *)(v70 + 156);
                    uint64_t v77 = *(WTF **)(v70 + 176);
                    *(void *)(v70 + 176) = 0;
                    v211 = v77;
                    uint64_t v78 = *(void *)(v70 + 184);
                    *(void *)(v70 + 184) = 0;
                    uint64_t v79 = v69;
                    uint64_t v212 = v78;
                    while (1)
                    {
                      uint64_t v80 = v10 + v79;
                      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10 + v79 + 96, (_DWORD *)(v10 + v79));
                      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v80 + 112, (_DWORD *)(v80 + 16));
                      long long v81 = *(_OWORD *)(v10 + v79 + 48);
                      *(_OWORD *)(v80 + 128) = *(_OWORD *)(v80 + 32);
                      *(_OWORD *)(v80 + 144) = v81;
                      *(_OWORD *)(v80 + 156) = *(_OWORD *)(v80 + 60);
                      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v80 + 176, (_DWORD *)(v80 + 80));
                      if (!v79) {
                        break;
                      }
                      v79 -= 96;
                      if (((*a3)((uint64_t)&v205, v79 + v10) & 1) == 0)
                      {
                        uint64_t v83 = v10 + v79 + 96;
                        goto LABEL_110;
                      }
                    }
                    uint64_t v83 = v10;
LABEL_110:
                    uint64_t v84 = *(WTF **)v83;
                    if (*(void *)v83)
                    {
                      *(void *)uint64_t v83 = 0;
                      *(_DWORD *)(v83 + 8) = 0;
                      WTF::fastFree(v84, v82);
                    }
                    int v85 = v205;
                    v205 = 0;
                    *(void *)uint64_t v83 = v85;
                    LODWORD(v85) = v206;
                    LODWORD(v206) = 0;
                    *(_DWORD *)(v83 + 8) = v85;
                    LODWORD(v85) = HIDWORD(v206);
                    HIDWORD(v206) = 0;
                    *(_DWORD *)(v83 + 1objc_destroyWeak(this + 2) = v85;
                    uint64_t v86 = *(WTF **)(v80 + 16);
                    if (v86)
                    {
                      *(void *)(v80 + 16) = 0;
                      *(_DWORD *)(v83 + 24) = 0;
                      WTF::fastFree(v86, v82);
                    }
                    int v87 = v207;
                    v207 = 0;
                    *(void *)(v80 + 16) = v87;
                    LODWORD(v87) = v208;
                    LODWORD(v208) = 0;
                    *(_DWORD *)(v83 + 24) = v87;
                    LODWORD(v87) = HIDWORD(v208);
                    HIDWORD(v208) = 0;
                    *(_DWORD *)(v83 + 28) = v87;
                    long long v88 = v209;
                    long long v89 = v210[0];
                    *(_OWORD *)(v80 + 60) = *(_OWORD *)((char *)v210 + 12);
                    *(_OWORD *)(v80 + 3objc_destroyWeak(this + 2) = v88;
                    *(_OWORD *)(v80 + 48) = v89;
                    char v90 = *(WTF **)(v80 + 80);
                    if (v90)
                    {
                      *(void *)(v80 + 80) = 0;
                      *(_DWORD *)(v83 + 88) = 0;
                      WTF::fastFree(v90, v82);
                    }
                    int v91 = v211;
                    v211 = 0;
                    *(void *)(v80 + 80) = v91;
                    LODWORD(v9objc_destroyWeak(this + 1) = v212;
                    LODWORD(v21objc_destroyWeak(this + 2) = 0;
                    *(_DWORD *)(v83 + 88) = v91;
                    LODWORD(v9objc_destroyWeak(this + 1) = HIDWORD(v212);
                    HIDWORD(v21objc_destroyWeak(this + 2) = 0;
                    *(_DWORD *)(v83 + 9objc_destroyWeak(this + 2) = v91;
                    int v92 = v207;
                    if (v207)
                    {
                      v207 = 0;
                      LODWORD(v208) = 0;
                      WTF::fastFree(v92, v82);
                    }
                    uint64_t result = (uint64_t)v205;
                    if (v205)
                    {
                      v205 = 0;
                      LODWORD(v206) = 0;
                      uint64_t result = WTF::fastFree((WTF *)result, v82);
                    }
                  }
                  uint64_t v68 = v71 + 12;
                  v69 += 96;
                  uint64_t v70 = (uint64_t)v71;
                }
                while (v71 + 12 != (WTF **)a2);
              }
            }
          }
          else if (v10 != a2)
          {
            uint64_t v166 = (WTF **)(v10 + 96);
            if (v10 + 96 != a2)
            {
              unint64_t v167 = v10 - 96;
              uint64_t v168 = -2;
              uint64_t v169 = 1;
              unint64_t v170 = v10;
              do
              {
                uint64_t result = (*a3)((uint64_t)v166, v170);
                if (result)
                {
                  v171 = *v166;
                  *uint64_t v166 = 0;
                  v205 = v171;
                  uint64_t v172 = *(void *)(v170 + 104);
                  *(void *)(v170 + 104) = 0;
                  uint64_t v206 = v172;
                  v173 = *(WTF **)(v170 + 112);
                  *(void *)(v170 + 11objc_destroyWeak(this + 2) = 0;
                  v207 = v173;
                  uint64_t v174 = *(void *)(v170 + 120);
                  *(void *)(v170 + 120) = 0;
                  uint64_t v208 = v174;
                  long long v175 = *(_OWORD *)(v170 + 144);
                  long long v209 = *(_OWORD *)(v170 + 128);
                  v210[0] = v175;
                  *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = *(_OWORD *)(v170 + 156);
                  v176 = *(WTF **)(v170 + 176);
                  *(void *)(v170 + 176) = 0;
                  v211 = v176;
                  uint64_t v177 = *(void *)(v170 + 184);
                  *(void *)(v170 + 184) = 0;
                  uint64_t v178 = v168;
                  uint64_t v179 = v167;
                  uint64_t v212 = v177;
                  do
                  {
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v179 + 192, (_DWORD *)(v179 + 96));
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v179 + 208, (_DWORD *)(v179 + 112));
                    long long v180 = *(_OWORD *)(v179 + 144);
                    *(_OWORD *)(v179 + 224) = *(_OWORD *)(v179 + 128);
                    *(_OWORD *)(v179 + 240) = v180;
                    *(_OWORD *)(v179 + 25objc_destroyWeak(this + 2) = *(_OWORD *)(v179 + 156);
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v179 + 272, (_DWORD *)(v179 + 176));
                    BOOL v5 = __CFADD__(v178++, 1);
                    if (v5) {
                      goto LABEL_206;
                    }
                    uint64_t v181 = v179 - 96;
                    char v182 = (*a3)((uint64_t)&v205, v179);
                    v179 -= 96;
                  }
                  while ((v182 & 1) != 0);
                  v184 = *(WTF **)(v181 + 192);
                  if (v184)
                  {
                    *(void *)(v181 + 19objc_destroyWeak(this + 2) = 0;
                    *(_DWORD *)(v181 + 200) = 0;
                    WTF::fastFree(v184, v183);
                  }
                  v185 = v205;
                  v205 = 0;
                  *(void *)(v181 + 19objc_destroyWeak(this + 2) = v185;
                  LODWORD(v185) = v206;
                  LODWORD(v206) = 0;
                  *(_DWORD *)(v181 + 200) = v185;
                  LODWORD(v185) = HIDWORD(v206);
                  HIDWORD(v206) = 0;
                  *(_DWORD *)(v181 + 204) = v185;
                  v186 = *(WTF **)(v181 + 208);
                  if (v186)
                  {
                    *(void *)(v181 + 208) = 0;
                    *(_DWORD *)(v181 + 216) = 0;
                    WTF::fastFree(v186, v183);
                  }
                  v187 = v207;
                  v207 = 0;
                  *(void *)(v181 + 208) = v187;
                  LODWORD(v187) = v208;
                  LODWORD(v208) = 0;
                  *(_DWORD *)(v181 + 216) = v187;
                  LODWORD(v187) = HIDWORD(v208);
                  HIDWORD(v208) = 0;
                  *(_DWORD *)(v181 + 220) = v187;
                  long long v188 = v209;
                  long long v189 = v210[0];
                  *(_OWORD *)(v181 + 25objc_destroyWeak(this + 2) = *(_OWORD *)((char *)v210 + 12);
                  *(_OWORD *)(v181 + 224) = v188;
                  *(_OWORD *)(v181 + 240) = v189;
                  v190 = *(WTF **)(v181 + 272);
                  if (v190)
                  {
                    *(void *)(v181 + 27objc_destroyWeak(this + 2) = 0;
                    *(_DWORD *)(v181 + 280) = 0;
                    WTF::fastFree(v190, v183);
                    v190 = v207;
                  }
                  v191 = v211;
                  v211 = 0;
                  *(void *)(v181 + 27objc_destroyWeak(this + 2) = v191;
                  LODWORD(v19objc_destroyWeak(this + 1) = v212;
                  LODWORD(v21objc_destroyWeak(this + 2) = 0;
                  *(_DWORD *)(v181 + 280) = v191;
                  LODWORD(v19objc_destroyWeak(this + 1) = HIDWORD(v212);
                  HIDWORD(v21objc_destroyWeak(this + 2) = 0;
                  *(_DWORD *)(v181 + 284) = v191;
                  if (v190)
                  {
                    v207 = 0;
                    LODWORD(v208) = 0;
                    WTF::fastFree(v190, v183);
                  }
                  uint64_t result = (uint64_t)v205;
                  if (v205)
                  {
                    v205 = 0;
                    LODWORD(v206) = 0;
                    uint64_t result = WTF::fastFree((WTF *)result, v183);
                  }
                }
                unint64_t v170 = v10 + 96 * v169++;
                uint64_t v166 = (WTF **)(v170 + 96);
                v167 += 96;
                --v168;
              }
              while (v170 + 96 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            int64_t v204 = (v14 - 2) >> 1;
            int64_t v93 = v204;
            do
            {
              int64_t v94 = v93;
              if (v204 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                uint64_t v96 = v10 + 96 * v95;
                if (2 * v93 + 2 < (uint64_t)v14 && (*a3)(v10 + 96 * v95, v96 + 96))
                {
                  v96 += 96;
                  uint64_t v95 = 2 * v94 + 2;
                }
                uint64_t v97 = v10 + 96 * v94;
                uint64_t result = (*a3)(v96, v97);
                if ((result & 1) == 0)
                {
                  uint64_t v98 = *(WTF **)v97;
                  *(void *)uint64_t v97 = 0;
                  v205 = v98;
                  LODWORD(v98) = *(_DWORD *)(v97 + 8);
                  *(_DWORD *)(v97 + 8) = 0;
                  LODWORD(v206) = v98;
                  LODWORD(v98) = *(_DWORD *)(v97 + 12);
                  *(_DWORD *)(v97 + 1objc_destroyWeak(this + 2) = 0;
                  HIDWORD(v206) = v98;
                  int64_t v200 = v94;
                  unint64_t v99 = v10 + 96 * v94;
                  unint64_t v100 = *(WTF **)(v99 + 16);
                  *(void *)(v99 + 16) = 0;
                  v207 = v100;
                  LODWORD(v100) = *(_DWORD *)(v99 + 24);
                  *(_DWORD *)(v99 + 24) = 0;
                  LODWORD(v208) = v100;
                  LODWORD(v100) = *(_DWORD *)(v99 + 28);
                  *(_DWORD *)(v99 + 28) = 0;
                  HIDWORD(v208) = v100;
                  long long v101 = *(_OWORD *)(v99 + 32);
                  long long v102 = *(_OWORD *)(v99 + 48);
                  *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = *(_OWORD *)(v99 + 60);
                  long long v209 = v101;
                  v210[0] = v102;
                  uint64_t v103 = *(WTF **)(v99 + 80);
                  *(void *)(v99 + 80) = 0;
                  v211 = v103;
                  LODWORD(v103) = *(_DWORD *)(v99 + 88);
                  *(_DWORD *)(v99 + 88) = 0;
                  LODWORD(v21objc_destroyWeak(this + 2) = v103;
                  LODWORD(v103) = *(_DWORD *)(v99 + 92);
                  *(_DWORD *)(v99 + 9objc_destroyWeak(this + 2) = 0;
                  HIDWORD(v21objc_destroyWeak(this + 2) = v103;
                  do
                  {
                    uint64_t v104 = v96;
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v97, (_DWORD *)v96);
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v97 + 16, (_DWORD *)(v96 + 16));
                    long long v105 = *(_OWORD *)(v96 + 32);
                    long long v106 = *(_OWORD *)(v96 + 48);
                    *(_OWORD *)(v97 + 60) = *(_OWORD *)(v96 + 60);
                    *(_OWORD *)(v97 + 3objc_destroyWeak(this + 2) = v105;
                    *(_OWORD *)(v97 + 48) = v106;
                    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v97 + 80, (_DWORD *)(v96 + 80));
                    if (v204 < v95) {
                      break;
                    }
                    uint64_t v108 = (2 * v95) | 1;
                    uint64_t v96 = v10 + 96 * v108;
                    uint64_t v109 = 2 * v95 + 2;
                    if (v109 < (uint64_t)v14 && (*a3)(v10 + 96 * v108, v96 + 96))
                    {
                      v96 += 96;
                      uint64_t v108 = v109;
                    }
                    uint64_t v97 = v104;
                    uint64_t v95 = v108;
                  }
                  while (!(*a3)(v96, (uint64_t)&v205));
                  char v110 = *(WTF **)v104;
                  if (*(void *)v104)
                  {
                    *(void *)uint64_t v104 = 0;
                    *(_DWORD *)(v104 + 8) = 0;
                    WTF::fastFree(v110, v107);
                  }
                  uint64_t v111 = v205;
                  v205 = 0;
                  *(void *)uint64_t v104 = v111;
                  LODWORD(v11objc_destroyWeak(this + 1) = v206;
                  LODWORD(v206) = 0;
                  *(_DWORD *)(v104 + 8) = v111;
                  LODWORD(v11objc_destroyWeak(this + 1) = HIDWORD(v206);
                  HIDWORD(v206) = 0;
                  *(_DWORD *)(v104 + 1objc_destroyWeak(this + 2) = v111;
                  unsigned __int8 v112 = *(WTF **)(v104 + 16);
                  if (v112)
                  {
                    *(void *)(v104 + 16) = 0;
                    *(_DWORD *)(v104 + 24) = 0;
                    WTF::fastFree(v112, v107);
                  }
                  uint64_t v113 = v207;
                  v207 = 0;
                  *(void *)(v104 + 16) = v113;
                  LODWORD(v113) = v208;
                  LODWORD(v208) = 0;
                  *(_DWORD *)(v104 + 24) = v113;
                  LODWORD(v113) = HIDWORD(v208);
                  HIDWORD(v208) = 0;
                  *(_DWORD *)(v104 + 28) = v113;
                  long long v114 = v209;
                  long long v115 = v210[0];
                  *(_OWORD *)(v104 + 60) = *(_OWORD *)((char *)v210 + 12);
                  *(_OWORD *)(v104 + 3objc_destroyWeak(this + 2) = v114;
                  *(_OWORD *)(v104 + 48) = v115;
                  double v116 = *(WTF **)(v104 + 80);
                  if (v116)
                  {
                    *(void *)(v104 + 80) = 0;
                    *(_DWORD *)(v104 + 88) = 0;
                    WTF::fastFree(v116, v107);
                  }
                  uint64_t v117 = v211;
                  v211 = 0;
                  *(void *)(v104 + 80) = v117;
                  LODWORD(v117) = v212;
                  LODWORD(v21objc_destroyWeak(this + 2) = 0;
                  *(_DWORD *)(v104 + 88) = v117;
                  LODWORD(v117) = HIDWORD(v212);
                  HIDWORD(v21objc_destroyWeak(this + 2) = 0;
                  *(_DWORD *)(v104 + 9objc_destroyWeak(this + 2) = v117;
                  uint64_t v118 = v211;
                  if (v211)
                  {
                    v211 = 0;
                    LODWORD(v21objc_destroyWeak(this + 2) = 0;
                    WTF::fastFree(v118, v107);
                  }
                  uint64_t v119 = v207;
                  int64_t v94 = v200;
                  if (v207)
                  {
                    v207 = 0;
                    LODWORD(v208) = 0;
                    WTF::fastFree(v119, v107);
                  }
                  uint64_t result = (uint64_t)v205;
                  if (v205)
                  {
                    v205 = 0;
                    LODWORD(v206) = 0;
                    uint64_t result = WTF::fastFree((WTF *)result, v107);
                  }
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            int64_t v120 = v13 / 0x60uLL;
            while (v120 > 0)
            {
              if (v120 != 1)
              {
                unint64_t v121 = a2;
                uint64_t v122 = 0;
                v194 = *(WTF **)v10;
                *(void *)unint64_t v10 = 0;
                int v192 = *(_DWORD *)(v10 + 12);
                int v193 = *(_DWORD *)(v10 + 8);
                *(void *)(v10 + 8) = 0;
                uint64_t v197 = *(void *)(v10 + 16);
                *(void *)(v10 + 16) = 0;
                int v195 = *(_DWORD *)(v10 + 28);
                int v196 = *(_DWORD *)(v10 + 24);
                *(void *)(v10 + 24) = 0;
                long long v123 = *(_OWORD *)(v10 + 48);
                long long v124 = *(_OWORD *)(v10 + 60);
                long long v213 = *(_OWORD *)(v10 + 32);
                v214[0] = v123;
                *(_OWORD *)((char *)v214 + 1objc_destroyWeak(this + 2) = v124;
                uint64_t v203 = *(void *)(v10 + 80);
                *(void *)(v10 + 80) = 0;
                int v201 = *(_DWORD *)(v10 + 88);
                int v198 = *(_DWORD *)(v10 + 92);
                uint64_t v125 = (_OWORD *)v10;
                *(void *)(v10 + 88) = 0;
                do
                {
                  uint64_t v126 = (uint64_t)&v125[6 * v122 + 6];
                  uint64_t v127 = (2 * v122) | 1;
                  uint64_t v128 = 2 * v122 + 2;
                  if (v128 < v120 && (*a3)((uint64_t)&v125[6 * v122 + 6], (uint64_t)&v125[6 * v122 + 12]))
                  {
                    v126 += 96;
                    uint64_t v127 = v128;
                  }
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v125, (_DWORD *)v126);
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)(v125 + 1), (_DWORD *)(v126 + 16));
                  long long v129 = *(_OWORD *)(v126 + 32);
                  long long v130 = *(_OWORD *)(v126 + 48);
                  *(_OWORD *)((char *)v125 + 60) = *(_OWORD *)(v126 + 60);
                  v125[2] = v129;
                  v125[3] = v130;
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)(v125 + 5), (_DWORD *)(v126 + 80));
                  uint64_t v125 = (_OWORD *)v126;
                  uint64_t v122 = v127;
                }
                while (v127 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
                uint64_t v132 = (long long *)(v126 + 32);
                a2 = v121 - 96;
                if (v126 == v121 - 96)
                {
                  uint64_t v161 = *(WTF **)v126;
                  if (*(void *)v126)
                  {
                    *(void *)uint64_t v126 = 0;
                    *(_DWORD *)(v126 + 8) = 0;
                    WTF::fastFree(v161, v131);
                  }
                  *(void *)uint64_t v126 = v194;
                  *(_DWORD *)(v126 + 8) = v193;
                  *(_DWORD *)(v126 + 1objc_destroyWeak(this + 2) = v192;
                  char v162 = *(WTF **)(v126 + 16);
                  if (v162)
                  {
                    *(void *)(v126 + 16) = 0;
                    *(_DWORD *)(v126 + 24) = 0;
                    WTF::fastFree(v162, v131);
                  }
                  *(void *)(v126 + 16) = v197;
                  *(_DWORD *)(v126 + 24) = v196;
                  *(_DWORD *)(v126 + 28) = v195;
                  long long v163 = v213;
                  long long v164 = v214[0];
                  *(_OWORD *)(v126 + 60) = *(_OWORD *)((char *)v214 + 12);
                  *uint64_t v132 = v163;
                  *(_OWORD *)(v126 + 48) = v164;
                  uint64_t result = *(void *)(v126 + 80);
                  if (result)
                  {
                    *(void *)(v126 + 80) = 0;
                    *(_DWORD *)(v126 + 88) = 0;
                    uint64_t result = WTF::fastFree((WTF *)result, v131);
                  }
                  *(void *)(v126 + 80) = v203;
                  *(_DWORD *)(v126 + 88) = v201;
                  *(_DWORD *)(v126 + 9objc_destroyWeak(this + 2) = v198;
                }
                else
                {
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126, (_DWORD *)(v121 - 96));
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126 + 16, (_DWORD *)(v121 - 80));
                  long long v133 = *(_OWORD *)(v121 - 64);
                  long long v134 = *(_OWORD *)(v121 - 48);
                  *(_OWORD *)(v126 + 60) = *(_OWORD *)(v121 - 36);
                  *uint64_t v132 = v133;
                  *(_OWORD *)(v126 + 48) = v134;
                  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126 + 80, (_DWORD *)(v121 - 16));
                  CFStringRef v136 = *(WTF **)(v121 - 96);
                  if (v136)
                  {
                    *(void *)(v121 - 96) = 0;
                    *(_DWORD *)(v121 - 88) = 0;
                    WTF::fastFree(v136, v135);
                  }
                  *(void *)(v121 - 96) = v194;
                  *(_DWORD *)(v121 - 88) = v193;
                  *(_DWORD *)(v121 - 84) = v192;
                  CFTypeRef v137 = *(WTF **)(v121 - 80);
                  if (v137)
                  {
                    *(void *)(v121 - 80) = 0;
                    *(_DWORD *)(v121 - 7objc_destroyWeak(this + 2) = 0;
                    WTF::fastFree(v137, v135);
                  }
                  char v138 = (_OWORD *)(v121 - 64);
                  *(void *)(v121 - 80) = v197;
                  *(_DWORD *)(v121 - 7objc_destroyWeak(this + 2) = v196;
                  *(_DWORD *)(v121 - 68) = v195;
                  long long v139 = v213;
                  long long v140 = v214[0];
                  *(_OWORD *)((char *)v138 + 28) = *(_OWORD *)((char *)v214 + 12);
                  *char v138 = v139;
                  v138[1] = v140;
                  uint64_t result = *(void *)(v121 - 16);
                  if (result)
                  {
                    *(void *)(v121 - 16) = 0;
                    *(_DWORD *)(v121 - 8) = 0;
                    uint64_t result = WTF::fastFree((WTF *)result, v135);
                  }
                  *(void *)(v121 - 16) = v203;
                  *(_DWORD *)(v121 - 8) = v201;
                  *(_DWORD *)(v121 - 4) = v198;
                  uint64_t v141 = v126 + 96 - v10;
                  if (v141 >= 97)
                  {
                    unint64_t v142 = (v141 / 0x60uLL - 2) >> 1;
                    uint64_t v143 = v10 + 96 * v142;
                    uint64_t result = (*a3)(v143, v126);
                    if (result)
                    {
                      String v144 = *(WTF **)v126;
                      *(void *)uint64_t v126 = 0;
                      v205 = v144;
                      LODWORD(v144) = *(_DWORD *)(v126 + 8);
                      *(_DWORD *)(v126 + 8) = 0;
                      LODWORD(v206) = v144;
                      LODWORD(v144) = *(_DWORD *)(v126 + 12);
                      *(_DWORD *)(v126 + 1objc_destroyWeak(this + 2) = 0;
                      HIDWORD(v206) = v144;
                      v145 = *(WTF **)(v126 + 16);
                      *(void *)(v126 + 16) = 0;
                      v207 = v145;
                      LODWORD(v145) = *(_DWORD *)(v126 + 24);
                      *(_DWORD *)(v126 + 24) = 0;
                      LODWORD(v208) = v145;
                      LODWORD(v145) = *(_DWORD *)(v126 + 28);
                      *(_DWORD *)(v126 + 28) = 0;
                      HIDWORD(v208) = v145;
                      long long v146 = *v132;
                      long long v147 = *(_OWORD *)(v126 + 48);
                      *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = *(_OWORD *)(v126 + 60);
                      long long v209 = v146;
                      v210[0] = v147;
                      long long v148 = *(WTF **)(v126 + 80);
                      *(void *)(v126 + 80) = 0;
                      v211 = v148;
                      LODWORD(v148) = *(_DWORD *)(v126 + 88);
                      *(_DWORD *)(v126 + 88) = 0;
                      LODWORD(v21objc_destroyWeak(this + 2) = v148;
                      LODWORD(v148) = *(_DWORD *)(v126 + 92);
                      *(_DWORD *)(v126 + 9objc_destroyWeak(this + 2) = 0;
                      HIDWORD(v21objc_destroyWeak(this + 2) = v148;
                      do
                      {
                        uint64_t v149 = v143;
                        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126, (_DWORD *)v143);
                        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126 + 16, (_DWORD *)(v143 + 16));
                        long long v150 = *(_OWORD *)(v143 + 32);
                        long long v151 = *(_OWORD *)(v143 + 48);
                        *(_OWORD *)(v126 + 60) = *(_OWORD *)(v143 + 60);
                        *(_OWORD *)(v126 + 3objc_destroyWeak(this + 2) = v150;
                        *(_OWORD *)(v126 + 48) = v151;
                        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v126 + 80, (_DWORD *)(v143 + 80));
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        uint64_t v143 = v10 + 96 * v142;
                        uint64_t v126 = v149;
                      }
                      while (((*a3)(v143, (uint64_t)&v205) & 1) != 0);
                      int v153 = *(WTF **)v149;
                      if (*(void *)v149)
                      {
                        *(void *)uint64_t v149 = 0;
                        *(_DWORD *)(v149 + 8) = 0;
                        WTF::fastFree(v153, v152);
                      }
                      CFTypeRef v154 = v205;
                      v205 = 0;
                      *(void *)uint64_t v149 = v154;
                      LODWORD(v154) = v206;
                      LODWORD(v206) = 0;
                      *(_DWORD *)(v149 + 8) = v154;
                      LODWORD(v154) = HIDWORD(v206);
                      HIDWORD(v206) = 0;
                      *(_DWORD *)(v149 + 1objc_destroyWeak(this + 2) = v154;
                      int v155 = *(WTF **)(v149 + 16);
                      if (v155)
                      {
                        *(void *)(v149 + 16) = 0;
                        *(_DWORD *)(v149 + 24) = 0;
                        WTF::fastFree(v155, v152);
                      }
                      v156 = v207;
                      v207 = 0;
                      *(void *)(v149 + 16) = v156;
                      LODWORD(v156) = v208;
                      LODWORD(v208) = 0;
                      *(_DWORD *)(v149 + 24) = v156;
                      LODWORD(v156) = HIDWORD(v208);
                      HIDWORD(v208) = 0;
                      *(_DWORD *)(v149 + 28) = v156;
                      long long v157 = v209;
                      long long v158 = v210[0];
                      *(_OWORD *)(v149 + 60) = *(_OWORD *)((char *)v210 + 12);
                      *(_OWORD *)(v149 + 3objc_destroyWeak(this + 2) = v157;
                      *(_OWORD *)(v149 + 48) = v158;
                      uint64_t v159 = *(WTF **)(v149 + 80);
                      if (v159)
                      {
                        *(void *)(v149 + 80) = 0;
                        *(_DWORD *)(v149 + 88) = 0;
                        WTF::fastFree(v159, v152);
                        uint64_t v159 = v207;
                      }
                      unsigned __int8 v160 = v211;
                      v211 = 0;
                      *(void *)(v149 + 80) = v160;
                      LODWORD(v160) = v212;
                      LODWORD(v21objc_destroyWeak(this + 2) = 0;
                      *(_DWORD *)(v149 + 88) = v160;
                      LODWORD(v160) = HIDWORD(v212);
                      HIDWORD(v21objc_destroyWeak(this + 2) = 0;
                      *(_DWORD *)(v149 + 9objc_destroyWeak(this + 2) = v160;
                      if (v159)
                      {
                        v207 = 0;
                        LODWORD(v208) = 0;
                        WTF::fastFree(v159, v152);
                      }
                      uint64_t result = (uint64_t)v205;
                      if (v205)
                      {
                        v205 = 0;
                        LODWORD(v206) = 0;
                        uint64_t result = WTF::fastFree((WTF *)result, v152);
                      }
                    }
                  }
                }
                if ((unint64_t)v120-- > 2) {
                  continue;
                }
              }
              return result;
            }
LABEL_206:
            __break(1u);
          }
          return result;
        }
        if ((unint64_t)v13 > 0x3000)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10, v10 + 96 * (v14 >> 1), v11, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10 + 96, v10 + 96 * (v14 >> 1) - 96, a2 - 192, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10 + 192, v10 + 96 + 96 * (v14 >> 1), a2 - 288, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10 + 96 * (v14 >> 1) - 96, v10 + 96 * (v14 >> 1), v10 + 96 + 96 * (v14 >> 1), a3);
          std::swap[abi:sn180100]<WebKit::RTCNetwork>(v10, v10 + 96 * (v14 >> 1));
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10 + 96 * (v14 >> 1), v10, v11, a3);
        }
        --a4;
        if (a5 & 1) != 0 || ((*a3)(v10 - 96, v10)) {
          break;
        }
        BOOL v44 = *(WTF **)v10;
        *(void *)unint64_t v10 = 0;
        v205 = v44;
        uint64_t v45 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = 0;
        uint64_t v206 = v45;
        uint64_t v46 = *(WTF **)(v10 + 16);
        *(void *)(v10 + 16) = 0;
        v207 = v46;
        uint64_t v47 = *(void *)(v10 + 24);
        *(void *)(v10 + 24) = 0;
        uint64_t v208 = v47;
        long long v48 = *(_OWORD *)(v10 + 60);
        long long v49 = *(_OWORD *)(v10 + 48);
        long long v209 = *(_OWORD *)(v10 + 32);
        v210[0] = v49;
        *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = v48;
        unsigned int v50 = *(WTF **)(v10 + 80);
        *(void *)(v10 + 80) = 0;
        v211 = v50;
        *(void *)&long long v48 = *(void *)(v10 + 88);
        *(void *)(v10 + 88) = 0;
        uint64_t v212 = v48;
        if ((*a3)((uint64_t)&v205, v11))
        {
          unint64_t v12 = v10;
          while (1)
          {
            v12 += 96;
            if (v12 == a2) {
              goto LABEL_206;
            }
            if ((*a3)((uint64_t)&v205, v12)) {
              goto LABEL_58;
            }
          }
        }
        unint64_t v52 = v10 + 96;
        do
        {
          unint64_t v12 = v52;
          if (v52 >= a2) {
            break;
          }
          int v53 = (*a3)((uint64_t)&v205, v52);
          unint64_t v52 = v12 + 96;
        }
        while (!v53);
LABEL_58:
        unint64_t v54 = a2;
        if (v12 < a2)
        {
          unint64_t v54 = a2;
          while (v54 != v10)
          {
            v54 -= 96;
            if (((*a3)((uint64_t)&v205, v54) & 1) == 0) {
              goto LABEL_68;
            }
          }
          goto LABEL_206;
        }
LABEL_68:
        if (v12 < v54)
        {
          std::swap[abi:sn180100]<WebKit::RTCNetwork>(v12, v54);
          do
          {
            v12 += 96;
            if (v12 == a2) {
              goto LABEL_206;
            }
          }
          while (!(*a3)((uint64_t)&v205, v12));
          while (v54 != v10)
          {
            v54 -= 96;
            if (((*a3)((uint64_t)&v205, v54) & 1) == 0) {
              goto LABEL_68;
            }
          }
          goto LABEL_206;
        }
        unint64_t v55 = (WTF **)(v12 - 96);
        BOOL v5 = v12 - 96 >= v10;
        BOOL v6 = v12 - 96 == v10;
        if (v12 - 96 != v10)
        {
          WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10, (_DWORD *)(v12 - 96));
          WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10 + 16, (_DWORD *)(v12 - 80));
          long long v56 = *(_OWORD *)(v12 - 64);
          long long v57 = *(_OWORD *)(v12 - 48);
          *(_OWORD *)(v10 + 60) = *(_OWORD *)(v12 - 36);
          *(_OWORD *)(v10 + 3objc_destroyWeak(this + 2) = v56;
          *(_OWORD *)(v10 + 48) = v57;
          WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10 + 80, (_DWORD *)(v12 - 16));
        }
        uint64_t v58 = *v55;
        if (*v55)
        {
          *(void *)(v12 - 96) = 0;
          *(_DWORD *)(v12 - 88) = 0;
          WTF::fastFree(v58, v51);
        }
        unsigned int v59 = v205;
        v205 = 0;
        *(void *)(v12 - 96) = v59;
        LODWORD(v59) = v206;
        LODWORD(v206) = 0;
        *(_DWORD *)(v12 - 88) = v59;
        LODWORD(v59) = HIDWORD(v206);
        HIDWORD(v206) = 0;
        *(_DWORD *)(v12 - 84) = v59;
        uint64_t v60 = *(WTF **)(v12 - 80);
        if (v60)
        {
          *(void *)(v12 - 80) = 0;
          *(_DWORD *)(v12 - 7objc_destroyWeak(this + 2) = 0;
          WTF::fastFree(v60, v51);
        }
        uint64_t v61 = v207;
        v207 = 0;
        *(void *)(v12 - 80) = v61;
        LODWORD(v6objc_destroyWeak(this + 1) = v208;
        LODWORD(v208) = 0;
        *(_DWORD *)(v12 - 7objc_destroyWeak(this + 2) = v61;
        LODWORD(v6objc_destroyWeak(this + 1) = HIDWORD(v208);
        HIDWORD(v208) = 0;
        *(_DWORD *)(v12 - 68) = v61;
        long long v62 = v209;
        long long v63 = v210[0];
        *(_OWORD *)(v12 - 36) = *(_OWORD *)((char *)v210 + 12);
        *(_OWORD *)(v12 - 64) = v62;
        *(_OWORD *)(v12 - 48) = v63;
        int v64 = *(WTF **)(v12 - 16);
        if (v64)
        {
          *(void *)(v12 - 16) = 0;
          *(_DWORD *)(v12 - 8) = 0;
          WTF::fastFree(v64, v51);
        }
        uint64_t v65 = v211;
        v211 = 0;
        *(void *)(v12 - 16) = v65;
        LODWORD(v65) = v212;
        LODWORD(v21objc_destroyWeak(this + 2) = 0;
        *(_DWORD *)(v12 - 8) = v65;
        LODWORD(v65) = HIDWORD(v212);
        HIDWORD(v21objc_destroyWeak(this + 2) = 0;
        *(_DWORD *)(v12 - 4) = v65;
        uint64_t v66 = v211;
        if (v211)
        {
          v211 = 0;
          LODWORD(v21objc_destroyWeak(this + 2) = 0;
          WTF::fastFree(v66, v51);
        }
        uint64_t v67 = v207;
        if (v207)
        {
          v207 = 0;
          LODWORD(v208) = 0;
          WTF::fastFree(v67, v51);
        }
        uint64_t result = (uint64_t)v205;
        if (v205)
        {
          v205 = 0;
          LODWORD(v206) = 0;
          uint64_t result = WTF::fastFree((WTF *)result, v51);
        }
LABEL_49:
        a5 = 0;
      }
      uint64_t v15 = 0;
      int v16 = *(WTF **)v10;
      *(void *)unint64_t v10 = 0;
      v205 = v16;
      uint64_t v17 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = 0;
      uint64_t v206 = v17;
      uint64_t v18 = *(WTF **)(v10 + 16);
      *(void *)(v10 + 16) = 0;
      v207 = v18;
      uint64_t v19 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      uint64_t v208 = v19;
      long long v20 = *(_OWORD *)(v10 + 60);
      long long v22 = *(_OWORD *)(v10 + 32);
      long long v21 = *(_OWORD *)(v10 + 48);
      uint64_t v23 = *(WTF **)(v10 + 80);
      *(void *)(v10 + 80) = 0;
      v211 = v23;
      long long v209 = v22;
      v210[0] = v21;
      *(_OWORD *)((char *)v210 + 1objc_destroyWeak(this + 2) = v20;
      *(void *)&long long v20 = *(void *)(v10 + 88);
      *(void *)(v10 + 88) = 0;
      uint64_t v212 = v20;
      do
      {
        uint64_t v24 = v10 + v15 + 96;
        if (v24 == a2) {
          goto LABEL_206;
        }
        v15 += 96;
      }
      while (((*a3)(v24, (uint64_t)&v205) & 1) != 0);
      uint64_t v202 = a4;
      unint64_t v26 = v10 + v15;
      unint64_t v27 = a2;
      if (v15 != 96)
      {
        while (v27 != v10)
        {
          v27 -= 96;
          if ((*a3)(v27, (uint64_t)&v205)) {
            goto LABEL_22;
          }
        }
        goto LABEL_206;
      }
      unint64_t v27 = a2;
      do
      {
        if (v26 >= v27) {
          break;
        }
        v27 -= 96;
      }
      while (((*a3)(v27, (uint64_t)&v205) & 1) == 0);
LABEL_22:
      unint64_t v12 = v10 + v15;
      if (v26 < v27)
      {
        unint64_t v28 = v27;
        do
        {
          std::swap[abi:sn180100]<WebKit::RTCNetwork>(v12, v28);
          do
          {
            v12 += 96;
            if (v12 == a2) {
              goto LABEL_206;
            }
          }
          while (((*a3)(v12, (uint64_t)&v205) & 1) != 0);
          do
          {
            if (v28 == v10) {
              goto LABEL_206;
            }
            v28 -= 96;
          }
          while (!(*a3)(v28, (uint64_t)&v205));
        }
        while (v12 < v28);
      }
      uint64_t v29 = (WTF **)(v12 - 96);
      if (v12 - 96 != v10)
      {
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10, (_DWORD *)(v12 - 96));
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10 + 16, (_DWORD *)(v12 - 80));
        long long v30 = *(_OWORD *)(v12 - 64);
        long long v31 = *(_OWORD *)(v12 - 48);
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v12 - 36);
        *(_OWORD *)(v10 + 3objc_destroyWeak(this + 2) = v30;
        *(_OWORD *)(v10 + 48) = v31;
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v10 + 80, (_DWORD *)(v12 - 16));
      }
      uint64_t v32 = *v29;
      if (*v29)
      {
        *(void *)(v12 - 96) = 0;
        *(_DWORD *)(v12 - 88) = 0;
        WTF::fastFree(v32, v25);
      }
      int v33 = v205;
      v205 = 0;
      *(void *)(v12 - 96) = v33;
      LODWORD(v33) = v206;
      LODWORD(v206) = 0;
      *(_DWORD *)(v12 - 88) = v33;
      LODWORD(v33) = HIDWORD(v206);
      HIDWORD(v206) = 0;
      *(_DWORD *)(v12 - 84) = v33;
      char v34 = *(WTF **)(v12 - 80);
      uint64_t v11 = a2 - 96;
      if (v34)
      {
        *(void *)(v12 - 80) = 0;
        *(_DWORD *)(v12 - 7objc_destroyWeak(this + 2) = 0;
        WTF::fastFree(v34, v25);
      }
      uint64_t v35 = v207;
      v207 = 0;
      *(void *)(v12 - 80) = v35;
      LODWORD(v35) = v208;
      LODWORD(v208) = 0;
      *(_DWORD *)(v12 - 7objc_destroyWeak(this + 2) = v35;
      LODWORD(v35) = HIDWORD(v208);
      HIDWORD(v208) = 0;
      *(_DWORD *)(v12 - 68) = v35;
      long long v36 = v209;
      long long v37 = v210[0];
      *(_OWORD *)(v12 - 36) = *(_OWORD *)((char *)v210 + 12);
      *(_OWORD *)(v12 - 64) = v36;
      *(_OWORD *)(v12 - 48) = v37;
      char v38 = *(WTF **)(v12 - 16);
      if (v38)
      {
        *(void *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v38, v25);
      }
      char v39 = v211;
      v211 = 0;
      *(void *)(v12 - 16) = v39;
      LODWORD(v39) = v212;
      LODWORD(v21objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v12 - 8) = v39;
      LODWORD(v39) = HIDWORD(v212);
      HIDWORD(v21objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v12 - 4) = v39;
      char v40 = v211;
      if (v211)
      {
        v211 = 0;
        LODWORD(v21objc_destroyWeak(this + 2) = 0;
        WTF::fastFree(v40, v25);
      }
      long long v41 = v207;
      if (v207)
      {
        v207 = 0;
        LODWORD(v208) = 0;
        WTF::fastFree(v41, v25);
      }
      long long v42 = v205;
      if (v205)
      {
        v205 = 0;
        LODWORD(v206) = 0;
        WTF::fastFree(v42, v25);
      }
      BOOL v5 = v26 >= v27;
      a4 = v202;
      if (!v5)
      {
LABEL_48:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*,false>(v10, v12 - 96, a3, v202, a5 & 1);
        goto LABEL_49;
      }
      BOOL v43 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v10, v12 - 96, a3);
      uint64_t result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v43) {
        goto LABEL_48;
      }
    }
    a2 = v12 - 96;
    if (!v43) {
      continue;
    }
    return result;
  }
}

WTF *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (WTF *)(*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = a1;
    }
    else
    {
      std::swap[abi:sn180100]<WebKit::RTCNetwork>(a1, a2);
      uint64_t result = (WTF *)(*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = a2;
    }
    uint64_t v11 = a3;
  }
  else
  {
    if (!result) {
      return result;
    }
    std::swap[abi:sn180100]<WebKit::RTCNetwork>(a2, a3);
    uint64_t result = (WTF *)(*a4)(a2, a1);
    if (!result) {
      return result;
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
  }

  return std::swap[abi:sn180100]<WebKit::RTCNetwork>(v10, v11);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)(a2 - 96, a1)) {
        std::swap[abi:sn180100]<WebKit::RTCNetwork>(a1, a2 - 96);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a1 + 96, a2 - 96, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a1 + 96, a1 + 192, a2 - 96, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 192;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a1 + 96, a1 + 192, a3);
      uint64_t v9 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, v8))
    {
      unint64_t v12 = *(WTF **)v9;
      *(void *)uint64_t v9 = 0;
      long long v36 = v12;
      uint64_t v13 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      uint64_t v37 = v13;
      unint64_t v14 = *(WTF **)(v9 + 16);
      *(void *)(v9 + 16) = 0;
      char v38 = v14;
      uint64_t v15 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = 0;
      uint64_t v39 = v15;
      long long v16 = *(_OWORD *)(v9 + 48);
      long long v40 = *(_OWORD *)(v9 + 32);
      v41[0] = v16;
      *(_OWORD *)((char *)v41 + 1objc_destroyWeak(this + 2) = *(_OWORD *)(v9 + 60);
      uint64_t v17 = *(void *)(v9 + 80);
      *(void *)(v9 + 80) = 0;
      uint64_t v42 = v17;
      uint64_t v18 = *(void *)(v9 + 88);
      *(void *)(v9 + 88) = 0;
      uint64_t v19 = v10;
      uint64_t v43 = v18;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + v19 + 288, (_DWORD *)(a1 + v19 + 192));
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v20 + 304, (_DWORD *)(v20 + 208));
        long long v21 = *(_OWORD *)(a1 + v19 + 240);
        *(_OWORD *)(v20 + 320) = *(_OWORD *)(v20 + 224);
        *(_OWORD *)(v20 + 336) = v21;
        *(_OWORD *)(v20 + 348) = *(_OWORD *)(v20 + 252);
        WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v20 + 368, (_DWORD *)(v20 + 272));
        if (v19 == -192) {
          break;
        }
        v19 -= 96;
        if (((*a3)((uint64_t)&v36, v20 + 96) & 1) == 0)
        {
          uint64_t v23 = a1 + v19 + 288;
          goto LABEL_12;
        }
      }
      uint64_t v23 = a1;
LABEL_12:
      uint64_t v24 = *(WTF **)v23;
      if (*(void *)v23)
      {
        *(void *)uint64_t v23 = 0;
        *(_DWORD *)(v23 + 8) = 0;
        WTF::fastFree(v24, v22);
      }
      *(void *)uint64_t v23 = v36;
      int v25 = v37;
      int v26 = HIDWORD(v37);
      long long v36 = 0;
      uint64_t v37 = 0;
      *(_DWORD *)(v23 + 8) = v25;
      *(_DWORD *)(v23 + 1objc_destroyWeak(this + 2) = v26;
      unint64_t v27 = *(WTF **)(v20 + 208);
      if (v27)
      {
        *(void *)(v20 + 208) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        WTF::fastFree(v27, v22);
      }
      *(void *)(v20 + 208) = v38;
      int v28 = v39;
      int v29 = HIDWORD(v39);
      char v38 = 0;
      uint64_t v39 = 0;
      *(_DWORD *)(v23 + 24) = v28;
      *(_DWORD *)(v23 + 28) = v29;
      *(_OWORD *)(v20 + 25objc_destroyWeak(this + 2) = *(_OWORD *)((char *)v41 + 12);
      long long v30 = v41[0];
      *(_OWORD *)(v20 + 224) = v40;
      *(_OWORD *)(v20 + 240) = v30;
      long long v31 = *(WTF **)(v20 + 272);
      if (v31)
      {
        *(void *)(v20 + 27objc_destroyWeak(this + 2) = 0;
        *(_DWORD *)(v23 + 88) = 0;
        WTF::fastFree(v31, v22);
      }
      *(void *)(v20 + 27objc_destroyWeak(this + 2) = v42;
      int v32 = v43;
      int v33 = HIDWORD(v43);
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      *(_DWORD *)(v23 + 88) = v32;
      *(_DWORD *)(v23 + 9objc_destroyWeak(this + 2) = v33;
      char v34 = v38;
      if (v38)
      {
        char v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree(v34, v22);
      }
      uint64_t v35 = v36;
      if (v36)
      {
        long long v36 = 0;
        LODWORD(v37) = 0;
        WTF::fastFree(v35, v22);
      }
      if (++v11 == 8) {
        return v9 + 96 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 96;
    v9 += 96;
    if (v9 == a2) {
      return 1;
    }
  }
}

WTF *std::swap[abi:sn180100]<WebKit::RTCNetwork>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  long long v18 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v19[12] = *(_OWORD *)(a1 + 60);
  uint64_t v9 = a1 + 80;
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, (_DWORD *)a2);
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v6, (_DWORD *)(a2 + 16));
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v9, (_DWORD *)(a2 + 80));
  uint64_t v15 = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v15, v14);
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  long long v16 = *(WTF **)(a2 + 16);
  if (v16)
  {
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v16, v14);
  }
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  *(_OWORD *)(a2 + 3objc_destroyWeak(this + 2) = v18;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v19;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)&v19[12];
  BOOL result = *(WTF **)(a2 + 80);
  if (result)
  {
    *(void *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    BOOL result = (WTF *)WTF::fastFree(result, v14);
  }
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v11;
  return result;
}

WTF *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a2, a3, a5);
  BOOL result = (WTF *)(*a5)(a4, a3);
  if (result)
  {
    std::swap[abi:sn180100]<WebKit::RTCNetwork>(a3, a4);
    BOOL result = (WTF *)(*a5)(a3, a2);
    if (result)
    {
      std::swap[abi:sn180100]<WebKit::RTCNetwork>(a2, a3);
      BOOL result = (WTF *)(*a5)(a2, a1);
      if (result)
      {
        return std::swap[abi:sn180100]<WebKit::RTCNetwork>(a1, a2);
      }
    }
  }
  return result;
}

WTF *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*>(a1, a2, a3, a4, a6);
  BOOL result = (WTF *)(*a6)(a5, a4);
  if (result)
  {
    std::swap[abi:sn180100]<WebKit::RTCNetwork>(a4, a5);
    BOOL result = (WTF *)(*a6)(a4, a3);
    if (result)
    {
      std::swap[abi:sn180100]<WebKit::RTCNetwork>(a3, a4);
      BOOL result = (WTF *)(*a6)(a3, a2);
      if (result)
      {
        std::swap[abi:sn180100]<WebKit::RTCNetwork>(a2, a3);
        BOOL result = (WTF *)(*a6)(a2, a1);
        if (result)
        {
          return std::swap[abi:sn180100]<WebKit::RTCNetwork>(a1, a2);
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9CDE80;
    *((void *)v2 + objc_destroyWeak(this + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    BOOL result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(WTF **)(result + 8);
  if (v1)
  {
    uint64_t v2 = *((void *)v1 + 1);
    *((void *)v1 + objc_destroyWeak(this + 1) = 0;
    (*(void (**)(uint64_t, void *, uint64_t, void *))(*(void *)v2 + 16))(v2, (void *)v1 + 3, (uint64_t)v1 + 44, (void *)v1 + 2);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v4 = *((void *)v1 + 2);
    if (v4) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
    }
    uint64_t v5 = *((void *)v1 + 1);
    *((void *)v1 + objc_destroyWeak(this + 1) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    return WTF::fastFree(v1, v3);
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkManager::NetworkManager(void)::$_0,void>::call(WebKit::NetworkManager *a1)
{
  if ((_MergedGlobals_79 & 1) == 0)
  {
    a1 = (WebKit::NetworkManager *)WebKit::NetworkManager::NetworkManager(a1);
    _MergedGlobals_79 = 1;
  }

  return WebKit::NetworkManager::updateNetworks(a1);
}

uint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 96 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      uint64_t v4 = (WTF *)*((void *)v3 + 10);
      if (v4)
      {
        *((void *)v3 + 10) = 0;
        *((_DWORD *)v3 + 2objc_destroyWeak(this + 2) = 0;
        WTF::fastFree(v4, a2);
      }
      uint64_t v5 = (WTF *)*((void *)v3 + 2);
      if (v5)
      {
        *((void *)v3 + objc_destroyWeak(this + 2) = 0;
        *((_DWORD *)v3 + 6) = 0;
        WTF::fastFree(v5, a2);
      }
      BOOL result = *(WTF **)v3;
      if (*(void *)v3)
      {
        *(void *)unsigned int v3 = 0;
        *((_DWORD *)v3 + objc_destroyWeak(this + 2) = 0;
        BOOL result = (WTF *)WTF::fastFree(result, a2);
      }
      unsigned int v3 = (WTF *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_0,void,WebKit::RTC::Network::IPAddress &&,WebKit::RTC::Network::IPAddress &,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::HashMap>,WTF::HashTraits<WTF::HashMap>,WTF::DefaultHash<WTF::HashMap><WTF::String>,WTF::HashTableTraits> &&>::call(WebKit::NetworkManager *a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  if ((_MergedGlobals_79 & 1) == 0)
  {
    WebKit::NetworkManager::NetworkManager(a1);
    _MergedGlobals_79 = 1;
  }
  if (!byte_1EB3599C0)
  {
    byte_1EB3599C0 = 1;
    unint64_t v14 = (void *)*a4;
    *a4 = 0;
    uint64_t v15 = qword_1EB359A08;
    qword_1EB359A08 = (uint64_t)v14;
    if (v15)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
      unint64_t v14 = (void *)qword_1EB359A08;
    }
    long long v16 = *(_OWORD *)a2;
    dword_1EB3599E8 = a2[4];
    xmmword_1EB3599D8 = v16;
    long long v17 = *(_OWORD *)a3;
    dword_1EB3599FC = *(_DWORD *)(a3 + 16);
    xmmword_1EB3599EC = v17;
    long long v18 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v14);
    if (v14) {
      uint64_t v20 = &v14[13 * *((unsigned int *)v14 - 1)];
    }
    else {
      uint64_t v20 = 0;
    }
    if (v20 == v18) {
      goto LABEL_85;
    }
    int v55 = dword_1EB359A00;
    while (1)
    {
      *((_WORD *)v18 + 34) = ++v55;
      while (1)
      {
        v18 += 13;
        if (v18 == v19) {
          break;
        }
        if ((unint64_t)(*v18 + 1) > 1) {
          goto LABEL_83;
        }
      }
      long long v18 = v19;
LABEL_83:
      if (v18 == v20)
      {
        dword_1EB359A00 = v55;
        goto LABEL_85;
      }
    }
  }
  uint64_t v108 = (WebKit *)a3;
  uint64_t v109 = (WebKit *)a2;
  char v110 = a4;
  uint64_t v7 = (void *)*a4;
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
  uint64_t v11 = v8;
  long long v12 = v9;
  if (v7) {
    long long v13 = &v7[13 * *((unsigned int *)v7 - 1)];
  }
  else {
    long long v13 = 0;
  }
  if (v13 == v8)
  {
LABEL_45:
    uint64_t v37 = qword_1EB359A08;
    uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void *)qword_1EB359A08);
    long long v40 = (WTF::StringImpl **)result;
    long long v41 = (WTF::StringImpl **)v9;
    if (v37) {
      uint64_t v42 = (WTF::StringImpl **)(v37 + 104 * *(unsigned int *)(v37 - 4));
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = v110;
    if (v42 != (WTF::StringImpl **)result)
    {
      do
      {
        uint64_t v44 = *v43;
        if (!*v43) {
          goto LABEL_69;
        }
        int v45 = *(_DWORD *)(v44 - 8);
        unsigned int v46 = *((_DWORD *)*v40 + 4);
        if (v46 >= 0x100) {
          unsigned int v47 = v46 >> 8;
        }
        else {
          unsigned int v47 = WTF::StringImpl::hashSlowCase(*v40);
        }
        for (int i = 0; ; v47 = i + v49)
        {
          int v49 = v47 & v45;
          unsigned int v50 = *(WTF **)(v44 + 104 * (v47 & v45));
          if (v50 != (WTF *)-1)
          {
            if (!v50) {
              goto LABEL_69;
            }
            uint64_t result = WTF::equal(v50, *v40, v39);
            if (result) {
              break;
            }
          }
          ++i;
        }
        v40 += 13;
        if (v40 == v41)
        {
          long long v40 = v41;
          uint64_t v43 = v110;
        }
        else
        {
          uint64_t v43 = v110;
          while ((unint64_t)*v40 + 1 <= 1)
          {
            v40 += 13;
            if (v40 == v41)
            {
              long long v40 = v41;
              break;
            }
          }
        }
      }
      while (v40 != v42);
    }
    if (*((_DWORD *)v109 + 4))
    {
      uint64_t result = WebKit::isEqual(v109, (const WebKit::RTC::Network::IPAddress *)&xmmword_1EB3599D8, v39);
      if (!result) {
        goto LABEL_69;
      }
    }
    if (*((_DWORD *)v108 + 4))
    {
      uint64_t result = WebKit::isEqual(v108, (const WebKit::RTC::Network::IPAddress *)&xmmword_1EB3599EC, v39);
      if ((result & 1) == 0) {
        goto LABEL_69;
      }
    }
    return result;
  }
  char v21 = 0;
  do
  {
    uint64_t v22 = qword_1EB359A08;
    if (!qword_1EB359A08) {
      goto LABEL_37;
    }
    int v23 = *(_DWORD *)(qword_1EB359A08 - 8);
    unsigned int v24 = *(_DWORD *)(*v11 + 16);
    if (v24 >= 0x100) {
      unsigned int v25 = v24 >> 8;
    }
    else {
      unsigned int v25 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v11);
    }
    for (j = 0; ; unsigned int v25 = j + v27)
    {
      int v27 = v25 & v23;
      uint64_t v28 = v22 + 104 * (v25 & v23);
      int v29 = *(WTF **)v28;
      if (*(void *)v28 != -1)
      {
        if (!v29)
        {
          uint64_t v30 = qword_1EB359A08;
          if (qword_1EB359A08)
          {
            unsigned int v31 = *(_DWORD *)(qword_1EB359A08 - 4);
            uint64_t v28 = qword_1EB359A08 + 104 * v31;
            goto LABEL_26;
          }
LABEL_37:
          *((_WORD *)v11 + 34) = ++dword_1EB359A00;
LABEL_38:
          BOOL v35 = 1;
          goto LABEL_39;
        }
        if (WTF::equal(v29, (const WTF::StringImpl *)*v11, v10)) {
          break;
        }
      }
      ++j;
    }
    uint64_t v30 = qword_1EB359A08;
    if (qword_1EB359A08)
    {
      unsigned int v31 = *(_DWORD *)(qword_1EB359A08 - 4);
LABEL_26:
      v30 += 104 * v31;
    }
    if (v30 == v28) {
      goto LABEL_37;
    }
    *((_WORD *)v11 + 34) = *(_WORD *)(v28 + 68);
    if (!WebKit::isEqual((WebKit *)(v11 + 5), (const WebKit::RTC::Network::IPAddress *)(v28 + 40), v10)
      || *((_DWORD *)v11 + 15) != *(_DWORD *)(v28 + 60)
      || *((_DWORD *)v11 + 16) != *(_DWORD *)(v28 + 64)
      || *((_DWORD *)v11 + 20) != *(_DWORD *)(v28 + 80)
      || *((_DWORD *)v11 + 25) != *(_DWORD *)(v28 + 100))
    {
      goto LABEL_38;
    }
    int v32 = (int *)v11[11];
    int v33 = *(int **)(v28 + 88);
    do
    {
      uint64_t v34 = v11[11] + 24 * *((unsigned int *)v11 + 25);
      BOOL v35 = v32 != (int *)v34;
      if (v32 == (int *)v34) {
        break;
      }
      WebKit::RTC::Network::IPAddress::rtcAddress(v32, (uint64_t)buf);
      int v36 = v32[5];
      *(_DWORD *)unsigned __int8 v112 = v115;
      *(_OWORD *)&v112[4] = v116;
      uint64_t v111 = (char *)&unk_1EE9D05A0;
      int v113 = v36;
      WebKit::RTC::Network::IPAddress::rtcAddress(v33, (uint64_t)buf);
      v32 += 6;
      v33 += 6;
    }
    while ((rtc::InterfaceAddress::operator==() & 1) != 0);
LABEL_39:
    while (1)
    {
      v11 += 13;
      if (v11 == v12) {
        break;
      }
      if ((unint64_t)(*v11 + 1) > 1) {
        goto LABEL_43;
      }
    }
    uint64_t v11 = v12;
LABEL_43:
    v21 |= v35;
  }
  while (v11 != v13);
  if ((v21 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_69:
  uint64_t v51 = *v110;
  *char v110 = 0;
  uint64_t v52 = qword_1EB359A08;
  qword_1EB359A08 = v51;
  if (v52) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v52, v9);
  }
  if (*((_DWORD *)v109 + 4))
  {
    long long v53 = *(_OWORD *)v109;
    dword_1EB3599E8 = *((_DWORD *)v109 + 4);
    xmmword_1EB3599D8 = v53;
  }
  if (*((_DWORD *)v108 + 4))
  {
    long long v54 = *(_OWORD *)v108;
    dword_1EB3599FC = *((_DWORD *)v108 + 4);
    xmmword_1EB3599EC = v54;
  }
LABEL_85:
  long long v56 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper::onGatheredNetworks - networks changed", buf, 2u);
  }
  uint64_t v57 = qword_1EB359A08;
  uint64_t v58 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void *)qword_1EB359A08);
  uint64_t v60 = v59;
  if (v57)
  {
    uint64_t v61 = (void *)(v57 + 104 * *(unsigned int *)(v57 - 4));
    uint64_t v111 = 0;
    *(void *)unsigned __int8 v112 = 0;
    uint64_t v62 = *(unsigned int *)(v57 - 12);
    if (v62)
    {
      if (v62 < 0x2AAAAAB)
      {
        int v63 = 96 * v62;
        uint64_t v64 = WTF::fastMalloc((WTF *)(96 * v62));
        *(_DWORD *)unsigned __int8 v112 = (v63 & 0xFFFFFFE0) / 0x60;
        uint64_t v111 = (char *)v64;
        goto LABEL_93;
      }
LABEL_158:
      __break(0xC471u);
      JUMPOUT(0x198CDF564);
    }
    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v61 = 0;
    uint64_t v111 = 0;
    *(void *)unsigned __int8 v112 = 0;
  }
LABEL_93:
  if (v61 == v58)
  {
    unsigned int v79 = 0;
  }
  else
  {
    do
    {
      uint64_t v65 = (WTF *)*((unsigned int *)v58 + 5);
      *(void *)buf = 0;
      int v115 = 0;
      LODWORD(v116) = v65;
      if (v65)
      {
        uint64_t v66 = (void *)WTF::fastMalloc(v65);
        int v115 = (int)v65;
        *(void *)buf = v66;
        memcpy(v66, (const void *)v58[1], *((unsigned int *)v58 + 5));
      }
      uint64_t v67 = (WTF *)*((unsigned int *)v58 + 9);
      *(void *)((char *)&v116 + 4) = 0;
      HIDWORD(v116) = 0;
      int v117 = (int)v67;
      if (v67)
      {
        uint64_t v68 = (void *)WTF::fastMalloc(v67);
        HIDWORD(v116) = v67;
        *(void *)((char *)&v116 + 4) = v68;
        memcpy(v68, (const void *)v58[3], *((unsigned int *)v58 + 9));
      }
      long long v69 = *(_OWORD *)(v58 + 5);
      long long v70 = *(_OWORD *)(v58 + 7);
      *(_OWORD *)((char *)v119 + 1objc_destroyWeak(this + 2) = *(_OWORD *)((char *)v58 + 68);
      long long v118 = v69;
      v119[0] = v70;
      WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v120, (long long **)v58 + 11);
      int v72 = *(_DWORD *)&v112[4];
      uint64_t v64 = (uint64_t)v111;
      uint64_t v73 = &v111[96 * *(unsigned int *)&v112[4]];
      *(void *)uint64_t v73 = 0;
      *((void *)v73 + objc_destroyWeak(this + 1) = 0;
      uint64_t v74 = *(WTF **)buf;
      *(void *)buf = 0;
      *(void *)uint64_t v73 = v74;
      LODWORD(v74) = v115;
      int v115 = 0;
      *((_DWORD *)v73 + objc_destroyWeak(this + 2) = v74;
      LODWORD(v74) = v116;
      LODWORD(v116) = 0;
      *((_DWORD *)v73 + 3) = v74;
      *((void *)v73 + objc_destroyWeak(this + 2) = 0;
      *((void *)v73 + 3) = 0;
      uint64_t v75 = *(void *)((char *)&v116 + 4);
      *(void *)((char *)&v116 + 4) = 0;
      *((void *)v73 + objc_destroyWeak(this + 2) = v75;
      LODWORD(v75) = HIDWORD(v116);
      HIDWORD(v116) = 0;
      *((_DWORD *)v73 + 6) = v75;
      LODWORD(v75) = v117;
      int v117 = 0;
      *((_DWORD *)v73 + 7) = v75;
      long long v76 = v118;
      long long v77 = v119[0];
      *(_OWORD *)(v73 + 60) = *(_OWORD *)((char *)v119 + 12);
      *((_OWORD *)v73 + objc_destroyWeak(this + 2) = v76;
      *((_OWORD *)v73 + 3) = v77;
      *((void *)v73 + 10) = 0;
      *((void *)v73 + 1objc_destroyWeak(this + 1) = 0;
      uint64_t v78 = v120;
      int64_t v120 = 0;
      *((void *)v73 + 10) = v78;
      LODWORD(v78) = v121;
      int v121 = 0;
      *((_DWORD *)v73 + 2objc_destroyWeak(this + 2) = v78;
      LODWORD(v78) = v122;
      int v122 = 0;
      *((_DWORD *)v73 + 23) = v78;
      unsigned int v79 = v72 + 1;
      *(_DWORD *)&v112[4] = v72 + 1;
      uint64_t v80 = v120;
      if (v120)
      {
        int64_t v120 = 0;
        int v121 = 0;
        WTF::fastFree(v80, v71);
      }
      long long v81 = *(WTF **)((char *)&v116 + 4);
      if (*(void *)((char *)&v116 + 4))
      {
        *(void *)((char *)&v116 + 4) = 0;
        HIDWORD(v116) = 0;
        WTF::fastFree(v81, v71);
      }
      uint64_t v82 = *(WTF **)buf;
      if (*(void *)buf)
      {
        *(void *)buf = 0;
        int v115 = 0;
        WTF::fastFree(v82, v71);
      }
      while (1)
      {
        v58 += 13;
        if (v58 == v60) {
          break;
        }
        if ((unint64_t)(*v58 + 1) > 1) {
          goto LABEL_108;
        }
      }
      uint64_t v58 = v60;
LABEL_108:
      ;
    }
    while (v58 != v61);
  }
  *(void *)buf = WebKit::sortNetworks;
  unint64_t v83 = 126 - 2 * __clz(v79);
  if (v79) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebKit::RTCNetwork const&,WebKit::RTCNetwork const&),WebKit::RTCNetwork*,false>(v64, v64 + 96 * v79, (uint64_t (**)(uint64_t, uint64_t))buf, v84, 1);
  if (*(_DWORD *)&v112[4])
  {
    int v85 = 127;
    if (*(unsigned int *)&v112[4] > 0x7FuLL) {
      int v85 = *(_DWORD *)&v112[4];
    }
    uint64_t v86 = 96 * *(unsigned int *)&v112[4];
    int v87 = (int *)(v111 + 64);
    do
    {
      *int v87 = v85;
      v87 += 24;
      --v85;
      v86 -= 96;
    }
    while (v86);
  }
  long long v88 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v88 = &unk_1EE9CDF70;
  v88[1] = &qword_1EB359970;
  if (qword_1EB359970 && (uint64_t v89 = *(unsigned int *)(qword_1EB359970 - 12), v89))
  {
    if (v89 >> 29) {
      goto LABEL_158;
    }
    char v90 = (WTF *)WTF::fastMalloc((WTF *)(8 * v89));
  }
  else
  {
    char v90 = 0;
  }
  int v91 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1EB359970);
  int64_t v93 = v91;
  int64_t v94 = v92;
  if (qword_1EB359970) {
    uint64_t v95 = qword_1EB359970 + 8 * *(unsigned int *)(qword_1EB359970 - 4);
  }
  else {
    uint64_t v95 = 0;
  }
  if ((void *)v95 != v91)
  {
    unsigned int v96 = 0;
    int v97 = 1;
    do
    {
      unsigned int v98 = v97;
      unint64_t v99 = *(atomic_uint ***)(*v93 + 8);
      if (v99)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*v93 + 8), *(void *)(*v93 + 8));
        unint64_t v100 = *v99;
        if (*v99) {
          atomic_fetch_add(v100, 1u);
        }
      }
      else
      {
        unint64_t v100 = 0;
      }
      *((void *)v90 + v96) = v100;
      while (++v93 != v94)
      {
        if ((unint64_t)(*v93 + 1) > 1) {
          goto LABEL_138;
        }
      }
      int64_t v93 = v94;
LABEL_138:
      ++v96;
      int v97 = v98 + 1;
    }
    while (v93 != (void *)v95);
    if (v96)
    {
      uint64_t v101 = 8 * v98;
      long long v102 = v90;
      do
      {
        if (*(void *)v102)
        {
          if (*(void *)(*(void *)v102 + 8))
          {
            *(void *)buf = *(void *)v102;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EB359970, buf))
            {
              if (*(void *)v102) {
                uint64_t v103 = *(void *)(*(void *)v102 + 8);
              }
              else {
                uint64_t v103 = 0;
              }
              (*(void (**)(void *, uint64_t))(*v88 + 16))(v88, v103);
            }
          }
        }
        long long v102 = (WTF *)((char *)v102 + 8);
        v101 -= 8;
      }
      while (v101);
      uint64_t v104 = 8 * v98;
      long long v105 = (unsigned int **)v90;
      do
      {
        long long v106 = *v105;
        *long long v105 = 0;
        if (v106 && atomic_fetch_add((atomic_uint *volatile)v106, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v106);
          WTF::fastFree((WTF *)v106, v92);
        }
        ++v105;
        v104 -= 8;
      }
      while (v104);
    }
  }
  if (v90) {
    WTF::fastFree(v90, v92);
  }
  (*(void (**)(void *))(*v88 + 8))(v88);
  return WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v107);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CDEF8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDEF8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_1,void>::call(uint64_t a1)
{
  WebKit::getDefaultIPAddress((WebKit *)&v4, 1);
  if (v6)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    double result = *(double *)&v4;
    *(_OWORD *)(v3 + 24) = v4;
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void WebKit::getDefaultIPAddress(WebKit *this, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2) {
    int v4 = 2;
  }
  else {
    int v4 = 30;
  }
  int v5 = socket(v4, 2, 0);
  if (v5 != -1)
  {
    int v6 = v5;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    sockaddr v19 = (sockaddr)0;
    if (a2)
    {
      v19.sa_family = 2;
      strcpy(v19.sa_data, "5");
      if (inet_pton(2, "8.8.8.8", &v19.sa_data[2]))
      {
        socklen_t v7 = 16;
        goto LABEL_13;
      }
      uint64_t v13 = qword_1EB358820;
      if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 67109120;
      int v18 = 1;
      uint64_t v11 = "getDefaultIPAddress inet_pton failed, useIPv4=%d";
    }
    else
    {
      v19.sa_family = 30;
      strcpy(v19.sa_data, "5");
      if (inet_pton(30, "2001:4860:4860::8888", &v19.sa_data[6]))
      {
        socklen_t v7 = 28;
LABEL_13:
        if ((connect(v6, &v19, v7) & 0x80000000) == 0)
        {
          long long v26 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          sockaddr v19 = (sockaddr)0;
          socklen_t v16 = 128;
          if (getsockname(v6, &v19, &v16) < 0)
          {
            unint64_t v14 = qword_1EB358820;
            if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
              goto LABEL_26;
            }
            *(_DWORD *)buf = 67109120;
            int v18 = a2;
            uint64_t v15 = "getDefaultIPAddress getsockname failed, useIPv4=%d";
          }
          else
          {
            if (v4 == v19.sa_family)
            {
              WebKit::RTC::Network::IPAddress::IPAddress((uint64_t)this, &v19);
              char v9 = 1;
LABEL_27:
              *((unsigned char *)this + 20) = v9;
              goto LABEL_28;
            }
            unint64_t v14 = qword_1EB358820;
            if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
            {
LABEL_26:
              char v9 = 0;
              *(unsigned char *)this = 0;
              goto LABEL_27;
            }
            *(_DWORD *)buf = 67109120;
            int v18 = a2;
            uint64_t v15 = "getDefaultIPAddress address is not of the expected family, useIPv4=%d";
          }
          _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, v15, buf, 8u);
          goto LABEL_26;
        }
        uint64_t v10 = qword_1EB358820;
        if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v18 = a2;
          uint64_t v11 = "getDefaultIPAddress connect failed, useIPv4=%d";
          long long v12 = v10;
LABEL_31:
          _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, v11, buf, 8u);
        }
LABEL_22:
        *(unsigned char *)this = 0;
        *((unsigned char *)this + 20) = 0;
LABEL_28:
        close(v6);
        return;
      }
      uint64_t v13 = qword_1EB358820;
      if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 67109120;
      int v18 = 0;
      uint64_t v11 = "getDefaultIPAddress inet_pton failed, useIPv4=%d";
    }
    long long v12 = v13;
    goto LABEL_31;
  }
  uint64_t v8 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)&v19.sa_len = 67109120;
    *(_DWORD *)&v19.sa_data[2] = a2;
    _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "getDefaultIPAddress socket creation failed, useIPv4=%d", &v19.sa_len, 8u);
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 20) = 0;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CDF20;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDF20;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_2,void>::call(uint64_t a1)
{
  WebKit::getDefaultIPAddress((WebKit *)&v4, 0);
  if (v6)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    double result = *(double *)&v4;
    *(_OWORD *)(v3 + 44) = v4;
    *(_DWORD *)(v3 + 60) = v5;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CDF48;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDF48;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::CallbackAggregator,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManager::updateNetworks(void)::$_3,void>::call(uint64_t a1)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v103 = 0;
  if (getifaddrs(&v103))
  {
    unsigned int v96 = 0;
LABEL_3:
    uint64_t v3 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    long long v4 = v2;
    int v5 = 0;
    char v6 = 0;
    goto LABEL_124;
  }
  socklen_t v7 = v103;
  unsigned int v96 = 0;
  if (!v103) {
    goto LABEL_3;
  }
  int v91 = v103;
  uint64_t v92 = v1;
  do
  {
    ifa_addr = v7->ifa_addr;
    if (!ifa_addr || !v7->ifa_netmask) {
      goto LABEL_116;
    }
    int sa_family = ifa_addr->sa_family;
    BOOL v10 = sa_family == 30 || sa_family == 2;
    if (!v10 || (v7->ifa_flags & 0x40) == 0) {
      goto LABEL_116;
    }
    WebKit::RTC::Network::IPAddress::IPAddress((uint64_t)&v101, ifa_addr);
    WebKit::RTC::Network::IPAddress::IPAddress((uint64_t)__p, v7->ifa_netmask);
    int v11 = 0;
    *(_OWORD *)uint64_t v107 = v101;
    *(void *)uint64_t v108 = v102;
    *(_OWORD *)&v108[8] = *(_OWORD *)__p;
    *(_DWORD *)&unsigned char v108[24] = v99;
    char v109 = 1;
    long long v12 = v7->ifa_addr;
    if (v12->sa_family == 30) {
      int v11 = *(_DWORD *)&v12[1].sa_data[6];
    }
    WebKit::RTC::Network::IPAddress::rtcAddress((int *)&v108[8], (uint64_t)&v101);
    unsigned int v14 = rtc::CountIPMaskBits((rtc *)&v101, v13);
    ifa_name = v7->ifa_name;
    if (ifa_name) {
      size_t v16 = strlen(v7->ifa_name);
    }
    else {
      size_t v16 = 0;
    }
    if (!v109) {
LABEL_149:
    }
      __break(1u);
    WebKit::RTC::Network::IPAddress::rtcAddress((int *)&v108[8], (uint64_t)&v101);
    rtc::IPAddress::ToString((uint64_t *)__p, (rtc::IPAddress *)&v101);
    if ((v100 & 0x80u) == 0) {
      int v18 = __p;
    }
    else {
      int v18 = (void **)__p[0];
    }
    if ((v100 & 0x80u) == 0) {
      unsigned int v19 = v100;
    }
    else {
      unsigned int v19 = __p[1];
    }
    unsigned int v95 = v14;
    int v94 = v11;
    if ((v14 & 0x80000000) != 0)
    {
      unsigned int v22 = -v14;
      int v20 = 1;
      do
      {
        ++v20;
        BOOL v23 = v22 >= 0xA;
        v22 /= 0xAu;
      }
      while (v23);
    }
    else
    {
      int v20 = 0;
      do
      {
        ++v20;
        BOOL v21 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v21);
    }
    if ((v19 & 0x80000000) != 0) {
      goto LABEL_152;
    }
    unsigned int v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      goto LABEL_152;
    }
    if (v20 < 0) {
      goto LABEL_152;
    }
    BOOL v25 = __OFADD__(v20, v24);
    unsigned int v26 = v20 + v24;
    if (v25) {
      goto LABEL_152;
    }
    BOOL v25 = __OFADD__(v26, 1);
    unsigned int v27 = v26 + 1;
    BOOL v28 = v25;
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_152;
    }
    if (v28) {
      goto LABEL_152;
    }
    uint64_t v29 = v16 + v27;
    if (__OFADD__(v16, v27)) {
      goto LABEL_152;
    }
    if (v29)
    {
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_152;
      }
      WTF::tryFastCompactMalloc((WTF *)(v29 + 20));
      uint64_t v30 = v101;
      if (!(void)v101) {
        goto LABEL_152;
      }
      *(_DWORD *)long long v101 = 2;
      *(_DWORD *)(v30 + 4) = v29;
      *(void *)(v30 + 8) = v30 + 20;
      *(_DWORD *)(v30 + 16) = 4;
      *(void *)&long long v104 = ifa_name;
      *((void *)&v104 + objc_destroyWeak(this + 1) = v16 | 0x100000000;
      WTF::StringView::getCharacters<unsigned char>(&v104, (char *)(v30 + 20));
      unsigned int v31 = (unsigned char *)(v30 + 20 + DWORD2(v104));
      *unsigned int v31 = 45;
      int v32 = v31 + 1;
      unsigned int v33 = v95;
      WTF::writeIntegerToBuffer<unsigned char,int>(v95, v32);
      if ((v95 & 0x80000000) != 0)
      {
        unsigned int v35 = -v95;
        unsigned int v34 = 1;
        do
        {
          ++v34;
          BOOL v23 = v35 >= 0xA;
          v35 /= 0xAu;
        }
        while (v23);
      }
      else
      {
        unsigned int v34 = 0;
        do
        {
          ++v34;
          BOOL v21 = v33 > 9;
          v33 /= 0xAu;
        }
        while (v21);
      }
      int v36 = &v32[v34];
      *int v36 = 45;
      *(void *)&long long v101 = v18;
      *((void *)&v101 + objc_destroyWeak(this + 1) = v19 | 0x100000000;
      WTF::StringView::getCharacters<unsigned char>(&v101, v36 + 1);
    }
    else
    {
      uint64_t v30 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    int v97 = (WTF::StringImpl *)v30;
    uint64_t v37 = v96;
    if (v96
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v96, 0), (uint64_t v37 = v96) != 0))
    {
      int v38 = *((_DWORD *)v37 - 2);
    }
    else
    {
      int v38 = 0;
    }
    unsigned int v39 = *((_DWORD *)v97 + 4);
    if (v39 >= 0x100) {
      unsigned int v40 = v39 >> 8;
    }
    else {
      unsigned int v40 = WTF::StringImpl::hashSlowCase(v97);
    }
    long long v41 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v43 = v40 & v38;
      uint64_t v44 = (WTF::StringImpl **)&v37[13 * (v40 & v38)];
      int v45 = *v44;
      if (*v44 == (WTF::StringImpl *)-1)
      {
        long long v41 = &v37[13 * v43];
        goto LABEL_63;
      }
      if (!v45) {
        break;
      }
      if (WTF::equal(v45, v97, v17)) {
        goto LABEL_106;
      }
LABEL_63:
      unsigned int v40 = i + v43;
    }
    if (v41)
    {
      v41[12] = 0;
      *((_OWORD *)v41 + 4) = 0u;
      *((_OWORD *)v41 + 5) = 0u;
      *((_OWORD *)v41 + objc_destroyWeak(this + 2) = 0u;
      *((_OWORD *)v41 + 3) = 0u;
      *(_OWORD *)long long v41 = 0u;
      *((_OWORD *)v41 + objc_destroyWeak(this + 1) = 0u;
      --*((_DWORD *)v37 - 4);
      uint64_t v44 = (WTF::StringImpl **)v41;
    }
    WTF::String::operator=((uint64_t *)v44, &v97);
    if (v16)
    {
      if (HIDWORD(v16))
      {
        __break(0xC471u);
        JUMPOUT(0x198CE03C0);
      }
      uint64_t v47 = WTF::fastMalloc((WTF *)v16);
      long long v48 = (WTF::StringImpl *)v47;
      for (uint64_t j = 0; j != v16; ++j)
        *(unsigned char *)(v47 + j) = ifa_name[j];
    }
    else
    {
      long long v48 = 0;
    }
    WTF::String::utf8();
    if (!v106)
    {
      LODWORD(v50) = 0;
LABEL_82:
      long long v53 = 0;
      goto LABEL_83;
    }
    unint64_t v50 = *((void *)v106 + 1);
    if (!v50) {
      goto LABEL_82;
    }
    if (HIDWORD(v50))
    {
LABEL_152:
      __break(0xC471u);
      JUMPOUT(0x198CE03B8);
    }
    uint64_t v51 = (char *)v106 + 16;
    uint64_t v52 = WTF::fastMalloc(*((WTF **)v106 + 1));
    long long v53 = (WTF::StringImpl *)v52;
    for (uint64_t k = 0; k != v50; ++k)
      *(unsigned char *)(v52 + k) = v51[k];
LABEL_83:
    if (!v109) {
      goto LABEL_149;
    }
    long long v101 = *(_OWORD *)&v108[8];
    unsigned int v102 = *(_DWORD *)&v108[24];
    int v55 = nw_interface_create_with_name();
    if (v55)
    {
      long long v56 = v55;
      unsigned __int32 v57 = nw_interface_get_type(v55) - 1;
      if (v57 > 3) {
        int v58 = 8;
      }
      else {
        int v58 = dword_1994F6C70[v57];
      }
      int v93 = v58;
      CFRelease(v56);
    }
    else
    {
      int v93 = 0;
    }
    long long v104 = v101;
    unsigned int v105 = v102;
    unsigned int v59 = v106;
    long long v106 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1) {
        WTF::fastFree(v59, v46);
      }
      else {
        --*(_DWORD *)v59;
      }
    }
    uint64_t v60 = v44[1];
    if (v60)
    {
      v44[1] = 0;
      *((_DWORD *)v44 + 4) = 0;
      WTF::fastFree(v60, v46);
    }
    v44[1] = v48;
    *((_DWORD *)v44 + 4) = v16;
    *((_DWORD *)v44 + 5) = v16;
    uint64_t v61 = v44[3];
    if (v61)
    {
      v44[3] = 0;
      *((_DWORD *)v44 + 8) = 0;
      WTF::fastFree(v61, v46);
    }
    uint64_t v62 = v44[11];
    v44[3] = v53;
    *((_DWORD *)v44 + 8) = v50;
    *((_DWORD *)v44 + 9) = v50;
    *(_OWORD *)(v44 + 5) = v104;
    *((_DWORD *)v44 + 14) = v105;
    *((_DWORD *)v44 + 15) = v95;
    *((_DWORD *)v44 + 16) = v93;
    *((_WORD *)v44 + 34) = 0;
    *((_DWORD *)v44 + 18) = 0;
    *((_WORD *)v44 + 38) = 1;
    *((_DWORD *)v44 + 20) = v94;
    if (v62)
    {
      v44[11] = 0;
      *((_DWORD *)v44 + 24) = 0;
      WTF::fastFree(v62, v46);
    }
    v44[11] = 0;
    v44[12] = 0;
    int v63 = v96;
    int v64 = v96 ? *((_DWORD *)v96 - 3) + 1 : 1;
    *((_DWORD *)v96 - 3) = v64;
    uint64_t v65 = (*((_DWORD *)v63 - 4) + v64);
    unint64_t v66 = *((unsigned int *)v63 - 1);
    if (v66 > 0x400)
    {
      if (v66 <= 2 * v65) {
LABEL_105:
      }
        uint64_t v44 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v96, v44);
    }
    else if (3 * v66 <= 4 * v65)
    {
      goto LABEL_105;
    }
LABEL_106:
    if (!v109) {
      goto LABEL_149;
    }
    uint64_t v67 = v44 + 11;
    uint64_t v68 = *((unsigned int *)v44 + 25);
    if (v68 == *((_DWORD *)v44 + 24))
    {
      unint64_t v69 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)v107);
      uint64_t v70 = (uint64_t)v44[11] + 24 * *((unsigned int *)v44 + 25);
      long long v71 = *(_OWORD *)v69;
      uint64_t v72 = *(void *)(v69 + 16);
    }
    else
    {
      uint64_t v70 = *v67 + 24 * v68;
      long long v71 = *(_OWORD *)v107;
      uint64_t v72 = *(void *)v108;
    }
    *(void *)(v70 + 16) = v72;
    *(_OWORD *)uint64_t v70 = v71;
    ++*((_DWORD *)v44 + 25);
    uint64_t v73 = v97;
    int v97 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v46);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
    if ((char)v100 < 0) {
      operator delete(__p[0]);
    }
LABEL_116:
    socklen_t v7 = v7->ifa_next;
  }
  while (v7);
  MEMORY[0x199740C10](v91, 0x10B0C40815C8216);
  int v5 = v96;
  uint64_t v74 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v96);
  uint64_t v3 = v74;
  long long v4 = v2;
  if (v5) {
    char v6 = (WTF::StringImpl *)&v5[13 * *((unsigned int *)v5 - 1)];
  }
  else {
    char v6 = 0;
  }
  uint64_t v1 = v92;
LABEL_124:
  if (v6 != v3)
  {
    do
    {
      WTF::String::isolatedCopy();
      uint64_t v75 = v107[0];
      v107[0] = 0;
      long long v76 = *(WTF::StringImpl **)v3;
      *(void *)uint64_t v3 = v75;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2) {
          WTF::StringImpl::destroy(v76, v2);
        }
        else {
          *(_DWORD *)v76 -= 2;
        }
      }
      long long v77 = v107[0];
      v107[0] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2) {
          WTF::StringImpl::destroy(v77, v2);
        }
        else {
          *(_DWORD *)v77 -= 2;
        }
      }
      uint64_t v78 = *((void *)v3 + 1);
      *((void *)v3 + objc_destroyWeak(this + 1) = 0;
      uint64_t v79 = *((void *)v3 + 2);
      *((_DWORD *)v3 + 5) = 0;
      uint64_t v80 = *((void *)v3 + 3);
      *((void *)v3 + 3) = 0;
      uint64_t v81 = *((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      long long v82 = *(_OWORD *)((char *)v3 + 40);
      *(_OWORD *)&v108[12] = *(_OWORD *)((char *)v3 + 68);
      *(_OWORD *)uint64_t v108 = *(_OWORD *)((char *)v3 + 56);
      *(_OWORD *)uint64_t v107 = v82;
      uint64_t v83 = *((void *)v3 + 11);
      *((void *)v3 + 1objc_destroyWeak(this + 1) = 0;
      uint64_t v84 = *((void *)v3 + 12);
      *((void *)v3 + 1objc_destroyWeak(this + 2) = 0;
      int v85 = (WTF *)*((void *)v3 + 1);
      if (v85)
      {
        *((void *)v3 + objc_destroyWeak(this + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v85, v2);
      }
      *((void *)v3 + objc_destroyWeak(this + 1) = v78;
      *((void *)v3 + objc_destroyWeak(this + 2) = v79;
      uint64_t v86 = (WTF *)*((void *)v3 + 3);
      if (v86)
      {
        *((void *)v3 + 3) = 0;
        *((_DWORD *)v3 + 8) = 0;
        WTF::fastFree(v86, v2);
      }
      *((void *)v3 + 3) = v80;
      *((void *)v3 + 4) = v81;
      long long v87 = *(_OWORD *)&v108[12];
      long long v88 = *(_OWORD *)v108;
      *(_OWORD *)((char *)v3 + 40) = *(_OWORD *)v107;
      *(_OWORD *)((char *)v3 + 56) = v88;
      *(_OWORD *)((char *)v3 + 68) = v87;
      uint64_t v89 = (WTF *)*((void *)v3 + 11);
      if (v89)
      {
        *((void *)v3 + 1objc_destroyWeak(this + 1) = 0;
        *((_DWORD *)v3 + 24) = 0;
        WTF::fastFree(v89, v2);
      }
      *((void *)v3 + 1objc_destroyWeak(this + 1) = v83;
      *((void *)v3 + 1objc_destroyWeak(this + 2) = v84;
      while (1)
      {
        uint64_t v3 = (WTF::StringImpl *)((char *)v3 + 104);
        if (v3 == v4) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_144;
        }
      }
      uint64_t v3 = v4;
LABEL_144:
      ;
    }
    while (v3 != v6);
    int v5 = v96;
  }
  uint64_t result = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = v5;
  if (result) {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v2);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(104 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 104 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = v3;
    uint64_t v65 = v3;
    uint64_t v66 = v2;
    do
    {
      uint64_t v13 = (WTF::StringImpl **)(v2 + 104 * v10);
      unsigned int v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v25 = *a1;
          if (*a1) {
            unsigned int v26 = *(_DWORD *)(v25 - 8);
          }
          else {
            unsigned int v26 = 0;
          }
          unsigned int v27 = *((_DWORD *)v14 + 4);
          unint64_t v69 = v11;
          if (v27 >= 0x100) {
            int v28 = v27 >> 8;
          }
          else {
            int v28 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v29 = 0;
          do
          {
            unsigned int v30 = v28 & v26;
            unsigned int v31 = (WTF::StringImpl **)(v25 + 104 * (v28 & v26));
            int v28 = ++v29 + (v28 & v26);
          }
          while (*v31);
          uint64_t v32 = v25 + 104 * v30;
          unsigned int v35 = *(WTF **)(v32 + 88);
          unsigned int v34 = (void *)(v32 + 88);
          unsigned int v33 = v35;
          if (v35)
          {
            void *v34 = 0;
            *(_DWORD *)(v25 + 104 * v30 + 96) = 0;
            WTF::fastFree(v33, v7);
          }
          uint64_t v36 = v25 + 104 * v30;
          unsigned int v39 = *(WTF **)(v36 + 24);
          int v38 = (void *)(v36 + 24);
          uint64_t v37 = v39;
          if (v39)
          {
            *int v38 = 0;
            *(_DWORD *)(v25 + 104 * v30 + 3objc_destroyWeak(this + 2) = 0;
            WTF::fastFree(v37, v7);
          }
          unsigned int v40 = v34 - 10;
          long long v41 = (WTF *)*(v34 - 10);
          if (v41)
          {
            *unsigned int v40 = 0;
            *(_DWORD *)(v25 + 104 * v30 + 16) = 0;
            WTF::fastFree(v41, v7);
          }
          uint64_t v42 = *v31;
          *unsigned int v31 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2) {
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v42 -= 2;
            }
          }
          unsigned int v43 = *v13;
          *uint64_t v13 = 0;
          *unsigned int v31 = v43;
          *unsigned int v40 = 0;
          *(v34 - 9) = 0;
          uint64_t v44 = v2 + 104 * v10;
          uint64_t v46 = *(void *)(v44 + 8);
          int v45 = (WTF **)(v44 + 8);
          *(void *)(v44 + 8) = 0;
          *unsigned int v40 = v46;
          long long v48 = (_DWORD *)(v44 + 16);
          int v47 = *(_DWORD *)(v44 + 16);
          *(_DWORD *)(v44 + 16) = 0;
          uint64_t v49 = v25 + 104 * v30;
          *(_DWORD *)(v49 + 16) = v47;
          int v50 = *(_DWORD *)(v44 + 20);
          *(_DWORD *)(v44 + 20) = 0;
          *(_DWORD *)(v49 + 20) = v50;
          *int v38 = 0;
          v38[1] = 0;
          uint64_t v52 = (WTF **)(v44 + 24);
          uint64_t v51 = *(void *)(v44 + 24);
          *(void *)(v44 + 24) = 0;
          *int v38 = v51;
          long long v53 = (_DWORD *)(v44 + 32);
          LODWORD(v5objc_destroyWeak(this + 1) = *(_DWORD *)(v44 + 32);
          *(_DWORD *)(v44 + 3objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v49 + 3objc_destroyWeak(this + 2) = v51;
          LODWORD(v5objc_destroyWeak(this + 1) = *(_DWORD *)(v44 + 36);
          *(_DWORD *)(v44 + 36) = 0;
          *(_DWORD *)(v49 + 36) = v51;
          long long v54 = *(_OWORD *)(v44 + 40);
          long long v55 = *(_OWORD *)(v44 + 56);
          *(_OWORD *)(v49 + 68) = *(_OWORD *)(v44 + 68);
          *(_OWORD *)(v49 + 56) = v55;
          *(_OWORD *)(v49 + 40) = v54;
          void *v34 = 0;
          v34[1] = 0;
          uint64_t v57 = *(void *)(v44 + 88);
          uint64_t v56 = v44 + 88;
          *(void *)uint64_t v56 = 0;
          void *v34 = v57;
          int v58 = *(_DWORD *)(v56 + 8);
          *(_DWORD *)(v56 + 8) = 0;
          *(_DWORD *)(v49 + 96) = v58;
          int v59 = *(_DWORD *)(v56 + 12);
          *(_DWORD *)(v56 + 1objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v49 + 100) = v59;
          uint64_t v60 = *(WTF **)v56;
          if (*(void *)v56)
          {
            *(void *)uint64_t v56 = 0;
            *(_DWORD *)(v56 + 8) = 0;
            WTF::fastFree(v60, v7);
          }
          uint64_t v61 = *v52;
          if (*v52)
          {
            *uint64_t v52 = 0;
            _DWORD *v53 = 0;
            WTF::fastFree(v61, v7);
          }
          uint64_t v62 = *v45;
          if (*v45)
          {
            *int v45 = 0;
            *long long v48 = 0;
            WTF::fastFree(v62, v7);
          }
          int v63 = *v13;
          *uint64_t v13 = 0;
          uint64_t v2 = v66;
          int v11 = v69;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2) {
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v63 -= 2;
            }
          }
          if (v13 == a2) {
            int v11 = v31;
          }
          uint64_t v12 = v65;
        }
        else
        {
          uint64_t v15 = v2 + 104 * v10;
          int v18 = *(WTF **)(v15 + 88);
          long long v17 = (void *)(v15 + 88);
          size_t v16 = v18;
          if (v18)
          {
            void *v17 = 0;
            *(_DWORD *)(v2 + 104 * v10 + 96) = 0;
            WTF::fastFree(v16, v7);
          }
          uint64_t v19 = v2 + 104 * v10;
          unsigned int v22 = *(WTF **)(v19 + 24);
          BOOL v21 = (void *)(v19 + 24);
          int v20 = v22;
          if (v22)
          {
            void *v21 = 0;
            *(_DWORD *)(v2 + 104 * v10 + 3objc_destroyWeak(this + 2) = 0;
            WTF::fastFree(v20, v7);
          }
          BOOL v23 = (WTF *)*(v17 - 10);
          if (v23)
          {
            *(v17 - 10) = 0;
            *(_DWORD *)(v2 + 104 * v10 + 16) = 0;
            WTF::fastFree(v23, v7);
          }
          unsigned int v24 = *v13;
          *uint64_t v13 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    int v11 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::RTCNetwork>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::RTCNetwork>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  unsigned int v1 = *((_DWORD *)result - 1);
  uint64_t v2 = &result[13 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[13 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 104 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 13;
      v3 -= 104;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, long long **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xAAAAAAB)
  {
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = 24 * v7;
      do
      {
        long long v10 = *v8;
        *(void *)(v6 + 16) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v6 = v10;
        v6 += 24;
        uint64_t v8 = (long long *)((char *)v8 + 24);
        v9 -= 24;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkManager::onGatheredNetworks(WebKit::RTC::Network::IPAddress &&,WebKit::RTC::Network::IPAddress &,WTF::HashMap<WTF::String,WebKit::RTCNetwork,WTF::DefaultHash<WTF::HashMap>,WTF::HashTraits<WTF::HashMap>,WTF::DefaultHash<WTF::HashMap><WTF::String>,WTF::HashTableTraits> &&)::$_0,void,WebKit::NetworkRTCMonitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a2 + 8) + 24), 1u);
  WebKit::NetworkRTCMonitor::onNetworksChanged(a2, v3 + 88, (int *)(v3 + 104), (int *)(v3 + 124));
  int v4 = (unsigned int *)(*(void *)(a2 + 8) + 24);

  return WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v4);
}

WTF *std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(WTF *result)
{
  if (result)
  {
    unsigned int v1 = result;
    std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*(void *)result);
    std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*((void *)v1 + 1));
    uint64_t v3 = *((void *)v1 + 5);
    *((void *)v1 + 5) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    return (WTF *)WTF::fastFree(v1, v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CDF98;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CDF98;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::call(uint64_t a1)
{
  unsigned int v1 = *(void **)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = v1 + 5;
  uint64_t v2 = (WTF *)v1[5];
  uint64_t v15 = (WTF **)v1[4];
  size_t v16 = v2;
  if (v1[6])
  {
    *((void *)v2 + objc_destroyWeak(this + 2) = &v16;
    uint64_t v2 = 0;
    v1[4] = v3;
    *uint64_t v3 = 0;
    v1[6] = 0;
  }
  else
  {
    uint64_t v15 = &v16;
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v2);
  int v4 = v13;
  v1[4] = &v13;
  v1[5] = v4;
  uint64_t v5 = v14;
  v1[6] = v14;
  if (v5)
  {
    *((void *)v4 + objc_destroyWeak(this + 2) = v3;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v4 = 0;
  }
  else
  {
    v1[4] = v3;
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v4);
  uint64_t v7 = v15;
  if (v15 != &v16)
  {
    do
    {
      (*(void (**)(WTF *))(*(void *)v7[5] + 32))(v7[5]);
      uint64_t v8 = v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (WTF **)v8;
          uint64_t v8 = *(WTF **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (WTF **)v7[2];
          BOOL v10 = *v9 == (WTF *)v7;
          uint64_t v7 = v9;
        }
        while (!v10);
      }
      uint64_t v7 = v9;
    }
    while (v9 != &v16);
  }
  uint64_t v11 = v1[13];
  if (v11)
  {
    v1[13] = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v11, v6);
  }
  return std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v16);
}

uint64_t *std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    int v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        int v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      unsigned int v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    size_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  size_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    size_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  unsigned int v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  int v4 = std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::__remove_node_pointer(a1, a2);
  uint64_t v5 = a2[5];
  a2[5] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::fastFree((WTF *)a2, v3);
  return v4;
}

uint64_t *std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CDFC0;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CDFC0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 8);
  uint64_t v3 = *((void *)result + 7);
  if (v3)
  {
    if (*(void *)(v3 + 8)) {
      return WebKit::NetworkRTCProvider::createResolver((uint64_t)result, *(void *)(a1 + 24), (WTF::StringImpl **)(a1 + 32));
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2706;
  *((void *)v6 + objc_destroyWeak(this + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  uint64_t v7 = *a2;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, *(unsigned int *)(*a2 + 12));
  uint64_t v8 = *(unsigned int *)(v7 + 12);
  if (v8)
  {
    uint64_t v9 = *(int **)v7;
    uint64_t v10 = 20 * v8;
    do
    {
      unsigned __int8 v16 = v9[4];
      IPC::Encoder::operator<<<BOOL>(v6, (char *)&v16);
      IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(v6, v9, v16);
      v9 += 5;
      v10 -= 20;
    }
    while (v10);
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CDFE8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CDFE8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::call(IPC::Encoder *result, _DWORD *a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (!v2) {
    return result;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return result;
  }
  BOOL v5 = result;
  int v6 = a2[4];
  if (v6)
  {
    if (v6 == 1)
    {
      if (*a2 != 2)
      {
        uint64_t v7 = *(void *)(v3 + 24);
        LODWORD(v29) = 1;
        uint64_t v8 = *((void *)result + 2);
        uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v9 = 2705;
        *((void *)v9 + objc_destroyWeak(this + 1) = v8;
        *((void *)v9 + 66) = (char *)v9 + 16;
        *((void *)v9 + 67) = 512;
        *((void *)v9 + 68) = 0;
        *((void *)v9 + 70) = 0;
        *((void *)v9 + 69) = 0;
        IPC::Encoder::encodeHeader(v9);
        *(void *)uint64_t v32 = v9;
        IPC::Encoder::operator<<<int>(v9, (int *)&v29);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)v32, 0, 0);
        uint64_t result = *(IPC::Encoder **)v32;
        *(void *)uint64_t v32 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          return (IPC::Encoder *)WTF::fastFree(result, v11);
        }
      }
      return result;
    }
    uint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_31:
    __break(0xC471u);
    return result;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v12 = a2[3];
  if (v12)
  {
    if (v12 >= 0xCCCCCCD) {
      goto LABEL_31;
    }
    LODWORD(v28) = 20 * (int)v12 / 0x14u;
    uint64_t v27 = (WTF *)WTF::fastMalloc((WTF *)(20 * v12));
    uint64_t v13 = a2[3];
    if (v13)
    {
      LODWORD(v1objc_destroyWeak(this + 2) = 0;
      uint64_t v14 = *(_DWORD **)a2;
      uint64_t v15 = 20 * v13;
      while (1)
      {
        int v16 = v14[4];
        if (v16 == 2) {
          break;
        }
        if (v16 == 1)
        {
          *(void *)uint64_t v32 = &unk_1EE9BD6E8;
          *(_DWORD *)&char v32[8] = 2;
          *(void *)&v32[16] = 0;
          *(_DWORD *)&v32[24] = 0;
          *(_DWORD *)&v32[12] = *v14;
LABEL_16:
          WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v29, (const rtc::IPAddress *)v32);
          char v31 = 1;
          *(_OWORD *)uint64_t v32 = v29;
          *(_DWORD *)&v32[16] = v30;
          int v17 = HIDWORD(v28);
          if (HIDWORD(v28) == v28)
          {
            unint64_t v18 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, HIDWORD(v28) + 1, (unint64_t)v32);
            int v17 = HIDWORD(v28);
            uint64_t v19 = (char *)v27 + 20 * HIDWORD(v28);
            int v20 = *(_DWORD *)(v18 + 16);
            *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
            *((_DWORD *)v19 + 4) = v20;
          }
          else
          {
            BOOL v21 = (char *)v27 + 20 * HIDWORD(v28);
            long long v22 = v29;
            *((_DWORD *)v21 + 4) = v30;
            *(_OWORD *)BOOL v21 = v22;
          }
          LODWORD(v1objc_destroyWeak(this + 2) = v17 + 1;
          HIDWORD(v28) = v12;
        }
        v14 += 5;
        v15 -= 20;
        if (!v15) {
          goto LABEL_23;
        }
      }
      *(void *)uint64_t v32 = &unk_1EE9BD6E8;
      *(_DWORD *)&char v32[8] = 30;
      *(_OWORD *)&v32[12] = *(_OWORD *)v14;
      goto LABEL_16;
    }
    LODWORD(v1objc_destroyWeak(this + 2) = 0;
  }
LABEL_23:
  WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v27, v12);
  uint64_t v23 = *((void *)v5 + 2);
  uint64_t v24 = *(void *)(*((void *)v5 + 1) + 8);
  if (v24) {
    uint64_t v25 = v24 - 48;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(void *)(v25 + 72);
  *(void *)uint64_t v32 = &v27;
  IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(v26, (uint64_t *)v32, v23);
  uint64_t result = v27;
  if (v27)
  {
    uint64_t v27 = 0;
    LODWORD(v28) = 0;
    return (IPC::Encoder *)WTF::fastFree(result, v11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CE010;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CE010;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    if (*(void *)(v3 + 8)) {
      return WebKit::NetworkRTCProvider::stopResolver((atomic_uint *)result, *(void *)(a1 + 24));
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(v2 + 32);
      uint64_t v11 = *(WTF::StringImpl **)(v2 + 40);
      uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 224), &v11);
      if (result)
      {
        uint64_t v11 = **(WTF::StringImpl ***)(v3 + 24);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((_DWORD **)(result + 1072), &v11, &v10);
        WTF::String::isolatedCopy();
        int v6 = *(WTF::StringImpl ***)(v3 + 16);
        uint64_t v7 = v11;
        uint64_t v11 = 0;
        uint64_t v8 = *v6;
        *int v6 = v7;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        uint64_t v9 = v11;
        uint64_t v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v5);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        uint64_t result = (uint64_t)v10;
        uint64_t v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  BOOL v5 = (WTF *)a2[1];
  uint64_t v3 = a2 + 1;
  uint64_t v4 = v5;
  *uint64_t v3 = 0;
  if (v5) {
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 1objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          long long v29 = v27 + 1;
          uint64_t v28 = (WTF *)v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v29, v28);
          }
          *uint64_t v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          char v31 = (WTF **)(v30 + 8);
          *char v31 = 0;
          *long long v29 = v32;
          unsigned int v10 = *v31;
          *char v31 = 0;
          if (v10) {
            std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v31, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v17 = *(WTF **)(v15 + 8);
          int v16 = (void *)(v15 + 8);
          unsigned int v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v3 + 8, a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WebKit::ExtensionCapabilityGranter::ExtensionCapabilityGranter(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = (atomic_uint *volatile *)(a2 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  atomic_uint *volatile v4 = *v3;
  atomic_fetch_add(*v3, 1u);
  a1[1] = v4;
  return a1;
}

void sub_198CE1B1C(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ExtensionCapabilityGranter::grant(WebKit::ExtensionCapabilityGranter *this, const WebKit::ExtensionCapability *a2)
{
  v122[2] = *MEMORY[0x1E4F143B8];
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebKit::ExtensionCapability *))(*(void *)a2 + 16))(&v83, a2);
  if (!v83 || !*((_DWORD *)v83 + 1))
  {
    uint64_t v6 = qword_1EB358320;
    if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      unsigned int v8 = cf ? (char *)cf + 16 : 0;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "grant";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v8;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] environmentIdentifier must not be empty", buf, 0x16u);
      uint64_t v9 = (WTF *)cf;
      CFTypeRef cf = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          WTF::fastFree(v9, v7);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
    }
    goto LABEL_160;
  }
  (*(void (**)(WTF::String **__return_ptr))(**(void **)(*((void *)this + 1) + 8) + 16))(&v82);
  if (v82) {
    int v5 = WebKit::prepareGrant(&v83, v82, v4);
  }
  else {
    int v5 = 0;
  }
  unsigned int v10 = (WebKit *)(*(void *(**)(WTF::String **__return_ptr))(**(void **)(*((void *)this + 1) + 8)
                                                                        + 24))(&v81);
  unsigned int v7 = v81;
  if (v81)
  {
    unsigned int v10 = (WebKit *)WebKit::prepareGrant(&v83, v81, v11);
    int v12 = (int)v10;
  }
  else
  {
    int v12 = 0;
  }
  if ((v5 | v12))
  {
    if (v12) {
      uint64_t v13 = v81;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v82) {
      int v14 = v5;
    }
    else {
      int v14 = 0;
    }
    if (v14 == 1 && (uint64_t v15 = *((void *)v82 + 17)) != 0)
    {
      unsigned int v10 = (WebKit *)std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](&v96, v15 + 40);
      if (!v13) {
        goto LABEL_30;
      }
    }
    else
    {
      LOBYTE(v96) = 0;
      char v98 = 0;
      if (!v13) {
        goto LABEL_30;
      }
    }
    uint64_t v16 = *((void *)v13 + 17);
    if (v16)
    {
      unsigned int v10 = (WebKit *)std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](&v93, v16 + 40);
LABEL_31:
      uint64_t v17 = WebKit::granterQueue(v10);
      uint64_t v18 = (const void *)*((void *)a2 + 1);
      CFTypeRef cf = v18;
      if (v18) {
        CFRetain(v18);
      }
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v87, (uint64_t)&v96);
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v90, (uint64_t)&v93);
      long long v84 = 0uLL;
      *(void *)&long long v85 = "grantCapabilityInternal";
      *((void *)&v85 + objc_destroyWeak(this + 1) = 0;
      int v19 = (WTF::Lock *)WTF::fastMalloc((WTF *)0x88);
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise((uint64_t)v19, &v84);
      int v99 = v19;
      long long v100 = v84;
      long long v101 = v85;
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode((atomic_uchar *)v19, 0, (WTF::Logger::LogSiteIdentifier *)&v84);
      unint64_t v20 = v99;
      long long v77 = v99;
      if (v99)
      {
        atomic_fetch_add((atomic_uint *volatile)v99 + 2, 1u);
        unint64_t v20 = v99;
      }
      int v99 = 0;
      *(_OWORD *)&uint8_t buf[8] = v100;
      long long v111 = v101;
      CFTypeRef v21 = cf;
      CFTypeRef cf = 0;
      *(void *)buf = v20;
      CFTypeRef v112 = v21;
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](&v113, (uint64_t)v87);
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v116, (uint64_t)v90);
      uint64_t v22 = WTF::fastMalloc((WTF *)0x68);
      *(void *)uint64_t v22 = &unk_1EE9CE1F8;
      *(void *)(v22 + 8) = *(void *)buf;
      long long v23 = v111;
      *(_OWORD *)(v22 + 16) = *(_OWORD *)&buf[8];
      *(_OWORD *)(v22 + 3objc_destroyWeak(this + 2) = v23;
      CFTypeRef v24 = v112;
      *(void *)buf = 0;
      CFTypeRef v112 = 0;
      *(void *)(v22 + 48) = v24;
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v22 + 56), (uint64_t)&v113);
      std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v22 + 80), (uint64_t)v116);
      char v109 = (WTF::StringImpl *)v22;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)(v17 + 32) + 16))(v17 + 32, &v109);
      uint64_t v25 = (uint64_t)v109;
      char v109 = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      if (v118[0])
      {
        if (v117 != -1) {
          ((void (*)(WTF::StringImpl **, char *))off_1EE9CE2A0[v117])(&v108, v116);
        }
        int v117 = -1;
      }
      if ((_BYTE)v115)
      {
        if (v114 != -1) {
          ((void (*)(WTF::StringImpl **, int *))off_1EE9CE2A0[v114])(&v108, &v113);
        }
        int v114 = -1;
      }
      uint64_t v26 = v112;
      CFTypeRef v112 = 0;
      if (v26) {
        CFRelease(v26);
      }
      WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)buf);
      WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)&v99);
      if (v92)
      {
        if (v91 != -1) {
          ((void (*)(unsigned char *, char *))off_1EE9CE2A0[v91])(buf, v90);
        }
        int v91 = -1;
      }
      if (v89)
      {
        if (v88 != -1) {
          ((void (*)(unsigned char *, char *))off_1EE9CE2A0[v88])(buf, v87);
        }
        int v88 = -1;
      }
      uint64_t v27 = (void *)cf;
      CFTypeRef cf = 0;
      if (v27) {
        CFRelease(v27);
      }
      if (v95 && v94 != -1) {
        uint64_t v27 = (void *)((uint64_t (*)(unsigned char *, WTF::StringImpl **))off_1EE9CE2A0[v94])(buf, &v93);
      }
      if (v98 && v97 != -1) {
        uint64_t v27 = (void *)((uint64_t (*)(unsigned char *, WTF::StringImpl **))off_1EE9CE2A0[v97])(buf, &v96);
      }
      uint64_t v28 = WTF::RunLoop::main((WTF::RunLoop *)v27);
      uint64_t v29 = *(void *)this;
      if (*(void *)this) {
        goto LABEL_68;
      }
      uint64_t v29 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = this;
      char v31 = *(unsigned int **)this;
      *(void *)this = v29;
      if (!v31) {
        goto LABEL_68;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v30);
      }
      uint64_t v29 = *(void *)this;
      if (*(void *)this) {
LABEL_68:
      }
        atomic_fetch_add((atomic_uint *volatile)v29, 1u);
      uint64_t v32 = v83;
      if (v83) {
        *(_DWORD *)v83 += 2;
      }
      if (v12) {
        __int16 v33 = 256;
      }
      else {
        __int16 v33 = 0;
      }
      long long v84 = 0uLL;
      uint64_t v34 = WTF::fastMalloc((WTF *)0x50);
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
      uint64_t v35 = WTF::fastMalloc((WTF *)0x28);
      char v36 = 0;
      *(void *)uint64_t v35 = &unk_1EE9CE2E0;
      *(void *)(v35 + 8) = this;
      *(void *)(v35 + 16) = v29;
      *(void *)(v35 + 24) = v32;
      *(_WORD *)(v35 + 3objc_destroyWeak(this + 2) = v33 | v5;
      *(_DWORD *)(v34 + 8) = 1;
      *(void *)(v34 + 16) = v28;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 3objc_destroyWeak(this + 2) = 0;
      *(void *)(v34 + 40) = "grant";
      *(void *)(v34 + 48) = 0;
      *(_WORD *)(v34 + 56) = 0;
      *(void *)uint64_t v34 = &unk_1EE9CE308;
      *(void *)(v34 + 64) = 0;
      *(void *)(v34 + 7objc_destroyWeak(this + 2) = v35;
      uint64_t v37 = (uint64_t)v77;
      atomic_fetch_add((atomic_uint *volatile)v77 + 2, 1u);
      long long v78 = v84;
      uint64_t v79 = "grant";
      uint64_t v80 = 0;
      unsigned int v102 = (WTF::NativePromiseBase *)v34;
      int v38 = (WTF::Lock *)((char *)v77 + 48);
      int v99 = (WTF::Lock *)((char *)v77 + 48);
      LOBYTE(v100) = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v77 + 48, (unsigned __int8 *)&v36, 1u, memory_order_acquire, memory_order_acquire);
      if (v36) {
        int v38 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      *((unsigned char *)v77 + 128) = 1;
      unsigned int v39 = (unsigned char *)WTF::NativePromiseBase::logChannel(v38);
      unsigned int v40 = v39;
      if (*v39 && v39[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v78);
        WTF::String::String((WTF::String *)&v109, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v108, (uint64_t)v77);
        WTF::String::String((WTF::String *)&v107, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v105, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v104);
        WTF::String::String((WTF::String *)&v103, "]");
        unint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v93, (uint64_t *)&v109, (uint64_t *)&v108, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, (uint64_t *)&v104, (uint64_t *)&v103, &v96);
        if (!v96)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v43 = v103;
        uint64_t v103 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2) {
            WTF::StringImpl::destroy(v43, v42);
          }
          else {
            *(_DWORD *)v43 -= 2;
          }
        }
        uint64_t v44 = v104;
        long long v104 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v42);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        int v45 = v105;
        unsigned int v105 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v42);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
        }
        uint64_t v46 = v106;
        long long v106 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v42);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
        int v47 = v107;
        uint64_t v107 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v42);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
        long long v48 = v108;
        uint64_t v108 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, v42);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
        uint64_t v49 = v109;
        char v109 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2) {
            WTF::StringImpl::destroy(v49, v42);
          }
          else {
            *(_DWORD *)v49 -= 2;
          }
        }
        int v50 = v93;
        int v93 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2) {
            WTF::StringImpl::destroy(v50, v42);
          }
          else {
            *(_DWORD *)v50 -= 2;
          }
        }
        uint64_t v51 = *((void *)v40 + 4);
        uint64_t v52 = (WTF *)os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (v52)
        {
          WTF::String::utf8();
          long long v53 = cf ? (char *)cf + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v53;
          _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          uint64_t v52 = (WTF *)cf;
          CFTypeRef cf = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 1) {
              uint64_t v52 = (WTF *)WTF::fastFree(v52, v7);
            }
            else {
              --*(_DWORD *)v52;
            }
          }
        }
        if (*v40 && v40[16] >= 4u)
        {
          long long v54 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v55 = *v54;
            if (v55) {
              break;
            }
            int v56 = *v54;
            atomic_compare_exchange_strong_explicit(v54, (unsigned __int8 *)&v56, v55 | 1, memory_order_acquire, memory_order_acquire);
            if (v56 == v55)
            {
              uint64_t v57 = WTF::Logger::observers(v52);
              uint64_t v58 = *(unsigned int *)(v57 + 12);
              if (v58)
              {
                int v59 = *(uint64_t **)v57;
                uint64_t v76 = *(void *)v57 + 8 * v58;
                do
                {
                  uint64_t v60 = *v59;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v78);
                  *(_DWORD *)&uint8_t buf[16] = 0;
                  WTF::String::String((WTF::String *)&v111, " invoking maybeSettle() [");
                  DWORD2(v11objc_destroyWeak(this + 1) = 0;
                  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v112, (uint64_t)v77);
                  int v113 = 0;
                  WTF::String::String((WTF::String *)&v114, " callback:");
                  int v115 = 0;
                  WTF::LogArgument<void const*>::toString();
                  int v117 = 0;
                  WTF::String::String((WTF::String *)v118, " isNothing:");
                  int v119 = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v120);
                  int v121 = 0;
                  WTF::String::String((WTF::String *)v122, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&cf, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned char *, uint64_t, CFTypeRef *))(*(void *)v60 + 16))(v60, v40, 4, &cf);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v61);
                  for (uint64_t i = 120; i != -8; i -= 16)
                  {
                    int v63 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v63)
                    {
                      if (*(_DWORD *)v63 == 2) {
                        WTF::StringImpl::destroy(v63, v7);
                      }
                      else {
                        *(_DWORD *)v63 -= 2;
                      }
                    }
                  }
                  ++v59;
                }
                while (v59 != (uint64_t *)v76);
              }
              int v64 = 1;
              atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v64, 0, memory_order_release, memory_order_relaxed);
              uint64_t v37 = (uint64_t)v77;
              if (v64 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v65 = v96;
        unsigned int v96 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2) {
            WTF::StringImpl::destroy(v65, v7);
          }
          else {
            *(_DWORD *)v65 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v37 + 80))
      {
        WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(v102, v37, (atomic_uchar *volatile *)&v99);
      }
      else
      {
        uint64_t v66 = (void *)(v37 + 88);
        uint64_t v67 = *(unsigned int *)(v37 + 100);
        if (v67 == *(_DWORD *)(v37 + 96))
        {
          uint64_t v68 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v102);
          uint64_t v67 = *(unsigned int *)(v37 + 100);
          unint64_t v69 = (WTF::NativePromiseBase **)(*(void *)(v37 + 88) + 8 * v67);
        }
        else
        {
          unint64_t v69 = (WTF::NativePromiseBase **)(*v66 + 8 * v67);
          uint64_t v68 = &v102;
        }
        uint64_t v70 = *v68;
        *uint64_t v68 = 0;
        _DWORD *v69 = v70;
        *(_DWORD *)(v37 + 100) = v67 + 1;
      }
      if ((_BYTE)v100)
      {
        long long v71 = v99;
        int v72 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v99, (unsigned __int8 *)&v72, 0, memory_order_release, memory_order_relaxed);
        if (v72 != 1) {
          WTF::Lock::unlockSlow(v71);
        }
      }
      uint64_t v73 = (unsigned int *)v102;
      unsigned int v102 = 0;
      if (v73 && atomic_fetch_add((atomic_uint *volatile)v73 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v73 + 2);
        (*(void (**)(unsigned int *))(*(void *)v73 + 8))(v73);
      }
      if (v77 && atomic_fetch_add((atomic_uint *volatile)v77 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v77 + 2);
        (*(void (**)(WTF::Lock *))(*(void *)v77 + 16))(v77);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v37 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v37 + 8));
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
      }
      goto LABEL_156;
    }
LABEL_30:
    LOBYTE(v93) = 0;
    char v95 = 0;
    goto LABEL_31;
  }
LABEL_156:
  uint64_t v74 = v81;
  uint64_t v81 = 0;
  if (v74) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v74 + 4);
  }
  uint64_t v75 = v82;
  long long v82 = 0;
  if (v75) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v75 + 4);
  }
LABEL_160:
  unint64_t result = v83;
  uint64_t v83 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CE28E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,unsigned int *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef cf,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF::StringImpl *a47,uint64_t a48,uint64_t a49,WTF::Lock *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned int *a55)
{
  if (a55 && atomic_fetch_add((atomic_uint *volatile)a55 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a55 + 2);
    (*(void (**)(unsigned int *))(*(void *)a55 + 8))(a55);
  }
  if (a25 && atomic_fetch_add((atomic_uint *volatile)a25 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a25 + 2);
    (*(void (**)(unsigned int *))(*(void *)a25 + 8))(a25);
  }
  if (a24)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a24 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a24 + 2);
      (*(void (**)(unsigned int *))(*(void *)a24 + 16))(a24);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::prepareGrant(WTF::StringImpl **this, const WTF::String *a2, WebKit::AuxiliaryProcessProxy *a3)
{
  atomic_uint *volatile v4 = *this;
  if (*this) {
    *(_DWORD *)v4 += 2;
  }
  v40[0] = (uint64_t)v4;
  v40[1] = 0;
  int v5 = (uint64_t *)((char *)a2 + 392);
  long long v41 = (long long *)v40;
  uint64_t v6 = *((void *)a2 + 49);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)a2 + 49),
        (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*this);
  }
  unsigned int v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = (uint64_t *)(v6 + 24 * (v9 & v7));
    int v14 = (WTF *)*v13;
    if (*v13 == -1)
    {
      unsigned int v10 = (uint64_t *)(v6 + 24 * v12);
      goto LABEL_15;
    }
    if (!v14)
    {
      if (v10)
      {
        *unsigned int v10 = 0;
        v10[1] = 0;
        void v10[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v13 = v10;
      }
      WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebKit::ExtensionCapabilityGrant>(WTF::String const&,WebKit::ExtensionCapabilityGrant &&)::{lambda(void)#1}>(v13, this, &v41);
      uint64_t v15 = *v5;
      if (*v5) {
        int v16 = *(_DWORD *)(v15 - 12) + 1;
      }
      else {
        int v16 = 1;
      }
      *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
      uint64_t v20 = *v5;
      if (*v5) {
        int v21 = *(_DWORD *)(v20 - 12);
      }
      else {
        int v21 = 0;
      }
      uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
      unint64_t v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22) {
          goto LABEL_55;
        }
      }
      else if (3 * v23 > 4 * v22)
      {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    if (WTF::equal(v14, *this, a3)) {
      break;
    }
LABEL_15:
    unsigned int v9 = i + v12;
  }
  uint64_t v17 = *(void **)(v6 + 24 * v12 + 16);
  if (!v17 || ([v17 isValid] & 1) != 0)
  {
    uint64_t v19 = 0;
    goto LABEL_56;
  }
  long long v41 = (long long *)v40;
  uint64_t v24 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5),
        (uint64_t v24 = *v5) != 0))
  {
    int v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    int v25 = 0;
  }
  unsigned int v26 = *((_DWORD *)*this + 4);
  if (v26 >= 0x100) {
    unsigned int v27 = v26 >> 8;
  }
  else {
    unsigned int v27 = WTF::StringImpl::hashSlowCase(*this);
  }
  uint64_t v28 = 0;
  int v29 = 1;
  while (2)
  {
    unsigned int v30 = v27 & v25;
    char v31 = (uint64_t *)(v24 + 24 * (v27 & v25));
    uint64_t v32 = (WTF *)*v31;
    if (*v31 == -1)
    {
      uint64_t v28 = (uint64_t *)(v24 + 24 * v30);
LABEL_43:
      unsigned int v27 = v29 + v30;
      ++v29;
      continue;
    }
    break;
  }
  if (v32)
  {
    if (WTF::equal(v32, *this, v18))
    {
      WebKit::ExtensionCapabilityGrant::operator=((uint64_t *)(v24 + 24 * v30 + 8), v40);
      goto LABEL_55;
    }
    goto LABEL_43;
  }
  if (v28)
  {
    *uint64_t v28 = 0;
    v28[1] = 0;
    void v28[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    char v31 = v28;
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebKit::ExtensionCapabilityGrant>(WTF::String const&,WebKit::ExtensionCapabilityGrant &&)::{lambda(void)#1}>(v31, this, &v41);
  uint64_t v33 = *v5;
  if (*v5) {
    int v34 = *(_DWORD *)(v33 - 12) + 1;
  }
  else {
    int v34 = 1;
  }
  *(_DWORD *)(v33 - 1objc_destroyWeak(this + 2) = v34;
  uint64_t v35 = *v5;
  if (*v5) {
    int v36 = *(_DWORD *)(v35 - 12);
  }
  else {
    int v36 = 0;
  }
  uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
  unint64_t v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 > 2 * v37) {
      goto LABEL_55;
    }
LABEL_54:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5);
    goto LABEL_55;
  }
  if (3 * v38 <= 4 * v37) {
    goto LABEL_54;
  }
LABEL_55:
  uint64_t v19 = 1;
LABEL_56:
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)v40);
  return v19;
}

void sub_198CE33E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ExtensionCapabilityGranter::revoke(WebKit::ExtensionCapabilityGranter *this, const WebKit::ExtensionCapability *a2)
{
  uint64_t v29 = 2;
  uint64_t v28 = WTF::fastMalloc((WTF *)0x20);
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebKit::ExtensionCapability *))(*(void *)a2 + 16))(&v27, a2);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)this + 1) + 8) + 16))(&v26);
  if (v26)
  {
    int v5 = (uint64_t *)(v26 + 392);
    uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v26 + 392), &v27, v4);
    WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(&v24, v5, v6);
    if (HIDWORD(v29) == v29)
    {
      WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v28, (unint64_t)&v24);
    }
    else
    {
      int v7 = HIDWORD(v29) + 1;
      unsigned int v8 = (void *)(v28 + 16 * HIDWORD(v29));
      uint64_t v9 = v24;
      uint64_t v24 = 0;
      void *v8 = v9;
      uint64_t v10 = v25;
      uint64_t v25 = 0;
      v8[1] = v10;
      HIDWORD(v29) = v7;
    }
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v24);
    uint64_t v11 = v26;
    uint64_t v26 = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
    }
  }
  unsigned int v12 = (unsigned int *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(*((void *)this + 1) + 8)
                                                                         + 24))(&v26);
  if (v26)
  {
    int v14 = (uint64_t *)(v26 + 392);
    uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v26 + 392), &v27, v13);
    WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(&v24, v14, v15);
    if (HIDWORD(v29) == v29)
    {
      WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v28, (unint64_t)&v24);
    }
    else
    {
      int v16 = HIDWORD(v29) + 1;
      uint64_t v17 = (void *)(v28 + 16 * HIDWORD(v29));
      uint64_t v18 = v24;
      uint64_t v24 = 0;
      void *v17 = v18;
      uint64_t v19 = v25;
      uint64_t v25 = 0;
      v17[1] = v19;
      HIDWORD(v29) = v16;
    }
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v24);
    uint64_t v20 = v26;
    uint64_t v26 = 0;
    if (v20) {
      unsigned int v12 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
    }
  }
  WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v12, (uint64_t)&v28);
  uint64_t v22 = v27;
  unsigned int v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  return WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v21);
}

void sub_198CE3630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&a9);
  uint64_t v15 = a11;
  a11 = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
  }
  int v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ExtensionCapabilityGranter::invalidateGrants(WebKit *a1, uint64_t a2)
{
  uint64_t v3 = WebKit::granterQueue(a1);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a2, (uint64_t)&v9);
  atomic_uint *volatile v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *atomic_uint *volatile v4 = &unk_1EE9CE560;
  v4[1] = v9;
  uint64_t v5 = v10;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  void v4[2] = v5;
  uint64_t v11 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, &v11);
  int v7 = v11;
  uint64_t v11 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  return WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
}

void sub_198CE3790(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(WebKit::ExtensionCapabilityGranter *this, WebKit::MediaCapability *a2, int a3)
{
  v106[2] = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a2 + 24);
  if ((v5 - 1) < 2)
  {
    if (a3) {
      return;
    }
    char v7 = 3;
  }
  else
  {
    if (v5 != 3 && v5 != 0) {
      goto LABEL_12;
    }
    if ((a3 & 1) == 0) {
      return;
    }
    char v7 = 1;
  }
  *((unsigned char *)a2 + 24) = v7;
LABEL_12:
  unsigned int v8 = qword_1EB358320;
  uint64_t v9 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    WebKit::MediaCapability::environmentIdentifier((id *)a2, (uint64_t *)v74);
    WTF::String::utf8();
    if (v81) {
      uint64_t v10 = (char *)v81 + 16;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = "deactivating";
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "setMediaCapabilityActive";
    if (a3) {
      uint64_t v11 = "activating";
    }
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2082;
    *(void *)&long long v97 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] %{public}s", buf, 0x20u);
    uint64_t v13 = v81;
    uint64_t v81 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v9 = v74[0];
    v74[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        uint64_t v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  uint64_t v14 = WebKit::granterQueue(v9);
  uint64_t v15 = (const void *)*((void *)a2 + 1);
  if (v15) {
    CFRetain(*((CFTypeRef *)a2 + 1));
  }
  int v16 = (const void *)*((void *)a2 + 9);
  if (v16) {
    CFRetain(*((CFTypeRef *)a2 + 9));
  }
  v74[0] = 0;
  v74[1] = 0;
  long long v75 = (unint64_t)"setMediaCapabilityActive";
  uint64_t v17 = (WTF *)WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise((uint64_t)v17, (long long *)v74);
  uint64_t v81 = v17;
  long long v82 = *(_OWORD *)v74;
  long long v83 = v75;
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode((atomic_uchar *)v17, 0, (WTF::Logger::LogSiteIdentifier *)v74);
  uint64_t v18 = v81;
  if (v81)
  {
    atomic_fetch_add((atomic_uint *volatile)v81 + 2, 1u);
    uint64_t v19 = v81;
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v81 = 0;
  *(_OWORD *)&uint8_t buf[8] = v82;
  long long v97 = v83;
  *(void *)buf = v19;
  char v98 = v15;
  int v99 = v16;
  v100[0] = a3;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v20 = &unk_1EE9CE3A8;
  *(void *)(v20 + 8) = *(void *)buf;
  long long v21 = v97;
  *(_OWORD *)(v20 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v20 + 3objc_destroyWeak(this + 2) = v21;
  *(void *)(v20 + 48) = v98;
  uint64_t v22 = v99;
  *(void *)buf = 0;
  char v98 = 0;
  int v99 = 0;
  *(void *)(v20 + 56) = v22;
  *(unsigned char *)(v20 + 64) = v100[0];
  long long v85 = (WTF::Lock *)v20;
  (*(void (**)(uint64_t, WTF::Lock **))(*(void *)(v14 + 32) + 16))(v14 + 32, &v85);
  unint64_t v23 = v85;
  long long v85 = 0;
  if (v23) {
    (*(void (**)(WTF::Lock *))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v99;
  int v99 = 0;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = v98;
  char v98 = 0;
  if (v25) {
    CFRelease(v25);
  }
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)buf);
  uint64_t v26 = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)&v81);
  uint64_t v27 = WTF::RunLoop::main((WTF::RunLoop *)v26);
  uint64_t v28 = *((void *)a2 + 2);
  if (v28) {
    goto LABEL_43;
  }
  uint64_t v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v28 = 1;
  *(void *)(v28 + 8) = a2;
  unsigned int v30 = (unsigned int *)*((void *)a2 + 2);
  *((void *)a2 + objc_destroyWeak(this + 2) = v28;
  if (!v30) {
    goto LABEL_43;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v29);
  }
  uint64_t v28 = *((void *)a2 + 2);
  if (v28) {
LABEL_43:
  }
    atomic_fetch_add((atomic_uint *volatile)v28, 1u);
  uint64_t v31 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)v27 + 32))(v27);
  uint64_t v32 = WTF::fastMalloc((WTF *)0x18);
  char v33 = 0;
  *(void *)uint64_t v32 = &unk_1EE9CE410;
  *(void *)(v32 + 8) = v28;
  *(unsigned char *)(v32 + 16) = a3;
  *(_DWORD *)(v31 + 8) = 1;
  *(void *)(v31 + 16) = v27;
  *(void *)(v31 + 24) = 0;
  *(void *)(v31 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v31 + 40) = "setMediaCapabilityActive";
  *(void *)(v31 + 48) = 0;
  *(_WORD *)(v31 + 56) = 0;
  *(void *)uint64_t v31 = &unk_1EE9CE438;
  *(void *)(v31 + 64) = 0;
  *(void *)(v31 + 7objc_destroyWeak(this + 2) = v32;
  atomic_fetch_add((atomic_uint *volatile)v18 + 2, 1u);
  long long v78 = 0uLL;
  uint64_t v79 = "setMediaCapabilityActive";
  uint64_t v80 = 0;
  uint64_t v76 = (unsigned int *)v18;
  long long v77 = 0;
  int v34 = (WTF *)((char *)v18 + 48);
  long long v84 = (WTF::NativePromiseBase *)v31;
  long long v85 = (WTF *)((char *)v18 + 48);
  char v86 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18 + 48, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    int v34 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
  }
  *((unsigned char *)v18 + 11objc_destroyWeak(this + 2) = 1;
  uint64_t v35 = (unsigned char *)WTF::NativePromiseBase::logChannel(v34);
  int v36 = v35;
  if (*v35 && v35[16] >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v94, (WTF::Logger::LogSiteIdentifier *)&v78);
    WTF::String::String((WTF::String *)&v93, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v92, (uint64_t)v18);
    WTF::String::String((WTF::String *)&v91, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v89, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v88);
    WTF::String::String((WTF::String *)&v87, "]");
    WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v94, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v95);
    if (!v95)
    {
      __break(0xC471u);
      return;
    }
    unint64_t v38 = v87;
    long long v87 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v37);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    unsigned int v39 = v88;
    int v88 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v37);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    unsigned int v40 = v89;
    char v89 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v37);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    long long v41 = v90;
    char v90 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v37);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    uint64_t v42 = v91;
    int v91 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v37);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    unsigned int v43 = v92;
    char v92 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v37);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    uint64_t v44 = v93;
    int v93 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v37);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    int v45 = v94;
    int v94 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v37);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
    uint64_t v46 = *((void *)v36 + 4);
    int v47 = (WTF *)os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    if (v47)
    {
      WTF::String::utf8();
      uint64_t v49 = v81 ? (char *)v81 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v49;
      _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v47 = v81;
      uint64_t v81 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1) {
          int v47 = (WTF *)WTF::fastFree(v47, v48);
        }
        else {
          --*(_DWORD *)v47;
        }
      }
    }
    if (*v36 && v36[16] >= 4u)
    {
      int v50 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v51 = *v50;
        if (v51) {
          break;
        }
        int v52 = *v50;
        atomic_compare_exchange_strong_explicit(v50, (unsigned __int8 *)&v52, v51 | 1, memory_order_acquire, memory_order_acquire);
        if (v52 == v51)
        {
          uint64_t v73 = v36;
          uint64_t v53 = WTF::Logger::observers(v47);
          uint64_t v54 = *(unsigned int *)(v53 + 12);
          if (v54)
          {
            int v55 = *(uint64_t **)v53;
            uint64_t v72 = *(void *)v53 + 8 * v54;
            do
            {
              uint64_t v56 = *v55;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v78);
              *(_DWORD *)&uint8_t buf[16] = 0;
              WTF::String::String((WTF::String *)&v97, " invoking maybeSettle() [");
              DWORD2(v97) = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v98, (uint64_t)v18);
              LODWORD(v99) = 0;
              WTF::String::String((WTF::String *)v100, " callback:");
              int v101 = 0;
              WTF::LogArgument<void const*>::toString();
              int v102 = 0;
              WTF::String::String((WTF::String *)v103, " isNothing:");
              v103[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v104);
              int v105 = 0;
              WTF::String::String((WTF::String *)v106, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v81, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v56 + 16))(v56, v73, 4, &v81);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v57);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v59 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2) {
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v48);
                  }
                  else {
                    *(_DWORD *)v59 -= 2;
                  }
                }
              }
              ++v55;
            }
            while (v55 != (uint64_t *)v72);
          }
          int v60 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
          if (v60 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v61 = v95;
    char v95 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
  }
  if (*((_DWORD *)v18 + 16))
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(v84, (uint64_t)v18, (atomic_uchar *volatile *)&v85);
  }
  else
  {
    uint64_t v62 = (void *)((char *)v18 + 72);
    uint64_t v63 = *((unsigned int *)v18 + 21);
    if (v63 == *((_DWORD *)v18 + 20))
    {
      int v64 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v84);
      uint64_t v63 = *((unsigned int *)v18 + 21);
      uint64_t v65 = (WTF::NativePromiseBase **)(*((void *)v18 + 9) + 8 * v63);
    }
    else
    {
      uint64_t v65 = (WTF::NativePromiseBase **)(*v62 + 8 * v63);
      int v64 = &v84;
    }
    uint64_t v66 = *v64;
    *int v64 = 0;
    WTF::StringImpl *v65 = v66;
    *((_DWORD *)v18 + 2objc_destroyWeak(this + 1) = v63 + 1;
  }
  if (v86)
  {
    uint64_t v67 = v85;
    int v68 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v85, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
    if (v68 != 1) {
      WTF::Lock::unlockSlow(v67);
    }
  }
  unint64_t v69 = (unsigned int *)v84;
  long long v84 = 0;
  if (v69 && atomic_fetch_add((atomic_uint *volatile)v69 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v69 + 2);
    (*(void (**)(unsigned int *))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = v77;
  long long v77 = 0;
  if (v70 && atomic_fetch_add((atomic_uint *volatile)v70 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v70 + 2);
    (*(void (**)(unsigned int *))(*(void *)v70 + 8))(v70);
  }
  long long v71 = v76;
  uint64_t v76 = 0;
  if (v71 && atomic_fetch_add((atomic_uint *volatile)v71 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v71 + 2);
    (*(void (**)(unsigned int *))(*(void *)v71 + 16))(v71);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v18 + 2);
    (*(void (**)(WTF *))(*(void *)v18 + 16))(v18);
  }
}

void sub_198CE42C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned int *a30,unsigned int *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned int *a41,WTF::Lock *a42,char a43,WTF::StringImpl *a44,WTF::StringImpl *a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48,WTF::StringImpl *a49,WTF::StringImpl *a50)
{
  if (a41 && atomic_fetch_add((atomic_uint *volatile)a41 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a41 + 2);
    (*(void (**)(unsigned int *))(*(void *)a41 + 8))(a41);
  }
  if (a31 && atomic_fetch_add((atomic_uint *volatile)a31 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a31 + 2);
    (*(void (**)(unsigned int *))(*(void *)a31 + 8))(a31);
  }
  if (a30)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a30 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a30 + 2);
      (*(void (**)(unsigned int *))(*(void *)a30 + 16))(a30);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::granterQueue(WebKit *this)
{
    return WebKit::granterQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::granterQueue(void)::queue = v2;
  return result;
}

uint64_t WebKit::FindClient::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFD | v3;
  if (objc_opt_respondsToSelector()) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFB | v4;
  if (objc_opt_respondsToSelector()) {
    char v5 = 8;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xF7 | v5;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    char v7 = 16;
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xEF | v7;
  return result;
}

void WebKit::FindClient::didCountStringMatches(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, unsigned int a4)
{
  if ((_BYTE)this[3])
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    id v8 = this[1];
    uint64_t v9 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v8 didCountMatches:a4 forString:v9];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4A84(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FindClient::didFindString(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, int a6)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    uint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = *a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v11 didFindMatches:a5 forString:v12 withMatchIndex:a6];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4B4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FindClient::didFailToFindString(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3)
{
  if (((_BYTE)this[3] & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    id v6 = this[1];
    char v7 = *(void *)a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    [WeakRetained _webView:v6 didFailToFindString:v7];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4BF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::FindClient::didAddLayerForFindOverlay(uint64_t this, WebKit::WebPageProxy *a2, CALayer *a3)
{
  if ((*(unsigned char *)(this + 24) & 8) != 0)
  {
    uint64_t v4 = this;
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    uint64_t v6 = *(void *)(v4 + 8);
    return [Weak _webView:v6 didAddLayerForFindOverlay:a3];
  }
  return this;
}

uint64_t WebKit::FindClient::didRemoveLayerForFindOverlay(uint64_t this, WebKit::WebPageProxy *a2)
{
  if ((*(unsigned char *)(this + 24) & 0x10) != 0)
  {
    uint64_t v2 = this;
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    uint64_t v4 = *(void *)(v2 + 8);
    return [Weak _webViewDidRemoveLayerForFindOverlay:v4];
  }
  return this;
}

void WebKit::FullscreenClient::willEnterFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  [this[1] willChangeValueForKey:@"fullscreenState"];
  [this[1] didChangeValueForKey:@"fullscreenState"];
  if ((_BYTE)this[3])
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    [WeakRetained _webViewWillEnterElementFullscreen:this[1]];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4D38(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::didEnterFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  [this[1] willChangeValueForKey:@"fullscreenState"];
  [this[1] didChangeValueForKey:@"fullscreenState"];
  if (((_BYTE)this[3] & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    [WeakRetained _webViewDidEnterElementFullscreen:this[1]];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4DD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::willExitFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  [this[1] willChangeValueForKey:@"fullscreenState"];
  [this[1] didChangeValueForKey:@"fullscreenState"];
  if (((_BYTE)this[3] & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    [WeakRetained _webViewWillExitElementFullscreen:this[1]];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4E68(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::didExitFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  [this[1] willChangeValueForKey:@"fullscreenState"];
  [this[1] didChangeValueForKey:@"fullscreenState"];
  if (((_BYTE)this[3] & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    [WeakRetained _webViewDidExitElementFullscreen:this[1]];
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198CE4F00(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::requestPresentingViewController(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 24) & 0x10) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *a2;
    *a2 = 0;
    char v7 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *char v7 = MEMORY[0x1E4F14398];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void *,UIViewController *,NSError *)#1}::__invoke;
    void v7[3] = &WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::descriptor;
    v7[4] = v6;
    [Weak _webView:v5 requestPresentingViewControllerWithCompletionHandler:v7];
    _Block_release(v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(UIViewController *,NSError *)>::operator()(a2);
  }
}

void sub_198CE5014(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(UIViewController *,NSError *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198CE50DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::IconLoadingDelegate::IconLoadingClient::~IconLoadingClient(WebKit::IconLoadingDelegate::IconLoadingClient *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CE0F8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v1)
  {
    if (*v1) {
      --*v1;
    }
    else {
      __break(0xC471u);
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::IconLoadingDelegate::IconLoadingClient::~IconLoadingClient(this);

  WTF::fastFree(v1, v2);
}

void WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
    if (WeakRetained)
    {
      id v8 = WeakRetained;
      id v9 = [[_WKLinkIconParameters alloc] _initWithLinkIcon:a2];
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 8);
      uint64_t v11 = *a3;
      *a3 = 0;
      unsigned int v12 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      *unsigned int v12 = MEMORY[0x1E4F14398];
      v12[1] = 50331650;
      void v12[2] = WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void *,void({block_pointer})(NSData *))#1}::__invoke;
      v12[3] = &WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::descriptor;
      char v12[4] = v11;
      [v8 webView:v10 shouldLoadIconWithParameters:v9 completionHandler:v12];
      _Block_release(v12);
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v8);
    }
    else
    {
      WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)>::operator()(a3);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)>::operator()(a3);
  }
}

void sub_198CE5320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198CE5444(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198CE5974(_Unwind_Exception *a1)
{
  char v3 = *(const void **)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v1 - 232));
  _Unwind_Resume(a1);
}

void WebKit::LegacyCustomProtocolManagerClient::startLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WebCore::ResourceRequest::nsURLRequest();
  if (v6)
  {
    char v7 = [[WKCustomProtocolLoader alloc] initWithLegacyCustomProtocolManagerProxy:a2 customProtocolID:a3 request:v6];
    uint64_t v10 = *(void *)(a1 + 8);
    id v9 = (uint64_t *)(a1 + 8);
    uint64_t v8 = v10;
    if (v10
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9),
          (uint64_t v8 = *v9) != 0))
    {
      int v11 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      int v11 = 0;
    }
    unint64_t v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
    int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    if (*v16)
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != a3)
      {
        if (v17 == -1) {
          uint64_t v18 = v16;
        }
        unsigned int v15 = (v15 + v19) & v11;
        int v16 = (uint64_t *)(v8 + 16 * v15);
        uint64_t v17 = *v16;
        ++v19;
        if (!*v16)
        {
          if (v18)
          {
            uint64_t *v18 = 0;
            v18[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            int v16 = v18;
          }
          goto LABEL_13;
        }
      }
      if (v7)
      {
        CFRelease(v7);
      }
    }
    else
    {
LABEL_13:
      uint64_t v20 = (const void *)v16[1];
      uint64_t *v16 = a3;
      v16[1] = (uint64_t)v7;
      if (v20) {
        CFRelease(v20);
      }
      uint64_t v21 = *v9;
      if (*v9) {
        int v22 = *(_DWORD *)(v21 - 12) + 1;
      }
      else {
        int v22 = 1;
      }
      *(_DWORD *)(v21 - 1objc_destroyWeak(this + 2) = v22;
      uint64_t v23 = *v9;
      if (*v9) {
        int v24 = *(_DWORD *)(v23 - 12);
      }
      else {
        int v24 = 0;
      }
      uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
      unint64_t v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25) {
          return;
        }
      }
      else if (3 * v26 > 4 * v25)
      {
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9);
    }
  }
}

void sub_198CE5C94(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LegacyCustomProtocolManagerClient::stopLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a3);
  if (v4)
  {
    uint64_t v6 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v6 == v5) {
      return;
    }
  }
  else
  {
    if (!v5) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v5)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v5);
  }
}

uint64_t WebKit::LegacyCustomProtocolManagerClient::invalidate(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    do
    {
      if (!*(_DWORD *)(result - 12)) {
        return result;
      }
      uint64_t v3 = *(unsigned int *)(result - 4);
      uint64_t v4 = (uint64_t *)(result + 16 * v3);
      uint64_t v5 = (uint64_t *)result;
      if (v3)
      {
        uint64_t v6 = 16 * v3;
        uint64_t v5 = (uint64_t *)result;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            uint64_t v5 = v4;
            break;
          }
        }
      }
      char v7 = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result, *v5);
      if (v4 == v7)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = (void *)v7[1];
        v7[1] = 0;
        if (*v2)
        {
          uint64_t v9 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
          if ((uint64_t *)v9 != v7) {
            goto LABEL_15;
          }
        }
        else if (v7)
        {
          uint64_t v9 = 0;
LABEL_15:
          if ((uint64_t *)v9 != v7) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v2, v7);
          }
        }
      }
      [v8 cancel];
      if (v8) {
        CFRelease(v8);
      }
      uint64_t result = *v2;
    }
    while (*v2);
  }
  return result;
}

void sub_198CE5E04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyDownloadClient::LegacyDownloadClient(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9CE120;
  *(void *)(a1 + 16) = 0;
  objc_initWeak((id *)(a1 + 16), a2);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFD | v3;
  if (objc_opt_respondsToSelector()) {
    __int16 v4 = 4;
  }
  else {
    __int16 v4 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFB | v4;
  if (objc_opt_respondsToSelector()) {
    __int16 v5 = 8;
  }
  else {
    __int16 v5 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFF7 | v5;
  if (objc_opt_respondsToSelector()) {
    __int16 v6 = 16;
  }
  else {
    __int16 v6 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFEF | v6;
  if (objc_opt_respondsToSelector()) {
    __int16 v7 = 32;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFDF | v7;
  if (objc_opt_respondsToSelector()) {
    __int16 v8 = 64;
  }
  else {
    __int16 v8 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFBF | v8;
  if (objc_opt_respondsToSelector()) {
    __int16 v9 = 128;
  }
  else {
    __int16 v9 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFF7F | v9;
  if (objc_opt_respondsToSelector()) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFEFF | v10;
  if (objc_opt_respondsToSelector()) {
    __int16 v11 = 512;
  }
  else {
    __int16 v11 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFDFF | v11;
  if (objc_opt_respondsToSelector()) {
    __int16 v12 = 1024;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFBFF | v12;
  if (objc_opt_respondsToSelector()) {
    __int16 v13 = 2048;
  }
  else {
    __int16 v13 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xF7FF | v13;
  if (objc_opt_respondsToSelector()) {
    __int16 v14 = 4096;
  }
  else {
    __int16 v14 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xEFFF | v14;
  if (objc_opt_respondsToSelector()) {
    __int16 v15 = 0x2000;
  }
  else {
    __int16 v15 = 0;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xDFFF | v15;
  return a1;
}

void sub_198CE60DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::legacyDidStart(uint64_t this, WebKit::DownloadProxy *a2)
{
  if (*(_WORD *)(this + 24))
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    __int16 v4 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [Weak _downloadDidStart:v4];
  }
  return this;
}

uint64_t WebKit::LegacyDownloadClient::didReceiveData(uint64_t this, WebKit::DownloadProxy *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v7 = *(_WORD *)(this + 24);
  if ((v7 & 8) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    __int16 v11 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [Weak _download:v11 didWriteData:a3 totalBytesWritten:a4 totalBytesExpectedToWrite:a5];
  }
  else if ((v7 & 4) != 0)
  {
    id v12 = objc_loadWeak((id *)(this + 16));
    __int16 v13 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [v12 _download:v13 didReceiveData:a3];
  }
  return this;
}

void WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 24) & 0x400) != 0)
  {
    __int16 v9 = (id *)(a1 + 16);
    Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
    __int16 v11 = +[_WKDownload downloadWithDownload:*(void *)(a2 + 8)];
    id v12 = *(const void **)(a3 + 8);
    CFRetain(v12);
    id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v9);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__download_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v19);
    uint64_t v15 = a3;
    __int16 v14 = v19;
    int v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v16 = MEMORY[0x1E4F14398];
    v16[1] = 50331650;
    void v16[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    void v16[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::descriptor;
    v16[4] = v15;
    v16[5] = v14;
    [Weak _download:v11 didReceiveAuthenticationChallenge:v12 completionHandler:v16];
    _Block_release(v16);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v18);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v4);
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    __int16 v7 = v19;
    int v19 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v17 = v18;
    uint64_t v18 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v5);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void sub_198CE63EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v10);
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::didCreateDestination(uint64_t this, WebKit::DownloadProxy *a2, const WTF::String *a3)
{
  if ((*(_WORD *)(this + 24) & 0x1000) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    CFTypeRef v6 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    if (*(void *)a3) {
      __int16 v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      __int16 v7 = &stru_1EEA10550;
    }
    return [Weak _download:v6 didCreateDestination:v7];
  }
  return this;
}

uint64_t WebKit::LegacyDownloadClient::processDidCrash(uint64_t this, WebKit::DownloadProxy *a2)
{
  if ((*(_WORD *)(this + 24) & 0x2000) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    uint64_t v4 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [Weak _downloadProcessDidCrash:v4];
  }
  return this;
}

void WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, void *a4, uint64_t *a5)
{
  __int16 v9 = *(_WORD *)(a1 + 24);
  if ((v9 & 2) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
    objc_msgSend(Weak, "_download:didReceiveResponse:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(void *)(a2 + 8)), WebCore::ResourceResponse::nsURLResponse(a3));
    __int16 v9 = *(_WORD *)(a1 + 24);
  }
  if ((v9 & 0x30) == 0)
  {
    uint64_t v29 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v29);
    uint64_t v21 = v29;
    uint64_t v29 = 0;
    if (!v21) {
      return;
    }
    goto LABEL_14;
  }
  if ((v9 & 0x10) == 0)
  {
    id v12 = (id *)(a1 + 16);
    id v13 = objc_loadWeak((id *)(a1 + 16));
    __int16 v14 = +[_WKDownload downloadWithDownload:*(void *)(a2 + 8)];
    if (*a4) {
      uint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v15 = &stru_1EEA10550;
    }
    id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v12);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__download_decideDestinationWithSuggestedFilename_completionHandler_, v27);
    uint64_t v17 = *a5;
    *a5 = 0;
    uint64_t v18 = v27[0];
    int v19 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *int v19 = MEMORY[0x1E4F14398];
    v19[1] = 50331650;
    v19[2] = WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void *,BOOL,NSString *)#1}::__invoke;
    v19[3] = &WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::descriptor;
    v19[4] = v18;
    v19[5] = v17;
    [v13 _download:v14 decideDestinationWithSuggestedFilename:v15 completionHandler:v19];
    _Block_release(v19);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    return;
  }
  LOBYTE(v27[0]) = 0;
  id v22 = objc_loadWeak((id *)(a1 + 16));
  uint64_t v23 = +[_WKDownload downloadWithDownload:*(void *)(a2 + 8)];
  if (*a4) {
    int v24 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v24 = &stru_1EEA10550;
  }
  uint64_t v25 = [v22 _download:v23 decideDestinationWithSuggestedFilename:v24 allowOverwrite:v27];
  uint64_t v26 = LOBYTE(v27[0]);
  MEMORY[0x19972EAD0](&v28, v25);
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, v26, &v28);
  uint64_t v21 = v28;
  uint64_t v28 = 0;
  if (v21)
  {
LABEL_14:
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
}

void sub_198CE67B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  __int16 v14 = v12;
  _Block_release(v14);
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::didFinish(uint64_t this, WebKit::DownloadProxy *a2)
{
  if ((*(_WORD *)(this + 24) & 0x40) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    uint64_t v4 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [Weak _downloadDidFinish:v4];
  }
  return this;
}

uint64_t WebKit::LegacyDownloadClient::didFail(uint64_t this, WebKit::DownloadProxy *a2, const WebCore::ResourceError *a3, API::Data *a4)
{
  if ((*(_WORD *)(this + 24) & 0x80) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    __int16 v7 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    uint64_t v8 = WebCore::ResourceError::nsError(a3);
    return [Weak _download:v7 didFailWithError:v8];
  }
  return this;
}

uint64_t WebKit::LegacyDownloadClient::legacyDidCancel(uint64_t this, WebKit::DownloadProxy *a2)
{
  if ((*(_WORD *)(this + 24) & 0x100) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(this + 16));
    uint64_t v4 = +[_WKDownload downloadWithDownload:*((void *)a2 + 1)];
    return [Weak _downloadDidCancel:v4];
  }
  return this;
}

uint64_t WebKit::LegacyDownloadClient::willSendRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
  if ((*(_WORD *)(a1 + 24) & 0x200) != 0)
  {
    Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
    __int16 v9 = +[_WKDownload downloadWithDownload:*(void *)(a2 + 8)];
    WebCore::ResourceRequestBase::url(a3);
    [Weak _download:v9 didReceiveServerRedirectToURL:WTF::URL::operator NSURL *()];
  }

  return WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(a5);
}

void WebKit::FindClient::~FindClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

void WebKit::FullscreenClient::~FullscreenClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

void WebKit::LegacyCustomProtocolManagerClient::~LegacyCustomProtocolManagerClient(WebKit::LegacyCustomProtocolManagerClient *this, void *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v2, a2);
  }
}

{
  uint64_t v3;
  uint64_t vars8;

  __int16 v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::LegacyDownloadClient::~LegacyDownloadClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

WTF::StringImpl *API::DownloadClient::decidePlaceholderPolicy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::URL::URL((WTF::URL *)&v6);
  WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)>::operator()(a3);
  uint64_t result = v6;
  CFTypeRef v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CE6C60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::DownloadClient::didReceivePlaceholderURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return WTF::CompletionHandler<void ()(void)>::operator()(a6);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebKit::ExtensionCapabilityGrant>(WTF::String const&,WebKit::ExtensionCapabilityGrant &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, long long **a3)
{
  WTF::String::operator=(a1, a2);
  __int16 v5 = *a3;
  long long v6 = **a3;
  *(void *)__int16 v5 = 0;
  *((void *)v5 + objc_destroyWeak(this + 1) = 0;
  long long v7 = v6;
  WebKit::ExtensionCapabilityGrant::operator=(a1 + 1, (uint64_t *)&v7);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v7);
}

void sub_198CE6D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    while (1)
    {
      id v12 = (WTF::StringImpl **)(v3 + 24 * v10);
      id v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            uint64_t v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v15 + 24 * v20 + 8));
          uint64_t v23 = *v21;
          WTF::StringImpl *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          int v24 = *v12;
          *id v12 = 0;
          WTF::StringImpl *v21 = v24;
          uint64_t v25 = (WebKit::ExtensionCapabilityGrant *)(v3 + 24 * v10);
          uint64_t v26 = *((void *)v25 + 1);
          uint64_t v25 = (WebKit::ExtensionCapabilityGrant *)((char *)v25 + 8);
          *(void *)uint64_t v25 = 0;
          *(void *)(v15 + 24 * v20 + 8) = v26;
          uint64_t v27 = *((void *)v25 + 1);
          *((void *)v25 + objc_destroyWeak(this + 1) = 0;
          *(void *)(v15 + 24 * v20 + 16) = v27;
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v25);
          __int16 v14 = *v12;
          *id v12 = 0;
          if (!v14) {
            goto LABEL_30;
          }
          if (*(_DWORD *)v14 == 2)
          {
LABEL_29:
            WTF::StringImpl::destroy(v14, v7);
            goto LABEL_30;
          }
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v3 + 24 * v10 + 8));
          __int16 v14 = *v12;
          *id v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              goto LABEL_29;
            }
            *(_DWORD *)v14 -= 2;
          }
        }
      }
LABEL_30:
      if (++v10 == v11) {
        goto LABEL_33;
      }
    }
  }
  if (v3)
  {
LABEL_33:
    WTF::fastFree((WTF *)(v3 - 16), v7);
  }
}

uint64_t *WebKit::ExtensionCapabilityGrant::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::String::operator=(a1, a2);
  uint64_t v4 = a2[1];
  a2[1] = 0;
  int v5 = (const void *)a1[1];
  a1[1] = v4;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

WTF::StringImpl *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  long long v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

void sub_198CE707C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(uint64_t a1, long long *a2)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9CE1A8;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 88) = a1 + 104;
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  uint64_t v5 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  char v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v30, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, a1);
  *(void *)buf = v30;
  v28[0] = v29;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    BOOL v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = v30;
    unsigned int v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = *((void *)v6 + 4);
    id v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      __int16 v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      id v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          id v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*v6 && v6[16] >= 4u)
    {
      uint64_t v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            unsigned int v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "creating ");
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v22 + 16))(v22, v6, 4, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v27 = v31;
    uint64_t v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

void sub_198CE740C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21)
{
  int v25 = 1;
  atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
  if (v25 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  int v26 = a19;
  a19 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v27);
  uint64_t v28 = *(unsigned int *)(v21 + 80);
  if (v28 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE1C0[v28])(&a14, v22 - 32);
  }
  *(_DWORD *)(v21 + 80) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 124);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 112);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_198CE7624(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  atomic_uchar *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  void v34[3];

  v34[2] = *MEMORY[0x1E4F143B8];
  char v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    int v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    int v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v30, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, (uint64_t)a1);
    *(void *)buf = v30;
    v28[0] = v29;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
    if (!v31)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = v29;
    uint64_t v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = *(NSObject **)(v2 + 32);
    BOOL v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      WTF::String::utf8();
      uint64_t v11 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v9 = v28[0];
      v28[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          BOOL v9 = (WTF *)WTF::fastFree(v9, v10);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
    }
    if (*(unsigned char *)v2 && *(unsigned __int8 *)(v2 + 16) >= 4u)
    {
      id v12 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        id v13 = *v12;
        if (v13) {
          break;
        }
        __int16 v14 = *v12;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, v13 | 1, memory_order_acquire, memory_order_acquire);
        if (v14 == v13)
        {
          uint64_t v15 = WTF::Logger::observers(v9);
          int v16 = *(unsigned int *)(v15 + 12);
          if (v16)
          {
            int v17 = *(uint64_t **)v15;
            uint64_t v18 = *(void *)v15 + 8 * v16;
            do
            {
              uint64_t v19 = *v17;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v19 + 16))(v19, v2, 4, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v22 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              ++v17;
            }
            while (v17 != (uint64_t *)v18);
          }
          uint64_t v23 = 1;
          atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v24 = v31;
    uint64_t v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v25);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v26);
  uint64_t v27 = a1[20];
  if (v27 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9CE1C0[v27])(buf, a1 + 14);
  }
  a1[20] = -1;
  return (uint64_t)a1;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  uint64_t v5 = v7;
  int v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CE7728(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE1D8[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)a2;
  *(void *)a2 = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198CE7CD8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  uint64_t v23 = a17;
  a17 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 112, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 88, v24);
  uint64_t v25 = *(unsigned int *)(v19 + 80);
  if (v25 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE1C0[v25])(&a12, v19 + 56);
  }
  *(_DWORD *)(v19 + 80) = -1;
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v32, this);
  WTF::String::String((WTF::String *)&v31, a3);
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v30, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v32, (uint64_t *)&v31, (uint64_t *)&v30, &v33);
  uint64_t v6 = v30;
  unsigned int v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = v31;
  uint64_t v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v32;
  uint64_t v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  BOOL v9 = *(NSObject **)(a1 + 32);
  int v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WTF::String::utf8();
    id v12 = v29[0] ? (char *)v29[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v10 = v29[0];
    v29[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        int v10 = (WTF *)WTF::fastFree(v10, v11);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    id v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v14 = *v13;
      if (v14) {
        break;
      }
      int v15 = *v13;
      atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
      if (v15 == v14)
      {
        uint64_t v16 = WTF::Logger::observers(v10);
        uint64_t v17 = *(unsigned int *)(v16 + 12);
        if (v17)
        {
          uint64_t v18 = *(uint64_t **)v16;
          uint64_t v19 = *(void *)v16 + 8 * v17;
          do
          {
            uint64_t v20 = *v18;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v35 + 4), this);
            int v36 = 0;
            WTF::String::String((WTF::String *)v37, a3);
            v37[2] = 0;
            WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v38, a4);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v20 + 16))(v20, a1, 4, v29);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v23 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            ++v18;
          }
          while (v18 != (uint64_t *)v19);
        }
        int v24 = 1;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v33;
  int v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CE8158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_198CE8340(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CE1F8;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 88);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CE2A0[v2])(&v6, a1 + 80);
    }
    *(_DWORD *)(a1 + 88) = -1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 64);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CE2A0[v3])(&v7, a1 + 56);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CE1F8;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 88);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CE2A0[v2])(&v7, a1 + 80);
    }
    *(_DWORD *)(a1 + 88) = -1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 64);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CE2A0[v3])(&v8, a1 + 56);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  v110[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 48);
  WebKit::grantCapability(cf, (uint64_t *)(a1 + 48), a1 + 56);
  WebKit::grantCapability(&cf[1], v2, a1 + 80);
  long long v83 = 0uLL;
  long long v84 = "operator()";
  uint64_t v85 = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x88);
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v3, &v83);
  char v5 = 0;
  char v6 = (atomic_uchar *)(v3 + 48);
  long long v87 = (WTF::StringImpl *)(v3 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v3 + 48);
  }
  char v7 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  char v8 = v7;
  if (*v7 && v7[16] >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v95, (WTF::Logger::LogSiteIdentifier *)&v83);
    WTF::String::String((WTF::String *)&v94, " resolving ");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v93, v3);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v95, (uint64_t *)&v94, (uint64_t *)&v93, &v96);
    int v10 = v93;
    int v93 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v94;
    int v94 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    id v12 = v95;
    char v95 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    id v13 = *((void *)v8 + 4);
    int v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      WTF::String::utf8();
      uint64_t v16 = v89[0] ? (char *)v89[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      char v98 = v16;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v14 = v89[0];
      v89[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          int v14 = (WTF *)WTF::fastFree(v14, v15);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      uint64_t v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v18 = *v17;
        if (v18) {
          break;
        }
        int v19 = *v17;
        atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
        if (v19 == v18)
        {
          uint64_t v20 = WTF::Logger::observers(v14);
          uint64_t v21 = *(unsigned int *)(v20 + 12);
          if (v21)
          {
            int v22 = *(uint64_t **)v20;
            uint64_t v23 = *(void *)v20 + 8 * v21;
            do
            {
              uint64_t v24 = *v22;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v98 + 4), (WTF::Logger::LogSiteIdentifier *)&v83);
              int v99 = 0;
              WTF::String::String((WTF::String *)&v100, " resolving ");
              int v101 = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v102, v3);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v89, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, v89);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v89, v25);
              for (uint64_t i = 40; i != -8; i -= 16)
              {
                uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
              }
              ++v22;
            }
            while (v22 != (uint64_t *)v23);
          }
          int v28 = 1;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          char v6 = (atomic_uchar *)(v3 + 48);
          if (v28 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v29 = v96;
    unsigned int v96 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  uint64_t v30 = *(unsigned int *)(v3 + 80);
  if (v30 != -1) {
    ((void (*)(uint8_t *, uint64_t))off_1EE9CE1C0[v30])(buf, v3 + 56);
  }
  long long v31 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  *(_OWORD *)(v3 + 56) = v31;
  *(_DWORD *)(v3 + 7objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v3 + 80) = 1;
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v3, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    uint64_t v32 = v87;
    int v33 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
    if (v33 != 1) {
      WTF::Lock::unlockSlow(v32);
    }
  }
  CFTypeRef v34 = cf[1];
  cf[1] = 0;
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = (void *)cf[0];
  cf[0] = 0;
  if (v35) {
    CFRelease(v35);
  }
  char v36 = 0;
  long long v83 = 0uLL;
  long long v84 = "invokeAsync proxy";
  uint64_t v85 = 0;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v36, 1u, memory_order_acquire, memory_order_acquire);
  if (v36) {
    uint64_t v35 = (void *)MEMORY[0x19972E8D0](v6);
  }
  *(unsigned char *)(v3 + 128) = 1;
  unsigned int v39 = *(atomic_uint **)(a1 + 8);
  unint64_t v38 = a1 + 8;
  uint64_t v37 = v39;
  if (v39) {
    atomic_fetch_add(v37 + 2, 1u);
  }
  unsigned int v40 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v35);
  long long v41 = v40;
  if (!*v40 || v40[16] < 4u) {
    goto LABEL_120;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)cf, (WTF::Logger::LogSiteIdentifier *)&v83);
  WTF::String::String((WTF::String *)&v96, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v95, v3);
  WTF::String::String((WTF::String *)&v94, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v93, (uint64_t)v37);
  WTF::String::String((WTF::String *)&v92, " isNothing:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v91);
  WTF::String::String((WTF::String *)&v90, "]");
  uint64_t result = (uint64_t *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)cf, (uint64_t *)&v96, (uint64_t *)&v95, (uint64_t *)&v94, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, &v87);
  if (!v87)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v44 = v90;
  char v90 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v43);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  int v45 = v91;
  int v91 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v43);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = v92;
  char v92 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, v43);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  int v47 = v93;
  int v93 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v43);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  long long v48 = v94;
  int v94 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v43);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v49 = v95;
  char v95 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, v43);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  int v50 = v96;
  unsigned int v96 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v43);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  int v51 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v43);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  int v52 = *((void *)v41 + 4);
  uint64_t v53 = (WTF *)os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
  if (v53)
  {
    WTF::String::utf8();
    int v55 = v89[0] ? (char *)v89[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    char v98 = v55;
    _os_log_impl(&dword_1985F2000, v52, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v53 = v89[0];
    v89[0] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1) {
        uint64_t v53 = (WTF *)WTF::fastFree(v53, v54);
      }
      else {
        --*(_DWORD *)v53;
      }
    }
  }
  if (*v41 && v41[16] >= 4u)
  {
    uint64_t v56 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v57 = *v56;
      if (v57) {
        break;
      }
      int v58 = *v56;
      atomic_compare_exchange_strong_explicit(v56, (unsigned __int8 *)&v58, v57 | 1, memory_order_acquire, memory_order_acquire);
      if (v58 == v57)
      {
        unint64_t v81 = v38;
        uint64_t v59 = WTF::Logger::observers(v53);
        uint64_t v60 = *(unsigned int *)(v59 + 12);
        if (v60)
        {
          uint64_t v61 = *(uint64_t **)v59;
          uint64_t v82 = *(void *)v59 + 8 * v60;
          do
          {
            uint64_t v62 = *v61;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v98 + 4), (WTF::Logger::LogSiteIdentifier *)&v83);
            int v99 = 0;
            WTF::String::String((WTF::String *)&v100, " invoking chainTo() [");
            int v101 = 0;
            WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v102, v3);
            int v103 = 0;
            WTF::String::String((WTF::String *)v104, " chainedPromise:");
            v104[2] = 0;
            WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v105, (uint64_t)v37);
            int v106 = 0;
            WTF::String::String((WTF::String *)v107, " isNothing:");
            void v107[2] = 0;
            WTF::LogArgument<BOOL>::toString<BOOL>(&v108);
            int v109 = 0;
            WTF::String::String((WTF::String *)v110, "]");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v89, (uint64_t)buf, 8uLL);
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v62 + 16))(v62, v41, 4, v89);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v89, v63);
            for (uint64_t j = 120; j != -8; j -= 16)
            {
              uint64_t v65 = *(WTF::StringImpl **)&buf[j];
              *(void *)&buf[j] = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2) {
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v54);
                }
                else {
                  *(_DWORD *)v65 -= 2;
                }
              }
            }
            ++v61;
          }
          while (v61 != (uint64_t *)v82);
        }
        int v66 = 1;
        atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v66, 0, memory_order_release, memory_order_relaxed);
        unint64_t v38 = v81;
        if (v66 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t v67 = v87;
  long long v87 = 0;
  if (!v67)
  {
LABEL_120:
    if (v37) {
      goto LABEL_121;
    }
    goto LABEL_123;
  }
  if (*(_DWORD *)v67 != 2)
  {
    *(_DWORD *)v67 -= 2;
    goto LABEL_120;
  }
  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v54);
  if (v37)
  {
LABEL_121:
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v37 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
    }
  }
LABEL_123:
  unsigned __int8 v68 = atomic_load((unsigned __int8 *)(v3 + 129));
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(*(atomic_uchar **)v38, v68, (WTF::Logger::LogSiteIdentifier *)&v83);
  if (*(_DWORD *)(v3 + 80))
  {
    uint64_t result = WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(v3, v38, v69, v70, v71, v72, v73, v74);
  }
  else
  {
    uint64_t result = (uint64_t *)(v3 + 112);
    uint64_t v75 = *(unsigned int *)(v3 + 124);
    if (v75 == *(_DWORD *)(v3 + 120))
    {
      uint64_t result = (uint64_t *)WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v75 + 1, v38);
      unint64_t v38 = (unint64_t)result;
      LODWORD(v75) = *(_DWORD *)(v3 + 124);
      uint64_t v76 = *(void *)(v3 + 112);
    }
    else
    {
      uint64_t v76 = *result;
    }
    uint64_t v77 = v76 + 40 * v75;
    long long v78 = *(atomic_uchar **)v38;
    *(void *)unint64_t v38 = 0;
    *(void *)uint64_t v77 = v78;
    v77 += 8;
    long long v79 = *(_OWORD *)(v38 + 24);
    *(_OWORD *)uint64_t v77 = *(_OWORD *)(v38 + 8);
    *(_OWORD *)(v77 + 16) = v79;
    ++*(_DWORD *)(v3 + 124);
  }
  int v80 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v80, 0, memory_order_release, memory_order_relaxed);
  if (v80 != 1) {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  return result;
}

void sub_198CE8FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::Lock *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,CFTypeRef cf,uint64_t a31,WTF::StringImpl *a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,WTF::StringImpl *a39,WTF::StringImpl *a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44)
{
  if (atomic_fetch_add((atomic_uint *volatile)v44 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v44 + 2);
    (*(void (**)(unsigned int *))(*(void *)v44 + 16))(v44);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::grantCapability(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    BOOL v4 = *(unsigned char *)(a3 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    *a1 = 0;
  }
  else
  {
    aBlocuint64_t k = _Block_copy(&__block_literal_global_23);
    WebKit::ExtensionProcess::grantCapability(a3, a2, (uint64_t *)&aBlock, a1);
    _Block_release(aBlock);
  }
}

void sub_198CE9630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v23 = &v25;
  uint64_t v24 = 1;
  int v26 = (WTF::NativePromiseBase **)&v28;
  uint64_t v27 = 1;
  BOOL v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v28, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    int v26 = (WTF::NativePromiseBase **)v4;
    int v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v27) = v5;
  }
  HIDWORD(v27) = v6;
  HIDWORD(v24) = 0;
  *(void *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v4);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v23 = (uint64_t *)v7;
  unsigned int v8 = *(_DWORD *)(a1 + 124);
  LODWORD(v24) = *(_DWORD *)(a1 + 120);
  HIDWORD(v24) = v8;
  v22[0] = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  v22[1] = 0;
  *(void *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  if (HIDWORD(v27))
  {
    uint64_t v17 = v26;
    uint64_t v18 = 8 * HIDWORD(v27);
    do
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(*v17++, a1, a2);
      v18 -= 8;
    }
    while (v18);
    uint64_t v7 = (uint64_t)v23;
    unsigned int v8 = HIDWORD(v24);
  }
  if (v8)
  {
    uint64_t v19 = 40 * v8;
    do
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(a1, v7, v11, v12, v13, v14, v15, v16);
      v7 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v20);
}

void sub_198CE9790(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  int v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 129)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      v16[0] = v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v16, (WTF::NativePromiseBase *)((char *)v5 + 24));
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v15, a2);
        uint64_t v13 = v15;
        (*(void (**)(void *__return_ptr))(*(void *)v15 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(char *, void *))off_1EE9CE1D8[v17])(&v18, v16);
        }
        int v17 = -1;
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      else
      {
        WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)v16, a2);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(uint64_t *, void *))off_1EE9CE1D8[v17])(&v15, v16);
        }
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9CE250;
    v8[1] = v5;
    uint64_t v8[2] = v5;
    void v8[3] = a2;
    v16[0] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v16);
    uint64_t result = (unsigned __int8 *)v16[0];
    v16[0] = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198CE9A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CE1D8[a13])(&a10, &a11);
  }
  char v20 = 0;
  atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    MEMORY[0x19972E8D0]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v19 = v9;
  long long v20 = *(_OWORD *)(a2 + 8);
  long long v21 = *(_OWORD *)(a2 + 24);
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  char v10 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v18[2] = "<chained promise>";
  uint64_t v18[3] = 0;
  atomic_uchar *volatile v11 = (WTF::NativePromiseBase *)(v9 + 48);
  int v22 = (atomic_uchar *)(v9 + 48);
  char v23 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v9 + 48), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    atomic_uchar *volatile v11 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v11, a2, a3, a4, a5, a6, a7, a8, v18[0]);
  }
  int v12 = (unsigned char *)WTF::NativePromiseBase::logChannel(v11);
  if (*v12 && v12[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v18, " settling chained promise ", v9);
  }
  uint64_t v13 = *(unsigned int *)(v9 + 80);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v13 == -1)
  {
    if (v14 == -1) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v24 = v9 + 56;
    ((void (*)(uint64_t *))off_1EE9CE268[v14])(&v24);
    goto LABEL_13;
  }
  if (v14 != -1) {
    goto LABEL_12;
  }
  ((void (*)(uint64_t *, uint64_t))off_1EE9CE1C0[v13])(&v24, v9 + 56);
  *(_DWORD *)(v9 + 80) = -1;
LABEL_13:
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v9, &v22);
  if (v23)
  {
    uint64_t v15 = (WTF::Lock *)v22;
    int v16 = 1;
    atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != 1) {
      WTF::Lock::unlockSlow(v15);
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  return WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(&v19);
}

void sub_198CE9DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 16))(v5);
    }
  }
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *uint64_t v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_198CE9ED8(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  int v5 = (atomic_uchar *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 80) == 1)
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  else
  {
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_198CE9FA4(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v55[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v40, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v39, a2);
  WTF::String::String((WTF::String *)&v38, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v36, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v35, a4);
  WTF::String::String((WTF::String *)&v34, "]");
  v33[0] = v39;
  uint64_t v46 = v38;
  *(void *)buf = v40;
  uint64_t v44 = v36;
  int v45 = v37;
  uint64_t v42 = v34;
  unsigned int v43 = v35;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v33, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v41);
  if (v41)
  {
    int v7 = v34;
    CFTypeRef v34 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v35;
    uint64_t v35 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v36;
    char v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    char v10 = v37;
    uint64_t v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v6);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    atomic_uchar *volatile v11 = v38;
    unint64_t v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v6);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    int v12 = v39;
    unsigned int v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v6);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v40;
    unsigned int v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v6);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = *(NSObject **)(a1 + 32);
    uint64_t v15 = (WTF *)os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      WTF::String::utf8();
      int v17 = v33[0] ? (char *)v33[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v15 = v33[0];
      v33[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          uint64_t v15 = (WTF *)WTF::fastFree(v15, v16);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      char v18 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v19 = *v18;
        if (v19) {
          break;
        }
        int v20 = *v18;
        atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v20, v19 | 1, memory_order_acquire, memory_order_acquire);
        if (v20 == v19)
        {
          uint64_t v30 = a2;
          uint64_t v21 = WTF::Logger::observers(v15);
          uint64_t v22 = *(unsigned int *)(v21 + 12);
          if (v22)
          {
            char v23 = *(uint64_t **)v21;
            uint64_t v29 = *(void *)v21 + 8 * v22;
            do
            {
              uint64_t v24 = *v23;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
              int v48 = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, v30);
              int v50 = 0;
              WTF::String::String((WTF::String *)v51, " aborting [callback:");
              v51[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v51[6] = 0;
              WTF::String::String((WTF::String *)v52, " callSite:");
              v52[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v53, a4);
              int v54 = 0;
              WTF::String::String((WTF::String *)v55, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v24 + 16))(v24, a1, 4, v33);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v25);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v16);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
              }
              ++v23;
            }
            while (v23 != (uint64_t *)v29);
          }
          int v28 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v41;
    long long v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198CEA494(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v35 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, a2);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EE9CE230[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 16) = v3;
  }
  return a1;
}

void sub_198CEA748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 16);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE1D8[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CE250;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CE250;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v9, v7);
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        ((void (*)(char *, void *))off_1EE9CE1D8[v11])(&v12, v10);
      }
      int v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)v10, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, void *))off_1EE9CE1D8[v11])(&v9, v10);
      }
    }
  }
  return result;
}

void sub_198CEAB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9CE1D8[a13])(v14 - 33, &a11);
  }
  a13 = -1;
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE1C0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9CE1C0[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9CE280[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        char v12 = v15;
        if (v8 == 1) {
          uint64_t v13 = v15;
        }
        else {
          uint64_t v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          char v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          uint64_t v14 = v15;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        uint64_t v14 = v15;
      }
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9CE1D8[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9CE1D8[v16])(v17, v15);
  }
  return result;
}

void sub_198CEAD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9CE1D8[a16])(v16 - 33, &a14);
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9CE1D8[a12])(v16 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE1C0[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE1D8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CE290[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN6WebKit33PlatformExtensionCapabilityGrantsENS7_29ExtensionCapabilityGrantErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, const void **a2, const void **a3)
{
  char v6 = *a2;
  uint64_t v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  char v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *a2;
  *a2 = v7;
  if (v8) {
    CFRelease(v8);
  }
  char v9 = a3[1];
  a3[1] = 0;
  BOOL v10 = a2[1];
  a2[1] = v9;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *a3;
  *a3 = v6;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = a3[1];
  a3[1] = v5;
  if (v12)
  {
    CFRelease(v12);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN6WebKit33PlatformExtensionCapabilityGrantsENS7_29ExtensionCapabilityGrantErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = (WTF *)*result;
      unsigned int v4 = *((_DWORD *)result + 3);
      int v5 = 40 * a2;
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + objc_destroyWeak(this + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *uint64_t v2 = (uint64_t)result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t result = (uint64_t *)v3;
        do
        {
          uint64_t v8 = *result;
          *uint64_t result = 0;
          *unint64_t v7 = v8;
          long long v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + objc_destroyWeak(this + 1) = v9;
          uint64_t result = WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *uint64_t v2 = 0;
          *((_DWORD *)v2 + objc_destroyWeak(this + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unsigned char *std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_198CEB1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CE2A0[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CE2E0;
  unint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CE2E0;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = (WTF::StringImpl **)(a1 + 24);
  int v5 = *(int **)(a1 + 24);
  if (v5)
  {
    int v7 = *v5;
    id v42 = *(id *)(a1 + 24);
    uint64_t v43 = 0;
    int *v5 = v7 + 4;
  }
  else
  {
    id v42 = 0;
    uint64_t v43 = 0;
  }
  long long v41 = (unint64_t)v5;
  if (!*(_DWORD *)(a2 + 16))
  {
    WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)&v42, (uint64_t *)a2);
    if (*(_DWORD *)(a2 + 16))
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)&v41, (uint64_t *)(a2 + 8));
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8 && *(void *)(v8 + 8))
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    uint64_t v40 = 2;
    uint64_t v39 = v9;
    if (*(unsigned char *)(a1 + 32))
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*(void *)(v4 + 8) + 8) + 16))(buf);
      BOOL v10 = WebKit::finalizeGrant(v6, *(uint64_t *)buf, &v42);
      uint64_t v11 = *(void *)buf;
      *(void *)buf = 0;
      if (v11) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      }
      char v12 = qword_1EB358320;
      if (v10)
      {
        uint64_t v9 = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          WTF::String::utf8();
          uint64_t v13 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v13;
          _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] granted for GPU process", buf, 0x16u);
          uint64_t v9 = (uint64_t)v38;
          unint64_t v38 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1) {
              uint64_t v9 = WTF::fastFree((WTF *)v9, v14);
            }
            else {
              --*(_DWORD *)v9;
            }
          }
        }
      }
      else
      {
        uint64_t v9 = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR);
        if (v9)
        {
          WTF::String::utf8();
          uint64_t v34 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to grant for GPU process", buf, 0x16u);
          uint64_t v9 = (uint64_t)v38;
          unint64_t v38 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1) {
              uint64_t v9 = WTF::fastFree((WTF *)v9, v35);
            }
            else {
              --*(_DWORD *)v9;
            }
          }
        }
        if (HIDWORD(v40) == v40)
        {
          uint64_t v9 = (uint64_t)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v39, (unint64_t)&v42);
        }
        else
        {
          int v21 = HIDWORD(v40) + 1;
          uint64_t v22 = (void *)(v39 + 16 * HIDWORD(v40));
          id v23 = v42;
          id v42 = 0;
          *uint64_t v22 = v23;
          uint64_t v24 = v43;
          uint64_t v43 = 0;
          v22[1] = v24;
          HIDWORD(v40) = v21;
        }
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*(void *)(v4 + 8) + 8) + 24))(buf);
      BOOL v25 = WebKit::finalizeGrant(v6, *(uint64_t *)buf, (id *)&v41);
      uint64_t v26 = *(void *)buf;
      *(void *)buf = 0;
      if (v26) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v26 + 16));
      }
      uint64_t v27 = qword_1EB358320;
      if (v25)
      {
        uint64_t v9 = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          WTF::String::utf8();
          if (v38) {
            int v28 = (char *)v38 + 16;
          }
          else {
            int v28 = 0;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v28;
          _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] granted for WebContent process", buf, 0x16u);
          uint64_t v9 = (uint64_t)v38;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1) {
              uint64_t v9 = WTF::fastFree(v38, v29);
            }
            else {
              --*(_DWORD *)v38;
            }
          }
        }
      }
      else
      {
        uint64_t v9 = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR);
        if (v9)
        {
          WTF::String::utf8();
          uint64_t v36 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "operator()";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v36;
          _os_log_error_impl(&dword_1985F2000, v27, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to grant for WebContent process", buf, 0x16u);
          uint64_t v9 = (uint64_t)v38;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1) {
              uint64_t v9 = WTF::fastFree(v38, v37);
            }
            else {
              --*(_DWORD *)v38;
            }
          }
        }
        if (HIDWORD(v40) == v40)
        {
          uint64_t v9 = (uint64_t)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v39, (unint64_t)&v41);
        }
        else
        {
          int v30 = HIDWORD(v40) + 1;
          long long v31 = (void *)(v39 + 16 * HIDWORD(v40));
          uint64_t v32 = v41;
          *(void *)&long long v41 = 0;
          *long long v31 = v32;
          uint64_t v33 = *((void *)&v41 + 1);
          *((void *)&v41 + objc_destroyWeak(this + 1) = 0;
          v31[1] = v33;
          HIDWORD(v40) = v30;
        }
      }
    }
    WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v9, (uint64_t)&v39);
    int v20 = &v39;
  }
  else
  {
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)buf = v15;
    *(void *)&uint8_t buf[8] = 0x200000002;
    id v16 = v42;
    id v42 = 0;
    *(void *)uint64_t v15 = v16;
    uint64_t v17 = v43;
    uint64_t v43 = 0;
    *(void *)(v15 + 8) = v17;
    long long v18 = v41;
    long long v41 = 0uLL;
    *(_OWORD *)(v15 + 16) = v18;
    WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v15, (uint64_t)buf);
    int v20 = (uint64_t *)buf;
  }
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v19);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v41);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v42);
}

void sub_198CEB89C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va1);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va2);
  _Unwind_Resume(a1);
}

BOOL WebKit::finalizeGrant(WTF::StringImpl **a1, uint64_t a2, id *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v15 = qword_1EB358320;
    BOOL result = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    WTF::String::utf8();
    if (v26) {
      id v16 = (char *)v26 + 16;
    }
    else {
      id v16 = 0;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "finalizeGrant";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v16;
    uint64_t v17 = "%{public}s[envID=%{public}s] auxiliaryProcess is null";
LABEL_20:
    _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0x16u);
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v19);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    return 0;
  }
  uint64_t v5 = (uint64_t *)(a2 + 392);
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a2 + 392), a1, (const WTF::StringImpl *)a3);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 392);
  if (v8) {
    v8 += 24 * *(unsigned int *)(v8 - 4);
  }
  if (v8 == v6)
  {
    uint64_t v15 = qword_1EB358320;
    BOOL result = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    WTF::String::utf8();
    if (v26) {
      long long v18 = (char *)v26 + 16;
    }
    else {
      long long v18 = 0;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "finalizeGrant";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v18;
    uint64_t v17 = "%{public}s[envID=%{public}s] grant previously revoked";
    goto LABEL_20;
  }
  if (![a3[1] isValid])
  {
    int v20 = qword_1EB358320;
    if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      uint64_t v22 = v26 ? (uint64_t)v26 + 16 : 0;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "finalizeGrant";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v22;
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] grant invalid", buf, 0x16u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v23);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    if (*v5)
    {
      uint64_t v21 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
      if (v21 == v7) {
        return 0;
      }
    }
    else
    {
      if (!v7) {
        return 0;
      }
      uint64_t v21 = 0;
    }
    if (v21 != v7) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, (WTF::StringImpl **)v7);
    }
    return 0;
  }
  if ([*(id *)(v7 + 16) isValid])
  {
    uint64_t v9 = qword_1EB358320;
    if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v26) {
        uint64_t v24 = (char *)v26 + 16;
      }
      else {
        uint64_t v24 = 0;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "finalizeGrant";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v24;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] grant not expected to be valid", buf, 0x16u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v10 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
    *(void *)buf = v10;
    *(void *)&uint8_t buf[8] = 0x100000001;
    uint64_t v11 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    *(void *)uint64_t v10 = v11;
    uint64_t v12 = *(void *)(v7 + 16);
    *(void *)(v7 + 16) = 0;
    *((void *)v10 + objc_destroyWeak(this + 1) = v12;
    WebKit::ExtensionCapabilityGranter::invalidateGrants(v10, (uint64_t)buf);
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v13);
  }
  WebKit::ExtensionCapabilityGrant::operator=((uint64_t *)(v7 + 8), (uint64_t *)a3);
  return 1;
}

void sub_198CEBCC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v11)
  {
    int v11 = v8 & v6;
    uint64_t v9 = (WTF **)(v3 + 24 * (v8 & v6));
    uint64_t v12 = *v9;
    if (*v9 == (WTF *)-1) {
      goto LABEL_10;
    }
    if (!v12) {
      break;
    }
    if (WTF::equal(v12, *a2, a3)) {
      return (uint64_t)v9;
    }
LABEL_10:
    ++i;
  }
  if (*a1) {
    return *a1 + 24 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(a2 + 1));
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1);
    }
  }
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CE308;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9CE338;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9CE308;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9CE338;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a3 + 16);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v6 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (v5) {
      unsigned int v7 = "Rejecting";
    }
    else {
      unsigned int v7 = "Resolving";
    }
    uint64_t v40 = (char *)v7;
    WTF::String::String((WTF::String *)&v51, v7);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v47, a2);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = v44;
    uint64_t v44 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = v45;
    uint64_t v45 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v46;
    uint64_t v46 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v47;
    int v47 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v48;
    int v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v49;
    uint64_t v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    id v16 = v50;
    int v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v51;
    int v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = *(NSObject **)(v42 + 32);
    char v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      uint64_t v21 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      char v19 = v43[0];
      v43[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          char v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            uint64_t v27 = *(uint64_t **)v25;
            uint64_t v39 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v28 = *v27;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v40);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v60, a2);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v29);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                long long v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v39);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v33 = v52;
    int v52 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  char v34 = 0;
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
  if (v34) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v36 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v36)
  {
    *(_OWORD *)buf = 0uLL;
    int v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v36, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v36)
  {
    uint64_t v37 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v36);
    return WTF::fastFree((WTF *)v37, v38);
  }
  return result;
}

void sub_198CEC668(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,char a35)
{
  int v35 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  unsigned int v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

void sub_198CEC9E4(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(uint64_t a1, long long *a2)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9CE368;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = a1 + 88;
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  uint64_t v5 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  char v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v30, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, a1);
  *(void *)buf = v30;
  v28[0] = v29;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    BOOL v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = v30;
    int v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = *((void *)v6 + 4);
    uint64_t v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      uint64_t v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          uint64_t v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*v6 && v6[16] >= 4u)
    {
      uint64_t v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            int v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "creating ");
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v22 + 16))(v22, v6, 4, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v27 = v31;
    long long v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

void sub_198CECD74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21)
{
  int v25 = 1;
  atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
  if (v25 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  int v26 = a19;
  a19 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v27);
  uint64_t v28 = *(unsigned int *)(v21 + 64);
  if (v28 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE380[v28])(&a14, v22 - 16);
  }
  *(_DWORD *)(v21 + 64) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_198CECF8C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  atomic_uchar *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  void v34[3];

  v34[2] = *MEMORY[0x1E4F143B8];
  char v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    int v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    int v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v30, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, (uint64_t)a1);
    *(void *)buf = v30;
    v28[0] = v29;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
    if (!v31)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = v29;
    uint64_t v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v7 = v30;
    int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    unsigned int v8 = *(NSObject **)(v2 + 32);
    BOOL v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      WTF::String::utf8();
      int v11 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v9 = v28[0];
      v28[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          BOOL v9 = (WTF *)WTF::fastFree(v9, v10);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
    }
    if (*(unsigned char *)v2 && *(unsigned __int8 *)(v2 + 16) >= 4u)
    {
      uint64_t v12 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v13 = *v12;
        if (v13) {
          break;
        }
        uint64_t v14 = *v12;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, v13 | 1, memory_order_acquire, memory_order_acquire);
        if (v14 == v13)
        {
          uint64_t v15 = WTF::Logger::observers(v9);
          int v16 = *(unsigned int *)(v15 + 12);
          if (v16)
          {
            int v17 = *(uint64_t **)v15;
            uint64_t v18 = *(void *)v15 + 8 * v16;
            do
            {
              uint64_t v19 = *v17;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v19 + 16))(v19, v2, 4, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v22 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              ++v17;
            }
            while (v17 != (uint64_t *)v18);
          }
          int v23 = 1;
          atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v24 = v31;
    long long v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v25);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v26);
  uint64_t v27 = a1[16];
  if (v27 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9CE380[v27])(buf, a1 + 14);
  }
  a1[16] = -1;
  return (uint64_t)a1;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  uint64_t v5 = v7;
  int v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CED090(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_198CED4D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  int v23 = a17;
  a17 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 96, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 72, v24);
  uint64_t v25 = *(unsigned int *)(v19 + 64);
  if (v25 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE380[v25])(&a12, v19 + 56);
  }
  *(_DWORD *)(v19 + 64) = -1;
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v32, this);
  WTF::String::String((WTF::String *)&v31, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v30, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v32, (uint64_t *)&v31, (uint64_t *)&v30, &v33);
  uint64_t v6 = v30;
  int v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = v31;
  long long v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unsigned int v8 = v32;
  int v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  BOOL v9 = *(NSObject **)(a1 + 32);
  int v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WTF::String::utf8();
    uint64_t v12 = v29[0] ? (char *)v29[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    int v35 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v10 = v29[0];
    v29[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        int v10 = (WTF *)WTF::fastFree(v10, v11);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v14 = *v13;
      if (v14) {
        break;
      }
      int v15 = *v13;
      atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
      if (v15 == v14)
      {
        uint64_t v16 = WTF::Logger::observers(v10);
        uint64_t v17 = *(unsigned int *)(v16 + 12);
        if (v17)
        {
          uint64_t v18 = *(uint64_t **)v16;
          uint64_t v19 = *(void *)v16 + 8 * v17;
          do
          {
            uint64_t v20 = *v18;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v35 + 4), this);
            int v36 = 0;
            WTF::String::String((WTF::String *)v37, a3);
            v37[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v38, a4);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v20 + 16))(v20, a1, 4, v29);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              int v23 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            ++v18;
          }
          while (v18 != (uint64_t *)v19);
        }
        int v24 = 1;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v33;
  int v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CED950(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_198CEDB38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9CE3A8;
  uint64_t v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9CE3A8;
  uint64_t v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  v91[1] = *MEMORY[0x1E4F143B8];
  v70[0] = 0;
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = *(void **)(a1 + 56);
  if (v2) {
    [v3 activateWithError:v70];
  }
  else {
    [v3 suspendWithError:v70];
  }
  uint64_t v4 = v70[0];
  if (v70[0])
  {
    uint64_t v5 = qword_1EB358320;
    if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v4;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%{public}s failed with error: %{public}@", buf, 0x16u);
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = "operator()";
    uint64_t v81 = 0;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v6, (long long *)buf);
    char v7 = 0;
    unsigned int v8 = (WTF::NativePromiseBase *)(v6 + 48);
    int v66 = (WTF::NativePromiseBase *)(v6 + 48);
    LOBYTE(v67) = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      unsigned int v8 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    BOOL v9 = (unsigned char *)WTF::NativePromiseBase::logChannel(v8);
    if (*v9 && v9[16] >= 4u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v9, (WTF::Logger::LogSiteIdentifier *)buf, " rejecting ", v6);
    }
    uint64_t v10 = *(unsigned int *)(v6 + 64);
    if (v10 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9CE380[v10])(&v79, v6 + 56);
    }
    *(_WORD *)(v6 + 56) = 256;
    *(_DWORD *)(v6 + 64) = 1;
    int v11 = (WTF::Lock *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v6, (atomic_uchar *volatile *)&v66);
  }
  else
  {
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = "operator()";
    uint64_t v81 = 0;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v6, (long long *)buf);
    char v12 = 0;
    uint64_t v13 = (WTF::NativePromiseBase *)(v6 + 48);
    int v66 = (WTF::NativePromiseBase *)(v6 + 48);
    LOBYTE(v67) = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    int v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
    if (*v14 && v14[16] >= 4u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v14, (WTF::Logger::LogSiteIdentifier *)buf, " resolving ", v6);
    }
    uint64_t v15 = *(unsigned int *)(v6 + 64);
    if (v15 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9CE380[v15])(&v79, v6 + 56);
    }
    *(_WORD *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 64) = 1;
    int v11 = (WTF::Lock *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v6, (atomic_uchar *volatile *)&v66);
  }
  if ((_BYTE)v67)
  {
    int v11 = v66;
    int v16 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != 1) {
      int v11 = (WTF::Lock *)WTF::Lock::unlockSlow(v11);
    }
  }
  char v17 = 0;
  int v66 = 0;
  uint64_t v67 = 0;
  unsigned __int8 v68 = "invokeAsync proxy";
  uint64_t v69 = 0;
  uint64_t v18 = (atomic_uchar *)(v6 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
  if (v17) {
    int v11 = (WTF::Lock *)MEMORY[0x19972E8D0](v6 + 48);
  }
  *(unsigned char *)(v6 + 11objc_destroyWeak(this + 2) = 1;
  int v21 = *(atomic_uint **)(a1 + 8);
  unint64_t v20 = a1 + 8;
  uint64_t v19 = v21;
  if (v21) {
    atomic_fetch_add(v19 + 2, 1u);
  }
  int v22 = (unsigned char *)WTF::NativePromiseBase::logChannel(v11);
  int v23 = v22;
  if (!*v22 || v22[16] < 4u) {
    goto LABEL_92;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v78, (WTF::Logger::LogSiteIdentifier *)&v66);
  WTF::String::String((WTF::String *)&v77, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v76, v6);
  WTF::String::String((WTF::String *)&v75, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v74, (uint64_t)v19);
  WTF::String::String((WTF::String *)&v73, " isNothing:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v72);
  WTF::String::String((WTF::String *)&v71, "]");
  uint64_t result = (uint64_t *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, &v79);
  if (!v79)
  {
    __break(0xC471u);
    return result;
  }
  int v26 = v71;
  uint64_t v71 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v72;
  uint64_t v72 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = v73;
  uint64_t v73 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v25);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = v74;
  uint64_t v74 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v25);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  int v30 = v75;
  uint64_t v75 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v25);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  long long v31 = v76;
  uint64_t v76 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v25);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  int v32 = v77;
  uint64_t v77 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v25);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  int v33 = v78;
  long long v78 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v25);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  char v34 = *((void *)v23 + 4);
  int v35 = (WTF *)os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    WTF::String::utf8();
    uint64_t v37 = v70[0] ? (char *)v70[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v37;
    _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v35 = v70[0];
    v70[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1) {
        int v35 = (WTF *)WTF::fastFree(v35, v36);
      }
      else {
        --*(_DWORD *)v35;
      }
    }
  }
  if (*v23 && v23[16] >= 4u)
  {
    unint64_t v38 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v39 = *v38;
      if (v39) {
        break;
      }
      int v40 = *v38;
      atomic_compare_exchange_strong_explicit(v38, (unsigned __int8 *)&v40, v39 | 1, memory_order_acquire, memory_order_acquire);
      if (v40 == v39)
      {
        uint64_t v65 = v6;
        uint64_t v63 = (atomic_uchar *)(v6 + 48);
        uint64_t v41 = WTF::Logger::observers(v35);
        uint64_t v42 = *(unsigned int *)(v41 + 12);
        if (v42)
        {
          uint64_t v43 = *(uint64_t **)v41;
          uint64_t v64 = *(void *)v41 + 8 * v42;
          do
          {
            uint64_t v44 = *v43;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v66);
            *(_DWORD *)&uint8_t buf[16] = 0;
            WTF::String::String((WTF::String *)&v81, " invoking chainTo() [");
            int v82 = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v83, v65);
            int v84 = 0;
            WTF::String::String((WTF::String *)v85, " chainedPromise:");
            v85[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v86, (uint64_t)v19);
            int v87 = 0;
            WTF::String::String((WTF::String *)v88, " isNothing:");
            v88[2] = 0;
            WTF::LogArgument<BOOL>::toString<BOOL>(&v89);
            int v90 = 0;
            WTF::String::String((WTF::String *)v91, "]");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v70, (uint64_t)buf, 8uLL);
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v44 + 16))(v44, v23, 4, v70);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v45);
            for (uint64_t i = 120; i != -8; i -= 16)
            {
              int v47 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2) {
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v36);
                }
                else {
                  *(_DWORD *)v47 -= 2;
                }
              }
            }
            ++v43;
          }
          while (v43 != (uint64_t *)v64);
        }
        int v48 = 1;
        atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
        uint64_t v6 = v65;
        uint64_t v18 = v63;
        if (v48 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t v49 = v79;
  long long v79 = 0;
  if (!v49)
  {
LABEL_92:
    if (v19) {
      goto LABEL_93;
    }
    goto LABEL_95;
  }
  if (*(_DWORD *)v49 != 2)
  {
    *(_DWORD *)v49 -= 2;
    goto LABEL_92;
  }
  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v36);
  if (v19)
  {
LABEL_93:
    if (atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v19 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
    }
  }
LABEL_95:
  unsigned __int8 v50 = atomic_load((unsigned __int8 *)(v6 + 113));
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(*(atomic_uchar **)v20, v50, (WTF::Logger::LogSiteIdentifier *)&v66);
  if (*(_DWORD *)(v6 + 64))
  {
    uint64_t result = WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(v6, v20, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    uint64_t result = (uint64_t *)(v6 + 96);
    uint64_t v57 = *(unsigned int *)(v6 + 108);
    if (v57 == *(_DWORD *)(v6 + 104))
    {
      uint64_t result = (uint64_t *)WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v57 + 1, v20);
      unint64_t v20 = (unint64_t)result;
      LODWORD(v57) = *(_DWORD *)(v6 + 108);
      uint64_t v58 = *(void *)(v6 + 96);
    }
    else
    {
      uint64_t v58 = *result;
    }
    uint64_t v59 = v58 + 40 * v57;
    uint64_t v60 = *(atomic_uchar **)v20;
    *(void *)unint64_t v20 = 0;
    *(void *)uint64_t v59 = v60;
    v59 += 8;
    long long v61 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)uint64_t v59 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v59 + 16) = v61;
    ++*(_DWORD *)(v6 + 108);
  }
  int v62 = 1;
  atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v62, 0, memory_order_release, memory_order_relaxed);
  if (v62 != 1) {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v6 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  return result;
}

void sub_198CEE524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::Lock *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::Lock *a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38)
{
  if (atomic_fetch_add((atomic_uint *volatile)v38 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(void *)v38 + 16))(v38);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v32, this);
  WTF::String::String((WTF::String *)&v31, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v30, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v32, (uint64_t *)&v31, (uint64_t *)&v30, &v33);
  uint64_t v6 = v30;
  int v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = v31;
  long long v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unsigned int v8 = v32;
  int v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  BOOL v9 = *(NSObject **)(a1 + 32);
  uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WTF::String::utf8();
    char v12 = v29[0] ? (char *)v29[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    int v35 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v10 = v29[0];
    v29[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v14 = *v13;
      if (v14) {
        break;
      }
      int v15 = *v13;
      atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
      if (v15 == v14)
      {
        uint64_t v16 = WTF::Logger::observers(v10);
        uint64_t v17 = *(unsigned int *)(v16 + 12);
        if (v17)
        {
          uint64_t v18 = *(uint64_t **)v16;
          uint64_t v19 = *(void *)v16 + 8 * v17;
          do
          {
            uint64_t v20 = *v18;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v35 + 4), this);
            int v36 = 0;
            WTF::String::String((WTF::String *)v37, a3);
            v37[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v38, a4);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v20 + 16))(v20, a1, 4, v29);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              int v23 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            ++v18;
          }
          while (v18 != (uint64_t *)v19);
        }
        int v24 = 1;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v33;
  int v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198CEEC88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v23 = &v25;
  uint64_t v24 = 1;
  int v26 = (WTF::NativePromiseBase **)&v28;
  uint64_t v27 = 1;
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v28, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = a1 + 88;
    int v26 = (WTF::NativePromiseBase **)v4;
    int v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v27) = v5;
  }
  HIDWORD(v27) = v6;
  HIDWORD(v24) = 0;
  *(void *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v4);
  uint64_t v7 = *(void *)(a1 + 96);
  int v23 = (uint64_t *)v7;
  unsigned int v8 = *(_DWORD *)(a1 + 108);
  LODWORD(v24) = *(_DWORD *)(a1 + 104);
  HIDWORD(v24) = v8;
  v22[0] = 0;
  *(void *)(a1 + 96) = 0;
  v22[1] = 0;
  *(void *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  if (HIDWORD(v27))
  {
    uint64_t v17 = v26;
    uint64_t v18 = 8 * HIDWORD(v27);
    do
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(*v17++, a1, a2);
      v18 -= 8;
    }
    while (v18);
    uint64_t v7 = (uint64_t)v23;
    unsigned int v8 = HIDWORD(v24);
  }
  if (v8)
  {
    uint64_t v19 = 40 * v8;
    do
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(a1, v7, v11, v12, v13, v14, v15, v16);
      v7 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v20);
}

void sub_198CEEF38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  int v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 113)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      uint64_t v16 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v16, (WTF::NativePromiseBase *)((char *)v5 + 24));
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v16, a2);
        uint64_t v13 = v16;
        (*(void (**)(unsigned char *__return_ptr, unsigned __int8 *))(*(void *)v16 + 16))(v15, v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned char *))(*(void *)v5 + 24))(v5, a2, v15);
        (*(void (**)(unsigned __int8 *))(*(void *)v13 + 8))(v13);
      }
      else
      {
        WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)&v16, a2);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v16);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    uint64_t v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9CE3D0;
    *((void *)v8 + objc_destroyWeak(this + 1) = v5;
    *((void *)v8 + objc_destroyWeak(this + 2) = v5;
    *((void *)v8 + 3) = a2;
    uint64_t v16 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v16);
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198CEF1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v12 = 0;
  atomic_compare_exchange_strong_explicit(*v10, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v19 = v9;
  long long v20 = *(_OWORD *)(a2 + 8);
  long long v21 = *(_OWORD *)(a2 + 24);
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  char v10 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v18[2] = "<chained promise>";
  uint64_t v18[3] = 0;
  atomic_uchar *volatile v11 = (WTF::NativePromiseBase *)(v9 + 48);
  int v22 = (atomic_uchar *)(v9 + 48);
  char v23 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v9 + 48), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    atomic_uchar *volatile v11 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v11, a2, a3, a4, a5, a6, a7, a8, v18[0]);
  }
  char v12 = (unsigned char *)WTF::NativePromiseBase::logChannel(v11);
  if (*v12 && v12[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v18, " settling chained promise ", v9);
  }
  uint64_t v13 = *(unsigned int *)(v9 + 64);
  uint64_t v14 = *(unsigned int *)(a1 + 64);
  if (v13 == -1)
  {
    if (v14 == -1) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v24 = v9 + 56;
    ((void (*)(uint64_t *))off_1EE9CE3E8[v14])(&v24);
    goto LABEL_13;
  }
  if (v14 != -1) {
    goto LABEL_12;
  }
  ((void (*)(uint64_t *, uint64_t))off_1EE9CE380[v13])(&v24, v9 + 56);
  *(_DWORD *)(v9 + 64) = -1;
LABEL_13:
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v9, &v22);
  if (v23)
  {
    uint64_t v15 = (WTF::Lock *)v22;
    int v16 = 1;
    atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != 1) {
      WTF::Lock::unlockSlow(v15);
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  return WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(&v19);
}

void sub_198CEF498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 16))(v5);
    }
  }
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 64) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *uint64_t v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_198CEF5D0(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult(uint64_t result, uint64_t a2)
{
  int v3 = (_WORD *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    *int v3 = *(_WORD *)(a2 + 56);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_198CEF69C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v55[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v40, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v39, a2);
  WTF::String::String((WTF::String *)&v38, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v36, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v35, a4);
  WTF::String::String((WTF::String *)&v34, "]");
  v33[0] = v39;
  uint64_t v46 = v38;
  *(void *)buf = v40;
  uint64_t v44 = v36;
  uint64_t v45 = v37;
  uint64_t v42 = v34;
  uint64_t v43 = v35;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v33, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v41);
  if (v41)
  {
    int v7 = v34;
    char v34 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v35;
    int v35 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v36;
    int v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    char v10 = v37;
    uint64_t v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v6);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    atomic_uchar *volatile v11 = v38;
    unint64_t v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v6);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    char v12 = v39;
    int v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v6);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v40;
    int v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v6);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = *(NSObject **)(a1 + 32);
    uint64_t v15 = (WTF *)os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      WTF::String::utf8();
      uint64_t v17 = v33[0] ? (char *)v33[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v15 = v33[0];
      v33[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          uint64_t v15 = (WTF *)WTF::fastFree(v15, v16);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v18 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v19 = *v18;
        if (v19) {
          break;
        }
        int v20 = *v18;
        atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v20, v19 | 1, memory_order_acquire, memory_order_acquire);
        if (v20 == v19)
        {
          uint64_t v30 = a2;
          uint64_t v21 = WTF::Logger::observers(v15);
          uint64_t v22 = *(unsigned int *)(v21 + 12);
          if (v22)
          {
            char v23 = *(uint64_t **)v21;
            uint64_t v29 = *(void *)v21 + 8 * v22;
            do
            {
              uint64_t v24 = *v23;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
              int v48 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, v30);
              int v50 = 0;
              WTF::String::String((WTF::String *)v51, " aborting [callback:");
              v51[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v51[6] = 0;
              WTF::String::String((WTF::String *)v52, " callSite:");
              v52[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v53, a4);
              int v54 = 0;
              WTF::String::String((WTF::String *)v55, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v24 + 16))(v24, a1, 4, v33);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v25);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v16);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
              }
              ++v23;
            }
            while (v23 != (uint64_t *)v29);
          }
          int v28 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v41;
    uint64_t v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198CEFB8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v35 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, a2);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CE3D0;
  int v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  int v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CE3D0;
  int v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v10, *((void *)a1 + 3));
      uint64_t v8 = v10;
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v10 + 16))(v9, v10);
      (*(void (**)(unsigned char *, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v7, v9);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)&v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

void sub_198CF00F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE380[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, unsigned char *a2, _WORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE380[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unsigned int v6 = (unsigned __int16)*a3;
  char v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1]) {
        a2[1] = 0;
      }
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE380[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = (WTF *)*result;
      unsigned int v4 = *((_DWORD *)result + 3);
      int v5 = 40 * a2;
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + objc_destroyWeak(this + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *uint64_t v2 = (uint64_t)result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t result = (uint64_t *)v3;
        do
        {
          uint64_t v8 = *result;
          *uint64_t result = 0;
          *unint64_t v7 = v8;
          long long v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + objc_destroyWeak(this + 1) = v9;
          uint64_t result = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *uint64_t v2 = 0;
          *((_DWORD *)v2 + objc_destroyWeak(this + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EED1Ev(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CE410;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EED0Ev(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CE410;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EE4callESO_(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      unsigned int v4 = result;
      if (*(unsigned char *)(a2 + 1))
      {
        int v5 = qword_1EB358320;
        uint64_t result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR);
        if (result)
        {
          WebKit::MediaCapability::environmentIdentifier((id *)v3, (uint64_t *)&v18);
          WTF::String::utf8();
          if (v19) {
            uint64_t v13 = (char *)v19 + 16;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = "activate";
          int v15 = *((unsigned __int8 *)v4 + 16);
          uint64_t v21 = "operator()";
          *(_DWORD *)buf = 136446722;
          __int16 v22 = 2082;
          if (!v15) {
            uint64_t v14 = "deactivate";
          }
          char v23 = v13;
          __int16 v24 = 2082;
          uint64_t v25 = v14;
          _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to %{public}s", buf, 0x20u);
          uint64_t v17 = v19;
          int v19 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1) {
              WTF::fastFree(v17, v16);
            }
            else {
              --*(_DWORD *)v17;
            }
          }
          uint64_t result = v18;
          uint64_t v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        *(unsigned char *)(v3 + 24) = 0;
      }
      else
      {
        switch(*(unsigned char *)(v3 + 24))
        {
          case 0:
          case 2:
            return result;
          case 1:
            if (!*((unsigned char *)result + 16)) {
              goto LABEL_12;
            }
            char v6 = 2;
            goto LABEL_11;
          case 3:
            char v6 = *((unsigned char *)result + 16);
            if (!v6) {
LABEL_11:
            }
              *(unsigned char *)(v3 + 24) = v6;
            goto LABEL_12;
          default:
LABEL_12:
            unint64_t v7 = qword_1EB358320;
            uint64_t result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT);
            if (result)
            {
              WebKit::MediaCapability::environmentIdentifier((id *)v3, (uint64_t *)&v18);
              WTF::String::utf8();
              if (v19) {
                uint64_t v8 = (char *)v19 + 16;
              }
              else {
                uint64_t v8 = 0;
              }
              long long v9 = "activated";
              int v10 = *((unsigned __int8 *)v4 + 16);
              uint64_t v21 = "operator()";
              *(_DWORD *)buf = 136446722;
              __int16 v22 = 2082;
              if (!v10) {
                long long v9 = "deactivated";
              }
              char v23 = v8;
              __int16 v24 = 2082;
              uint64_t v25 = v9;
              _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] %{public}s", buf, 0x20u);
              char v12 = v19;
              int v19 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 1) {
                  WTF::fastFree(v12, v11);
                }
                else {
                  --*(_DWORD *)v12;
                }
              }
              uint64_t result = v18;
              uint64_t v18 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2) {
                  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)result -= 2;
                }
              }
            }
            break;
        }
      }
    }
  }
  return result;
}

void sub_198CF0838(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CE438;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9CE468;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9CE438;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9CE468;
  unsigned int v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v6 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (v5) {
      unint64_t v7 = "Rejecting";
    }
    else {
      unint64_t v7 = "Resolving";
    }
    int v40 = (char *)v7;
    WTF::String::String((WTF::String *)&v51, v7);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v47, a2);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    int v10 = v44;
    uint64_t v44 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    atomic_uchar *volatile v11 = v45;
    uint64_t v45 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    char v12 = v46;
    uint64_t v46 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v47;
    int v47 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v48;
    int v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v15 = v49;
    uint64_t v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = v50;
    int v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v51;
    uint64_t v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *(NSObject **)(v42 + 32);
    int v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      uint64_t v21 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v19 = v43[0];
      v43[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          int v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      __int16 v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            uint64_t v27 = *(uint64_t **)v25;
            uint64_t v39 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v28 = *v27;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v40);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v60, a2);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v29);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                long long v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v39);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v33 = v52;
    uint64_t v52 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  char v34 = 0;
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
  if (v34) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  int v36 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v36)
  {
    *(_OWORD *)buf = 0uLL;
    int v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v36, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v36)
  {
    uint64_t v37 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v36);
    return WTF::fastFree((WTF *)v37, v38);
  }
  return result;
}

void sub_198CF1078(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,char a35)
{
  int v35 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(uint64_t **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5)
  {
    BOOL v6 = &v4[2 * v5];
    do
    {
      WTF::String::isolatedCopy();
      v9[0] = v9[2];
      uint64_t v7 = v4[1];
      v4[1] = 0;
      v9[1] = v7;
      WebKit::ExtensionCapabilityGrant::operator=(v4, v9);
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)v9);
      v4 += 2;
    }
    while (v4 < v6);
    unsigned int v4 = *(uint64_t **)a1;
    LODWORD(v5) = *(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = v4;
  int v8 = *(_DWORD *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 1objc_destroyWeak(this + 2) = v5;
}

void sub_198CF13D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void *,UIViewController *,NSError *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(UIViewController *,NSError *)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void *,void({block_pointer})(NSData *))#1}::__invoke(uint64_t a1, void *aBlock)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  if (aBlock)
  {
    uint64_t v3 = _Block_copy(aBlock);
    unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v4 = &unk_1EE9CE4F8;
    v4[1] = v3;
    uint64_t v5 = v4;
    WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)>::operator()(v2);
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    _Block_release(0);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)>::operator()((uint64_t *)(a1 + 32));
  }
}

void sub_198CF1544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CE4F8;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::~CallableWrapper(const void **a1)
{
  *a1 = &unk_1EE9CE4F8;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    unsigned int v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    switch(a2)
    {
      case 0:
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 464);
        if (a3)
        {
          MEMORY[0x19972F4E0](&v13, a3);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v13);
          CFTypeRef cf = 0;
        }
        uint64_t v9 = v7;
        goto LABEL_9;
      case 1:
      case 2:
      case 3:
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v13);
        CFTypeRef cf = 0;
        uint64_t v9 = v8;
LABEL_9:
        WebKit::AuthenticationDecisionListener::completeChallenge(v9);
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
        char v12 = v14;
        uint64_t v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t result = (uint64_t)v13;
        uint64_t v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        break;
      default:
        uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid NSURLSessionAuthChallengeDisposition (%ld)", a2);
        break;
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void *,BOOL,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    MEMORY[0x19972EAD0](&v8, a3);
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), a2, &v8);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF199C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unsigned int v4 = *(WebKit::ExtensionCapabilityGrant **)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v4);
      unsigned int v4 = (WebKit::ExtensionCapabilityGrant *)(v6 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::ExtensionCapabilityGranter,WebKit::ExtensionCapabilityGranterClient &>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t result = WebKit::ExtensionCapabilityGranter::ExtensionCapabilityGranter(v4, a1);
  *a2 = v4;
  return result;
}

void sub_198CF1A68(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *result;
  *uint64_t result = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v5;
  return result;
}

unint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = (void *)result;
        uint64_t result = (uint64_t)v4;
        do
        {
          unint64_t v8 = *(WTF **)result;
          *(void *)uint64_t result = 0;
          *unint64_t v7 = v8;
          uint64_t v9 = *(void *)(result + 8);
          *(void *)(result + 8) = 0;
          v7[1] = v9;
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)result);
          uint64_t result = v10 + 16;
          v7 += 2;
        }
        while ((WTF *)result != (WTF *)((char *)v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 24 * *(unsigned int *)(v3 - 4);
  }
  if (v3 == a3)
  {
    v6[0] = 0;
    v6[1] = 0;
    *a1 = 0;
    a1[1] = 0;
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)v6);
    return;
  }
  long long v4 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)a1 = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
    if (v5 == a3) {
      return;
    }
  }
  else
  {
    if (!a3) {
      return;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a2, (WTF::StringImpl **)a3);
  }
}

void sub_198CF1CF8(_Unwind_Exception *a1)
{
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CE560;
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CE560;
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = 16 * v1;
    do
    {
      CFTypeRef cf = 0;
      WebKit::ExtensionCapabilityGrant::setPlatformGrant(v2, (uint64_t *)&cf);
      CFTypeRef v4 = cf;
      CFTypeRef cf = 0;
      if (v4) {
        CFRelease(v4);
      }
      v2 += 16;
      v3 -= 16;
    }
    while (v3);
  }
}

void sub_198CF1E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (uint64_t *)(v14 + 16 * v21);
          int v24 = (const void *)v23[1];
          v23[1] = 0;
          if (v24) {
            CFRelease(v24);
          }
          *int v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(const void **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          CFRelease(v13);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(const void **)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  unsigned int v3 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1);
    }
  }
}

void WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::encode(unsigned int *a1)
{
  uint64_t v2 = SecTrustSerialize();
  if (v2)
  {
    CFDataRef v3 = (const __CFData *)v2;
    char __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    size_t Length = CFDataGetLength(v3);
    size_t v8 = Length;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v8, 8uLL);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v3);
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, BytePtr, Length);
    CFRelease(v3);
  }
  else
  {
    char v6 = 0;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  }
}

void WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  if (v3 != v4)
  {
    uint64_t v5 = *a1;
    int v6 = *(unsigned __int8 *)(*a1 + v4);
    uint64_t v7 = v4 + 1;
    a1[2] = v4 + 1;
    if (!v6)
    {
      *(void *)a2 = 0;
      goto LABEL_9;
    }
    if ((unint64_t)(v3 - v7) > 7)
    {
      unint64_t v8 = *(void *)(v5 + v7);
      uint64_t v9 = v4 + 9;
      a1[2] = v9;
      if (v3 - v9 >= v8)
      {
        a1[2] = v8 + v9;
        CFDataRef v10 = CFDataCreate(0, (const UInt8 *)(v5 + v9), v8);
        uint64_t v11 = SecTrustDeserialize();
        uint64_t v12 = v11;
        if (v10)
        {
          CFRelease(v10);
          if (v12) {
            goto LABEL_7;
          }
        }
        else if (v11)
        {
LABEL_7:
          *(void *)a2 = v12;
LABEL_9:
          *(unsigned char *)(a2 + 8) = 1;
          return;
        }
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
}

unsigned int *WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode(unsigned int *a1, uint64_t a2)
{
  LOBYTE(v9[0]) = *(unsigned char *)a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 1uLL);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 8));
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 16));
  v9[0] = *(WTF::StringImpl **)(a2 + 24);
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 8uLL);
  LOBYTE(v9[0]) = *(unsigned char *)(a2 + 32);
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 1uLL);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<WebKit::Daemon::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)v9);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(a1, (char *)(a2 + 56));
  long long v4 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 192);
  long long v10 = v4;
  IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(a1, (uint64_t *)v9);
  IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(a1, (uint64_t *)&v10);
  LOBYTE(v9[0]) = 0;
  LOBYTE(v9[1]) = 0;
  if (*(unsigned char *)(a2 + 232))
  {
    uint64_t v5 = *(WTF::StringImpl **)(a2 + 224);
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v9[0] = v5;
    LOBYTE(v9[1]) = 1;
  }
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)v9);
  if (LOBYTE(v9[1]))
  {
    uint64_t v7 = v9[0];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 304));
}

void WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4) {
    goto LABEL_32;
  }
  __int16 v6 = *(unsigned __int8 *)(*a1 + v4);
  a1[2] = v4 + 1;
  __int16 v89 = v6 | 0x100;
  LOBYTE(v87) = 0;
  unsigned __int8 v88 = 0;
  v56[0] = 0;
  v56[8] = 0;
  WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(a1, (uint64_t *)v56, a2);
  int v9 = v56[8];
  if (v56[8]) {
    long long v10 = *(WTF::StringImpl **)v56;
  }
  else {
    long long v10 = 0;
  }
  if (v88 == v56[8])
  {
    if (v88)
    {
      uint64_t v11 = v87;
      int v87 = v10;
      if (!v11) {
        goto LABEL_23;
      }
      if (*(_DWORD *)v11 != 2)
      {
        *(_DWORD *)v11 -= 2;
        goto LABEL_23;
      }
LABEL_22:
      WTF::StringImpl::destroy(v11, v7);
      goto LABEL_23;
    }
  }
  else
  {
    if (!v88)
    {
      int v87 = v10;
      unsigned __int8 v88 = 1;
      goto LABEL_24;
    }
    uint64_t v12 = v87;
    int v87 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v7);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    unsigned __int8 v88 = 0;
  }
  if (v9 && v10)
  {
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      goto LABEL_23;
    }
    uint64_t v11 = v10;
    goto LABEL_22;
  }
LABEL_23:
  if (!v88)
  {
LABEL_32:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
    return;
  }
LABEL_24:
  LOBYTE(v85) = 0;
  unsigned __int8 v86 = 0;
  v56[0] = 0;
  v56[8] = 0;
  WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(a1, (uint64_t *)v56, v8);
  int v16 = v56[8];
  if (v56[8]) {
    unint64_t v17 = *(WTF::StringImpl **)v56;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v86 == v56[8])
  {
    if (v86)
    {
      unint64_t v18 = v85;
      uint64_t v85 = v17;
      if (!v18) {
        goto LABEL_47;
      }
      if (*(_DWORD *)v18 != 2)
      {
        *(_DWORD *)v18 -= 2;
        goto LABEL_47;
      }
LABEL_46:
      WTF::StringImpl::destroy(v18, v13);
      goto LABEL_47;
    }
  }
  else
  {
    if (!v86)
    {
      uint64_t v85 = v17;
      unsigned __int8 v86 = 1;
      goto LABEL_48;
    }
    unsigned int v19 = v85;
    uint64_t v85 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v13);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    unsigned __int8 v86 = 0;
  }
  if (v16 && v17)
  {
    if (*(_DWORD *)v17 != 2)
    {
      *(_DWORD *)v17 -= 2;
      goto LABEL_47;
    }
    unint64_t v18 = v17;
    goto LABEL_46;
  }
LABEL_47:
  if (!v86)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
    goto LABEL_65;
  }
LABEL_48:
  uint64_t v20 = a1[1];
  uint64_t v21 = a1[2];
  if ((unint64_t)(v20 - v21) <= 7) {
    goto LABEL_60;
  }
  uint64_t v22 = *a1;
  uint64_t v23 = *(void *)(*a1 + v21);
  a1[2] = v21 + 8;
  uint64_t v83 = v23;
  char v84 = 1;
  if (v20 == v21 + 8) {
    goto LABEL_60;
  }
  __int16 v24 = *(unsigned __int8 *)(v22 + v21 + 8);
  a1[2] = v21 + 9;
  __int16 v82 = v24 | 0x100;
  if (v20 == v21 + 9)
  {
    unint64_t v25 = 0;
    LOBYTE(v26) = 0;
    char v27 = 0;
    int v28 = 1;
    uint64_t v29 = v20;
    goto LABEL_59;
  }
  int v30 = *(unsigned __int8 *)(v22 + v21 + 9);
  uint64_t v29 = v21 + 10;
  a1[2] = v21 + 10;
  if (!v30)
  {
    unint64_t v25 = 0;
    LOBYTE(v26) = 0;
    char v15 = 0;
    int v28 = 0;
    goto LABEL_57;
  }
  if ((unint64_t)(v20 - v29) >= 8)
  {
    int v28 = 0;
    uint64_t v26 = *(void *)(v22 + v29);
    uint64_t v29 = v21 + 18;
    a1[2] = v21 + 18;
    unint64_t v25 = v26 & 0xFFFFFFFFFFFFFF00;
    char v15 = 1;
LABEL_57:
    char v27 = 1;
    goto LABEL_59;
  }
  unint64_t v25 = 0;
  LOBYTE(v26) = 0;
  char v27 = 0;
  int v28 = 1;
LABEL_59:
  *(void *)&long long v80 = v26 | v25;
  BYTE8(v80) = v15;
  char v81 = v27;
  if (v28)
  {
LABEL_60:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
    goto LABEL_61;
  }
  LOBYTE(v77[0]) = 0;
  char v79 = 0;
  if (v20 == v29)
  {
    v56[0] = 0;
    char v60 = 0;
    goto LABEL_79;
  }
  int v33 = *(unsigned __int8 *)(v22 + v29);
  a1[2] = v29 + 1;
  if (v33)
  {
    WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode(a1, v14, &v90);
    char v34 = v94;
    if (!v94)
    {
      v56[0] = 0;
      goto LABEL_78;
    }
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>((uint64_t)v56, (uint64_t)&v90);
  }
  else
  {
    LOBYTE(v90) = 0;
    char v94 = 0;
    v56[0] = 0;
    char v59 = 0;
  }
  char v34 = 1;
LABEL_78:
  char v60 = v34;
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v13);
LABEL_79:
  if (v79 == v60)
  {
    if (!v79) {
      goto LABEL_89;
    }
    std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>(v77, (uint64_t)v56);
  }
  else if (v79)
  {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v13);
    char v79 = 0;
  }
  else
  {
    LOBYTE(v77[0]) = 0;
    char v78 = 0;
    if (v59)
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v77, (uint64_t)v56);
      char v78 = 1;
    }
    char v79 = 1;
  }
  if (v60) {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v56, v13);
  }
LABEL_89:
  if (!v79)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
    goto LABEL_102;
  }
  uint64_t v35 = a1[1];
  uint64_t v36 = a1[2];
  if (v35 == v36) {
    goto LABEL_100;
  }
  uint64_t v37 = *a1;
  LODWORD(v38) = *(unsigned __int8 *)(*a1 + v36);
  uint64_t v39 = v36 + 1;
  a1[2] = v36 + 1;
  if (v38)
  {
    if ((unint64_t)(v35 - v39) < 8) {
      goto LABEL_100;
    }
    uint64_t v38 = *(void *)(v37 + v39);
    uint64_t v39 = v36 + 9;
    a1[2] = v36 + 9;
    *(void *)int v56 = v38;
    v56[8] = 1;
  }
  else
  {
    v56[8] = 0;
  }
  if (v35 == v39) {
    goto LABEL_100;
  }
  uint64_t v40 = *(void *)&v56[1];
  int v41 = *(unsigned __int8 *)(v37 + v39);
  uint64_t v42 = v39 + 1;
  a1[2] = v39 + 1;
  if (v41)
  {
    if ((unint64_t)(v35 - v42) >= 8)
    {
      uint64_t v43 = *(void *)(v37 + v42);
      a1[2] = v39 + 9;
      *(void *)int v56 = v43;
      v56[8] = 1;
      goto LABEL_105;
    }
LABEL_100:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
LABEL_101:
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v13);
    goto LABEL_102;
  }
  LOBYTE(v43) = 0;
  v56[8] = 0;
LABEL_105:
  LOBYTE(v90) = v38;
  *(void *)((char *)&v90 + objc_destroyWeak(this + 1) = v40;
  char v91 = v43;
  uint64_t v92 = *(void *)&v56[1];
  char v93 = 1;
  LOBYTE(v74) = 0;
  char v76 = 0;
  WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)&v74, v14);
  if (v76)
  {
    LOBYTE(v7objc_destroyWeak(this + 2) = 0;
    char v73 = 0;
    WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v72, v44);
    if (v73)
    {
      if (!HIBYTE(v89) || !v88 || !v86 || !v84 || !HIBYTE(v82) || !v81 || !v79 || !v93 || !v76)
      {
        __break(1u);
        return;
      }
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v56, &v89, (uint64_t *)&v87, (uint64_t *)&v85, &v83, &v82, &v80, (uint64_t)v77, &v90, (uint64_t *)&v74, (uint64_t *)&v72);
      *(unsigned char *)a3 = v56[0];
      long long v46 = *(_OWORD *)&v56[8];
      *(_OWORD *)&v56[8] = 0uLL;
      *(_OWORD *)(a3 + 8) = v46;
      *(_OWORD *)(a3 + 24) = v57[0];
      *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v57 + 9);
      *(unsigned char *)(a3 + 56) = 0;
      *(unsigned char *)(a3 + 184) = 0;
      if (v61)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a3 + 56, (uint64_t)&v58);
        *(unsigned char *)(a3 + 184) = 1;
      }
      long long v47 = v63;
      *(_OWORD *)(a3 + 19objc_destroyWeak(this + 2) = v62;
      *(_OWORD *)(a3 + 208) = v47;
      *(unsigned char *)(a3 + 224) = 0;
      *(unsigned char *)(a3 + 23objc_destroyWeak(this + 2) = 0;
      if (v65)
      {
        uint64_t v48 = v64;
        uint64_t v64 = 0;
        *(void *)(a3 + 224) = v48;
        *(unsigned char *)(a3 + 23objc_destroyWeak(this + 2) = 1;
      }
      long long v49 = v66;
      long long v50 = v67;
      long long v66 = 0u;
      long long v67 = 0u;
      *(_OWORD *)(a3 + 240) = v49;
      *(_OWORD *)(a3 + 256) = v50;
      *(unsigned char *)(a3 + 27objc_destroyWeak(this + 2) = 0;
      *(unsigned char *)(a3 + 296) = 0;
      if (v70)
      {
        long long v51 = v68;
        long long v68 = 0uLL;
        *(_OWORD *)(a3 + 27objc_destroyWeak(this + 2) = v51;
        uint64_t v52 = v69;
        uint64_t v69 = 0;
        *(void *)(a3 + 288) = v52;
        *(unsigned char *)(a3 + 296) = 1;
      }
      uint64_t v53 = v71;
      uint64_t v71 = 0;
      *(void *)(a3 + 304) = v53;
      *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 1;
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v56, v45);
      if (v73)
      {
        int v54 = v72;
        uint64_t v72 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, v13);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
    }
    if (v76)
    {
      if (v75)
      {
        uint64_t v55 = v74;
        uint64_t v74 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v13);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 31objc_destroyWeak(this + 2) = 0;
  }
  if (v79) {
    goto LABEL_101;
  }
LABEL_102:
  if (v86)
  {
LABEL_61:
    long long v31 = v85;
    uint64_t v85 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v13);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
LABEL_65:
  if (v88)
  {
    int v32 = v87;
    int v87 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v13);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5 = a1[2];
  if (a1[1] == v5) {
    goto LABEL_2;
  }
  int v8 = *(unsigned __int8 *)(*a1 + v5);
  a1[2] = v5 + 1;
  if (v8)
  {
    LOBYTE(v1objc_destroyWeak(this + 2) = 0;
    unsigned __int8 v13 = 0;
    WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v12, a3);
    LOBYTE(v5) = v13;
    if (!v13)
    {
LABEL_2:
      int v6 = 0;
      int v7 = 0;
      LOBYTE(v1objc_destroyWeak(this + 2) = 0;
      goto LABEL_8;
    }
    LOBYTE(v5) = 0;
    int v6 = 1;
    unsigned __int8 v13 = 1;
  }
  else
  {
    int v6 = 0;
    LOBYTE(v1objc_destroyWeak(this + 2) = 0;
    unsigned __int8 v13 = 0;
    LOBYTE(v5) = 1;
  }
  int v7 = 1;
LABEL_8:
  char v14 = v7;
  if (*(unsigned __int8 *)(a2 + 16) == v7)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)a2, (uint64_t *)&v12);
      int v6 = v13;
      if (!v14) {
        return a1;
      }
      goto LABEL_15;
    }
LABEL_14:
    if (!v7) {
      return a1;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::optional<WebCore::PublicSuffix>::~optional(a2, (WTF::StringImpl *)a2);
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_14;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if ((v5 & 1) == 0)
  {
    long long v10 = v12;
    uint64_t v12 = 0;
    *(void *)a2 = v10;
    *(unsigned char *)(a2 + 8) = 1;
  }
  *(unsigned char *)(a2 + 16) = 1;
  if (v7)
  {
LABEL_15:
    if (v6)
    {
      int v9 = v12;
      uint64_t v12 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  return a1;
}

unsigned int *WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode(unsigned int *a1, char *a2)
{
  char __src = *a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  char v6 = a2[1];
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  char v7 = a2[2];
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v7, 1uLL);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 24));
  return IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 40));
}

uint64_t *WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode@<X0>(uint64_t *result@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  if (v5 == v4) {
    goto LABEL_19;
  }
  uint64_t v6 = *result;
  char v7 = *(unsigned char *)(*result + v4);
  result[2] = v4 + 1;
  if (v5 == v4 + 1
    || (char v8 = *(unsigned char *)(v6 + v4 + 1), result[2] = v4 + 2, v5 == v4 + 2)
    || (char v9 = *(unsigned char *)(v6 + v4 + 2),
        result[2] = v4 + 3,
        LOBYTE(v33) = 0,
        char v35 = 0,
        uint64_t result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(result, (uint64_t)&v33, a2), !v35))
  {
LABEL_19:
    *a3 = 0;
    a3[128] = 0;
  }
  else
  {
    LOBYTE(v30) = 0;
    char v32 = 0;
    uint64_t result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(result, (uint64_t)&v30, v10);
    if (v32)
    {
      LOBYTE(v27) = 0;
      char v29 = 0;
      uint64_t result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(result, (uint64_t)&v27, v12);
      if (v29)
      {
        v18[0] = v7;
        v18[1] = v8;
        v18[2] = v9;
        if (!v35) {
          goto LABEL_51;
        }
        LOBYTE(v19) = 0;
        char v20 = 0;
        if (v34) {
          goto LABEL_52;
        }
        while (!v32)
        {
LABEL_51:
          __break(1u);
LABEL_52:
          int v16 = v33;
          int v33 = 0;
          unsigned int v19 = v16;
          char v20 = 1;
        }
        LOBYTE(v2objc_destroyWeak(this + 1) = 0;
        char v22 = 0;
        if (v31)
        {
          unsigned __int8 v13 = v30;
          int v30 = 0;
          uint64_t v21 = v13;
          char v22 = 1;
        }
        LOBYTE(v23) = 0;
        char v24 = 0;
        if (v28)
        {
          unint64_t v17 = v27;
          char v27 = 0;
          uint64_t v23 = v17;
          char v24 = 1;
        }
        v25[0] = 0;
        v25[32] = 0;
        v26[0] = 0;
        char v26[24] = 0;
        std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>((uint64_t)a3, (uint64_t)v18);
        std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v14);
        uint64_t result = (uint64_t *)std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v15);
        if (v24)
        {
          uint64_t result = (uint64_t *)v23;
          uint64_t v23 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        if (v22)
        {
          uint64_t result = (uint64_t *)v21;
          uint64_t v21 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        if (v20)
        {
          uint64_t result = (uint64_t *)v19;
          unsigned int v19 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        if (v29)
        {
          if (v28)
          {
            uint64_t result = (uint64_t *)v27;
            char v27 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
        }
      }
      else
      {
        *a3 = 0;
        a3[128] = 0;
      }
      if (v32)
      {
        if (v31)
        {
          uint64_t result = (uint64_t *)v30;
          int v30 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[128] = 0;
    }
    if (v35)
    {
      if (v34)
      {
        uint64_t result = (uint64_t *)v33;
        int v33 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5 = a1[2];
  if (a1[1] == v5)
  {
    int v6 = 0;
    int v7 = 0;
    LOBYTE(v1objc_destroyWeak(this + 2) = 0;
    char v14 = 0;
  }
  else
  {
    int v8 = *(unsigned __int8 *)(*a1 + v5);
    a1[2] = v5 + 1;
    if (v8)
    {
      WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(a1, a3, (uint64_t)&v15);
      if (v16)
      {
        uint64_t v12 = v15;
        int v7 = 1;
        unsigned __int8 v13 = 1;
      }
      else
      {
        int v7 = 0;
        LOBYTE(v1objc_destroyWeak(this + 2) = 0;
      }
      LOBYTE(v5) = 0;
      char v14 = v7;
      int v6 = 1;
    }
    else
    {
      int v6 = 0;
      LOBYTE(v1objc_destroyWeak(this + 2) = 0;
      unsigned __int8 v13 = 0;
      LOBYTE(v5) = 1;
      char v14 = 1;
      int v7 = 1;
    }
  }
  if (*(unsigned __int8 *)(a2 + 16) == v7)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)a2, (uint64_t *)&v12);
      int v6 = v13;
      if (!v14) {
        return a1;
      }
      goto LABEL_16;
    }
LABEL_15:
    if (!v7) {
      return a1;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a2, (WTF::StringImpl *)a2);
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_15;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if ((v5 & 1) == 0)
  {
    uint64_t v11 = v12;
    uint64_t v12 = 0;
    *(void *)a2 = v11;
    *(unsigned char *)(a2 + 8) = 1;
  }
  *(unsigned char *)(a2 + 16) = 1;
  if (v7)
  {
LABEL_16:
    if (v6)
    {
      long long v10 = v12;
      uint64_t v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  LOBYTE(v7) = 0;
  unsigned __int8 v8 = 0;
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v7, a2);
  if (v8)
  {
    if (v7 && *((_DWORD *)v7 + 1))
    {
      *(void *)a3 = v7;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v6 = v8;
      *(unsigned char *)(a3 + 8) = 1;
      if (v6)
      {
        uint64_t result = v7;
        int v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsClassifier::calculateResourcePrevalence(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v6 = a2 | a5 | a3 | a4;
  if (!v6) {
    return 1;
  }
  if (sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 30.0) {
    return 4;
  }
  uint64_t v7 = 2;
  if (a6 != 2 && v6 <= 3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return v7;
}

BOOL WebKit::ResourceLoadStatisticsClassifierCocoa::classify(WebKit::ResourceLoadStatisticsClassifierCocoa *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!*((unsigned char *)this + 9))
  {
    if (!*((unsigned char *)this + 8)) {
      return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
    }
    if (MEMORY[0x1E4F5CC40])
    {
      *((unsigned char *)this + 8) = 0;
      return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
    }
    WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath((WebKit::ResourceLoadStatisticsClassifierCocoa *)&v25);
    if (v25 && *((_DWORD *)v25 + 1) && WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(this))
    {
      char v21 = 1;
      *((unsigned char *)this + 9) = 1;
    }
    else
    {
      char v21 = 0;
      *((unsigned char *)this + 8) = 0;
    }
    char v22 = v25;
    unint64_t v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if (v21) {
          goto LABEL_2;
        }
        return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v21) {
      goto LABEL_2;
    }
    return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
  }
LABEL_2:
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  if (a2)
  {
    LODWORD(v24) = 1;
    *((double *)&v24 + objc_destroyWeak(this + 1) = (double)a2;
    unsigned __int8 v8 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, 1uLL, (unint64_t)&v24);
    int v9 = HIDWORD(v26);
    long long v10 = v25;
    *((_OWORD *)v25 + HIDWORD(v26)) = *v8;
    unsigned int v11 = v9 + 1;
    HIDWORD(v26) = v11;
    if (!a3) {
      goto LABEL_13;
    }
LABEL_9:
    LODWORD(v24) = 2;
    *((double *)&v24 + objc_destroyWeak(this + 1) = (double)a3;
    if (v11 == v26)
    {
      uint64_t v12 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
      unsigned int v11 = HIDWORD(v26);
      long long v10 = v25;
      *((_OWORD *)v25 + HIDWORD(v26)) = *v12;
    }
    else
    {
      *((_OWORD *)v10 + v1objc_destroyWeak(this + 1) = v24;
    }
    HIDWORD(v26) = ++v11;
    goto LABEL_13;
  }
  long long v10 = 0;
  unsigned int v11 = 0;
  if (a3) {
    goto LABEL_9;
  }
LABEL_13:
  if (a4)
  {
    LODWORD(v24) = 3;
    *((double *)&v24 + objc_destroyWeak(this + 1) = (double)a4;
    if (v11 == v26)
    {
      unsigned __int8 v13 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
      int v14 = HIDWORD(v26);
      *((_OWORD *)v25 + HIDWORD(v26)) = *v13;
    }
    else
    {
      *((_OWORD *)v10 + v1objc_destroyWeak(this + 1) = v24;
      int v14 = HIDWORD(v26);
    }
    unsigned int v11 = v14 + 1;
    HIDWORD(v26) = v11;
  }
  LODWORD(v24) = -1;
  *((void *)&v24 + objc_destroyWeak(this + 1) = 0xBFF0000000000000;
  if (v11 == v26)
  {
    char v15 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
    char v16 = v25;
    *((_OWORD *)v25 + HIDWORD(v26)) = *v15;
  }
  else
  {
    char v16 = v25;
    *((_OWORD *)v25 + v1objc_destroyWeak(this + 1) = v24;
  }
  *(void *)&long long v24 = 0;
  WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(this);
  svm_predict_values();
  uint64_t v18 = (int)v17 >> 31;
  WTF::fastFree(v16, v19);
  return v18;
}

uint64_t WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN6WebKit37ResourceLoadStatisticsClassifierCocoa24singletonPredictionModelEv_block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  block[4] = this;
  if (qword_1EB359A20 != -1) {
    dispatch_once(&qword_1EB359A20, block);
  }
  uint64_t result = qword_1EB359A18;
  if (_MergedGlobals_80 != 1 || qword_1EB359A18 == 0)
  {
    WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath((WebKit::ResourceLoadStatisticsClassifierCocoa *)&v7);
    WTF::String::utf8();
    WTFLogAlways();
    uint64_t v5 = v8;
    unsigned __int8 v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1) {
        WTF::fastFree(v5, v4);
      }
      else {
        --*(_DWORD *)v5;
      }
    }
    unsigned int v6 = v7;
    uint64_t v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t result = 0;
    *((unsigned char *)this + 8) = 0;
  }
  return result;
}

void WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.WebKit");
  CFURLRef v3 = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
  CFURLRef v4 = CFURLCreateCopyAppendingPathComponent(0, v3, @"corePrediction_model", 0);
  if (v3) {
    CFRelease(v3);
  }
  CFErrorRef error = 0;
  CFURLRef v5 = CFURLCreateFilePathURL(0, v4, &error);
  if (v4) {
    CFRelease(v4);
  }
  if (error)
  {
    *(void *)this = 0;
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }
  if (v5)
  {
    CFStringRef v6 = CFURLCopyFileSystemPath(v5, kCFURLPOSIXPathStyle);
    MEMORY[0x19972EAD0](this, v6);
    if (v6) {
      CFRelease(v6);
    }
LABEL_11:
    CFRelease(v5);
    return;
  }
  *(void *)this = 0;
}

WTF::StringImpl *___ZN6WebKit37ResourceLoadStatisticsClassifierCocoa24singletonPredictionModelEv_block_invoke()
{
  WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath((WebKit::ResourceLoadStatisticsClassifierCocoa *)&v3);
  uint64_t result = v3;
  if (v3)
  {
    if (!*((_DWORD *)v3 + 1))
    {
      CFURLRef v3 = 0;
LABEL_9:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v0);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
    WTF::String::utf8();
    qword_1EB359A18 = svm_load_model();
    _MergedGlobals_80 = 1;
    if (v2)
    {
      if (*(_DWORD *)v2 == 1) {
        WTF::fastFree(v2, v0);
      }
      else {
        --*(_DWORD *)v2;
      }
    }
    uint64_t result = v3;
    CFURLRef v3 = 0;
    if (result) {
      goto LABEL_9;
    }
  }
  return result;
}

void WebKit::ResourceLoadStatisticsClassifierCocoa::~ResourceLoadStatisticsClassifierCocoa(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
}

uint64_t std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + objc_destroyWeak(this + 2) = v4;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(a1 + 40) = v11;
    *(unsigned char *)(a1 + 48) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](a1 + 56, (uint64_t *)(a2 + 56));
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *(void *)(a1 + 96) = v6;
    uint64_t v7 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *(void *)(a1 + 104) = v7;
    uint64_t v8 = *(void *)(a2 + 112);
    *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 11objc_destroyWeak(this + 2) = v8;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(unsigned char *)(a1 + 128) = 1;
  return a1;
}

unsigned int *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<WebKit::Daemon::Encoder,std::optional<unsigned long long>>(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  if (!*((unsigned char *)a2 + 8))
  {
    char v8 = 0;
    char v4 = (uint64_t *)&v8;
    size_t v5 = 1;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  char __src = 1;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v10 = *a2;
    char v4 = &v10;
    a1 = v2;
    size_t v5 = 8;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  int v7 = std::__throw_bad_optional_access[abi:sn180100]();
  return (unsigned int *)IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(v7);
}

unsigned int *IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(unsigned int *a1, char *a2)
{
  if (a2[128])
  {
    char __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    if (a2[128])
    {
      return WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode(a1, a2);
    }
    else
    {
      int v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(v5);
    }
  }
  else
  {
    char v6 = 0;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  }
}

unsigned int *IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  if (!*((unsigned char *)a2 + 8))
  {
    char v9 = 0;
    char v4 = (uint64_t *)&v9;
    size_t v5 = 1;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  char __src = 1;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v11 = *a2;
    char v4 = &v11;
    a1 = v2;
    size_t v5 = 8;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  int v7 = (unsigned int *)std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(v7, v8);
}

unsigned int *IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(unsigned int *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    if (*(unsigned char *)(a2 + 8))
    {
      return WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)a2);
    }
    else
    {
      size_t v5 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(v5, v6, v7);
    }
  }
  else
  {
    char v8 = 0;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v8, 1uLL);
  }
}

uint64_t *WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(a1, a3, (uint64_t)&v8);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(a2, (uint64_t *)&v8);
  if (v9)
  {
    int v7 = v8;
    char v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

BOOL WebKit::checkUsageDescriptionStringForSpeechRecognition(WebKit *this)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", @"NSSpeechRecognitionUsageDescription");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = (void *)v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return [v2 length] != 0;
}

BOOL WebKit::applicationVisibleNameFromOrigin(WebKit *this, const WebCore::SecurityOriginData *a2)
{
  int v3 = *((_DWORD *)this + 6);
  char v4 = this;
  if (v3)
  {
    if (v3 != 1) {
      goto LABEL_17;
    }
    char v4 = (WebKit *)MEMORY[0x1E4F30980];
  }
  if (MEMORY[0x19972E990](*(void *)v4, "http", 4)) {
    goto LABEL_9;
  }
  int v6 = *((_DWORD *)this + 6);
  int v7 = this;
  if (v6)
  {
    if (v6 != 1) {
      goto LABEL_17;
    }
    int v7 = (WebKit *)MEMORY[0x1E4F30980];
  }
  if (MEMORY[0x19972E990](*(void *)v7, "https", 5))
  {
LABEL_9:
    int v8 = *((_DWORD *)this + 6);
    if (!v8)
    {
      char v9 = (WebKit *)((char *)this + 8);
      goto LABEL_11;
    }
    if (v8 == 1)
    {
      char v9 = (WebKit *)MEMORY[0x1E4F30980];
LABEL_11:
      return WebKit::visibleDomain(v9, v5);
    }
LABEL_17:
    char v9 = (WebKit *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::visibleDomain(v9, v5);
  }
  return 0;
}

BOOL WebKit::visibleDomain(WebKit *this, const WTF::String *a2)
{
  WTF::String::utf8();
  WTF::URLHelpers::userVisibleURL((uint64_t *)&v17, (WTF::URLHelpers *)v15, v2);
  char v4 = v15[0];
  v15[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1) {
      WTF::fastFree(v4, v3);
    }
    else {
      --*(_DWORD *)v4;
    }
  }
  if (!v17) {
    goto LABEL_22;
  }
  BOOL result = WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((BOOL)v17, (uint64_t)"www.", 4uLL);
  if (result)
  {
    if (v17 && (uint64_t v6 = *((unsigned int *)v17 + 1), v6 >= 5))
    {
      uint64_t v7 = *((void *)v17 + 1);
      unint64_t v8 = (v6 - 4);
      unint64_t v9 = v6 - 4;
      if ((*((unsigned char *)v17 + 16) & 4) != 0)
      {
        if (v9 >= v8)
        {
          uint64_t v10 = (WTF *)(v7 + 4);
          v8 |= 0x100000000uLL;
          goto LABEL_12;
        }
LABEL_25:
        __break(1u);
        return result;
      }
      if (v9 < v8) {
        goto LABEL_25;
      }
      uint64_t v10 = (WTF *)(v7 + 8);
    }
    else
    {
      unint64_t v8 = 0x100000000;
      uint64_t v10 = (WTF *)"";
    }
LABEL_12:
    v15[0] = v10;
    v15[1] = (WTF *)v8;
    WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)v15);
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    uint64_t v12 = (id)CFMakeCollectable(v11);
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_16;
  }
  if (v17) {
    uint64_t v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
LABEL_22:
  }
    uint64_t v12 = &stru_1EEA10550;
LABEL_16:
  int v14 = v17;
  double v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  return (BOOL)v12;
}

void sub_198CF3D90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, CFTypeRef cf, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::alertForPermission(WebKit::WebPageProxy *a1, __CFString *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  if (a2 == 3)
  {
    uint64_t v7 = *((void *)a1 + 137);
    if (v7)
    {
      (*(void (**)(void))(*(void *)v7 + 16))(*((void *)a1 + 137));
      unint64_t v8 = a4;
LABEL_11:
      WTF::CompletionHandler<void ()(BOOL)>::operator()(v8);
      return;
    }
  }
  WebKit::WebPageProxy::cocoaView(a1, &cf);
  if (!cf)
  {
    unint64_t v8 = a4;
    goto LABEL_11;
  }
  uint64_t v11 = WebKit::applicationVisibleNameFromOrigin((WebKit *)a3, v9);
  if (!v11) {
    uint64_t v11 = WebKit::applicationVisibleName(0);
  }
  switch((int)v6)
  {
    case 0:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to use your camera?", v10);
      id v13 = v48;
      if (!v48) {
        goto LABEL_56;
      }
      goto LABEL_28;
    case 1:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to use your camera and microphone?", v10);
      id v13 = v48;
      if (v48) {
        goto LABEL_28;
      }
      goto LABEL_56;
    case 2:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to use your microphone?", v10);
      id v13 = v48;
      if (v48) {
        goto LABEL_28;
      }
      goto LABEL_56;
    case 3:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"“%@” Would Like to Access Motion and Orientation", v10);
      id v13 = v48;
      if (v48) {
        goto LABEL_28;
      }
      goto LABEL_56;
    case 4:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to use your current location?", v10);
      id v13 = v48;
      if (v48) {
        goto LABEL_28;
      }
      goto LABEL_56;
    case 5:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to capture your audio and use it for speech recognition?", v10);
      if (v48)
      {
        CFAutorelease(v48);
        id v15 = v48;
      }
      else
      {
        id v15 = 0;
      }
      int v16 = a3[6];
      if (v16)
      {
        if (v16 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return;
        }
        double v17 = (WebKit *)MEMORY[0x1E4F30980];
      }
      else
      {
        double v17 = (WebKit *)(a3 + 2);
      }
      uint64_t v11 = WebKit::visibleDomain(v17, v14);
LABEL_29:
      unsigned int v19 = (WebKit *)objc_msgSend(v12, "stringWithFormat:", v15, v11);
      if (v19)
      {
        switch((int)v6)
        {
          case 0:
          case 1:
          case 2:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Allow (usermedia)", v18);
            if (v48)
            {
              uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
              char v21 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2) {
                  WTF::StringImpl::destroy(v21, v20);
                }
                else {
                  *(_DWORD *)v21 -= 2;
                }
              }
            }
            else
            {
              uint64_t v6 = &stru_1EEA10550;
            }
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Don’t Allow (usermedia)", (const __CFString *)v20);
            if (!v48) {
              goto LABEL_80;
            }
            goto LABEL_68;
          case 3:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Allow (device motion and orientation access)", v18);
            if (v48)
            {
              uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
              long long v24 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2) {
                  WTF::StringImpl::destroy(v24, v23);
                }
                else {
                  *(_DWORD *)v24 -= 2;
                }
              }
            }
            else
            {
              uint64_t v6 = &stru_1EEA10550;
            }
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Cancel (device motion and orientation access)", (const __CFString *)v23);
            if (v48) {
              goto LABEL_68;
            }
            goto LABEL_80;
          case 4:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Allow (geolocation)", v18);
            if (v48)
            {
              uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
              char v29 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2) {
                  WTF::StringImpl::destroy(v29, v28);
                }
                else {
                  *(_DWORD *)v29 -= 2;
                }
              }
            }
            else
            {
              uint64_t v6 = &stru_1EEA10550;
            }
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Don’t Allow (geolocation)", (const __CFString *)v28);
            if (v48) {
              goto LABEL_68;
            }
            goto LABEL_80;
          case 5:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Allow (speechrecognition)", v18);
            if (v48)
            {
              uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
              uint64_t v26 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, v25);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
            }
            else
            {
              uint64_t v6 = &stru_1EEA10550;
            }
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Don’t Allow (speechrecognition)", (const __CFString *)v25);
            if (v48) {
              goto LABEL_68;
            }
            goto LABEL_80;
          case 6:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Allow (screensharing)", v18);
            if (v48)
            {
              uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
              char v27 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v18);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
            }
            else
            {
              uint64_t v6 = &stru_1EEA10550;
            }
            goto LABEL_64;
          default:
LABEL_64:
            WebCore::localizedString((uint64_t *)&v48, (WebCore *)@"Don’t Allow (screensharing)", v18);
            if (v48)
            {
LABEL_68:
              char v31 = (__CFString *)WTF::StringImpl::operator NSString *();
              char v32 = (WTF::StringImpl *)v48;
              id v48 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2) {
                  WTF::StringImpl::destroy(v32, v30);
                }
                else {
                  *(_DWORD *)v32 -= 2;
                }
              }
            }
            else
            {
LABEL_80:
              char v31 = &stru_1EEA10550;
            }
            uint64_t v33 = *a4;
            *a4 = 0;
            char v34 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
            void *v34 = MEMORY[0x1E4F14398];
            v34[1] = 50331650;
            v34[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void *,BOOL)#1}::__invoke;
            void v34[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::descriptor;
            v34[4] = v33;
            WebKit::createUIAlertController(v19, 0, &v48);
            char v35 = (void *)MEMORY[0x1E4F42720];
            v45[0] = MEMORY[0x1E4F143A8];
            v45[1] = 3321888768;
            uint64_t v45[2] = ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke;
            v45[3] = &__block_descriptor_40_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0_e23_v16__0__UIAlertAction_8l;
            uint64_t v36 = _Block_copy(v34);
            long long v46 = _Block_copy(v36);
            uint64_t v37 = [v35 actionWithTitle:v6 style:0 handler:v45];
            _Block_release(v36);
            uint64_t v38 = (void *)MEMORY[0x1E4F42720];
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 3321888768;
            v43[2] = ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke_6;
            v43[3] = &__block_descriptor_40_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1_e23_v16__0__UIAlertAction_8l;
            uint64_t v39 = _Block_copy(v34);
            aBlocuint64_t k = _Block_copy(v39);
            uint64_t v40 = [v38 actionWithTitle:v31 style:1 handler:v43];
            _Block_release(v39);
            [v48 addAction:v40];
            [v48 addAction:v37];
            CFTypeRef v22 = cf;
            int v41 = objc_msgSend((id)cf, "_wk_viewControllerForFullScreenPresentation");
            [v41 presentViewController:v48 animated:1 completion:0];
            _Block_release(aBlock);
            _Block_release(v46);
            id v42 = v48;
            id v48 = 0;
            if (v42) {
              CFRelease(v42);
            }
            _Block_release(v34);
            if (v22) {
              goto LABEL_75;
            }
            return;
        }
      }
LABEL_35:
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      CFTypeRef v22 = cf;
      if (cf) {
LABEL_75:
      }
        CFRelease(v22);
      break;
    case 6:
      uint64_t v12 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&v48, (WebCore *)@"Allow “%@” to observe your screen?", v10);
      id v13 = v48;
      if (v48)
      {
LABEL_28:
        CFAutorelease(v13);
        id v15 = v48;
      }
      else
      {
LABEL_56:
        id v15 = 0;
      }
      goto LABEL_29;
    default:
      goto LABEL_35;
  }
}

void sub_198CF4518(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,CFTypeRef cf)
{
  uint64_t v23 = *(WTF::StringImpl **)(v21 - 88);
  *(void *)(v21 - 88) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = result;
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0(uint64_t a1)
{
}

uint64_t ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = result;
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1)
{
}

void WebKit::requestAVCaptureAccessForType(PAL *a1, uint64_t *a2)
{
  if (a1 == 1) {
    uint64_t AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(a1);
  }
  else {
    uint64_t AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeVideo(a1);
  }
  uint64_t v4 = AVFoundation_AVMediaTypeAudio;
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v6 = MEMORY[0x1E4F14398];
  v6[1] = 50331650;
  void v6[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v6[4] = v5;
  [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62D8])() requestAccessForMediaType:v4 completionHandler:v6];

  _Block_release(v6);
}

void sub_198CF480C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::requestSpeechRecognitionAccess(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v2 = MEMORY[0x1E4F14398];
  v2[1] = 50331650;
  v2[2] = WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,SFSpeechRecognizerAuthorizationStatus)#1}::__invoke;
  v2[3] = &WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v2[4] = v1;
  [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6338])() requestAuthorization:v2];

  _Block_release(v2);
}

void sub_198CF490C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::checkSpeechRecognitionServiceAvailability(WebKit *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    id v3 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6338])());
    uint64_t v4 = (void *)MEMORY[0x1E4F1CA20];
    if (*(void *)this) {
      uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v6 = objc_msgSend(v3, "initWithLocale:", objc_msgSend(v4, "localeWithLocaleIdentifier:", v5));
  }
  else
  {
    uint64_t v6 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6338])()) init];
  }
  uint64_t v7 = v6;
  if (!v6) {
    return 0;
  }
  uint64_t v8 = [v6 isAvailable];
  CFRelease(v7);
  return v8;
}

void sub_198CF4A20(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ModelElementController::modelViewForModelIdentifier(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 272);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3))return 0; {
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  uint64_t v10 = v9 ? v9 - 16 : 0;
  uint64_t v11 = *(void *)(v10 + 232);
  if (!v11 || *(unsigned char *)(v11 + 36)) {
    return 0;
  }
  uint64_t v13 = *(void *)(v11 + 72);
  v15[0] = a2;
  v15[1] = a3;
  char v16 = 1;
  uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(v13 + 16), v15);
  if (result)
  {
    uint64_t v14 = *(void *)(result + 48);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return v14;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WebKit::ModelElementController::takeModelElementFullscreen(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, WTF::URL *a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(v9 + 104) + 488))(*(void *)(v9 + 104));
  if (result)
  {
    uint64_t v11 = result;
    uint64_t result = (void *)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3);
    if (result)
    {
      uint64_t v12 = result;
      [result frame];
      objc_msgSend(v12, "convertRect:toView:", 0);
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      uint64_t v21 = (void *)[v12 preview];
      [v21 setCanonicalWebPageURL:WTF::URL::operator NSURL *()];
      v25[0] = WTF::URL::fragmentIdentifier(a4);
      v25[1] = v22;
      WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)v25);
      [v21 setUrlFragment:cf];
      CFTypeRef v23 = cf;
      CFTypeRef cf = 0;
      if (v23) {
        CFRelease(v23);
      }
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke;
      void v24[3] = &unk_1E5812C90;
      v24[4] = v11;
      v24[5] = v12;
      v24[6] = v21;
      return objc_msgSend(v21, "createFullscreenInstanceWithInitialFrame:previewOptions:completionHandler:", &unk_1EEA53228, v24, v14, v16, v18, v20);
    }
  }
  return result;
}

void sub_198CF4CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    [a3 invalidate];
  }
  else
  {
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_2;
    block[3] = &unk_1E5812C68;
    block[4] = a2;
    long long v8 = *(_OWORD *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v9 = a3;
    uint64_t v10 = v6;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) setModalPresentationStyle:5];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "view"), "setBackgroundColor:", objc_msgSend(MEMORY[0x1E4F428B8], "clearColor"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  uint64_t v8[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_3;
  void v8[3] = &unk_1E5812CB8;
  long long v9 = *(_OWORD *)(a1 + 48);
  [v2 presentViewController:v3 animated:0 completion:v8];
  uint64_t v4 = *(void **)(a1 + 64);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_4;
  void v7[3] = &unk_1E5812C40;
  uint64_t v5 = *(void *)(a1 + 32);
  v7[4] = *(void *)(a1 + 48);
  v7[5] = v5;
  return [v4 observeDismissFullscreenWithCompletionHandler:v7];
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_3(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "layer"), "superlayer"), "context"), "addFence:", *(void *)(a1 + 40));
  [MEMORY[0x1E4F39CF8] commit];
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 invalidate];
}

void ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_5;
  v4[3] = &unk_1E5812C18;
  v4[4] = a4;
  v4[5] = a2;
  long long v5 = *(_OWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E4F14428], v4);
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_5(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v3 || !v2)
  {
    return [v2 invalidate];
  }
  else
  {
    [MEMORY[0x1E4F39CF8] begin];
    objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "layer"), "superlayer"), "context"), "addFence:", *(void *)(a1 + 40));
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_6;
    v5[3] = &unk_1E5812158;
    v5[4] = *(void *)(a1 + 56);
    [MEMORY[0x1E4F39CF8] setCompletionBlock:v5];
    [MEMORY[0x1E4F39CF8] commit];
    return [*(id *)(a1 + 40) invalidate];
  }
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_6(uint64_t a1)
{
  return [*(id *)(a1 + 32) dismissViewControllerAnimated:0 completion:0];
}

void WebKit::ModelElementController::getCameraForModelElement(unsigned int *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier((uint64_t)a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
    uint64_t v7 = *(atomic_uint **)a1;
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    uint64_t v8 = *a4;
    *a4 = 0;
    long long v9 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    unsigned char v9[2] = _ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPvS1_S3_E_8__invokeESN_S1_S3_;
    uint64_t v9[3] = &_ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_E10descriptor;
    void v9[4] = v7;
    v9[5] = v8;
    [v6 getCameraTransform:v9];
    _Block_release(v9);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v19, 1);
    CFTypeRef v22 = 0;
    char v23 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v24, (uint64_t *)&v19);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v29, (uint64_t *)&v24);
    int v30 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v29);
    if (v30 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF368[v30])(&v28, v29);
    }
    int v30 = -1;
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = v26;
    uint64_t v26 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    double v13 = v25;
    unint64_t v25 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = v24;
    long long v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFTypeRef v15 = v22;
    CFTypeRef v22 = 0;
    if (v15) {
      CFRelease(v15);
    }
    double v16 = v21;
    uint64_t v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    double v17 = v20;
    double v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    double v18 = v19;
    double v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
}

void sub_198CF5334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v30 = *(unsigned int *)(v28 - 64);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF368[v30])(v28 - 145, v28 - 144);
  }
  *(_DWORD *)(v28 - 64) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(&v3, (uint64_t)v5);
  if (v6 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CF368[v6])(&v4, v5);
  }
  int v6 = -1;
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198CF55BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9CF368[a24])(&a13, &a14);
  }
  a24 = -1;
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setCameraForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, float64_t a5, float64_t a6)
{
  uint64_t v7 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    v8.f64[0] = a5;
    v8.f64[1] = a6;
    [v7 setCameraTransform:COERCE_DOUBLE(vcvt_f32_f64(v8))];
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
}

WTF::StringImpl *WebKit::ModelElementController::isPlayingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  long long v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    v15[0] = [v5 isPlaying];
    int v16 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9CF3E8[v16])(&v22, v15);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    CFTypeRef v20 = 0;
    char v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    int v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF3E8[v27])(&v28, v26);
    }
    int v27 = -1;
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    long long v9 = v24;
    long long v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    CFTypeRef v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v20;
    CFTypeRef v20 = 0;
    if (v12) {
      CFRelease(v12);
    }
    double v13 = v19;
    double v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v17;
    double v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF58C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v41 = *(unsigned int *)(v39 - 48);
  if (v41 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF3E8[v41])(v39 - 33, v39 - 128);
  }
  *(_DWORD *)(v39 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2) {
      WTF::StringImpl::destroy(a37, a2);
    }
    else {
      *(_DWORD *)a37 -= 2;
    }
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, a2);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, a2);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v3, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(&v5, (uint64_t)v3);
  if (v4 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CF3E8[v4])(&v6, v3);
  }
  int v4 = -1;
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198CF5AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  if (a20 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9CF3E8[a20])(v20 - 17, &a10);
  }
  a20 = -1;
  uint64_t v22 = *(void *)(v20 - 32);
  *(void *)(v20 - 3objc_destroyWeak(this + 2) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ModelElementController::setAnimationIsPlayingForModelElement(unsigned int *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  CFTypeRef v8 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier((uint64_t)a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
    long long v9 = *(atomic_uint **)a1;
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = *a5;
    *a5 = 0;
    CFTypeRef v11 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *CFTypeRef v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v11[4] = v9;
    v11[5] = v10;
    [v8 setIsPlaying:a4 reply:v11];
    _Block_release(v11);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
  }
}

void sub_198CF5C74(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ModelElementController::isLoopingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    v15[0] = [v5 isLooping];
    int v16 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9CF3E8[v16])(&v22, v15);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    CFTypeRef v20 = 0;
    char v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    int v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF3E8[v27])(&v28, v26);
    }
    int v27 = -1;
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    long long v9 = v24;
    long long v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    uint64_t v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v20;
    CFTypeRef v20 = 0;
    if (v12) {
      CFRelease(v12);
    }
    double v13 = v19;
    double v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v17;
    double v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF5EE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v41 = *(unsigned int *)(v39 - 48);
  if (v41 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF3E8[v41])(v39 - 33, v39 - 128);
  }
  *(_DWORD *)(v39 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2) {
      WTF::StringImpl::destroy(a37, a2);
    }
    else {
      *(_DWORD *)a37 -= 2;
    }
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, a2);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, a2);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setIsLoopingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector()) {
    [v7 setIsLooping:a4];
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
}

WTF::StringImpl *WebKit::ModelElementController::animationDurationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    [v5 duration];
    v26[0] = v6;
    int v27 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, void *))off_1EE9CF440[v27])(&v21, v26);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v16, 1);
    CFTypeRef v19 = 0;
    char v20 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v21, (uint64_t *)&v16);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v28, (uint64_t *)&v21);
    int v29 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v28);
    if (v29 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF440[v29])(&v25, v28);
    }
    int v29 = -1;
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    uint64_t v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v21;
    char v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    CFTypeRef v13 = v19;
    CFTypeRef v19 = 0;
    if (v13) {
      CFRelease(v13);
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v8);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFTypeRef v15 = v17;
    double v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v8);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = v16;
    int v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF62F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v45 = *(unsigned int *)(v43 - 48);
  if (v45 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CF440[v45])(&a32, v43 - 128);
  }
  *(_DWORD *)(v43 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(&v3, (uint64_t)v5);
  if (v6 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CF440[v6])(&v4, v5);
  }
  int v6 = -1;
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198CF6540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9CF440[a24])(&a13, &a14);
  }
  a24 = -1;
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::ModelElementController::animationCurrentTimeForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    [v5 currentTime];
    v26[0] = v6;
    int v27 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, void *))off_1EE9CF440[v27])(&v21, v26);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v16, 1);
    CFTypeRef v19 = 0;
    char v20 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v21, (uint64_t *)&v16);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v28, (uint64_t *)&v21);
    int v29 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v28);
    if (v29 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF440[v29])(&v25, v28);
    }
    int v29 = -1;
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    uint64_t v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v21;
    char v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    CFTypeRef v13 = v19;
    CFTypeRef v19 = 0;
    if (v13) {
      CFRelease(v13);
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v8);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFTypeRef v15 = v17;
    double v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v8);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = v16;
    int v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF67E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v45 = *(unsigned int *)(v43 - 48);
  if (v45 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CF440[v45])(&a32, v43 - 128);
  }
  *(_DWORD *)(v43 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setAnimationCurrentTimeForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, double a5)
{
  uint64_t v7 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector()) {
    [v7 setCurrentTime:a5];
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
}

WTF::StringImpl *WebKit::ModelElementController::hasAudioForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    v15[0] = [v5 hasAudio];
    int v16 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9CF3E8[v16])(&v22, v15);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    CFTypeRef v20 = 0;
    char v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    int v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF3E8[v27])(&v28, v26);
    }
    int v27 = -1;
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    CFTypeRef v9 = v24;
    long long v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    uint64_t v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v20;
    CFTypeRef v20 = 0;
    if (v12) {
      CFRelease(v12);
    }
    CFTypeRef v13 = v19;
    CFTypeRef v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v17;
    double v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF6BD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v41 = *(unsigned int *)(v39 - 48);
  if (v41 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF3E8[v41])(v39 - 33, v39 - 128);
  }
  *(_DWORD *)(v39 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2) {
      WTF::StringImpl::destroy(a37, a2);
    }
    else {
      *(_DWORD *)a37 -= 2;
    }
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, a2);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, a2);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::ModelElementController::isMutedForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v5 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector())
  {
    v15[0] = [v5 isMuted];
    int v16 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9CF3E8[v16])(&v22, v15);
    }
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    CFTypeRef v20 = 0;
    char v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    int v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF3E8[v27])(&v28, v26);
    }
    int v27 = -1;
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    CFTypeRef v9 = v24;
    long long v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v23;
    char v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = v22;
    uint64_t v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFTypeRef v12 = v20;
    CFTypeRef v20 = 0;
    if (v12) {
      CFRelease(v12);
    }
    CFTypeRef v13 = v19;
    CFTypeRef v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double v14 = v18;
    double v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v17;
    double v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198CF6F48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v41 = *(unsigned int *)(v39 - 48);
  if (v41 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF3E8[v41])(v39 - 33, v39 - 128);
  }
  *(_DWORD *)(v39 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2) {
      WTF::StringImpl::destroy(a37, a2);
    }
    else {
      *(_DWORD *)a37 -= 2;
    }
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, a2);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2) {
      WTF::StringImpl::destroy(a31, a2);
    }
    else {
      *(_DWORD *)a31 -= 2;
    }
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setIsMutedForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if (objc_opt_respondsToSelector()) {
    [v7 setIsMuted:a4];
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
}

uint64_t WebKit::initWKMarketplaceKit(WebKit *this)
{
  if (qword_1EB359A48 != -1) {
    dispatch_once(&qword_1EB359A48, &__block_literal_global_24);
  }
  return qword_1EB359A50;
}

uint64_t WebKit::NavigationState::releaseNetworkActivityAfterLoadCompletion(WebKit::NavigationState *this)
{
  return WebKit::NavigationState::releaseNetworkActivity((uint64_t)this, 0);
}

void WebKit::NavigationState::~NavigationState(WebKit::NavigationState *this)
{
  uint64_t v2 = (id *)((char *)this + 16);
  id WeakRetained = objc_loadWeakRetained((id *)this + 2);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = *((void *)WeakRetained + 52);
    if (v6) {
      id WeakRetained = (void *)CFRetain(*(CFTypeRef *)(v6 + 8));
    }
    {
      unsigned int v7 = dword_1EB35A628++;
      if (v7 > dword_1EB35A62C) {
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)WeakRetained, v4);
      }
    }
    else
    {
      WebKit::navigationStates(void)::navigationStates = 0;
      *(void *)&dword_1EB35A628 = 1;
    }
    uint64_t v8 = *(void *)(v6 + 24);
    if (v8 && *(void *)(v8 + 8) && WebKit::navigationStates(void)::navigationStates)
    {
      int v9 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 8);
      unint64_t v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
      for (int i = 1; ; ++i)
      {
        uint64_t v15 = v13;
        uint64_t v16 = *(void *)(WebKit::navigationStates(void)::navigationStates + 16 * v13);
        if (v16 != -1)
        {
          if (!v16) {
            goto LABEL_26;
          }
          if (v16 == v8) {
            break;
          }
        }
        unsigned int v13 = (v15 + i) & v9;
      }
      if (v15 != *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(WebKit::navigationStates(void)::navigationStates + 16 * v15, v4);
        ++*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16);
        int v17 = WebKit::navigationStates(void)::navigationStates
            ? *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) - 1
            : -1;
        *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 1objc_destroyWeak(this + 2) = v17;
        if (WebKit::navigationStates(void)::navigationStates)
        {
          unsigned int v18 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
          if (6 * *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) < v18 && v18 >= 9) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v18 >> 1);
          }
        }
      }
    }
LABEL_26:
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(*(void *)(v6 + 32) + 976, this);
    CFRelease(*(CFTypeRef *)(v6 + 8));
    CFRelease(v5);
  }
  *((void *)this + 8) = &unk_1EE9B3390;
  uint64_t v20 = *((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::NavigationState *)((char *)this + 64));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 7, 0);
  objc_destroyWeak((id *)this + 5);
  objc_destroyWeak((id *)this + 3);
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v21);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NavigationState::~NavigationState(this);

  WTF::fastFree(v1, v2);
}

void sub_198CF73C4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  CFRelease(v3);
  *(void *)(v1 + 64) = &unk_1EE9B3390;
  uint64_t v7 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 64));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v1 + 56), 0);
  objc_destroyWeak((id *)(v1 + 40));
  objc_destroyWeak((id *)(v1 + 24));
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v8);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::fromWebPage(WebKit::NavigationState *this, WebKit::WebPageProxy *a2)
{
  {
    WebKit::navigationStates(void)::navigationStates = 0;
    *(void *)&dword_1EB35A628 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::get((atomic_uint **)&WebKit::navigationStates(void)::navigationStates, (uint64_t)this, (atomic_uint **)&v6);
  uint64_t v3 = (unsigned int *)v6;
  if (!v6) {
    return 0;
  }
  uint64_t v4 = *((void *)v6 + 1);
  uint64_t v6 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

atomic_uint **WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::get@<X0>(atomic_uint **result@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  ++*((_DWORD *)result + 2);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 && *(void *)(v3 + 8)) {
    return WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(result, v3, a3);
  }
  *a3 = 0;
  return result;
}

id WebKit::NavigationState::navigationDelegate@<X0>(id *this@<X0>, void *a2@<X8>)
{
  id result = objc_loadWeakRetained(this + 3);
  *a2 = result;
  return result;
}

id WebKit::NavigationState::historyDelegate@<X0>(id *this@<X0>, void *a2@<X8>)
{
  id result = objc_loadWeakRetained(this + 5);
  *a2 = result;
  return result;
}

void WebKit::NavigationState::navigationGestureDidBegin(id *this)
{
  if (*((_WORD *)this + 19))
  {
    id WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained;
      id v4 = objc_loadWeakRetained(this + 2);
      [v3 _webViewDidBeginNavigationGesture:v4];
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void sub_198CF7644(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureWillEnd(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 38) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      uint64_t v7 = WeakRetained;
      id v8 = objc_loadWeakRetained((id *)(a1 + 16));
      if (a2) {
        uint64_t v9 = *(void *)(a3 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
      [v7 _webViewWillEndNavigationGesture:v8 withNavigationToBackForwardListItem:v9];
      if (v8) {
        CFRelease(v8);
      }
      CFRelease(v7);
    }
  }
}

void sub_198CF7708(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureDidEnd(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 38) & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      uint64_t v7 = WeakRetained;
      id v8 = objc_loadWeakRetained((id *)(a1 + 16));
      if (a2) {
        uint64_t v9 = *(void *)(a3 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
      [v7 _webViewDidEndNavigationGesture:v8 withNavigationToBackForwardListItem:v9];
      if (v8) {
        CFRelease(v8);
      }
      CFRelease(v7);
    }
  }
}

void sub_198CF77CC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::willRecordNavigationSnapshot(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 38) & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      uint64_t v5 = WeakRetained;
      id v6 = objc_loadWeakRetained((id *)(a1 + 16));
      [v5 _webView:v6 willSnapshotBackForwardListItem:*(void *)(a2 + 8)];
      if (v6) {
        CFRelease(v6);
      }
      CFRelease(v5);
    }
  }
}

void sub_198CF7884(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureSnapshotWasRemoved(id *this)
{
  if ((*((_WORD *)this + 19) & 0x10) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained;
      id v4 = objc_loadWeakRetained(this + 2);
      [v3 _webViewDidRemoveNavigationGestureSnapshot:v4];
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void sub_198CF7934(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didRequestPasswordForQuickLookDocument(id *this)
{
  if ((*((_WORD *)this + 19) & 0x200) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained;
      id v4 = objc_loadWeakRetained(this + 2);
      [v3 _webViewDidRequestPasswordForQuickLookDocument:v4];
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void sub_198CF79E4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didStopRequestingPasswordForQuickLookDocument(id *this)
{
  if ((*((_WORD *)this + 19) & 0x400) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained;
      id v4 = objc_loadWeakRetained(this + 2);
      [v3 _webViewDidStopRequestingPasswordForQuickLookDocument:v4];
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void sub_198CF7A94(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didFirstPaint(id *this)
{
  if ((this[4] & 0x4000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained;
      id v4 = objc_loadWeakRetained(this + 2);
      [v3 _webView:v4 renderingProgressDidChange:64];
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void sub_198CF7B50(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::NavigationClient::willGoToBackForwardListItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5 || (*(_WORD *)(v5 + 38) & 0x800) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)objc_loadWeakRetained((id *)(v5 + 24));
  if (result)
  {
    unint64_t v10 = (void *)result;
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11) {
      uint64_t v11 = *(void *)(v11 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v11 + 16));
    [v10 _webView:WeakRetained willGoToBackForwardListItem:*(void *)(a3 + 8) inPageCache:a4];
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v10);
    return 1;
  }
  return result;
}

void sub_198CF7C68(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(*a3 + 24);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 16) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  unint64_t v10 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(void *)(a2 + 48) + 56));
  API::WebsitePolicies::copy(v10, &v40);
  uint64_t v11 = v40;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      if ((*(_DWORD *)(v13 + 32) & 7) != 0)
      {
        id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v13 + 24));
        uint64_t v15 = WeakRetained;
        if (!WeakRetained) {
          goto LABEL_16;
        }
        uint64_t v16 = *(void *)(a1 + 8);
        if (v16)
        {
          int v17 = *(_DWORD *)(*(void *)(v16 + 8) + 32);
          if ((v17 & 2) == 0)
          {
            if ((v17 & 4) == 0)
            {
              unsigned int v18 = &selRef_webView_decidePolicyForNavigationAction_decisionHandler_;
              char v19 = 1;
LABEL_22:
              WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)*v18, (uint64_t *)&v40);
              uint64_t v24 = *a4;
              *a4 = 0;
              uint64_t v25 = *a3;
              CFRetain(*(CFTypeRef *)(*a3 + 8));
              uint64_t v26 = v40;
              uint64_t v40 = 0;
              CFRetain(*(CFTypeRef *)(a2 + 8));
              if (v11) {
                CFRetain(*((CFTypeRef *)v11 + 1));
              }
              uint64_t v27 = *(void *)(a1 + 8);
              if (v19)
              {
                if (v27) {
                  uint64_t v27 = *(void *)(v27 + 8);
                }
                id v28 = objc_loadWeakRetained((id *)(v27 + 16));
                uint64_t v29 = *(void *)(*a3 + 8);
                uint64_t v30 = malloc_type_malloc(0x50uLL, 0x10E004026C8460BuLL);
                *uint64_t v30 = MEMORY[0x1E4F14398];
                v30[1] = 50331650;
                uint64_t v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void *,WKNavigationActionPolicy)#1}::__invoke;
                v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::descriptor;
                _DWORD v30[4] = v24;
                v30[5] = v25;
                v30[6] = v26;
                v30[7] = a2;
                *((unsigned char *)v30 + 64) = v9;
                unsigned char v30[9] = v11;
                [(WebKit::CompletionHandlerCallChecker *)v15 webView:v28 decidePolicyForNavigationAction:v29 decisionHandler:v30];
              }
              else
              {
                uint64_t v39 = v24;
                if (v27)
                {
                  uint64_t v27 = *(void *)(v27 + 8);
                  int v31 = *(_DWORD *)(v27 + 32);
                }
                else
                {
                  LOBYTE(v3objc_destroyWeak(this + 1) = MEMORY[0x20];
                }
                char v32 = (id *)(v27 + 16);
                if ((v31 & 2) != 0)
                {
                  id v28 = objc_loadWeakRetained(v32);
                  uint64_t v35 = *a3;
                  if (v11) {
                    uint64_t v36 = *((void *)v11 + 1);
                  }
                  else {
                    uint64_t v36 = 0;
                  }
                  uint64_t v38 = *(void *)(v35 + 8);
                  uint64_t v30 = malloc_type_malloc(0x50uLL, 0x10E004026C8460BuLL);
                  *uint64_t v30 = MEMORY[0x1E4F14398];
                  v30[1] = 50331650;
                  uint64_t v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke;
                  v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::descriptor;
                  _DWORD v30[4] = v39;
                  v30[5] = v25;
                  v30[6] = v26;
                  v30[7] = a2;
                  *((unsigned char *)v30 + 64) = v9;
                  unsigned char v30[9] = v11;
                  [(WebKit::CompletionHandlerCallChecker *)v15 webView:v28 decidePolicyForNavigationAction:v38 preferences:v36 decisionHandler:v30];
                }
                else
                {
                  id v28 = objc_loadWeakRetained(v32);
                  uint64_t v33 = *a3;
                  if (v11) {
                    uint64_t v34 = *((void *)v11 + 1);
                  }
                  else {
                    uint64_t v34 = 0;
                  }
                  uint64_t v37 = *(void *)(v33 + 8);
                  uint64_t v30 = malloc_type_malloc(0x50uLL, 0x10E004026C8460BuLL);
                  *uint64_t v30 = MEMORY[0x1E4F14398];
                  v30[1] = 50331650;
                  uint64_t v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke;
                  v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::descriptor;
                  _DWORD v30[4] = v39;
                  v30[5] = v25;
                  v30[6] = v26;
                  v30[7] = a2;
                  *((unsigned char *)v30 + 64) = v9;
                  unsigned char v30[9] = v11;
                  [(WebKit::CompletionHandlerCallChecker *)v15 _webView:v28 decidePolicyForNavigationAction:v37 preferences:v34 userInfo:0 decisionHandler:v30];
                }
              }
              _Block_release(v30);
              if (v28) {
                CFRelease(v28);
              }
              if (v40) {
                WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v40);
              }
              CFRelease(v15);
              goto LABEL_16;
            }
LABEL_20:
            char v19 = 0;
            unsigned int v18 = &selRef__webView_decidePolicyForNavigationAction_preferences_userInfo_decisionHandler_;
            goto LABEL_22;
          }
        }
        else if ((*(_DWORD *)(MEMORY[8] + 32) & 2) == 0)
        {
          goto LABEL_20;
        }
        char v19 = 0;
        unsigned int v18 = &selRef_webView_decidePolicyForNavigationAction_preferences_decisionHandler_;
        goto LABEL_22;
      }
    }
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v20 = *a4;
  *a4 = 0;
  uint64_t v21 = *a3;
  CFRetain(*(CFTypeRef *)(*a3 + 8));
  if (v11) {
    CFRetain(*((CFTypeRef *)v11 + 1));
  }
  uint64_t v22 = (API::WebsitePolicies *)WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v22 = &unk_1EE9CF718;
  *((void *)v22 + objc_destroyWeak(this + 1) = a2;
  *((void *)v22 + objc_destroyWeak(this + 2) = v20;
  *((void *)v22 + 3) = v21;
  *((void *)v22 + 4) = v11;
  uint64_t v40 = v22;
  WebKit::tryInterceptNavigation(a3, a2, (const WTF::StringImpl *)&v40);
  char v23 = v40;
  uint64_t v40 = 0;
  if (v23) {
    (*(void (**)(API::WebsitePolicies *))(*(void *)v23 + 8))(v23);
  }
LABEL_16:
  if (v11) {
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
}

void sub_198CF80F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  _Block_release(v12);
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  _Unwind_Resume(a1);
}

void WebKit::tryInterceptNavigation(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  id v6 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a1 + 40));
  if (WebKit::isMarketplaceKitURL(v6, v7))
  {
    WebKit::interceptMarketplaceKitNavigation(a1, a2);
    uint64_t v8 = *(void (**)(void))(**(void **)a3 + 16);
    v8();
  }
  else
  {
    uint64_t v9 = *a1;
    if (*(unsigned char *)(*a1 + 280) && *(unsigned char *)(v9 + 369) == 2)
    {
      uint64_t v10 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v9 + 40));
      uint64_t v11 = *(WTF::StringImpl **)v10;
      if (*(void *)v10) {
        *(_DWORD *)v11 += 2;
      }
      uint64_t v45 = v11;
      long long v12 = *(_OWORD *)(v10 + 24);
      long long v46 = *(_OWORD *)(v10 + 8);
      long long v47 = v12;
      uint64_t v13 = *a1;
      WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v38, (const String *)(*a1 + 40));
      double v14 = *(_DWORD **)(v13 + 192);
      if (v14) {
        *v14 += 2;
      }
      uint64_t v39 = v14;
      uint64_t v15 = *(_DWORD **)(v13 + 200);
      if (v15) {
        *v15 += 2;
      }
      uint64_t v40 = v15;
      uint64_t v16 = *(_DWORD **)(v13 + 208);
      if (v16) {
        ++*v16;
      }
      uint64_t v17 = *(void *)(v13 + 216);
      uint64_t v41 = v16;
      uint64_t v42 = v17;
      char v43 = *(unsigned char *)(v13 + 224);
      unsigned int v18 = *(const void **)(v13 + 232);
      CFTypeRef cf = v18;
      if (v18) {
        CFRetain(v18);
      }
      WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString((WebCore::ResourceRequestBase *)v38);
      WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v37, (WebCore::ResourceRequestBase *)v38);
      if (v37 && *((_DWORD *)v37 + 1))
      {
        WTF::URL::URL((uint64_t)&v36, &v37);
        uint64_t v20 = WTF::URL::operator NSURL *();
        uint64_t v21 = v36;
        uint64_t v36 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v19);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)8);
      uint64_t v23 = *a1;
      *a1 = 0;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
      uint64_t v24 = *(atomic_uint **)(a2 + 24);
      if (v24) {
        atomic_fetch_add(v24, 1u);
      }
      uint64_t v25 = *(void *)a3;
      *(void *)a3 = 0;
      uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v26 = &unk_1EE9CF4D0;
      v26[1] = v23;
      v26[2] = v24;
      v26[3] = v25;
      *uint64_t v22 = v26;
      id v27 = objc_alloc_init(MEMORY[0x1E4F224A0]);
      [v27 setReferrerURL:v20];
      id v28 = (void *)MEMORY[0x1E4F22398];
      uint64_t v29 = WTF::URL::operator NSURL *();
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 3321888768;
      v35[2] = ___ZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEE_block_invoke;
      v35[3] = &__block_descriptor_40_e8_32c179_ZTSKZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEEE3__1_e20_v20__0B8__NSError_12l;
      void v35[4] = v22;
      [v28 openWithURL:v29 configuration:v27 completionHandler:v35];
      if (v27) {
        CFRelease(v27);
      }
      int v31 = v37;
      uint64_t v37 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      CFTypeRef v32 = cf;
      CFTypeRef cf = 0;
      if (v32) {
        CFRelease(v32);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v38);
      uint64_t v34 = v45;
      uint64_t v45 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v33);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      WebKit::trySOAuthorization(a1, (WebKit::WebsiteDataStore **)a2, a3);
    }
  }
}

void sub_198CF861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf)
{
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a21);
  id v48 = *(WTF::StringImpl **)(v45 - 104);
  *(void *)(v45 - 104) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v47);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::contentRuleListNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || !*(void *)(v4 + 8)) {
    return;
  }
  uint64_t v9 = a2[36];
  if (!v9)
  {
    uint64_t v10 = a2[37];
    if (!v10 || (uint64_t v11 = *(void *)(v10 + 8)) == 0)
    {
LABEL_9:
      uint64_t v4 = *(void *)(v4 + 8);
      if ((*(_WORD *)(v4 + 38) & 0x60) == 0) {
        return;
      }
      goto LABEL_10;
    }
    uint64_t v9 = v11 - 16;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  WebKit::WebExtensionController::handleContentRuleListNotification(v9, *(void *)(a2[4] + 760), a3, a4);
  CFRelease(*(CFTypeRef *)(v9 + 8));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:
  id cf = objc_loadWeakRetained((id *)(v4 + 24));
  if (!cf) {
    return;
  }
  uint64_t v12 = *(unsigned int *)(a4 + 52);
  if (!v12)
  {
    uint64_t v13 = 0;
    double v14 = 0;
    char v34 = 1;
    goto LABEL_41;
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = a4;
  uint64_t v16 = *(void *)(a4 + 40);
  uint64_t v17 = v16 + 32 * v12;
  do
  {
    uint64_t v18 = *(unsigned int *)(v16 + 28);
    if (v18)
    {
      char v19 = *(void **)(v16 + 16);
      for (uint64_t i = 8 * v18; i; i -= 8)
      {
        if (v14)
        {
          if (!v13) {
            goto LABEL_19;
          }
        }
        else
        {
          double v14 = objc_opt_new();
          if (!v13) {
LABEL_19:
          }
            uint64_t v13 = objc_opt_new();
        }
        if (*(void *)v16) {
          uint64_t v21 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v21 = &stru_1EEA10550;
        }
        [v14 addObject:v21];
        if (*v19) {
          uint64_t v22 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v22 = &stru_1EEA10550;
        }
        [v13 addObject:v22];
        ++v19;
      }
    }
    v16 += 32;
  }
  while (v16 != v17);
  if (v13)
  {
    uint64_t v23 = *(void *)(a1 + 8);
    a4 = v15;
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 8);
      if ((*(_WORD *)(v24 + 38) & 0x20) == 0) {
        goto LABEL_40;
      }
    }
    else
    {
      if ((MEMORY[0x26] & 0x20) == 0) {
        goto LABEL_40;
      }
      uint64_t v24 = 0;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v24 + 16));
    [cf _webView:WeakRetained URL:WTF::URL::operator NSURL *() contentRuleListIdentifiers:v14 notifications:v13];
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
LABEL_40:
    char v34 = 0;
  }
  else
  {
    char v34 = 1;
    a4 = v15;
  }
LABEL_41:
  if ((*(_WORD *)(*(void *)(*(void *)(a1 + 8) + 8) + 38) & 0x40) != 0)
  {
    uint64_t v26 = *(unsigned int *)(a4 + 52);
    if (v26)
    {
      id v27 = *(void **)(a4 + 40);
      id v28 = &v27[4 * v26];
      do
      {
        uint64_t v29 = *(void *)(a1 + 8);
        if (v29) {
          uint64_t v29 = *(void *)(v29 + 8);
        }
        id v30 = objc_loadWeakRetained((id *)(v29 + 16));
        if (*v27) {
          int v31 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          int v31 = &stru_1EEA10550;
        }
        CFTypeRef v32 = (int *)(v27 + 1);
        API::ContentRuleListAction::create(v32, &v36);
        uint64_t v33 = v36;
        [cf _webView:v30 contentRuleListWithIdentifier:v31 performedAction:*(void *)(v36 + 8) forURL:WTF::URL::operator NSURL *()];
        CFRelease(*(CFTypeRef *)(v33 + 8));
        if (v30) {
          CFRelease(v30);
        }
        id v27 = v32 + 6;
      }
      while (v27 != v28);
    }
  }
  if ((v34 & 1) == 0) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }

  CFRelease(cf);
}

void sub_198CF8A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  CFRelease(v12);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && (*(_DWORD *)(v7 + 32) & 8) != 0)
  {
    id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 24));
    if (WeakRetained)
    {
      uint64_t v13 = WeakRetained;
      WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_webView_decidePolicyForNavigationResponse_decisionHandler_, &v20);
      uint64_t v14 = *(void *)(a1 + 8);
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 8);
      }
      id v15 = objc_loadWeakRetained((id *)(v14 + 16));
      uint64_t v16 = *(void *)(*(void *)a3 + 8);
      uint64_t v17 = *a4;
      *a4 = 0;
      uint64_t v18 = v20;
      char v19 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      *char v19 = MEMORY[0x1E4F14398];
      v19[1] = 50331650;
      v19[2] = WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void *,WKNavigationResponsePolicy)#1}::__invoke;
      v19[3] = &WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::descriptor;
      v19[4] = v17;
      v19[5] = v18;
      [(WebKit::CompletionHandlerCallChecker *)v13 webView:v15 decidePolicyForNavigationResponse:v16 decisionHandler:v19];
      _Block_release(v19);
      if (v15) {
        CFRelease(v15);
      }
      CFRelease(v13);
    }
  }
  else
  {
    uint64_t v8 = (void *)[(id)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(*(void *)a3 + 224)) URL];
    if ([v8 isFileURL])
    {
      char v21 = 0;
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", objc_msgSend(v8, "path"), &v21))BOOL v9 = v21 == 0; {
      else
      }
        BOOL v9 = 0;
      if (v9 && *(unsigned char *)(*(void *)a3 + 480)) {
        WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
      }
      else {
        WebKit::WebFramePolicyListenerProxy::ignore((WTF *)*a4, 0);
      }
    }
    else
    {
      uint64_t v10 = (WTF *)*a4;
      if (*(unsigned char *)(*(void *)a3 + 480))
      {
        WebKit::WebFramePolicyListenerProxy::use((uint64_t)v10, 0, 0);
      }
      else
      {
        WebKit::WebFramePolicyListenerProxy::ignore(v10, 0);
      }
    }
  }
}

void sub_198CF8D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v12 = v10;
  _Block_release(v12);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didStartProvisionalNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WebCore::ResourceRequest *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *((void *)this + 1);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v10 = WeakRetained;
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((*(_DWORD *)(v12 + 32) & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_10:
    id v13 = objc_loadWeakRetained((id *)(v12 + 16));
    if (a4) {
      uint64_t v14 = *((void *)a4 + 1);
    }
    else {
      uint64_t v14 = 0;
    }
    [v10 webView:v13 didStartProvisionalNavigation:v14];
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_15;
  }
  if ((MEMORY[0x20] & 0x10) != 0)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
LABEL_15:

  CFRelease(v10);
}

void sub_198CF8EE4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v10 = WeakRetained;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((*(_DWORD *)(v12 + 32) & 0x20) == 0) {
      goto LABEL_18;
    }
LABEL_10:
    id v13 = objc_loadWeakRetained((id *)(v12 + 16));
    uint64_t v14 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v18 = a2;
    uint64_t v15 = API::Object::newObject(0x140uLL, 60);
    uint64_t v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
    uint64_t v17 = *(const void **)(v16 + 8);
    if (v17) {
      CFRetain(*(CFTypeRef *)(v16 + 8));
    }
    [v10 _webView:v13 didStartProvisionalLoadWithRequest:v14 inFrame:v17];
    if (v17) {
      CFRelease(v17);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_18;
  }
  if ((MEMORY[0x20] & 0x20) != 0)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
LABEL_18:

  CFRelease(v10);
}

void sub_198CF9070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didReceiveServerRedirectForProvisionalNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x40) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          BOOL v9 = WeakRetained;
          uint64_t v10 = *((void *)this + 1);
          if (v10) {
            uint64_t v10 = *(void *)(v10 + 8);
          }
          id v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (a3) {
            uint64_t v12 = *((void *)a3 + 1);
          }
          else {
            uint64_t v12 = 0;
          }
          [v9 webView:v11 didReceiveServerRedirectForProvisionalNavigation:v12];
          if (v11) {
            CFRelease(v11);
          }
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_198CF9194(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::willPerformClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, double a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x800) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          uint64_t v10 = WeakRetained;
          WTF::URL::URL((uint64_t)&v15, a3);
          uint64_t v11 = *((void *)this + 1);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          [v10 _webView:v12 willPerformClientRedirectToURL:WTF::URL::operator NSURL *() delay:a4];
          if (v12) {
            CFRelease(v12);
          }
          uint64_t v14 = v15;
          uint64_t v15 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v13);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CF92A8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didPerformClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x1000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          uint64_t v10 = WeakRetained;
          WTF::URL::URL((uint64_t)&v18, a3);
          WTF::URL::URL((uint64_t)&v17, a4);
          uint64_t v11 = *((void *)this + 1);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          uint64_t v13 = WTF::URL::operator NSURL *();
          [v10 _webView:v12 didPerformClientRedirectFromURL:v13 toURL:WTF::URL::operator NSURL *()];
          if (v12) {
            CFRelease(v12);
          }
          uint64_t v15 = v17;
          uint64_t v17 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v14);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = v18;
          uint64_t v18 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v14);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CF9424(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCancelClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 32) & 0x2000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 1);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 16));
          [v6 _webViewDidCancelClientRedirect:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198CF9554(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailProvisionalNavigationWithError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::ResourceError *a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    return;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v7 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v15 = WeakRetained;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16) {
    uint64_t v16 = *(void *)(v16 + 8);
  }
  uint64_t v17 = (WKWebView *)objc_loadWeakRetained((id *)(v16 + 16));
  uint64_t v18 = (const WTF::URL *)WebCore::ResourceError::nsError(a6);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v17, *(const FrameInfoData **)(a3 + 248), *(NSError **)(a3 + 256), v18, a5);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if (!*(unsigned char *)a3)
  {
    if (v19)
    {
      uint64_t v21 = *(void *)(v19 + 8);
      if ((*(_DWORD *)(v21 + 32) & 0x200) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      if ((MEMORY[0x20] & 0x200) == 0) {
        goto LABEL_30;
      }
      uint64_t v21 = 0;
    }
    id v24 = objc_loadWeakRetained((id *)(v21 + 16));
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v29 = a2;
    uint64_t v25 = API::Object::newObject(0x140uLL, 60);
    uint64_t v26 = API::FrameInfo::FrameInfo(v25, a3, &v29);
    id v27 = *(const void **)(v26 + 8);
    if (v27) {
      CFRetain(*(CFTypeRef *)(v26 + 8));
    }
    objc_msgSend(v15, "_webView:navigation:didFailProvisionalLoadInSubframe:withError:", v24, 0, v27, cf, v29);
    if (v27) {
      CFRelease(v27);
    }
    CFRelease(*(CFTypeRef *)(v25 + 8));
    if (v29) {
      CFRelease(*(CFTypeRef *)(v29 + 8));
    }
    if (v24) {
      CFRelease(v24);
    }
    goto LABEL_30;
  }
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 8);
    if ((*(_DWORD *)(v20 + 32) & 0x80) == 0) {
      goto LABEL_30;
    }
LABEL_18:
    id v22 = objc_loadWeakRetained((id *)(v20 + 16));
    if (a4) {
      uint64_t v23 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v23 = 0;
    }
    CFTypeRef v28 = cf;
    [v15 webView:v22 didFailProvisionalNavigation:v23 withError:cf];
    if (v22) {
      CFRelease(v22);
    }
    goto LABEL_34;
  }
  if ((MEMORY[0x20] & 0x80) != 0)
  {
    uint64_t v20 = 0;
    goto LABEL_18;
  }
LABEL_30:
  CFTypeRef v28 = cf;
LABEL_34:
  if (v28) {
    CFRelease(v28);
  }

  CFRelease(v15);
}

void sub_198CF97C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::createErrorWithRecoveryAttempter(WebKit *this, WKWebView *a2, const FrameInfoData *a3, NSError *a4, const WTF::URL *a5, uint64_t a6)
{
  uint64_t v12 = API::Object::newObject(0x28uLL, 11);
  *(void *)uint64_t v12 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v12);
  *(void *)uint64_t v12 = &unk_1EE9B3E30;
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  *(unsigned char *)(v12 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t v13 = [[WKReloadFrameErrorRecoveryAttempter alloc] initWithWebView:a2 frameHandle:*(void *)(v12 + 8) urlString:a6];
  uint64_t v14 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithObjectsAndKeys:", v13, @"_WKRecoveryAttempterErrorKey", 0);
  uint64_t v15 = [(WTF::URL *)a5 userInfo];
  if (v15) {
    [v14 addEntriesFromDictionary:v15];
  }
  *(void *)this = objc_msgSend(objc_alloc(MEMORY[0x1E4F28C58]), "initWithDomain:code:userInfo:", -[WTF::URL domain](a5, "domain"), -[WTF::URL code](a5, "code"), v14);
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v16 = *(const void **)(v12 + 8);

  CFRelease(v16);
}

void sub_198CF99C8(_Unwind_Exception *a1)
{
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailProvisionalLoadWithErrorForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceError *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v13 = WeakRetained;
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14) {
    uint64_t v14 = *(void *)(v14 + 8);
  }
  uint64_t v15 = (WKWebView *)objc_loadWeakRetained((id *)(v14 + 16));
  uint64_t v16 = (const WTF::URL *)WebCore::ResourceError::nsError(a4);
  uint64_t v17 = WebCore::ResourceRequestBase::url(a3);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v15, *(const FrameInfoData **)(a5 + 248), *(NSError **)(a5 + 256), v16, v17);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if ((*(_DWORD *)(v19 + 32) & 0x100) == 0) {
      goto LABEL_22;
    }
LABEL_14:
    id v20 = objc_loadWeakRetained((id *)(v19 + 16));
    uint64_t v21 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v25 = a2;
    uint64_t v22 = API::Object::newObject(0x140uLL, 60);
    uint64_t v23 = API::FrameInfo::FrameInfo(v22, a5, &v25);
    id v24 = *(const void **)(v23 + 8);
    if (v24) {
      CFRetain(*(CFTypeRef *)(v23 + 8));
    }
    objc_msgSend(v13, "_webView:didFailProvisionalLoadWithRequest:inFrame:withError:", v20, v21, v24, cf, v25);
    if (v24) {
      CFRelease(v24);
    }
    CFRelease(*(CFTypeRef *)(v22 + 8));
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 + 8));
    }
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_22;
  }
  if ((MEMORY[0x20] & 0x100) != 0)
  {
    uint64_t v19 = 0;
    goto LABEL_14;
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }

  CFRelease(v13);
}

void sub_198CF9BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCommitNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  BOOL v9 = WeakRetained;
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if ((*(_DWORD *)(v11 + 32) & 0x4000) == 0) {
      goto LABEL_15;
    }
LABEL_10:
    id v12 = objc_loadWeakRetained((id *)(v11 + 16));
    if (a3) {
      uint64_t v13 = *((void *)a3 + 1);
    }
    else {
      uint64_t v13 = 0;
    }
    [v9 webView:v12 didCommitNavigation:v13];
    if (v12) {
      CFRelease(v12);
    }
    goto LABEL_15;
  }
  if ((MEMORY[0x20] & 0x4000) != 0)
  {
    uint64_t v11 = 0;
    goto LABEL_10;
  }
LABEL_15:

  CFRelease(v9);
}

void sub_198CF9D44(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v10 = WeakRetained;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((*(_DWORD *)(v12 + 32) & 0x8000) == 0) {
      goto LABEL_18;
    }
LABEL_10:
    id v13 = objc_loadWeakRetained((id *)(v12 + 16));
    uint64_t v14 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v18 = a2;
    uint64_t v15 = API::Object::newObject(0x140uLL, 60);
    uint64_t v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
    uint64_t v17 = *(const void **)(v16 + 8);
    if (v17) {
      CFRetain(*(CFTypeRef *)(v16 + 8));
    }
    [v10 _webView:v13 didCommitLoadWithRequest:v14 inFrame:v17];
    if (v17) {
      CFRelease(v17);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_18;
  }
  if ((MEMORY[0x20] & 0x8000) != 0)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
LABEL_18:

  CFRelease(v10);
}

void sub_198CF9ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishDocumentLoad(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x10000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          BOOL v9 = WeakRetained;
          uint64_t v10 = *((void *)this + 1);
          if (v10) {
            uint64_t v10 = *(void *)(v10 + 8);
          }
          id v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (a3) {
            uint64_t v12 = *((void *)a3 + 1);
          }
          else {
            uint64_t v12 = 0;
          }
          [v9 _webView:v11 navigationDidFinishDocumentLoad:v12];
          if (v11) {
            CFRelease(v11);
          }
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_198CF9FF4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  BOOL v9 = WeakRetained;
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if ((*(_DWORD *)(v11 + 32) & 0x20000) == 0) {
      goto LABEL_15;
    }
LABEL_10:
    id v12 = objc_loadWeakRetained((id *)(v11 + 16));
    if (a3) {
      uint64_t v13 = *((void *)a3 + 1);
    }
    else {
      uint64_t v13 = 0;
    }
    [v9 webView:v12 didFinishNavigation:v13];
    if (v12) {
      CFRelease(v12);
    }
    goto LABEL_15;
  }
  if ((MEMORY[0x20] & 0x20000) != 0)
  {
    uint64_t v11 = 0;
    goto LABEL_10;
  }
LABEL_15:

  CFRelease(v9);
}

void sub_198CFA0FC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v10 = WeakRetained;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((*(_DWORD *)(v12 + 32) & 0x40000) == 0) {
      goto LABEL_18;
    }
LABEL_10:
    id v13 = objc_loadWeakRetained((id *)(v12 + 16));
    uint64_t v14 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v18 = a2;
    uint64_t v15 = API::Object::newObject(0x140uLL, 60);
    uint64_t v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
    uint64_t v17 = *(const void **)(v16 + 8);
    if (v17) {
      CFRetain(*(CFTypeRef *)(v16 + 8));
    }
    [v10 _webView:v13 didFinishLoadWithRequest:v14 inFrame:v17];
    if (v17) {
      CFRelease(v17);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_18;
  }
  if ((MEMORY[0x20] & 0x40000) != 0)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
LABEL_18:

  CFRelease(v10);
}

void sub_198CFA288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didBlockLoadToKnownTracker(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::URL *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v7 = WeakRetained;
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if ((*(_DWORD *)(v9 + 32) & 0x800000) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    id v10 = objc_loadWeakRetained((id *)(v9 + 16));
    [v7 _webView:v10 didFailLoadDueToNetworkConnectionIntegrityWithURL:WTF::URL::operator NSURL *()];
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_12;
  }
  if ((MEMORY[0x20] & 0x800000) != 0)
  {
    uint64_t v9 = 0;
    goto LABEL_10;
  }
LABEL_12:

  CFRelease(v7);
}

void sub_198CFA3C8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didApplyLinkDecorationFiltering(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v8 = WeakRetained;
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if ((*(_DWORD *)(v10 + 32) & 0x1000000) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    id v11 = objc_loadWeakRetained((id *)(v10 + 16));
    uint64_t v12 = WTF::URL::operator NSURL *();
    [v8 _webView:v11 didChangeLookalikeCharactersFromURL:v12 toURL:WTF::URL::operator NSURL *()];
    if (v11) {
      CFRelease(v11);
    }
    goto LABEL_12;
  }
  if ((MEMORY[0x20] & 0x1000000) != 0)
  {
    uint64_t v10 = 0;
    goto LABEL_10;
  }
LABEL_12:

  CFRelease(v8);
}

void sub_198CFA4E0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didPromptForStorageAccess(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4, uint64_t a5)
{
  uint64_t v5 = *((void *)this + 1);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v12 = WeakRetained;
  uint64_t v13 = *((void *)this + 1);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if ((*(_DWORD *)(v14 + 32) & 0x2000000) == 0) {
      goto LABEL_16;
    }
LABEL_10:
    id v15 = objc_loadWeakRetained((id *)(v14 + 16));
    if (*(void *)a3) {
      uint64_t v16 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v16 = &stru_1EEA10550;
    }
    if (*(void *)a4) {
      uint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v17 = &stru_1EEA10550;
    }
    [v12 _webView:v15 didPromptForStorageAccess:v16 forSubFrameDomain:v17 forQuirk:a5];
    if (v15) {
      CFRelease(v15);
    }
    goto LABEL_16;
  }
  if ((MEMORY[0x20] & 0x2000000) != 0)
  {
    uint64_t v14 = 0;
    goto LABEL_10;
  }
LABEL_16:

  CFRelease(v12);
}

void sub_198CFA62C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailNavigationWithError(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const FrameInfoData *a3, Navigation *a4, const WTF::URL *a5, const WebCore::ResourceError *a6, API::Object *a7)
{
  uint64_t v7 = *((void *)this + 1);
  if (!v7) {
    return;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v8 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v16 = WeakRetained;
  uint64_t v17 = *((void *)this + 1);
  if (v17) {
    uint64_t v17 = *(void *)(v17 + 8);
  }
  uint64_t v18 = (WKWebView *)objc_loadWeakRetained((id *)(v17 + 16));
  uint64_t v19 = (const WTF::URL *)WebCore::ResourceError::nsError(a6);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v18, (const FrameInfoData *)a3->frameID.m_object.m_identifier, (NSError *)a3->frameID.m_processIdentifier.m_identifier, v19, (uint64_t)a5);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v20 = *((void *)this + 1);
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 8);
    int v22 = *(_DWORD *)(v21 + 32);
    if ((v22 & 0x100000) == 0)
    {
      if ((v22 & 0x80000) == 0) {
        goto LABEL_27;
      }
LABEL_16:
      id v23 = objc_loadWeakRetained((id *)(v21 + 16));
      if (a4) {
        uint64_t v24 = *((void *)a4 + 1);
      }
      else {
        uint64_t v24 = 0;
      }
      CFTypeRef v28 = cf;
      [v16 webView:v23 didFailNavigation:v24 withError:cf];
      if (v23) {
        CFRelease(v23);
      }
      goto LABEL_28;
    }
LABEL_19:
    id v25 = objc_loadWeakRetained((id *)(v21 + 16));
    if (a4) {
      uint64_t v26 = *((void *)a4 + 1);
    }
    else {
      uint64_t v26 = 0;
    }
    if (a7) {
      uint64_t v27 = *((void *)a7 + 1);
    }
    else {
      uint64_t v27 = 0;
    }
    [v16 _webView:v25 didFailNavigation:v26 withError:cf userInfo:v27];
    if (v25) {
      CFRelease(v25);
    }
    goto LABEL_27;
  }
  if ((MEMORY[0x20] & 0x100000) != 0)
  {
    uint64_t v21 = 0;
    goto LABEL_19;
  }
  if ((MEMORY[0x20] & 0x80000) != 0)
  {
    uint64_t v21 = 0;
    goto LABEL_16;
  }
LABEL_27:
  CFTypeRef v28 = cf;
LABEL_28:
  if (v28) {
    CFRelease(v28);
  }

  CFRelease(v16);
}

void sub_198CFA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  if (v12)
  {
    CFRelease(v12);
    id v11 = a10;
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailLoadWithErrorForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceError *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained) {
    return;
  }
  uint64_t v13 = WeakRetained;
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14) {
    uint64_t v14 = *(void *)(v14 + 8);
  }
  id v15 = (WKWebView *)objc_loadWeakRetained((id *)(v14 + 16));
  uint64_t v16 = (const WTF::URL *)WebCore::ResourceError::nsError(a4);
  uint64_t v17 = WebCore::ResourceRequestBase::url(a3);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v15, *(const FrameInfoData **)(a5 + 248), *(NSError **)(a5 + 256), v16, v17);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if ((*(_DWORD *)(v19 + 32) & 0x200000) == 0) {
      goto LABEL_22;
    }
LABEL_14:
    id v20 = objc_loadWeakRetained((id *)(v19 + 16));
    uint64_t v21 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v25 = a2;
    uint64_t v22 = API::Object::newObject(0x140uLL, 60);
    uint64_t v23 = API::FrameInfo::FrameInfo(v22, a5, &v25);
    uint64_t v24 = *(const void **)(v23 + 8);
    if (v24) {
      CFRetain(*(CFTypeRef *)(v23 + 8));
    }
    objc_msgSend(v13, "_webView:didFailLoadWithRequest:inFrame:withError:", v20, v21, v24, cf, v25);
    if (v24) {
      CFRelease(v24);
    }
    CFRelease(*(CFTypeRef *)(v22 + 8));
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 + 8));
    }
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_22;
  }
  if ((MEMORY[0x20] & 0x200000) != 0)
  {
    uint64_t v19 = 0;
    goto LABEL_14;
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }

  CFRelease(v13);
}

void sub_198CFAA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didSameDocumentNavigation(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x400000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          uint64_t v10 = WeakRetained;
          uint64_t v11 = *(void *)(a1 + 8);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          if (a3) {
            uint64_t v13 = *(void *)(a3 + 8);
          }
          else {
            uint64_t v13 = 0;
          }
          if ((a4 - 1) < 3) {
            uint64_t v14 = (a4 - 1) + 1;
          }
          else {
            uint64_t v14 = 0;
          }
          [v10 _webView:v12 navigation:v13 didSameDocumentNavigation:v14];
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFABB0(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::NavigationState::NavigationClient::shouldBypassContentModeSafeguards(WebKit::NavigationState::NavigationClient *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 36) << 32);
  if ((v3 & 2) != 0) {
    return 1;
  }
  else {
    return (v3 >> 2) & 1;
  }
}

void WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 8)) != 0
    && (*(_DWORD *)(v5 + 32) & 0x8000000) != 0
    && (uint64_t v7 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 24))) != 0)
  {
    uint64_t v8 = v7;
    WebKit::CompletionHandlerCallChecker::create(v7, (objc_object *)sel_webView_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v19);
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9) {
      uint64_t v9 = *(void *)(v9 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
    uint64_t v11 = *(const void **)(a3 + 8);
    CFRetain(v11);
    id v12 = v19;
    uint64_t v19 = 0;
    uint64_t v13 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v13 = MEMORY[0x1E4F14398];
    v13[1] = 50331650;
    v13[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    void v13[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::descriptor;
    v13[4] = a3;
    v13[5] = v12;
    [(WebKit::CompletionHandlerCallChecker *)v8 webView:WeakRetained didReceiveAuthenticationChallenge:v11 completionHandler:v13];
    _Block_release(v13);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v8);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v19);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v14);
    CFTypeRef v16 = cf;
    CFTypeRef cf = 0;
    if (v16) {
      CFRelease(v16);
    }
    uint64_t v17 = v20;
    id v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v19;
    uint64_t v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
}

void sub_198CFADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9)
{
  _Block_release(v11);
  if (v10) {
    CFRelease(v10);
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a9);
  }
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (*(_DWORD *)(v6 + 32) & 0x30000000) != 0
    && (uint64_t v9 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 24))) != 0)
  {
    uint64_t v10 = v9;
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8) + 32) & 0x20000000) != 0)
    {
      WebKit::CompletionHandlerCallChecker::create(v9, (objc_object *)sel_webView_authenticationChallenge_shouldAllowDeprecatedTLS_, &v21);
      uint64_t v17 = *(void *)(a1 + 8);
      if (v17) {
        uint64_t v17 = *(void *)(v17 + 8);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(v17 + 16));
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v19 = v21;
      uint64_t v20 = *a4;
      *a4 = 0;
      CFTypeRef v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      void *v16 = MEMORY[0x1E4F14398];
      v16[1] = 50331650;
      void v16[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
      void v16[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
      v16[4] = v19;
      v16[5] = v20;
      [(WebKit::CompletionHandlerCallChecker *)v10 webView:WeakRetained authenticationChallenge:v18 shouldAllowDeprecatedTLS:v16];
    }
    else
    {
      WebKit::CompletionHandlerCallChecker::create(v9, (objc_object *)sel__webView_authenticationChallenge_shouldAllowLegacyTLS_, &v21);
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11) {
        uint64_t v11 = *(void *)(v11 + 8);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(v11 + 16));
      uint64_t v13 = *(void *)(a3 + 8);
      uint64_t v14 = v21;
      uint64_t v15 = *a4;
      *a4 = 0;
      CFTypeRef v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      void *v16 = MEMORY[0x1E4F14398];
      v16[1] = 50331650;
      void v16[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
      void v16[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
      v16[4] = v14;
      v16[5] = v15;
      [(WebKit::CompletionHandlerCallChecker *)v10 _webView:WeakRetained authenticationChallenge:v13 shouldAllowLegacyTLS:v16];
    }
    _Block_release(v16);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v10);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
}

void sub_198CFB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v11;
  _Block_release(v13);
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didNegotiateModernTLS(WebKit::NavigationState::NavigationClient *this, const WTF::URL *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 32) & 0x40000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 1);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 16));
          [v6 _webView:v8 didNegotiateModernTLSForURL:WTF::URL::operator NSURL *()];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198CFB200(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::NavigationClient::processDidTerminate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4
    || ((*(unsigned int *)(v4 + 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 36) << 32)) & 0x380000000) == 0)
  {
    return 0;
  }
  uint64_t result = (uint64_t)objc_loadWeakRetained((id *)(v4 + 24));
  if (!result) {
    return result;
  }
  id v8 = (void *)result;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    unint64_t v11 = *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int8 *)(v10 + 36) << 32);
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v11 = MEMORY[0x20] | ((unint64_t)MEMORY[0x24] << 32);
    if ((v11 & 0x100000000) != 0)
    {
      uint64_t v10 = 0;
LABEL_16:
      id WeakRetained = objc_loadWeakRetained((id *)(v10 + 16));
      if (a3 > 0xC) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = qword_1994F6C80[(char)a3];
      }
      [v8 _webView:WeakRetained webContentProcessDidTerminateWithReason:v14];
      goto LABEL_20;
    }
    uint64_t v10 = 0;
  }
  id v12 = (id *)(v10 + 16);
  if ((v11 & 0x80000000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained(v12);
    [v8 webViewWebContentProcessDidTerminate:WeakRetained];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(v12);
    [v8 _webViewWebProcessDidCrash:WeakRetained];
  }
LABEL_20:
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFRelease(v8);
  return 1;
}

void sub_198CFB358(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::processDidBecomeResponsive(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 36) << 32)) & 0x400000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 1);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 16));
          [v6 _webViewWebProcessDidBecomeResponsive:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198CFB43C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::processDidBecomeUnresponsive(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 36) << 32)) & 0x800000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 1);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 16));
          [v6 _webViewWebProcessDidBecomeUnresponsive:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198CFB510(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebCore *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *((void *)a1 + 1);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    LOBYTE(v27) = 0;
    char v30 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
LABEL_10:
    if (v30)
    {
      uint64_t v20 = v27;
      if (v27)
      {
        uint64_t v27 = 0;
        int v28 = 0;
        WTF::fastFree(v20, v11);
      }
    }
    return;
  }
  if ((((unint64_t)*(unsigned __int8 *)(v5 + 36) << 32) & 0x3000000000) == 0)
  {
    WebCore::defaultWebCryptoMasterKey((uint64_t *)&v27, a1);
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
    goto LABEL_10;
  }
  id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 24));
  if (!WeakRetained)
  {
    LOBYTE(v27) = 0;
    char v30 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
    goto LABEL_10;
  }
  id v8 = WeakRetained;
  uint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint64_t v9 = *(void *)(v9 + 8);
    unint64_t v10 = *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int8 *)(v9 + 36) << 32);
    if ((v10 & 0x1000000000) == 0)
    {
      if ((v10 & 0x2000000000) != 0)
      {
        WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webCryptoMasterKeyForWebView_completionHandler_, (uint64_t *)&v27);
        uint64_t v21 = *((void *)a1 + 1);
        if (v21) {
          uint64_t v21 = *(void *)(v21 + 8);
        }
        id v22 = objc_loadWeakRetained((id *)(v21 + 16));
        uint64_t v23 = *a3;
        *a3 = 0;
        uint64_t v24 = v27;
        uint64_t v25 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        void *v25 = MEMORY[0x1E4F14398];
        v25[1] = 50331650;
        void v25[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke;
        v25[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::descriptor;
        v25[4] = v23;
        v25[5] = v24;
        [(WebKit::CompletionHandlerCallChecker *)v8 _webCryptoMasterKeyForWebView:v22 completionHandler:v25];
        _Block_release(v25);
        if (v22) {
          CFRelease(v22);
        }
        goto LABEL_26;
      }
      goto LABEL_24;
    }
  }
  id v12 = objc_loadWeakRetained((id *)(v9 + 16));
  uint64_t v13 = (void *)[(WebKit::CompletionHandlerCallChecker *)v8 _webCryptoMasterKeyForWebView:v12];
  if (v12) {
    CFRelease(v12);
  }
  if (!v13)
  {
LABEL_24:
    LOBYTE(v27) = 0;
    char v30 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
LABEL_25:
    if (v30)
    {
      uint64_t v26 = v27;
      if (v27)
      {
        uint64_t v27 = 0;
        int v28 = 0;
        WTF::fastFree(v26, v19);
      }
    }
LABEL_26:
    CFRelease(v8);
    return;
  }
  uint64_t v14 = [v13 bytes];
  unint64_t v15 = [v13 length];
  unint64_t v16 = v15;
  if (!v15)
  {
    uint64_t v17 = 0;
LABEL_20:
    uint64_t v27 = v17;
    int v28 = v16;
    int v29 = v16;
    char v30 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
    goto LABEL_25;
  }
  if (!HIDWORD(v15))
  {
    uint64_t v17 = (WTF *)WTF::fastMalloc((WTF *)v15);
    uint64_t v18 = 0;
    do
    {
      *((unsigned char *)v17 + v18) = *(unsigned char *)(v14 + v18);
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_20;
  }
  __break(0xC471u);
}

void sub_198CFB7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  unint64_t v16 = v14;
  _Block_release(v16);
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(v13);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::navigationActionDidBecomeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (((*(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int8 *)(v5 + 36) << 32)) & 0x4000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          unint64_t v10 = WeakRetained;
          uint64_t v11 = *(void *)(a1 + 8);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          [v10 webView:v12 navigationAction:*(void *)(a3 + 8) didBecomeDownload:*(void *)(a4 + 8)];
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFB9A4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::navigationResponseDidBecomeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (((*(unsigned int *)(v5 + 32) | (unint64_t)((uint64_t)*(char *)(v5 + 36) << 32)) & 0x8000000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          unint64_t v10 = WeakRetained;
          uint64_t v11 = *(void *)(a1 + 8);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          [v10 webView:v12 navigationResponse:*(void *)(a3 + 8) didBecomeDownload:*(void *)(a4 + 8)];
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFBA88(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::contextMenuDidCreateDownload(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WebKit::DownloadProxy *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 37))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          id v8 = WeakRetained;
          uint64_t v9 = *((void *)this + 1);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 16));
          [v8 _webView:v10 contextMenuDidCreateDownload:*((void *)a3 + 1)];
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_198CFBB5C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didStartLoadForQuickLookDocumentInMainFrame(WebKit::NavigationState::NavigationClient *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 38) & 0x80) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          uint64_t v9 = WeakRetained;
          uint64_t v10 = *((void *)this + 1);
          if (v10) {
            uint64_t v10 = *(void *)(v10 + 8);
          }
          id v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (*(void *)a2) {
            id v12 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            id v12 = &stru_1EEA10550;
          }
          if (*(void *)a3) {
            uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v13 = &stru_1EEA10550;
          }
          [v9 _webView:v11 didStartLoadForQuickLookDocumentInMainFrameWithFileName:v12 uti:v13];
          if (v11) {
            CFRelease(v11);
          }
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_198CFBC6C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishLoadForQuickLookDocumentInMainFrame(WebKit::NavigationState::NavigationClient *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 38) & 0x100) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          uint64_t v7 = WeakRetained;
          uint64_t v8 = *((void *)this + 1);
          if (v8) {
            uint64_t v8 = *(void *)(v8 + 8);
          }
          id v9 = objc_loadWeakRetained((id *)(v8 + 16));
          WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v13, a2);
          WebCore::SharedBuffer::createNSData((uint64_t *)&cf, v13);
          [v7 _webView:v9 didFinishLoadForQuickLookDocumentInMainFrame:cf];
          CFTypeRef v11 = cf;
          CFTypeRef cf = 0;
          if (v11) {
            CFRelease(v11);
          }
          id v12 = (unsigned int *)v13;
          uint64_t v13 = 0;
          if (v12)
          {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v10);
            if (!v9) {
              goto LABEL_12;
            }
          }
          else if (!v9)
          {
LABEL_12:
            CFRelease(v7);
            return;
          }
          CFRelease(v9);
          goto LABEL_12;
        }
      }
    }
  }
}

void sub_198CFBD6C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (*(_WORD *)(v8 + 38) & 0x1000) != 0
    && (CFTypeRef v11 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 24))) != 0)
  {
    id v12 = v11;
    WebKit::CompletionHandlerCallChecker::create(v11, (objc_object *)sel__webView_decidePolicyForSOAuthorizationLoadWithCurrentPolicy_forExtension_completionHandler_, &v19);
    uint64_t v13 = *(void *)(a1 + 8);
    if (v13) {
      uint64_t v13 = *(void *)(v13 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v13 + 16));
    if (*a4) {
      unint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v15 = &stru_1EEA10550;
    }
    uint64_t v16 = *a5;
    *a5 = 0;
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void *,_WKSOAuthorizationLoadPolicy)#1}::__invoke;
    uint64_t v18[3] = &WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::descriptor;
    void v18[4] = v16;
    v18[5] = v17;
    [(WebKit::CompletionHandlerCallChecker *)v12 _webView:WeakRetained decidePolicyForSOAuthorizationLoadWithCurrentPolicy:a3 forExtension:v15 completionHandler:v18];
    _Block_release(v18);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v12);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)>::operator()(a5);
  }
}

void sub_198CFBF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  _Block_release(v12);
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198CFC080(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::~HistoryClient(WebKit::NavigationState::HistoryClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::NavigationState::HistoryClient::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 48))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 40));
        if (WeakRetained)
        {
          uint64_t v8 = WeakRetained;
          uint64_t v9 = *(void *)(a1 + 8);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 16));
          uint64_t v11 = API::Object::newObject(0x1E8uLL, 78);
          uint64_t v12 = API::NavigationData::NavigationData(v11, a3);
          uint64_t v13 = *(const void **)(v12 + 8);
          if (v13) {
            CFRetain(*(CFTypeRef *)(v12 + 8));
          }
          [v8 _webView:v10 didNavigateWithNavigationData:v13];
          if (v13) {
            CFRelease(v13);
          }
          CFRelease(*(CFTypeRef *)(v11 + 8));
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_198CFC244(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didPerformClientRedirect(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 48) & 2) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          id v10 = WeakRetained;
          uint64_t v11 = *((void *)this + 1);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1CB10], "_web_URLWithWTFString:", a3);
          objc_msgSend(v10, "_webView:didPerformClientRedirectFromURL:toURL:", v12, v13, objc_msgSend(MEMORY[0x1E4F1CB10], "_web_URLWithWTFString:", a4));
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFC374(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didPerformServerRedirect(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 48) & 4) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          id v10 = WeakRetained;
          uint64_t v11 = *((void *)this + 1);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1CB10], "_web_URLWithWTFString:", a3);
          objc_msgSend(v10, "_webView:didPerformServerRedirectFromURL:toURL:", v12, v13, objc_msgSend(MEMORY[0x1E4F1CB10], "_web_URLWithWTFString:", a4));
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFC47C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didUpdateHistoryTitle(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 48) & 8) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          id v10 = WeakRetained;
          uint64_t v11 = *((void *)this + 1);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 16));
          if (*(void *)a3) {
            uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v13 = &stru_1EEA10550;
          }
          objc_msgSend(v10, "_webView:didUpdateHistoryTitle:forURL:", v12, v13, objc_msgSend(MEMORY[0x1E4F1CB10], "_web_URLWithWTFString:", a4));
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198CFC584(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::willChangeIsLoading(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"loading"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFC604(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NavigationState::releaseNetworkActivity(uint64_t result, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::ProcessThrottlerActivity **)(result + 56);
  if (*(void *)(result + 56))
  {
    uint64_t v3 = result;
    if (a2 == 1)
    {
      uint64_t v4 = qword_1EB358348;
      if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
LABEL_9:
        std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
        return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 64));
      }
      int v6 = 134217984;
      uint64_t v7 = v3;
      uint64_t v5 = "%p NavigationState is releasing background process assertion because the screen was locked";
    }
    else
    {
      if (a2) {
        goto LABEL_9;
      }
      uint64_t v4 = qword_1EB358348;
      if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_9;
      }
      int v6 = 134217984;
      uint64_t v7 = v3;
      uint64_t v5 = "%p NavigationState is releasing background process assertion because a page load completed";
    }
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v6, 0xCu);
    goto LABEL_9;
  }
  return result;
}

void WebKit::NavigationState::didChangeIsLoading(id *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v3 = WeakRetained;
  if (!WeakRetained
    || (uint64_t v4 = *(void *)(WeakRetained[52] + 32), !*(void *)(v4 + 1016)) && *(unsigned __int8 *)(v4 + 1000) > 1u)
  {
    if (this[7])
    {
      id v10 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        id v12 = this;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - NavigationState will release its process network assertion soon because the page load completed", (uint8_t *)&v11, 0xCu);
      }
      WTF::RunLoop::TimerBase::start();
    }
LABEL_17:
    [v3 didChangeValueForKey:@"loading"];
    if (!v3) {
      return;
    }
    goto LABEL_18;
  }
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "isSuspendedUnderLock") & 1) == 0)
  {
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 8)))
    {
      uint64_t v5 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        id v12 = this;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - NavigationState keeps its process network assertion because a new page load started", (uint8_t *)&v11, 0xCu);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 8));
    }
    int v6 = (WebKit::ProcessThrottlerActivity **)(this + 7);
    if (!this[7])
    {
      uint64_t v7 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        id v12 = this;
        _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - NavigationState is taking a process network assertion because a page load started", (uint8_t *)&v11, 0xCu);
      }
      uint64_t v8 = *(void *)(v3[52] + 256);
      uint64_t v9 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v9, v8 + 200, "Page Load", 10, 0, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v6, v9);
    }
    goto LABEL_17;
  }
LABEL_18:
  CFRelease(v3);
}

void sub_198CFC954(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::willChangeTitle(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"title"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFC9D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeTitle(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"title"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCA40(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeActiveURL(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"URL"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCAB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeActiveURL(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"URL"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCB20(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeHasOnlySecureContent(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"hasOnlySecureContent"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCB90(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeHasOnlySecureContent(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"hasOnlySecureContent"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCC00(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeNegotiatedLegacyTLS(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"_negotiatedLegacyTLS"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCC70(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeNegotiatedLegacyTLS(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"_negotiatedLegacyTLS"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCCE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeWasPrivateRelayed(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"_wasPrivateRelayed"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCD50(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeWasPrivateRelayed(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"_wasPrivateRelayed"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCDC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeEstimatedProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"estimatedProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCE30(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeEstimatedProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"estimatedProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCEA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCanGoBack(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"canGoBack"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCF10(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCanGoBack(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"canGoBack"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCF80(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCanGoForward(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"canGoForward"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFCFF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCanGoForward(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"canGoForward"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD060(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeNetworkRequestsInProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"_networkRequestsInProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD0D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeNetworkRequestsInProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"_networkRequestsInProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD140(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCertificateInfo(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"serverTrust"];
  [WeakRetained willChangeValueForKey:@"certificateChain"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD1C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCertificateInfo(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"certificateChain"];
  [WeakRetained didChangeValueForKey:@"serverTrust"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD240(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"_webProcessIsResponsive"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD2B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"_webProcessIsResponsive"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198CFD320(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didSwapWebProcesses(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v3 = WeakRetained;
  id v5 = this[7];
  uint64_t v4 = (WebKit::ProcessThrottlerActivity **)(this + 7);
  if (v5)
  {
    if (!WeakRetained) {
      return;
    }
    uint64_t v6 = *(void *)(*((void *)WeakRetained + 52) + 256);
    uint64_t v7 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v7, v6 + 200, "Page Load", 10, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v4, v7);
  }
  else if (!WeakRetained)
  {
    return;
  }

  CFRelease(v3);
}

void sub_198CFD3E8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didGeneratePageLoadTiming(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 38) & 0x2000) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      id v5 = WeakRetained;
      id v6 = [[_WKPageLoadTiming alloc] _initWithTiming:a2];
      id v7 = objc_loadWeakRetained((id *)(a1 + 16));
      [v5 _webView:v7 didGeneratePageLoadTiming:v6];
      if (v7) {
        CFRelease(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      CFRelease(v5);
    }
  }
}

void sub_198CFD4B0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (v4) {
    CFRelease(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImplCocoa::~PageClientImplCocoa(WebKit::PageClientImplCocoa *this)
{
  *(void *)this = &unk_1EE9CE8F8;
  uint64_t v4 = (WTF *)*((void *)this + 3);
  uint64_t v2 = (void *)((char *)this + 24);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100]((int)v2, v3);
  }
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

uint64_t WebKit::PageClientImplCocoa::topContentInsetDidChange(id *this)
{
  uint64_t v1 = this + 2;
  Weauint64_t k = objc_loadWeak(this + 2);
  [objc_loadWeak(v1) minimumViewportInset];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  [objc_loadWeak(v1) maximumViewportInset];

  return objc_msgSend(Weak, "_recalculateViewportSizesWithMinimumViewportInset:maximumViewportInset:throwOnInvalidInput:", 0, v4, v6, v8, v10, v11, v12, v13, v14);
}

uint64_t WebKit::PageClientImplCocoa::themeColorWillChange(id *this)
{
  uint64_t v1 = this + 2;
  [objc_loadWeak(this + 2) willChangeValueForKey:@"themeColor"];
  Weauint64_t k = objc_loadWeak(v1);

  return [Weak willChangeValueForKey:@"_themeColor"];
}

uint64_t WebKit::PageClientImplCocoa::themeColorDidChange(id *this)
{
  uint64_t v1 = this + 2;
  [objc_loadWeak(this + 2) didChangeValueForKey:@"themeColor"];
  Weauint64_t k = objc_loadWeak(v1);

  return [Weak didChangeValueForKey:@"_themeColor"];
}

uint64_t WebKit::PageClientImplCocoa::underPageBackgroundColorWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"underPageBackgroundColor"];
}

uint64_t WebKit::PageClientImplCocoa::underPageBackgroundColorDidChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"underPageBackgroundColor"];
}

uint64_t WebKit::PageClientImplCocoa::sampledPageTopColorWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"_sampledPageTopColor"];
}

uint64_t WebKit::PageClientImplCocoa::sampledPageTopColorDidChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"_sampledPageTopColor"];
}

uint64_t WebKit::PageClientImplCocoa::isPlayingAudioWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);
  uint64_t v2 = NSStringFromSelector(sel__isPlayingAudio);

  return [Weak willChangeValueForKey:v2];
}

uint64_t WebKit::PageClientImplCocoa::isPlayingAudioDidChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);
  uint64_t v2 = NSStringFromSelector(sel__isPlayingAudio);

  return [Weak didChangeValueForKey:v2];
}

uint64_t WebKit::PageClientImplCocoa::scrollingUpdatesDisabledForTesting(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak _scrollingUpdatesDisabledForTesting];
}

uint64_t WebKit::PageClientImplCocoa::didInsertAttachment(id *this, API::Attachment *a2, const WTF::String *a3)
{
  Weauint64_t k = objc_loadWeak(this + 2);
  if (*(void *)a3) {
    double v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    double v6 = &stru_1EEA10550;
  }

  return [Weak _didInsertAttachment:a2 withSource:v6];
}

uint64_t WebKit::PageClientImplCocoa::didRemoveAttachment(id *this, API::Attachment *a2)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak _didRemoveAttachment:a2];
}

uint64_t WebKit::PageClientImplCocoa::didInvalidateDataForAttachment(id *this, API::Attachment *a2)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak _didInvalidateDataForAttachment:a2];
}

id WebKit::PageClientImplCocoa::allocFileWrapperInstance(id *this)
{
  uint64_t v1 = (objc_class *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "configuration"), "_attachmentFileWrapperClass");
  if (!v1) {
    uint64_t v1 = (objc_class *)objc_opt_class();
  }

  return [v1 alloc];
}

uint64_t WebKit::PageClientImplCocoa::serializableFileWrapperClasses(id *this)
{
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "configuration"), "_attachmentFileWrapperClass");
  if (v3) {
    BOOL v4 = v3 == v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", v2, 0, v6);
  }
  else {
    return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", v3, v2, 0);
  }
}

uint64_t WebKit::PageClientImplCocoa::storeAppHighlight(uint64_t a1, uint64_t a2)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 16));

  return [Weak _storeAppHighlight:a2];
}

uint64_t WebKit::PageClientImplCocoa::pageClosed(WebKit::PageClientImplCocoa *this)
{
  return MEMORY[0x1F4171828](*((void *)this + 3));
}

uint64_t WebKit::PageClientImplCocoa::gpuProcessDidExit(id *this)
{
  uint64_t v1 = this + 2;
  [objc_loadWeak(this + 2) willChangeValueForKey:@"_gpuProcessIdentifier"];
  Weauint64_t k = objc_loadWeak(v1);

  return [Weak didChangeValueForKey:@"_gpuProcessIdentifier"];
}

uint64_t WebKit::PageClientImplCocoa::addDictationAlternatives(uint64_t a1)
{
  return MEMORY[0x1F4171808](*(void *)(a1 + 24));
}

uint64_t WebKit::PageClientImplCocoa::replaceDictationAlternatives(uint64_t a1)
{
  return MEMORY[0x1F4171818](*(void *)(a1 + 24));
}

void WebKit::PageClientImplCocoa::removeDictationAlternatives()
{
}

unsigned int *WebKit::PageClientImplCocoa::dictationAlternatives@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)[(id)WebCore::AlternativeTextUIController::alternativesForContext() alternativeStrings];

  return WTF::makeVector<WTF::String>(v2, a1);
}

uint64_t WebKit::PageClientImplCocoa::platformDictationAlternatives()
{
  return WebCore::AlternativeTextUIController::alternativesForContext();
}

uint64_t WebKit::PageClientImplCocoa::microphoneCaptureWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"microphoneCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::cameraCaptureWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"cameraCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"_displayCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureSurfacesWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"_displayCaptureSurfaces"];
}

uint64_t WebKit::PageClientImplCocoa::systemAudioCaptureWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"_systemAudioCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::microphoneCaptureChanged(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"microphoneCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::cameraCaptureChanged(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"cameraCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureChanged(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"_displayCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureSurfacesChanged(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"_displayCaptureSurfaces"];
}

uint64_t WebKit::PageClientImplCocoa::systemAudioCaptureChanged(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"_systemAudioCaptureState"];
}

uint64_t WebKit::PageClientImplCocoa::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
  uint64_t v5 = WTF::UUID::operator NSUUID *();
  WebCore::IntRect::operator CGRect();
  return objc_msgSend(Weak, "_proofreadingSessionShowDetailsForSuggestionWithUUID:relativeToRect:", v5, a3, a4);
}

uint64_t WebKit::PageClientImplCocoa::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 16));
  uint64_t v4 = WTF::UUID::operator NSUUID *();

  return [Weak _proofreadingSessionUpdateState:a2 forSuggestionWithUUID:v4];
}

uint64_t WebKit::PageClientImplCocoa::writingToolsActiveWillChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"writingToolsActive"];
}

uint64_t WebKit::PageClientImplCocoa::writingToolsActiveDidChange(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"writingToolsActive"];
}

uint64_t WebKit::PageClientImplCocoa::didEndPartialIntelligenceTextAnimation(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak _didEndPartialIntelligenceTextAnimation];
}

uint64_t WebKit::PageClientImplCocoa::writingToolsTextReplacementsFinished(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak _writingToolsTextReplacementsFinished];
}

uint64_t WebKit::PageClientImplCocoa::addTextAnimationForAnimationID(id *this, const WTF::UUID *a2, const TextAnimationData *a3)
{
  Weauint64_t k = objc_loadWeak(this + 2);
  uint64_t v5 = WTF::UUID::operator NSUUID *();

  return [Weak _addTextAnimationForAnimationID:v5 withData:a3];
}

uint64_t WebKit::PageClientImplCocoa::removeTextAnimationForAnimationID(id *this, const WTF::UUID *a2)
{
  Weauint64_t k = objc_loadWeak(this + 2);
  uint64_t v3 = WTF::UUID::operator NSUUID *();

  return [Weak _removeTextAnimationForAnimationID:v3];
}

uint64_t WebKit::PageClientImplCocoa::setGamepadsRecentlyAccessed(uint64_t a1, uint64_t a2)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 16));

  return [Weak _setGamepadsRecentlyAccessed:a2];
}

uint64_t WebKit::PageClientImplCocoa::videoControlsManagerDidChange(id *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained(this + 2);
    int v6 = 134218240;
    id v7 = WeakRetained;
    __int16 v8 = 1024;
    int v9 = [objc_loadWeak(this + 2) _canEnterFullscreen];
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p PageClientImplCocoa::videoControlsManagerDidChange %d", (uint8_t *)&v6, 0x12u);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  uint64_t v4 = this + 2;
  [objc_loadWeak(v4) willChangeValueForKey:@"_canEnterFullscreen"];
  return [objc_loadWeak(v4) didChangeValueForKey:@"_canEnterFullscreen"];
}

void sub_198CFE02C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImplCocoa::platformWindow(id *this)
{
  Weauint64_t k = objc_loadWeak(this + 2);

  return [Weak window];
}

void WebKit::convertToPlatformContext(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc(MEMORY[0x1E4FB74F8]);
  WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 2));
  *a2 = objc_msgSend(v4, "initWithAttributedText:range:", cf, a1[7], a1[8]);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198CFE0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::convertToWebContext(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = (WTF::UUID *)[a1 uuid];
  WTF::UUID::fromNSUUID((uint64_t *)&v12, v4, v5);
  if (v13)
  {
    long long v9 = v12;
    int v6 = (const void *)[a1 attributedText];
    CFTypeRef cf = v6;
    if (v6) {
      CFRetain(v6);
    }
    WebCore::AttributedString::fromNSAttributedString();
    *(void *)&long long v11 = [a1 range];
    *((void *)&v11 + objc_destroyWeak(this + 1) = v7;
    *(_OWORD *)a2 = v9;
    WebCore::AttributedString::AttributedString();
    *(_OWORD *)(a2 + 56) = v11;
    *(unsigned char *)(a2 + 80) = 1;
    MEMORY[0x199732DE0](&v10);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
  }
}

void sub_198CFE204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  MEMORY[0x199732DE0](v10);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

uint64_t *WebKit::convertToWebSession@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = (WTF::UUID *)[a1 uuid];
  uint64_t result = WTF::UUID::fromNSUUID(v13, v4, v5);
  char v7 = v14;
  if (v14)
  {
    uint64_t v9 = v13[0];
    uint64_t v8 = v13[1];
    BOOL v10 = [a1 type] != 1;
    uint64_t result = (uint64_t *)[a1 compositionSessionType];
    if (result == (uint64_t *)10) {
      char v11 = 1;
    }
    else {
      char v11 = 3;
    }
    if (result == (uint64_t *)11) {
      char v12 = 2;
    }
    else {
      char v12 = v11;
    }
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v8;
    if (!result) {
      char v12 = 0;
    }
    *(unsigned char *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 17) = v12;
    char v7 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 3objc_destroyWeak(this + 2) = v7;
  return result;
}

uint64_t *WebKit::convertToWebTextSuggestion@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = (WTF::UUID *)[a1 uuid];
  uint64_t result = WTF::UUID::fromNSUUID((uint64_t *)&v12, v4, v5);
  if (v13)
  {
    long long v9 = v12;
    *(void *)&long long v10 = [a1 originalRange];
    *((void *)&v10 + objc_destroyWeak(this + 1) = v7;
    MEMORY[0x19972EAD0](&v11, [a1 replacement]);
    uint64_t result = (uint64_t *)[a1 state];
    unint64_t v8 = 0x302030100uLL >> (8 * result);
    if ((unint64_t)result >= 5) {
      LOBYTE(v8) = 3;
    }
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    *(void *)(a2 + 3objc_destroyWeak(this + 2) = v11;
    *(unsigned char *)(a2 + 40) = v8;
    *(unsigned char *)(a2 + 48) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
  return result;
}

void sub_198CFE40C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionModelContext::~PlaybackSessionModelContext(WebKit::PlaybackSessionModelContext *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v4);
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    WTF::RefCounted<WebCore::TimeRanges>::deref(v6, v5);
  }
  uint64_t v7 = (unsigned int **)*((void *)this + 5);
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v5);
  }
  unint64_t v8 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v5);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlaybackSessionModelContext::~PlaybackSessionModelContext(this, a2);
  if (*(_DWORD *)(v2 + 20))
  {
    *(void *)(v2 + 256) = 0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 19objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 11objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

unsigned int *WebKit::PlaybackSessionModelContext::addClient(WebKit::PlaybackSessionModelContext *this, WebCore::PlaybackSessionModelClient *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 40);
  unsigned int v4 = *((_DWORD *)this + 13);
  unsigned int v5 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 1objc_destroyWeak(this + 2) = v5;
  if (v5 > v4)
  {
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v3;
        if (*v3) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 1objc_destroyWeak(this + 2) = v14 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = *((void *)this + 5);
          *((_DWORD *)this + 1objc_destroyWeak(this + 2) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)this + 1objc_destroyWeak(this + 2) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)this + 13) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *((_DWORD *)this + 1objc_destroyWeak(this + 2) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v19 = *((void *)a2 + 1);
  if (!v19)
  {
    uint64_t v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = a2;
    uint64_t v21 = (unsigned int *)*((void *)a2 + 1);
    *((void *)a2 + objc_destroyWeak(this + 1) = v19;
    if (v21)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v20);
      }
      uint64_t v19 = *((void *)a2 + 1);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v19, 1u);
  atomic_fetch_add((atomic_uint *volatile)v19, 1u);
  uint64_t v25 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v25, (uint64_t)&v24);
  uint64_t result = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
  }
  if (v19)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v22);
    }
  }
  return result;
}

void sub_198CFE77C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12 && atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a12);
    WTF::fastFree(a12, a2);
  }
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::PlaybackSessionModelContext::removeClient(uint64_t *this, WebCore::PlaybackSessionModelClient *a2)
{
  uint64_t v3 = this + 5;
  unsigned int v4 = *((_DWORD *)this + 13);
  unsigned int v5 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 1objc_destroyWeak(this + 2) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = this;
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        this = *(uint64_t **)(v7 + 8 * v10);
        if ((unint64_t)this + 1 >= 2 && !this[1])
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v12 = *v3;
        if (*v3) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 1objc_destroyWeak(this + 2) = v13 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = v6[5];
          *((_DWORD *)v6 + 1objc_destroyWeak(this + 2) = 0;
          if (!v7)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)v6 + 1objc_destroyWeak(this + 2) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v7 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)v6 + 13) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *((_DWORD *)v6 + 1objc_destroyWeak(this + 2) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = *((void *)a2 + 1);
  if (v18 && *(void *)(v18 + 8))
  {
    uint64_t v20 = *((void *)a2 + 1);
    this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      uint64_t v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == this) {
        return this;
      }
    }
    else
    {
      if (!this) {
        return this;
      }
      uint64_t v19 = 0;
    }
    if ((uint64_t *)v19 != this) {
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)this);
    }
  }
  return this;
}

void WebKit::PlaybackSessionModelContext::sendRemoteCommand(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 32);
      uint64_t v17 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          uint64_t v9 = *(void *)(v6 + 240);
          uint64_t v10 = *(void *)(*(void *)(v6 + 16) + 1928);
          uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v11 = 656;
          *((void *)v11 + objc_destroyWeak(this + 1) = v10;
          *((void *)v11 + 66) = (char *)v11 + 16;
          *((void *)v11 + 67) = 512;
          *((void *)v11 + 68) = 0;
          *((void *)v11 + 70) = 0;
          *((void *)v11 + 69) = 0;
          IPC::Encoder::encodeHeader(v11);
          uint64_t v20 = v11;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v17);
          IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::encode<IPC::Encoder>(v11, a2);
          IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v11, a3);
          IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(v11, (char *)(a3 + 16));
          LOBYTE(v18) = 0;
          char v19 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v20, 0, (uint64_t)&v18, 1);
          if (v19)
          {
            uint64_t v13 = v18;
            uint64_t v18 = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
          }
          unsigned int v14 = v20;
          uint64_t v20 = 0;
          if (v14)
          {
            IPC::Encoder::~Encoder(v14, v12);
            WTF::fastFree(v15, v16);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
        }
      }
    }
  }
}

void sub_198CFEB00(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::addNowPlayingMetadataObserver(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(v5 - 8));
          WebKit::WebPageProxy::addNowPlayingMetadataObserver(v5 - 16, a2);
          uint64_t v7 = *(const void **)(v5 - 8);
          CFRelease(v7);
        }
      }
    }
  }
}

void WebKit::PlaybackSessionModelContext::removeNowPlayingMetadataObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(v5 - 8));
          WebKit::WebPageProxy::removeNowPlayingMetadataObserver(v5 - 16, a2);
          uint64_t v7 = *(const void **)(v5 - 8);
          CFRelease(v7);
        }
      }
    }
  }
}

void WebKit::PlaybackSessionModelContext::setSoundStageSize(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 248) != a2)
  {
    char v2 = a2;
    *(unsigned char *)(a1 + 248) = a2;
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 32);
        uint64_t v15 = *(void *)(a1 + 32);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6)
          {
            CFRetain(*(CFTypeRef *)(v6 - 8));
            uint64_t v7 = *(void *)(v6 + 240);
            uint64_t v8 = *(void *)(*(void *)(v6 + 16) + 1928);
            uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v9 = 661;
            *((void *)v9 + objc_destroyWeak(this + 1) = v8;
            *((void *)v9 + 66) = (char *)v9 + 16;
            *((void *)v9 + 67) = 512;
            *((void *)v9 + 68) = 0;
            *((void *)v9 + 70) = 0;
            *((void *)v9 + 69) = 0;
            IPC::Encoder::encodeHeader(v9);
            uint64_t v18 = v9;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v15);
            IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v9, v2);
            LOBYTE(v16) = 0;
            char v17 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v18, 0, (uint64_t)&v16, 1);
            if (v17)
            {
              uint64_t v11 = v16;
              uint64_t v16 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
            }
            uint64_t v12 = v18;
            uint64_t v18 = 0;
            if (v12)
            {
              IPC::Encoder::~Encoder(v12, v10);
              WTF::fastFree(v13, v14);
            }
            CFRelease(*(CFTypeRef *)(v6 - 8));
          }
        }
      }
    }
  }
}

void sub_198CFEDD4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::play(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "play";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 652;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198CFEFCC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionModelContext::loggerPtr(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 + 72);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::PlaybackSessionModelContext::logIdentifier(WebKit::PlaybackSessionModelContext *this)
{
  return *((void *)this + 32);
}

void WebKit::PlaybackSessionModelContext::pause(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "pause";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 651;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198CFF1E8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::togglePlayState(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "togglePlayState";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 665;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198CFF3DC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 72);
      if (!v4) {
        goto LABEL_18;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "beginScrubbing";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v6 + 8)) != 0)
      {
LABEL_18:
        uint64_t v7 = *(void *)(v3 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 642;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
  *((unsigned char *)this + 97) = 1;
}

void sub_198CFF5E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::endScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 72);
      if (!v4) {
        goto LABEL_18;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "endScrubbing";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v6 + 8)) != 0)
      {
LABEL_18:
        uint64_t v7 = *(void *)(v3 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 644;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
  *((unsigned char *)this + 97) = 0;
  *((unsigned char *)this + 64) = *((unsigned char *)this + 96) & 1;
}

void sub_198CFF7EC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionModelContext::isPlaying(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned char *)this + 96) & 1;
}

void WebKit::PlaybackSessionModelContext::seekToTime(WebKit::PlaybackSessionModelContext *this, double a2, double a3, double a4)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v10 = *(void *)(v5 + 72);
      if (!v10) {
        goto LABEL_59;
      }
      uint64_t v11 = (IPC::Encoder *)*((void *)this + 32);
      v53[0] = (IPC::Encoder *)"PlaybackSessionModelContext";
      v53[1] = (IPC::Encoder *)28;
      v53[2] = (IPC::Encoder *)"seekToTime";
      v53[3] = v11;
      if (!*(unsigned char *)(v10 + 12)) {
        goto LABEL_59;
      }
      uint64_t v12 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v60, (WTF::Logger::LogSiteIdentifier *)v53);
      WTF::String::number((uint64_t *)&v59, v12, a2);
      uint64_t v13 = (WTF::String *)WTF::String::String((WTF::String *)&v58, ", toleranceBefore: ");
      WTF::String::number((uint64_t *)&v57, v13, a3);
      uint64_t v14 = (WTF::String *)WTF::String::String((WTF::String *)&v56, ", toleranceAfter: ");
      WTF::String::number((uint64_t *)&v55, v14, a4);
      v54[0] = v59;
      char v65 = v58;
      *(void *)buf = v60;
      long long v63 = v56;
      uint64_t v64 = v57;
      long long v62 = v55;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v54, (uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, &v61);
      if (!v61)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v16 = v55;
      uint64_t v55 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      char v17 = v56;
      int v56 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v18 = v57;
      uint64_t v57 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v15);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v19 = v58;
      uint64_t v58 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v15);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v59;
      char v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = v60;
      char v60 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v15);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      id v22 = qword_1EB358078;
      uint64_t v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
      if (v23)
      {
        WTF::String::utf8();
        uint64_t v25 = v54[0] ? (char *)v54[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v23 = v54[0];
        v54[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1) {
            uint64_t v23 = (WTF *)WTF::fastFree(v23, v24);
          }
          else {
            --*(_DWORD *)v23;
          }
        }
      }
      if (WebKit2LogMedia)
      {
        uint64_t v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v27 = *v26;
          if (v27) {
            break;
          }
          int v28 = *v26;
          atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
          if (v28 == v27)
          {
            uint64_t v29 = WTF::Logger::observers(v23);
            uint64_t v30 = *(unsigned int *)(v29 + 12);
            if (v30)
            {
              int v31 = *(uint64_t **)v29;
              uint64_t v52 = *(void *)v29 + 8 * v30;
              do
              {
                uint64_t v32 = *v31;
                *(_DWORD *)buf = 0;
                uint64_t v33 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v53);
                int v67 = 0;
                WTF::String::number(&v68, v33, a2);
                int v69 = 0;
                char v34 = (WTF::String *)WTF::String::String((WTF::String *)v70, ", toleranceBefore: ");
                v70[2] = 0;
                WTF::String::number(&v71, v34, a3);
                int v72 = 0;
                uint64_t v35 = (WTF::String *)WTF::String::String((WTF::String *)v73, ", toleranceAfter: ");
                v73[2] = 0;
                WTF::String::number(v74, v35, a4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v54, (uint64_t)buf, 6uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v32 + 16))(v32, &WebKit2LogMedia, 0, v54);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v36);
                for (uint64_t i = 88; i != -8; i -= 16)
                {
                  uint64_t v38 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2) {
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v24);
                    }
                    else {
                      *(_DWORD *)v38 -= 2;
                    }
                  }
                }
                ++v31;
              }
              while (v31 != (uint64_t *)v52);
            }
            int v39 = 1;
            atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
            if (v39 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v40 = v61;
      char v61 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v24);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      uint64_t v41 = *((void *)this + 3);
      if (v41)
      {
        uint64_t v5 = *(void *)(v41 + 8);
        if (v5)
        {
LABEL_59:
          uint64_t v42 = *(void *)(v5 + 32);
          v54[0] = *((WTF **)this + 4);
          if (v42)
          {
            uint64_t v43 = *(void *)(v42 + 8);
            if (v43)
            {
              CFRetain(*(CFTypeRef *)(v43 - 8));
              uint64_t v44 = *(void *)(v43 + 240);
              uint64_t v45 = *(void *)(*(void *)(v43 + 16) + 1928);
              long long v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)long long v46 = 653;
              *((void *)v46 + objc_destroyWeak(this + 1) = v45;
              *((void *)v46 + 66) = (char *)v46 + 16;
              *((void *)v46 + 67) = 512;
              *((void *)v46 + 68) = 0;
              *((void *)v46 + 70) = 0;
              *((void *)v46 + 69) = 0;
              IPC::Encoder::encodeHeader(v46);
              v53[0] = v46;
              IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v46, (uint64_t *)v54);
              IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v46, a2);
              IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v46, a3);
              IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v46, a4);
              buf[0] = 0;
              LOBYTE(v67) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v44, v53, 0, (uint64_t)buf, 1);
              if ((_BYTE)v67)
              {
                uint64_t v48 = *(void *)buf;
                *(void *)buf = 0;
                if (v48) {
                  (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
                }
              }
              long long v49 = v53[0];
              v53[0] = 0;
              if (v49)
              {
                IPC::Encoder::~Encoder(v49, v47);
                WTF::fastFree(v50, v51);
              }
              CFRelease(*(CFTypeRef *)(v43 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_198CFFE38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v35 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionModelContext::fastSeek(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v22 = a2;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 72);
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *((void *)this + 32);
      v19[0] = "PlaybackSessionModelContext";
      v19[1] = 28;
      uint64_t v20 = "fastSeek";
      uint64_t v21 = v6;
      if (!*(unsigned char *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19, &v22), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v7 + 8)) != 0)
      {
LABEL_17:
        double v8 = v22;
        uint64_t v9 = *(void *)(v3 + 32);
        uint64_t v23 = *((void *)this + 4);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            uint64_t v11 = *(void *)(v10 + 240);
            uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
            uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v13 = 649;
            *((void *)v13 + objc_destroyWeak(this + 1) = v12;
            *((void *)v13 + 66) = (char *)v13 + 16;
            *((void *)v13 + 67) = 512;
            *((void *)v13 + 68) = 0;
            *((void *)v13 + 70) = 0;
            *((void *)v13 + 69) = 0;
            IPC::Encoder::encodeHeader(v13);
            uint64_t v24 = v13;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v23);
            IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v13, v8);
            LOBYTE(v19[0]) = 0;
            LOBYTE(v20) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v24, 0, (uint64_t)v19, 1);
            if ((_BYTE)v20)
            {
              uint64_t v15 = v19[0];
              v19[0] = 0;
              if (v15) {
                (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
              }
            }
            uint64_t v16 = v24;
            uint64_t v24 = 0;
            if (v16)
            {
              IPC::Encoder::~Encoder(v16, v14);
              WTF::fastFree(v17, v18);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_198D00264(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScanningForward(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "beginScanningForward";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 641;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D0045C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScanningBackward(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "beginScanningBackward";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 640;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D00650(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::endScanning(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "endScanning";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 643;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D00844(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setDefaultPlaybackRate(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v23 = a2;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 72);
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *((void *)this + 32);
      v20[0] = "PlaybackSessionModelContext";
      v20[1] = 28;
      uint64_t v21 = "setDefaultPlaybackRate";
      uint64_t v22 = v6;
      if (!*(unsigned char *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v20, &v23), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v7 + 8)) != 0)
      {
LABEL_17:
        double v8 = v23;
        uint64_t v9 = *(void *)(v3 + 32);
        uint64_t v24 = *((void *)this + 4);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            uint64_t v11 = *(void *)(v10 + 240);
            uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
            uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v13 = 657;
            *((void *)v13 + objc_destroyWeak(this + 1) = v12;
            *((void *)v13 + 66) = (char *)v13 + 16;
            *((void *)v13 + 67) = 512;
            *((void *)v13 + 68) = 0;
            *((void *)v13 + 70) = 0;
            *((void *)v13 + 69) = 0;
            IPC::Encoder::encodeHeader(v13);
            uint64_t v25 = v13;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v24);
            float v14 = v8;
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v13, v14);
            LOBYTE(v20[0]) = 0;
            LOBYTE(v2objc_destroyWeak(this + 1) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v25, 0, (uint64_t)v20, 1);
            if ((_BYTE)v21)
            {
              uint64_t v16 = v20[0];
              v20[0] = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
            }
            char v17 = v25;
            uint64_t v25 = 0;
            if (v17)
            {
              IPC::Encoder::~Encoder(v17, v15);
              WTF::fastFree(v18, v19);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_198D00A58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setPlaybackRate(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v23 = a2;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 72);
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *((void *)this + 32);
      v20[0] = "PlaybackSessionModelContext";
      v20[1] = 28;
      uint64_t v21 = "setPlaybackRate";
      uint64_t v22 = v6;
      if (!*(unsigned char *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v20, &v23), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v7 + 8)) != 0)
      {
LABEL_17:
        double v8 = v23;
        uint64_t v9 = *(void *)(v3 + 32);
        uint64_t v24 = *((void *)this + 4);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            uint64_t v11 = *(void *)(v10 + 240);
            uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
            uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v13 = 659;
            *((void *)v13 + objc_destroyWeak(this + 1) = v12;
            *((void *)v13 + 66) = (char *)v13 + 16;
            *((void *)v13 + 67) = 512;
            *((void *)v13 + 68) = 0;
            *((void *)v13 + 70) = 0;
            *((void *)v13 + 69) = 0;
            IPC::Encoder::encodeHeader(v13);
            uint64_t v25 = v13;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v24);
            float v14 = v8;
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v13, v14);
            LOBYTE(v20[0]) = 0;
            LOBYTE(v2objc_destroyWeak(this + 1) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v25, 0, (uint64_t)v20, 1);
            if ((_BYTE)v21)
            {
              uint64_t v16 = v20[0];
              v20[0] = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
            }
            char v17 = v25;
            uint64_t v25 = 0;
            if (v17)
            {
              IPC::Encoder::~Encoder(v17, v15);
              WTF::fastFree(v18, v19);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_198D00C70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::selectAudioMediaOption(WebKit::PlaybackSessionModelContext *this, WTF::String *a2)
{
  uint64_t v22 = a2;
  if (*((WTF::String **)this + 21) != a2)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 72);
        if (!v5) {
          goto LABEL_18;
        }
        uint64_t v6 = *((void *)this + 32);
        v19[0] = "PlaybackSessionModelContext";
        v19[1] = 28;
        uint64_t v20 = "selectAudioMediaOption";
        uint64_t v21 = v6;
        if (!*(unsigned char *)(v5 + 12)
          || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19, &v22), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v4 = *(void *)(v7 + 8)) != 0)
        {
LABEL_18:
          double v8 = v22;
          uint64_t v9 = *(void *)(v4 + 32);
          uint64_t v24 = *((void *)this + 4);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              uint64_t v11 = *(void *)(v10 + 240);
              v23[0] = &v24;
              v23[1] = v8;
              uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
              uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v13 = 654;
              *((void *)v13 + objc_destroyWeak(this + 1) = v12;
              *((void *)v13 + 66) = (char *)v13 + 16;
              *((void *)v13 + 67) = 512;
              *((void *)v13 + 68) = 0;
              *((void *)v13 + 70) = 0;
              *((void *)v13 + 69) = 0;
              IPC::Encoder::encodeHeader(v13);
              uint64_t v25 = v13;
              IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(v13, (uint64_t)v23);
              LOBYTE(v19[0]) = 0;
              LOBYTE(v20) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v25, 0, (uint64_t)v19, 1);
              if ((_BYTE)v20)
              {
                uint64_t v15 = v19[0];
                v19[0] = 0;
                if (v15) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
              }
              uint64_t v16 = v25;
              uint64_t v25 = 0;
              if (v16)
              {
                IPC::Encoder::~Encoder(v16, v14);
                WTF::fastFree(v17, v18);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_198D00E88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v15 = *(IPC::Encoder **)(v13 - 40);
  *(void *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::selectLegibleMediaOption(WebKit::PlaybackSessionModelContext *this, WTF::String *a2)
{
  uint64_t v22 = a2;
  if (*((WTF::String **)this + 24) != a2)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 72);
        if (!v5) {
          goto LABEL_18;
        }
        uint64_t v6 = *((void *)this + 32);
        v19[0] = "PlaybackSessionModelContext";
        v19[1] = 28;
        uint64_t v20 = "selectLegibleMediaOption";
        uint64_t v21 = v6;
        if (!*(unsigned char *)(v5 + 12)
          || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19, &v22), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v4 = *(void *)(v7 + 8)) != 0)
        {
LABEL_18:
          double v8 = v22;
          uint64_t v9 = *(void *)(v4 + 32);
          uint64_t v24 = *((void *)this + 4);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              uint64_t v11 = *(void *)(v10 + 240);
              v23[0] = &v24;
              v23[1] = v8;
              uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
              uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v13 = 655;
              *((void *)v13 + objc_destroyWeak(this + 1) = v12;
              *((void *)v13 + 66) = (char *)v13 + 16;
              *((void *)v13 + 67) = 512;
              *((void *)v13 + 68) = 0;
              *((void *)v13 + 70) = 0;
              *((void *)v13 + 69) = 0;
              IPC::Encoder::encodeHeader(v13);
              uint64_t v25 = v13;
              IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(v13, (uint64_t)v23);
              LOBYTE(v19[0]) = 0;
              LOBYTE(v20) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v25, 0, (uint64_t)v19, 1);
              if ((_BYTE)v20)
              {
                uint64_t v15 = v19[0];
                v19[0] = 0;
                if (v15) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
              }
              uint64_t v16 = v25;
              uint64_t v25 = 0;
              if (v16)
              {
                IPC::Encoder::~Encoder(v16, v14);
                WTF::fastFree(v17, v18);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_198D0109C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v15 = *(IPC::Encoder **)(v13 - 40);
  *(void *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::togglePictureInPicture(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "togglePictureInPicture";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 664;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            float v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D01290(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::enterFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_7;
      }
      uint64_t v5 = *((void *)this + 32);
      v18[0] = "PlaybackSessionModelContext";
      v18[1] = 28;
      uint64_t v19 = "enterFullscreen";
      uint64_t v20 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_7:
        int v7 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)(v2 + 16) = v7 + 1;
        uint64_t v8 = *(void *)(v2 + 32);
        uint64_t v21 = *((void *)this + 4);
        if (v8)
        {
          uint64_t v9 = *(void *)(v8 + 8);
          if (v9)
          {
            CFRetain(*(CFTypeRef *)(v9 - 8));
            uint64_t v10 = *(void *)(v9 + 240);
            uint64_t v11 = *(void *)(*(void *)(v9 + 16) + 1928);
            uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v12 = 645;
            *((void *)v12 + objc_destroyWeak(this + 1) = v11;
            *((void *)v12 + 66) = (char *)v12 + 16;
            *((void *)v12 + 67) = 512;
            *((void *)v12 + 68) = 0;
            *((void *)v12 + 70) = 0;
            *((void *)v12 + 69) = 0;
            IPC::Encoder::encodeHeader(v12);
            uint64_t v22 = v12;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v21);
            LOBYTE(v18[0]) = 0;
            LOBYTE(v19) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v22, 0, (uint64_t)v18, 1);
            if ((_BYTE)v19)
            {
              uint64_t v14 = v18[0];
              v18[0] = 0;
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
            }
            uint64_t v15 = v22;
            uint64_t v22 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v13);
              WTF::fastFree(v16, v17);
            }
            CFRelease(*(CFTypeRef *)(v9 - 8));
            int v7 = *(_DWORD *)(v2 + 16) - 1;
          }
        }
        if (v7) {
          *(_DWORD *)(v2 + 16) = v7;
        }
        else {
          (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
        }
      }
    }
  }
}

void sub_198D014D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[4];
  }
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::exitFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_7;
      }
      uint64_t v5 = *((void *)this + 32);
      v18[0] = "PlaybackSessionModelContext";
      v18[1] = 28;
      uint64_t v19 = "exitFullscreen";
      uint64_t v20 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_7:
        int v7 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)(v2 + 16) = v7 + 1;
        uint64_t v8 = *(void *)(v2 + 32);
        uint64_t v21 = *((void *)this + 4);
        if (v8)
        {
          uint64_t v9 = *(void *)(v8 + 8);
          if (v9)
          {
            CFRetain(*(CFTypeRef *)(v9 - 8));
            uint64_t v10 = *(void *)(v9 + 240);
            uint64_t v11 = *(void *)(*(void *)(v9 + 16) + 1928);
            uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v12 = 647;
            *((void *)v12 + objc_destroyWeak(this + 1) = v11;
            *((void *)v12 + 66) = (char *)v12 + 16;
            *((void *)v12 + 67) = 512;
            *((void *)v12 + 68) = 0;
            *((void *)v12 + 70) = 0;
            *((void *)v12 + 69) = 0;
            IPC::Encoder::encodeHeader(v12);
            uint64_t v22 = v12;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v21);
            LOBYTE(v18[0]) = 0;
            LOBYTE(v19) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v22, 0, (uint64_t)v18, 1);
            if ((_BYTE)v19)
            {
              uint64_t v14 = v18[0];
              v18[0] = 0;
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
            }
            uint64_t v15 = v22;
            uint64_t v22 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v13);
              WTF::fastFree(v16, v17);
            }
            CFRelease(*(CFTypeRef *)(v9 - 8));
            int v7 = *(_DWORD *)(v2 + 16) - 1;
          }
        }
        if (v7) {
          *(_DWORD *)(v2 + 16) = v7;
        }
        else {
          (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
        }
      }
    }
  }
}

void sub_198D0175C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[4];
  }
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::enterInWindowFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "enterInWindowFullscreen";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 646;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D01994(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::exitInWindowFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "exitInWindowFullscreen";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 648;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D01B88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::toggleMuted(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 72);
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *((void *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      uint64_t v18 = "toggleMuted";
      uint64_t v19 = v5;
      if (!*(unsigned char *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (uint64_t v6 = *((void *)this + 3)) != 0)&& (v2 = *(void *)(v6 + 8)) != 0)
      {
LABEL_17:
        uint64_t v7 = *(void *)(v2 + 32);
        uint64_t v20 = *((void *)this + 4);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            uint64_t v9 = *(void *)(v8 + 240);
            uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 1928);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 663;
            *((void *)v11 + objc_destroyWeak(this + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v21 = v11;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              uint64_t v13 = v17[0];
              v17[0] = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_198D01D7C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setMuted(WebKit::PlaybackSessionModelContext *this, int a2)
{
  char v22 = a2;
  if (*((unsigned __int8 *)this + 217) != a2)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 72);
        if (!v5) {
          goto LABEL_18;
        }
        uint64_t v6 = *((void *)this + 32);
        v19[0] = "PlaybackSessionModelContext";
        v19[1] = 28;
        uint64_t v20 = "setMuted";
        uint64_t v21 = v6;
        if (!*(unsigned char *)(v5 + 12)
          || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v4 = *(void *)(v7 + 8)) != 0)
        {
LABEL_18:
          char v8 = v22;
          uint64_t v9 = *(void *)(v4 + 32);
          uint64_t v25 = *((void *)this + 4);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              uint64_t v11 = *(void *)(v10 + 240);
              double v23 = &v25;
              char v24 = v8;
              uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
              uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v13 = 658;
              *((void *)v13 + objc_destroyWeak(this + 1) = v12;
              *((void *)v13 + 66) = (char *)v13 + 16;
              *((void *)v13 + 67) = 512;
              *((void *)v13 + 68) = 0;
              *((void *)v13 + 70) = 0;
              *((void *)v13 + 69) = 0;
              IPC::Encoder::encodeHeader(v13);
              uint64_t v26 = v13;
              IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v13, (uint64_t)&v23);
              LOBYTE(v19[0]) = 0;
              LOBYTE(v20) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v26, 0, (uint64_t)v19, 1);
              if ((_BYTE)v20)
              {
                uint64_t v15 = v19[0];
                v19[0] = 0;
                if (v15) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
              }
              uint64_t v16 = v26;
              uint64_t v26 = 0;
              if (v16)
              {
                IPC::Encoder::~Encoder(v16, v14);
                WTF::fastFree(v17, v18);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_198D01F94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v15 = *(IPC::Encoder **)(v13 - 40);
  *(void *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setVolume(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v22 = a2;
  if (*((double *)this + 28) != a2)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 72);
        if (!v5) {
          goto LABEL_19;
        }
        uint64_t v6 = *((void *)this + 32);
        v19[0] = "PlaybackSessionModelContext";
        v19[1] = 28;
        uint64_t v20 = "setVolume";
        uint64_t v21 = v6;
        if (!*(unsigned char *)(v5 + 12)
          || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19, &v22), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v4 = *(void *)(v7 + 8)) != 0)
        {
LABEL_19:
          double v8 = v22;
          uint64_t v9 = *(void *)(v4 + 32);
          uint64_t v23 = *((void *)this + 4);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              uint64_t v11 = *(void *)(v10 + 240);
              uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
              uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v13 = 662;
              *((void *)v13 + objc_destroyWeak(this + 1) = v12;
              *((void *)v13 + 66) = (char *)v13 + 16;
              *((void *)v13 + 67) = 512;
              *((void *)v13 + 68) = 0;
              *((void *)v13 + 70) = 0;
              *((void *)v13 + 69) = 0;
              IPC::Encoder::encodeHeader(v13);
              char v24 = v13;
              IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v23);
              IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v13, v8);
              LOBYTE(v19[0]) = 0;
              LOBYTE(v20) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v24, 0, (uint64_t)v19, 1);
              if ((_BYTE)v20)
              {
                uint64_t v15 = v19[0];
                v19[0] = 0;
                if (v15) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
              }
              uint64_t v16 = v24;
              char v24 = 0;
              if (v16)
              {
                IPC::Encoder::~Encoder(v16, v14);
                WTF::fastFree(v17, v18);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_198D021B8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setPlayingOnSecondScreen(WebKit::PlaybackSessionModelContext *this, char a2)
{
  char v22 = a2;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 72);
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *((void *)this + 32);
      v19[0] = "PlaybackSessionModelContext";
      v19[1] = 28;
      uint64_t v20 = "setPlayingOnSecondScreen";
      uint64_t v21 = v6;
      if (!*(unsigned char *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19), (uint64_t v7 = *((void *)this + 3)) != 0)&& (v3 = *(void *)(v7 + 8)) != 0)
      {
LABEL_17:
        char v8 = v22;
        uint64_t v9 = *(void *)(v3 + 32);
        uint64_t v25 = *((void *)this + 4);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            uint64_t v11 = *(void *)(v10 + 240);
            uint64_t v23 = &v25;
            char v24 = v8;
            uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
            uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v13 = 660;
            *((void *)v13 + objc_destroyWeak(this + 1) = v12;
            *((void *)v13 + 66) = (char *)v13 + 16;
            *((void *)v13 + 67) = 512;
            *((void *)v13 + 68) = 0;
            *((void *)v13 + 70) = 0;
            *((void *)v13 + 69) = 0;
            IPC::Encoder::encodeHeader(v13);
            uint64_t v26 = v13;
            IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v13, (uint64_t)&v23);
            LOBYTE(v19[0]) = 0;
            LOBYTE(v20) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v26, 0, (uint64_t)v19, 1);
            if ((_BYTE)v20)
            {
              uint64_t v15 = v19[0];
              v19[0] = 0;
              if (v15) {
                (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
              }
            }
            uint64_t v16 = v26;
            uint64_t v26 = 0;
            if (v16)
            {
              IPC::Encoder::~Encoder(v16, v14);
              WTF::fastFree(v17, v18);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_198D023C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v15 = *(IPC::Encoder **)(v13 - 40);
  *(void *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged(WTF::StringImpl *this, double a2)
{
  uint64_t v2 = this;
  double v8 = a2;
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *((void *)this + 32);
        v7[0] = "PlaybackSessionModelContext";
        v7[1] = 28;
        v7[2] = "playbackStartedTimeChanged";
        void v7[3] = v6;
        if (*(unsigned char *)(v5 + 12))
        {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7, &v8);
          a2 = v8;
        }
      }
    }
  }
  *((double *)v2 + 7) = a2;
  *((unsigned char *)v2 + 64) = 0;
  return this;
}

void *WebKit::PlaybackSessionModelContext::durationChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v20 = a2;
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *((void *)this + 32);
        uint64_t v16 = "PlaybackSessionModelContext";
        uint64_t v17 = 28;
        uint64_t v18 = "durationChanged";
        uint64_t v19 = v6;
        if (*(unsigned char *)(v5 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v16, &v20);
          a2 = v20;
        }
      }
    }
  }
  *((double *)this + 9) = a2;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v16);
  uint64_t v7 = *((void *)this + 5);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 8 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v11 = (char *)this + 40;
  uint64_t v12 = v9;
  uint64_t v13 = v9;
  uint64_t v14 = v9;
  uint64_t v15 = v7 + 8 * v8;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  while (v17 != v12)
  {
    (*(void (**)(void, double))(**(void **)(*(void *)v17 + 8) + 48))(*(void *)(*(void *)v17 + 8), v20);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::bufferedTimeChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  double v21 = a2;
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *((void *)this + 32);
        uint64_t v17 = "PlaybackSessionModelContext";
        uint64_t v18 = 28;
        uint64_t v19 = "bufferedTimeChanged";
        uint64_t v20 = v6;
        if (*(unsigned char *)(v5 + 12))
        {
          if (WebKit2LogMedia && byte_1EB358068 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v17, &v21);
            a2 = v21;
          }
        }
      }
    }
  }
  *((double *)this + 1objc_destroyWeak(this + 1) = a2;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v17);
  uint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = v8 + 8 * v9;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v12 = (char *)this + 40;
  uint64_t v13 = v10;
  uint64_t v14 = v10;
  uint64_t v15 = v10;
  uint64_t v16 = v8 + 8 * v9;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    (*(void (**)(void, double))(**(void **)(*(void *)v18 + 8) + 64))(*(void *)(*(void *)v18 + 8), v21);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::canPlayFastReverseChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((unsigned char *)this + 144) = a2;
  uint64_t v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 96))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(void *)a1 + 24 * v5), (WTF::StringImpl *)(*(void *)a1 + 24 * v4));
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    uint64_t v6 = *(void *)a2;
    if (v4)
    {
      uint64_t v7 = v6 + 24 * v4;
      uint64_t v8 = *(void *)a1;
      do
      {
        *(unsigned char *)uint64_t v8 = *(unsigned char *)v6;
        WTF::String::operator=((uint64_t *)(v8 + 8), (WTF::StringImpl **)(v6 + 8));
        *(unsigned char *)(v8 + 16) = *(unsigned char *)(v6 + 16);
        v6 += 24;
        v8 += 24;
      }
      while (v6 != v7);
      uint64_t v6 = *(void *)a2;
      unsigned int v9 = a1[3];
    }
    else
    {
      unsigned int v9 = 0;
    }
    unsigned int v10 = a2[3];
    if (v9 != v10)
    {
      uint64_t v11 = *(void *)a1 + 24 * v9;
      uint64_t v12 = v6 + 24 * v9;
      do
      {
        *(unsigned char *)uint64_t v11 = *(unsigned char *)v12;
        uint64_t v13 = *(_DWORD **)(v12 + 8);
        if (v13) {
          *v13 += 2;
        }
        *(void *)(v11 + 8) = v13;
        *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
        v12 += 24;
        v11 += 24;
      }
      while (v12 != v6 + 24 * v10);
    }
    a1[3] = v10;
  }
  return a1;
}

void *WebKit::PlaybackSessionModelContext::audioMediaSelectionIndexChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((void *)this + 2objc_destroyWeak(this + 1) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 120))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::legibleMediaSelectionIndexChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((void *)this + 24) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 128))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabledChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((unsigned char *)this + 216) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 144))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::mutedChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((unsigned char *)this + 217) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 152))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::volumeChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  *((double *)this + 28) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, double))(**(void **)(*(void *)v15 + 8) + 160))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::pictureInPictureSupportedChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((unsigned char *)this + 23objc_destroyWeak(this + 2) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 168))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void *WebKit::PlaybackSessionModelContext::isInWindowFullscreenActiveChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  *((unsigned char *)this + 234) = a2;
  unsigned int v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v14);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unsigned int v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 184))(*(void *)(*(void *)v15 + 8), a2);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void WebKit::PlaybackSessionManagerProxy::~PlaybackSessionManagerProxy(WebKit::PlaybackSessionManagerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9CF290;
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  v11[0] = "VideoPresentationManagerProxy";
  v11[1] = 30;
  v11[2] = "~PlaybackSessionManagerProxy";
  v11[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5 && *(void *)(v5 + 8)) {
    WebKit::PlaybackSessionManagerProxy::invalidate(this, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 8);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v8, a2);
  }
  unsigned int v9 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v10);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlaybackSessionManagerProxy::~PlaybackSessionManagerProxy(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198D02FFC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(unsigned int **)(v2 + 72);
  *(void *)(v2 + 7objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v2 + 64);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = *(void *)(v2 + 40);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *(unsigned int **)(v2 + 32);
  *(void *)(v2 + 3objc_destroyWeak(this + 2) = 0;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  *(void *)uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v8);
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionManagerProxy::invalidate(WebKit::PlaybackSessionManagerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  v19[0] = "VideoPresentationManagerProxy";
  v19[1] = 30;
  void v19[2] = "invalidate";
  v19[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 - 8));
      uint64_t v7 = *(void *)(*((void *)this + 4) + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(v6 + 240) + 152, 0x31u, *(void *)(*(void *)(v8 + 32) + 1928));
      uint64_t v10 = (unsigned int *)*((void *)this + 4);
      *((void *)this + 4) = 0;
      if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
  }
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  uint64_t v12 = *((void *)this + 8);
  if (v12)
  {
    *((void *)this + 8) = 0;
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  if (v11)
  {
    uint64_t v13 = *(unsigned int *)(v11 - 4);
    uint64_t v14 = v11 + 24 * v13;
    if (*(_DWORD *)(v11 - 12))
    {
      uint64_t v15 = v11;
      if (v13)
      {
        uint64_t v16 = 24 * v13;
        uint64_t v15 = v11;
        while ((unint64_t)(*(void *)v15 + 1) <= 1)
        {
          v15 += 24;
          v16 -= 24;
          if (!v16)
          {
            uint64_t v15 = v14;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    uint64_t v15 = v11 + 24 * v13;
  }
  else
  {
    uint64_t v15 = 0;
    LODWORD(v13) = 0;
  }
  uint64_t v14 = v11 + 24 * v13;
  if (v11)
  {
LABEL_21:
    uint64_t v17 = v11 + 24 * *(unsigned int *)(v11 - 4);
    goto LABEL_26;
  }
  uint64_t v17 = 0;
LABEL_26:
  while (v15 != v17)
  {
    WebCore::PlaybackSessionInterfaceAVKit::invalidate(*(WebCore::PlaybackSessionInterfaceAVKit **)(v15 + 16));
    uint64_t v18 = v15 + 24;
    uint64_t v15 = v14;
    if (v18 != v14)
    {
      uint64_t v15 = v18;
      while ((unint64_t)(*(void *)v15 + 1) <= 1)
      {
        v15 += 24;
        if (v15 == v14)
        {
          uint64_t v15 = v14;
          break;
        }
      }
    }
  }
  if (v11) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, a2);
  }
}

void sub_198D0329C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 40), 0), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *uint64_t v11 = a2;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x108);
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 1;
    *(void *)uint64_t v15 = &unk_1EE9CF078;
    uint64_t v16 = *(void *)(a1 + 24);
    if (v16) {
      goto LABEL_17;
    }
    uint64_t v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = a1;
    uint64_t v18 = *(unsigned int **)(a1 + 24);
    *(void *)(a1 + 24) = v16;
    if (!v18) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if (v16) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    *(void *)(v15 + 40) = 0;
    *(void *)(v15 + 24) = v16;
    *(void *)(v15 + 3objc_destroyWeak(this + 2) = a2;
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0;
    *(unsigned char *)(v15 + 64) = 0;
    *(void *)(v15 + 80) = 0;
    *(void *)(v15 + 88) = 0;
    *(void *)(v15 + 7objc_destroyWeak(this + 2) = 0;
    *(_WORD *)(v15 + 96) = 0;
    *(void *)(v15 + 104) = 0;
    *(void *)(v15 + 11objc_destroyWeak(this + 2) = 0;
    WebCore::TimeRanges::create((WebCore::TimeRanges *)v16);
    *(void *)(v15 + 208) = 0;
    *(_WORD *)(v15 + 216) = 0;
    *(unsigned char *)(v15 + 248) = 0;
    *(void *)(v15 + 256) = 0;
    *(void *)(v15 + 128) = 0;
    *(void *)(v15 + 136) = 0;
    *(unsigned char *)(v15 + 144) = 0;
    *(_OWORD *)(v15 + 15objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v15 + 168) = 0u;
    *(_OWORD *)(v15 + 184) = 0u;
    *(_WORD *)(v15 + 200) = 0;
    *(void *)(v15 + 224) = 0;
    *(_DWORD *)(v15 + 23objc_destroyWeak(this + 1) = 0;
    WebCore::PlaybackSessionInterfaceAVKit::create();
    uint64_t v19 = (_DWORD *)v11[1];
    v11[1] = v15;
    if (v19)
    {
      if (v19[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[4];
      }
    }
    uint64_t v20 = (_DWORD *)v11[2];
    v11[2] = v28;
    if (v20)
    {
      if (v20[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
      }
      else {
        --v20[4];
      }
    }
    uint64_t v21 = *v5;
    if (*v5) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 1objc_destroyWeak(this + 2) = v22;
    uint64_t v23 = *v5;
    if (*v5) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25) {
        return v11 + 1;
      }
    }
    else if (3 * v26 > 4 * v25)
    {
      return v11 + 1;
    }
    uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, v11);
    return v11 + 1;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1) {
      uint64_t v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *uint64_t v13 = 0;
        v13[1] = 0;
        uint64_t v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_198D035E4(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::PlaybackSessionManagerProxy::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 64), &v19);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  }
  else {
    int v6 = 0;
  }
  if (v6 == result) {
    return result;
  }
  if (*((_DWORD *)result + 2) != 1)
  {
    --*((_DWORD *)result + 2);
    return result;
  }
  if (v5)
  {
    unint64_t v7 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v7 == result) {
      goto LABEL_15;
    }
LABEL_13:
    if (v7 != result) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
    }
    goto LABEL_15;
  }
  if (result)
  {
    unint64_t v7 = 0;
    goto LABEL_13;
  }
LABEL_15:
  unint64_t v8 = (WebCore::PlaybackSessionInterfaceAVKit *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, v19)[1];
  ++*((_DWORD *)v8 + 4);
  WebCore::PlaybackSessionInterfaceAVKit::invalidate(v8);
  if (*((_DWORD *)v8 + 4) == 1) {
    (*(void (**)(WebCore::PlaybackSessionInterfaceAVKit *))(*(void *)v8 + 8))(v8);
  }
  else {
    --*((_DWORD *)v8 + 4);
  }
  unint64_t v9 = (uint64_t *)(a1 + 40);
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 40), &v19);
  unsigned int v10 = result;
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
    if (v12 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v12 = 0;
  }
  if (v12 != result)
  {
    *uint64_t result = -1;
    uint64_t v13 = (_DWORD *)result[2];
    void v10[2] = 0;
    if (v13)
    {
      if (v13[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[4];
      }
    }
    uint64_t result = (uint64_t *)v10[1];
    v10[1] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 4);
      }
    }
    ++*(_DWORD *)(*v9 - 16);
    uint64_t v14 = *v9;
    if (*v9) {
      int v15 = *(_DWORD *)(v14 - 12) - 1;
    }
    else {
      int v15 = -1;
    }
    *(_DWORD *)(v14 - 1objc_destroyWeak(this + 2) = v15;
    uint64_t v16 = *v9;
    if (*v9)
    {
      unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
      unsigned int v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9) {
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 40), v18 >> 1, 0);
      }
    }
  }
  return result;
}

void sub_198D038C8(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionManagerProxy::setUpPlaybackControlsManagerWithID(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 != a2)
  {
    if (v4) {
      WebKit::PlaybackSessionManagerProxy::removeClientForContext(a1, v4);
    }
    *(void *)(a1 + 48) = a2;
    *(unsigned char *)(a1 + 56) = a3;
    unint64_t v7 = (_DWORD *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2)[1];
    int v8 = v7[4];
    void v7[4] = v8 + 1;
    if (v8) {
      void v7[4] = v8;
    }
    else {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 64), &v12, &v13, (uint64_t)v11);
    ++*(_DWORD *)(v11[0] + 8);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        CFRetain(*(CFTypeRef *)(v10 - 8));
        WebKit::WebPageProxy::videoControlsManagerDidChange((WebKit::WebPageProxy *)(v10 - 16));
        CFRelease(*(CFTypeRef *)(v10 - 8));
      }
    }
  }
}

void WebKit::PlaybackSessionManagerProxy::clearPlaybackControlsManager(WebKit::PlaybackSessionManagerProxy *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1)
  {
    WebKit::PlaybackSessionManagerProxy::removeClientForContext((uint64_t)this, v1);
    *((void *)this + 6) = 0;
    *((unsigned char *)this + 56) = 0;
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        CFRetain(*(CFTypeRef *)(v4 - 8));
        WebKit::WebPageProxy::videoControlsManagerDidChange((WebKit::WebPageProxy *)(v4 - 16));
        uint64_t v5 = *(const void **)(v4 - 8);
        CFRelease(v5);
      }
    }
  }
}

void WebKit::PlaybackSessionManagerProxy::currentTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(*v6 + 16) + 1;
  double v33 = a3;
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 72);
      if (v10)
      {
        uint64_t v11 = *(void *)(v7 + 256);
        uint64_t v29 = "PlaybackSessionModelContext";
        uint64_t v30 = 28;
        int v31 = "currentTimeChanged";
        uint64_t v32 = v11;
        if (*(unsigned char *)(v10 + 12))
        {
          if (WebKit2LogMedia && byte_1EB358068 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v29, &v33);
            a3 = v33;
          }
        }
      }
    }
  }
  *(double *)(v7 + 80) = a3;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "systemUptime");
  double v13 = v12;
  if (*(unsigned char *)(v7 + 64)) {
    WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged((WTF::StringImpl *)v7, v33);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v7 + 40), &v29);
  uint64_t v14 = *(void *)(v7 + 40);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    uint64_t v16 = v14 + 8 * v15;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v24 = v7 + 40;
  uint64_t v25 = v16;
  uint64_t v26 = v16;
  uint64_t v27 = v16;
  uint64_t v28 = v14 + 8 * v15;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
  while (v30 != v25)
  {
    (*(void (**)(void, double, double))(**(void **)(*(void *)v30 + 8) + 56))(*(void *)(*(void *)v30 + 8), v33, v13);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
  }
  if (*(_DWORD *)(v7 + 16) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else {
    --*(_DWORD *)(v7 + 16);
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 8);
    if (v18)
    {
      CFRetain(*(CFTypeRef *)(v18 - 8));
      uint64_t v19 = *(void *)(v18 + 16);
      int v20 = *(unsigned __int8 *)(v19 + 2496);
      uint64_t v21 = *(void *)(v19 + 2488);
      if (v20) {
        BOOL v22 = v21 == a2;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22) {
        WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)(v18 - 16));
      }
      uint64_t v23 = *(const void **)(v18 - 8);
      CFRelease(v23);
    }
  }
}

void sub_198D03CB8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void *WebKit::PlaybackSessionManagerProxy::bufferedTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::bufferedTimeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D03DB0(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManagerProxy::seekableRangesVectorChanged(WebCore::TimeRanges *a1, uint64_t a2, uint64_t *a3, double a4, double a5)
{
  v58[3] = *MEMORY[0x1E4F143B8];
  WebCore::TimeRanges::create((uint64_t *)&v46, a1);
  uint64_t v10 = *((unsigned int *)a3 + 3);
  if (v10)
  {
    uint64_t v11 = *a3;
    uint64_t v12 = v11 + 16 * v10;
    do
    {
      WebCore::TimeRanges::add();
      v11 += 16;
    }
    while (v11 != v12);
  }
  double v13 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface((uint64_t)a1, a2);
  uint64_t v15 = *v13;
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(*v13 + 16) + 1;
  uint64_t v16 = v46;
  uint64_t v17 = *(void *)(v15 + 24);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      if (v19)
      {
        int v20 = *(const char **)(v15 + 256);
        long long v47 = "PlaybackSessionModelContext";
        uint64_t v48 = 28;
        long long v49 = "seekableRangesChanged";
        long long v50 = v20;
        if (*(unsigned char *)(v19 + 12))
        {
          if (WebKit2LogMedia && byte_1EB358068 >= 3u)
          {
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v54, (WTF::Logger::LogSiteIdentifier *)&v47);
            WebCore::PlatformTimeRanges::toString((uint64_t *)&v53, (WTF *)((char *)v16 + 8));
            *(void *)&long long buf = v54;
            v52[0] = v53;
            uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v52, &v55);
            if (!v55)
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v23 = v53;
            uint64_t v53 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v22);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
            uint64_t v24 = v54;
            int v54 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v22);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
            uint64_t v25 = qword_1EB358078;
            uint64_t v26 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
            if (v26)
            {
              WTF::String::utf8();
              uint64_t v27 = v52[0] ? (char *)v52[0] + 16 : 0;
              LODWORD(buf) = 136446210;
              *(void *)((char *)&buf + 4) = v27;
              _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              uint64_t v26 = v52[0];
              v52[0] = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 1) {
                  uint64_t v26 = (WTF *)WTF::fastFree(v26, v14);
                }
                else {
                  --*(_DWORD *)v26;
                }
              }
            }
            if (WebKit2LogMedia && byte_1EB358068 >= 3u)
            {
              uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v29 = *v28;
                if (v29) {
                  break;
                }
                int v30 = *v28;
                atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
                if (v30 == v29)
                {
                  uint64_t v31 = WTF::Logger::observers(v26);
                  uint64_t v32 = *(unsigned int *)(v31 + 12);
                  if (v32)
                  {
                    double v33 = *(uint64_t **)v31;
                    uint64_t v34 = *(void *)v31 + 8 * v32;
                    do
                    {
                      uint64_t v35 = *v33;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v47);
                      int v57 = 0;
                      WebCore::PlatformTimeRanges::toString(v58, (WTF *)((char *)v16 + 8));
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v52, (uint64_t)&buf, 2uLL);
                      (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v35 + 16))(v35, &WebKit2LogMedia, 3, v52);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v36);
                      for (uint64_t i = 24; i != -8; i -= 16)
                      {
                        uint64_t v38 = *(WTF::StringImpl **)((char *)&buf + i);
                        *(void *)((char *)&buf + i) = 0;
                        if (v38)
                        {
                          if (*(_DWORD *)v38 == 2) {
                            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v14);
                          }
                          else {
                            *(_DWORD *)v38 -= 2;
                          }
                        }
                      }
                      ++v33;
                    }
                    while (v33 != (uint64_t *)v34);
                  }
                  int v39 = 1;
                  atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
                  if (v39 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                  break;
                }
              }
            }
            uint64_t v40 = v55;
            uint64_t v55 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2) {
                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v14);
              }
              else {
                *(_DWORD *)v40 -= 2;
              }
            }
          }
        }
      }
    }
  }
  ++*(_DWORD *)v16;
  uint64_t v41 = *(void *)(v15 + 120);
  *(void *)(v15 + 120) = v16;
  if (v41) {
    WTF::RefCounted<WebCore::TimeRanges>::deref(v41, v14);
  }
  *(double *)(v15 + 128) = a4;
  *(double *)(v15 + 136) = a5;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v15 + 40), &buf);
  uint64_t v42 = *(void *)(v15 + 40);
  if (v42)
  {
    uint64_t v43 = *(unsigned int *)(v42 - 4);
    uint64_t v44 = (const char *)(v42 + 8 * v43);
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v43 = 0;
  }
  long long v47 = (const char *)(v15 + 40);
  uint64_t v48 = (uint64_t)v44;
  long long v49 = v44;
  long long v50 = v44;
  uint64_t v51 = v42 + 8 * v43;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v47);
  while (*((void *)&buf + 1) != v48)
  {
    (*(void (**)(void, WTF *, double, double))(**(void **)(**((void **)&buf + 1) + 8) + 88))(*(void *)(**((void **)&buf + 1) + 8), v16, a4, a5);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
  }
  if (*(_DWORD *)(v15 + 16) == 1) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  else {
    --*(_DWORD *)(v15 + 16);
  }
  uint64_t result = (uint64_t)v46;
  long long v46 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::TimeRanges>::deref(result, v45);
  }
  return result;
}

void sub_198D042AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  int v25 = 1;
  atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
  if (v25 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (v22[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
  }
  else {
    --v22[4];
  }
  if (a10) {
    WTF::RefCounted<WebCore::TimeRanges>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::canPlayFastReverseChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::canPlayFastReverseChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D044C0(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::audioMediaSelectionOptionsChanged(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(*v6 + 16) + 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 152), a3);
  *(void *)(v7 + 168) = a4;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v7 + 40), &v18);
  uint64_t v8 = *(void *)(v7 + 40);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = v8 + 8 * v9;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v13 = v7 + 40;
  uint64_t v14 = v10;
  uint64_t v15 = v10;
  uint64_t v16 = v10;
  uint64_t v17 = v8 + 8 * v9;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  while (v19 != v14)
  {
    (*(void (**)(void, unsigned int *, uint64_t))(**(void **)(*(void *)v19 + 8) + 104))(*(void *)(*(void *)v19 + 8), a3, a4);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  if (*(_DWORD *)(v7 + 16) == 1)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (void *)v12(v7);
  }
  else
  {
    --*(_DWORD *)(v7 + 16);
  }
  return result;
}

void sub_198D0464C(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionOptionsChanged(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(*v6 + 16) + 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 176), a3);
  *(void *)(v7 + 19objc_destroyWeak(this + 2) = a4;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v7 + 40), &v18);
  uint64_t v8 = *(void *)(v7 + 40);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = v8 + 8 * v9;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v13 = v7 + 40;
  uint64_t v14 = v10;
  uint64_t v15 = v10;
  uint64_t v16 = v10;
  uint64_t v17 = v8 + 8 * v9;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  while (v19 != v14)
  {
    (*(void (**)(void, unsigned int *, uint64_t))(**(void **)(*(void *)v19 + 8) + 112))(*(void *)(*(void *)v19 + 8), a3, a4);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  if (*(_DWORD *)(v7 + 16) == 1)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (void *)v12(v7);
  }
  else
  {
    --*(_DWORD *)(v7 + 16);
  }
  return result;
}

void sub_198D047DC(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::audioMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::audioMediaSelectionIndexChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D048B8(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::legibleMediaSelectionIndexChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04990(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::externalPlaybackPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v8 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v9 = *v8;
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(*v8 + 16) + 1;
  *(unsigned char *)(v9 + 200) = a3;
  *(unsigned char *)(v9 + 20objc_destroyWeak(this + 1) = a4;
  WTF::String::operator=((uint64_t *)(v9 + 208), a5);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v9 + 40), &v20);
  uint64_t v10 = *(void *)(v9 + 40);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 - 4);
    uint64_t v12 = v10 + 8 * v11;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v15 = v9 + 40;
  uint64_t v16 = v12;
  uint64_t v17 = v12;
  uint64_t v18 = v12;
  uint64_t v19 = v10 + 8 * v11;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v15);
  while (v21 != v16)
  {
    (*(void (**)(void, uint64_t, uint64_t, WTF::StringImpl **))(**(void **)(*(void *)v21 + 8) + 136))(*(void *)(*(void *)v21 + 8), a3, a4, a5);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v20);
  }
  if (*(_DWORD *)(v9 + 16) == 1)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return (void *)v14(v9);
  }
  else
  {
    --*(_DWORD *)(v9 + 16);
  }
  return result;
}

void sub_198D04B34(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabledChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabledChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04C10(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::mutedChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::mutedChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04CE8(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::volumeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::volumeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04DCC(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::durationChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::durationChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04EB0(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::PlaybackSessionManagerProxy::playbackStartedTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WTF::StringImpl *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WTF::StringImpl *))(*(void *)v5 + 8);
    return (WTF::StringImpl *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D04F94(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionManagerProxy::rateChanged(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t v8 = a2;
  v70[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v11 = *v10;
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(*v10 + 16) + 1;
  uint64_t v12 = *(void *)(v11 + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 72);
      if (v14)
      {
        uint64_t v15 = *(const char **)(v11 + 256);
        uint64_t v53 = "PlaybackSessionModelContext";
        uint64_t v54 = 28;
        uint64_t v55 = "rateChanged";
        int v56 = v15;
        if (*(unsigned char *)(v14 + 12))
        {
          uint64_t v16 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v62, (WTF::Logger::LogSiteIdentifier *)&v53);
          WTF::String::number((uint64_t *)&v61, v16, a4);
          uint64_t v17 = (WTF::String *)WTF::String::String((WTF::String *)&v60, ", defaultPlaybackRate");
          WTF::String::number((uint64_t *)&v59, v17, a5);
          WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, &v63);
          uint64_t v19 = v59;
          char v59 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v18);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          uint64_t v20 = v60;
          char v60 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v18);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          uint64_t v21 = v61;
          char v61 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v18);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          BOOL v22 = v62;
          long long v62 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v18);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v23 = qword_1EB358078;
          uint64_t v24 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
          if (v24)
          {
            WTF::String::utf8();
            uint64_t v26 = v58[0] ? (char *)v58[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)char v65 = v26;
            _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v24 = v58[0];
            v58[0] = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1) {
                uint64_t v24 = (WTF *)WTF::fastFree(v24, v25);
              }
              else {
                --*(_DWORD *)v24;
              }
            }
          }
          if (WebKit2LogMedia)
          {
            uint64_t v27 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v28 = *v27;
              if (v28) {
                break;
              }
              int v29 = *v27;
              atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v29, v28 | 1, memory_order_acquire, memory_order_acquire);
              if (v29 == v28)
              {
                uint64_t v52 = v8;
                uint64_t v30 = WTF::Logger::observers(v24);
                uint64_t v31 = *(unsigned int *)(v30 + 12);
                if (v31)
                {
                  uint64_t v32 = *(uint64_t **)v30;
                  uint64_t v33 = *(void *)v30 + 8 * v31;
                  do
                  {
                    uint64_t v34 = *v32;
                    *(_DWORD *)long long buf = 0;
                    uint64_t v35 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v65[4], (WTF::Logger::LogSiteIdentifier *)&v53);
                    int v66 = 0;
                    WTF::String::number(&v67, v35, a4);
                    int v68 = 0;
                    uint64_t v36 = (WTF::String *)WTF::String::String((WTF::String *)v69, ", defaultPlaybackRate");
                    v69[2] = 0;
                    WTF::String::number(v70, v36, a5);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v58, (uint64_t)buf, 4uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v34 + 16))(v34, &WebKit2LogMedia, 0, v58);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v37);
                    for (uint64_t i = 56; i != -8; i -= 16)
                    {
                      int v39 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v39)
                      {
                        if (*(_DWORD *)v39 == 2) {
                          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v25);
                        }
                        else {
                          *(_DWORD *)v39 -= 2;
                        }
                      }
                    }
                    ++v32;
                  }
                  while (v32 != (uint64_t *)v33);
                }
                int v40 = 1;
                atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
                uint64_t v8 = v52;
                if (v40 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          uint64_t v41 = v63;
          long long v63 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
        }
      }
    }
  }
  *(unsigned char *)(v11 + 96) = a3;
  *(double *)(v11 + 104) = a5;
  *(double *)(v11 + 11objc_destroyWeak(this + 2) = a4;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v11 + 40), buf);
  uint64_t v42 = *(void *)(v11 + 40);
  if (v42)
  {
    uint64_t v43 = *(unsigned int *)(v42 - 4);
    uint64_t v44 = (const char *)(v42 + 8 * v43);
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v43 = 0;
  }
  uint64_t v53 = (const char *)(v11 + 40);
  uint64_t v54 = (uint64_t)v44;
  uint64_t v55 = v44;
  int v56 = v44;
  uint64_t v57 = v42 + 8 * v43;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v53);
  while (*(void *)&v65[4] != v54)
  {
    (*(void (**)(void, void, double, double))(**(void **)(**(void **)&v65[4] + 8) + 80))(*(void *)(**(void **)&v65[4] + 8), *(unsigned __int8 *)(v11 + 96), *(double *)(v11 + 112), *(double *)(v11 + 104));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (*(_DWORD *)(v11 + 16) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  else {
    --*(_DWORD *)(v11 + 16);
  }
  uint64_t v45 = *(void *)(a1 + 32);
  if (v45)
  {
    uint64_t v46 = *(void *)(v45 + 8);
    if (v46)
    {
      CFRetain(*(CFTypeRef *)(v46 - 8));
      uint64_t v47 = *(void *)(v46 + 16);
      int v48 = *(unsigned __int8 *)(v47 + 2496);
      uint64_t v49 = *(void *)(v47 + 2488);
      if (v48) {
        BOOL v50 = v49 == v8;
      }
      else {
        BOOL v50 = 0;
      }
      if (v50) {
        WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)(v46 - 16));
      }
      uint64_t v51 = *(const void **)(v46 - 8);
      CFRelease(v51);
    }
  }
}

void sub_198D05524(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27)
{
  int v29 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (v27[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
  }
  else {
    --v27[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::pictureInPictureSupportedChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::pictureInPictureSupportedChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D057AC(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlaybackSessionManagerProxy::isInWindowFullscreenActiveChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  uint64_t v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  uint64_t result = WebKit::PlaybackSessionModelContext::isInWindowFullscreenActiveChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(void *)v5 + 8);
    return (void *)v7(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 4);
  }
  return result;
}

void sub_198D05884(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabled(WebKit::PlaybackSessionManagerProxy *this)
{
  uint64_t v2 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 5, (void *)this + 6);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  if (v3) {
    v3 += 3 * *((unsigned int *)v3 - 1);
  }
  return v3 == v2 || *(unsigned char *)(v2[1] + 216) != 0;
}

uint64_t WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabled(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 216);
}

uint64_t *WebKit::PlaybackSessionManagerProxy::controlsManagerInterface@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = this[6];
  if (v3)
  {
    this = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface((uint64_t)this, v3);
    uint64_t v4 = this[1];
    ++*(_DWORD *)(v4 + 16);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return this;
}

BOOL WebKit::PlaybackSessionManagerProxy::isPaused(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 40), &v9);
  uint64_t v4 = *(uint64_t **)(a1 + 40);
  if (v4) {
    v4 += 3 * *((unsigned int *)v4 - 1);
  }
  if (v4 == v3) {
    return 0;
  }
  uint64_t v5 = v3[1];
  int v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = v6 + 1;
  BOOL v7 = (*(unsigned char *)(v5 + 96) & 3) == 0;
  if (v6) {
    *(_DWORD *)(v5 + 16) = v6;
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v7;
}

uint64_t WebKit::PlaybackSessionModelContext::isStalled(WebKit::PlaybackSessionModelContext *this)
{
  return (*((unsigned __int8 *)this + 96) >> 1) & 1;
}

uint64_t WebKit::PlaybackSessionManagerProxy::setLogIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  int v5 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v5 + 1;
  *(void *)(result + 256) = a3;
  if (v5)
  {
    *(_DWORD *)(result + 16) = v5;
  }
  else
  {
    int v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t API::NavigationClient::didChangeBackForwardList()
{
  return 0;
}

uint64_t WebKit::PageClient::isViewVisibleOrOccluded(WebKit::PageClient *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t WebKit::PageClient::isVisuallyIdle(WebKit::PageClient *this)
{
  return (*(unsigned int (**)(WebKit::PageClient *))(*(void *)this + 72))(this) ^ 1;
}

uint64_t WebKit::PageClient::viewLayerHostingMode(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::processWillSwap(WebKit::PageClient *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 136))();
}

uint64_t WebKit::PageClient::handleRunOpenPanel()
{
  return 0;
}

uint64_t WebKit::PageClient::showShareSheet()
{
  return 0;
}

uint64_t WebKit::PageClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a3);
}

void sub_198D05BC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClient::showBrowsingWarning(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[0] = 1;
  int v5 = 0;
  WTF::CompletionHandler<void ()(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&)>::operator()(a3);
  return ((uint64_t (*)(char *, char *))off_1EE9CF6B0[v5])(&v6, v4);
}

void sub_198D05C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9CF6B0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PageClient::rootViewToWebView(WebKit::PageClient *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

float WebKit::PageClient::webViewToRootView(WebKit::PageClient *this, const FloatPoint *a2)
{
  return a2->m_x;
}

uint64_t WebKit::PageClient::runModalJavaScriptDialog(uint64_t a1, uint64_t *a2)
{
  return WTF::CompletionHandler<void ()(void)>::operator()(a2);
}

uint64_t WebKit::PageClient::createVisibilityPropagationView(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::effectiveAppearanceIsDark(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::effectiveUserInterfaceLevelIsElevated(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::isTextRecognitionInFullscreenVideoEnabled(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::hasBrowsingWarning(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::dataOwnerForPasteboard()
{
  return 0;
}

uint64_t WebKit::PageClient::hasResizableWindows(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)>::operator()(a6);
  CFTypeRef cf = 0;
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v6);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v8);
}

void sub_198D05D8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v19);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v20);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::computeHasVisualSearchResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
}

uint64_t WebKit::PageClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return WTF::CompletionHandler<void ()(unsigned long long)>::operator()(a4);
}

uint64_t WebKit::PageClient::windowIsFrontWindowUnderMouse(WebKit::PageClient *this, const NativeWebMouseEvent *a2)
{
  return 0;
}

uint64_t WebKit::PageClient::activeTouchIdentifierForGestureRecognizer(WebKit::PageClient *this, UIGestureRecognizer *a2)
{
  return 0;
}

uint64_t WebKit::PlaybackSessionModelContext::ptrCount(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionModelContext::ptrCountWithoutThreadCheck(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionModelContext::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::PlaybackSessionModelContext::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

double WebKit::PlaybackSessionModelContext::playbackStartedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 7);
}

double WebKit::PlaybackSessionModelContext::duration(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 9);
}

double WebKit::PlaybackSessionModelContext::currentTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 10);
}

double WebKit::PlaybackSessionModelContext::bufferedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 11);
}

uint64_t WebKit::PlaybackSessionModelContext::isScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 97);
}

double WebKit::PlaybackSessionModelContext::defaultPlaybackRate(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 13);
}

double WebKit::PlaybackSessionModelContext::playbackRate(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 14);
}

uint64_t WebKit::PlaybackSessionModelContext::seekableRanges@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 120);
  ++*v2;
  *a2 = v2;
  return this;
}

double WebKit::PlaybackSessionModelContext::seekableTimeRangesLastModifiedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 16);
}

double WebKit::PlaybackSessionModelContext::liveUpdateInterval(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 17);
}

uint64_t WebKit::PlaybackSessionModelContext::canPlayFastReverse(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 144);
}

uint64_t WebKit::PlaybackSessionModelContext::audioMediaSelectionOptions@<X0>(WebKit::PlaybackSessionModelContext *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t *)this + 19);
}

uint64_t WebKit::PlaybackSessionModelContext::audioMediaSelectedIndex(WebKit::PlaybackSessionModelContext *this)
{
  return *((void *)this + 21);
}

uint64_t WebKit::PlaybackSessionModelContext::legibleMediaSelectionOptions@<X0>(WebKit::PlaybackSessionModelContext *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t *)this + 22);
}

uint64_t WebKit::PlaybackSessionModelContext::legibleMediaSelectedIndex(WebKit::PlaybackSessionModelContext *this)
{
  return *((void *)this + 24);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackEnabled(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 200);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackTargetType(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 201);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackLocalizedDeviceName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 208);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::PlaybackSessionModelContext::isMuted(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 217);
}

double WebKit::PlaybackSessionModelContext::volume(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 28);
}

uint64_t WebKit::PlaybackSessionModelContext::isPictureInPictureSupported(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t WebKit::PlaybackSessionModelContext::isPictureInPictureActive(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 233);
}

uint64_t WebKit::PlaybackSessionModelContext::isInWindowFullscreenActive(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 234);
}

uint64_t WebKit::PlaybackSessionModelContext::soundStageSize(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9CF308;
  *(void *)(v4 + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_198D06054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CF308;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CF308;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,SFSpeechRecognizerAuthorizationStatus)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9CF350;
  *(void *)(v4 + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2 == 3;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_198D0629C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CF350;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CF350;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *_ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPKvE_8__invokeESO_(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t _ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPvS1_S3_E_8__invokeESN_S1_S3_(uint64_t a1, uint64_t a2, __n128 a3)
{
  if (a2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 40) = 0;
    int v5 = (__n128 *)WTF::fastMalloc((WTF *)0x18);
    v5->n128_u64[0] = (unint64_t)&unk_1EE9CF3A8;
    v5->n128_u64[1] = v4;
    v5[1].n128_u64[0] = v3;
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 40) = 0;
    int v5 = (__n128 *)WTF::fastMalloc((WTF *)0x30);
    v5->n128_u64[0] = (unint64_t)&unk_1EE9CF3D0;
    v5[1] = a3;
    v5[2].n128_u64[0] = v7;
    v5[2].n128_u64[1] = v6;
  }
  long long v10 = v5;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(__n128 *))(v10->n128_u64[0] + 8))(v10);
  }
  return result;
}

void sub_198D06634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9CF3A8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF3A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEE4callEv(WTF::StringImpl *result)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 1);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = result;
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v11, 1);
    CFTypeRef v14 = 0;
    char v15 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v16, (uint64_t *)&v11);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v21, (uint64_t *)&v16);
    int v22 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()((uint64_t *)v2 + 2, (uint64_t)v21);
    if (v22 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CF368[v22])(&v20, v21);
    }
    int v22 = -1;
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
    int v5 = v18;
    CFTypeRef v18 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    unint64_t v6 = v17;
    uint64_t v17 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    unint64_t v7 = v16;
    uint64_t v16 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    CFTypeRef v8 = v14;
    CFTypeRef v14 = 0;
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v3);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    long long v10 = v12;
    long long v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v3);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t result = v11;
    long long v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198D069F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v30 = *(unsigned int *)(v28 - 48);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CF368[v30])(v28 - 129, v28 - 128);
  }
  *(_DWORD *)(v28 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9CF3D0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CFTypeRef v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF3D0;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CFTypeRef v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEE4callEv(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 32);
  if (v1 && *(void *)(v1 + 8))
  {
    double v2 = *(float *)(result + 24);
    float64x2_t v4 = vcvtq_f64_f32(*(float32x2_t *)(result + 16));
    double v5 = v2;
    int v6 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()((uint64_t *)(result + 40), (uint64_t)&v4);
    if (v6 != -1) {
      return ((uint64_t (*)(char *, float64x2_t *))off_1EE9CF368[v6])(&v3, &v4);
    }
  }
  return result;
}

void sub_198D06D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9CF368[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  float64x2_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  double v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v6 = &unk_1EE9CF428;
  v6[1] = a3;
  void v6[2] = v4;
  v6[3] = v5;
  CFTypeRef v8 = v6;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

void sub_198D06F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CF428;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF428;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(result + 24));
    }
  }
  return result;
}

Class ___ZN6WebKitL20initWKMarketplaceKitEv_block_invoke()
{
  WebKit::WebKitSwiftLibrary((WebKit *)1);
  Class result = objc_getClass("WKMarketplaceKit");
  qword_1EB359A50 = (uint64_t)result;
  WebKit::getWKMarketplaceKitClass = WebKit::WKMarketplaceKitFunction;
  return result;
}

uint64_t WebKit::WKMarketplaceKitFunction(WebKit *this)
{
  return qword_1EB359A50;
}

uint64_t WebKit::isMarketplaceKitURL(WebKit *this, const WTF::URL *a2)
{
  if (WTF::URL::protocolIs()) {
    return 1;
  }

  return WTF::URL::protocolIs();
}

WTF::StringImpl *WebKit::interceptMarketplaceKitNavigation(uint64_t *a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  int v6 = *(API::FrameInfo **)(*a1 + 16);
  if (v6)
  {
    API::FrameInfo::handle(v6, (uint64_t *)buf);
    uint64_t v7 = *(void *)(*(void *)buf + 16);
    uint64_t v2 = *(void *)(*(void *)buf + 24);
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
    CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
    uint64_t v5 = *a1;
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    LOBYTE(v7) = 0;
    unint64_t v8 = 0;
  }
  *(void *)&long long v44 = v8 | v7;
  *((void *)&v44 + objc_destroyWeak(this + 1) = v2;
  LOBYTE(v45) = v9;
  uint64_t v10 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 40));
  long long v11 = *(WTF::StringImpl **)v10;
  if (*(void *)v10) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v46 = v11;
  long long v12 = *(_OWORD *)(v10 + 24);
  long long v47 = *(_OWORD *)(v10 + 8);
  long long v48 = v12;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v13 = *(atomic_uint **)(a2 + 24);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v49 = v13;
  uint64_t v14 = *a1;
  if (*(unsigned __int8 *)(*a1 + 369) - 1 > 1
    || (*(void *)(v14 + 288)
      ? (char v15 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance)
      : (char v15 = 0),
        !v15
     || (*(unsigned char *)(v14 + 530) & 1) == 0
     || (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v14 + 688)), uint64_t v14 = *a1, v16)))
  {
    uint64_t v17 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      int v25 = *(unsigned __int8 *)(v14 + 369);
      uint64_t v26 = *(void *)(v14 + 288);
      uint64_t v27 = (WebCore::SecurityOriginData *)(v14 + 688);
      char v28 = *(unsigned char *)(v14 + 530);
      WebCore::SecurityOriginData::isNull(v27);
      if (v26) {
        uint64_t v30 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
      }
      else {
        uint64_t v30 = 0;
      }
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = (v25 - 1) < 2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v30 != 0;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v51[0]) = (v28 & 1) == 0;
      WORD2(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 6) = v29;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "NavigationState: can't handle MarketplaceKit navigation with shouldOpenExternalSchemes: %d, isProcessingUserGesture: %d, isRedirect: %d, requesterTopOriginIsNull: %d", buf, 0x1Au);
      uint64_t v14 = *a1;
    }
    if (*(void *)(v14 + 288)) {
      uint64_t v19 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
    }
    else {
      uint64_t v19 = 0;
    }
    if (!v19 || (*(unsigned char *)(v14 + 530) & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      char v20 = *(WTF::StringImpl **)buf;
      WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()((WTF::StringImpl *)&v44, *(WTF::StringImpl **)buf);
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    goto LABEL_50;
  }
  WebCore::SecurityOriginData::toURL((uint64_t *)buf, (WebCore::SecurityOriginData *)(v14 + 688));
  uint64_t v21 = (const void *)WTF::URL::operator NSURL *();
  uint64_t v23 = v21;
  if (v21) {
    CFRetain(v21);
  }
  uint64_t v24 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v22);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a1 + 40));
  uint64_t v31 = (const void *)WTF::URL::operator NSURL *();
  uint64_t v32 = v31;
  if (v31 && (uint64_t v33 = (WebKit *)CFRetain(v31), v23))
  {
    WebKit::getWKMarketplaceKitClass(v33);
    uint64_t v34 = objc_opt_respondsToSelector();
    if (v34)
    {
      WKMarketplaceKitClass = (void *)WebKit::getWKMarketplaceKitClass((WebKit *)v34);
      *(_OWORD *)long long buf = v44;
      uint64_t v36 = v46;
      uint64_t v46 = 0;
      uint64_t v49 = 0;
      *(void *)&v51[0] = v45;
      *((void *)&v51[0] + objc_destroyWeak(this + 1) = v36;
      long long v37 = v47;
      LODWORD(v47) = v47 & 0xFFFFFFFE;
      v51[1] = v37;
      v51[2] = v48;
      uint64_t v52 = v13;
      uint64_t v38 = malloc_type_malloc(0x68uLL, 0x10E004016032934uLL);
      *uint64_t v38 = MEMORY[0x1E4F14398];
      v38[1] = 50331650;
      v38[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
      void v38[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::descriptor;
      *((_OWORD *)v38 + objc_destroyWeak(this + 2) = *(_OWORD *)buf;
      v38[6] = *(void *)&v51[0];
      double v40 = WTF::URL::URL((uint64_t)(v38 + 7), (uint64_t *)v51 + 1);
      uint64_t v41 = (WTF::StringImpl *)*((void *)&v51[0] + 1);
      v38[12] = v52;
      uint64_t v52 = 0;
      *((void *)&v51[0] + objc_destroyWeak(this + 1) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v39);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      objc_msgSend(WKMarketplaceKitClass, "requestAppInstallationWithTopOrigin:url:completionHandler:", v23, v32, v38, v40);
      _Block_release(v38);
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v42 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v23 != 0;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v32 != 0;
      _os_log_error_impl(&dword_1985F2000, v42, OS_LOG_TYPE_ERROR, "NavigationState: can't handle MarketplaceKit navigation with requesterTopOriginURL: %d url: %d", buf, 0xEu);
    }
    if (!v32) {
      goto LABEL_48;
    }
  }
  CFRelease(v32);
LABEL_48:
  if (v23) {
    CFRelease(v23);
  }
LABEL_50:
  uint64_t v49 = 0;
  if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((WTF *)v13, v18);
  }
  Class result = v46;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v46, v18);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  return result;
}

void sub_198D07714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27)
{
  _Block_release(v27);
  CFRelease(v29);
  CFRelease(v28);
  if (a18 && atomic_fetch_add((atomic_uint *volatile)a18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a18);
    WTF::fastFree((WTF *)a18, v31);
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEE_block_invoke(WTF::RunLoop *a1, char a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9CF4F8;
  *(void *)(v5 + 8) = v4;
  *(unsigned char *)(v5 + 16) = a2;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_198D07920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c179_ZTSKZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEEE3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 3objc_destroyWeak(this + 2) = *(void *)(a2 + 32);
  return result;
}

void WebKit::trySOAuthorization(uint64_t *a1, WebKit::WebsiteDataStore **a2, const WTF::StringImpl *a3)
{
  if (*(unsigned char *)(*a1 + 281))
  {
    int v6 = WebKit::WebsiteDataStore::soAuthorizationCoordinator(a2[39], (const WebKit::WebPageProxy *)a2, a3);
    WebKit::SOAuthorizationCoordinator::tryAuthorize((uint64_t)v6, a1, (uint64_t)a2, (uint64_t *)a3);
  }
  else
  {
    uint64_t v7 = *(void (**)(void))(**(void **)a3 + 16);
    v7();
  }
}

WTF::StringImpl *WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (*((unsigned char *)result + 16))
  {
    uint64_t v2 = *((void *)result + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        long long v8 = *(_OWORD *)result;
        uint64_t v4 = (WTF::StringImpl *)*((void *)result + 3);
        if (v4) {
          *(_DWORD *)v4 += 2;
        }
        uint64_t v10 = v4;
        if (a2) {
          *(_DWORD *)a2 += 2;
        }
        char v9 = a2;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Can't handle MarketplaceKit link ", 34, (uint64_t *)&v10, (uint64_t)" due to error: ", 16, (uint64_t *)&v9, &v11);
        long long v17 = v8;
        v16[0] = 0;
        v16[1] = 0;
        long long v12 = &v17;
        __int16 v13 = 514;
        uint64_t v14 = &v11;
        char v15 = v16;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AddConsoleMessage>(*(void *)(v3 + 240), (uint64_t)&v12, *(void *)(*(void *)(v3 + 16) + 1928), 0);
        int v6 = v11;
        long long v11 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t v7 = v9;
        char v9 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v5);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        uint64_t result = v10;
        uint64_t v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}